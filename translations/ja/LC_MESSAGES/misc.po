# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
#
# Translators:
# Kashun YOSHIDA, 2017
# TAKAHASHI Shuuji <shuuji3@gmail.com>, 2017
# TAKAHASHI Shuuji <shuuji3@gmail.com>, 2017
# Kashun YOSHIDA, 2017
msgid ""
msgstr ""
"Project-Id-Version: django-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-12-27 13:18-0600\n"
"PO-Revision-Date: 2017-12-31 17:25+0000\n"
"Last-Translator: TAKAHASHI Shuuji <shuuji3@gmail.com>\n"
"Language-Team: Japanese (http://www.transifex.com/django/django-docs/"
"language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid "API stability"
msgstr "API の安定性"

msgid ""
"Django promises API stability and forwards-compatibility since version 1.0. "
"In a nutshell, this means that code you develop against a version of Django "
"will continue to work with future releases. You may need to make minor "
"changes when upgrading the version of Django your project uses: see the "
"\"Backwards incompatible changes\" section of the :doc:`release note </"
"releases/index>` for the version or versions to which you are upgrading."
msgstr ""
"Django は、バージョン 1.0 から、API の安定性と前方互換性を保証しています。つ"
"まり、あなたが開発対象とした Django のコードは、将来のリリースでも正しく動作"
"するということです。ただし、プロジェクトで使用している Django のバージョンを"
"上げるときは、小さな修正が必要になることもあります。詳しくは、バージョンアッ"
"プしようとしているバージョンの :doc:`リリースノート </releases/index>` の「後"
"方互換性を壊す変更点」のセクションを読んでください。"

msgid "What \"stable\" means"
msgstr "\"stable\" とは？"

msgid "In this context, stable means:"
msgstr "現在の文脈では、stable とは次のことを意味します。"

msgid ""
"All the public APIs (everything in this documentation) will not be moved or "
"renamed without providing backwards-compatible aliases."
msgstr ""
"すべてのパブリック API (このドキュメントに書かれている全部です) は、基本的に"
"移動や名称の変更が行われることがない。もし行われるとしても、後方互換性のため"
"のエイリアスが必ず提供される。"

msgid ""
"If new features are added to these APIs -- which is quite possible -- they "
"will not break or change the meaning of existing methods. In other words, "
"\"stable\" does not (necessarily) mean \"complete.\""
msgstr ""
"もし新しい機能がこれらの API に追加されるなら (よくあることです)、すでに存在"
"するメソッドの意味を変えたり、壊したりすることがない。別の言い方をすれ"
"ば、\"stable\" とは必ずしも \"complete\" (完全) であることを意味するわけでは"
"ない。"

msgid ""
"If, for some reason, an API declared stable must be removed or replaced, it "
"will be declared deprecated but will remain in the API for at least two "
"feature releases. Warnings will be issued when the deprecated method is "
"called."
msgstr ""
"何からの理由により、一度 stable であると宣言された API を削除したり置き換えた"
"りしなければならなくなった場合には、deprecated (廃止) であると明言され、最低"
"でも2つのフィーチャーリリースの間は削除されずに残される。deprecated となった"
"メソッドが呼び出されたときは、警告が出される。"

msgid ""
"See :ref:`official-releases` for more details on how Django's version "
"numbering scheme works, and how features will be deprecated."
msgstr ""
"Django のバージョンナンバリングのスキームの仕組みや、特定の機能の廃止されるプ"
"ロセスについて詳しく知りたければ、 :ref:`official-releases` を読んでくださ"
"い。"

msgid ""
"We'll only break backwards compatibility of these APIs if a bug or security "
"hole makes it completely unavoidable."
msgstr ""
"これらの API の後方互換性を壊すのは、バグやセキュリティホールを修正するのにや"
"むを得ない場合だけです。"

msgid "Stable APIs"
msgstr "stable な API"

msgid ""
"In general, everything covered in the documentation -- with the exception of "
"anything in the :doc:`internals area </internals/index>` is considered "
"stable."
msgstr ""
"一般に、ドキュメントに書かれていることは、:doc:`内部の仕組み </internals/"
"index>` の部分を除いて、すべて stable だと考えてもらって大丈夫です。"

msgid "Exceptions"
msgstr "例外"

msgid ""
"There are a few exceptions to this stability and backwards-compatibility "
"promise."
msgstr "安定性と後方互換性の保証について、数点だけ例外があります。"

msgid "Security fixes"
msgstr "セキュリティ上の修正"

msgid ""
"If we become aware of a security problem -- hopefully by someone following "
"our :ref:`security reporting policy <reporting-security-issues>` -- we'll do "
"everything necessary to fix it. This might mean breaking backwards "
"compatibility; security trumps the compatibility guarantee."
msgstr ""

msgid "APIs marked as internal"
msgstr "internal と記された API"

msgid "Certain APIs are explicitly marked as \"internal\" in a couple of ways:"
msgstr ""
"特定の API は、次のような方法で、明示的に \"internal\" (内部実装) と明記され"
"ています。"

msgid ""
"Some documentation refers to internals and mentions them as such. If the "
"documentation says that something is internal, we reserve the right to "
"change it."
msgstr ""
"ドキュメントの中には内部実装を参照していたり、内部実装であると述べている箇所"
"があります。もし、ドキュメントが「これは内部実装である」と述べている場合、そ"
"の箇所は変更される場合があります。"

msgid ""
"Functions, methods, and other objects prefixed by a leading underscore "
"(``_``). This is the standard Python way of indicating that something is "
"private; if any method starts with a single ``_``, it's an internal API."
msgstr ""
"先頭にアンダースコア( ``_`` )が付いた関数、メソッド、およびその他のオブジェク"
"トは、プライベートなものであることを示すPythonの標準的な方法です。 いずれかの"
"メソッドが単一の ``_`` で始まる場合、それは内部APIです。"

msgid "Design philosophies"
msgstr "設計思想"

msgid ""
"This document explains some of the fundamental philosophies Django's "
"developers have used in creating the framework. Its goal is to explain the "
"past and guide the future."
msgstr ""
"このドキュメントでは、 Django の開発者たちがフレームワークの構築に取り入れ て"
"いる根本的な設計思想についていくつか解説します。それによって、 Django の これ"
"までの経緯に説明を与えつつ、将来への指針にしたいと思います。"

msgid "Overall"
msgstr "概要"

msgid "Loose coupling"
msgstr "疎結合"

msgid ""
"A fundamental goal of Django's stack is `loose coupling and tight "
"cohesion`_. The various layers of the framework shouldn't \"know\" about "
"each other unless absolutely necessary."
msgstr ""

msgid ""
"For example, the template system knows nothing about Web requests, the "
"database layer knows nothing about data display and the view system doesn't "
"care which template system a programmer uses."
msgstr ""

msgid ""
"Although Django comes with a full stack for convenience, the pieces of the "
"stack are independent of another wherever possible."
msgstr ""

msgid "Less code"
msgstr "短いコード"

msgid ""
"Django apps should use as little code as possible; they should lack "
"boilerplate. Django should take full advantage of Python's dynamic "
"capabilities, such as introspection."
msgstr ""

msgid "Quick development"
msgstr "素早い開発"

msgid ""
"The point of a Web framework in the 21st century is to make the tedious "
"aspects of Web development fast. Django should allow for incredibly quick "
"Web development."
msgstr ""

msgid "Don't repeat yourself (DRY)"
msgstr "同じことを繰り返さない (DRY)"

msgid ""
"Every distinct concept and/or piece of data should live in one, and only "
"one, place. Redundancy is bad. Normalization is good."
msgstr ""

msgid ""
"The framework, within reason, should deduce as much as possible from as "
"little as possible."
msgstr ""

msgid "The `discussion of DRY on the Portland Pattern Repository`__"
msgstr ""

msgid "Explicit is better than implicit"
msgstr "暗黙よりもはっきり示した方がいい (Explicit is better than implicit)"

msgid ""
"This is a core Python principle listed in :pep:`20`, and it means Django "
"shouldn't do too much \"magic.\" Magic shouldn't happen unless there's a "
"really good reason for it. Magic is worth using only if it creates a huge "
"convenience unattainable in other ways, and it isn't implemented in a way "
"that confuses developers who are trying to learn how to use the feature."
msgstr ""

msgid "Consistency"
msgstr "一貫性"

msgid ""
"The framework should be consistent at all levels. Consistency applies to "
"everything from low-level (the Python coding style used) to high-level (the "
"\"experience\" of using Django)."
msgstr ""
"フレームワークはあらゆるレベルで一貫性を持たなければなりません。一貫性は、低"
"レベル (採用する Python のコーディングスタイル) から高レベル (Django の使い"
"方) までのあらゆる点で保たれなければなりません。"

msgid "Models"
msgstr "モデル"

msgid ""
"Fields shouldn't assume certain behaviors based solely on the name of the "
"field. This requires too much knowledge of the system and is prone to "
"errors. Instead, behaviors should be based on keyword arguments and, in some "
"cases, on the type of the field."
msgstr ""

msgid "Include all relevant domain logic"
msgstr ""

msgid ""
"Models should encapsulate every aspect of an \"object,\" following Martin "
"Fowler's `Active Record`_ design pattern."
msgstr ""

msgid ""
"This is why both the data represented by a model and information about it "
"(its human-readable name, options like default ordering, etc.) are defined "
"in the model class; all the information needed to understand a given model "
"should be stored *in* the model."
msgstr ""

msgid "Database API"
msgstr "データベース API"

msgid "The core goals of the database API are:"
msgstr "データベース API の主要な目的は、次のとおりです。"

msgid "SQL efficiency"
msgstr "SQL の効率性"

msgid ""
"It should execute SQL statements as few times as possible, and it should "
"optimize statements internally."
msgstr ""

msgid ""
"This is why developers need to call ``save()`` explicitly, rather than the "
"framework saving things behind the scenes silently."
msgstr ""

msgid ""
"This is also why the ``select_related()`` ``QuerySet`` method exists. It's "
"an optional performance booster for the common case of selecting \"every "
"related object.\""
msgstr ""

msgid "Terse, powerful syntax"
msgstr ""

msgid ""
"The database API should allow rich, expressive statements in as little "
"syntax as possible. It should not rely on importing other modules or helper "
"objects."
msgstr ""

msgid ""
"Joins should be performed automatically, behind the scenes, when necessary."
msgstr ""

msgid ""
"Every object should be able to access every related object, systemwide. This "
"access should work both ways."
msgstr ""

msgid "Option to drop into raw SQL easily, when needed"
msgstr ""

msgid ""
"The database API should realize it's a shortcut but not necessarily an end-"
"all-be-all. The framework should make it easy to write custom SQL -- entire "
"statements, or just custom ``WHERE`` clauses as custom parameters to API "
"calls."
msgstr ""

msgid "URL design"
msgstr "URL デザイン"

msgid ""
"URLs in a Django app should not be coupled to the underlying Python code. "
"Tying URLs to Python function names is a Bad And Ugly Thing."
msgstr ""

msgid ""
"Along these lines, the Django URL system should allow URLs for the same app "
"to be different in different contexts. For example, one site may put stories "
"at ``/stories/``, while another may use ``/news/``."
msgstr ""

msgid "Infinite flexibility"
msgstr ""

msgid ""
"URLs should be as flexible as possible. Any conceivable URL design should be "
"allowed."
msgstr ""

msgid "Encourage best practices"
msgstr "ベストプラクティスの推奨"

msgid ""
"The framework should make it just as easy (or even easier) for a developer "
"to design pretty URLs than ugly ones."
msgstr ""

msgid "File extensions in Web-page URLs should be avoided."
msgstr ""

msgid "Vignette-style commas in URLs deserve severe punishment."
msgstr ""

msgid "Definitive URLs"
msgstr ""

msgid ""
"Technically, ``foo.com/bar`` and ``foo.com/bar/`` are two different URLs, "
"and search-engine robots (and some Web traffic-analyzing tools) would treat "
"them as separate pages. Django should make an effort to \"normalize\" URLs "
"so that search-engine robots don't get confused."
msgstr ""

msgid "This is the reasoning behind the :setting:`APPEND_SLASH` setting."
msgstr ""

msgid "Template system"
msgstr "テンプレートシステム"

msgid "Separate logic from presentation"
msgstr "ロジックのプレゼンテーションからの分離"

msgid ""
"We see a template system as a tool that controls presentation and "
"presentation-related logic -- and that's it. The template system shouldn't "
"support functionality that goes beyond this basic goal."
msgstr ""
"私達は、テンプレートシステムはプレゼンテーションとプレゼンテーション関係のロ"
"ジックを制御するためのツールであり、それ以上のものではないと考えています。 そ"
"の本分をこえた機能をテンプレートシステムに求めるべきではありません。"

msgid "Discourage redundancy"
msgstr "冗長性の排除"

msgid ""
"The majority of dynamic websites use some sort of common sitewide design -- "
"a common header, footer, navigation bar, etc. The Django template system "
"should make it easy to store those elements in a single place, eliminating "
"duplicate code."
msgstr ""
"大多数の動的な Web サイトでは、ヘッダやフッタ、ナビゲーションバーといった部分"
"のデザインをサイト全体で共通にしています。 Django テンプレートシステムは、 こ"
"うしたサイトの構成要素を一箇所に保存しやすくし、重複したコードを削除する必要"
"があります。"

msgid ""
"This is the philosophy behind :ref:`template inheritance <template-"
"inheritance>`."
msgstr ""
"これが :ref:`テンプレートの継承 <template-inheritance>` の背後にある思想で"
"す。"

msgid "Be decoupled from HTML"
msgstr "HTML と疎結合であれ"

msgid ""
"The template system shouldn't be designed so that it only outputs HTML. It "
"should be equally good at generating other text-based formats, or just plain "
"text."
msgstr ""
"テンプレートシステムは、ただ単に HTML だけを出力するように設計されてはいませ"
"ん。他のテキストベースのフォーマットや、単純なプレインテキストも同じように上"
"手く生成できるように作られています。"

msgid "XML should not be used for template languages"
msgstr "テンプレート言語として、XML を使うべきではない"

msgid ""
"Using an XML engine to parse templates introduces a whole new world of human "
"error in editing templates -- and incurs an unacceptable level of overhead "
"in template processing."
msgstr ""
"テンプレートをパースするのに XML エンジンを使ってしまうと、テンプレートの編集"
"に全く新しいヒューマンエラーの世界を作り出してしまい、結果として、テンプレー"
"ト処理に受け入れられないようなレベルの困難を生み出してしまうでしょう。"

msgid "Assume designer competence"
msgstr "ページデザイナの有能さを前提にする"

msgid ""
"The template system shouldn't be designed so that templates necessarily are "
"displayed nicely in WYSIWYG editors such as Dreamweaver. That is too severe "
"of a limitation and wouldn't allow the syntax to be as nice as it is. Django "
"expects template authors are comfortable editing HTML directly."
msgstr ""
"必ずしも Dreamweaver のような WYSIWYG エディタでうまく表示できるように テンプ"
"レートシステムを設計する必要はありません。そのような要求は制限が厳しすぎ、本"
"来あるべきすっきりした構文を実現できなくなります。 Django では 直接 HTML を編"
"集する作業に慣れたテンプレート作者を想定しています。"

msgid "Treat whitespace obviously"
msgstr "ホワイトスペースを明示的に扱う"

msgid ""
"The template system shouldn't do magic things with whitespace. If a template "
"includes whitespace, the system should treat the whitespace as it treats "
"text -- just display it. Any whitespace that's not in a template tag should "
"be displayed."
msgstr ""
"テンプレートシステムは、ホワイトスペースに対して変わった処理を行うべきではあ"
"りません。もしテンプレートにホワイトスペースが書かれていれば、他の文字と同じ"
"ように扱って、それをそのまま表示するべきです。テンプレートタグの外に書かれた"
"すべてのホワイトスペースは、そのまま表示するべきです。"

msgid "Don't invent a programming language"
msgstr "新しいプログラミング言語を開発しない"

msgid ""
"The goal is not to invent a programming language. The goal is to offer just "
"enough programming-esque functionality, such as branching and looping, that "
"is essential for making presentation-related decisions. The :ref:`Django "
"Template Language (DTL) <template-language-intro>` aims to avoid advanced "
"logic."
msgstr ""
"私たちの目的は、新しいプログラミング言語を開発することではありません。本当の"
"目的は、プログラミング言語が持つような機能を必要十分なだけ使えるようにするこ"
"とです。たとえば、条件分岐やループといったもので、これらはプレゼンテーション"
"に関連する決定を下すときに大切になります。 :ref:`Django テンプレート言語 "
"(Django Template Language; DTL) <template-language-intro>` は、複雑なロジック"
"を使わずにこの目的を達成するために作られました。"

msgid ""
"The Django template system recognizes that templates are most often written "
"by *designers*, not *programmers*, and therefore should not assume Python "
"knowledge."
msgstr ""
"Django のテンプレートシステムは、テンプレートの書き手は *プログラマー* ではな"
"く、主に *デザイナー* であることを念頭に置いています。そのため、Python の知識"
"がまったくなくても書けるようになっています。"

msgid "Safety and security"
msgstr "安全性とセキュリティ"

msgid ""
"The template system, out of the box, should forbid the inclusion of "
"malicious code -- such as commands that delete database records."
msgstr ""
"テンプレートシステムは、コマンドの実行やデータベースレコードの削除を行うよう"
"な、悪意のあるコードの挿入ができないようになっていなければなりません。"

msgid ""
"This is another reason the template system doesn't allow arbitrary Python "
"code."
msgstr ""
"これが、テンプレートシステムが任意の Python コードの実行を許さないようにでき"
"ているもう一つの理由です。"

msgid "Extensibility"
msgstr "拡張性"

msgid ""
"The template system should recognize that advanced template authors may want "
"to extend its technology."
msgstr ""
"テンプレートシステムは、高度なテンプレート作者によるテクノロジの拡張に配慮せ"
"ねばなりません。"

msgid "This is the philosophy behind custom template tags and filters."
msgstr "これが、カスタムテンプレートタグとフィルタの背後にある思想です。"

msgid "Views"
msgstr "ビュー"

msgid "Simplicity"
msgstr "シンプルであること"

msgid ""
"Writing a view should be as simple as writing a Python function. Developers "
"shouldn't have to instantiate a class when a function will do."
msgstr ""
"ビューは、Python の関数を書くのと同じくらい簡単に書けるべきです。開発者は、ふ"
"つうに関数を書くときと同じように、クラスからインスタンスを作ったりせずに"
"ビューが書けるべきです。"

msgid "Use request objects"
msgstr "request オブジェクトを使うこと"

msgid ""
"Views should have access to a request object -- an object that stores "
"metadata about the current request. The object should be passed directly to "
"a view function, rather than the view function having to access the request "
"data from a global variable. This makes it light, clean and easy to test "
"views by passing in \"fake\" request objects."
msgstr ""
"ビューはリクエストオブジェクトにアクセスします。リクエストオブジェクトとは、 "
"現在のリクエストに関するメタデータを入れるオブジェクトです。ビューはこのオブ"
"ジェクトをグローバル変数経由でアクセスするのではなく、引数として直接受け取る"
"ようにすべきです。それにより、「偽の」リクエストオブジェクトを渡してビューを"
"簡単かつクリーンにテストできるようになります。"

msgid ""
"A view shouldn't care about which template system the developer uses -- or "
"even whether a template system is used at all."
msgstr ""
"ビューは、開発者がどのテンプレートシステムを使用しているか意識せずに使えるべ"
"きです。もっと言えば、テンプレートシステム自体を使っているかどうかも気にせず"
"に使えるようにするべきです。"

msgid "Differentiate between GET and POST"
msgstr "GET と POST を区別"

msgid ""
"GET and POST are distinct; developers should explicitly use one or the "
"other. The framework should make it easy to distinguish between GET and POST "
"data."
msgstr ""
"GET と POST は区別します。開発者は明示的に一方を他方と区別して明示的に使用す"
"るべきです。フレームワークは、GET と POST データを分かりやすく区別できるよう"
"にしなければなりません。"

msgid "Cache Framework"
msgstr "キャッシュフレームワーク"

msgid "The core goals of Django's :doc:`cache framework </topics/cache>` are:"
msgstr ""
"Django の :doc:`キャッシュフレームワーク </topics/cache>` の主な目的は次の点"
"にあります。"

msgid ""
"A cache should be as fast as possible.  Hence, all framework code "
"surrounding the cache backend should be kept to the absolute minimum, "
"especially for ``get()`` operations."
msgstr ""
"キャッシュは可能な限り高速でなければならない。したがって、キャッシュバックエ"
"ンドを包んでいるフレームワークのコード (特に ``get()`` 操作) はすべて、極限ま"
"で短くするべきである。"

msgid ""
"The cache API should provide a consistent interface across the different "
"cache backends."
msgstr ""
"キャッシュ API は、バックエントが違っていても一貫したインターフェイスを提供す"
"るべきである。"

msgid ""
"The cache API should be extensible at the application level based on the "
"developer's needs (for example, see :ref:`cache_key_transformation`)."
msgstr ""
"キャッシュ API は、開発者のニーズにもとづいて、アプリケーションレベルで拡張可"
"能であるべきである (例としては :ref:`cache_key_transformation` がある)。"

msgid "Third-party distributions of Django"
msgstr "サードパーティの Django ディストリビューション"

msgid ""
"Many third-party distributors are now providing versions of Django "
"integrated with their package-management systems. These can make "
"installation and upgrading much easier for users of Django since the "
"integration includes the ability to automatically install dependencies (like "
"database adapters) that Django requires."
msgstr ""

msgid ""
"Typically, these packages are based on the latest stable release of Django, "
"so if you want to use the development version of Django you'll need to "
"follow the instructions for :ref:`installing the development version "
"<installing-development-version>` from our Git repository."
msgstr ""

msgid ""
"If you're using Linux or a Unix installation, such as OpenSolaris, check "
"with your distributor to see if they already package Django. If you're using "
"a Linux distro and don't know how to find out if a package is available, "
"then now is a good time to learn.  The Django Wiki contains a list of `Third "
"Party Distributions`_ to help you out."
msgstr ""

msgid "For distributors"
msgstr ""

msgid ""
"If you'd like to package Django for distribution, we'd be happy to help out! "
"Please join the |django-developers| mailing list and introduce yourself."
msgstr ""

msgid ""
"We also encourage all distributors to subscribe to the |django-announce| "
"mailing list, which is a (very) low-traffic list for announcing new releases "
"of Django and important bugfixes."
msgstr ""

msgid "Meta-documentation and miscellany"
msgstr "メタドキュメントとその他"

msgid ""
"Documentation that we can't find a more organized place for. Like that "
"drawer in your kitchen with the scissors, batteries, duct tape, and other "
"junk."
msgstr ""
