# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
#
# Translators:
# Asai Takuya <takuya.waseda.1119@gmail.com>, 2016
# IWAI, Masaharu <iwaim.sub@gmail.com>, 2016
# mnamihdk, 2017
# Pawllo2 <pawllothesecond@gmail.com>, 2017
# Ryouta Mizuhara <ham_katsu@outlook.jp>, 2016
# Shuuji TAKAHASHI (shuuji3) <shuuji3@gmail.com>, 2016-2017
# Suguru YAMAMOTO <sgryjp@gmail.com>, 2017
# Suzuki Takahiro <bur8787@gmail.com>, 2016
# Shuuji TAKAHASHI (shuuji3) <shuuji3@gmail.com>, 2016
# Takashi Sugawara <aimaimokomoko@gmail.com>, 2017
# Takuya Arita <takuya.arita@gmail.com>, 2015
# Yoshihiro Furudate <aheadlink.changat@gmail.com>, 2016
# Pawllo2 <pawllothesecond@gmail.com>, 2017
msgid ""
msgstr ""
"Project-Id-Version: django-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-08-02 09:23-0500\n"
"PO-Revision-Date: 2017-08-03 14:56+0000\n"
"Last-Translator: Jannis Leidel <jannis@leidel.info>\n"
"Language-Team: Japanese (http://www.transifex.com/django/django-docs/"
"language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid "Authentication using ``REMOTE_USER``"
msgstr "``REMOTE_USER`` を使用した認証"

msgid ""
"This document describes how to make use of external authentication sources "
"(where the Web server sets the ``REMOTE_USER`` environment variable) in your "
"Django applications.  This type of authentication solution is typically seen "
"on intranet sites, with single sign-on solutions such as IIS and Integrated "
"Windows Authentication or Apache and `mod_authnz_ldap`_, `CAS`_, `Cosign`_, "
"`WebAuth`_, `mod_auth_sspi`_, etc."
msgstr ""
"このドキュメントでは、Django アプリケーション内での外部の認証ソースの使用方法"
"について説明します。たとえば、Web サーバが ``REMOTE_USER`` を設定するような場"
"合です。このような認証方法は、単一認証 (single sign-on) システムを利用するイ"
"ントラネットサイトの多くで典型的に見られるものです。単一認証システムの例とし"
"ては、'IIS と統合 Windows 認証の組み合わせや、Apache と `mod_authnz_ldap`_, "
"`CAS`_, `Cosign`_, `WebAuth`_, `mod_auth_sspi`_ などの組み合わせがあります。"

msgid ""
"When the Web server takes care of authentication it typically sets the "
"``REMOTE_USER`` environment variable for use in the underlying application.  "
"In Django, ``REMOTE_USER`` is made available in the :attr:`request.META "
"<django.http.HttpRequest.META>` attribute.  Django can be configured to make "
"use of the ``REMOTE_USER`` value using the ``RemoteUserMiddleware`` or "
"``PersistentRemoteUserMiddleware``, and :class:`~django.contrib.auth."
"backends.RemoteUserBackend` classes found in :mod:`django.contrib.auth`."
msgstr ""
"Web サーバーが認証を行う際には、一般に下層のアプリケーションで使用される "
"``REMOTE_USER`` 環境変数を設定します。Django では、:attr:`request.META "
"<django.http.HttpRequest.META>` 属性から``REMOTE_USER`` が利用できます。"
"Django は ``RemoteUserMiddleware`` または "
"``PersistentRemoteUserMiddleware`` 、そして :mod:`django.contrib.auth` に含ま"
"れる :class:`django.contrib.auth.backends`  を使うことで ``REMOTE_USER`` の値"
"を利用できるように設定できます。"

msgid "Configuration"
msgstr "設定"

msgid ""
"First, you must add the :class:`django.contrib.auth.middleware."
"RemoteUserMiddleware` to the :setting:`MIDDLEWARE` setting **after** the :"
"class:`django.contrib.auth.middleware.AuthenticationMiddleware`::"
msgstr ""
"最初に次のように :setting:`MIDDLEWARE` 設定に :class:`django.contrib.auth."
"middleware.RemoteUserMiddleware` を加える必要があります。これは :class:"
"`django.contrib.auth.middleware.AuthenticationMiddleware` の **後に** 追加し"
"てください::"

msgid ""
"Next, you must replace the :class:`~django.contrib.auth.backends."
"ModelBackend` with :class:`~django.contrib.auth.backends.RemoteUserBackend` "
"in the :setting:`AUTHENTICATION_BACKENDS` setting::"
msgstr ""
"続いて、:setting:`AUTHENTICATION_BACKENDS` 設定の :class:`~django.contrib."
"auth.backends.ModelBackend` を :class:`~django.contrib.auth.backends."
"RemoteUserBackend` に変更します::"

msgid ""
"With this setup, ``RemoteUserMiddleware`` will detect the username in "
"``request.META['REMOTE_USER']`` and will authenticate and auto-login that "
"user using the :class:`~django.contrib.auth.backends.RemoteUserBackend`."
msgstr ""
"この設定を行うと ``RemoteUserMiddleware`` は ``request.META['REMOTE_USER']`` "
"内の username を検索し、 :class:`~django.contrib.auth.backends."
"RemoteUserBackend` を使用したユーザーの認証と自動ログインを行います。"

msgid ""
"Be aware that this particular setup disables authentication with the default "
"``ModelBackend``. This means that if the ``REMOTE_USER`` value is not set "
"then the user is unable to log in, even using Django's admin interface. "
"Adding ``'django.contrib.auth.backends.ModelBackend'`` to the "
"``AUTHENTICATION_BACKENDS`` list will use ``ModelBackend`` as a fallback if "
"``REMOTE_USER`` is absent, which will solve these issues."
msgstr ""
"この特定の設定は、デフォルトの ``ModelBackend`` による認証を無効にすることに"
"注意してください。つまり、 ``REMOTE_USER`` の値が設定されていなければ、"
"Django の admin interface を使ったとしても、ユーザーはログインすることができ"
"ないということです。 ``REMOTE_USER`` が存在しない場合のフォールバックとして "
"``AUTHENTICATION_BACKENDS`` のリストに ``'django.contrib.auth.backends."
"ModelBackend'``  を追加しておけば、この問題は解決できます。"

msgid ""
"Django's user management, such as the views in ``contrib.admin`` and the :"
"djadmin:`createsuperuser` management command, doesn't integrate with remote "
"users. These interfaces work with users stored in the database regardless of "
"``AUTHENTICATION_BACKENDS``."
msgstr ""
"``contrib.admin`` 画面や :djadmin:`createsuperuser` 管理コマンドなどの、"
"Django のユーザ管理機能はリモートユーザを統合管理しません。これらのインタ"
"フェースは ``AUTHENTICATION_BACKENDS`` の設定にかかわらず、データベース中の"
"ユーザだけを管理します。"

msgid ""
"Since the ``RemoteUserBackend`` inherits from ``ModelBackend``, you will "
"still have all of the same permissions checking that is implemented in "
"``ModelBackend``."
msgstr ""

msgid ""
"Users with :attr:`is_active=False <django.contrib.auth.models.User."
"is_active>` won't be allowed to authenticate. Use :class:`~django.contrib."
"auth.backends.AllowAllUsersRemoteUserBackend` if you want to allow them to."
msgstr ""

msgid "In older versions, inactive users weren't rejected as described above."
msgstr ""

msgid ""
"If your authentication mechanism uses a custom HTTP header and not "
"``REMOTE_USER``, you can subclass ``RemoteUserMiddleware`` and set the "
"``header`` attribute to the desired ``request.META`` key.  For example::"
msgstr ""
"認証メカニズムが ``REMOTE_USER`` 以外のカスタム HTTP ヘッダを使っている場合に"
"は、以下の例のように ``RemoteUserMiddleware`` をサブクラス化して、クラスの "
"``header`` 属性を適切な ``request.META`` のキー名に設定してください::"

msgid ""
"Be very careful if using a ``RemoteUserMiddleware`` subclass with a custom "
"HTTP header. You must be sure that your front-end web server always sets or "
"strips that header based on the appropriate authentication checks, never "
"permitting an end-user to submit a fake (or \"spoofed\") header value. Since "
"the HTTP headers ``X-Auth-User`` and ``X-Auth_User`` (for example) both "
"normalize to the ``HTTP_X_AUTH_USER`` key in ``request.META``, you must also "
"check that your web server doesn't allow a spoofed header using underscores "
"in place of dashes."
msgstr ""

msgid ""
"This warning doesn't apply to ``RemoteUserMiddleware`` in its default "
"configuration with ``header = 'REMOTE_USER'``, since a key that doesn't "
"start with ``HTTP_`` in ``request.META`` can only be set by your WSGI "
"server, not directly from an HTTP request header."
msgstr ""

msgid ""
"If you need more control, you can create your own authentication backend "
"that inherits from :class:`~django.contrib.auth.backends.RemoteUserBackend` "
"and override one or more of its attributes and methods."
msgstr ""
"認証メカニズムをより細かく制御したければ、 :class:`~django.contrib.auth."
"backends.RemoteUserBackend` を継承する独自の認証バックエンドを作成し、属性や"
"メソッドをいくつかオーバライドしてください。"

msgid "Using ``REMOTE_USER`` on login pages only"
msgstr ""

msgid ""
"The ``RemoteUserMiddleware`` authentication middleware assumes that the HTTP "
"request header ``REMOTE_USER`` is present with all authenticated requests. "
"That might be expected and practical when Basic HTTP Auth with ``htpasswd`` "
"or other simple mechanisms are used, but with Negotiate (GSSAPI/Kerberos) or "
"other resource intensive authentication methods, the authentication in the "
"front-end HTTP server is usually only set up for one or a few login URLs, "
"and after successful authentication, the application is supposed to maintain "
"the authenticated session itself."
msgstr ""

msgid ""
":class:`~django.contrib.auth.middleware.PersistentRemoteUserMiddleware` "
"provides support for this use case. It will maintain the authenticated "
"session until explicit logout by the user. The class can be used as a drop-"
"in replacement of :class:`~django.contrib.auth.middleware."
"RemoteUserMiddleware` in the documentation above."
msgstr ""

msgid "Writing a custom storage system"
msgstr ""

msgid ""
"If you need to provide custom file storage -- a common example is storing "
"files on some remote system -- you can do so by defining a custom storage "
"class. You'll need to follow these steps:"
msgstr ""

msgid ""
"Your custom storage system must be a subclass of ``django.core.files.storage."
"Storage``::"
msgstr ""

msgid ""
"Django must be able to instantiate your storage system without any "
"arguments. This means that any settings should be taken from ``django.conf."
"settings``::"
msgstr ""

msgid ""
"Your storage class must implement the :meth:`_open()` and :meth:`_save()` "
"methods, along with any other methods appropriate to your storage class. See "
"below for more on these methods."
msgstr ""

msgid ""
"In addition, if your class provides local file storage, it must override the "
"``path()`` method."
msgstr ""

msgid ""
"Your storage class must be :ref:`deconstructible <custom-deconstruct-"
"method>` so it can be serialized when it's used on a field in a migration. "
"As long as your field has arguments that are themselves :ref:`serializable "
"<migration-serializing>`, you can use the ``django.utils.deconstruct."
"deconstructible`` class decorator for this (that's what Django uses on "
"FileSystemStorage)."
msgstr ""

msgid ""
"By default, the following methods raise `NotImplementedError` and will "
"typically have to be overridden:"
msgstr ""

msgid ":meth:`Storage.delete`"
msgstr ":meth:`Storage.delete`"

msgid ":meth:`Storage.exists`"
msgstr ":meth:`Storage.exists`"

msgid ":meth:`Storage.listdir`"
msgstr ":meth:`Storage.listdir`"

msgid ":meth:`Storage.size`"
msgstr ":meth:`Storage.size`"

msgid ":meth:`Storage.url`"
msgstr ":meth:`Storage.url`"

msgid ""
"Note however that not all these methods are required and may be deliberately "
"omitted. As it happens, it is possible to leave each method unimplemented "
"and still have a working Storage."
msgstr ""

msgid ""
"By way of example, if listing the contents of certain storage backends turns "
"out to be expensive, you might decide not to implement `Storage.listdir`."
msgstr ""

msgid ""
"Another example would be a backend that only handles writing to files. In "
"this case, you would not need to implement any of the above methods."
msgstr ""

msgid ""
"Ultimately, which of these methods are implemented is up to you. Leaving "
"some methods unimplemented will result in a partial (possibly broken) "
"interface."
msgstr ""

msgid ""
"You'll also usually want to use hooks specifically designed for custom "
"storage objects. These are:"
msgstr ""

msgid "**Required**."
msgstr ""

msgid ""
"Called by ``Storage.open()``, this is the actual mechanism the storage class "
"uses to open the file. This must return a ``File`` object, though in most "
"cases, you'll want to return some subclass here that implements logic "
"specific to the backend storage system."
msgstr ""

msgid ""
"Called by ``Storage.save()``. The ``name`` will already have gone through "
"``get_valid_name()`` and ``get_available_name()``, and the ``content`` will "
"be a ``File`` object itself."
msgstr ""

msgid ""
"Should return the actual name of name of the file saved (usually the "
"``name`` passed in, but if the storage needs to change the file name return "
"the new name instead)."
msgstr ""

msgid ""
"Returns a filename suitable for use with the underlying storage system. The "
"``name`` argument passed to this method is either the original filename sent "
"to the server or, if ``upload_to`` is a callable, the filename returned by "
"that method after any path information is removed. Override this to "
"customize how non-standard characters are converted to safe filenames."
msgstr ""

msgid ""
"The code provided on ``Storage`` retains only alpha-numeric characters, "
"periods and underscores from the original filename, removing everything else."
msgstr ""

msgid ""
"Returns a filename that is available in the storage mechanism, possibly "
"taking the provided filename into account. The ``name`` argument passed to "
"this method will have already cleaned to a filename valid for the storage "
"system, according to the ``get_valid_name()`` method described above."
msgstr ""

msgid ""
"The length of the filename will not exceed ``max_length``, if provided. If a "
"free unique filename cannot be found, a :exc:`SuspiciousFileOperation "
"<django.core.exceptions.SuspiciousOperation>` exception is raised."
msgstr ""

msgid ""
"If a file with ``name`` already exists, an underscore plus a random 7 "
"character alphanumeric string is appended to the filename before the "
"extension."
msgstr ""

msgid "Custom Lookups"
msgstr ""

msgid ""
"Django offers a wide variety of :ref:`built-in lookups <field-lookups>` for "
"filtering (for example, ``exact`` and ``icontains``). This documentation "
"explains how to write custom lookups and how to alter the working of "
"existing lookups. For the API references of lookups, see the :doc:`/ref/"
"models/lookups`."
msgstr ""

msgid "A simple lookup example"
msgstr ""

msgid ""
"Let's start with a simple custom lookup. We will write a custom lookup "
"``ne`` which works opposite to ``exact``. ``Author.objects."
"filter(name__ne='Jack')`` will translate to the SQL::"
msgstr ""

msgid ""
"This SQL is backend independent, so we don't need to worry about different "
"databases."
msgstr ""

msgid ""
"There are two steps to making this work. Firstly we need to implement the "
"lookup, then we need to tell Django about it. The implementation is quite "
"straightforward::"
msgstr ""

msgid ""
"To register the ``NotEqual`` lookup we will just need to call "
"``register_lookup`` on the field class we want the lookup to be available. "
"In this case, the lookup makes sense on all ``Field`` subclasses, so we "
"register it with ``Field`` directly::"
msgstr ""

msgid "Lookup registration can also be done using a decorator pattern::"
msgstr ""

msgid ""
"We can now use ``foo__ne`` for any field ``foo``. You will need to ensure "
"that this registration happens before you try to create any querysets using "
"it. You could place the implementation in a ``models.py`` file, or register "
"the lookup in the ``ready()`` method of an ``AppConfig``."
msgstr ""

msgid ""
"Taking a closer look at the implementation, the first required attribute is "
"``lookup_name``. This allows the ORM to understand how to interpret "
"``name__ne`` and use ``NotEqual`` to generate the SQL. By convention, these "
"names are always lowercase strings containing only letters, but the only "
"hard requirement is that it must not contain the string ``__``."
msgstr ""

msgid ""
"We then need to define the ``as_sql`` method. This takes a ``SQLCompiler`` "
"object, called ``compiler``,  and the active database connection. "
"``SQLCompiler`` objects are not documented, but the only thing we need to "
"know about them is that they have a ``compile()`` method which returns a "
"tuple containing an SQL string, and the parameters to be interpolated into "
"that string. In most cases, you don't need to use it directly and can pass "
"it on to ``process_lhs()`` and ``process_rhs()``."
msgstr ""

msgid ""
"A ``Lookup`` works against two values, ``lhs`` and ``rhs``, standing for "
"left-hand side and right-hand side. The left-hand side is usually a field "
"reference, but it can be anything implementing the :ref:`query expression "
"API <query-expression>`. The right-hand is the value given by the user. In "
"the example ``Author.objects.filter(name__ne='Jack')``, the left-hand side "
"is a reference to the ``name`` field of the ``Author`` model, and ``'Jack'`` "
"is the right-hand side."
msgstr ""

msgid ""
"We call ``process_lhs`` and ``process_rhs`` to convert them into the values "
"we need for SQL using the ``compiler`` object described before. These "
"methods return tuples containing some SQL and the parameters to be "
"interpolated into that SQL, just as we need to return from our ``as_sql`` "
"method. In the above example, ``process_lhs`` returns ``('\"author\".\"name"
"\"', [])`` and ``process_rhs`` returns ``('\"%s\"', ['Jack'])``. In this "
"example there were no parameters for the left hand side, but this would "
"depend on the object we have, so we still need to include them in the "
"parameters we return."
msgstr ""

msgid ""
"Finally we combine the parts into an SQL expression with ``<>``, and supply "
"all the parameters for the query. We then return a tuple containing the "
"generated SQL string and the parameters."
msgstr ""

msgid "A simple transformer example"
msgstr ""

msgid ""
"The custom lookup above is great, but in some cases you may want to be able "
"to chain lookups together. For example, let's suppose we are building an "
"application where we want to make use of the ``abs()`` operator. We have an "
"``Experiment`` model which records a start value, end value, and the change "
"(start - end). We would like to find all experiments where the change was "
"equal to a certain amount (``Experiment.objects.filter(change__abs=27)``), "
"or where it did not exceed a certain amount (``Experiment.objects."
"filter(change__abs__lt=27)``)."
msgstr ""

msgid ""
"This example is somewhat contrived, but it nicely demonstrates the range of "
"functionality which is possible in a database backend independent manner, "
"and without duplicating functionality already in Django."
msgstr ""

msgid ""
"We will start by writing a ``AbsoluteValue`` transformer. This will use the "
"SQL function ``ABS()`` to transform the value before comparison::"
msgstr ""

msgid "Next, let's register it for ``IntegerField``::"
msgstr ""

msgid ""
"We can now run the queries we had before. ``Experiment.objects."
"filter(change__abs=27)`` will generate the following SQL::"
msgstr ""

msgid ""
"By using ``Transform`` instead of ``Lookup`` it means we are able to chain "
"further lookups afterwards. So ``Experiment.objects."
"filter(change__abs__lt=27)`` will generate the following SQL::"
msgstr ""

msgid ""
"Note that in case there is no other lookup specified, Django interprets "
"``change__abs=27`` as ``change__abs__exact=27``."
msgstr ""

msgid ""
"When looking for which lookups are allowable after the ``Transform`` has "
"been applied, Django uses the ``output_field`` attribute. We didn't need to "
"specify this here as it didn't change, but supposing we were applying "
"``AbsoluteValue`` to some field which represents a more complex type (for "
"example a point relative to an origin, or a complex number) then we may have "
"wanted to specify that the transform returns a ``FloatField`` type for "
"further lookups. This can be done by adding an ``output_field`` attribute to "
"the transform::"
msgstr ""

msgid ""
"This ensures that further lookups like ``abs__lte`` behave as they would for "
"a ``FloatField``."
msgstr ""

msgid "Writing an efficient ``abs__lt`` lookup"
msgstr ""

msgid ""
"When using the above written ``abs`` lookup, the SQL produced will not use "
"indexes efficiently in some cases. In particular, when we use "
"``change__abs__lt=27``, this is equivalent to ``change__gt=-27`` AND "
"``change__lt=27``. (For the ``lte`` case we could use the SQL ``BETWEEN``)."
msgstr ""

msgid ""
"So we would like ``Experiment.objects.filter(change__abs__lt=27)`` to "
"generate the following SQL::"
msgstr ""

msgid "The implementation is::"
msgstr ""

msgid ""
"There are a couple of notable things going on. First, "
"``AbsoluteValueLessThan`` isn't calling ``process_lhs()``. Instead it skips "
"the transformation of the ``lhs`` done by ``AbsoluteValue`` and uses the "
"original ``lhs``. That is, we want to get ``\"experiments\".\"change\"`` not "
"``ABS(\"experiments\".\"change\")``. Referring directly to ``self.lhs.lhs`` "
"is safe as ``AbsoluteValueLessThan`` can be accessed only from the "
"``AbsoluteValue`` lookup, that is the ``lhs`` is always an instance of "
"``AbsoluteValue``."
msgstr ""

msgid ""
"Notice also that  as both sides are used multiple times in the query the "
"params need to contain ``lhs_params`` and ``rhs_params`` multiple times."
msgstr ""

msgid ""
"The final query does the inversion (``27`` to ``-27``) directly in the "
"database. The reason for doing this is that if the ``self.rhs`` is something "
"else than a plain integer value (for example an ``F()`` reference) we can't "
"do the transformations in Python."
msgstr ""

msgid ""
"In fact, most lookups with ``__abs`` could be implemented as range queries "
"like this, and on most database backends it is likely to be more sensible to "
"do so as you can make use of the indexes. However with PostgreSQL you may "
"want to add an index on ``abs(change)`` which would allow these queries to "
"be very efficient."
msgstr ""

msgid "A bilateral transformer example"
msgstr ""

msgid ""
"The ``AbsoluteValue`` example we discussed previously is a transformation "
"which applies to the left-hand side of the lookup. There may be some cases "
"where you want the transformation to be applied to both the left-hand side "
"and the right-hand side. For instance, if you want to filter a queryset "
"based on the equality of the left and right-hand side insensitively to some "
"SQL function."
msgstr ""

msgid ""
"Let's examine the simple example of case-insensitive transformation here. "
"This transformation isn't very useful in practice as Django already comes "
"with a bunch of built-in case-insensitive lookups, but it will be a nice "
"demonstration of bilateral transformations in a database-agnostic way."
msgstr ""

msgid ""
"We define an ``UpperCase`` transformer which uses the SQL function "
"``UPPER()`` to transform the values before comparison. We define :attr:"
"`bilateral = True <django.db.models.Transform.bilateral>` to indicate that "
"this transformation should apply to both ``lhs`` and ``rhs``::"
msgstr ""

msgid "Next, let's register it::"
msgstr ""

msgid ""
"Now, the queryset ``Author.objects.filter(name__upper=\"doe\")`` will "
"generate a case insensitive query like this::"
msgstr ""

msgid "Writing alternative implementations for existing lookups"
msgstr ""

msgid ""
"Sometimes different database vendors require different SQL for the same "
"operation. For this example we will rewrite a custom implementation for "
"MySQL for the NotEqual operator. Instead of ``<>`` we will be using ``!=`` "
"operator. (Note that in reality almost all databases support both, including "
"all the official databases supported by Django)."
msgstr ""

msgid ""
"We can change the behavior on a specific backend by creating a subclass of "
"``NotEqual`` with a ``as_mysql`` method::"
msgstr ""

msgid ""
"We can then register it with ``Field``. It takes the place of the original "
"``NotEqual`` class as it has the same ``lookup_name``."
msgstr ""

msgid ""
"When compiling a query, Django first looks for ``as_%s % connection.vendor`` "
"methods, and then falls back to ``as_sql``. The vendor names for the in-"
"built backends are ``sqlite``, ``postgresql``, ``oracle`` and ``mysql``."
msgstr ""

msgid "How Django determines the lookups and transforms which are used"
msgstr ""

msgid ""
"In some cases you may wish to dynamically change which ``Transform`` or "
"``Lookup`` is returned based on the name passed in, rather than fixing it. "
"As an example, you could have a field which stores coordinates or an "
"arbitrary dimension, and wish to allow a syntax like ``."
"filter(coords__x7=4)`` to return the objects where the 7th coordinate has "
"value 4. In order to do this, you would override ``get_lookup`` with "
"something like::"
msgstr ""

msgid ""
"You would then define ``get_coordinate_lookup`` appropriately to return a "
"``Lookup`` subclass which handles the relevant value of ``dimension``."
msgstr ""

msgid ""
"There is a similarly named method called ``get_transform()``. "
"``get_lookup()`` should always return a ``Lookup`` subclass, and "
"``get_transform()`` a ``Transform`` subclass. It is important to remember "
"that ``Transform`` objects can be further filtered on, and ``Lookup`` "
"objects cannot."
msgstr ""

msgid ""
"When filtering, if there is only one lookup name remaining to be resolved, "
"we will look for a ``Lookup``. If there are multiple names, it will look for "
"a ``Transform``. In the situation where there is only one name and a "
"``Lookup`` is not found, we look for a ``Transform`` and then the ``exact`` "
"lookup on that ``Transform``. All call sequences always end with a "
"``Lookup``. To clarify:"
msgstr ""

msgid ""
"``.filter(myfield__mylookup)`` will call ``myfield.get_lookup('mylookup')``."
msgstr ""

msgid ""
"``.filter(myfield__mytransform__mylookup)`` will call ``myfield."
"get_transform('mytransform')``, and then ``mytransform."
"get_lookup('mylookup')``."
msgstr ""

msgid ""
"``.filter(myfield__mytransform)`` will first call ``myfield."
"get_lookup('mytransform')``, which will fail, so it will fall back to "
"calling ``myfield.get_transform('mytransform')`` and then ``mytransform."
"get_lookup('exact')``."
msgstr ""

msgid "Writing custom ``django-admin`` commands"
msgstr "カスタム ``django-admin`` コマンドの実装"

msgid ""
"Applications can register their own actions with ``manage.py``. For example, "
"you might want to add a ``manage.py`` action for a Django app that you're "
"distributing. In this document, we will be building a custom ``closepoll`` "
"command for the ``polls`` application from the :doc:`tutorial</intro/"
"tutorial01>`."
msgstr ""
"``manage.py`` を用いることで独自のアクションを登録する事ができます。例とし"
"て、あなたが配布している Django アプリケーションに ``manage.py`` アクションを"
"追加したくなったとします。このドキュメントでは、:doc:`このチュートリアル</"
"intro/tutorial01>` で作成した ``polls`` アプリケーションに独自の "
"``closepoll`` コマンドを追加します。"

msgid ""
"To do this, just add a ``management/commands`` directory to the application. "
"Django will register a ``manage.py`` command for each Python module in that "
"directory whose name doesn't begin with an underscore. For example::"
msgstr ""
"それを実現するには、``maangement/commands`` ディレクトリをアプリケーションに"
"追加するだけで済みます。Django はディレクトリ名がアンダースコアで始まらない"
"ディレクトリ内の Python モジュール毎に ``manage.py`` コマンドを追加します。"

msgid ""
"On Python 2, be sure to include ``__init__.py`` files in both the "
"``management`` and ``management/commands`` directories as done above or your "
"command will not be detected."
msgstr ""
"Python 2 系においては、上に示すように ``management`` および ``management/"
"commands`` ディレクトリそれぞれに ``__init__.py`` を追加しなければ実装したコ"
"マンドが検知されません。"

msgid ""
"In this example, the ``closepoll`` command will be made available to any "
"project that includes the ``polls`` application in :setting:`INSTALLED_APPS`."
msgstr ""
"この例では、``closepoll`` コマンドは ``polls`` アプリケーションを :setting:"
"`INSTALLED_APPS` に含むプロジェクト全てで利用できるようになります。"

msgid ""
"The ``_private.py`` module will not be available as a management command."
msgstr "``_private.py`` モジュールは管理コマンドとして利用できません。"

msgid ""
"The ``closepoll.py`` module has only one requirement -- it must define a "
"class ``Command`` that extends :class:`BaseCommand` or one of its :ref:"
"`subclasses<ref-basecommand-subclasses>`."
msgstr ""
"``closepoll.py`` モジュールには一つだけ満たすべき要件が有ります。 -- :class:"
"`BaseCommand` クラスもしくはその :ref:`サブクラス<ref-basecommand-"
"subclasses>` の一つを継承した ``Command`` クラスを定義する必要が有ります。"

msgid "Standalone scripts"
msgstr "スタンドアロンのスクリプト"

msgid ""
"Custom management commands are especially useful for running standalone "
"scripts or for scripts that are periodically executed from the UNIX crontab "
"or from Windows scheduled tasks control panel."
msgstr ""
"カスタム管理コマンドはスタンドアロンのスクリプト、 UNIX の crontab や "
"Windows のタスクスケジューラ管理パネルから定期的に実行されるスクリプトを処理"
"する場合に特に有用です。"

msgid ""
"To implement the command, edit ``polls/management/commands/closepoll.py`` to "
"look like this::"
msgstr ""
"コマンドを実装するには、``polls/management/commands/closepoll.py`` を以下のよ"
"うに編集してください::"

msgid ""
"When you are using management commands and wish to provide console output, "
"you should write to ``self.stdout`` and ``self.stderr``, instead of printing "
"to ``stdout`` and ``stderr`` directly. By using these proxies, it becomes "
"much easier to test your custom command. Note also that you don't need to "
"end messages with a newline character, it will be added automatically, "
"unless you specify the ``ending`` parameter::"
msgstr ""
"管理コマンドを利用してコンソールへの標準出力を行いたい場合、``stdout`` と "
"``stderr`` に直接文字列を渡すのではなく、``self.stdout`` および ``self."
"stderr`` を利用するべきです。このようなプロキシパターンを用いることで、カスタ"
"ム管理コマンドのテストをずっと簡単にする事ができます。改行文字でメッセージを"
"終了させる必要が無い、``ending`` パラメータを定義しなければ自動的に改行され"
"る、事にも注意してください。::"

msgid ""
"The new custom command can be called using ``python manage.py closepoll "
"<poll_id>``."
msgstr ""
"新たに作成したカスタムコマンドは ``python manage.py closepoll <poll_id>`` と"
"実行する事で利用できます。"

msgid ""
"The ``handle()`` method takes one or more ``poll_ids`` and sets ``poll."
"opened`` to ``False`` for each one. If the user referenced any nonexistent "
"polls, a :exc:`CommandError` is raised. The ``poll.opened`` attribute does "
"not exist in the :doc:`tutorial</intro/tutorial01>` and was added to ``polls."
"models.Question`` for this example."
msgstr ""
"``handle()`` メソッドは一つ以上の ``poll_ids`` を受け取り、それぞれに対応し"
"た ``poll.opened`` を ``False`` にセットします。もしコマンドの利用者が存在し"
"ない poll を指定した場合、:exc:`CommandError` 例外が発生します。``poll."
"opened`` 属性は元の :doc:`チュートリアル</intro/tutorial01>` には存在しないの"
"で、この例では ``polls.models.Question`` モデルに追加しました。"

msgid "Accepting optional arguments"
msgstr "省略可能な引数を受け入れる"

msgid ""
"The same ``closepoll`` could be easily modified to delete a given poll "
"instead of closing it by accepting additional command line options. These "
"custom options can be added in the :meth:`~BaseCommand.add_arguments` method "
"like this::"
msgstr ""
"ここまで実装した ``closepoll`` に対し、別途コマンドラインオプションを受け取る"
"ことで指定された投票を閉じる代わりに削除するよう機能追加する事も容易に可能で"
"す。これらのオプション機能は :meth:`~BaseCommand.add_arguments` メソッドに"
"よって以下のように追加できます。::"

msgid ""
"The option (``delete`` in our example) is available in the options dict "
"parameter of the handle method. See the :py:mod:`argparse` Python "
"documentation for more about ``add_argument`` usage."
msgstr ""
"オプション(例では ``delete``)は handle メソッドで辞書型変数の引数として利用可"
"能です。``add_argument`` の利用についてより詳細な情報を得るには Python 公式ド"
"キュメントの :py:mod:`argparse` を参照してください。"

msgid ""
"In addition to being able to add custom command line options, all :doc:"
"`management commands</ref/django-admin>` can accept some default options "
"such as :option:`--verbosity` and :option:`--traceback`."
msgstr ""
"独自のコマンドラインオプションを追加できるのに加え、:doc:`management "
"commands</ref/django-admin>` に定義された :option:`--verbosity` や :option:"
"`--traceback` といったオプションも標準で利用できます。"

msgid "Management commands and locales"
msgstr "管理コマンドとロケール"

msgid ""
"By default, the :meth:`BaseCommand.execute` method deactivates translations "
"because some commands shipped with Django perform several tasks (for "
"example, user-facing content rendering and database population) that require "
"a project-neutral string language."
msgstr ""
"標準では、:meth:`BaseCommand.execute` メソッドは、Django に含まれる一部のコマ"
"ンドが、プロジェクト全体を通じて中立な文字列の言語を必要とするタスク(例えばエ"
"ンドユーザーに対するコンテンツ出力やデータベースへのデータ投入など)を実行する"
"ため、翻訳処理を無効化しています。"

msgid ""
"If, for some reason, your custom management command needs to use a fixed "
"locale, you should manually activate and deactivate it in your :meth:"
"`~BaseCommand.handle` method using the functions provided by the I18N "
"support code::"
msgstr ""
"何らかの理由でカスタム管理コマンドから特定のロケールを利用する必要が有る場合"
"は、I18N をサポートしているコードから提供される関数を利用している :meth:"
"`~BaseCommand.handle` メソッド内で手動で activate と deactivate を行う必要が"
"有ります。"

msgid ""
"Another need might be that your command simply should use the locale set in "
"settings and Django should be kept from deactivating it. You can achieve it "
"by using the :data:`BaseCommand.leave_locale_alone` option."
msgstr ""
"単純に設定されたロケールをコマンドに利用させ、Django がそれを無効化しないよう"
"にしたい状況も考えられます。その状況では :data:`BaseCommand."
"leave_locale_alone` オプションを利用する事で望む結果を得ることができます。"

msgid ""
"When working on the scenarios described above though, take into account that "
"system management commands typically have to be very careful about running "
"in non-uniform locales, so you might need to:"
msgstr ""
"ただし先に述べた状況に取り組む場合、多様なロケールでのシステム管理コマンドの"
"実行には細心の注意を払う必要が有る事を考慮しておくべきです。すなわち以下に示"
"す点に注意してください:"

msgid ""
"Make sure the :setting:`USE_I18N` setting is always ``True`` when running "
"the command (this is a good example of the potential problems stemming from "
"a dynamic runtime environment that Django commands avoid offhand by "
"deactivating translations)."
msgstr ""
"そのコマンドが実行される際は設定値 :setting:`USE_I18N` が常に ``True`` である"
"事を確認してください。(これは Django を処理する動的ランタイム環境が翻訳機能を"
"即座に無効化する事に起因する潜在的な問題の好例です)"

msgid ""
"Review the code of your command and the code it calls for behavioral "
"differences when locales are changed and evaluate its impact on predictable "
"behavior of your command."
msgstr ""
"作成したコマンドとロケールが変わる事で振る舞いが変わるコードをレビューし、作"
"成したコマンドにおいて予想される振る舞いへの影響を評価してください。"

msgid "Testing"
msgstr "テスト"

msgid ""
"Information on how to test custom management commands can be found in the :"
"ref:`testing docs <topics-testing-management-commands>`."
msgstr ""
"カスタム管理コマンドのテストに関する情報は :ref:`テストに関するページ "
"<topics-testing-management-commands>` で得ることができます。"

msgid "Command objects"
msgstr "Command オブジェクト"

msgid "The base class from which all management commands ultimately derive."
msgstr "全ての管理コマンドの派生元となる基底クラス。"

msgid ""
"Use this class if you want access to all of the mechanisms which parse the "
"command-line arguments and work out what code to call in response; if you "
"don't need to change any of that behavior, consider using one of its :ref:"
"`subclasses<ref-basecommand-subclasses>`."
msgstr ""
"コマンドライン引数を処理したり応答からコードの該当箇所を洗い出す機構など全て"
"にアクセスしたい場合に利用してください。それらの振る舞いを代える必要が無けれ"
"ば、:ref:`サブクラス<ref-basecommand-subclasses>`の利用を検討してください。"

msgid ""
"Subclassing the :class:`BaseCommand` class requires that you implement the :"
"meth:`~BaseCommand.handle` method."
msgstr ""
":class:`BaseCommand` クラスのサブクラス化には :meth:`~BaseCommand.handle` メ"
"ソッドの実装が必要です。"

msgid "Attributes"
msgstr "属性"

msgid ""
"All attributes can be set in your derived class and can be used in :class:"
"`BaseCommand`’s :ref:`subclasses<ref-basecommand-subclasses>`."
msgstr ""
"属性は全て派生クラスでセットでき、:class:`BaseCommand` クラスの :ref:`サブク"
"ラス<ref-basecommand-subclasses>` で利用可能です。"

msgid ""
"A short description of the command, which will be printed in the help "
"message when the user runs the command ``python manage.py help <command>``."
msgstr ""
"コマンドに関する短い説明、ユーザーが ``python manage.py help <command>`` を実"
"行する事でヘルプメッセージとして表示されます。"

msgid ""
"If your command defines mandatory positional arguments, you can customize "
"the message error returned in the case of missing arguments. The default is "
"output by :py:mod:`argparse` (\"too few arguments\")."
msgstr ""
"入力が必須の位置引数を定義しており、その引数が失われている場合に返すエラー"
"メッセージを任意に設定する事ができます。デフォルトの出力は :py:mod:"
"`argparse` による出力(\"too few arguments\")です。"

msgid ""
"A boolean indicating whether the command outputs SQL statements; if "
"``True``, the output will automatically be wrapped with ``BEGIN;`` and "
"``COMMIT;``. Default value is ``False``."
msgstr ""

msgid ""
"A boolean; if ``True``, the command prints a warning if the set of "
"migrations on disk don't match the migrations in the database. A warning "
"doesn't prevent the command from executing. Default value is ``False``."
msgstr ""
"ブーリアン値。``True`` の場合、ディスク上に存在する一連のマイグレーション定義"
"がデータベース上に保存されたマイグレーション定義とマッチしない場合に警告を出"
"力します。この警告はコマンドの実行を停止させる物ではありません。デフォルトの"
"値は ``False`` です。"

msgid ""
"A boolean; if ``True``, the entire Django project will be checked for "
"potential problems prior to executing the command. Default value is ``True``."
msgstr ""
"ブーリアン値。``True`` の場合、コマンド実行前に Django プロジェクト全体が潜在"
"的な問題を抱えていないかチェックされます。デフォルトの値は ``True`` です。"

msgid ""
"A boolean indicating whether the locale set in settings should be preserved "
"during the execution of the command instead of being forcibly set to 'en-us'."
msgstr ""
"コマンド実行中にロケールを 'en-us' に強制的に切り替えず、設定で定義された値を"
"使うかを指定するブーリアン値です。"

msgid "Default value is ``False``."
msgstr "デフォルトの値は ``False`` です。"

msgid ""
"Make sure you know what you are doing if you decide to change the value of "
"this option in your custom command if it creates database content that is "
"locale-sensitive and such content shouldn't contain any translations (like "
"it happens e.g. with :mod:`django.contrib.auth` permissions) as making the "
"locale differ from the de facto default 'en-us' might cause unintended "
"effects. See the `Management commands and locales`_ section above for "
"further details."
msgstr ""
"ロケールの影響を受け、かつ事実上の標準ロケールである 'en-us' を利用せずに翻訳"
"も含まないデータベースの情報(例えば :mod:`django.contrib.auth` の権限の取り扱"
"い等)を生成する場合は意図しない挙動を引き起こす可能性が有り、カスタム管理コマ"
"ンドに対する本オプションの値の変更については与える影響を理解した上で決定して"
"ください。詳細は本ページ上部の `Management commands and locales`_ をご参照く"
"ださい。"

msgid ""
"An instance attribute that helps create colored output when writing to "
"``stdout`` or ``stderr``. For example::"
msgstr ""
"``stdout`` や ``stderr`` を記述した際にカラー出力を補助するインスタンス変数で"
"す。以下の利用例を参照ください::"

msgid ""
"See :ref:`syntax-coloring` to learn how to modify the color palette and to "
"see the available styles (use uppercased versions of the \"roles\" described "
"in that section)."
msgstr ""
"カラーパレットの調整と利用可能なスタイルについては :ref:`syntax-coloring` を"
"参照してください(このセクションに記述されている \"roles\" のアルファベットを"
"大文字にすると利用できます)。"

msgid ""
"If you pass the :option:`--no-color` option when running your command, all "
"``self.style()`` calls will return the original string uncolored."
msgstr ""
":option:`--no-color` オプションを渡してコマンドを実行した場合、全ての ``self."
"style()`` 呼び出しはオリジナルのカラー分けされていない出力を行います。"

msgid "Methods"
msgstr "メソッド"

msgid ""
":class:`BaseCommand` has a few methods that can be overridden but only the :"
"meth:`~BaseCommand.handle` method must be implemented."
msgstr ""

msgid "Implementing a constructor in a subclass"
msgstr "サブクラス内でのコンストラクタの実装"

msgid ""
"If you implement ``__init__`` in your subclass of :class:`BaseCommand`, you "
"must call :class:`BaseCommand`’s ``__init__``::"
msgstr ""
":class:`BaseCommand` を継承したサブクラス内で ``__init__`` を実装する場合、:"
"class:`BaseCommand` の ``__init__`` を呼び出す必要が有ります::"

msgid ""
"Entry point to add parser arguments to handle command line arguments passed "
"to the command. Custom commands should override this method to add both "
"positional and optional arguments accepted by the command. Calling "
"``super()`` is not needed when directly subclassing ``BaseCommand``."
msgstr ""
"コマンドに渡されたコマンドライン引数を操作するパーサーを追加するためのエント"
"リポイントです。カスタム管理コマンドが受け取る位置引数およびオプション引数を"
"追加するためにはこのメソッドをオーバーライドする必要が有ります。直接 "
"``BaseCommand`` を継承している場合は ``super()`` の呼び出しは必要有りません。"

msgid ""
"Returns the Django version, which should be correct for all built-in Django "
"commands. User-supplied commands can override this method to return their "
"own version."
msgstr ""

msgid ""
"Tries to execute this command, performing system checks if needed (as "
"controlled by the :attr:`requires_system_checks` attribute). If the command "
"raises a :exc:`CommandError`, it's intercepted and printed to stderr."
msgstr ""
"コマンドを実行し、必要とされた場合(:attr:`requires_system_checks` 属性によっ"
"て設定可能)システムチェックを行います。コマンドが :exc:`CommandError` 例外を"
"発生させた場合は、実行を中断して stderr に出力します。"

msgid "Calling a management command in your code"
msgstr "コード中での管理コマンドの呼び出し"

msgid ""
"``execute()`` should not be called directly from your code to execute a "
"command. Use :func:`~django.core.management.call_command` instead."
msgstr ""
"カスタム管理コマンドを実行するためにコード中から　``execute()`` を直接呼び出"
"す事は避けてください。代わりに :func:`~django.core.management.call_command` "
"を利用してください。"

msgid "The actual logic of the command. Subclasses must implement this method."
msgstr ""
"コマンドにおける実際の処理内容。サブクラスはこのメソッドを実装しなくてはなら"
"ない。"

msgid ""
"It may return a Unicode string which will be printed to ``stdout`` (wrapped "
"by ``BEGIN;`` and ``COMMIT;`` if :attr:`output_transaction` is ``True``)."
msgstr ""
"``stdout`` に出力される Unicode 文字列(:attr:`output_transaction` が "
"``True`` の場合 ``BEGIN;`` と ``COMMIT;`` で囲まれている)を返す場合がある。"

msgid ""
"Uses the system check framework to inspect the entire Django project for "
"potential problems. Serious problems are raised as a :exc:`CommandError`; "
"warnings are output to stderr; minor notifications are output to stdout."
msgstr ""
"潜在的な問題のために Django プロジェクト全体を検証するシステムチェックフレー"
"ムワークを利用します。致命的な問題は :exc:`CommandError` 例外を発生し、警告"
"は stderr への出力、重要でない通知は stdout への出力となります。"

msgid ""
"If ``app_configs`` and ``tags`` are both ``None``, all system checks are "
"performed. ``tags`` can be a list of check tags, like ``compatibility`` or "
"``models``."
msgstr ""
"``app_configs`` および ``tags`` が共に ``None`` であった場合、全てのシステム"
"チェックが実行されます。``tags`` はチェックタグ、例えば ``compatibility`` あ"
"るいは ``models`` 等、のリストとなります。"

msgid "``BaseCommand`` subclasses"
msgstr "``BaseCommand`` のサブクラス"

msgid ""
"A management command which takes one or more installed application labels as "
"arguments, and does something with each of them."
msgstr ""
"一つ以上のインストールされたアプリケーションラベルを引数として受け取り、それ"
"ぞれに対して何らかの処理を行う管理コマンド。"

msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~AppCommand.handle_app_config`, which will be called once "
"for each application."
msgstr ""
":meth:`~BaseCommand.handle` を実装する代わりに、サブクラスでは、アプリケー"
"ション毎に一度ずつだけ呼び出される :meth:`~AppCommand.handle_app_config` を実"
"装する必要が有ります。"

msgid ""
"Perform the command's actions for ``app_config``, which will be an :class:"
"`~django.apps.AppConfig` instance corresponding to an application label "
"given on the command line."
msgstr ""
"コマンドラインで渡されたアプリケーションラベル個々に対応している :class:"
"`~django.apps.AppConfig` のインスタンスである ``app_config`` に応じたコマンド"
"の処理を行います。"

msgid ""
"A management command which takes one or more arbitrary arguments (labels) on "
"the command line, and does something with each of them."
msgstr ""

msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~LabelCommand.handle_label`, which will be called once for "
"each label."
msgstr ""

msgid ""
"A string describing the arbitrary arguments passed to the command. The "
"string is used in the usage text and error messages of the command. Defaults "
"to ``'label'``."
msgstr ""
"コマンドに渡される任意引数について記述した文字列。この文字列はコマンドの使用"
"法やエラーメッセージに利用します。デフォルトは ``'label'`` です。"

msgid ""
"Perform the command's actions for ``label``, which will be the string as "
"given on the command line."
msgstr ""
"コマンドラインに渡された文字列である ``label`` に対応したコマンドの処理を行い"
"ます。"

msgid "Command exceptions"
msgstr "コマンドが発生させる例外"

msgid ""
"Exception class indicating a problem while executing a management command."
msgstr "管理コマンド実行中に発生した問題について示した例外クラス。"

msgid ""
"If this exception is raised during the execution of a management command "
"from a command line console, it will be caught and turned into a nicely-"
"printed error message to the appropriate output stream (i.e., stderr); as a "
"result, raising this exception (with a sensible description of the error) is "
"the preferred way to indicate that something has gone wrong in the execution "
"of a command."
msgstr ""
"コマンドラインコンソールから管理コマンドを実行中にこの例外が送出された場合、"
"その例外は捕捉されて適切な出力ストリーム(例えば stderr 等)に整形されたエラー"
"メッセージを表示させます。結果として、例外の送出は(エラーに関する明快な記述と"
"併せて)コマンド実行中何らかの問題が発生した場合に状態を示す好ましい方法となり"
"ます。"

msgid ""
"If a management command is called from code through :func:`~django.core."
"management.call_command`, it's up to you to catch the exception when needed."
msgstr ""
":func:`~django.core.management.call_command` を介して管理コマンドが実行された"
"場合は、例外の捕捉をするかどうかは実装に依存します。"

msgid "Writing custom model fields"
msgstr ""

msgid "Introduction"
msgstr "はじめに"

msgid ""
"The :doc:`model reference </topics/db/models>` documentation explains how to "
"use Django's standard field classes -- :class:`~django.db.models."
"CharField`, :class:`~django.db.models.DateField`, etc. For many purposes, "
"those classes are all you'll need. Sometimes, though, the Django version "
"won't meet your precise requirements, or you'll want to use a field that is "
"entirely different from those shipped with Django."
msgstr ""

msgid ""
"Django's built-in field types don't cover every possible database column "
"type -- only the common types, such as ``VARCHAR`` and ``INTEGER``. For more "
"obscure column types, such as geographic polygons or even user-created types "
"such as `PostgreSQL custom types`_, you can define your own Django ``Field`` "
"subclasses."
msgstr ""

msgid ""
"Alternatively, you may have a complex Python object that can somehow be "
"serialized to fit into a standard database column type. This is another case "
"where a ``Field`` subclass will help you use your object with your models."
msgstr ""

msgid "Our example object"
msgstr ""

msgid ""
"Creating custom fields requires a bit of attention to detail. To make things "
"easier to follow, we'll use a consistent example throughout this document: "
"wrapping a Python object representing the deal of cards in a hand of "
"Bridge_. Don't worry, you don't have to know how to play Bridge to follow "
"this example. You only need to know that 52 cards are dealt out equally to "
"four players, who are traditionally called *north*, *east*, *south* and "
"*west*.  Our class looks something like this::"
msgstr ""

msgid ""
"This is just an ordinary Python class, with nothing Django-specific about "
"it. We'd like to be able to do things like this in our models (we assume the "
"``hand`` attribute on the model is an instance of ``Hand``)::"
msgstr ""

msgid ""
"We assign to and retrieve from the ``hand`` attribute in our model just like "
"any other Python class. The trick is to tell Django how to handle saving and "
"loading such an object."
msgstr ""

msgid ""
"In order to use the ``Hand`` class in our models, we **do not** have to "
"change this class at all. This is ideal, because it means you can easily "
"write model support for existing classes where you cannot change the source "
"code."
msgstr ""

msgid ""
"You might only be wanting to take advantage of custom database column types "
"and deal with the data as standard Python types in your models; strings, or "
"floats, for example. This case is similar to our ``Hand`` example and we'll "
"note any differences as we go along."
msgstr ""

msgid "Background theory"
msgstr ""

msgid "Database storage"
msgstr ""

msgid ""
"The simplest way to think of a model field is that it provides a way to take "
"a normal Python object -- string, boolean, ``datetime``, or something more "
"complex like ``Hand`` -- and convert it to and from a format that is useful "
"when dealing with the database (and serialization, but, as we'll see later, "
"that falls out fairly naturally once you have the database side under "
"control)."
msgstr ""

msgid ""
"Fields in a model must somehow be converted to fit into an existing database "
"column type. Different databases provide different sets of valid column "
"types, but the rule is still the same: those are the only types you have to "
"work with. Anything you want to store in the database must fit into one of "
"those types."
msgstr ""

msgid ""
"Normally, you're either writing a Django field to match a particular "
"database column type, or there's a fairly straightforward way to convert "
"your data to, say, a string."
msgstr ""

msgid ""
"For our ``Hand`` example, we could convert the card data to a string of 104 "
"characters by concatenating all the cards together in a pre-determined order "
"-- say, all the *north* cards first, then the *east*, *south* and *west* "
"cards. So ``Hand`` objects can be saved to text or character columns in the "
"database."
msgstr ""

msgid "What does a field class do?"
msgstr ""

msgid ""
"All of Django's fields (and when we say *fields* in this document, we always "
"mean model fields and not :doc:`form fields </ref/forms/fields>`) are "
"subclasses of :class:`django.db.models.Field`. Most of the information that "
"Django records about a field is common to all fields -- name, help text, "
"uniqueness and so forth. Storing all that information is handled by "
"``Field``. We'll get into the precise details of what ``Field`` can do later "
"on; for now, suffice it to say that everything descends from ``Field`` and "
"then customizes key pieces of the class behavior."
msgstr ""

msgid ""
"It's important to realize that a Django field class is not what is stored in "
"your model attributes. The model attributes contain normal Python objects. "
"The field classes you define in a model are actually stored in the ``Meta`` "
"class when the model class is created (the precise details of how this is "
"done are unimportant here). This is because the field classes aren't "
"necessary when you're just creating and modifying attributes. Instead, they "
"provide the machinery for converting between the attribute value and what is "
"stored in the database or sent to the :doc:`serializer </topics/"
"serialization>`."
msgstr ""

msgid ""
"Keep this in mind when creating your own custom fields. The Django ``Field`` "
"subclass you write provides the machinery for converting between your Python "
"instances and the database/serializer values in various ways (there are "
"differences between storing a value and using a value for lookups, for "
"example). If this sounds a bit tricky, don't worry -- it will become clearer "
"in the examples below. Just remember that you will often end up creating two "
"classes when you want a custom field:"
msgstr ""

msgid ""
"The first class is the Python object that your users will manipulate. They "
"will assign it to the model attribute, they will read from it for displaying "
"purposes, things like that. This is the ``Hand`` class in our example."
msgstr ""

msgid ""
"The second class is the ``Field`` subclass. This is the class that knows how "
"to convert your first class back and forth between its permanent storage "
"form and the Python form."
msgstr ""

msgid "Writing a field subclass"
msgstr ""

msgid ""
"When planning your :class:`~django.db.models.Field` subclass, first give "
"some thought to which existing :class:`~django.db.models.Field` class your "
"new field is most similar to. Can you subclass an existing Django field and "
"save yourself some work? If not, you should subclass the :class:`~django.db."
"models.Field` class, from which everything is descended."
msgstr ""

msgid ""
"Initializing your new field is a matter of separating out any arguments that "
"are specific to your case from the common arguments and passing the latter "
"to the ``__init__()`` method of :class:`~django.db.models.Field` (or your "
"parent class)."
msgstr ""

msgid ""
"In our example, we'll call our field ``HandField``. (It's a good idea to "
"call your :class:`~django.db.models.Field` subclass ``<Something>Field``, so "
"it's easily identifiable as a :class:`~django.db.models.Field` subclass.) It "
"doesn't behave like any existing field, so we'll subclass directly from :"
"class:`~django.db.models.Field`::"
msgstr ""

msgid ""
"Our ``HandField`` accepts most of the standard field options (see the list "
"below), but we ensure it has a fixed length, since it only needs to hold 52 "
"card values plus their suits; 104 characters in total."
msgstr ""

msgid ""
"Many of Django's model fields accept options that they don't do anything "
"with. For example, you can pass both :attr:`~django.db.models.Field."
"editable` and :attr:`~django.db.models.DateField.auto_now` to a :class:"
"`django.db.models.DateField` and it will simply ignore the :attr:`~django.db."
"models.Field.editable` parameter (:attr:`~django.db.models.DateField."
"auto_now` being set implies ``editable=False``). No error is raised in this "
"case."
msgstr ""

msgid ""
"This behavior simplifies the field classes, because they don't need to check "
"for options that aren't necessary. They just pass all the options to the "
"parent class and then don't use them later on. It's up to you whether you "
"want your fields to be more strict about the options they select, or to use "
"the simpler, more permissive behavior of the current fields."
msgstr ""

msgid "The ``Field.__init__()`` method takes the following parameters:"
msgstr ""

msgid ":attr:`~django.db.models.Field.verbose_name`"
msgstr ""

msgid "``name``"
msgstr ""

msgid ":attr:`~django.db.models.Field.primary_key`"
msgstr ""

msgid ":attr:`~django.db.models.CharField.max_length`"
msgstr ""

msgid ":attr:`~django.db.models.Field.unique`"
msgstr ""

msgid ":attr:`~django.db.models.Field.blank`"
msgstr ""

msgid ":attr:`~django.db.models.Field.null`"
msgstr ""

msgid ":attr:`~django.db.models.Field.db_index`"
msgstr ""

msgid ""
"``rel``: Used for related fields (like :class:`ForeignKey`). For advanced "
"use only."
msgstr ""

msgid ":attr:`~django.db.models.Field.default`"
msgstr ""

msgid ":attr:`~django.db.models.Field.editable`"
msgstr ""

msgid ""
"``serialize``: If ``False``, the field will not be serialized when the model "
"is passed to Django's :doc:`serializers </topics/serialization>`. Defaults "
"to ``True``."
msgstr ""

msgid ":attr:`~django.db.models.Field.unique_for_date`"
msgstr ""

msgid ":attr:`~django.db.models.Field.unique_for_month`"
msgstr ""

msgid ":attr:`~django.db.models.Field.unique_for_year`"
msgstr ""

msgid ":attr:`~django.db.models.Field.choices`"
msgstr ""

msgid ":attr:`~django.db.models.Field.help_text`"
msgstr ""

msgid ":attr:`~django.db.models.Field.db_column`"
msgstr ""

msgid ""
":attr:`~django.db.models.Field.db_tablespace`: Only for index creation, if "
"the backend supports :doc:`tablespaces </topics/db/tablespaces>`. You can "
"usually ignore this option."
msgstr ""

msgid ""
":attr:`~django.db.models.Field.auto_created`: ``True`` if the field was "
"automatically created, as for the :class:`~django.db.models.OneToOneField` "
"used by model inheritance. For advanced use only."
msgstr ""

msgid ""
"All of the options without an explanation in the above list have the same "
"meaning they do for normal Django fields. See the :doc:`field documentation "
"</ref/models/fields>` for examples and details."
msgstr ""

msgid "Field deconstruction"
msgstr ""

msgid ""
"The counterpoint to writing your ``__init__()`` method is writing the "
"``deconstruct()`` method. This method tells Django how to take an instance "
"of your new field and reduce it to a serialized form - in particular, what "
"arguments to pass to ``__init__()`` to re-create it."
msgstr ""

msgid ""
"If you haven't added any extra options on top of the field you inherited "
"from, then there's no need to write a new ``deconstruct()`` method. If, "
"however, you're changing the arguments passed in ``__init__()`` (like we are "
"in ``HandField``), you'll need to supplement the values being passed."
msgstr ""

msgid ""
"The contract of ``deconstruct()`` is simple; it returns a tuple of four "
"items: the field's attribute name, the full import path of the field class, "
"the positional arguments (as a list), and the keyword arguments (as a dict). "
"Note this is different from the ``deconstruct()`` method :ref:`for custom "
"classes <custom-deconstruct-method>` which returns a tuple of three things."
msgstr ""

msgid ""
"As a custom field author, you don't need to care about the first two values; "
"the base ``Field`` class has all the code to work out the field's attribute "
"name and import path. You do, however, have to care about the positional and "
"keyword arguments, as these are likely the things you are changing."
msgstr ""

msgid ""
"For example, in our ``HandField`` class we're always forcibly setting "
"max_length in ``__init__()``. The ``deconstruct()`` method on the base "
"``Field`` class will see this and try to return it in the keyword arguments; "
"thus, we can drop it from the keyword arguments for readability::"
msgstr ""

msgid ""
"If you add a new keyword argument, you need to write code to put its value "
"into ``kwargs`` yourself::"
msgstr ""

msgid ""
"More complex examples are beyond the scope of this document, but remember - "
"for any configuration of your Field instance, ``deconstruct()`` must return "
"arguments that you can pass to ``__init__`` to reconstruct that state."
msgstr ""

msgid ""
"Pay extra attention if you set new default values for arguments in the "
"``Field`` superclass; you want to make sure they're always included, rather "
"than disappearing if they take on the old default value."
msgstr ""

msgid ""
"In addition, try to avoid returning values as positional arguments; where "
"possible, return values as keyword arguments for maximum future "
"compatibility. Of course, if you change the names of things more often than "
"their position in the constructor's argument list, you might prefer "
"positional, but bear in mind that people will be reconstructing your field "
"from the serialized version for quite a while (possibly years), depending "
"how long your migrations live for."
msgstr ""

msgid ""
"You can see the results of deconstruction by looking in migrations that "
"include the field, and you can test deconstruction in unit tests by just "
"deconstructing and reconstructing the field::"
msgstr ""

msgid "Changing a custom field's base class"
msgstr ""

msgid ""
"You can't change the base class of a custom field because Django won't "
"detect the change and make a migration for it. For example, if you start "
"with::"
msgstr ""

msgid ""
"and then decide that you want to use ``TextField`` instead, you can't change "
"the subclass like this::"
msgstr ""

msgid ""
"Instead, you must create a new custom field class and update your models to "
"reference it::"
msgstr ""

msgid ""
"As discussed in :ref:`removing fields <migrations-removing-model-fields>`, "
"you must retain the original ``CustomCharField`` class as long as you have "
"migrations that reference it."
msgstr ""

msgid "Documenting your custom field"
msgstr ""

msgid ""
"As always, you should document your field type, so users will know what it "
"is. In addition to providing a docstring for it, which is useful for "
"developers, you can also allow users of the admin app to see a short "
"description of the field type via the :doc:`django.contrib.admindocs </ref/"
"contrib/admin/admindocs>` application. To do this simply provide descriptive "
"text in a :attr:`~Field.description` class attribute of your custom field. "
"In the above example, the description displayed by the ``admindocs`` "
"application for a ``HandField`` will be 'A hand of cards (bridge style)'."
msgstr ""

msgid ""
"In the :mod:`django.contrib.admindocs` display, the field description is "
"interpolated with ``field.__dict__`` which allows the description to "
"incorporate arguments of the field. For example, the description for :class:"
"`~django.db.models.CharField` is::"
msgstr ""

msgid "Useful methods"
msgstr ""

msgid ""
"Once you've created your :class:`~django.db.models.Field` subclass, you "
"might consider overriding a few standard methods, depending on your field's "
"behavior. The list of methods below is in approximately decreasing order of "
"importance, so start from the top."
msgstr ""

msgid "Custom database types"
msgstr ""

msgid ""
"Say you've created a PostgreSQL custom type called ``mytype``. You can "
"subclass ``Field`` and implement the :meth:`~Field.db_type` method, like so::"
msgstr ""

msgid ""
"Once you have ``MytypeField``, you can use it in any model, just like any "
"other ``Field`` type::"
msgstr ""

msgid ""
"If you aim to build a database-agnostic application, you should account for "
"differences in database column types. For example, the date/time column type "
"in PostgreSQL is called ``timestamp``, while the same column in MySQL is "
"called ``datetime``. The simplest way to handle this in a :meth:`~Field."
"db_type` method is to check the ``connection.settings_dict['ENGINE']`` "
"attribute."
msgstr ""

msgid "For example::"
msgstr ""

msgid ""
"The :meth:`~Field.db_type` and :meth:`~Field.rel_db_type` methods are called "
"by Django when the framework constructs the ``CREATE TABLE`` statements for "
"your application -- that is, when you first create your tables. The methods "
"are also called when constructing a ``WHERE`` clause that includes the model "
"field -- that is, when you retrieve data using QuerySet methods like "
"``get()``, ``filter()``, and ``exclude()`` and have the model field as an "
"argument. They are not called at any other time, so it can afford to execute "
"slightly complex code, such as the ``connection.settings_dict`` check in the "
"above example."
msgstr ""

msgid ""
"Some database column types accept parameters, such as ``CHAR(25)``, where "
"the parameter ``25`` represents the maximum column length. In cases like "
"these, it's more flexible if the parameter is specified in the model rather "
"than being hard-coded in the ``db_type()`` method. For example, it wouldn't "
"make much sense to have a ``CharMaxlength25Field``, shown here::"
msgstr ""

msgid ""
"The better way of doing this would be to make the parameter specifiable at "
"run time -- i.e., when the class is instantiated. To do that, just implement "
"``Field.__init__()``, like so::"
msgstr ""

msgid ""
"Finally, if your column requires truly complex SQL setup, return ``None`` "
"from :meth:`.db_type`. This will cause Django's SQL creation code to skip "
"over this field. You are then responsible for creating the column in the "
"right table in some other way, of course, but this gives you a way to tell "
"Django to get out of the way."
msgstr ""

msgid ""
"The :meth:`~Field.rel_db_type` method is called by fields such as "
"``ForeignKey`` and ``OneToOneField`` that point to another field to "
"determine their database column data types. For example, if you have an "
"``UnsignedAutoField``, you also need the foreign keys that point to that "
"field to use the same data type::"
msgstr ""

msgid "The :meth:`~Field.rel_db_type` method was added."
msgstr ""

msgid "Converting values to Python objects"
msgstr ""

msgid ""
"If your custom :class:`~Field` class deals with data structures that are "
"more complex than strings, dates, integers, or floats, then you may need to "
"override :meth:`~Field.from_db_value` and :meth:`~Field.to_python`."
msgstr ""

msgid ""
"If present for the field subclass, ``from_db_value()`` will be called in all "
"circumstances when the data is loaded from the database, including in "
"aggregates and :meth:`~django.db.models.query.QuerySet.values` calls."
msgstr ""

msgid ""
"``to_python()`` is called by deserialization and during the :meth:`~django."
"db.models.Model.clean` method used from forms."
msgstr ""

msgid ""
"As a general rule, ``to_python()`` should deal gracefully with any of the "
"following arguments:"
msgstr ""

msgid ""
"An instance of the correct type (e.g., ``Hand`` in our ongoing example)."
msgstr ""

msgid "A string"
msgstr ""

msgid "``None`` (if the field allows ``null=True``)"
msgstr ""

msgid ""
"In our ``HandField`` class, we're storing the data as a VARCHAR field in the "
"database, so we need to be able to process strings and ``None`` in the "
"``from_db_value()``. In ``to_python()``, we need to also handle ``Hand`` "
"instances::"
msgstr ""

msgid ""
"Notice that we always return a ``Hand`` instance from these methods. That's "
"the Python object type we want to store in the model's attribute."
msgstr ""

msgid ""
"For ``to_python()``, if anything goes wrong during value conversion, you "
"should raise a :exc:`~django.core.exceptions.ValidationError` exception."
msgstr ""

msgid "Converting Python objects to query values"
msgstr ""

msgid ""
"Since using a database requires conversion in both ways, if you override :"
"meth:`~Field.to_python` you also have to override :meth:`~Field."
"get_prep_value` to convert Python objects back to query values."
msgstr ""

msgid ""
"If your custom field uses the ``CHAR``, ``VARCHAR`` or ``TEXT`` types for "
"MySQL, you must make sure that :meth:`.get_prep_value` always returns a "
"string type. MySQL performs flexible and unexpected matching when a query is "
"performed on these types and the provided value is an integer, which can "
"cause queries to include unexpected objects in their results. This problem "
"cannot occur if you always return a string type from :meth:`.get_prep_value`."
msgstr ""

msgid "Converting query values to database values"
msgstr ""

msgid ""
"Some data types (for example, dates) need to be in a specific format before "
"they can be used by a database backend. :meth:`~Field.get_db_prep_value` is "
"the method where those conversions should be made. The specific connection "
"that will be used for the query is passed as the ``connection`` parameter. "
"This allows you to use backend-specific conversion logic if it is required."
msgstr ""

msgid ""
"For example, Django uses the following method for its :class:`BinaryField`::"
msgstr ""

msgid ""
"In case your custom field needs a special conversion when being saved that "
"is not the same as the conversion used for normal query parameters, you can "
"override :meth:`~Field.get_db_prep_save`."
msgstr ""

msgid "Preprocessing values before saving"
msgstr ""

msgid ""
"If you want to preprocess the value just before saving, you can use :meth:"
"`~Field.pre_save`. For example, Django's :class:`~django.db.models."
"DateTimeField` uses this method to set the attribute correctly in the case "
"of :attr:`~django.db.models.DateField.auto_now` or :attr:`~django.db.models."
"DateField.auto_now_add`."
msgstr ""

msgid ""
"If you do override this method, you must return the value of the attribute "
"at the end. You should also update the model's attribute if you make any "
"changes to the value so that code holding references to the model will "
"always see the correct value."
msgstr ""

msgid "Specifying the form field for a model field"
msgstr ""

msgid ""
"To customize the form field used by :class:`~django.forms.ModelForm`, you "
"can override :meth:`~Field.formfield`."
msgstr ""

msgid ""
"The form field class can be specified via the ``form_class`` and "
"``choices_form_class`` arguments; the latter is used if the field has "
"choices specified, the former otherwise. If these arguments are not "
"provided, :class:`~django.forms.CharField` or :class:`~django.forms."
"TypedChoiceField` will be used."
msgstr ""

msgid ""
"All of the ``kwargs`` dictionary is passed directly to the form field's "
"``__init__()`` method. Normally, all you need to do is set up a good default "
"for the ``form_class`` (and maybe ``choices_form_class``) argument and then "
"delegate further handling to the parent class. This might require you to "
"write a custom form field (and even a form widget). See the :doc:`forms "
"documentation </topics/forms/index>` for information about this."
msgstr ""

msgid ""
"Continuing our ongoing example, we can write the :meth:`~Field.formfield` "
"method as::"
msgstr ""

msgid ""
"This assumes we've imported a ``MyFormField`` field class (which has its own "
"default widget). This document doesn't cover the details of writing custom "
"form fields."
msgstr ""

msgid "Emulating built-in field types"
msgstr ""

msgid ""
"If you have created a :meth:`.db_type` method, you don't need to worry "
"about :meth:`.get_internal_type` -- it won't be used much. Sometimes, "
"though, your database storage is similar in type to some other field, so you "
"can use that other field's logic to create the right column."
msgstr ""

msgid ""
"No matter which database backend we are using, this will mean that :djadmin:"
"`migrate` and other SQL commands create the right column type for storing a "
"string."
msgstr ""

msgid ""
"If :meth:`.get_internal_type` returns a string that is not known to Django "
"for the database backend you are using -- that is, it doesn't appear in "
"``django.db.backends.<db_name>.base.DatabaseWrapper.data_types`` -- the "
"string will still be used by the serializer, but the default :meth:`~Field."
"db_type` method will return ``None``. See the documentation of :meth:`~Field."
"db_type` for reasons why this might be useful. Putting a descriptive string "
"in as the type of the field for the serializer is a useful idea if you're "
"ever going to be using the serializer output in some other place, outside of "
"Django."
msgstr ""

msgid "Converting field data for serialization"
msgstr ""

msgid ""
"To customize how the values are serialized by a serializer, you can "
"override :meth:`~Field.value_to_string`. Using ``value_from_object()`` is "
"the best way to get the field's value prior to serialization. For example, "
"since our ``HandField`` uses strings for its data storage anyway, we can "
"reuse some existing conversion code::"
msgstr ""

msgid "Some general advice"
msgstr ""

msgid ""
"Writing a custom field can be a tricky process, particularly if you're doing "
"complex conversions between your Python types and your database and "
"serialization formats. Here are a couple of tips to make things go more "
"smoothly:"
msgstr ""

msgid ""
"Look at the existing Django fields (in :file:`django/db/models/fields/"
"__init__.py`) for inspiration. Try to find a field that's similar to what "
"you want and extend it a little bit, instead of creating an entirely new "
"field from scratch."
msgstr ""

msgid ""
"Put a ``__str__()`` (``__unicode__()`` on Python 2) method on the class "
"you're wrapping up as a field. There are a lot of places where the default "
"behavior of the field code is to call :func:`~django.utils.encoding."
"force_text` on the value. (In our examples in this document, ``value`` would "
"be a ``Hand`` instance, not a ``HandField``). So if your ``__str__()`` "
"method (``__unicode__()`` on Python 2) automatically converts to the string "
"form of your Python object, you can save yourself a lot of work."
msgstr ""

msgid "Writing a ``FileField`` subclass"
msgstr ""

msgid ""
"In addition to the above methods, fields that deal with files have a few "
"other special requirements which must be taken into account. The majority of "
"the mechanics provided by ``FileField``, such as controlling database "
"storage and retrieval, can remain unchanged, leaving subclasses to deal with "
"the challenge of supporting a particular type of file."
msgstr ""

msgid ""
"Django provides a ``File`` class, which is used as a proxy to the file's "
"contents and operations. This can be subclassed to customize how the file is "
"accessed, and what methods are available. It lives at ``django.db.models."
"fields.files``, and its default behavior is explained in the :doc:`file "
"documentation </ref/files/file>`."
msgstr ""

msgid ""
"Once a subclass of ``File`` is created, the new ``FileField`` subclass must "
"be told to use it. To do so, simply assign the new ``File`` subclass to the "
"special ``attr_class`` attribute of the ``FileField`` subclass."
msgstr ""

msgid "A few suggestions"
msgstr ""

msgid ""
"In addition to the above details, there are a few guidelines which can "
"greatly improve the efficiency and readability of the field's code."
msgstr ""

msgid ""
"The source for Django's own ``ImageField`` (in ``django/db/models/fields/"
"files.py``) is a great example of how to subclass ``FileField`` to support a "
"particular type of file, as it incorporates all of the techniques described "
"above."
msgstr ""

msgid ""
"Cache file attributes wherever possible. Since files may be stored in remote "
"storage systems, retrieving them may cost extra time, or even money, that "
"isn't always necessary. Once a file is retrieved to obtain some data about "
"its content, cache as much of that data as possible to reduce the number of "
"times the file must be retrieved on subsequent calls for that information."
msgstr ""

msgid "Custom template tags and filters"
msgstr "独自のテンプレートタグとフィルタ"

msgid ""
"Django's template language comes with a wide variety of :doc:`built-in tags "
"and filters </ref/templates/builtins>` designed to address the presentation "
"logic needs of your application. Nevertheless, you may find yourself needing "
"functionality that is not covered by the core set of template primitives. "
"You can extend the template engine by defining custom tags and filters using "
"Python, and then make them available to your templates using the :ttag:`{% "
"load %}<load>` tag."
msgstr ""
"Django のテンプレート言語は、アプリケーションのプレゼンテーションロジックの"
"ニーズに対応するように設計された、多種多様な :doc:`埋め込みタグやフィルタ</"
"ref/templates/builtins>` を搭載しています。それにもかかわらず、あなた自身がテ"
"ンプレート構成要素のコア・セットでカバーされていない機能を必要とするかもしれ"
"ません。そのときは Python を使用し、カスタムタグやフィルタを定義することに"
"よって、テンプレートエンジンを拡張して、:ttag:`{% load %}<load>` タグを使用し"
"てからテンプレートにそれらの機能を利用することができます。"

msgid "Code layout"
msgstr "コードのレイアウト"

msgid ""
"The most common place to specify custom template tags and filters is inside "
"a Django app. If they relate to an existing app, it makes sense to bundle "
"them there; otherwise, they can be added to a new app. When a Django app is "
"added to :setting:`INSTALLED_APPS`, any tags it defines in the conventional "
"location described below are automatically made available to load within "
"templates."
msgstr ""
"独自のテンプレートタグやフィルタを指定するための最も一般的な場所は、Django の"
"アプリケーションの内部です。それらが既存のアプリに関連するものである場合は、"
"この場所にバンドルするのが最適です; それ以外の場合は、新しいアプリケーション"
"に追加されてしまいます。Django のアプリケーションが :setting:"
"`INSTALLED_APPS` に追加されると、以下に記載された従来の場所に定義したタグは、"
"自動的にテンプレート内に読み込むことが可能になります。"

msgid ""
"The app should contain a ``templatetags`` directory, at the same level as "
"``models.py``, ``views.py``, etc. If this doesn't already exist, create it - "
"don't forget the ``__init__.py`` file to ensure the directory is treated as "
"a Python package."
msgstr ""
"アプリケーションは、\"models.py\" や \"views.py\" などと同じレベルに "
"\"templatetags\" ディレクトリを含むべきです。まだ存在していない場合は、ディレ"
"クトリが Python パッケージとして扱われるようにするため、\"__init__.py\" を忘"
"れないでください。"

msgid "Development server won't automatically restart"
msgstr "Webサーバが自動的にリスタートしない場合"

msgid ""
"After adding the ``templatetags``  module, you will need to restart your "
"server before you can use the tags or filters in templates."
msgstr ""
"` templatetags` モジュールを追加した後、あなたはテンプレートでタグやフィルタ"
"を使用する前に、サーバーを再起動する必要があります。"

msgid ""
"Your custom tags and filters will live in a module inside the "
"``templatetags`` directory. The name of the module file is the name you'll "
"use to load the tags later, so be careful to pick a name that won't clash "
"with custom tags and filters in another app."
msgstr ""
"カスタムタグやフィルタは ``templatetags`` ディレクトリ内のモジュールにありま"
"す。モジュールファイルの名前は、あとでタグをロードして使うので、別のアプリで"
"カスタムタグやフィルタと衝突しない名前を選択するように心がけてください。"

msgid ""
"For example, if your custom tags/filters are in a file called ``poll_extras."
"py``, your app layout might look like this::"
msgstr ""
"例えば、カスタムタグやフィルタが \"poll_extras.py\" というファイルに入ってい"
"る場合、あなたのアプリケーションのレイアウトは以下のようになります::"

msgid "And in your template you would use the following:"
msgstr "そしてあなたはテンプレートの中で次の手順を使用します。"

msgid ""
"The app that contains the custom tags must be in :setting:`INSTALLED_APPS` "
"in order for the :ttag:`{% load %}<load>` tag to work. This is a security "
"feature: It allows you to host Python code for many template libraries on a "
"single host machine without enabling access to all of them for every Django "
"installation."
msgstr ""
"カスタムタグを含むアプリケーションは、:ttag:`{% load %}<load>` タグを機能させ"
"るために :setting:`INSTALLED_APPS` 内に記述される必要があります。これは、セ"
"キュリティ機能です: 毎回の Django のインストールでこれらへのアクセスを有効化"
"することなく、単一のホストマシン上の多数のテンプレートライブラリに対して "
"Python のコードをホストできるようにします。"

msgid ""
"There's no limit on how many modules you put in the ``templatetags`` "
"package. Just keep in mind that a :ttag:`{% load %}<load>` statement will "
"load tags/filters for the given Python module name, not the name of the app."
msgstr ""
"どれだけ多くのモジュールを ``templatetags``パッケージに入れても制限はありませ"
"ん。ただ、:ttag:`{% load %}<load>` 文は、アプリケーションの名前ではなく、与え"
"られた Python のモジュール名に対してタグ/フィルタをロードすることに注意してく"
"ださい。"

msgid ""
"To be a valid tag library, the module must contain a module-level variable "
"named ``register`` that is a ``template.Library`` instance, in which all the "
"tags and filters are registered. So, near the top of your module, put the "
"following::"
msgstr ""
"有効なタグライブラリにするため、モジュールは、``register`` という名前のモ"
"ジュールレベルの変数を含む必要があります。これは、すべてのタグとフィルタが登"
"録されている ``template.Library`` のインスタンスです。そのため、あなたのモ"
"ジュールの上部に、次のコードを記述してください::"

msgid ""
"Alternatively, template tag modules can be registered through the "
"``'libraries'`` argument to :class:`~django.template.backends.django."
"DjangoTemplates`. This is useful if you want to use a different label from "
"the template tag module name when loading template tags. It also enables you "
"to register tags without installing an application."
msgstr ""
"あるいは、テンプレートタグのモジュールは、:class:`~django.template.backends."
"django.DjangoTemplates` への ``'libraries'`` 引数を通じて登録することもできま"
"す。テンプレートタグをロードするときに、テンプレートタグのモジュール名とは異"
"なるラベルを使用したい場合に便利です。また、アプリケーションをインストールせ"
"ずに、タグを登録できるようになります。"

msgid "Behind the scenes"
msgstr "背景"

msgid ""
"For a ton of examples, read the source code for Django's default filters and "
"tags. They're in ``django/template/defaultfilters.py`` and ``django/template/"
"defaulttags.py``, respectively."
msgstr ""
"ものすごい量の例になるため、Django のデフォルトのフィルタやタグのソースコード"
"を読んでみてください。それらは ``django/template/defaultfilters.py`` と "
"``django/template/defaulttags.py`` それぞれの中にあります。"

msgid "For more information on the :ttag:`load` tag, read its documentation."
msgstr ":ttag:`load` タグの詳細については、ドキュメントを参照してください。"

msgid "Writing custom template filters"
msgstr "独自のテンプレートフィルタを記述する"

msgid ""
"Custom filters are just Python functions that take one or two arguments:"
msgstr "独自のフィルタは、1 つか 2 つの引数を取る、単なる Python の関数です:"

msgid "The value of the variable (input) -- not necessarily a string."
msgstr "変数の値 (インプット) -- 文字列とは限りません。"

msgid ""
"The value of the argument -- this can have a default value, or be left out "
"altogether."
msgstr "引数の値 -- デフォルト値を持つことも、完全に省略することもできます。"

msgid ""
"For example, in the filter ``{{ var|foo:\"bar\" }}``, the filter ``foo`` "
"would be passed the variable ``var`` and the argument ``\"bar\"``."
msgstr ""
"例えば、フィルタ ``{{ var|foo:\"bar\" }}`` の中で、フィルタ ``foo`` は変数 "
"``var`` と引数 ``\"bar\"`` を渡されます。"

msgid ""
"Since the template language doesn't provide exception handling, any "
"exception raised from a template filter will be exposed as a server error. "
"Thus, filter functions should avoid raising exceptions if there is a "
"reasonable fallback value to return. In case of input that represents a "
"clear bug in a template, raising an exception may still be better than "
"silent failure which hides the bug."
msgstr ""
"テンプレート言語は例外処理を提供しないので、テンプレートフィルタから生成され"
"た例外はすべてサーバーエラーとして公開されます。したがって、フィルタ関数は、"
"返すべき妥当なフォールバック値がある場合には例外を発生させないようにする必要"
"があります。テンプレートの明確なバグを表すインプットの場合、例外を発生させる"
"方が、バグを隠すサイレントな失敗よりも適切でしょう。"

msgid "Here's an example filter definition::"
msgstr "以下はフィルタ定義の例です::"

msgid "And here's an example of how that filter would be used:"
msgstr "そして、以下はフィルタがどのように使われるかの例です:"

msgid ""
"Most filters don't take arguments. In this case, just leave the argument out "
"of your function. Example::"
msgstr ""
"ほとんどのフィルタは引数を取りません。この場合、関数関数の引数を省略してくだ"
"さい。例::"

msgid "Registering custom filters"
msgstr "独自のフィルタを登録する"

msgid ""
"Once you've written your filter definition, you need to register it with "
"your ``Library`` instance, to make it available to Django's template "
"language::"
msgstr ""
"フィルタ定義を書き終わったら、Django のテンプレート言語で使用できるようにする"
"ため、``Library`` のインスタンスに登録する必要があります。"

msgid "The ``Library.filter()`` method takes two arguments:"
msgstr "``Library.filter()`` メソッドは 2 つの引数を取ります:"

msgid "The name of the filter -- a string."
msgstr "フィルタの名前 -- 文字列です。"

msgid ""
"The compilation function -- a Python function (not the name of the function "
"as a string)."
msgstr ""
"編集用の関数 -- Python の関数です (文字列としての関数名ではありません)。"

msgid "You can use ``register.filter()`` as a decorator instead::"
msgstr "代わりに ``register.filter()`` をデコレータとして使用できます。"

msgid ""
"If you leave off the ``name`` argument, as in the second example above, "
"Django will use the function's name as the filter name."
msgstr ""
"``name`` 引数を省略した場合、上記の 2 番目の例と同じように、Django はフィルタ"
"名として関数の名前を利用します。"

msgid ""
"Finally, ``register.filter()`` also accepts three keyword arguments, "
"``is_safe``, ``needs_autoescape``, and ``expects_localtime``. These "
"arguments are described in :ref:`filters and auto-escaping <filters-auto-"
"escaping>` and :ref:`filters and time zones <filters-timezones>` below."
msgstr ""
"最後に、``register.filter()`` は 3 つのキーワード引数 (``is_safe``、"
"``needs_autoescape``、 ``expects_localtime``) を受け入れます。これらの引数"
"は、後述の :ref:`フィルタと自動エスケープ <filters-auto-escaping>` と :ref:`"
"フィルタとタイムゾーン <filters-timezones>` の中で説明されています。"

msgid "Template filters that expect strings"
msgstr "文字列を要するテンプレートフィルタ"

msgid ""
"If you're writing a template filter that only expects a string as the first "
"argument, you should use the decorator ``stringfilter``. This will convert "
"an object to its string value before being passed to your function::"
msgstr ""
"第 1 引数として文字数を要求するだけのテンプレートフィルタを記述している場合、"
"デコレータ ``stringfilter`` を使う必要があります。これは、関数に渡される前に"
"オブジェクトを文字列に変換します。"

msgid ""
"This way, you'll be able to pass, say, an integer to this filter, and it "
"won't cause an ``AttributeError`` (because integers don't have ``lower()`` "
"methods)."
msgstr ""
"この方法では、このフィルタに整数を渡すことができます。(整数には ``lower()``メ"
"ソッドがないので) `` AttributeError`` が発生しません。"

msgid "Filters and auto-escaping"
msgstr "フィルタと自動エスケープ"

msgid ""
"When writing a custom filter, give some thought to how the filter will "
"interact with Django's auto-escaping behavior. Note that three types of "
"strings can be passed around inside the template code:"
msgstr ""

msgid ""
"**Raw strings** are the native Python ``str`` or ``unicode`` types. On "
"output, they're escaped if auto-escaping is in effect and presented "
"unchanged, otherwise."
msgstr ""

msgid ""
"**Safe strings** are strings that have been marked safe from further "
"escaping at output time. Any necessary escaping has already been done. "
"They're commonly used for output that contains raw HTML that is intended to "
"be interpreted as-is on the client side."
msgstr ""

msgid ""
"Internally, these strings are of type ``SafeBytes`` or ``SafeText``. They "
"share a common base class of ``SafeData``, so you can test for them using "
"code like::"
msgstr ""

msgid "Template filter code falls into one of two situations:"
msgstr ""

msgid ""
"Your filter does not introduce any HTML-unsafe characters (``<``, ``>``, "
"``'``, ``\"`` or ``&``) into the result that were not already present. In "
"this case, you can let Django take care of all the auto-escaping handling "
"for you. All you need to do is set the ``is_safe`` flag to ``True`` when you "
"register your filter function, like so::"
msgstr ""

msgid ""
"This flag tells Django that if a \"safe\" string is passed into your filter, "
"the result will still be \"safe\" and if a non-safe string is passed in, "
"Django will automatically escape it, if necessary."
msgstr ""

msgid ""
"You can think of this as meaning \"this filter is safe -- it doesn't "
"introduce any possibility of unsafe HTML.\""
msgstr ""

msgid ""
"The reason ``is_safe`` is necessary is because there are plenty of normal "
"string operations that will turn a ``SafeData`` object back into a normal "
"``str`` or ``unicode`` object and, rather than try to catch them all, which "
"would be very difficult, Django repairs the damage after the filter has "
"completed."
msgstr ""

msgid ""
"For example, suppose you have a filter that adds the string ``xx`` to the "
"end of any input. Since this introduces no dangerous HTML characters to the "
"result (aside from any that were already present), you should mark your "
"filter with ``is_safe``::"
msgstr ""

msgid ""
"When this filter is used in a template where auto-escaping is enabled, "
"Django will escape the output whenever the input is not already marked as "
"\"safe\"."
msgstr ""

msgid ""
"By default, ``is_safe`` is ``False``, and you can omit it from any filters "
"where it isn't required."
msgstr ""

msgid ""
"Be careful when deciding if your filter really does leave safe strings as "
"safe. If you're *removing* characters, you might inadvertently leave "
"unbalanced HTML tags or entities in the result. For example, removing a "
"``>`` from the input might turn ``<a>`` into ``<a``, which would need to be "
"escaped on output to avoid causing problems. Similarly, removing a semicolon "
"(``;``) can turn ``&amp;`` into ``&amp``, which is no longer a valid entity "
"and thus needs further escaping. Most cases won't be nearly this tricky, but "
"keep an eye out for any problems like that when reviewing your code."
msgstr ""

msgid ""
"Marking a filter ``is_safe`` will coerce the filter's return value to a "
"string.  If your filter should return a boolean or other non-string value, "
"marking it ``is_safe`` will probably have unintended consequences (such as "
"converting a boolean False to the string 'False')."
msgstr ""

msgid ""
"Alternatively, your filter code can manually take care of any necessary "
"escaping. This is necessary when you're introducing new HTML markup into the "
"result. You want to mark the output as safe from further escaping so that "
"your HTML markup isn't escaped further, so you'll need to handle the input "
"yourself."
msgstr ""

msgid ""
"To mark the output as a safe string, use :func:`django.utils.safestring."
"mark_safe`."
msgstr ""

msgid ""
"Be careful, though. You need to do more than just mark the output as safe. "
"You need to ensure it really *is* safe, and what you do depends on whether "
"auto-escaping is in effect. The idea is to write filters that can operate in "
"templates where auto-escaping is either on or off in order to make things "
"easier for your template authors."
msgstr ""

msgid ""
"In order for your filter to know the current auto-escaping state, set the "
"``needs_autoescape`` flag to ``True`` when you register your filter "
"function. (If you don't specify this flag, it defaults to ``False``). This "
"flag tells Django that your filter function wants to be passed an extra "
"keyword argument, called ``autoescape``, that is ``True`` if auto-escaping "
"is in effect and ``False`` otherwise. It is recommended to set the default "
"of the ``autoescape`` parameter to ``True``, so that if you call the "
"function from Python code it will have escaping enabled by default."
msgstr ""

msgid ""
"For example, let's write a filter that emphasizes the first character of a "
"string::"
msgstr ""

msgid ""
"The ``needs_autoescape`` flag and the ``autoescape`` keyword argument mean "
"that our function will know whether automatic escaping is in effect when the "
"filter is called. We use ``autoescape`` to decide whether the input data "
"needs to be passed through ``django.utils.html.conditional_escape`` or not. "
"(In the latter case, we just use the identity function as the \"escape\" "
"function.) The ``conditional_escape()`` function is like ``escape()`` except "
"it only escapes input that is **not** a ``SafeData`` instance. If a "
"``SafeData`` instance is passed to ``conditional_escape()``, the data is "
"returned unchanged."
msgstr ""

msgid ""
"Finally, in the above example, we remember to mark the result as safe so "
"that our HTML is inserted directly into the template without further "
"escaping."
msgstr ""

msgid ""
"There's no need to worry about the ``is_safe`` flag in this case (although "
"including it wouldn't hurt anything). Whenever you manually handle the auto-"
"escaping issues and return a safe string, the ``is_safe`` flag won't change "
"anything either way."
msgstr ""

msgid "Avoiding XSS vulnerabilities when reusing built-in filters"
msgstr ""

msgid ""
"Django's built-in filters have ``autoescape=True`` by default in order to "
"get the proper autoescaping behavior and avoid a cross-site script "
"vulnerability."
msgstr ""

msgid ""
"In older versions of Django, be careful when reusing Django's built-in "
"filters as ``autoescape`` defaults to ``None``. You'll need to pass "
"``autoescape=True`` to get autoescaping."
msgstr ""

msgid ""
"For example, if you wanted to write a custom filter called "
"``urlize_and_linebreaks`` that combined the :tfilter:`urlize` and :tfilter:"
"`linebreaksbr` filters, the filter would look like::"
msgstr ""

msgid "Then:"
msgstr ""

msgid "would be equivalent to:"
msgstr ""

msgid "Filters and time zones"
msgstr ""

msgid ""
"If you write a custom filter that operates on :class:`~datetime.datetime` "
"objects, you'll usually register it with the ``expects_localtime`` flag set "
"to ``True``::"
msgstr ""

msgid ""
"When this flag is set, if the first argument to your filter is a time zone "
"aware datetime, Django will convert it to the current time zone before "
"passing it to your filter when appropriate, according to :ref:`rules for "
"time zones conversions in templates <time-zones-in-templates>`."
msgstr ""

msgid "Writing custom template tags"
msgstr "独自のテンプレートタグを記述する"

msgid ""
"Tags are more complex than filters, because tags can do anything. Django "
"provides a number of shortcuts that make writing most types of tags easier. "
"First we'll explore those shortcuts, then explain how to write a tag from "
"scratch for those cases when the shortcuts aren't powerful enough."
msgstr ""
"タグはあらゆることができるため、フィルタより複雑です。Django は、ほとんどのタ"
"イプのタグを簡単に書けるように、多数のショートカットを提供しています。まず最"
"初にこうしたショートカットを見てから、ショートカットでは機能が不足している場"
"合にゼロからタグを書く方法を説明します。"

msgid "Simple tags"
msgstr "シンプルなタグ"

msgid ""
"Many template tags take a number of arguments -- strings or template "
"variables -- and return a result after doing some processing based solely on "
"the input arguments and some external information. For example, a "
"``current_time`` tag might accept a format string and return the time as a "
"string formatted accordingly."
msgstr ""
"多くのテンプレートタグは、文字列やテンプレート変数などの引数 -- 文字列やテン"
"プレートの変数 -- を取り、入力引数と外部情報のみに基づいて処理を行った後、結"
"果を返します。 たとえば、``current_time`` タグはフォーマット文字列を受け入"
"れ、その時刻を適切な文字列フォーマットとして返します。"

msgid ""
"To ease the creation of these types of tags, Django provides a helper "
"function, ``simple_tag``. This function, which is a method of ``django."
"template.Library``, takes a function that accepts any number of arguments, "
"wraps it in a ``render`` function and the other necessary bits mentioned "
"above and registers it with the template system."
msgstr ""
"これらのタイプのタグの作成を容易にするため、Django はヘルパー関数 "
"``simple_tag`` を提供しています。 この関数は ``django.template.Library`` のメ"
"ソッドで、任意の数の引数を受け取る関数を取り、それを ``render`` 関数と上記で"
"説明した他の必要なビットにラップし、そしてテンプレートシステムに登録します。"

msgid "Our ``current_time`` function could thus be written like this::"
msgstr "私たちの ``current_time`` 関数は、以下のように書くことができます::"

msgid "A few things to note about the ``simple_tag`` helper function:"
msgstr "``simple_tag`` ヘルパー関数について、注意すべきことがいくつかあります:"

msgid ""
"Checking for the required number of arguments, etc., has already been done "
"by the time our function is called, so we don't need to do that."
msgstr ""

msgid ""
"The quotes around the argument (if any) have already been stripped away, so "
"we just receive a plain string."
msgstr ""

msgid ""
"If the argument was a template variable, our function is passed the current "
"value of the variable, not the variable itself."
msgstr ""

msgid ""
"Unlike other tag utilities, ``simple_tag`` passes its output through :func:"
"`~django.utils.html.conditional_escape` if the template context is in "
"autoescape mode, to ensure correct HTML and protect you from XSS "
"vulnerabilities."
msgstr ""

msgid ""
"If additional escaping is not desired, you will need to use :func:`~django."
"utils.safestring.mark_safe` if you are absolutely sure that your code does "
"not contain XSS vulnerabilities. For building small HTML snippets, use of :"
"func:`~django.utils.html.format_html` instead of ``mark_safe()`` is strongly "
"recommended."
msgstr ""

msgid ""
"If your template tag needs to access the current context, you can use the "
"``takes_context`` argument when registering your tag::"
msgstr ""

msgid "Note that the first argument *must* be called ``context``."
msgstr ""

msgid ""
"For more information on how the ``takes_context`` option works, see the "
"section on :ref:`inclusion tags<howto-custom-template-tags-inclusion-tags>`."
msgstr ""

msgid "If you need to rename your tag, you can provide a custom name for it::"
msgstr ""

msgid ""
"``simple_tag`` functions may accept any number of positional or keyword "
"arguments. For example::"
msgstr ""

msgid ""
"Then in the template any number of arguments, separated by spaces, may be "
"passed to the template tag. Like in Python, the values for keyword arguments "
"are set using the equal sign (\"``=``\") and must be provided after the "
"positional arguments. For example:"
msgstr ""

msgid ""
"It's possible to store the tag results in a template variable rather than "
"directly outputting it. This is done by using the ``as`` argument followed "
"by the variable name. Doing so enables you to output the content yourself "
"where you see fit:"
msgstr ""

msgid "Inclusion tags"
msgstr ""

msgid ""
"Another common type of template tag is the type that displays some data by "
"rendering *another* template. For example, Django's admin interface uses "
"custom template tags to display the buttons along the bottom of the \"add/"
"change\" form pages. Those buttons always look the same, but the link "
"targets change depending on the object being edited -- so they're a perfect "
"case for using a small template that is filled with details from the current "
"object. (In the admin's case, this is the ``submit_row`` tag.)"
msgstr ""

msgid "These sorts of tags are called \"inclusion tags\"."
msgstr ""

msgid ""
"Writing inclusion tags is probably best demonstrated by example. Let's write "
"a tag that outputs a list of choices for a given ``Poll`` object, such as "
"was created in the :ref:`tutorials <creating-models>`. We'll use the tag "
"like this:"
msgstr ""

msgid "...and the output will be something like this:"
msgstr ""

msgid ""
"First, define the function that takes the argument and produces a dictionary "
"of data for the result. The important point here is we only need to return a "
"dictionary, not anything more complex. This will be used as a template "
"context for the template fragment. Example::"
msgstr ""

msgid ""
"Next, create the template used to render the tag's output. This template is "
"a fixed feature of the tag: the tag writer specifies it, not the template "
"designer. Following our example, the template is very simple:"
msgstr ""

msgid ""
"Now, create and register the inclusion tag by calling the "
"``inclusion_tag()`` method on a ``Library`` object. Following our example, "
"if the above template is in a file called ``results.html`` in a directory "
"that's searched by the template loader, we'd register the tag like this::"
msgstr ""

msgid ""
"Alternatively it is possible to register the inclusion tag using a :class:"
"`django.template.Template` instance::"
msgstr ""

msgid "...when first creating the function."
msgstr ""

msgid ""
"Sometimes, your inclusion tags might require a large number of arguments, "
"making it a pain for template authors to pass in all the arguments and "
"remember their order. To solve this, Django provides a ``takes_context`` "
"option for inclusion tags. If you specify ``takes_context`` in creating a "
"template tag, the tag will have no required arguments, and the underlying "
"Python function will have one argument -- the template context as of when "
"the tag was called."
msgstr ""

msgid ""
"For example, say you're writing an inclusion tag that will always be used in "
"a context that contains ``home_link`` and ``home_title`` variables that "
"point back to the main page. Here's what the Python function would look "
"like::"
msgstr ""

msgid ""
"Note that the first parameter to the function *must* be called ``context``."
msgstr ""

msgid ""
"In that ``register.inclusion_tag()`` line, we specified "
"``takes_context=True`` and the name of the template. Here's what the "
"template ``link.html`` might look like:"
msgstr ""

msgid ""
"Then, any time you want to use that custom tag, load its library and call it "
"without any arguments, like so:"
msgstr ""

msgid ""
"Note that when you're using ``takes_context=True``, there's no need to pass "
"arguments to the template tag. It automatically gets access to the context."
msgstr ""

msgid ""
"The ``takes_context`` parameter defaults to ``False``. When it's set to "
"``True``, the tag is passed the context object, as in this example. That's "
"the only difference between this case and the previous ``inclusion_tag`` "
"example."
msgstr ""

msgid ""
"``inclusion_tag`` functions may accept any number of positional or keyword "
"arguments. For example::"
msgstr ""

msgid "Assignment tags"
msgstr ""

msgid ""
"``simple_tag`` can now store results in a template variable and should be "
"used instead."
msgstr ""

msgid ""
"To ease the creation of tags setting a variable in the context, Django "
"provides a helper function, ``assignment_tag``. This function works the same "
"way as :meth:`~django.template.Library.simple_tag` except that it stores the "
"tag's result in a specified context variable instead of directly outputting "
"it."
msgstr ""

msgid "Our earlier ``current_time`` function could thus be written like this::"
msgstr ""

msgid ""
"You may then store the result in a template variable using the ``as`` "
"argument followed by the variable name, and output it yourself where you see "
"fit:"
msgstr ""

msgid "Advanced custom template tags"
msgstr ""

msgid ""
"Sometimes the basic features for custom template tag creation aren't enough. "
"Don't worry, Django gives you complete access to the internals required to "
"build a template tag from the ground up."
msgstr ""

msgid "A quick overview"
msgstr ""

msgid ""
"The template system works in a two-step process: compiling and rendering. To "
"define a custom template tag, you specify how the compilation works and how "
"the rendering works."
msgstr ""

msgid ""
"When Django compiles a template, it splits the raw template text into "
"''nodes''. Each node is an instance of ``django.template.Node`` and has a "
"``render()`` method. A compiled template is, simply, a list of ``Node`` "
"objects. When you call ``render()`` on a compiled template object, the "
"template calls ``render()`` on each ``Node`` in its node list, with the "
"given context. The results are all concatenated together to form the output "
"of the template."
msgstr ""

msgid ""
"Thus, to define a custom template tag, you specify how the raw template tag "
"is converted into a ``Node`` (the compilation function), and what the node's "
"``render()`` method does."
msgstr ""

msgid "Writing the compilation function"
msgstr ""

msgid ""
"For each template tag the template parser encounters, it calls a Python "
"function with the tag contents and the parser object itself. This function "
"is responsible for returning a ``Node`` instance based on the contents of "
"the tag."
msgstr ""

msgid ""
"For example, let's write a full implementation of our simple template tag, "
"``{% current_time %}``, that displays the current date/time, formatted "
"according to a parameter given in the tag, in :func:`~time.strftime` syntax. "
"It's a good idea to decide the tag syntax before anything else. In our case, "
"let's say the tag should be used like this:"
msgstr ""

msgid ""
"The parser for this function should grab the parameter and create a ``Node`` "
"object::"
msgstr ""

msgid "Notes:"
msgstr ""

msgid ""
"``parser`` is the template parser object. We don't need it in this example."
msgstr ""

msgid ""
"``token.contents`` is a string of the raw contents of the tag. In our "
"example, it's ``'current_time \"%Y-%m-%d %I:%M %p\"'``."
msgstr ""

msgid ""
"The ``token.split_contents()`` method separates the arguments on spaces "
"while keeping quoted strings together. The more straightforward ``token."
"contents.split()`` wouldn't be as robust, as it would naively split on *all* "
"spaces, including those within quoted strings. It's a good idea to always "
"use ``token.split_contents()``."
msgstr ""

msgid ""
"This function is responsible for raising ``django.template."
"TemplateSyntaxError``, with helpful messages, for any syntax error."
msgstr ""

msgid ""
"The ``TemplateSyntaxError`` exceptions use the ``tag_name`` variable. Don't "
"hard-code the tag's name in your error messages, because that couples the "
"tag's name to your function. ``token.contents.split()[0]`` will ''always'' "
"be the name of your tag -- even when the tag has no arguments."
msgstr ""

msgid ""
"The function returns a ``CurrentTimeNode`` with everything the node needs to "
"know about this tag. In this case, it just passes the argument -- ``\"%Y-%m-"
"%d %I:%M %p\"``. The leading and trailing quotes from the template tag are "
"removed in ``format_string[1:-1]``."
msgstr ""

msgid ""
"The parsing is very low-level. The Django developers have experimented with "
"writing small frameworks on top of this parsing system, using techniques "
"such as EBNF grammars, but those experiments made the template engine too "
"slow. It's low-level because that's fastest."
msgstr ""

msgid "Writing the renderer"
msgstr ""

msgid ""
"The second step in writing custom tags is to define a ``Node`` subclass that "
"has a ``render()`` method."
msgstr ""

msgid "Continuing the above example, we need to define ``CurrentTimeNode``::"
msgstr ""

msgid ""
"``__init__()`` gets the ``format_string`` from ``do_current_time()``. Always "
"pass any options/parameters/arguments to a ``Node`` via its ``__init__()``."
msgstr ""

msgid "The ``render()`` method is where the work actually happens."
msgstr ""

msgid ""
"``render()`` should generally fail silently, particularly in a production "
"environment. In some cases however, particularly if ``context.template."
"engine.debug`` is ``True``, this method may raise an exception to make "
"debugging easier. For example, several core tags raise ``django.template."
"TemplateSyntaxError`` if they receive the wrong number or type of arguments."
msgstr ""

msgid ""
"Ultimately, this decoupling of compilation and rendering results in an "
"efficient template system, because a template can render multiple contexts "
"without having to be parsed multiple times."
msgstr ""

msgid "Auto-escaping considerations"
msgstr ""

msgid ""
"The output from template tags is **not** automatically run through the auto-"
"escaping filters (with the exception of :meth:`~django.template.Library."
"simple_tag` as described above). However, there are still a couple of things "
"you should keep in mind when writing a template tag."
msgstr ""

msgid ""
"If the ``render()`` function of your template stores the result in a context "
"variable (rather than returning the result in a string), it should take care "
"to call ``mark_safe()`` if appropriate. When the variable is ultimately "
"rendered, it will be affected by the auto-escape setting in effect at the "
"time, so content that should be safe from further escaping needs to be "
"marked as such."
msgstr ""

msgid ""
"Also, if your template tag creates a new context for performing some sub-"
"rendering, set the auto-escape attribute to the current context's value. The "
"``__init__`` method for the ``Context`` class takes a parameter called "
"``autoescape`` that you can use for this purpose. For example::"
msgstr ""

msgid ""
"This is not a very common situation, but it's useful if you're rendering a "
"template yourself. For example::"
msgstr ""

msgid ""
"If we had neglected to pass in the current ``context.autoescape`` value to "
"our new ``Context`` in this example, the results would have *always* been "
"automatically escaped, which may not be the desired behavior if the template "
"tag is used inside a :ttag:`{% autoescape off %}<autoescape>` block."
msgstr ""

msgid "Thread-safety considerations"
msgstr ""

msgid ""
"Once a node is parsed, its ``render`` method may be called any number of "
"times. Since Django is sometimes run in multi-threaded environments, a "
"single node may be simultaneously rendering with different contexts in "
"response to two separate requests. Therefore, it's important to make sure "
"your template tags are thread safe."
msgstr ""

msgid ""
"To make sure your template tags are thread safe, you should never store "
"state information on the node itself. For example, Django provides a "
"builtin :ttag:`cycle` template tag that cycles among a list of given strings "
"each time it's rendered:"
msgstr ""

msgid ""
"A naive implementation of ``CycleNode`` might look something like this::"
msgstr ""

msgid ""
"But, suppose we have two templates rendering the template snippet from above "
"at the same time:"
msgstr ""

msgid ""
"Thread 1 performs its first loop iteration, ``CycleNode.render()`` returns "
"'row1'"
msgstr ""

msgid ""
"Thread 2 performs its first loop iteration, ``CycleNode.render()`` returns "
"'row2'"
msgstr ""

msgid ""
"Thread 1 performs its second loop iteration, ``CycleNode.render()`` returns "
"'row1'"
msgstr ""

msgid ""
"Thread 2 performs its second loop iteration, ``CycleNode.render()`` returns "
"'row2'"
msgstr ""

msgid ""
"The CycleNode is iterating, but it's iterating globally. As far as Thread 1 "
"and Thread 2 are concerned, it's always returning the same value. This is "
"obviously not what we want!"
msgstr ""

msgid ""
"To address this problem, Django provides a ``render_context`` that's "
"associated with the ``context`` of the template that is currently being "
"rendered. The ``render_context`` behaves like a Python dictionary, and "
"should be used to store ``Node`` state between invocations of the ``render`` "
"method."
msgstr ""

msgid ""
"Let's refactor our ``CycleNode`` implementation to use the "
"``render_context``::"
msgstr ""

msgid ""
"Note that it's perfectly safe to store global information that will not "
"change throughout the life of the ``Node`` as an attribute. In the case of "
"``CycleNode``, the ``cyclevars`` argument doesn't change after the ``Node`` "
"is instantiated, so we don't need to put it in the ``render_context``. But "
"state information that is specific to the template that is currently being "
"rendered, like the current iteration of the ``CycleNode``, should be stored "
"in the ``render_context``."
msgstr ""

msgid ""
"Notice how we used ``self`` to scope the ``CycleNode`` specific information "
"within the ``render_context``. There may be multiple ``CycleNodes`` in a "
"given template, so we need to be careful not to clobber another node's state "
"information. The easiest way to do this is to always use ``self`` as the key "
"into ``render_context``. If you're keeping track of several state variables, "
"make ``render_context[self]`` a dictionary."
msgstr ""

msgid "Registering the tag"
msgstr ""

msgid ""
"Finally, register the tag with your module's ``Library`` instance, as "
"explained in :ref:`writing custom template filters<howto-writing-custom-"
"template-tags>` above. Example::"
msgstr ""

msgid "The ``tag()`` method takes two arguments:"
msgstr ""

msgid ""
"The name of the template tag -- a string. If this is left out, the name of "
"the compilation function will be used."
msgstr ""

msgid ""
"As with filter registration, it is also possible to use this as a decorator::"
msgstr ""

msgid ""
"If you leave off the ``name`` argument, as in the second example above, "
"Django will use the function's name as the tag name."
msgstr ""

msgid "Passing template variables to the tag"
msgstr ""

msgid ""
"Although you can pass any number of arguments to a template tag using "
"``token.split_contents()``, the arguments are all unpacked as string "
"literals. A little more work is required in order to pass dynamic content (a "
"template variable) to a template tag as an argument."
msgstr ""

msgid ""
"While the previous examples have formatted the current time into a string "
"and returned the string, suppose you wanted to pass in a :class:`~django.db."
"models.DateTimeField` from an object and have the template tag format that "
"date-time:"
msgstr ""

msgid "Initially, ``token.split_contents()`` will return three values:"
msgstr ""

msgid "The tag name ``format_time``."
msgstr ""

msgid ""
"The string ``'blog_entry.date_updated'`` (without the surrounding quotes)."
msgstr ""

msgid ""
"The formatting string ``'\"%Y-%m-%d %I:%M %p\"'``. The return value from "
"``split_contents()`` will include the leading and trailing quotes for string "
"literals like this."
msgstr ""

msgid "Now your tag should begin to look like this::"
msgstr ""

msgid ""
"You also have to change the renderer to retrieve the actual contents of the "
"``date_updated`` property of the ``blog_entry`` object.  This can be "
"accomplished by using the ``Variable()`` class in ``django.template``."
msgstr ""

msgid ""
"To use the ``Variable`` class, simply instantiate it with the name of the "
"variable to be resolved, and then call ``variable.resolve(context)``. So, "
"for example::"
msgstr ""

msgid ""
"Variable resolution will throw a ``VariableDoesNotExist`` exception if it "
"cannot resolve the string passed to it in the current context of the page."
msgstr ""

msgid "Setting a variable in the context"
msgstr ""

msgid ""
"The above examples simply output a value. Generally, it's more flexible if "
"your template tags set template variables instead of outputting values. That "
"way, template authors can reuse the values that your template tags create."
msgstr ""

msgid ""
"To set a variable in the context, just use dictionary assignment on the "
"context object in the ``render()`` method. Here's an updated version of "
"``CurrentTimeNode`` that sets a template variable ``current_time`` instead "
"of outputting it::"
msgstr ""

msgid ""
"Note that ``render()`` returns the empty string. ``render()`` should always "
"return string output. If all the template tag does is set a variable, "
"``render()`` should return the empty string."
msgstr ""

msgid "Here's how you'd use this new version of the tag:"
msgstr ""

msgid "Variable scope in context"
msgstr ""

msgid ""
"Any variable set in the context will only be available in the same ``block`` "
"of the template in which it was assigned. This behavior is intentional; it "
"provides a scope for variables so that they don't conflict with context in "
"other blocks."
msgstr ""

msgid ""
"But, there's a problem with ``CurrentTimeNode2``: The variable name "
"``current_time`` is hard-coded. This means you'll need to make sure your "
"template doesn't use ``{{ current_time }}`` anywhere else, because the ``{% "
"current_time %}`` will blindly overwrite that variable's value. A cleaner "
"solution is to make the template tag specify the name of the output "
"variable, like so:"
msgstr ""

msgid ""
"To do that, you'll need to refactor both the compilation function and "
"``Node`` class, like so::"
msgstr ""

msgid ""
"The difference here is that ``do_current_time()`` grabs the format string "
"and the variable name, passing both to ``CurrentTimeNode3``."
msgstr ""

msgid ""
"Finally, if you only need to have a simple syntax for your custom context-"
"updating template tag, consider using the :meth:`~django.template.Library."
"simple_tag` shortcut, which supports assigning the tag results to a template "
"variable."
msgstr ""

msgid "Parsing until another block tag"
msgstr ""

msgid ""
"Template tags can work in tandem. For instance, the standard :ttag:`{% "
"comment %}<comment>` tag hides everything until ``{% endcomment %}``. To "
"create a template tag such as this, use ``parser.parse()`` in your "
"compilation function."
msgstr ""

msgid "Here's how a simplified ``{% comment %}`` tag might be implemented::"
msgstr ""

msgid ""
"The actual implementation of :ttag:`{% comment %}<comment>` is slightly "
"different in that it allows broken template tags to appear between ``{% "
"comment %}`` and ``{% endcomment %}``. It does so by calling ``parser."
"skip_past('endcomment')`` instead of ``parser.parse(('endcomment',))`` "
"followed by ``parser.delete_first_token()``, thus avoiding the generation of "
"a node list."
msgstr ""

msgid ""
"``parser.parse()`` takes a tuple of names of block tags ''to parse until''. "
"It returns an instance of ``django.template.NodeList``, which is a list of "
"all ``Node`` objects that the parser encountered ''before'' it encountered "
"any of the tags named in the tuple."
msgstr ""

msgid ""
"In ``\"nodelist = parser.parse(('endcomment',))\"`` in the above example, "
"``nodelist`` is a list of all nodes between the ``{% comment %}`` and ``{% "
"endcomment %}``, not counting ``{% comment %}`` and ``{% endcomment %}`` "
"themselves."
msgstr ""

msgid ""
"After ``parser.parse()`` is called, the parser hasn't yet \"consumed\" the "
"``{% endcomment %}`` tag, so the code needs to explicitly call ``parser."
"delete_first_token()``."
msgstr ""

msgid ""
"``CommentNode.render()`` simply returns an empty string. Anything between "
"``{% comment %}`` and ``{% endcomment %}`` is ignored."
msgstr ""

msgid "Parsing until another block tag, and saving contents"
msgstr ""

msgid ""
"In the previous example, ``do_comment()`` discarded everything between ``{% "
"comment %}`` and ``{% endcomment %}``. Instead of doing that, it's possible "
"to do something with the code between block tags."
msgstr ""

msgid ""
"For example, here's a custom template tag, ``{% upper %}``, that capitalizes "
"everything between itself and ``{% endupper %}``."
msgstr ""

msgid "Usage:"
msgstr ""

msgid ""
"As in the previous example, we'll use ``parser.parse()``. But this time, we "
"pass the resulting ``nodelist`` to the ``Node``::"
msgstr ""

msgid ""
"The only new concept here is the ``self.nodelist.render(context)`` in "
"``UpperNode.render()``."
msgstr ""

msgid ""
"For more examples of complex rendering, see the source code of :ttag:`{% for "
"%}<for>` in ``django/template/defaulttags.py`` and :ttag:`{% if %}<if>` in "
"``django/template/smartif.py``."
msgstr ""

msgid "Deployment checklist"
msgstr "デプロイチェックリスト"

msgid ""
"The Internet is a hostile environment. Before deploying your Django project, "
"you should take some time to review your settings, with security, "
"performance, and operations in mind."
msgstr ""

msgid ""
"Django includes many :doc:`security features </topics/security>`. Some are "
"built-in and always enabled. Others are optional because they aren't always "
"appropriate, or because they're inconvenient for development. For example, "
"forcing HTTPS may not be suitable for all websites, and it's impractical for "
"local development."
msgstr ""

msgid ""
"Performance optimizations are another category of trade-offs with "
"convenience. For instance, caching is useful in production, less so for "
"local development. Error reporting needs are also widely different."
msgstr ""

msgid "The following checklist includes settings that:"
msgstr ""

msgid ""
"must be set properly for Django to provide the expected level of security;"
msgstr ""

msgid "are expected to be different in each environment;"
msgstr ""

msgid "enable optional security features;"
msgstr ""

msgid "enable performance optimizations;"
msgstr ""

msgid "provide error reporting."
msgstr ""

msgid ""
"Many of these settings are sensitive and should be treated as confidential. "
"If you're releasing the source code for your project, a common practice is "
"to publish suitable settings for development, and to use a private settings "
"module for production."
msgstr ""

msgid "Run ``manage.py check --deploy``"
msgstr ""

msgid ""
"Some of the checks described below can be automated using the :option:`check "
"--deploy` option. Be sure to run it against your production settings file as "
"described in the option's documentation."
msgstr ""

msgid "Critical settings"
msgstr ""

msgid ":setting:`SECRET_KEY`"
msgstr ":setting:`SECRET_KEY`"

msgid ""
"**The secret key must be a large random value and it must be kept secret.**"
msgstr ""

msgid ""
"Make sure that the key used in production isn't used anywhere else and avoid "
"committing it to source control. This reduces the number of vectors from "
"which an attacker may acquire the key."
msgstr ""

msgid ""
"Instead of hardcoding the secret key in your settings module, consider "
"loading it from an environment variable::"
msgstr ""

msgid "or from a file::"
msgstr ""

msgid ":setting:`DEBUG`"
msgstr ":setting:`DEBUG`"

msgid "**You must never enable debug in production.**"
msgstr ""

msgid ""
"You're certainly developing your project with :setting:`DEBUG = True "
"<DEBUG>`, since this enables handy features like full tracebacks in your "
"browser."
msgstr ""

msgid ""
"For a production environment, though, this is a really bad idea, because it "
"leaks lots of information about your project: excerpts of your source code, "
"local variables, settings, libraries used, etc."
msgstr ""

msgid "Environment-specific settings"
msgstr ""

msgid ":setting:`ALLOWED_HOSTS`"
msgstr ""

msgid ""
"When :setting:`DEBUG = False <DEBUG>`, Django doesn't work at all without a "
"suitable value for :setting:`ALLOWED_HOSTS`."
msgstr ""

msgid ""
"This setting is required to protect your site against some CSRF attacks. If "
"you use a wildcard, you must perform your own validation of the ``Host`` "
"HTTP header, or otherwise ensure that you aren't vulnerable to this category "
"of attacks."
msgstr ""

msgid ""
"You should also configure the Web server that sits in front of Django to "
"validate the host. It should respond with a static error page or ignore "
"requests for incorrect hosts instead of forwarding the request to Django. "
"This way you'll avoid spurious errors in your Django logs (or emails if you "
"have error reporting configured that way). For example, on nginx you might "
"setup a default server to return \"444 No Response\" on an unrecognized host:"
msgstr ""

msgid ":setting:`CACHES`"
msgstr ":setting:`CACHES`"

msgid ""
"If you're using a cache, connection parameters may be different in "
"development and in production. Django defaults to per-process :ref:`local-"
"memory caching <local-memory-caching>` which may not be desirable."
msgstr ""

msgid ""
"Cache servers often have weak authentication. Make sure they only accept "
"connections from your application servers."
msgstr ""

msgid ""
"If you're using Memcached, consider using :ref:`cached sessions <cached-"
"sessions-backend>` to improve performance."
msgstr ""

msgid ":setting:`DATABASES`"
msgstr ""

msgid ""
"Database connection parameters are probably different in development and in "
"production."
msgstr ""

msgid ""
"Database passwords are very sensitive. You should protect them exactly like :"
"setting:`SECRET_KEY`."
msgstr ""

msgid ""
"For maximum security, make sure database servers only accept connections "
"from your application servers."
msgstr ""

msgid "If you haven't set up backups for your database, do it right now!"
msgstr ""

msgid ":setting:`EMAIL_BACKEND` and related settings"
msgstr ""

msgid "If your site sends emails, these values need to be set correctly."
msgstr ""

msgid ""
"By default, Django sends email from webmaster@localhost and root@localhost. "
"However, some mail providers reject email from these addresses. To use "
"different sender addresses, modify the :setting:`DEFAULT_FROM_EMAIL` and :"
"setting:`SERVER_EMAIL` settings."
msgstr ""

msgid ":setting:`STATIC_ROOT` and :setting:`STATIC_URL`"
msgstr ""

msgid ""
"Static files are automatically served by the development server. In "
"production, you must define a :setting:`STATIC_ROOT` directory where :"
"djadmin:`collectstatic` will copy them."
msgstr ""

msgid "See :doc:`/howto/static-files/index` for more information."
msgstr ""

msgid ":setting:`MEDIA_ROOT` and :setting:`MEDIA_URL`"
msgstr ""

msgid ""
"Media files are uploaded by your users. They're untrusted! Make sure your "
"web server never attempts to interpret them. For instance, if a user uploads "
"a ``.php`` file, the web server shouldn't execute it."
msgstr ""

msgid "Now is a good time to check your backup strategy for these files."
msgstr ""

msgid "HTTPS"
msgstr ""

msgid ""
"Any website which allows users to log in should enforce site-wide HTTPS to "
"avoid transmitting access tokens in clear. In Django, access tokens include "
"the login/password, the session cookie, and password reset tokens. (You "
"can't do much to protect password reset tokens if you're sending them by "
"email.)"
msgstr ""

msgid ""
"Protecting sensitive areas such as the user account or the admin isn't "
"sufficient, because the same session cookie is used for HTTP and HTTPS. Your "
"web server must redirect all HTTP traffic to HTTPS, and only transmit HTTPS "
"requests to Django."
msgstr ""

msgid "Once you've set up HTTPS, enable the following settings."
msgstr ""

msgid ":setting:`CSRF_COOKIE_SECURE`"
msgstr ":setting:`CSRF_COOKIE_SECURE`"

msgid ""
"Set this to ``True`` to avoid transmitting the CSRF cookie over HTTP "
"accidentally."
msgstr ""

msgid ":setting:`SESSION_COOKIE_SECURE`"
msgstr ":setting:`SESSION_COOKIE_SECURE`"

msgid ""
"Set this to ``True`` to avoid transmitting the session cookie over HTTP "
"accidentally."
msgstr ""

msgid "Performance optimizations"
msgstr ""

msgid ""
"Setting :setting:`DEBUG = False <DEBUG>` disables several features that are "
"only useful in development. In addition, you can tune the following settings."
msgstr ""

msgid ":setting:`CONN_MAX_AGE`"
msgstr ""

msgid ""
"Enabling :ref:`persistent database connections <persistent-database-"
"connections>` can result in a nice speed-up when connecting to the database "
"accounts for a significant part of the request processing time."
msgstr ""

msgid "This helps a lot on virtualized hosts with limited network performance."
msgstr ""

msgid ":setting:`TEMPLATES`"
msgstr ":setting:`TEMPLATES`"

msgid ""
"Enabling the cached template loader often improves performance drastically, "
"as it avoids compiling each template every time it needs to be rendered. See "
"the :ref:`template loaders docs <template-loaders>` for more information."
msgstr ""

msgid "Error reporting"
msgstr ""

msgid ""
"By the time you push your code to production, it's hopefully robust, but you "
"can't rule out unexpected errors. Thankfully, Django can capture errors and "
"notify you accordingly."
msgstr ""

msgid ":setting:`LOGGING`"
msgstr ":setting:`LOGGING`"

msgid ""
"Review your logging configuration before putting your website in production, "
"and check that it works as expected as soon as you have received some "
"traffic."
msgstr ""

msgid "See :doc:`/topics/logging` for details on logging."
msgstr ""

msgid ":setting:`ADMINS` and :setting:`MANAGERS`"
msgstr ""

msgid ":setting:`ADMINS` will be notified of 500 errors by email."
msgstr ""

msgid ""
":setting:`MANAGERS` will be notified of 404 errors. :setting:"
"`IGNORABLE_404_URLS` can help filter out spurious reports."
msgstr ""

msgid ""
"See :doc:`/howto/error-reporting` for details on error reporting by email."
msgstr ""

msgid "Error reporting by email doesn't scale very well"
msgstr ""

msgid ""
"Consider using an error monitoring system such as Sentry_ before your inbox "
"is flooded by reports. Sentry can also aggregate logs."
msgstr ""

msgid "Customize the default error views"
msgstr ""

msgid ""
"Django includes default views and templates for several HTTP error codes. "
"You may want to override the default templates by creating the following "
"templates in your root template directory: ``404.html``, ``500.html``, ``403."
"html``, and ``400.html``. The default views should suffice for 99% of Web "
"applications, but if you desire to customize them, see these instructions "
"which also contain details about the default templates:"
msgstr ""

msgid ":ref:`http_not_found_view`"
msgstr ""

msgid ":ref:`http_internal_server_error_view`"
msgstr ""

msgid ":ref:`http_forbidden_view`"
msgstr ""

msgid ":ref:`http_bad_request_view`"
msgstr ""

msgid "Python Options"
msgstr ""

msgid ""
"It's strongly recommended that you invoke the Python process running your "
"Django application using the `-R`_ option or with the :envvar:"
"`PYTHONHASHSEED` environment variable set to ``random``. This option is "
"enabled by default starting with Python 3.3."
msgstr ""

msgid ""
"These options help protect your site from denial-of-service (DoS) attacks "
"triggered by carefully crafted inputs. Such an attack can drastically "
"increase CPU usage by causing worst-case performance when creating ``dict`` "
"instances. See `oCERT advisory #2011-003 <http://www.ocert.org/advisories/"
"ocert-2011-003.html>`_ for more information."
msgstr ""

msgid "Deploying Django"
msgstr "Django をデプロイする"

msgid ""
"Django's chock-full of shortcuts to make Web developer's lives easier, but "
"all those tools are of no use if you can't easily deploy your sites. Since "
"Django's inception, ease of deployment has been a major goal."
msgstr ""
"Django にある非常に多くのショートカットはWebデベロッパーを楽にしてくれます"
"が、サイトをかんたんにデプロイできなければ、これらのツールのどれも役に立ちま"
"せん。 当初より Django は、デプロイのしやすさを大きな目標としてきました。"

msgid ""
"If you're new to deploying Django and/or Python, we'd recommend you try :doc:"
"`mod_wsgi </howto/deployment/wsgi/modwsgi>` first. In most cases it'll be "
"the easiest, fastest, and most stable deployment choice."
msgstr ""
"Django および/または Python をデプロイすることに慣れていない場合、まずは :"
"doc:`mod_wsgi </howto/deployment/wsgi/modwsgi>`  を読むことをおすすめします。"
"ほとんどの場合、これが最も速く、最も簡単で、最も安定したデプロイの選択肢とな"
"ります。"

msgid "Authenticating against Django's user database from Apache"
msgstr "Django のユーザーデータベースに対する Apache からの認証"

msgid ""
"Since keeping multiple authentication databases in sync is a common problem "
"when dealing with Apache, you can configure Apache to authenticate against "
"Django's :doc:`authentication system </topics/auth/index>` directly. This "
"requires Apache version >= 2.2 and mod_wsgi >= 2.0. For example, you could:"
msgstr ""

msgid ""
"Serve static/media files directly from Apache only to authenticated users."
msgstr ""

msgid ""
"Authenticate access to a Subversion_ repository against Django users with a "
"certain permission."
msgstr ""

msgid "Allow certain users to connect to a WebDAV share created with mod_dav_."
msgstr ""

msgid ""
"If you have installed a :ref:`custom user model <auth-custom-user>` and want "
"to use this default auth handler, it must support an ``is_active`` "
"attribute. If you want to use group based authorization, your custom user "
"must have a relation named 'groups', referring to a related object that has "
"a 'name' field. You can also specify your own custom mod_wsgi auth handler "
"if your custom cannot conform to these requirements."
msgstr ""

msgid "Authentication with ``mod_wsgi``"
msgstr ""

msgid ""
"The use of ``WSGIApplicationGroup %{GLOBAL}`` in the configurations below "
"presumes that your Apache instance is running only one Django application. "
"If you are running more than one Django application, please refer to the "
"`Defining Application Groups`_ section of the mod_wsgi docs for more "
"information about this setting."
msgstr ""

msgid ""
"Make sure that mod_wsgi is installed and activated and that you have "
"followed the steps to setup :doc:`Apache with mod_wsgi </howto/deployment/"
"wsgi/modwsgi>`."
msgstr ""

msgid ""
"Next, edit your Apache configuration to add a location that you want only "
"authenticated users to be able to view:"
msgstr ""

msgid ""
"The ``WSGIAuthUserScript`` directive tells mod_wsgi to execute the "
"``check_password`` function in specified wsgi script, passing the user name "
"and password that it receives from the prompt. In this example, the "
"``WSGIAuthUserScript`` is the same as the ``WSGIScriptAlias`` that defines "
"your application :doc:`that is created by django-admin startproject </howto/"
"deployment/wsgi/index>`."
msgstr ""

msgid "Using Apache 2.2 with authentication"
msgstr ""

msgid "Make sure that ``mod_auth_basic`` and ``mod_authz_user`` are loaded."
msgstr ""

msgid ""
"These might be compiled statically into Apache, or you might need to use "
"LoadModule to load them dynamically in your ``httpd.conf``:"
msgstr ""

msgid ""
"Finally, edit your WSGI script ``mysite.wsgi`` to tie Apache's "
"authentication to your site's authentication mechanisms by importing the "
"``check_password`` function::"
msgstr ""

msgid ""
"Requests beginning with ``/secret/`` will now require a user to authenticate."
msgstr ""

msgid ""
"The mod_wsgi `access control mechanisms documentation`_ provides additional "
"details and information about alternative methods of authentication."
msgstr ""

msgid "Authorization with ``mod_wsgi`` and Django groups"
msgstr ""

msgid ""
"mod_wsgi also provides functionality to restrict a particular location to "
"members of a group."
msgstr ""

msgid "In this case, the Apache configuration should look like this:"
msgstr ""

msgid ""
"To support the ``WSGIAuthGroupScript`` directive, the same WSGI script "
"``mysite.wsgi`` must also import the ``groups_for_user`` function which "
"returns a list groups the given user belongs to."
msgstr ""

msgid ""
"Requests for ``/secret/`` will now also require user to be a member of the "
"\"secret-agents\" group."
msgstr ""

msgid "How to use Django with Gunicorn"
msgstr ""

msgid ""
"Gunicorn_ ('Green Unicorn') is a pure-Python WSGI server for UNIX. It has no "
"dependencies and is easy to install and use."
msgstr ""

msgid "Installing Gunicorn"
msgstr ""

msgid ""
"Installing gunicorn is as easy as ``pip install gunicorn``. For more "
"details, see the `gunicorn documentation`_."
msgstr ""

msgid "Running Django in Gunicorn as a generic WSGI application"
msgstr ""

msgid ""
"When Gunicorn is installed, a ``gunicorn`` command is available which starts "
"the Gunicorn server process. At its simplest, gunicorn just needs to be "
"called with the location of a module containing a WSGI application object "
"named `application`. So for a typical Django project, invoking gunicorn "
"would look like::"
msgstr ""

msgid ""
"This will start one process running one thread listening on "
"``127.0.0.1:8000``. It requires that your project be on the Python path; the "
"simplest way to ensure that is to run this command from the same directory "
"as your ``manage.py`` file."
msgstr ""

msgid "See Gunicorn's `deployment documentation`_ for additional tips."
msgstr ""

msgid "How to deploy with WSGI"
msgstr "WSGI とともにデプロイするには"

msgid ""
"Django's primary deployment platform is WSGI_, the Python standard for web "
"servers and applications."
msgstr ""
"Django の主要なデプロイプラットフォームは、 Web サーバと Web アプリケーショ"
"ン に関して Python の標準である WSGI_ です。"

msgid ""
"Django's :djadmin:`startproject` management command sets up a simple default "
"WSGI configuration for you, which you can tweak as needed for your project, "
"and direct any WSGI-compliant application server to use."
msgstr ""
"Django の :djadmin:`startproject` 管理用コマンドはシンプルなデフォルトの "
"WSGI 設定をセットアップします。必要に応じて、あなたのプロジェクトと WSGI 準拠"
"の Web サーバに合わせて微調整することができます。 "

msgid ""
"Django includes getting-started documentation for the following WSGI servers:"
msgstr ""
"Django には以下の WSGI サーバのために、手引きとなるドキュメントが用意されてい"
"ます:"

msgid "The ``application`` object"
msgstr " ``application`` オブジェクト"

msgid ""
"The key concept of deploying with WSGI is the ``application`` callable which "
"the application server uses to communicate with your code. It's commonly "
"provided as an object named ``application`` in a Python module accessible to "
"the server."
msgstr ""
"WSGI デプロイでキーとなる概念は、Web サーバがあなたのコードと通信するために使"
"う ``application`` という呼び出し可能オブジェクトです。これは一般的に、サーバ"
"にアクセスできる Python モジュールの中で ``application`` という名前のオブジェ"
"クトとして提供されています。"

msgid ""
"The :djadmin:`startproject` command creates a file :file:`<project_name>/"
"wsgi.py` that contains such an ``application`` callable."
msgstr ""
":djadmin:`startproject` コマンドは、この ``application`` 呼び出し可能オブジェ"
"クトを含む :file:`<project_name>/wsgi.py` ファイルを生成します。"

msgid ""
"It's used both by Django's development server and in production WSGI "
"deployments."
msgstr ""
"これは、Django のデプロイサーバーによって、また WSGI デプロイプロダクションに"
"おいて、これら両方で使われます。"

msgid ""
"WSGI servers obtain the path to the ``application`` callable from their "
"configuration. Django's built-in server, namely the :djadmin:`runserver` "
"command, reads it from the :setting:`WSGI_APPLICATION` setting. By default, "
"it's set to ``<project_name>.wsgi.application``, which points to the "
"``application`` callable in :file:`<project_name>/wsgi.py`."
msgstr ""
"WSGI サーバーは ``application`` 呼び出し可能オブジェクトへのパスを、その設定"
"から取得します。Django のビルトインサーバー (要するに :djadmin:`runserver` コ"
"マンド) は、:setting:`WSGI_APPLICATION` の設定からこれを読み出します。デフォ"
"ルトでは、 :file:`<project_name>/wsgi.py` 内の ``application`` 呼び出し可能オ"
"ブジェクトを指す ``<project_name>.wsgi.application`` がセットされています。"

msgid "Configuring the settings module"
msgstr "設定モジュールを設定する"

msgid ""
"When the WSGI server loads your application, Django needs to import the "
"settings module — that's where your entire application is defined."
msgstr ""
"WSGI サーバがあなたのアプリケーションを読み込むとき、Django は設定モジュール"
"をインポートする必要があります。そのモジュールは、あなたのアプリケーション全"
"体が定義されている場所です。"

msgid ""
"Django uses the :envvar:`DJANGO_SETTINGS_MODULE` environment variable to "
"locate the appropriate settings module. It must contain the dotted path to "
"the settings module. You can use a different value for development and "
"production; it all depends on how you organize your settings."
msgstr ""
"Django は適切な設定モジュールを見つけるために、 :envvar:"
"`DJANGO_SETTINGS_MODULE` 環境変数を使用します。これは設定モジュールへのドット"
"区切りのパスを含んでいなければなりません。開発時と実運用時で別々の値を使用す"
"ることも可能です。どのように設定を組織するか次第です。"

msgid ""
"If this variable isn't set, the default :file:`wsgi.py` sets it to ``mysite."
"settings``, where ``mysite`` is the name of your project. That's how :"
"djadmin:`runserver` discovers the default settings file by default."
msgstr ""
"この値が設定されていない場合、初期生成ファイルである :file:`wsgi.py` は、 "
"``mysite.settings`` をこの値として設定します。ここで ``mysite`` はプロジェク"
"トの名前です。このようにして初期設定ファイルを見つけるのが、 :djadmin:"
"`runserver` にあらかじめ用意されている方法です。"

msgid ""
"Since environment variables are process-wide, this doesn't work when you run "
"multiple Django sites in the same process. This happens with mod_wsgi."
msgstr ""
"環境変数は、同一プロセス内においては同じ値が使われます。このため、単一プロセ"
"スで複数の Django サイトを運用する場合は、適切に機能しません。これは "
"mod_wsgi を使用する場合に起こります。"

msgid ""
"To avoid this problem, use mod_wsgi's daemon mode with each site in its own "
"daemon process, or override the value from the environment by enforcing ``os."
"environ[\"DJANGO_SETTINGS_MODULE\"] = \"mysite.settings\"`` in your :file:"
"`wsgi.py`."
msgstr ""
"この問題を回避するためには、サイトごとに固有の daemon プロセスを mod_wsgi の "
"daemon モードで運用するか、もしくは :file:`wsgi.py` ファイル内で ``os."
"environ[\"DJANGO_SETTINGS_MODULE\"] = \"mysite.settings\"`` を実行して環境変"
"数の値を上書きします。"

msgid "Applying WSGI middleware"
msgstr ""

msgid ""
"To apply `WSGI middleware`_ you can simply wrap the application object. For "
"instance you could add these lines at the bottom of :file:`wsgi.py`::"
msgstr ""

msgid ""
"You could also replace the Django WSGI application with a custom WSGI "
"application that later delegates to the Django WSGI application, if you want "
"to combine a Django application with a WSGI application of another framework."
msgstr ""

msgid "How to use Django with Apache and ``mod_wsgi``"
msgstr "Django を Apache と ``mod_wsgi`` とともに使うには？"

msgid ""
"Deploying Django with Apache_ and `mod_wsgi`_ is a tried and tested way to "
"get Django into production."
msgstr ""
"Apache_ と `mod_wsgi`_ と共にDjangoをデプロイすることは、Djangoを製品とする際"
"に試され、テストされた方法です。"

msgid ""
"mod_wsgi is an Apache module which can host any Python WSGI_ application, "
"including Django. Django will work with any version of Apache which supports "
"mod_wsgi."
msgstr ""
"mod_wsgi は、Djangoを含む任意のPythonの W​​SGI_ アプリケーションをホストできる"
"Apacheのモジュールです。 Djangoはmod_wsgiをサポートしているApacheのすべての"
"バージョンで動作します。"

msgid ""
"The `official mod_wsgi documentation`_ is your source for all the details "
"about how to use mod_wsgi. You'll probably want to start with the "
"`installation and configuration documentation`_."
msgstr ""

msgid "Basic configuration"
msgstr "基本設定"

msgid ""
"Once you've got mod_wsgi installed and activated, edit your Apache server's "
"`httpd.conf`_ file and add the following. If you are using a version of "
"Apache older than 2.4, replace ``Require all granted`` with ``Allow from "
"all`` and also add the line ``Order deny,allow`` above it."
msgstr ""
"一度 mod_wsgi をインストールして有効化すれば、 Apache サーバーの  `httpd."
"conf`_ ファイルを編集して以下の記述を追加するだけです。もし利用している "
"Apache のバージョンが 2.4 よりも前の物であれば、 ``Require all granted`` を "
"``Allow from all`` にしてその上に ``Order deny,allow`` を追記してください。"

msgid ""
"The first bit in the ``WSGIScriptAlias`` line is the base URL path you want "
"to serve your application at (``/`` indicates the root url), and the second "
"is the location of a \"WSGI file\" -- see below -- on your system, usually "
"inside of your project package (``mysite`` in this example). This tells "
"Apache to serve any request below the given URL using the WSGI application "
"defined in that file."
msgstr ""
"``WSGIScriptAlias​​`` の行の最初の部分は、あなたがアプリケーションを提供したい"
"ベースとなるURLパスであり( ``/`` ルートURLを示している)、二番目の部分はシステ"
"ムの ``WSGI file`` の場所 (下記参照) です。大抵はプロジェクトパッケージ (本例"
"では ``mysite`` ) の内部です。これは、そのファイルで定義された WSGI アプリ"
"ケーションを使用して、指定された URL 以下のすべての要求にサービスを提供するよ"
"うに Apache に指示します。"

msgid ""
"If you install your project's Python dependencies inside a `virtualenv`_, "
"add the path to the virtualenv using ``WSGIPythonHome``. See the `mod_wsgi "
"virtualenv guide`_ for more details."
msgstr ""
"プロジェクトにおける Python の依存パッケージ関係を `virtualenv`_ 内にインス"
"トールしている場合、 ``WSGIPythonHome`` を用いてそのパスを追加してください。"
"詳細は `mod_wsgi の virtualenv ガイド`_ を参照ください。"

msgid ""
"The ``WSGIPythonPath`` line ensures that your project package is available "
"for import on the Python path; in other words, that ``import mysite`` works."
msgstr ""
"``WSGIPythonPath`` の行は、プロジェクトのパッケージは Python のパス上でイン"
"ポートすることが可能であることを保証します。言い換えると、 ``import mysite`` "
"が動作することを保証します。"

msgid ""
"The ``<Directory>`` piece just ensures that Apache can access your :file:"
"`wsgi.py` file."
msgstr ""
"``<Directory>`` 部分により、Apache が :file:`wsgi.py` ファイルにアクセスでき"
"るようになります。"

msgid ""
"Next we'll need to ensure this :file:`wsgi.py` with a WSGI application "
"object exists. As of Django version 1.4, :djadmin:`startproject` will have "
"created one for you; otherwise, you'll need to create it. See the :doc:`WSGI "
"overview documentation</howto/deployment/wsgi/index>` for the default "
"contents you should put in this file, and what else you can add to it."
msgstr ""
"次に、この :file:`wsgi.py` がWSGIアプリケーションのオブジェクトで存在すること"
"を確認する必要があります。 Djangoのバージョン1.4現在、 :djadmin:"
"`startproject`  を実行した際に作成されます ; それより前のバージョンでは、あな"
"たはそれを作成する必要があります。 :doc:`WSGI概要ドキュメント</howto/"
"deployment/wsgi/index>` を参照し、デフォルトのコンテンツや、その他の必要な記"
"載をこのファイルに追加してください。"

msgid ""
"If multiple Django sites are run in a single mod_wsgi process, all of them "
"will use the settings of whichever one happens to run first. This can be "
"solved by changing::"
msgstr ""
"複数の Django のサイトが単一の mod_wsgi プロセスで実行されている場合は、それ"
"らのすべては、最初に実行されたものの設定を使用します。これを解消するには、次"
"の"

msgid "in ``wsgi.py``, to::"
msgstr "という ``wsgi.py`` 内のコードを、次のように変更します。"

msgid ""
"or by :ref:`using mod_wsgi daemon mode<daemon-mode>` and ensuring that each "
"site runs in its own daemon process."
msgstr ""
"もしくは、 :ref:`mod_wsgi のデーモンモード<daemon-mode>` を使用することで、各"
"サイトをそれぞれ独立したデーモンプロセスで実行できるようにします。"

msgid "Fixing ``UnicodeEncodeError`` for file uploads"
msgstr "ファイルアップロード時の ``UnicodeEncodeError`` を修正する"

msgid ""
"If you get a ``UnicodeEncodeError`` when uploading files with file names "
"that contain non-ASCII characters, make sure Apache is configured to accept "
"non-ASCII file names::"
msgstr ""
"非 ASCII 文字を含む名前を持つファイルのアップロードする時に "
"``UnicodeEncodeError`` が発生する場合は、Apache が非 ASCII 文字を含むファイル"
"名を許容する設定になっていることを確認してください。"

msgid ""
"A common location to put this configuration is ``/etc/apache2/envvars``."
msgstr "この設定はふつう ``/etc/apache2/envvars`` で可能です。"

msgid ""
"See the :ref:`unicode-files` section of the Unicode reference guide for "
"details."
msgstr ""
"詳細については、Unicode リファレンスガイドの :ref:`unicode-files` セクション"
"を参照してください。"

msgid "Using ``mod_wsgi`` daemon mode"
msgstr "``mod_wsgi`` をデーモンモードで使用する"

msgid ""
"\"Daemon mode\" is the recommended mode for running mod_wsgi (on non-Windows "
"platforms). To create the required daemon process group and delegate the "
"Django instance to run in it, you will need to add appropriate "
"``WSGIDaemonProcess`` and ``WSGIProcessGroup`` directives. A further change "
"required to the above configuration if you use daemon mode is that you can't "
"use ``WSGIPythonPath``; instead you should use the ``python-path`` option to "
"``WSGIDaemonProcess``, for example:"
msgstr ""
"``デーモンモード`` はmod_wsgiを (Windows以外のプラットフォーム上で) 実行する"
"ための推奨モードです。必要なデーモンプロセスグループを作成し、その中で起動す"
"るための Djangoのインスタンスを委任するためには、適切な `` "
"WSGIDaemonProcess`` と `` WSGIProcessGroup`` ディレクティブを追加する必要があ"
"ります。デーモンモードを使用する場合には ``WSGIPythonPath`` を使用できないた"
"め、上記設定にさらなる変更が求められます。代わりに ``WSGIDaemonProcess`` に "
"``python-path`` オプションを使用する必要があります。例えば、"

msgid ""
"If you want to serve your project in a subdirectory (``https://example.com/"
"mysite`` in this example), you can add ``WSGIScriptAlias`` to the "
"configuration above:"
msgstr ""
"サブディレクトリでプロジェクトを提供したい場合は(本例では ``https://example."
"com/mysite`` となります) 、 ``WSGIScriptAlias`` を設定の上部に追記します。"

msgid ""
"See the official mod_wsgi documentation for `details on setting up daemon "
"mode`_."
msgstr ""
"詳細については、公式の mod_wsgi のドキュメント `details on setting up daemon "
"mode`_ を参照してください。"

msgid "Serving files"
msgstr "ファイルを配信する"

msgid ""
"Django doesn't serve files itself; it leaves that job to whichever Web "
"server you choose."
msgstr "Django 自体はファイルを配信せず、Web サーバにそのジョブを委ねます。"

msgid ""
"We recommend using a separate Web server -- i.e., one that's not also "
"running Django -- for serving media. Here are some good choices:"
msgstr ""
"メディアの配信には、Django を実行しているのとは別の Web サーバメディアを使用"
"することをお勧めします。以下のサーバーは良い選択です。"

msgid "Nginx_"
msgstr "Nginx_"

msgid "A stripped-down version of Apache_"
msgstr "Apache_ の機能縮小版"

msgid ""
"If, however, you have no option but to serve media files on the same Apache "
"``VirtualHost`` as Django, you can set up Apache to serve some URLs as "
"static media, and others using the mod_wsgi interface to Django."
msgstr ""
"しかし、Django と同じ Apache の ``VirtualHost`` からメディアファイルを配信し"
"なければならない場合には、一部の URL を静的メディアを配信するように設定し、そ"
"の他の URL を Django への mod_wsgi のインターフェイスとして設定することができ"
"ます。"

msgid ""
"This example sets up Django at the site root, but serves ``robots.txt``, "
"``favicon.ico``, and anything in the ``/static/`` and ``/media/`` URL space "
"as a static file. All other URLs will be served using mod_wsgi:"
msgstr ""
"この例では、サイトのルートには Django を設定していますが、 ``robots.txt`` 、 "
"``favicon.ico`` 、 ``/static/`` 、そして ``/media/`` の URL 空間は静的ファイ"
"ルとして配信しています。他のすべての URL は mod_wsgi を使用して配信されます。"

msgid ""
"If you are using a version of Apache older than 2.4, replace ``Require all "
"granted`` with ``Allow from all`` and also add the line ``Order deny,allow`` "
"above it."
msgstr ""
"2.4 よりも古いバージョンの Apache を使用している場合は、 ``Require all "
"granted`` を ``Allow from all`` に置き換え、さらにその行の上に ``Order deny,"
"allow`` を追加します。"

msgid "Serving the admin files"
msgstr "admin ファイルを配信する"

msgid ""
"When :mod:`django.contrib.staticfiles` is in :setting:`INSTALLED_APPS`, the "
"Django development server automatically serves the static files of the admin "
"app (and any other installed apps). This is however not the case when you "
"use any other server arrangement. You're responsible for setting up Apache, "
"or whichever Web server you're using, to serve the admin files."
msgstr ""
"Django の開発サーバは、 :mod:`django.contrib.staticfiles` が :setting:"
"`INSTALLED_APPS` に存在する場合、自動的に admin アプリケーション（およびその"
"他のインストールされているアプリケーション）の静的ファイルを配信します。しか"
"しながら、他のサーバ編成を利用している場合はこの限りではありません。Apache や"
"使用しているメディアサーバを設定し、 admin のファイルを公開できるようにしなけ"
"ればなりません。"

msgid ""
"The admin files live in (:file:`django/contrib/admin/static/admin`) of the "
"Django distribution."
msgstr ""
"admin ファイルは Django ディストリビューションの (:file:`django/contrib/"
"admin/static/admin`) にあります。"

msgid ""
"We **strongly** recommend using :mod:`django.contrib.staticfiles` to handle "
"the admin files (along with a Web server as outlined in the previous "
"section; this means using the :djadmin:`collectstatic` management command to "
"collect the static files in :setting:`STATIC_ROOT`, and then configuring "
"your Web server to serve :setting:`STATIC_ROOT` at :setting:`STATIC_URL`), "
"but here are three other approaches:"
msgstr ""
":mod:`django.contrib.staticfiles` を使って admin ファイルを扱うことを **強く"
"** お勧 めします。 (前のセクションで概要を説明したように Web サーバを設定しま"
"す。つまり :djadmin:`collectstatic`  管理コマンドを使って静的ファイルを :"
"setting:`STATIC_ROOT` に集め、Web サーバが :setting:`STATIC_ROOT` を :"
"setting:`STATIC_URL` の場所で公開するよう設定します) しかし以下では別の方法"
"を 3 つ挙げましょう:"

msgid ""
"Create a symbolic link to the admin static files from within your document "
"root (this may require ``+FollowSymLinks`` in your Apache configuration)."
msgstr ""
"ドキュメントルートに admin の静的ファイルへのシンボリックを作ります。 "
"(Apache の設定に ``+FollowSymLinks`` が必要になるでしょう)"

msgid ""
"Use an ``Alias`` directive, as demonstrated above, to alias the appropriate "
"URL (probably :setting:`STATIC_URL` + ``admin/``) to the actual location of "
"the admin files."
msgstr ""
"上で示したように Alias ディレクティブを使って、適切な URL (おそらく :setting:"
"`STATIC_URL` + ``admin/``) から admin ファイルがある実際の場所へのエ イリアス"
"を作ります。"

msgid ""
"Copy the admin static files so that they live within your Apache document "
"root."
msgstr ""
"admin の静的ファイルをコピーし、 Apache のドキュメントルートに置きます。"

msgid ""
"Django provides a handler to allow Apache to authenticate users directly "
"against Django's authentication backends. See the :doc:`mod_wsgi "
"authentication documentation </howto/deployment/wsgi/apache-auth>`."
msgstr ""
"DjangoはApacheがDjangoの認証バックエンドに対して直接ユーザを認証できるように"
"ハンドラを提供します。 :doc:`mod_wsgi 認証ドキュメント </howto/deployment/"
"wsgi/apache-auth>` を参照してください。"

msgid "How to use Django with uWSGI"
msgstr ""

msgid ""
"uWSGI_ is a fast, self-healing and developer/sysadmin-friendly application "
"container server coded in pure C."
msgstr ""

msgid ""
"The uWSGI docs offer a `tutorial`_ covering Django, nginx, and uWSGI (one "
"possible deployment setup of many). The docs below are focused on how to "
"integrate Django with uWSGI."
msgstr ""

msgid "Prerequisite: uWSGI"
msgstr ""

msgid ""
"The uWSGI wiki describes several `installation procedures`_. Using pip, the "
"Python package manager, you can install any uWSGI version with a single "
"command. For example:"
msgstr ""

msgid "uWSGI model"
msgstr ""

msgid ""
"uWSGI operates on a client-server model. Your Web server (e.g., nginx, "
"Apache) communicates with a `django-uwsgi` \"worker\" process to serve "
"dynamic content."
msgstr ""

msgid "Configuring and starting the uWSGI server for Django"
msgstr ""

msgid ""
"uWSGI supports multiple ways to configure the process. See uWSGI's "
"`configuration documentation`_."
msgstr ""

msgid "Here's an example command to start a uWSGI server::"
msgstr ""

msgid ""
"This assumes you have a top-level project package named ``mysite``, and "
"within it a module :file:`mysite/wsgi.py` that contains a WSGI "
"``application`` object. This is the layout you'll have if you ran ``django-"
"admin startproject mysite`` (using your own project name in place of "
"``mysite``) with a recent version of Django. If this file doesn't exist, "
"you'll need to create it. See the :doc:`/howto/deployment/wsgi/index` "
"documentation for the default contents you should put in this file and what "
"else you can add to it."
msgstr ""

msgid "The Django-specific options here are:"
msgstr ""

msgid ""
"``chdir``: The path to the directory that needs to be on Python's import "
"path -- i.e., the directory containing the ``mysite`` package."
msgstr ""

msgid ""
"``module``: The WSGI module to use -- probably the ``mysite.wsgi`` module "
"that :djadmin:`startproject` creates."
msgstr ""

msgid "``env``: Should probably contain at least ``DJANGO_SETTINGS_MODULE``."
msgstr ""

msgid "``home``: Optional path to your project virtualenv."
msgstr ""

msgid "Example ini configuration file::"
msgstr ""

msgid "Example ini configuration file usage::"
msgstr ""

msgid ""
"If you get a ``UnicodeEncodeError`` when uploading files with file names "
"that contain non-ASCII characters, make sure uWSGI is configured to accept "
"non-ASCII file names by adding this to your ``uwsgi.ini``::"
msgstr ""

msgid ""
"See the uWSGI docs on `managing the uWSGI process`_ for information on "
"starting, stopping and reloading the uWSGI workers."
msgstr ""

msgid ""
"When you're running a public site you should always turn off the :setting:"
"`DEBUG` setting. That will make your server run much faster, and will also "
"prevent malicious users from seeing details of your application that can be "
"revealed by the error pages."
msgstr ""

msgid ""
"However, running with :setting:`DEBUG` set to ``False`` means you'll never "
"see errors generated by your site -- everyone will just see your public "
"error pages. You need to keep track of errors that occur in deployed sites, "
"so Django can be configured to create reports with details about those "
"errors."
msgstr ""

msgid "Email reports"
msgstr ""

msgid "Server errors"
msgstr ""

msgid ""
"When :setting:`DEBUG` is ``False``, Django will email the users listed in "
"the :setting:`ADMINS` setting whenever your code raises an unhandled "
"exception and results in an internal server error (HTTP status code 500). "
"This gives the administrators immediate notification of any errors. The :"
"setting:`ADMINS` will get a description of the error, a complete Python "
"traceback, and details about the HTTP request that caused the error."
msgstr ""

msgid ""
"In order to send email, Django requires a few settings telling it how to "
"connect to your mail server. At the very least, you'll need to specify :"
"setting:`EMAIL_HOST` and possibly :setting:`EMAIL_HOST_USER` and :setting:"
"`EMAIL_HOST_PASSWORD`, though other settings may be also required depending "
"on your mail server's configuration. Consult :doc:`the Django settings "
"documentation </ref/settings>` for a full list of email-related settings."
msgstr ""

msgid ""
"By default, Django will send email from root@localhost. However, some mail "
"providers reject all email from this address. To use a different sender "
"address, modify the :setting:`SERVER_EMAIL` setting."
msgstr ""

msgid ""
"To activate this behavior, put the email addresses of the recipients in the :"
"setting:`ADMINS` setting."
msgstr ""

msgid ""
"Server error emails are sent using the logging framework, so you can "
"customize this behavior by :doc:`customizing your logging configuration </"
"topics/logging>`."
msgstr ""

msgid "404 errors"
msgstr ""

msgid ""
"Django can also be configured to email errors about broken links (404 \"page "
"not found\" errors). Django sends emails about 404 errors when:"
msgstr ""

msgid ":setting:`DEBUG` is ``False``;"
msgstr ""

msgid ""
"Your :setting:`MIDDLEWARE` setting includes :class:`django.middleware.common."
"BrokenLinkEmailsMiddleware`."
msgstr ""

msgid ""
"If those conditions are met, Django will email the users listed in the :"
"setting:`MANAGERS` setting whenever your code raises a 404 and the request "
"has a referer. It doesn't bother to email for 404s that don't have a referer "
"-- those are usually just people typing in broken URLs or broken Web bots. "
"It also ignores 404s when the referer is equal to the requested URL, since "
"this behavior is from broken Web bots too."
msgstr ""

msgid ""
":class:`~django.middleware.common.BrokenLinkEmailsMiddleware` must appear "
"before other middleware that intercepts 404 errors, such as :class:`~django."
"middleware.locale.LocaleMiddleware` or :class:`~django.contrib.flatpages."
"middleware.FlatpageFallbackMiddleware`. Put it towards the top of your :"
"setting:`MIDDLEWARE` setting."
msgstr ""

msgid ""
"You can tell Django to stop reporting particular 404s by tweaking the :"
"setting:`IGNORABLE_404_URLS` setting. It should be a list of compiled "
"regular expression objects. For example::"
msgstr ""

msgid ""
"In this example, a 404 to any URL ending with ``.php`` or ``.cgi`` will "
"*not* be reported. Neither will any URL starting with ``/phpmyadmin/``."
msgstr ""

msgid ""
"The following example shows how to exclude some conventional URLs that "
"browsers and crawlers often request::"
msgstr ""

msgid ""
"(Note that these are regular expressions, so we put a backslash in front of "
"periods to escape them.)"
msgstr ""

msgid ""
"If you'd like to customize the behavior of :class:`django.middleware.common."
"BrokenLinkEmailsMiddleware` further (for example to ignore requests coming "
"from web crawlers), you should subclass it and override its methods."
msgstr ""

msgid ""
"404 errors are logged using the logging framework. By default, these log "
"records are ignored, but you can use them for error reporting by writing a "
"handler and :doc:`configuring logging </topics/logging>` appropriately."
msgstr ""

msgid "Filtering error reports"
msgstr ""

msgid ""
"Filtering sensitive data is a hard problem, and it's nearly impossible to "
"guarantee that sensitive data won't leak into an error report. Therefore, "
"error reports should only be available to trusted team members and you "
"should avoid transmitting error reports unencrypted over the Internet (such "
"as through email)."
msgstr ""

msgid "Filtering sensitive information"
msgstr ""

msgid ""
"Error reports are really helpful for debugging errors, so it is generally "
"useful to record as much relevant information about those errors as "
"possible. For example, by default Django records the `full traceback`_ for "
"the exception raised, each `traceback frame`_’s local variables, and the :"
"class:`~django.http.HttpRequest`’s :ref:`attributes<httprequest-attributes>`."
msgstr ""

msgid ""
"However, sometimes certain types of information may be too sensitive and "
"thus may not be appropriate to be kept track of, for example a user's "
"password or credit card number. So in addition to filtering out settings "
"that appear to be sensitive as described in the :setting:`DEBUG` "
"documentation, Django offers a set of function decorators to help you "
"control which information should be filtered out of error reports in a "
"production environment (that is, where :setting:`DEBUG` is set to "
"``False``): :func:`sensitive_variables` and :func:"
"`sensitive_post_parameters`."
msgstr ""

msgid ""
"If a function (either a view or any regular callback) in your code uses "
"local variables susceptible to contain sensitive information, you may "
"prevent the values of those variables from being included in error reports "
"using the ``sensitive_variables`` decorator::"
msgstr ""

msgid ""
"In the above example, the values for the ``user``, ``pw`` and ``cc`` "
"variables will be hidden and replaced with stars (`**********`) in the error "
"reports, whereas the value of the ``name`` variable will be disclosed."
msgstr ""

msgid ""
"To systematically hide all local variables of a function from error logs, do "
"not provide any argument to the ``sensitive_variables`` decorator::"
msgstr ""

msgid "When using multiple decorators"
msgstr ""

msgid ""
"If the variable you want to hide is also a function argument (e.g. "
"'``user``’ in the following example), and if the decorated function has "
"multiple decorators, then make sure to place ``@sensitive_variables`` at the "
"top of the decorator chain. This way it will also hide the function argument "
"as it gets passed through the other decorators::"
msgstr ""

msgid ""
"If one of your views receives an :class:`~django.http.HttpRequest` object "
"with :attr:`POST parameters<django.http.HttpRequest.POST>` susceptible to "
"contain sensitive information, you may prevent the values of those "
"parameters from being included in the error reports using the "
"``sensitive_post_parameters`` decorator::"
msgstr ""

msgid ""
"In the above example, the values for the ``pass_word`` and "
"``credit_card_number`` POST parameters will be hidden and replaced with "
"stars (`**********`) in the request's representation inside the error "
"reports, whereas the value of the ``name`` parameter will be disclosed."
msgstr ""

msgid ""
"To systematically hide all POST parameters of a request in error reports, do "
"not provide any argument to the ``sensitive_post_parameters`` decorator::"
msgstr ""

msgid ""
"All POST parameters are systematically filtered out of error reports for "
"certain :mod:`django.contrib.auth.views` views (``login``, "
"``password_reset_confirm``, ``password_change``, and ``add_view`` and "
"``user_change_password`` in the ``auth`` admin) to prevent the leaking of "
"sensitive information such as user passwords."
msgstr ""

msgid "Custom error reports"
msgstr ""

msgid ""
"All :func:`sensitive_variables` and :func:`sensitive_post_parameters` do is, "
"respectively, annotate the decorated function with the names of sensitive "
"variables and annotate the ``HttpRequest`` object with the names of "
"sensitive POST parameters, so that this sensitive information can later be "
"filtered out of reports when an error occurs. The actual filtering is done "
"by Django's default error reporter filter: :class:`django.views.debug."
"SafeExceptionReporterFilter`. This filter uses the decorators' annotations "
"to replace the corresponding values with stars (`**********`) when the error "
"reports are produced. If you wish to override or customize this default "
"behavior for your entire site, you need to define your own filter class and "
"tell Django to use it via the :setting:`DEFAULT_EXCEPTION_REPORTER_FILTER` "
"setting::"
msgstr ""

msgid ""
"You may also control in a more granular way which filter to use within any "
"given view by setting the ``HttpRequest``’s ``exception_reporter_filter`` "
"attribute::"
msgstr ""

msgid ""
"Your custom filter class needs to inherit from :class:`django.views.debug."
"SafeExceptionReporterFilter` and may override the following methods:"
msgstr ""

msgid ""
"Returns ``True`` to activate the filtering operated in the other methods. By "
"default the filter is active if :setting:`DEBUG` is ``False``."
msgstr ""

msgid ""
"Returns the filtered dictionary of POST parameters. By default it replaces "
"the values of sensitive parameters with stars (`**********`)."
msgstr ""

msgid ""
"Returns the filtered dictionary of local variables for the given traceback "
"frame. By default it replaces the values of sensitive variables with stars "
"(`**********`)."
msgstr ""

msgid ""
"You can also set up custom error reporting by writing a custom piece of :ref:"
"`exception middleware <exception-middleware>`. If you do write custom error "
"handling, it's a good idea to emulate Django's built-in error handling and "
"only report/log errors if :setting:`DEBUG` is ``False``."
msgstr ""

msgid "\"How-to\" guides"
msgstr "「How-to」ガイド"

msgid ""
"Here you'll find short answers to \"How do I....?\" types of questions. "
"These how-to guides don't cover topics in depth -- you'll find that material "
"in the :doc:`/topics/index` and the :doc:`/ref/index`. However, these guides "
"will help you quickly accomplish common tasks."
msgstr ""
"ここには「～をするにはどうしたらよいだろう？」といった疑問に対する簡単な答え"
"があります。これらの How-to ガイドではあまり詳細な話は扱いません。詳細な情報"
"については :doc:`/topics/index` や :doc:`/ref/index` で見つけられるでしょう。"
"ともあれ、ここにあるガイドは、よくある作業を素早く片付けるのに役立つはずで"
"す。"

msgid ""
"The `Django community aggregator`_, where we aggregate content from the "
"global Django community. Many writers in the aggregator write this sort of "
"how-to material."
msgstr ""

msgid "Providing initial data for models"
msgstr ""

msgid ""
"It's sometimes useful to pre-populate your database with hard-coded data "
"when you're first setting up an app. You can provide initial data with "
"fixtures or migrations."
msgstr ""

msgid "Providing initial data with fixtures"
msgstr ""

msgid ""
"A fixture is a collection of data that Django knows how to import into a "
"database. The most straightforward way of creating a fixture if you've "
"already got some data is to use the :djadmin:`manage.py dumpdata <dumpdata>` "
"command. Or, you can write fixtures by hand; fixtures can be written as "
"JSON, XML or YAML (with PyYAML_ installed) documents. The :doc:"
"`serialization documentation </topics/serialization>` has more details about "
"each of these supported :ref:`serialization formats <serialization-formats>`."
msgstr ""

msgid ""
"As an example, though, here's what a fixture for a simple ``Person`` model "
"might look like in JSON:"
msgstr ""

msgid "And here's that same fixture as YAML:"
msgstr ""

msgid "You'll store this data in a ``fixtures`` directory inside your app."
msgstr ""

msgid ""
"Loading data is easy: just call :djadmin:`manage.py loaddata <loaddata>` "
"``<fixturename>``, where ``<fixturename>`` is the name of the fixture file "
"you've created. Each time you run :djadmin:`loaddata`, the data will be read "
"from the fixture and re-loaded into the database. Note this means that if "
"you change one of the rows created by a fixture and then run :djadmin:"
"`loaddata` again, you'll wipe out any changes you've made."
msgstr ""

msgid "Where Django finds fixture files"
msgstr ""

msgid ""
"By default, Django looks in the ``fixtures`` directory inside each app for "
"fixtures. You can set the :setting:`FIXTURE_DIRS` setting to a list of "
"additional directories where Django should look."
msgstr ""

msgid ""
"When running :djadmin:`manage.py loaddata <loaddata>`, you can also specify "
"a path to a fixture file, which overrides searching the usual directories."
msgstr ""

msgid ""
"Fixtures are also used by the :ref:`testing framework <topics-testing-"
"fixtures>` to help set up a consistent test environment."
msgstr ""

msgid "Providing initial data with migrations"
msgstr ""

msgid ""
"If you want to automatically load initial data for an app, don't use "
"fixtures. Instead, create a migration for your application with :class:"
"`~django.db.migrations.operations.RunPython` or :class:`~django.db."
"migrations.operations.RunSQL` operations."
msgstr ""

msgid "Running Django on Jython"
msgstr ""

msgid ""
"Jython_ is an implementation of Python that runs on the Java platform (JVM). "
"This document will get you up and running with Django on top of Jython."
msgstr ""

msgid "Installing Jython"
msgstr ""

msgid ""
"Django works with Jython versions 2.7b2 and higher. See the Jython_ website "
"for download and installation instructions."
msgstr ""

msgid "Creating a servlet container"
msgstr ""

msgid ""
"If you just want to experiment with Django, skip ahead to the next section; "
"Django includes a lightweight Web server you can use for testing, so you "
"won't need to set up anything else until you're ready to deploy Django in "
"production."
msgstr ""

msgid ""
"If you want to use Django on a production site, use a Java servlet "
"container, such as `Apache Tomcat`_. Full JavaEE applications servers such "
"as `GlassFish`_ or `JBoss`_ are also OK, if you need the extra features they "
"include."
msgstr ""

msgid "Installing Django"
msgstr ""

msgid ""
"The next step is to install Django itself. This is exactly the same as "
"installing Django on standard Python, so see :ref:`removing-old-versions-of-"
"django` and :ref:`install-django-code` for instructions."
msgstr ""

msgid "Installing Jython platform support libraries"
msgstr ""

msgid ""
"The `django-jython`_ project contains database backends and management "
"commands for Django/Jython development. Note that the builtin Django "
"backends won't work on top of Jython."
msgstr ""

msgid ""
"To install it, follow the `installation instructions`_ detailed on the "
"project website. Also, read the `database backends`_ documentation there."
msgstr ""

msgid "Differences with Django on Jython"
msgstr ""

msgid ""
"At this point, Django on Jython should behave nearly identically to Django "
"running on standard Python. However, are a few differences to keep in mind:"
msgstr ""

msgid ""
"Remember to use the ``jython`` command instead of ``python``. The "
"documentation uses ``python`` for consistency, but if you're using Jython "
"you'll want to mentally replace ``python`` with ``jython`` every time it "
"occurs."
msgstr ""

msgid ""
"Similarly, you'll need to use the ``JYTHONPATH`` environment variable "
"instead of ``PYTHONPATH``."
msgstr ""

msgid "Any part of Django that requires `Pillow`_ will not work."
msgstr ""

msgid "Integrating Django with a legacy database"
msgstr "レガシーなデータベースと Django の統合"

msgid ""
"While Django is best suited for developing new applications, it's quite "
"possible to integrate it into legacy databases. Django includes a couple of "
"utilities to automate as much of this process as possible."
msgstr ""
"Django は新しいアプリケーションを開発するのに最適ですが、レガシーなデータベー"
"スと統合することも可能です。Django には、それを自動化するいくつかのユーティリ"
"ティが含まれています。"

msgid ""
"This document assumes you know the Django basics, as covered in the :doc:"
"`tutorial </intro/tutorial01>`."
msgstr ""
"このドキュメントは:doc:`チュートリアル </intro/tutorial01>`に書かれているよう"
"な、Django についての基本的な知識を持っていることを想定しています。"

msgid ""
"Once you've got Django set up, you'll follow this general process to "
"integrate with an existing database."
msgstr ""
"Django のセットアップが完了したら、次の一般的なプロセスに従うことで、既存の"
"データベースと統合することができます。"

msgid "Give Django your database parameters"
msgstr "Django に既存データベースのパラメータを与える"

msgid ""
"You'll need to tell Django what your database connection parameters are, and "
"what the name of the database is. Do that by editing the :setting:"
"`DATABASES` setting and assigning values to the following keys for the "
"``'default'`` connection:"
msgstr ""
"まず、Django に既存のデータベース接続のパラメータとデータベースの名前を教えて"
"あげる必要があります。そのために、設定ファイルの :setting:`DATABASES` を編集"
"して、``'default'`` 接続の以下のキーに対して値を設定します。"

msgid ":setting:`NAME`"
msgstr ":setting:`NAME`"

msgid ":setting:`ENGINE <DATABASE-ENGINE>`"
msgstr ":setting:`ENGINE <DATABASE-ENGINE>`"

msgid ":setting:`USER`"
msgstr ":setting:`USER`"

msgid ":setting:`PASSWORD`"
msgstr ":setting:`PASSWORD`"

msgid ":setting:`HOST`"
msgstr ":setting:`HOST`"

msgid ":setting:`PORT`"
msgstr ":setting:`PORT`"

msgid "Auto-generate the models"
msgstr "モデルを自動生成する"

msgid ""
"Django comes with a utility called :djadmin:`inspectdb` that can create "
"models by introspecting an existing database. You can view the output by "
"running this command::"
msgstr ""

msgid "Save this as a file by using standard Unix output redirection::"
msgstr ""

msgid ""
"This feature is meant as a shortcut, not as definitive model generation. See "
"the :djadmin:`documentation of inspectdb <inspectdb>` for more information."
msgstr ""

msgid ""
"Once you've cleaned up your models, name the file ``models.py`` and put it "
"in the Python package that holds your app. Then add the app to your :setting:"
"`INSTALLED_APPS` setting."
msgstr ""

msgid ""
"By default, :djadmin:`inspectdb` creates unmanaged models. That is, "
"``managed = False`` in the model's ``Meta`` class tells Django not to manage "
"each table's creation, modification, and deletion::"
msgstr ""

msgid ""
"If you do want to allow Django to manage the table's lifecycle, you'll need "
"to change the :attr:`~django.db.models.Options.managed` option above to "
"``True`` (or simply remove it because ``True`` is its default value)."
msgstr ""

msgid "Install the core Django tables"
msgstr ""

msgid ""
"Next, run the :djadmin:`migrate` command to install any extra needed "
"database records such as admin permissions and content types::"
msgstr ""

msgid "Test and tweak"
msgstr "テストと修正"

msgid ""
"Those are the basic steps -- from here you'll want to tweak the models "
"Django generated until they work the way you'd like. Try accessing your data "
"via the Django database API, and try editing objects via Django's admin "
"site, and edit the models file accordingly."
msgstr ""

msgid "Outputting CSV with Django"
msgstr "Django で CSV を出力する"

msgid ""
"This document explains how to output CSV (Comma Separated Values) "
"dynamically using Django views. To do this, you can either use the Python "
"CSV library or the Django template system."
msgstr ""
"このドキュメントでは、Django のビューを使って動的に CSV (Comma Separated "
"Values) を出力する方法を説明しています。そのためには、Python のCSV ライブラリ"
"か Django のテンプレートシステムを使います。"

msgid "Using the Python CSV library"
msgstr "Python の CSV ライブラリを使う"

msgid ""
"Python comes with a CSV library, :mod:`csv`. The key to using it with Django "
"is that the :mod:`csv` module's CSV-creation capability acts on file-like "
"objects, and Django's :class:`~django.http.HttpResponse` objects are file-"
"like objects."
msgstr ""
"Python の標準ライブラリには CSV のライブラリ :mod:`csv` が含まれています。"
"Django でこのライブラリを使うコツは、:mod:`csv` モジュールの CSV 生成機能が"
"ファイルライクオブジェクトに対して働くことを利用します。Django の :class:"
"`~django.http.HttpResponse` オブジェクトもまた、ファイルライクオブジェクトな"
"のです。"

msgid "Here's an example::"
msgstr "以下に例を示します。"

msgid ""
"The code and comments should be self-explanatory, but a few things deserve a "
"mention:"
msgstr ""
"コードとコメントが自分自身の意味を説明しているはずですが、いくつかの点には言"
"及しておくべきでしょう。"

msgid ""
"The response gets a special MIME type, :mimetype:`text/csv`. This tells "
"browsers that the document is a CSV file, rather than an HTML file. If you "
"leave this off, browsers will probably interpret the output as HTML, which "
"will result in ugly, scary gobbledygook in the browser window."
msgstr ""
"レスポンスは特別な MIME タイプ (:mimetype:`text/csv`) を受け取ります。これに"
"より、ブラウザは、ドキュメントが HTML ではなく CSV ファイルであることを判断し"
"ます。もしこの MIME タイプの設定を忘れると、ブラウザは出力を HTML と解釈し、"
"ブラウザウィンドウに醜くて恐ろしいぐちゃぐちゃの文字列が現れてしまう恐れがあ"
"ります。"

msgid ""
"The response gets an additional ``Content-Disposition`` header, which "
"contains the name of the CSV file. This filename is arbitrary; call it "
"whatever you want. It'll be used by browsers in the \"Save as...\" dialog, "
"etc."
msgstr ""
"レスポンスには、追加の ``Content-Disposition`` ヘッダに CSV のファイル名を設"
"定することができます。ファイル名はどんなものでも構いません。ここで指定した名"
"前は、ブラウザが「別名で保存」ダイアログなどで使用します。"

msgid ""
"Hooking into the CSV-generation API is easy: Just pass ``response`` as the "
"first argument to ``csv.writer``. The ``csv.writer`` function expects a file-"
"like object, and :class:`~django.http.HttpResponse` objects fit the bill."
msgstr ""
"CSV 生成の API に接続するのは簡単です: ``response`` を最初の引数として ``csv."
"writer`` に渡すだけです。``csv.writer`` 関数は、ファイルライクのオブジェクト"
"を要求しますが、 :class:`~django.http.HttpResponse` のオブジェクトはこの要求"
"にぴったりです。"

msgid ""
"For each row in your CSV file, call ``writer.writerow``, passing it an "
"iterable object such as a list or tuple."
msgstr ""
"CSV ファイルの行ごとに、``writer.writerow`` を呼んで、リストやタプルのような "
"iterable オブジェクトを渡してください。"

msgid ""
"The CSV module takes care of quoting for you, so you don't have to worry "
"about escaping strings with quotes or commas in them. Just pass "
"``writerow()`` your raw strings, and it'll do the right thing."
msgstr ""
"CSV モジュールは引用を適切に処理するので、引用符やカンマでの文字列のエスケー"
"プについて心配する必要はありません。生の文字列を ``writerow()`` に渡すだけで"
"適切に処理されます。"

msgid "Handling Unicode on Python 2"
msgstr "Python2 で Unicode を扱う"

msgid ""
"Python 2's :mod:`csv` module does not support Unicode input. Since Django "
"uses Unicode internally this means strings read from sources such as :class:"
"`~django.http.HttpRequest` are potentially problematic. There are a few "
"options for handling this:"
msgstr ""
"Python 2 の :mod:`csv` モジュールは Unicode の入力をサポートしていません。"
"Django は内部的に Unicode を使うので、:class:`~django.http.HttpRequest` のよ"
"うなソースから読み出された文字列は、問題となる可能性があります。これを解決す"
"るためにはいくつかの選択肢があります:"

msgid "Manually encode all Unicode objects to a compatible encoding."
msgstr ""
"全ての Unicode オブジェクトを手動でエンコードして、互換性のあるエンコーディン"
"グに変換する。"

msgid ""
"Use the ``UnicodeWriter`` class provided in the `csv module's examples "
"section`_."
msgstr ""
"`csv module's examples section`_ で提供されている ``UnicodeWriter`` クラスを"
"使う。"

msgid ""
"Use the `python-unicodecsv module`_, which aims to be a drop-in replacement "
"for :mod:`csv` that gracefully handles Unicode."
msgstr ""
"`python-unicodecsv module`_ を使う。これは、Unicode を上手に処理するの :mod:"
"`csv` を一時的に置換することを狙いとします。"

msgid ""
"For more information, see the Python documentation of the :mod:`csv` module."
msgstr ""
"より詳しくは、Python ドキュメントの :mod:`csv` モジュールを参照してください。"

msgid "Streaming large CSV files"
msgstr "サイズの大きな CSV ファイルをストリーミングする"

msgid ""
"When dealing with views that generate very large responses, you might want "
"to consider using Django's :class:`~django.http.StreamingHttpResponse` "
"instead. For example, by streaming a file that takes a long time to generate "
"you can avoid a load balancer dropping a connection that might have "
"otherwise timed out while the server was generating the response."
msgstr ""
"大きなサイズのレスポンスを生成するビューを取り扱うときには、代わりに Django "
"の :class:`~django.http.StreamingHttpResponse` の使用を考えてみてください。例"
"えば、生成に長時間を要するファイルをストリーミングことで、サーバーがレスポン"
"スを生成している間にタイムアウトしてしまうような接続でも、ロードバランサが接"
"続をドロップすることを防げます。"

msgid ""
"In this example, we make full use of Python generators to efficiently handle "
"the assembly and transmission of a large CSV file::"
msgstr ""
"この例では、Python のジェネレータを最大限使用して、サイズの大きな CSV ファイ"
"ルの組み立てと伝達を効率的に扱います。"

msgid "Using the template system"
msgstr "テンプレートシステムを使う"

msgid ""
"Alternatively, you can use the :doc:`Django template system </topics/"
"templates>` to generate CSV. This is lower-level than using the convenient "
"Python :mod:`csv` module, but the solution is presented here for "
"completeness."
msgstr ""
"もしくは、:doc:`Django のテンプレートシステム </topics/templates>` を使って "
"CSV を生成することもできます。Python の :mod:`csv` モジュールの利便性には劣り"
"ますが、完全性のために提供されています。"

msgid ""
"The idea here is to pass a list of items to your template, and have the "
"template output the commas in a :ttag:`for` loop."
msgstr ""
"考え方としては、テンプレートに項目のリストを渡すというものです。そして、テン"
"プレートの :ttag:`for` ループの中でカンマを出力させます。"

msgid "Here's an example, which generates the same CSV file as above::"
msgstr "以下の例は、上述の例と同じ CSV ファイルを生成します。"

msgid ""
"The only difference between this example and the previous example is that "
"this one uses template loading instead of the CSV module. The rest of the "
"code -- such as the ``content_type='text/csv'`` -- is the same."
msgstr ""
"この例と上述の例の唯一の違いは、この例では CSV モジュールの代わりにテンプレー"
"トを呼び出していることです。残りのコード部分 -- 例えば ``content_type='text/"
"csv'`` -- は同じです。"

msgid ""
"Then, create the template ``my_template_name.txt``, with this template code:"
msgstr ""
"そして、以下のテンプレートのコードを用いて、テンプレート ``my_template_name."
"txt`` を作成しましょう。"

msgid ""
"This template is quite basic. It just iterates over the given data and "
"displays a line of CSV for each row. It uses the :tfilter:`addslashes` "
"template filter to ensure there aren't any problems with quotes."
msgstr ""
"このテンプレートはとても基本的なものです。与えられたデータを繰り返し処理し、"
"行ごとに CSV の行を表示します。:tfilter:`addslashes` を使って、引用符に問題が"
"ないことを調べます。"

msgid "Other text-based formats"
msgstr "他のテキストベースのフォーマット"

msgid ""
"Notice that there isn't very much specific to CSV here -- just the specific "
"output format. You can use either of these techniques to output any text-"
"based format you can dream of. You can also use a similar technique to "
"generate arbitrary binary data; see :doc:`/howto/outputting-pdf` for an "
"example."
msgstr ""
"ここで説明した CSV (特定の出力フォーマットの 1 つ)のような、フォーマット特有"
"の説明は特にありません。あなたの望むテキストベースのフォーマットを出力すると"
"きには、ここで説明したテクニックを活用してみてください。また、任意のバイナリ"
"データを生成するときにも、ここでのテクニックが参考になります; :doc:`/howto/"
"outputting-pdf` で例を参照してください。"

msgid "Outputting PDFs with Django"
msgstr "Django で PDF を出力する"

msgid ""
"This document explains how to output PDF files dynamically using Django "
"views. This is made possible by the excellent, open-source ReportLab_ Python "
"PDF library."
msgstr ""

msgid ""
"The advantage of generating PDF files dynamically is that you can create "
"customized PDFs for different purposes -- say, for different users or "
"different pieces of content."
msgstr ""

msgid ""
"For example, Django was used at kusports.com_ to generate customized, "
"printer-friendly NCAA tournament brackets, as PDF files, for people "
"participating in a March Madness contest."
msgstr ""

msgid "Install ReportLab"
msgstr "ReportLab をインストールする"

msgid ""
"The ReportLab library is `available on PyPI`_. A `user guide`_ (not "
"coincidentally, a PDF file) is also available for download. You can install "
"ReportLab with ``pip``:"
msgstr ""

msgid ""
"Test your installation by importing it in the Python interactive "
"interpreter::"
msgstr ""

msgid "If that command doesn't raise any errors, the installation worked."
msgstr ""

msgid "Write your view"
msgstr ""

msgid ""
"The key to generating PDFs dynamically with Django is that the ReportLab API "
"acts on file-like objects, and Django's :class:`~django.http.HttpResponse` "
"objects are file-like objects."
msgstr ""

msgid "Here's a \"Hello World\" example::"
msgstr ""

msgid ""
"The response gets a special MIME type, :mimetype:`application/pdf`. This "
"tells browsers that the document is a PDF file, rather than an HTML file. If "
"you leave this off, browsers will probably interpret the output as HTML, "
"which would result in ugly, scary gobbledygook in the browser window."
msgstr ""

msgid ""
"The response gets an additional ``Content-Disposition`` header, which "
"contains the name of the PDF file. This filename is arbitrary: Call it "
"whatever you want. It'll be used by browsers in the \"Save as...\" dialog, "
"etc."
msgstr ""

msgid ""
"The ``Content-Disposition`` header starts with ``'attachment; '`` in this "
"example. This forces Web browsers to pop-up a dialog box prompting/"
"confirming how to handle the document even if a default is set on the "
"machine. If you leave off ``'attachment;'``, browsers will handle the PDF "
"using whatever program/plugin they've been configured to use for PDFs. "
"Here's what that code would look like::"
msgstr ""

msgid ""
"Hooking into the ReportLab API is easy: Just pass ``response`` as the first "
"argument to ``canvas.Canvas``. The ``Canvas`` class expects a file-like "
"object, and :class:`~django.http.HttpResponse` objects fit the bill."
msgstr ""

msgid ""
"Note that all subsequent PDF-generation methods are called on the PDF object "
"(in this case, ``p``) -- not on ``response``."
msgstr ""

msgid ""
"Finally, it's important to call ``showPage()`` and ``save()`` on the PDF "
"file."
msgstr ""

msgid ""
"ReportLab is not thread-safe. Some of our users have reported odd issues "
"with building PDF-generating Django views that are accessed by many people "
"at the same time."
msgstr ""

msgid "Complex PDFs"
msgstr ""

msgid ""
"If you're creating a complex PDF document with ReportLab, consider using "
"the :mod:`io` library as a temporary holding place for your PDF file. This "
"library provides a file-like object interface that is particularly "
"efficient. Here's the above \"Hello World\" example rewritten to use :mod:"
"`io`::"
msgstr ""

msgid "Other formats"
msgstr ""

msgid ""
"Notice that there isn't a lot in these examples that's PDF-specific -- just "
"the bits using ``reportlab``. You can use a similar technique to generate "
"any arbitrary format that you can find a Python library for. Also see :doc:`/"
"howto/outputting-csv` for another example and some techniques you can use "
"when generated text-based formats."
msgstr ""

msgid ""
"Django Packages provides a `comparison of packages <https://djangopackages."
"org/grids/g/pdf/>`_ that help generate PDF files from Django."
msgstr ""

msgid "Overriding templates"
msgstr ""

msgid ""
"In your project, you might want to override a template in another Django "
"application, whether it be a third-party application or a contrib "
"application such as ``django.contrib.admin``. You can either put template "
"overrides in your project's templates directory or in an application's "
"templates directory."
msgstr ""

msgid ""
"If you have app and project templates directories that both contain "
"overrides, the default Django template loader will try to load the template "
"from the project-level directory first. In other words, :setting:`DIRS "
"<TEMPLATES-DIRS>` is searched before :setting:`APP_DIRS <TEMPLATES-"
"APP_DIRS>`."
msgstr ""

msgid "Overriding from the project's templates directory"
msgstr ""

msgid ""
"First, we'll explore overriding templates by creating replacement templates "
"in your project's templates directory."
msgstr ""

msgid ""
"Let's say you're trying to override the templates for a third-party "
"application called ``blog``, which provides the templates ``blog/post.html`` "
"and ``blog/list.html``. The relevant settings for your project would look "
"like::"
msgstr ""

msgid ""
"The :setting:`TEMPLATES` setting and ``BASE_DIR`` will already exist if you "
"created your project using the default project template. The setting that "
"needs to be modified is :setting:`DIRS<TEMPLATES-DIRS>`."
msgstr ""

msgid ""
"These settings assume you have a ``templates`` directory in the root of your "
"project. To override the templates for the ``blog`` app, create a folder in "
"the ``templates`` directory, and add the template files to that folder:"
msgstr ""

msgid ""
"The template loader first looks for templates in the ``DIRS`` directory. "
"When the views in the ``blog`` app ask for the ``blog/post.html`` and ``blog/"
"list.html`` templates, the loader will return the files you just created."
msgstr ""

msgid "Overriding from an app's template directory"
msgstr ""

msgid ""
"Since you're overriding templates located outside of one of your project's "
"apps, it's more common to use the first method and put template overrides in "
"a project's templates folder. If you prefer, however, it's also possible to "
"put the overrides in an app's template directory."
msgstr ""

msgid ""
"First, make sure your template settings are checking inside app directories::"
msgstr ""

msgid ""
"If you want to put the template overrides in an app called ``myapp`` and the "
"templates to override are named ``blog/list.html`` and ``blog/post.html``, "
"then your directory structure will look like:"
msgstr ""

msgid ""
"With :setting:`APP_DIRS<TEMPLATES-APP_DIRS>` set to ``True``, the template "
"loader will look in the app's templates directory and find the templates."
msgstr ""

msgid "Deploying static files"
msgstr "静的ファイルのデプロイ"

msgid ""
"For an introduction to the use of :mod:`django.contrib.staticfiles`, see :"
"doc:`/howto/static-files/index`."
msgstr ""
":mod:`django.contrib.staticfiles` の使い方の基本に関しては、:doc:`/howto/"
"static-files/index` を読んでください。"

msgid "Serving static files in production"
msgstr "製品における静的ファイルの配信"

msgid ""
"The basic outline of putting static files into production is simple: run "
"the :djadmin:`collectstatic` command when static files change, then arrange "
"for the collected static files directory (:setting:`STATIC_ROOT`) to be "
"moved to the static file server and served. Depending on :setting:"
"`STATICFILES_STORAGE`, files may need to be moved to a new location manually "
"or the :func:`post_process <django.contrib.staticfiles.storage."
"StaticFilesStorage.post_process>` method of the ``Storage`` class might take "
"care of that."
msgstr ""
"製品で静的 (static) ファイルを配置する基本的な流れは、次のように単純なもので"
"す。まず、静的ファイルが変更された時に、:djadmin:`collectstatic` コマンドを実"
"行します。そして、静的ファイル用のサーバへ移動する、収集 (collect) された静的"
"ファイルのディレクトリ (:setting:`STATIC_ROOT`) を用意し、ファイルを配信 "
"(serve) できるようにします。setting:`STATICFILES_STORAGE` の設定によっては、"
"ファイルを手動で新しい場所へ移動する必要があるかもしれません。ただし、"
"``Storage`` クラスの :func:`post_process <django.contrib.staticfiles.storage."
"StaticFilesStorage.post_process>` メソッドが面倒を見てくれる場合もあります。"

msgid ""
"Of course, as with all deployment tasks, the devil's in the details. Every "
"production setup will be a bit different, so you'll need to adapt the basic "
"outline to fit your needs. Below are a few common patterns that might help."
msgstr ""
"どんなデプロイのタスクでも、悪魔は細部に宿るものです。(訳注: Devil's in the "
"detail。神は細部に宿る (God is in the detail) から派生したことわざ) それぞれ"
"の製品ごとにセットアップには僅かな違いがあるものなので、基本的な流れに沿うよ"
"うに多少の手直しが必要になるかもしれません。以下によくあるパターンを紹介して"
"いるので、参考にしてください。"

msgid "Serving the site and your static files from the same server"
msgstr "サイトと静的ファイルを同じサーバから配信する"

msgid ""
"If you want to serve your static files from the same server that's already "
"serving your site, the process may look something like:"
msgstr ""
"静的ファイルをすでにサイトを配信しているのと同じサーバから配信したい場合、配"
"信の手順は次のようになります。"

msgid "Push your code up to the deployment server."
msgstr "デプロイするサーバにコードを push する。"

msgid ""
"On the server, run :djadmin:`collectstatic` to copy all the static files "
"into :setting:`STATIC_ROOT`."
msgstr ""
"サーバ側で、 :djadmin:`collectstatic` を実行することで、すべての静的ファイル"
"を  :setting:`STATIC_ROOT` で設定したディレクトリに集める。"

msgid ""
"Configure your web server to serve the files in :setting:`STATIC_ROOT` under "
"the URL :setting:`STATIC_URL`. For example, here's :ref:`how to do this with "
"Apache and mod_wsgi <serving-files>`."
msgstr ""
":setting:`STATIC_ROOT` に置かれたファイルを :setting:`STATIC_URL` から配信す"
"るように、Web サーバの設定を行う。たとえば、Apache と mod_wsgi を使用している"
"場合、:ref:`Apache と mod_wsgi を使用したファイルの配信 <serving-files>` が参"
"考になると思います。"

msgid ""
"You'll probably want to automate this process, especially if you've got "
"multiple web servers. There's any number of ways to do this automation, but "
"one option that many Django developers enjoy is `Fabric <http://fabfile.org/"
">`_."
msgstr ""
"きっとあなたは、このプロセスを自動化したくなりますよね。特に複数の Web サーバ"
"を管理しているならなおさらです。この自動化を達成するには様々な方法があります"
"が、Django 利用者には `Fabric <http://fabfile.org/>`_ が人気です。"

msgid ""
"Below, and in the following sections, we'll show off a few example fabfiles "
"(i.e. Fabric scripts) that automate these file deployment options. The "
"syntax of a fabfile is fairly straightforward but won't be covered here; "
"consult `Fabric's documentation <http://docs.fabfile.org/>`_, for a complete "
"explanation of the syntax."
msgstr ""
"以下、続く数セクションで、fabfile (たとえば、Fabric スクリプト) の例をいくつ"
"かお見せします。fabfile によって、上で説明したファイルのデプロイを自動化でき"
"ます。fabfile のシンタックスはひと目で分かるほど簡単なものですが、ここでは説"
"明しないので、完全な文法について知りたければ、`Fabric's documentation "
"<http://docs.fabfile.org/>`_ を参照してください。"

msgid ""
"So, a fabfile to deploy static files to a couple of web servers might look "
"something like::"
msgstr ""
"それでは、2台の Web サーバへ静的ファイルをデプロイする fabfile は、次のように"
"なります。"

msgid "Serving static files from a dedicated server"
msgstr "専用のサーバから静的ファイルを配信する"

msgid ""
"Most larger Django sites use a separate Web server -- i.e., one that's not "
"also running Django -- for serving static files. This server often runs a "
"different type of web server -- faster but less full-featured. Some common "
"choices are:"
msgstr ""
"比較的大きな Django サイトでは、Django を実行しているのとは異なる専用のサーバ"
"を用意して、静的ファイルを配信するのがふつうです。こうした専用サーバでは、高"
"速なサーバや機能を限定したサーバなど、普通の Web サーバとは異なる種類のサーバ"
"を利用します。よくある選択肢としては、次のものが挙げられます。"

msgid ""
"Configuring these servers is out of scope of this document; check each "
"server's respective documentation for instructions."
msgstr ""
"これらのサーバの設定方法は、このドキュメントの範囲外です。それぞれのサーバの"
"ドキュメントを参考に設定してください。"

msgid ""
"Since your static file server won't be running Django, you'll need to modify "
"the deployment strategy to look something like:"
msgstr ""
"静的ファイルサーバでは Django が実行されていないので、次のようにデプロイの戦"
"略を変更する必要があります。"

msgid "When your static files change, run :djadmin:`collectstatic` locally."
msgstr ""
"静的ファイルが変更されたら、ローカル側で :djadmin:`collectstatic` を実行す"
"る。"

msgid ""
"Push your local :setting:`STATIC_ROOT` up to the static file server into the "
"directory that's being served. `rsync <https://rsync.samba.org/>`_ is a "
"common choice for this step since it only needs to transfer the bits of "
"static files that have changed."
msgstr ""
"ローカル側の :setting:`STATIC_ROOT` を静的ファイルサーバのファイル配信ディレ"
"クトリにアップロードします。これには、`rsync <https://rsync.samba.org/>`_ を"
"使用するのが一般的です。rsync を利用すれば、変更された静的ファイルの情報だけ"
"を転送することができます。"

msgid "Here's how this might look in a fabfile::"
msgstr "以上の手順を fabfile にすると、次のようになります。"

msgid "Serving static files from a cloud service or CDN"
msgstr "クラウドサービスや CDN から静的ファイルを配信する"

msgid ""
"Another common tactic is to serve static files from a cloud storage provider "
"like Amazon's S3 and/or a CDN (content delivery network). This lets you "
"ignore the problems of serving static files and can often make for faster-"
"loading Web pages (especially when using a CDN)."
msgstr ""
"もう一つのよく用いられる方法は Amazon の S3 や CDN (コンテンツ・デリバリー・"
"ネットワーク) のようなクラウドストレージから静的ファイルを利用する方法です。"
"この方法では静的ファイルの取扱いに関する問題を無視できるようにし、(特に CDN "
"を利用している場合は) しばしば Web ページの高速なローディングの助けとなりま"
"す。"

msgid ""
"When using these services, the basic workflow would look a bit like the "
"above, except that instead of using ``rsync`` to transfer your static files "
"to the server you'd need to transfer the static files to the storage "
"provider or CDN."
msgstr ""
"これらのサービスを使う場合でも、基本的なワークフローは上で説明した通りです。"
"ただし、``rsync`` を使って静的ファイルをサーバに転送する代わりに、ストレージ"
"プロバイダや CDN に転送する必要があります。"

msgid ""
"There's any number of ways you might do this, but if the provider has an API "
"a :doc:`custom file storage backend </howto/custom-file-storage>` will make "
"the process incredibly simple. If you've written or are using a 3rd party "
"custom storage backend, you can tell :djadmin:`collectstatic` to use it by "
"setting :setting:`STATICFILES_STORAGE` to the storage engine."
msgstr ""
"そのための方法はいろいろありますが、プロバイダが API を提供している場合、:"
"doc:`custom file storage backend </howto/custom-file-storage>` を使えば、プロ"
"セスを非常に簡単にすることができます。すでに自分でこれを書いているか、サード"
"パーティの custom file storage backend を使っているなら、:setting:"
"`STATICFILES_STORAGE` をストレージエンジンに設定するだけで、:djadmin:"
"`collectstatic` でストレージプロバイダを使用することができます。"

msgid ""
"For example, if you've written an S3 storage backend in ``myproject.storage."
"S3Storage`` you could use it with::"
msgstr ""
"たとえば、S3 storage backend を ``myproject.storage.S3Storage`` としてすでに"
"書いていれば、次のように書くだけでこのストレージを利用できます。"

msgid ""
"Once that's done, all you have to do is run :djadmin:`collectstatic` and "
"your static files would be pushed through your storage package up to S3. If "
"you later needed to switch to a different storage provider, it could be as "
"simple as changing your :setting:`STATICFILES_STORAGE` setting."
msgstr ""
"一度これを設定すれば、あとは :djadmin:`collectstatic` を実行するだけで、スト"
"レージパッケージ経由で静的ファイルを S3 へアップロードすることができます。後"
"で別のストレージプロバイダに乗り換えることになったとしても、:setting:"
"`STATICFILES_STORAGE` の設定を書き換えるだけで、簡単にプロバイダを変更できま"
"す。"

msgid ""
"For details on how you'd write one of these backends, see :doc:`/howto/"
"custom-file-storage`. There are 3rd party apps available that provide "
"storage backends for many common file storage APIs. A good starting point is "
"the `overview at djangopackages.org <https://djangopackages.org/grids/g/"
"storage-backends/>`_."
msgstr ""

msgid "Learn more"
msgstr "さらに学ぶ"

msgid ""
"For complete details on all the settings, commands, template tags, and other "
"pieces included in :mod:`django.contrib.staticfiles`, see :doc:`the "
"staticfiles reference </ref/contrib/staticfiles>`."
msgstr ""
"すべての設定、コマンド、テンプレートタグなどの詳細と、:mod:`django.contrib."
"staticfiles` に含まれているその他の機能については、:doc:`staticfiles リファレ"
"ンス </ref/contrib/staticfiles>` を読んでください。"

msgid "Managing static files (e.g. images, JavaScript, CSS)"
msgstr "静的ファイル (画像、JavaScript、CSS など) の管理"

msgid ""
"Websites generally need to serve additional files such as images, "
"JavaScript, or CSS. In Django, we refer to these files as \"static files\".  "
"Django provides :mod:`django.contrib.staticfiles` to help you manage them."
msgstr ""
"ウェブサイトではふつう、画像や JavaScript、CSS などの追加のファイルを配信する"
"必要があります。Django では、こうしたファイルのことを「静的ファイル (static "
"files)」と呼んでいます。静的ファイルの管理を簡単にするために、Django は :mod:"
"`django.contrib.staticfiles` を提供しています。"

msgid "This page describes how you can serve these static files."
msgstr "このページでは、こうした静的ファイルの配信の仕方について説明します。"

msgid "Configuring static files"
msgstr "静的ファイルの設定"

msgid ""
"Make sure that ``django.contrib.staticfiles`` is included in your :setting:"
"`INSTALLED_APPS`."
msgstr ""
"``django.contrib.staticfiles`` が設定ファイルの :setting:`INSTALLED_APPS` に"
"含まれていることを確認してください。"

msgid "In your settings file, define :setting:`STATIC_URL`, for example::"
msgstr ""
"設定ファイルの中で、:setting:`STATIC_URL` を設定します。たとえば、次のように"
"なります。"

msgid ""
"In your templates, either hardcode the url like ``/static/my_app/example."
"jpg`` or, preferably, use the :ttag:`static` template tag to build the URL "
"for the given relative path by using the configured :setting:"
"`STATICFILES_STORAGE` storage (this makes it much easier when you want to "
"switch to a content delivery network (CDN) for serving static files)."
msgstr ""
"テンプレート中で、静的ファイルへの URL を ``/static/my_app/myexample.jpg`` の"
"ようにハードコーディングするか、または、より望ましい方法として :ttag:"
"`static` テンプレートタグを記述して、設定した :setting:`STATICFILES_STORAGE` "
"ストレージを使うことにより、指定した相対パスから URL を動的に構築します (この"
"方法は特に、静的ファイルを配信する CDN を切り替えたくなった時に、作業を簡単に"
"してくれます)。"

msgid ""
"Store your static files in a folder called ``static`` in your app. For "
"example ``my_app/static/my_app/example.jpg``."
msgstr ""
"アプリケーション内に ``static``というフォルダを作って静的ファイルを保存してく"
"ださい。例えば、``my_app/static/my_app/example.jpg`` となります。"

msgid "Serving the files"
msgstr "ファイルを配信する"

msgid ""
"In addition to these configuration steps, you'll also need to actually serve "
"the static files."
msgstr ""
"これらの設定の手順に加えて、実際に静的ファイルを配信する必要があります。"

msgid ""
"During development, if you use :mod:`django.contrib.staticfiles`, this will "
"be done automatically by :djadmin:`runserver` when :setting:`DEBUG` is set "
"to ``True`` (see :func:`django.contrib.staticfiles.views.serve`)."
msgstr ""
"開発中に :mod:`django.contrib.staticfiles` を使用する場合には、:setting:"
"`DEBUG` を ``True`` に設定して :djadmin:`runserver` を実行すれば、自動的に設"
"定が行われます。(詳しくは、:func:`django.contrib.staticfiles.views.serve` を"
"参照)"

msgid ""
"This method is **grossly inefficient** and probably **insecure**, so it is "
"**unsuitable for production**."
msgstr ""
"ただし、この方法は **極めて非効率** であり、**セキュリティ上の問題がある** 可"
"能性が高いため、**実際の製品では使うべきではありません**。"

msgid ""
"See :doc:`/howto/static-files/deployment` for proper strategies to serve "
"static files in production environments."
msgstr ""
"製品環境中で静的ファイルを配信するための適切な戦略については、:doc:`/howto/"
"static-files/deployment` を読んでください。"

msgid ""
"Your project will probably also have static assets that aren't tied to a "
"particular app. In addition to using a ``static/`` directory inside your "
"apps, you can define a list of directories (:setting:`STATICFILES_DIRS`) in "
"your settings file where Django will also look for static files. For "
"example::"
msgstr ""
"プロジェクトには、特定のアプリケーションに紐付けられていない 静的な assets が"
"あることがあります。その場合には、アプリケーション内の ``static/`` ディレクト"
"リの他に、設定ファイルでディレクトリのリスト (:setting:`STATICFILES_DIRS`) を"
"定義して、Django が静的ファイルを検索できるようにすることができます。たとえ"
"ば、次のように設定します。"

msgid ""
"See the documentation for the :setting:`STATICFILES_FINDERS` setting for "
"details on how ``staticfiles`` finds your files."
msgstr ""
"``staticfiles`` がファイルを探索する方法について詳しくは、 :setting:"
"`STATICFILES_FINDERS` のドキュメントを参照してください。"

msgid "Static file namespacing"
msgstr "静的ファイルの名前空間"

msgid ""
"Now we *might* be able to get away with putting our static files directly in "
"``my_app/static/`` (rather than creating another ``my_app`` subdirectory), "
"but it would actually be a bad idea. Django will use the first static file "
"it finds whose name matches, and if you had a static file with the same name "
"in a *different* application, Django would be unable to distinguish between "
"them. We need to be able to point Django at the right one, and the easiest "
"way to ensure this is by *namespacing* them. That is, by putting those "
"static files inside *another* directory named for the application itself."
msgstr ""
"この時点で ``my_app/static/`` 内に (他に ``my_app`` のサブディレクトリを作る"
"事なく) 直接静的ファイルを配置できるようになる *はず* ですが、実はこれはあま"
"り良くない考えです。 Django は探索して最初に名前が一致した静的ファイルを利用"
"し、もし *異なった* アプリケーションで同一の名前の静的ファイルが存在した場"
"合、 Django はそれらを区別できません。 Django に正しいパスを指定する必要があ"
"りますが、それを行うもっとも簡単な方法は *名前空間化* する事です。つまり、静"
"的ファイルをアプリケーションごとに命名された *別個の* ディレクトリ内に配置す"
"る事で行えます。"

msgid "Serving static files during development"
msgstr "開発時の静的ファイルの取扱い"

msgid ""
"If you use :mod:`django.contrib.staticfiles` as explained above, :djadmin:"
"`runserver` will do this automatically when :setting:`DEBUG` is set to "
"``True``. If you don't have ``django.contrib.staticfiles`` in :setting:"
"`INSTALLED_APPS`, you can still manually serve static files using the :func:"
"`django.views.static.serve` view."
msgstr ""
"上で述べたたように :mod:`django.contrib.staticfiles` を利用する場合、 :"
"setting:`DEBUG` が ``True`` であれば :djadmin:`runserver` は自動的にこの処理"
"を行います。もし :setting:`INSTALLED_APPS` 内に ``django.contrib."
"staticfiles`` が存在しない場合は、手動で :func:`django.views.static.serve` "
"ビューを用いて静的ファイルを取り扱わなければなりません。"

msgid ""
"This is not suitable for production use! For some common deployment "
"strategies, see :doc:`/howto/static-files/deployment`."
msgstr ""
"その機能はプロダクション環境で利用するのに適していません! 一般的なデプロイ方"
"法に関しては :doc:`/howto/static-files/deployment` を参照ください。"

msgid ""
"For example, if your :setting:`STATIC_URL` is defined as ``/static/``, you "
"can do this by adding the following snippet to your urls.py::"
msgstr ""
"例えば、 :setting:`STATIC_URL` が ``/static/`` として定義される場合、その設定"
"は urls.py に以下のスニペットを追加する事で行えます::"

msgid ""
"This helper function works only in debug mode and only if the given prefix "
"is local (e.g. ``/static/``) and not a URL (e.g. ``http://static.example.com/"
"``)."
msgstr ""
"このヘルパー関数はデバッグモードでプレフィックスが URL (例えば ``http://"
"static.example.com/``) でなくローカルのパス (例えば ``/static/``) である場合"
"にのみ利用できます。"

msgid ""
"Also this helper function only serves the actual :setting:`STATIC_ROOT` "
"folder; it doesn't perform static files discovery like :mod:`django.contrib."
"staticfiles`."
msgstr ""
"またこのヘルパー関数は :setting:`STATIC_ROOT` のフォルダのみを利用します; :"
"mod:`django.contrib.staticfiles` のように静的ファイルの探索は行いません。"

msgid "Serving files uploaded by a user during development"
msgstr "ユーザーによりアップロードされるファイルの開発時の取扱い"

msgid ""
"During development, you can serve user-uploaded media files from :setting:"
"`MEDIA_ROOT` using the :func:`django.views.static.serve` view."
msgstr ""
"開発中は、ユーザーによってアップロードされたメディアファイルを :func:`django."
"views.static.serve` ビューを利用している :setting:`MEDIA_ROOT` から利用できま"
"す。"

msgid ""
"For example, if your :setting:`MEDIA_URL` is defined as ``/media/``, you can "
"do this by adding the following snippet to your urls.py::"
msgstr ""
"例えば、 :setting:`MEDIA_URL` を ``/media/`` として設定する場合、urls.py に次"
"の記述を追記することでその設定を行えます::"

msgid ""
"This helper function works only in debug mode and only if the given prefix "
"is local (e.g. ``/media/``) and not a URL (e.g. ``http://media.example.com/"
"``)."
msgstr ""
"このヘルパー関数はデバッグモードでプレフィックスが URL (例えば ``http://"
"media.example.com/``) ではなくローカルパス (例えば ``/media/``) である場合に"
"のみ利用できます。"

msgid ""
"When running tests that use actual HTTP requests instead of the built-in "
"testing client (i.e. when using the built-in :class:`LiveServerTestCase "
"<django.test.LiveServerTestCase>`) the static assets need to be served along "
"the rest of the content so the test environment reproduces the real one as "
"faithfully as possible, but ``LiveServerTestCase`` has only very basic "
"static file-serving functionality: It doesn't know about the finders feature "
"of the ``staticfiles`` application and assumes the static content has "
"already been collected under :setting:`STATIC_ROOT`."
msgstr ""

msgid ""
"Because of this, ``staticfiles`` ships its own :class:`django.contrib."
"staticfiles.testing.StaticLiveServerTestCase`, a subclass of the built-in "
"one that has the ability to transparently serve all the assets during "
"execution of these tests in a way very similar to what we get at development "
"time with ``DEBUG = True``, i.e. without having to collect them using :"
"djadmin:`collectstatic` first."
msgstr ""

msgid "Deployment"
msgstr "デプロイ"

msgid ""
":mod:`django.contrib.staticfiles` provides a convenience management command "
"for gathering static files in a single directory so you can serve them "
"easily."
msgstr ""

msgid ""
"Set the :setting:`STATIC_ROOT` setting to the directory from which you'd "
"like to serve these files, for example::"
msgstr ""

msgid "Run the :djadmin:`collectstatic` management command::"
msgstr ""

msgid ""
"This will copy all files from your static folders into the :setting:"
"`STATIC_ROOT` directory."
msgstr ""

msgid ""
"Use a web server of your choice to serve the files. :doc:`/howto/static-"
"files/deployment` covers some common deployment strategies for static files."
msgstr ""

msgid ""
"This document has covered the basics and some common usage patterns. For "
"complete details on all the settings, commands, template tags, and other "
"pieces included in :mod:`django.contrib.staticfiles`, see :doc:`the "
"staticfiles reference </ref/contrib/staticfiles>`."
msgstr ""

msgid "Upgrading Django to a newer version"
msgstr "Django の新しいバージョンへの更新"

msgid ""
"While it can be a complex process at times, upgrading to the latest Django "
"version has several benefits:"
msgstr ""
"時には更新作業は複雑な手順になってしまうことがありますが、Django の最新版に更"
"新すると、以下ような恩恵が受けられます。"

msgid "New features and improvements are added."
msgstr "新しい機能や改善点が追加される。"

msgid "Bugs are fixed."
msgstr "バグが修正される。"

msgid ""
"Older version of Django will eventually no longer receive security updates. "
"(see :ref:`backwards-compatibility-policy`)."
msgstr ""
"古いバージョンの Django は最終的にはセキュリティアップデートが受けられなくな"
"る (:ref:`backwards-compatibility-policy` を参照してください)。"

msgid ""
"Upgrading as each new Django release is available makes future upgrades less "
"painful by keeping your code base up to date."
msgstr ""
"Django が新しくリリースされた時に更新して、コードベースを最新の状態に保ってお"
"けば、将来の更新作業が楽になる。"

msgid ""
"Here are some things to consider to help make your upgrade process as smooth "
"as possible."
msgstr ""
"このセクションでは、更新作業ができるかぎりスムーズに行う助けになるよう、特に"
"注意するべきことをいくつか説明しています。"

msgid "Required Reading"
msgstr "更新時に読むべきドキュメント"

msgid ""
"If it's your first time doing an upgrade, it is useful to read the :doc:"
"`guide on the different release processes </internals/release-process>`."
msgstr ""
"はじめて Django を更新する時には、:doc:`Django のリリースプロセスガイド </"
"internals/release-process>` を読んでおくと役に立つでしょう。"

msgid ""
"Afterwards, you should familiarize yourself with the changes that were made "
"in the new Django version(s):"
msgstr ""
"更新を行う前には、新しいバージョンの Django ではどのような点が変更されたのか"
"をよく知っておく必要があります。"

msgid ""
"Read the :doc:`release notes </releases/index>` for each 'final' release "
"from the one after your current Django version, up to and including the "
"version to which you plan to upgrade."
msgstr ""
"まず、:doc:`リリースノート </releases/index>` を読みましょう。読む必要がある"
"のは、現在の Django のバージョンの1つ後から、更新しようと考えているターゲット"
"のバージョンまでの、それぞれの「最後の (final) リリース」のリリースノートで"
"す。"

msgid ""
"Look at the :doc:`deprecation timeline</internals/deprecation>` for the "
"relevant versions."
msgstr ""
"そして、対応するバージョンの  :doc:`非推奨機能のタイムライン </internals/"
"deprecation>` にも目を通します。"

msgid ""
"Pay particular attention to backwards incompatible changes to get a clear "
"idea of what will be needed for a successful upgrade."
msgstr ""
"中でも特に、後方互換性のない変更点に注意してください。この点に注目すると、正"
"しく更新するために必要なことがはっきりとわかるようになります。"

msgid ""
"If you're upgrading through more than one feature version (e.g. A.B to A.B"
"+2), it's usually easier to upgrade through each feature release "
"incrementally (A.B to A.B+1 to A.B+2) rather than to make all the changes "
"for each feature release at once. For each feature release, use the latest "
"patch release (A.B.C)."
msgstr ""

msgid ""
"The same incremental upgrade approach is recommended when upgrading from one "
"LTS to the next."
msgstr ""

msgid "Dependencies"
msgstr "依存関係"

msgid ""
"In most cases it will be necessary to upgrade to the latest version of your "
"Django-related dependencies as well. If the Django version was recently "
"released or if some of your dependencies are not well-maintained, some of "
"your dependencies may not yet support the new Django version. In these cases "
"you may have to wait until new versions of your dependencies are released."
msgstr ""
"ほとんどの場合、Django が依存しているパッケージも最新版に更新する必要があるで"
"しょう。その Django のバージョンがリリースされたばかりで、依存関係にあるパッ"
"ケージがきちんとメンテナンスされていなかった場合、新バージョンの Django に必"
"要なパッケージがまだインストールできないかもしれません。そのような場合には、"
"そうした Django の依存パッケージの新バージョンが使えるようになるまで、少し待"
"たなければならない場合があります。"

msgid "Resolving deprecation warnings"
msgstr "廃止予定警告を解決する"

msgid ""
"Before upgrading, it's a good idea to resolve any deprecation warnings "
"raised by your project while using your current version of Django. Fixing "
"these warnings before upgrading ensures that you're informed about areas of "
"the code that need altering."
msgstr ""
"アップグレードの前、Django の現在のバージョンを使っている間に、プロジェクトが"
"挙げてくる廃止予定警告を解決しておくのがよいでしょう。アップグレードの前にこ"
"れらの警告を解決することで、コードが警告を必要とする領域について通知されるよ"
"うにできます。"

msgid ""
"In Python, deprecation warnings are silenced by default. You must turn them "
"on using the ``-Wall`` Python command line option or the :envvar:"
"`PYTHONWARNINGS` environment variable. For example, to show warnings while "
"running tests:"
msgstr ""
"Python では、デフォルトでは廃止予定警告は無効化されています。``-Wall`` "
"Python コマンドラインオプションか :envvar:`PYTHONWARNINGS` 環境変数を使って有"
"効化する必要があります。例えば、テスト実行中に警告を表示するには:"

msgid ""
"If you're not using the Django test runner, you may need to also ensure that "
"any console output is not captured which would hide deprecation warnings. "
"For example, if you use `py.test`:"
msgstr ""
"Django のテスト実行環境を使用していない場合は、廃止予定警告を隠すような、コン"
"ソール出力がキャプチャされていないことを確認する必要があります。例えば、`py."
"test` を使っている場合:"

msgid ""
"Resolve any deprecation warnings with your current version of Django before "
"continuing the upgrade process."
msgstr ""
"アップグレードプロセスを続ける前に、Django の現在のバージョンで廃止予定警告を"
"解決してください。"

msgid ""
"Third party applications might use deprecated APIs in order to support "
"multiple versions of Django, so deprecation warnings in packages you've "
"installed don't necessarily indicate a problem. If a package doesn't support "
"the latest version of Django, consider raising an issue or sending a pull "
"request for it."
msgstr ""
"Django の複数バージョンをサポートするために、サードパーティアプリケーションは"
"廃止される API を使用しているかもしれません。そのため、インストールしたパッ"
"ケージの廃止予定警告は必ずしも問題を示しません。パッケージが Django の最新の"
"バージョンをサポートしていない場合、問題を提起するかプルリクエストを送ること"
"を考えてみてください。"

msgid "Installation"
msgstr "インストール"

msgid ""
"Once you're ready, it is time to :doc:`install the new Django version </"
"topics/install>`. If you are using virtualenv_ and it is a major upgrade, "
"you might want to set up a new environment with all the dependencies first."
msgstr ""
"さあ、準備ができたら、:doc:`新しいバージョンの Django をインストールする </"
"topics/install>` 時です。virtualenv_ を使っていて、これが Django のメジャー"
"アップデートなら、virtualenv_ で新しい環境をセットアップして、そこに Django "
"を依存パッケージとともにインストールしてもいいでしょう。"

msgid ""
"Exactly which steps you will need to take depends on your installation "
"process. The most convenient way is to use pip_ with the ``--upgrade`` or ``-"
"U`` flag:"
msgstr ""
"次にどのステップを踏むべきかはあなたのインストールの進め方によって変わります"
"が、一番簡単な方法は、次のように pip_ に ``--upgrade`` または `-U` フラグを付"
"けて実行するというものです。"

msgid "pip_ also automatically uninstalls the previous version of Django."
msgstr ""
"pip_ を使えば、過去のバージョンの Django も自動的にアンインストールしてくれま"
"す。"

msgid ""
"If you use some other installation process, you might have to manually :ref:"
"`uninstall the old Django version <removing-old-versions-of-django>` and "
"should look at the complete installation instructions."
msgstr ""
"これ以外のインストールの進め方を選んだ人は、手動で :ref:`古いバージョンの "
"Django をアンインストール <removing-old-versions-of-django>` して、完全なイン"
"ストール手順を読む必要があるかもしれません。"

msgid ""
"When the new environment is set up, :doc:`run the full test suite </topics/"
"testing/overview>` for your application. Again, it's useful to turn on "
"deprecation warnings on so they're shown in the test output (you can also "
"use the flag if you test your app manually using ``manage.py runserver``):"
msgstr ""

msgid ""
"After you have run the tests, fix any failures. While you have the release "
"notes fresh in your mind, it may also be a good time to take advantage of "
"new features in Django by refactoring your code to eliminate any deprecation "
"warnings."
msgstr ""
"テストを実行したら、テストに失敗した点をすべて修正しましょう。リリースノート"
"の内容を心に留めながらコードをリファクタリングして、非推奨の警告が出ないよう"
"にすれば、Django の新しい機能の恩恵も受けられるかもしれません。"

msgid ""
"When you are sufficiently confident your app works with the new version of "
"Django, you're ready to go ahead and :doc:`deploy </howto/deployment/index>` "
"your upgraded Django project."
msgstr ""
"新しいバージョンの Django でもアプリケーションが動作すると自信を持って言える"
"ようになったならば、更新した Django プロジェクトを :doc:`デプロイ </howto/"
"deployment/index>` する準備ができたことになります．"

msgid ""
"If you are using caching provided by Django, you should consider clearing "
"your cache after upgrading. Otherwise you may run into problems, for "
"example, if you are caching pickled objects as these objects are not "
"guaranteed to be pickle-compatible across Django versions. A past instance "
"of incompatibility was caching pickled :class:`~django.http.HttpResponse` "
"objects, either directly or indirectly via the :func:`~django.views."
"decorators.cache.cache_page` decorator."
msgstr ""
"Django が提供するキャッシュを利用している場合には、更新後にキャッシュをクリア"
"しなければなりません。クリアしなかった場合にはどんな問題が起こり得るでしょう"
"か？ たとえば、pickle 化したオブジェクトをキャッシュしていた場合には、複数の"
"バージョンの Django にわたって pickle の互換性が保証されません。A past "
"instance of incompatibility was caching pickled :class:`~django.http."
"HttpResponse` objects, either directly or indirectly via the :func:`~django."
"views.decorators.cache.cache_page` decorator."

msgid "How to install Django on Windows"
msgstr "Windows での Django のインストール方法"

msgid ""
"This document will guide you through installing Python 3.5 and Django on "
"Windows. It also provides instructions for installing `virtualenv`_ and "
"`virtualenvwrapper`_, which make it easier to work on Python projects. This "
"is meant as a beginner's guide for users working on Django projects and does "
"not reflect how Django should be installed when developing patches for "
"Django itself."
msgstr ""

msgid ""
"The steps in this guide have been tested with Windows 7, 8, and 10. In other "
"versions, the steps would be similar. You will need to be familiar with "
"using the Windows command prompt."
msgstr ""

msgid "Install Python"
msgstr "Python をインストールする"

msgid ""
"Django is a Python web framework, thus requiring Python to be installed on "
"your machine. At the time of writing, Python 3.5 is the latest version."
msgstr ""
"Django は Python のウェブフレームワークなので、コンピュータには Python がイン"
"ストールしておく必要があります。この記事を書いている時点では、Python 3.5 が最"
"新版です。"

msgid ""
"To install Python on your machine go to https://python.org/downloads/. The "
"website should offer you a download button for the latest Python version. "
"Download the executable installer and run it. Check the box next to ``Add "
"Python 3.5 to PATH`` and then click ``Install Now``."
msgstr ""

msgid ""
"After installation, open the command prompt and check that the Python "
"version matches the version you installed by executing::"
msgstr ""
"インストール後、コマンドプロンプトを開き、次のコマンドを実行して、Python の"
"バージョンが今インストールしたバージョンと一致するかどうか確認します。"

msgid "About ``pip``"
msgstr ""

msgid ""
"`pip`_ is a package manage for Python. It makes installing and uninstalling "
"Python packages (such as Django!) very easy. For the rest of the "
"installation, we'll use ``pip`` to install Python packages from the command "
"line."
msgstr ""
"`pip`_ は Python のパッケージマネージャです。`pip`_ を使えば、Python のパッ"
"ケージ (たとえば Django のような！) のインストールやアンインストールが非常に"
"簡単に行えます。インストールのセクションでは、これ以降コマンドラインから "
"``pip`` を使って Python のパッケージをインストールします。"

msgid ""
"To install pip on your machine, go to https://pip.pypa.io/en/latest/"
"installing/, and follow the ``Installing with get-pip.py`` instructions."
msgstr ""

msgid "Install ``virtualenv`` and ``virtualenvwrapper``"
msgstr "``virtualenv`` と ``virtualenvwrapper`` のインストール"

msgid ""
"`virtualenv`_ and `virtualenvwrapper`_ provide a dedicated environment for "
"each Django project you create. While not mandatory, this is considered a "
"best practice and will save you time in the future when you're ready to "
"deploy your project. Simply type::"
msgstr ""
"`virtualenv`_ と `virtualenvwrapper`_ は、作成した Django プロジェクトごとに"
"専用の環境を用意してくれるパッケージです。プロジェクト用の環境を作るのは必須"
"ではありませんが、ベストプラクティスだと考えられていて、将来自分のプロジェク"
"トをデプロイしようとするときに無駄な時間を費やすのを防いでくれます。まずは、"
"次のコマンドを実行しましょう。"

msgid "Then create a virtual environment for your project::"
msgstr "そして、次のコマンドでプロジェクト用の仮想環境を作成します。"

msgid ""
"The virtual environment will be activated automatically and you'll see "
"\"(myproject)\" next to the command prompt to designate that. If you start a "
"new command prompt, you'll need to activate the environment again using::"
msgstr ""
"仮想環境は自動的に有効 (activate) にされ、コマンドプロンプトの隣に、仮想環境"
"内にいることを示す \"(myproject)\" という文字列が表示されるはずです。新しいコ"
"マンドプロンプトを始めるには、次のコマンドを用いて、もう一度環境を有効にする"
"必要があります。"

msgid "Install Django"
msgstr "Django をインストールする"

msgid ""
"Django can be installed easily using ``pip`` within your virtual environment."
msgstr ""

msgid ""
"In the command prompt, ensure your virtual environment is active, and "
"execute the following command::"
msgstr ""

msgid "This will download and install the latest Django release."
msgstr ""
"これにより、Django の最新版のリリースがダウンロードされ、インストールされま"
"す。"

msgid ""
"After the installation has completed, you can verify your Django "
"installation by executing ``django-admin --version`` in the command prompt."
msgstr ""
"インストールが完了したら、コマンドプロンプトで ``django-admin --version`` と"
"いうコマンドを実行することで、Django が正しくインストールされたかどうかを確認"
"することができます。"

msgid ""
"See :ref:`database-installation` for information on database installation "
"with Django."
msgstr ""
"Django とともにデータベースをインストールするための情報については、 :ref:"
"`database-installation` を参照してください。"

msgid "Common pitfalls"
msgstr "よくある落とし穴"

msgid ""
"If ``django-admin`` only displays the help text no matter what arguments it "
"is given, there is probably a problem with the file association in Windows. "
"Check if there is more than one environment variable set for running Python "
"scripts in ``PATH``. This usually occurs when there is more than one Python "
"version installed."
msgstr ""
"どんな引数を与えても ``django-admin`` がヘルプテキストしか表示してくれない場"
"合、Windows のファイルの関連付けに問題がある可能性があります。``PATH`` に "
"Python のスクリプトを実行するのに必要な環境変数が2つ以上設定されていないかど"
"うか確認してください。2つ以上のバージョンの Python をインストールした時にこの"
"問題が起こることがあります。"

msgid ""
"If you are connecting to the internet behind a proxy, there might be problem "
"in running the command ``pip install django``. Set the environment variables "
"for proxy configuration in the command prompt as follows::"
msgstr ""
"プロキシ経由でインターネットに接続している場合、``pip install django`` という"
"コマンドを実行する時にエラーが表示される場合があります。その場合には、コマン"
"ドプロンプトに次のコマンドを入力して、プロキシの設定用の環境変数を設定してく"
"ださい。"

msgid "Writing database migrations"
msgstr "データベースのマイグレーションを書く"

msgid ""
"This document explains how to structure and write database migrations for "
"different scenarios you might encounter. For introductory material on "
"migrations, see :doc:`the topic guide </topics/migrations>`."
msgstr ""
"このドキュメントでは、遭遇する可能性のあるいくつかのシナリオに対する、データ"
"ベースのマイグレーションの構成方法と書き方について説明します。マイグレーショ"
"ンに関する入門的な資料を探しているなら、:doc:`トピック別ガイド </topics/"
"migrations>` を読んでください。"

msgid "Data migrations and multiple databases"
msgstr "データのマイグレーションと複数のデータベース"

msgid ""
"When using multiple databases, you may need to figure out whether or not to "
"run a migration against a particular database. For example, you may want to "
"**only** run a migration on a particular database."
msgstr ""

msgid ""
"In order to do that you can check the database connection's alias inside a "
"``RunPython`` operation by looking at the ``schema_editor.connection.alias`` "
"attribute::"
msgstr ""

msgid ""
"You can also provide hints that will be passed to the :meth:"
"`allow_migrate()` method of database routers as ``**hints``:"
msgstr ""

msgid "Then, to leverage this in your migrations, do the following::"
msgstr ""

msgid ""
"If your ``RunPython`` or ``RunSQL`` operation only affects one model, it's "
"good practice to pass ``model_name`` as a hint to make it as transparent as "
"possible to the router. This is especially important for reusable and third-"
"party apps."
msgstr ""

msgid "Migrations that add unique fields"
msgstr ""

msgid ""
"Applying a \"plain\" migration that adds a unique non-nullable field to a "
"table with existing rows will raise an error because the value used to "
"populate existing rows is generated only once, thus breaking the unique "
"constraint."
msgstr ""

msgid ""
"Therefore, the following steps should be taken. In this example, we'll add a "
"non-nullable :class:`~django.db.models.UUIDField` with a default value. "
"Modify the respective field according to your needs."
msgstr ""

msgid ""
"Add the field on your model with ``default=uuid.uuid4`` and ``unique=True`` "
"arguments (choose an appropriate default for the type of the field you're "
"adding)."
msgstr ""

msgid ""
"Run the :djadmin:`makemigrations` command. This should generate a migration "
"with an ``AddField`` operation."
msgstr ""

msgid ""
"Generate two empty migration files for the same app by running "
"``makemigrations myapp --empty`` twice. We've renamed the migration files to "
"give them meaningful names in the examples below."
msgstr ""

msgid ""
"Copy the ``AddField`` operation from the auto-generated migration (the first "
"of the three new files) to the last migration, change ``AddField`` to "
"``AlterField``, and add imports of ``uuid`` and ``models``. For example:"
msgstr ""

msgid ""
"Edit the first migration file. The generated migration class should look "
"similar to this:"
msgstr ""

msgid ""
"Change ``unique=True`` to ``null=True`` -- this will create the intermediary "
"null field and defer creating the unique constraint until we've populated "
"unique values on all the rows."
msgstr ""

msgid ""
"In the first empty migration file, add a :class:`~django.db.migrations."
"operations.RunPython` or :class:`~django.db.migrations.operations.RunSQL` "
"operation to generate a unique value (UUID in the example) for each existing "
"row. Also add an import of ``uuid``. For example:"
msgstr ""

msgid ""
"Now you can apply the migrations as usual with the :djadmin:`migrate` "
"command."
msgstr ""

msgid ""
"Note there is a race condition if you allow objects to be created while this "
"migration is running. Objects created after the ``AddField`` and before "
"``RunPython`` will have their original ``uuid``’s overwritten."
msgstr ""

msgid "Non-atomic migrations"
msgstr ""

msgid ""
"On databases that support DDL transactions (SQLite and PostgreSQL), "
"migrations will run inside a transaction by default. For use cases such as "
"performing data migrations on large tables, you may want to prevent a "
"migration from running in a transaction by setting the ``atomic`` attribute "
"to ``False``::"
msgstr ""

msgid ""
"Within such a migration, all operations are run without a transaction. It's "
"possible to execute parts of the migration inside a transaction using :func:"
"`~django.db.transaction.atomic()` or by passing ``atomic=True`` to "
"``RunPython``."
msgstr ""

msgid ""
"Here's an example of a non-atomic data migration that updates a large table "
"in smaller batches::"
msgstr ""

msgid ""
"The ``atomic`` attribute doesn't have an effect on databases that don't "
"support DDL transactions (e.g. MySQL, Oracle)."
msgstr ""

msgid "Controlling the order of migrations"
msgstr ""

msgid ""
"Django determines the order in which migrations should be applied not by the "
"filename of each migration, but by building a graph using two properties on "
"the ``Migration`` class: ``dependencies`` and ``run_before``."
msgstr ""

msgid ""
"If you've used the :djadmin:`makemigrations` command you've probably already "
"seen ``dependencies`` in action because auto-created migrations have this "
"defined as part of their creation process."
msgstr ""

msgid "The ``dependencies`` property is declared like this::"
msgstr ""

msgid ""
"Usually this will be enough, but from time to time you may need to ensure "
"that your migration runs *before* other migrations. This is useful, for "
"example, to make third-party apps' migrations run *after* your :setting:"
"`AUTH_USER_MODEL` replacement."
msgstr ""

msgid ""
"To achieve this, place all migrations that should depend on yours in the "
"``run_before`` attribute on your ``Migration`` class::"
msgstr ""

msgid ""
"Prefer using ``dependencies`` over ``run_before`` when possible. You should "
"only use ``run_before`` if it is undesirable or impractical to specify "
"``dependencies`` in the migration which you want to run after the one you "
"are writing."
msgstr ""

msgid "Migrating data between third-party apps"
msgstr ""

msgid ""
"You can use a data migration to move data from one third-party application "
"to another."
msgstr ""

msgid ""
"If you plan to remove the old app later, you'll need to set the "
"``dependencies`` property based on whether or not the old app is installed. "
"Otherwise, you'll have missing dependencies once you uninstall the old app. "
"Similarly, you'll need to catch :exc:`LookupError` in the ``apps."
"get_model()`` call that retrieves models from the old app. This approach "
"allows you to deploy your project anywhere without first installing and then "
"uninstalling the old app."
msgstr ""

msgid "Here's a sample migration:"
msgstr ""

msgid ""
"Also consider what you want to happen when the migration is unapplied. You "
"could either do nothing (as in the example above) or remove some or all of "
"the data from the new application. Adjust the second argument of the :mod:"
"`~django.db.migrations.operations.RunPython` operation accordingly."
msgstr ""

msgid "Changing an unmanaged model to managed"
msgstr ""

msgid ""
"If you want to change an unmanaged model (:attr:`managed=False <django.db."
"models.Options.managed>`) to managed, you must remove ``managed=False`` and "
"generate a migration before making other schema-related changes to the "
"model, since schema changes that appear in the migration that contains the "
"operation to change ``Meta.managed`` may not be applied."
msgstr ""
