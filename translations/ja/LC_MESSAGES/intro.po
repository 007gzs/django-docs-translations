# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
#
# Translators:
# xiu1 <d84ea@hotmail.co.jp>, 2015-2016
# Eiji Warashina <Eiji.Warashina@gmail.com>, 2016
# Hiroki KIYOHARA <hirokiky@gmail.com>, 2013-2014,2016
# Hiroshi Yamaki <hiroshi.yamaki@gmail.com>, 2015
# kazuhiro soga <kazsoga@gmail.com>, 2016
# Kenjiro Kosaka <inoshirou@gmail.com>, 2014
# Kosei Kitahara <information@surgo.jp>, 2013
# IWAI, Masaharu <iwaim.sub@gmail.com>, 2016
# MASASHI Shibata <contact@c-bata.link>, 2015-2016
# Masataka Arai <arai.masataka142@gmail.com>, 2016
# Mitsuhiro Sorakubo <msorakubo@msn.com>, 2016
# mnamihdk, 2017
# Pawllo2 <pawllothesecond@gmail.com>, 2017
# Riktio Taniguchi <rikiriki1238@gmail.com>, 2015
# Satoshi Tsuyama <tsuyama@nike.eonet.ne.jp>, 2014
# Shuuji TAKAHASHI (shuuji3) <shuuji3@gmail.com>, 2017
# Suguru YAMAMOTO <sgryjp@gmail.com>, 2017
# Shuuji TAKAHASHI (shuuji3) <shuuji3@gmail.com>, 2016
# Takayuki Hirai, 2015
# Takuya Arita <takuya.arita@gmail.com>, 2015
# Yuma.M, 2015
# Yusuke Miyazaki <miyazaki.dev@gmail.com>, 2015,2017
# Pawllo2 <pawllothesecond@gmail.com>, 2017
msgid ""
msgstr ""
"Project-Id-Version: django-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-21 12:11-0500\n"
"PO-Revision-Date: 2017-04-16 14:09+0000\n"
"Last-Translator: mnamihdk\n"
"Language-Team: Japanese (http://www.transifex.com/django/django-docs/"
"language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid "Writing your first patch for Django"
msgstr "Django への初めてのパッチを書く"

msgid "Introduction"
msgstr "はじめに"

msgid ""
"Interested in giving back to the community a little? Maybe you've found a "
"bug in Django that you'd like to see fixed, or maybe there's a small feature "
"you want added."
msgstr ""
"少しでもコミュニティへ恩返しをしたいと思われますか? それは Django の簡単なバ"
"グフィックスや小さな機能追加かもしれません。"

msgid ""
"Contributing back to Django itself is the best way to see your own concerns "
"addressed. This may seem daunting at first, but it's really pretty simple. "
"We'll walk you through the entire process, so you can learn by example."
msgstr ""
"その願いを叶える最適な方法は Django 自体への貢献です。最初は気が重いかもしれ"
"ませんが、実際はとても簡単です。私達がプロセス全体を詳しく解説するので、その"
"例から学ぶことができるでしょう。"

msgid "Who's this tutorial for?"
msgstr "このチュートリアルは誰を対象としていますか?"

msgid ""
"If you are looking for a reference on how to submit patches, see the :doc:`/"
"internals/contributing/writing-code/submitting-patches` documentation."
msgstr ""
"パッチの送り方について知りたい方は、 :doc:`/internals/contributing/writing-"
"code/submitting-patches` をご覧ください。"

msgid ""
"For this tutorial, we expect that you have at least a basic understanding of "
"how Django works. This means you should be comfortable going through the "
"existing tutorials on :doc:`writing your first Django app</intro/"
"tutorial01>`. In addition, you should have a good understanding of Python "
"itself. But if you don't, `Dive Into Python`__ is a fantastic (and free) "
"online book for beginning Python programmers."
msgstr ""
"このチュートリアルは、少なくとも Django がどのように動作しているかの基本的な"
"理解があることを想定しています。つまりチュートリアル :doc:`初めての Django ア"
"プリ</intro/tutorial01>` を十分に理解していることを想定しています。また、"
"Python 自体をよく理解している必要があります。もしそうでない場合、 `Dive Into "
"Python`__ は Python プログラマーになるための素晴らしい (かつ無料の) オンライ"
"ンドキュメントです。"

msgid ""
"Those of you who are unfamiliar with version control systems and Trac will "
"find that this tutorial and its links include just enough information to get "
"started. However, you'll probably want to read some more about these "
"different tools if you plan on contributing to Django regularly."
msgstr ""
"バージョン管理システムと Trac をよく知らない方でも、このチュートリアルとリン"
"ク先から、始めるに十分な情報を得ることができます。しかし、Django に定期的に貢"
"献したい場合は、このツールの詳細について知りたいかもしれません。"

msgid ""
"For the most part though, this tutorial tries to explain as much as "
"possible, so that it can be of use to the widest audience."
msgstr ""
"このチュートリアルでは、できるだけ多くの方が使用できるように可能な限り解説し"
"たいと思います。"

msgid "Where to get help:"
msgstr "困ったときは:"

msgid ""
"If you're having trouble going through this tutorial, please post a message "
"to |django-developers| or drop by `#django-dev on irc.freenode.net`__ to "
"chat with other Django users who might be able to help."
msgstr ""
"もしこのチュートリアルを通じて理解できないことがあれば、 |django-developers| "
"にメッセージを送るか `#django-dev on irc.freenode.net`__ で他の Django ユー"
"ザーとのチャットが助けになるでしょう。"

msgid "What does this tutorial cover?"
msgstr "このチュートリアルの範囲はなんですか?"

msgid ""
"We'll be walking you through contributing a patch to Django for the first "
"time. By the end of this tutorial, you should have a basic understanding of "
"both the tools and the processes involved. Specifically, we'll be covering "
"the following:"
msgstr ""
"初めて Django にパッチを送る手順を詳しく解説します。このチュートリアルを終え"
"ると、関連するツールとプロセス両方についての基本的な理解を得ることができま"
"す。具体的な範囲は以下の通りです:"

msgid "Installing Git."
msgstr "Git のインストール"

msgid "How to download a development copy of Django."
msgstr "開発版の Django の複製をダウンロード"

msgid "Running Django's test suite."
msgstr "Django のテストスイートの実行"

msgid "Writing a test for your patch."
msgstr "パッチへのテストを書く"

msgid "Writing the code for your patch."
msgstr "パッチのコードを書く"

msgid "Testing your patch."
msgstr "パッチをテスト"

msgid "Submitting a pull request."
msgstr "プルリクエストを送る"

msgid "Where to look for more information."
msgstr "より多くの情報を得る方法"

msgid ""
"Once you're done with the tutorial, you can look through the rest of :doc:"
"`Django's documentation on contributing</internals/contributing/index>`. It "
"contains lots of great information and is a must read for anyone who'd like "
"to become a regular contributor to Django. If you've got questions, it's "
"probably got the answers."
msgstr ""
"チュートリアルを終えたら、次は :doc:`Django への貢献</internals/contributing/"
"index>` を参照してください。このドキュメントには、多くの重要な情報が含まれて"
"おり、Django に定期的に貢献したい方は是非一読してください。あなたの疑問への答"
"えが見つかるはずです。"

msgid "Python 3 required!"
msgstr "3系の Python が必要です！"

msgid ""
"This tutorial assumes you are using Python 3. Get the latest version at "
"`Python's download page <https://www.python.org/download/>`_ or with your "
"operating system's package manager."
msgstr ""
"このチュートリアルは3系のPythonの使用を想定しています。 `Python's download "
"page <https://www.python.org/download/>`_ またはOSのパッケージ管理システムを"
"用いて、最新のバージョンをインストールしてください。"

msgid "For Windows users"
msgstr "Windowsを使用している方へ"

msgid ""
"When installing Python on Windows, make sure you check the option \"Add "
"python.exe to Path\", so that it is always available on the command line."
msgstr ""
"WindowsにPythonをインストールする際、 \"Add python.exe to Path\" のオプション"
"にチェックを入れると、コマンドラインからいつでも利用できるようになります。"

msgid "Code of Conduct"
msgstr "ソースコードの管理"

msgid ""
"As a contributor, you can help us keep the Django community open and "
"inclusive. Please read and follow our `Code of Conduct <https://www."
"djangoproject.com/conduct/>`_."
msgstr ""
"あなたはコントリビューターとして私たちDjangoコミュニティをオープンかつ包摂的"
"なものでありつづけることを援助できます。私たちの `ソースコードの管理 "
"<https://www.djangoproject.com/conduct/>` を参照し、フォローして下さい。"

msgid "Installing Git"
msgstr "Git のインストール"

msgid ""
"For this tutorial, you'll need Git installed to download the current "
"development version of Django and to generate patch files for the changes "
"you make."
msgstr ""
"このチュートリアルでは、最新の Django 開発版のダウンロードとその変更のパッチ"
"ファイルを生成するために Git をインストールする必要があります。"

msgid ""
"To check whether or not you have Git installed, enter ``git`` into the "
"command line. If you get messages saying that this command could not be "
"found, you'll have to download and install it, see `Git's download page`__."
msgstr ""
"Git がインストールされているかどうかを確認するために、コマンドラインで "
"``git`` を入力します。もし入っていない場合は、ダウンロード及びインストールす"
"るために、 `Git's download page`__ を参照してください。"

msgid ""
"When installing Git on Windows, it is recommended that you pick the \"Git "
"Bash\" option so that Git runs in its own shell. This tutorial assumes "
"that's how you have installed it."
msgstr ""
"WindowsにGitをインストールする際、 \"Git Bash\" オプションを選択し、シェルか"
"らGitが操作できるようにしておくことをおすすめします。このチュートリアルは "
"Git Bash がインストールされていることを想定しています。"

msgid ""
"If you're not that familiar with Git, you can always find out more about its "
"commands (once it's installed) by typing ``git help`` into the command line."
msgstr ""
"もし Git について詳しく知らない場合は、(インストール後に) コマンドラインから "
"``git help`` と入力するとコマンドの使い方を確認できます。"

msgid "Getting a copy of Django's development version"
msgstr "Django 開発版の複製を取得"

msgid ""
"The first step to contributing to Django is to get a copy of the source "
"code. First, `fork Django on GitHub <https://github.com/django/django/"
"fork>`__. Then, from the command line, use the ``cd`` command to navigate to "
"the directory where you'll want your local copy of Django to live."
msgstr ""
"Django へ貢献するためのはじめの一歩は、ソースコードのコピーです。まず、 "
"`GitHub で Django をフォーク <https://github.com/django/django/fork>`__ し"
"て、コマンドラインからリポジトリのクローンを作り、 ``cd`` コマンドで Django "
"のローカルコピーのディレクトリに移動しましょう。"

msgid "Download the Django source code repository using the following command:"
msgstr "以下のコマンドで Django のソースコードリポジトリをダウンロードします:"

msgid ""
"Now that you have a local copy of Django, you can install it just like you "
"would install any package using ``pip``. The most convenient way to do so is "
"by using a *virtual environment* (or virtualenv) which is a feature built "
"into Python that allows you to keep a separate directory of installed "
"packages for each of your projects so that they don't interfere with each "
"other."
msgstr ""
"今やあなたはDjangoのローカルコピーを手に入れました、\"pip\"を使ってどんなパッ"
"ケージでもインストールできるのと同じように、Djangoもインストールできます。"
"Pythonに含まれる機能である *virtual environment* (もしくはvirtualenv)は、プロ"
"ジェクトごとにインストールされたパッケージが互いに害を及ぼすことないよう、"
"別々のディレクトリで維持することを可能にする、もっとも便利な方法です。"

msgid ""
"It's a good idea to keep all your virtualenvs in one place, for example in "
"``.virtualenvs/`` in your home directory. Create it if it doesn't exist yet:"
msgstr ""
"ホームディレクトリの ``.virtualenvs/`` 以下に、すべてのvirtualenvを 1 箇所に"
"おいておくといいです。もしまだそのフォルダが存在しないなら作成しましょう。"

msgid "Now create a new virtualenv by running:"
msgstr ""
"それではアプリケーションを実行するために新しいvirtualenvを作りましょう: "

msgid "The path is where the new environment will be saved on your computer."
msgstr "新しい環境があるパスはコンピュータに保存されました。"

msgid ""
"Using the built-in ``venv`` module will not work if you are also using the "
"Git Bash shell on Windows, since activation scripts are only created for the "
"system shell (``.bat``) and PowerShell (``.ps1``). Use the ``virtualenv`` "
"package instead:"
msgstr ""
"ビルトインの ``venv`` は、 Windows 用にはシステムシェル(``.bat``) や"
"PowerShell(``.ps1``)のためだけに作られたアクティベーションスクリプトであるた"
"め、WindowsのGit Bash shellを使用していても動作しません。その代わりに"
"``virtualenv``パッケージを使用します:"

msgid "For Ubuntu users"
msgstr "Ubuntuを使用している方へ"

msgid ""
"On some versions of Ubuntu the above command might fail. Use the "
"``virtualenv`` package instead, first making sure you have ``pip3``:"
msgstr ""
"いくつかのバージョンのUbuntuでは上記のコマンドは失敗するでしょう。まず "
"``pip3`` があることを確認し、 ``virtualenv`` パッケージを使用します。"

msgid "The final step in setting up your virtualenv is to activate it:"
msgstr "virtualenvを有効化すれば設定は終わりです:"

msgid ""
"If the ``source`` command is not available, you can try using a dot instead:"
msgstr ""
"もし ``source`` コマンドが使えない場合、代わりに ``.`` を試してみてください:"

msgid "To activate your virtualenv on Windows, run:"
msgstr "Windows上でvirtualenvを有効にするために、実行してください:"

msgid ""
"You have to activate the virtualenv whenever you open a new terminal window. "
"virtualenvwrapper__ is a useful tool for making this more convenient."
msgstr ""
"ターミナルの新しいウィンドウを開いたときは、virtualenvを有効にする必要があり"
"ます。 virtualenvwrapper__ はこれをより簡単にできるツールです。"

msgid ""
"Anything you install through ``pip`` from now on will be installed in your "
"new virtualenv, isolated from other environments and system-wide packages. "
"Also, the name of the currently activated virtualenv is displayed on the "
"command line to help you keep track of which one you are using. Go ahead and "
"install the previously cloned copy of Django:"
msgstr ""
"これより ``pip`` を通じてインストールした何もかもが、他の環境やシステムワイド"
"なパッケージから分離されて、新しいvirtualenvにインストールされます。また、ど"
"の環境を使っているのかがわかるように現在有効なvirtualenvの名前がコマンドライ"
"ンに表示されます。先ほどクローンしたDjangoのコピーをインストールして作業を続"
"行します:"

msgid ""
"The installed version of Django is now pointing at your local copy. You will "
"immediately see any changes you make to it, which is of great help when "
"writing your first patch."
msgstr ""
"現在インストールされたDjangoはあなたのローカルコピーを参照しています。あなた"
"が行ったどのような変更も迅速に確認できます、これはあなたが最初のパッチを作成"
"するときの大きな助けになります。"

msgid "Rolling back to a previous revision of Django"
msgstr "旧リビジョンの Django に戻す"

msgid ""
"For this tutorial, we'll be using ticket :ticket:`24788` as a case study, so "
"we'll rewind Django's version history in git to before that ticket's patch "
"was applied. This will allow us to go through all of the steps involved in "
"writing that patch from scratch, including running Django's test suite."
msgstr ""
"このチュートリアルでは、ケーススタディとして :ticket:`24788` を用います。その"
"ために、まず Django のバージョンをパッチが適用される前の git のバージョンに戻"
"します。これによりスクラッチからパッチの作成、 Django のテストスイートの実行"
"を含む全ての手順を解説します。"

msgid ""
"**Keep in mind that while we'll be using an older revision of Django's trunk "
"for the purposes of the tutorial below, you should always use the current "
"development revision of Django when working on your own patch for a ticket!**"
msgstr ""
"**チュートリアルでは trunk ではない古いリビジョンの Django を使用しますが、自"
"分のパッチを作成する場合は Django の最新の開発版を使用する必要があります!**"

msgid ""
"The patch for this ticket was written by Paweł Marczewski, and it was "
"applied to Django as `commit 4df7e8483b2679fc1cba3410f08960bac6f51115`__. "
"Consequently, we'll be using the revision of Django just prior to that, "
"`commit 4ccfc4439a7add24f8db4ef3960d02ef8ae09887`__."
msgstr ""
"このチケットのパッチは Paweł Marczewski 氏により書かれ、これは `commit "
"4df7e8483b2679fc1cba3410f08960bac6f51115`__ で Django に適用されました。よっ"
"て `commit 4ccfc4439a7add24f8db4ef3960d02ef8ae09887`__ が適用される前の "
"Django のリビジョンを使用します。"

msgid ""
"Navigate into Django's root directory (that's the one that contains "
"``django``, ``docs``, ``tests``, ``AUTHORS``, etc.). You can then check out "
"the older revision of Django that we'll be using in the tutorial below:"
msgstr ""
"Django のルートディレクトリ (このディレクトリには ``django``, ``docs``, "
"``tests``, ``AUTHORS``, 等が含まれています) へ移動します。次にチュートリアル"
"で使用する Django の旧リビジョンをチェックアウトします。"

msgid "Running Django's test suite for the first time"
msgstr "最初に Django のテストスイートを実行する"

msgid ""
"When contributing to Django it's very important that your code changes don't "
"introduce bugs into other areas of Django. One way to check that Django "
"still works after you make your changes is by running Django's test suite. "
"If all the tests still pass, then you can be reasonably sure that your "
"changes haven't completely broken Django. If you've never run Django's test "
"suite before, it's a good idea to run it once beforehand just to get "
"familiar with what its output is supposed to look like."
msgstr ""
"Django へ貢献する際、変更したコードが Django の他の領域にバグを混入しないこと"
"が非常に重要です。変更後に Django の正常動作を確認するには Django のテストス"
"イートを実行します。すべてのテストに合格した場合は、その変更により Django が"
"壊れていないことが確認できます。Django のテストスイートを実行したことが一度も"
"ない場合、その出力結果を把握しておくために一度テストスイートを実行しておくこ"
"とを推奨します。"

msgid ""
"Before running the test suite, install its dependencies by first ``cd``-ing "
"into the Django ``tests/`` directory and then running:"
msgstr ""
"Django のテストスイートを走らせる前に、まずは Djangoの ``tests/`` ディレクト"
"リに ``cd`` で移動して、依存関係をインストールしてください:"

msgid ""
"If you encounter an error during the installation, your system might be "
"missing a dependency for one or more of the Python packages. Consult the "
"failing package's documentation or search the Web with the error message "
"that you encounter."
msgstr ""
"もしこのインストールの間にエラーが発生した場合は、システムが Python のパッ"
"ケージのうちの 1 つ、もしくはそれ以上の依存関係を見失っている可能性がありま"
"す。失敗したパッケージの資料を調べるか、発生したエラーメッセージを Web で検索"
"してください。"

msgid ""
"Now we are ready to run the test suite. If you're using GNU/Linux, Mac OS X "
"or some other flavor of Unix, run:"
msgstr ""
"テストスイートを実効する準備が出来ました。もし GNU/Linux, Mac OS X 等 Unix 系"
"OSを使用している場合、下記のコマンドを実行します:"

msgid ""
"Now sit back and relax. Django's entire test suite has over 9,600 different "
"tests, so it can take anywhere from 5 to 15 minutes to run, depending on the "
"speed of your computer."
msgstr ""
"それでは一息つきましょう。Django 全体のテストスイートは 9600 以上のテストが含"
"まれており、コンピュータの速度により 5 〜 15分程度かかります。"

msgid ""
"While Django's test suite is running, you'll see a stream of characters "
"representing the status of each test as it's run. ``E`` indicates that an "
"error was raised during a test, and ``F`` indicates that a test's assertions "
"failed. Both of these are considered to be test failures. Meanwhile, ``x`` "
"and ``s`` indicated expected failures and skipped tests, respectively. Dots "
"indicate passing tests."
msgstr ""
"Django のテストスイートを実行中に、各テストの状態を文字のストリームで確認する"
"ことができます。 ``E`` はテストにエラーが発生したことを表し、 ``F`` はテスト"
"のアサーションが失敗したことを表しています。これらは共にテスト失敗となりま"
"す。``x`` と ``s`` はそれぞれ期待する失敗とスキップを表しています。ドットはテ"
"ストの成功を表しています。"

msgid ""
"Skipped tests are typically due to missing external libraries required to "
"run the test; see :ref:`running-unit-tests-dependencies` for a list of "
"dependencies and be sure to install any for tests related to the changes you "
"are making (we won't need any for this tutorial). Some tests are specific to "
"a particular database backend and will be skipped if not testing with that "
"backend. SQLite is the database backend for the default settings. To run the "
"tests using a different backend, see :ref:`running-unit-tests-settings`."
msgstr ""
"スキップされたテストは、テストを実行するために必要な外部ライブラリがインス"
"トールされていないことが原因です; 依存については :ref:`running-unit-tests-"
"dependencies` を参照し、関連するテストを実行してください (このチュートリアル"
"では必要ありません)。いくつかのテストは、特定のデータベースバックエンドに固有"
"であり、そのバックエンドでテストされない場合はスキップされます。 SQLite は、"
"デフォルト設定のバックエンドです。別のバックエンドを使用してテストを実行する"
"には、 :ref:`running-unit-tests-settings` を参照してください。"

msgid ""
"Once the tests complete, you should be greeted with a message informing you "
"whether the test suite passed or failed. Since you haven't yet made any "
"changes to Django's code, the entire test suite **should** pass. If you get "
"failures or errors make sure you've followed all of the previous steps "
"properly. See :ref:`running-unit-tests` for more information. If you're "
"using Python 3.5+, there will be a couple failures related to deprecation "
"warnings that you can ignore. These failures have since been fixed in Django."
msgstr ""
"テストが終了するとテストが成功したか､失敗したかを知らせるメッセージが表示され"
"ます｡まだ Django のコードに変更を加えていなければ､テストは全て **パスするはず"
"です** ｡もし失敗するかエラーが起こる場合は､これまでの全ステップを適切に実行し"
"てください｡ :ref:`running-unit-tests` で､よりテストについて知れます｡もし "
"Python 3.5 以上を使っているのであれば、おそらく無視できる非推奨の警告に関係す"
"るいくつかの失敗でしょう。それらの失敗は、後の Django で修正されています。"

msgid ""
"Note that the latest Django trunk may not always be stable. When developing "
"against trunk, you can check `Django's continuous integration builds`__ to "
"determine if the failures are specific to your machine or if they are also "
"present in Django's official builds. If you click to view a particular "
"build, you can view the \"Configuration Matrix\" which shows failures broken "
"down by Python version and database backend."
msgstr ""
"開発中の､最新の Django ではステーブルとは限りません｡トランクバージョンで開発"
"を行う場合､ `Django の継続インテグレーションビルド`__ をチェックしてください｡"
"これで､テストの失敗があなたのマシンだけのものか､ Django 公式のビルドによるも"
"のかが分かります｡各ビルドについてのリンクをクリックすれば､ \"Configuration "
"Matrix\" という､ 各 Python のバージョン､ DB バックエンドに対応したテストの失"
"敗を閲覧できます｡"

msgid ""
"For this tutorial and the ticket we're working on, testing against SQLite is "
"sufficient, however, it's possible (and sometimes necessary) to :ref:`run "
"the tests using a different database <running-unit-tests-settings>`."
msgstr ""
"このチュートリアルや､各チケットで作業する際は､ SQLite のテストで十分です｡しか"
"し可能 (か必要な場合は) :ref:`他のデータベースでテストを実行する <running-"
"unit-tests-settings>` を参照してください｡"

msgid "Creating a branch for your patch"
msgstr "パッチ用のブランチを作る"

msgid "Before making any changes, create a new branch for the ticket:"
msgstr "変更を加える前に、チケット用に新しいブランチを作ります。"

msgid ""
"You can choose any name that you want for the branch, \"ticket_24788\" is an "
"example. All changes made in this branch will be specific to the ticket and "
"won't affect the main copy of the code that we cloned earlier."
msgstr ""
"ブランチ名は好きな名前で構いません。\"ticket_24788\" は一例です。新しいブラン"
"チ内で行ったすべての変更は、先ほどクローンしたコードのマスターコピーには影響"
"しません。"

msgid "Writing some tests for your ticket"
msgstr "チケットにテストを書く"

msgid ""
"In most cases, for a patch to be accepted into Django it has to include "
"tests. For bug fix patches, this means writing a regression test to ensure "
"that the bug is never reintroduced into Django later on. A regression test "
"should be written in such a way that it will fail while the bug still exists "
"and pass once the bug has been fixed. For patches containing new features, "
"you'll need to include tests which ensure that the new features are working "
"correctly. They too should fail when the new feature is not present, and "
"then pass once it has been implemented."
msgstr ""
"大抵の場合､ Django にアクセプトされるパッチはテストを含んでいます｡リグレッ"
"ションテストを書くことで､ Django にバグを再混入していないと後に保証できます｡"
"レグレッションテストは､バグが存在しているときに落ちるように書き､バグが修正さ"
"れた後にパスするように書かれるべきです｡新機能を含むパッチでは､その新機能が正"
"しく動作すると保証するためにテストが必要です｡その際も同じように､新機能が無い"
"際には落ち､実装されてから通るテストを書くべきです｡"

msgid ""
"A good way to do this is to write your new tests first, before making any "
"changes to the code. This style of development is called `test-driven "
"development`__ and can be applied to both entire projects and single "
"patches. After writing your tests, you then run them to make sure that they "
"do indeed fail (since you haven't fixed that bug or added that feature yet). "
"If your new tests don't fail, you'll need to fix them so that they do. After "
"all, a regression test that passes regardless of whether a bug is present is "
"not very helpful at preventing that bug from reoccurring down the road."
msgstr ""
"これをするには､コードに変更を加える前に先にテストを書くのが良いでしょう｡この"
"開発手法は `テスト駆動開発`__ と呼ばれ､プロジェクト全体にも単一のパッチにも適"
"応可能です｡テストを書いた後には､テストを走らせて確かに落ちることを確認します "
"(バグ修正や昨日の追加はまだしてないので落ちます)｡ 新しいテストが落ちない場合"
"は落ちるよう修正しましょう｡ともかく､バグが存在していようとも通るテストは将来"
"バグが再発するのを防ぐのに､何の役にもたちません｡"

msgid "Now for our hands-on example."
msgstr "ハンズオンでの例題"

msgid "Writing some tests for ticket #24788"
msgstr "チケット #24788 にテストを書いてみましょう"

msgid ""
"Ticket :ticket:`24788` proposes a small feature addition: the ability to "
"specify the class level attribute ``prefix`` on Form classes, so that::"
msgstr ""
"チケット :ticket:`24788` は、Formクラスにおいてクラスレベルの属性 ``prefix`` "
"を指定可能にするという小さな機能追加を、このように提案しています:"

msgid ""
"In order to resolve this ticket, we'll add a ``prefix`` attribute to the "
"``BaseForm`` class. When creating instances of this class, passing a prefix "
"to the ``__init__()`` method will still set that prefix on the created "
"instance. But not passing a prefix (or passing ``None``) will use the class-"
"level prefix. Before we make those changes though, we're going to write a "
"couple tests to verify that our modification functions correctly and "
"continues to function correctly in the future."
msgstr ""
"このチケットを解決するには､ ``prefix`` 属性を ``BaseForm`` に追加します｡この"
"クラスのインスタンスを作成する時、 ``__init__()`` メソッドに ``prefix`` を渡"
"すと、作成されたインスタンスに ``prefix`` がセットされます。 しかし "
"``prefix`` を渡さない(または ``None`` を与える)場合、クラスレベルのprefixが使"
"用されます。変更を加える前に､変更が正しく動作し､これからも動作し続けることを"
"確認するためにテストをいくつか追加します｡"

msgid ""
"Navigate to Django's ``tests/forms_tests/tests/`` folder and open the "
"``test_forms.py`` file. Add the following code on line 1674 right before the "
"``test_forms_with_null_boolean`` function::"
msgstr ""
"Django の ``tests/forms_tests/tests/`` フォルダに移動して ``tests_forms.py`` "
"ファイルを開きます。以下のコードを ``test_forms_with_null_boolean `` 関数の直"
"前の 1674 行目に追加します::"

msgid ""
"This new test checks that setting a class level prefix works as expected, "
"and that passing a ``prefix`` parameter when creating an instance still "
"works too."
msgstr ""
"この新しいテストは、 クラスレベルの ``prefix`` が期待通りに設定されていること"
"と、インスタンスの生成時にまだ ``prefix`` パラメータが渡されていることを確認"
"します。"

msgid "But this testing thing looks kinda hard..."
msgstr "でもテストをするのはすこし難しそうです……"

msgid ""
"If you've never had to deal with tests before, they can look a little hard "
"to write at first glance. Fortunately, testing is a *very* big subject in "
"computer programming, so there's lots of information out there:"
msgstr ""
"テストを書いたとこがない場合は､最初は難しく見えるかもしれません｡ですが実は､テ"
"スティングはプログラミングにおいて *とても* 重要なことです｡ここではテストにつ"
"いて詳細に紹介します｡"

msgid ""
"A good first look at writing tests for Django can be found in the "
"documentation on :doc:`/topics/testing/overview`."
msgstr ""
"Django のための良いテストの書き方は :doc:`/topics/testing/overview` のドキュ"
"メントに記載されています。"

msgid ""
"Dive Into Python (a free online book for beginning Python developers) "
"includes a great `introduction to Unit Testing`__."
msgstr ""
"Dive Into Python (Python初心者のための､オンラインの無料の本) では素晴らしい `"
"初めてのユニットテスト`__ という章があります｡"

msgid ""
"After reading those, if you want something a little meatier to sink your "
"teeth into, there's always the Python :mod:`unittest` documentation."
msgstr ""
"Dive Into Python を読んだあと、もう少し情報が欲しい場合は、Python の :mod:"
"`unittest` のドキュメントを参照してください｡"

msgid "Running your new test"
msgstr "新しいテストを走らせる"

msgid ""
"Remember that we haven't actually made any modifications to ``BaseForm`` "
"yet, so our tests are going to fail. Let's run all the tests in the "
"``forms_tests`` folder to make sure that's really what happens. From the "
"command line, ``cd`` into the Django ``tests/`` directory and run:"
msgstr ""
"``BaseForm `` にはまだ変更を加えていませんので､テストは落ちます｡ "
"``forms_tests `` フォルダの全テストを走らせて､実際に何が起こるか観てみましょ"
"う｡コマンドラインで ``tests/`` ディレクトリに ``cd`` して､以下を実行してくだ"
"さい::"

msgid ""
"If the tests ran correctly, you should see one failure corresponding to the "
"test method we added. If all of the tests passed, then you'll want to make "
"sure that you added the new test shown above to the appropriate folder and "
"class."
msgstr ""
"テストが正しく実行されれば､追加したテストメソッドに対応する1つのテストが失敗"
"するでしょう｡テストがすべて通れば､上記した新しいテストを正しいフォルダ､クラス"
"に追加したことを確認してください｡"

msgid "Writing the code for your ticket"
msgstr "チケットにコードを書く"

msgid ""
"Next we'll be adding the functionality described in ticket :ticket:`24788` "
"to Django."
msgstr "次は :ticket:`24788 ` で説明されている機能を Django に追加します｡"

msgid "Writing the code for ticket #24788"
msgstr "チケット #24788 のコードを書いてみましょう"

msgid ""
"Navigate to the ``django/django/forms/`` folder and open the ``forms.py`` "
"file. Find the ``BaseForm`` class on line 72 and add the ``prefix`` class "
"attribute right after the ``field_order`` attribute::"
msgstr ""
"``django/django/contrib/forms`` フォルダーに行って､ ``forms.py`` ファイルを開"
"いてください｡\n"
"72行目にある ``BaseForm`` クラスを見つけて､以下の ``prefix`` クラス属性をすで"
"にある ``field_order`` 属性の下に追加してください::"

msgid "Verifying your test now passes"
msgstr "テストが通ることを確認する"

msgid ""
"Once you're done modifying Django, we need to make sure that the tests we "
"wrote earlier pass, so we can see whether the code we wrote above is working "
"correctly. To run the tests in the ``forms_tests`` folder, ``cd`` into the "
"Django ``tests/`` directory and run:"
msgstr ""
"Django への変更が完了したあと､コードが正しく動作すると確認するため､先ほど書い"
"たテストを実行してください｡Djangoの ``form_tests`` フォルダーに ``cd`` で移動"
"して､以下を実行してください::"

msgid ""
"Oops, good thing we wrote those tests! You should still see one failure with "
"the following exception::"
msgstr ""
"あぁ､テストを書いていて良かったですね｡以下のように1つテストが落ちています::"

msgid ""
"We forgot to add the conditional statement in the ``__init__`` method. Go "
"ahead and change ``self.prefix = prefix`` that is now on line 87 of ``django/"
"forms/forms.py``, adding a conditional statement::"
msgstr ""
"``__init__``メソッドの中に条件文を追加するのを忘れていました。``django/forms/"
"forms.py`` の87行目の``self.prefix = prefix``を参照して変更します。条件文を追"
"加しましょう::"

msgid ""
"Re-run the tests and everything should pass. If it doesn't, make sure you "
"correctly modified the ``BaseForm`` class as shown above and copied the new "
"test correctly."
msgstr ""
"再実行すればテストがすべてパスするはずです｡もしそうでない場合､ ``BaseForm`` "
"クラスと新しいテストが正しくコピーされているされていると確認してください｡"

msgid "Running Django's test suite for the second time"
msgstr "Django の テストスイートをもう一度走らせる"

msgid ""
"Once you've verified that your patch and your test are working correctly, "
"it's a good idea to run the entire Django test suite just to verify that "
"your change hasn't introduced any bugs into other areas of Django. While "
"successfully passing the entire test suite doesn't guarantee your code is "
"bug free, it does help identify many bugs and regressions that might "
"otherwise go unnoticed."
msgstr ""
"パッチとテストが正しく動作していることを確認できたら､ Django のテストをすべて"
"走らせて､変更が Django の別の場所にバグを仕込んでいないか確認しましょう｡すべ"
"てのテストが通るという事は､追加したコードがバグフリーだと保証します｡大量のバ"
"グや手戻りを発見できます｡そうでないとバグを見逃してしまうでしょう｡"

msgid ""
"To run the entire Django test suite, ``cd`` into the Django ``tests/`` "
"directory and run:"
msgstr ""
"Django の全てのテストスイートを走らせるには ``cd`` で Django の ``tests/`` "
"ディレクトリ移動して実行してください:"

msgid "As long as you don't see any failures, you're good to go."
msgstr "どのテストも失敗していない間は、作業を続けることができます。"

msgid "Writing Documentation"
msgstr "ドキュメントを書く"

msgid ""
"This is a new feature, so it should be documented. Add the following section "
"on line 1068 (at the end of the file) of ``django/docs/ref/forms/api.txt``::"
msgstr ""
"この機能は新しいので､ドキュメントに書かれるべきです｡  ``django/docs/ref/"
"forms/api.txt`` の 1068行目 (ファイルの最後) に追記してください::"

msgid ""
"Since this new feature will be in an upcoming release it is also added to "
"the release notes for Django 1.9, on line 164 under the \"Forms\" section in "
"the file ``docs/releases/1.9.txt``::"
msgstr ""
"この新機能は将来のリリースに含まれるとともに、Django 1.9のリリースノート、"
"ファイル ``docs/releases/1.9.txt`` 164行目以降の\"Forms\"のセクションに追加さ"
"れています。"

msgid ""
"For more information on writing documentation, including an explanation of "
"what the ``versionadded`` bit is all about, see :doc:`/internals/"
"contributing/writing-documentation`. That page also includes an explanation "
"of how to build a copy of the documentation locally, so you can preview the "
"HTML that will be generated."
msgstr ""
"ドキュメントの書き方についてもっと知りたい場合は :doc:`/internals/"
"contributing/writing-documentation` を参照してください｡ここでは､ "
"``versionadded` の書き方についてや､ ドキュメントのコピーをローカルでビルドし"
"てみて､ HTML をプレビューする方法などが書かれています｡"

msgid "Previewing your changes"
msgstr "変更点を確認する"

msgid ""
"Now it's time to go through all the changes made in our patch. To display "
"the differences between your current copy of Django (with your changes) and "
"the revision that you initially checked out earlier in the tutorial:"
msgstr ""
"さて、パッチに加えたすべての変更を確認する時が来ました。変更を加えた現在の "
"Django のコピーと、このチュートリアルの最初にクローンしたリビジョンとの差分を"
"表示するには、次のコマンドを実行します。"

msgid "Use the arrow keys to move up and down."
msgstr "ページを進めるには上下キーを使います。"

msgid ""
"When you're done previewing the patch, hit the ``q`` key to return to the "
"command line. If the patch's content looked okay, it's time to commit the "
"changes."
msgstr ""
"パッチのプレビューが終わったら ``q`` キーを押してコマンドラインに戻ります。"
"パッチに問題がなければ、変更をコミットしましょう。"

msgid "Committing the changes in the patch"
msgstr "パッチの変更点をコミットする"

msgid "To commit the changes:"
msgstr "変更点をコミットするには、次のコマンドを実行します。"

msgid ""
"This opens up a text editor to type the commit message. Follow the :ref:"
"`commit message guidelines <committing-guidelines>` and write a message like:"
msgstr ""
"すると、コミットメッセージを入力するためのテキストエディタが開きます。 :ref:`"
"コミットメッセージガイドライン <committing-guidelines>` に従って、次のように"
"メッセージを入力します。"

msgid "Pushing the commit and making a pull request"
msgstr "コミットのプッシュとプルリクエストの作成"

msgid ""
"After committing the patch, send it to your fork on GitHub (substitute "
"\"ticket_24788\" with the name of your branch if it's different):"
msgstr ""
"パッチをコミットしたら、そのコミットを GitHub 上のあなたのフォークに送りま"
"しょう (ブランチ名を変えた場合には \"ticket_24788\" の部分を置き換えてくださ"
"い)。"

msgid ""
"You can create a pull request by visiting the `Django GitHub page <https://"
"github.com/django/django/>`_. You'll see your branch under \"Your recently "
"pushed branches\". Click \"Compare & pull request\" next to it."
msgstr ""
"プルリクエストは `Django の GitHub ページ <https://github.com/django/django/"
">`_ から作成できます。\"Your recently pushed branches\" の下にあなたのブラン"
"チが表示されているはずです。その下の \"Compare & pull request\" ボタンをク"
"リックします。"

msgid ""
"Please don't do it for this tutorial, but on the next page that displays a "
"preview of the patch, you would click \"Create pull request\"."
msgstr ""

msgid "Next steps"
msgstr "次のステップ"

msgid ""
"Congratulations, you've learned how to make a pull request to Django! "
"Details of more advanced techniques you may need are in :doc:`/internals/"
"contributing/writing-code/working-with-git`."
msgstr ""
"おめでとうございます！ これで Django へのプルリクエストの作成方法を学ぶことが"
"できました。応用テクニックについて詳しくは :doc:`/internals/contributing/"
"writing-code/working-with-git` を読んでください。"

msgid ""
"Now you can put those skills to good use by helping to improve Django's "
"codebase."
msgstr ""
"これで、Django のコードベースを改良する手助けができるようになりました。"

msgid "More information for new contributors"
msgstr "新しい貢献者のための情報"

msgid ""
"Before you get too into writing patches for Django, there's a little more "
"information on contributing that you should probably take a look at:"
msgstr ""
"Django へのパッチを書き始める前に､貢献するために見ておいたほうがいい情報があ"
"ります:"

msgid ""
"You should make sure to read Django's documentation on :doc:`claiming "
"tickets and submitting patches </internals/contributing/writing-code/"
"submitting-patches>`. It covers Trac etiquette, how to claim tickets for "
"yourself, expected coding style for patches, and many other important "
"details."
msgstr ""
"Django のドキュメントの `チケットをクレームして､パッチを送信する </internals/"
"contributing/writing-code/submitting-patches>`_ を読んでください｡ Trac でのエ"
"チケットやチケットをクレームする方法やパッチに適切なコーディングスタイルなど､"
"重要なことを網羅できます｡"

msgid ""
"First time contributors should also read Django's :doc:`documentation for "
"first time contributors</internals/contributing/new-contributors/>`. It has "
"lots of good advice for those of us who are new to helping out with Django."
msgstr ""
"Django への初めての貢献者は :doc:`初めての貢献者へのドキュメント </internals/"
"contributing/new-contributors/>` を読んでください｡Django に初めて協力する人た"
"ちへの良いアドバイスがあります｡"

msgid ""
"After those, if you're still hungry for more information about contributing, "
"you can always browse through the rest of :doc:`Django's documentation on "
"contributing</internals/contributing/index>`. It contains a ton of useful "
"information and should be your first source for answering any questions you "
"might have."
msgstr ""
"貢献について､より多くの情報を知りたいなら､ :doc:`貢献についての Django のド"
"キュメント </internals/contributing/index>` を参照してください｡そこにはたくさ"
"ん有用な情報がありまし､質問があれば､このドキュメントが1番役に立ちます｡"

msgid "Finding your first real ticket"
msgstr "実際にチケットを探してみましょう"

msgid ""
"Once you've looked through some of that information, you'll be ready to go "
"out and find a ticket of your own to write a patch for. Pay special "
"attention to tickets with the \"easy pickings\" criterion. These tickets are "
"often much simpler in nature and are great for first time contributors. Once "
"you're familiar with contributing to Django, you can move on to writing "
"patches for more difficult and complicated tickets."
msgstr ""
"ドキュメントをたくさん読んだ後は､実際のパッチを書けるのでチケットを探してみま"
"しょう｡ \"easy picking\" タグが付いたチケットを見つけてください｡このチケット"
"は大抵はより簡単なものなので､初めての貢献者には適切でしょう｡ Django への貢献"
"に慣れてきたあとは､難しく､複雑なチケットを書き始めれるでしょう｡"

msgid ""
"If you just want to get started already (and nobody would blame you!), try "
"taking a look at the list of `easy tickets that need patches`__ and the "
"`easy tickets that have patches which need improvement`__. If you're "
"familiar with writing tests, you can also look at the list of `easy tickets "
"that need tests`__. Just remember to follow the guidelines about claiming "
"tickets that were mentioned in the link to Django's documentation on :doc:"
"`claiming tickets and submitting patches </internals/contributing/writing-"
"code/submitting-patches>`."
msgstr ""
"今すぐ始めたいなら (責める人はいません！)、　`パッチが必要な簡単なチケット"
"`__ か `パッチに改善が必要な簡単なチケット`__ を見つけましょう。テストを書き"
"なれているなら `テストが必要な簡単なチケット`__ でもよいでしょう。ただ、チ"
"ケットのクレームに関するガイドラインに従ってください。 Django ドキュメント"
"の :doc:`チケットをクレームしてパッチを送る </internals/contributing/writing-"
"code/submitting-patches>` で記述されています。"

msgid "What's next after creating a pull request?"
msgstr "プルリクエストを作ったあとは？"

msgid ""
"After a ticket has a patch, it needs to be reviewed by a second set of eyes. "
"After submitting a pull request, update the ticket metadata by setting the "
"flags on the ticket to say \"has patch\", \"doesn't need tests\", etc, so "
"others can find it for review. Contributing doesn't necessarily always mean "
"writing a patch from scratch. Reviewing existing patches is also a very "
"helpful contribution. See :doc:`/internals/contributing/triaging-tickets` "
"for details."
msgstr ""
"チケットに対してパッチを作ったら、他の人によるレビューが必要です。プルリクエ"
"ストを送った後は、チケットのメタデータを \"has patch\"、\"doesn't need tests"
"\" などのフラグを付けてアップデートして、他の人にレビューが必要だと分かるよう"
"にしてください。プロジェクトへの貢献は、必ずしもパッチを書くことだけではあり"
"ません。すでに書かれたパッチをレビューのレビューもとても助かります。詳しく"
"は  :doc:`/internals/contributing/triaging-tickets` を見てください。"

msgid "Getting started"
msgstr "さぁ始めましょう。"

msgid ""
"New to Django? Or to Web development in general? Well, you came to the right "
"place: read this material to quickly get up and running."
msgstr ""
"Django は初めてですか? もしくは Web 開発全般で? なら、ここに来て正解ですね。"
"ここにあるドキュメントを読んで、行動に移してみましょう。"

msgid ""
"If you're new to Python_, you might want to start by getting an idea of what "
"the language is like. Django is 100% Python, so if you've got minimal "
"comfort with Python you'll probably get a lot more out of Django."
msgstr ""
"Python_ の初心者なら、まず Python がどんなものかを知ることから始めましょう。 "
"Django は 100% Python です。 ほんの最小限 Python を理解するだけで Django をよ"
"り深く理解できます。"

msgid ""
"If you're new to programming entirely, you might want to start with this "
"`list of Python resources for non-programmers`_"
msgstr ""
"プログラミング全般の初心者なら、 `非プログラマのための Python リソース一覧`_ "
"から始めてみるとよいでしょう。"

msgid ""
"If you already know a few other languages and want to get up to speed with "
"Python quickly, we recommend `Dive Into Python`_. If that's not quite your "
"style, there are many other `books about Python`_."
msgstr ""
"すでに幾つかの他の言語を知っていて、Python についての情報を素早く取得したい場"
"合は、`Dive Into Python`_ をお勧めします。もしこれがあなたに合っていない場合"
"は、多くの `Python についての本` があります。"

msgid "Quick install guide"
msgstr "クイックインストールガイド"

msgid ""
"Before you can use Django, you'll need to get it installed. We have a :doc:"
"`complete installation guide </topics/install>` that covers all the "
"possibilities; this guide will guide you to a simple, minimal installation "
"that'll work while you walk through the introduction."
msgstr ""
"Django を使う前に、インストールをする必要があります。 Django にはできることを"
"すべてカバーした :doc:`インストールガイド </topics/install>` があります。これ"
"はシンプルでミニマルなインストールガイドで、 Django の導入部分までが説明され"
"ています。"

msgid "Install Python"
msgstr "Python をインストールする"

msgid ""
"Being a Python Web framework, Django requires Python. See :ref:`faq-python-"
"version-support` for details. Python includes a lightweight database called "
"SQLite_ so you won't need to set up a database just yet."
msgstr ""
"Python の W​​eb フレームワークなので、DjangoはPythonを必要になります。詳細につ"
"いては、:ref:`faq-python-version-support` を見てください。 Python には "
"SQLite_ という軽量のデータベースが含まれているので、データベースを設定する必"
"要はまだありません。"

msgid ""
"Get the latest version of Python at https://www.python.org/download/ or with "
"your operating system's package manager."
msgstr ""
"https://www.python.org/download/ または、OS のパッケージマネージャで Python "
"の最新バージョンを入手してください。"

msgid "Django on Jython"
msgstr "Django on Jython"

msgid ""
"If you use Jython_ (a Python implementation for the Java platform), you'll "
"need to follow a few additional steps. See :doc:`/howto/jython` for details."
msgstr ""
"もし Jython_ (Python のJava プラットフォーム実装) を使っている場合は、いくつ"
"か追加のステップを実行する必要があります。詳細は :doc:`/howto/jython` を見て"
"ください。"

msgid ""
"You can verify that Python is installed by typing ``python`` from your "
"shell; you should see something like::"
msgstr ""
"Python がインストールされてるかを確かめるには ``python`` とシェルでタイプしま"
"す。このように表示されるはずです::"

msgid "Set up a database"
msgstr "データベースを設定する"

msgid ""
"This step is only necessary if you'd like to work with a \"large\" database "
"engine like PostgreSQL, MySQL, or Oracle. To install such a database, "
"consult the :ref:`database installation information <database-installation>`."
msgstr ""
"このステップはあなたが \"大きな\" データベースエンジン、 PostgreSQL 、 MySQL "
"や Oracle を使っている場合に必要です。これらのデータベースをインストールする"
"には、 :ref:`データベースのインストール方法 <database-installation>` を参照し"
"てください。"

msgid "Remove any old versions of Django"
msgstr "古いバージョンの Django を削除する"

msgid ""
"If you are upgrading your installation of Django from a previous version, "
"you will need to :ref:`uninstall the old Django version before installing "
"the new version <removing-old-versions-of-django>`."
msgstr ""
"前バージョンの Django をアップグレードするには、 :ref:`新しい Django をインス"
"トールする前に、古いバージョンの Django をアンインストールする <removing-old-"
"versions-of-django>` 必要があります。"

msgid "Install Django"
msgstr "Django をインストールする"

msgid "You've got three easy options to install Django:"
msgstr "Django をインストールするには 3 つの方法があります:"

msgid ""
":ref:`Install an official release <installing-official-release>`. This is "
"the best approach for most users."
msgstr ""
":ref:`オフィシャルリリースをインストールする <installing-official-"
"release>` 。これは多くのユーザで良い方法です。"

msgid ""
"Install a version of Django :ref:`provided by your operating system "
"distribution <installing-distribution-package>`."
msgstr ""
":ref:`オペレーティングシステムのディストリビューションで提供されている "
"<installing-distribution-package>` バージョンの Django をインストールする。"

msgid ""
":ref:`Install the latest development version <installing-development-"
"version>`. This option is for enthusiasts who want the latest-and-greatest "
"features and aren't afraid of running brand new code. You might encounter "
"new bugs in the development version, but reporting them helps the "
"development of Django. Also, releases of third-party packages are less "
"likely to be compatible with the development version than with the latest "
"stable release."
msgstr ""
":ref:`最新の開発版のインストール <installing-development-version>`。この選択"
"肢は、最新の素晴らしい機能を利用し、書き立てのコードを実行することに抵抗のな"
"い人のためのものです。開発版で新しいバグに遭遇したとき、それらを報告すること"
"で Django の開発に役立つ可能性があります。また、サードパーティ製のパッケージ"
"は最新の安定版と比べて開発版と互換性がある可能性は低いです。"

msgid ""
"Always refer to the documentation that corresponds to the version of Django "
"you're using!"
msgstr ""
"常に使用している Django のバージョンに対応するマニュアルを参照してください!"

msgid ""
"If you do either of the first two steps, keep an eye out for parts of the "
"documentation marked **new in development version**. That phrase flags "
"features that are only available in development versions of Django, and they "
"likely won't work with an official release."
msgstr ""
"初め 2 ステップのどちらかをした場合は、ドキュメントの **new in development "
"version** とマークされた部分に気をつけてください。このフレーズは Django の開"
"発版でのみ利用可能な機能であると意味しており、公式リリースではおそらく動作し"
"ません。"

msgid "Verifying"
msgstr "動作確認"

msgid ""
"To verify that Django can be seen by Python, type ``python`` from your "
"shell. Then at the Python prompt, try to import Django:"
msgstr ""
"Django が Python から見れるか確認をするには、シェルで ``python`` とタイプし"
"て、 Python プロンプトから Django をインポートします:"

msgid "You may have another version of Django installed."
msgstr "別バージョンの Django がインストールされてるかもしれません。"

msgid "That's it!"
msgstr "これだけです!"

msgid ""
"That's it -- you can now :doc:`move onto the tutorial </intro/tutorial01>`."
msgstr ""
"これだけです。 :doc:`チュートリアルに進みましょう </intro/tutorial01>` 。"

msgid "Django at a glance"
msgstr "Django の概要"

msgid ""
"Because Django was developed in a fast-paced newsroom environment, it was "
"designed to make common Web-development tasks fast and easy. Here's an "
"informal overview of how to write a database-driven Web app with Django."
msgstr ""
"Django は変転の激しいニュースルーム環境で開発された経緯から、よくある Web 開"
"発タスクを迅速かつ簡単化するように設計されました。ここでは Django による デー"
"タベース中心の Web アプリケーション開発をざっと見てみましょう。"

msgid ""
"The goal of this document is to give you enough technical specifics to "
"understand how Django works, but this isn't intended to be a tutorial or "
"reference -- but we've got both! When you're ready to start a project, you "
"can :doc:`start with the tutorial </intro/tutorial01>` or :doc:`dive right "
"into more detailed documentation </topics/index>`."
msgstr ""
"このドキュメントの目的は、 Django の技術的な仕様について述べ、どのように動 作"
"するかを理解してもらうことにあり、チュートリアルやリファレンス用ではあり ませ"
"ん。 (とはいえ、チュートリアルもリファレンスも別に用意していますよ！) プロ"
"ジェクトを作成する準備ができたら、 :doc:`チュートリアルを始めれます </intro/"
"tutorial01>` 。もしくは :doc:`より詳細なドキュメントを読む </topics/index>` "
"こともできます。"

msgid "Design your model"
msgstr "モデルの設計"

msgid ""
"Although you can use Django without a database, it comes with an `object-"
"relational mapper`_ in which you describe your database layout in Python "
"code."
msgstr ""
"データベースなしで Django を使うこともできますが、 Django には Python コード"
"でデータベースのレイアウトを記述した `オブジェクトリレーショナルマッパー`_ "
"(object-relational mapper) が付属しています。"

msgid ""
"The :doc:`data-model syntax </topics/db/models>` offers many rich ways of "
"representing your models -- so far, it's been solving many years' worth of "
"database-schema problems. Here's a quick example:"
msgstr ""
":doc:`データモデル構文 </topics/db/models>` ではモデルを表現するさまざまな方"
"法が提供されています。これまでのところ、長年におけるデータベーススキーマの問"
"題を解決してきた実績があります。 簡単な例を示しましょう:"

msgid "Install it"
msgstr "モデルのインストール"

msgid ""
"Next, run the Django command-line utility to create the database tables "
"automatically:"
msgstr ""
"次に、データベーステーブルを自動でつくる Django のコマンドラインユーティリ"
"ティを実行します:"

msgid ""
"The :djadmin:`migrate` command looks at all your available models and "
"creates tables in your database for whichever tables don't already exist, as "
"well as optionally providing :doc:`much richer schema control </topics/"
"migrations>`."
msgstr ""
":djadmin:`migrate`  コマンドは利用できるモデルを探し出し、テーブルが既に存在"
"していない場合にはデータベースにテーブルを作成し、必要に応じて :doc:`より強力"
"なスキーマの制御 </topics/migrations>` を提供します。"

msgid "Enjoy the free API"
msgstr "自動生成される API で楽しむ"

msgid ""
"With that, you've got a free, and rich, :doc:`Python API </topics/db/"
"queries>` to access your data. The API is created on the fly, no code "
"generation necessary:"
msgstr ""
"これだけで、制約のない充実した :doc:`Python API </topics/db/queries>` を使っ "
"て自分のデータにアクセスできます。API はオンザフライで生成され、コードを作 成"
"する必要はありません:"

msgid ""
"A dynamic admin interface: it's not just scaffolding -- it's the whole house"
msgstr ""
"作業場 (scaffold) ではなく完成品 (whole house) の、動的な admin インタフェー"
"ス"

msgid ""
"Once your models are defined, Django can automatically create a "
"professional, production ready :doc:`administrative interface </ref/contrib/"
"admin/index>` -- a website that lets authenticated users add, change and "
"delete objects. It's as easy as registering your model in the admin site:"
msgstr ""
"モデルを定義したら、 Django は玄人向きの実運用に耐える :doc:`管理インタ"
"フェー ス </ref/contrib/admin/index>` を自動的に生成します。 このインタフェー"
"スは、認証をパスしたユーザがオブジェクトを追加、変更、削除できる Web サイトで"
"す。管理インタフェースの作成は簡単で、モデルクラスを admin サイトに追加するだ"
"けです:"

msgid ""
"The philosophy here is that your site is edited by a staff, or a client, or "
"maybe just you -- and you don't want to have to deal with creating backend "
"interfaces just to manage content."
msgstr ""
"サイトの編集はスタッフ、顧客、もしくはあなた自身の手で行われるものであり、 コ"
"ンテンツの管理だけのためにバックエンドインタフェースを作りたくはない、という"
"思想がここにはあります。"

msgid ""
"One typical workflow in creating Django apps is to create models and get the "
"admin sites up and running as fast as possible, so your staff (or clients) "
"can start populating data. Then, develop the way data is presented to the "
"public."
msgstr ""
"作者たちが Django アプリケーションを作成するときの典型的なワークフローは、 モ"
"デルを作成し、 admin サイトを組み上げてできるだけ早期に立ち上げ、スタッフ (や"
"顧客) がデータを投入できるようにしておいてから、データを公開するための方法を"
"開発してゆくというものです。"

msgid "Design your URLs"
msgstr "URL を設計する"

msgid ""
"A clean, elegant URL scheme is an important detail in a high-quality Web "
"application. Django encourages beautiful URL design and doesn't put any "
"cruft in URLs, like ``.php`` or ``.asp``."
msgstr ""
"すっきりとして洗練された URL スキームは、高品質な Web アプリケーションを実 現"
"する上で重要な要素です。 Django は美しい URL の設計を助け、 ``.php`` や ``."
"asp`` のようなお粗末なゴミを URL に入れさせません。"

msgid ""
"To design URLs for an app, you create a Python module called a :doc:`URLconf "
"</topics/http/urls>`. A table of contents for your app, it contains a simple "
"mapping between URL patterns and Python callback functions. URLconfs also "
"serve to decouple URLs from Python code."
msgstr ""
"特定のアプリケーション用の URL を設計するには、:doc:`URLconf </topics/http/"
"urls>` と呼ばれる Python モジュールを一つ作成します。 URLconf はいわばアプリ"
"ケーションの目次にあたり、 URL のパターンを Python のコールバック関数に対応づ"
"けています。 URLconf はまた、 URL と Python コードを脱カップリングする働きも"
"持っています。"

msgid ""
"Here's what a URLconf might look like for the ``Reporter``/``Article`` "
"example above:"
msgstr "``Reporter``/``Article`` の例では、 URLconf は以下のようになります:"

msgid ""
"The code above maps URLs, as simple :ref:`regular expressions <regex-"
"howto>`, to the location of Python callback functions (\"views\"). The "
"regular expressions use parenthesis to \"capture\" values from the URLs. "
"When a user requests a page, Django runs through each pattern, in order, and "
"stops at the first one that matches the requested URL. (If none of them "
"matches, Django calls a special-case 404 view.) This is blazingly fast, "
"because the regular expressions are compiled at load time."
msgstr ""
"上のコードはシンプルな:ref:`正規表現 <regex-howto>`と Python のコールバック関"
"数(\"ビュー\")をマッピングしています。正規表現は、 URL から値を取得するために"
"括弧を用います。ユーザがページを要求すると、 Django はそれぞれのパターンを順"
"番にチェックし、要求された URL に最初に一致したパターンで停止します。(もしそ"
"れらのどれとも一致しなかった時、 Django は特殊ケースである404ビューを呼び出し"
"ます。)正規表現はロード時にコンパイルされるため、これらは非常に高速に動作しま"
"す。"

msgid ""
"Once one of the regexes matches, Django imports and calls the given view, "
"which is a simple Python function. Each view gets passed a request object -- "
"which contains request metadata -- and the values captured in the regex."
msgstr ""
"一度正規表現が一致すると、 Django は Python の関数であるビュー (view) をイン"
"ポートし呼び出します。各ビューは、リクエストのメタデータを含むリクエストオブ"
"ジェクトと、正規表現でキャプチャされた値を受け取ります。"

msgid ""
"For example, if a user requested the URL \"/articles/2005/05/39323/\", "
"Django would call the function ``news.views.article_detail(request, '2005', "
"'05', '39323')``."
msgstr ""
"例えば、ユーザが \"/articles/2005/05/39323/\" という URL をリクエストする"
"と、 Django は ``news.views.article_detail(request, '2005', '05', '39323')`` "
"のような関数呼び出しを行います。"

msgid "Write your views"
msgstr "ビューの自作"

msgid ""
"Each view is responsible for doing one of two things: Returning an :class:"
"`~django.http.HttpResponse` object containing the content for the requested "
"page, or raising an exception such as :class:`~django.http.Http404`. The "
"rest is up to you."
msgstr ""
"各ビュー (view) には二つの役割があります: 一つはリクエストされたページのコ ン"
"テンツを含む :class:`~django.http.HttpResponse` オブジェクトを返すこと、もう"
"一つは :class:`~django.http.Http404` のような例外の送出です。それ以外の処理は"
"ユーザ次第です。"

msgid ""
"Generally, a view retrieves data according to the parameters, loads a "
"template and renders the template with the retrieved data. Here's an example "
"view for ``year_archive`` from above:"
msgstr ""
"一般的に、ビューはパラメーターに従ってデータベースからデータを取り出し、テン"
"プレートをロードして、取り出したデータでテンプレートをレンダリングします。 上"
"の ``year_archive`` のビューを例に示しましょう:"

msgid ""
"This example uses Django's :doc:`template system </topics/templates>`, which "
"has several powerful features but strives to stay simple enough for non-"
"programmers to use."
msgstr ""
"この例では Django の :doc:`テンプレートシステム </topics/templates>` を使っ "
"ています。テンプレートシステムは、強力な機能をいくつも備えながらも、非プロ グ"
"ラマが使いこなせる程度に簡単な仕組みです。"

msgid "Design your templates"
msgstr "テンプレートを設計する"

msgid "The code above loads the ``news/year_archive.html`` template."
msgstr ""
"上のコードでは ``news/article_detail.html`` という名前のテンプレートをロー ド"
"しています。"

msgid ""
"Django has a template search path, which allows you to minimize redundancy "
"among templates. In your Django settings, you specify a list of directories "
"to check for templates with :setting:`DIRS <TEMPLATES-DIRS>`. If a template "
"doesn't exist in the first directory, it checks the second, and so on."
msgstr ""
"Django はテンプレートの重複を最小限にする為に、テンプレートの検索パスを持って"
"います。Djangoの設定ファイルの中で、テンプレートをチェックする :setting:"
"`DIRS <TEMPLATES-DIRS>` にディレクトリのリストを指定します。最初のディレクト"
"リにテンプレートが存在しかった場合、2番目をチェックし、以降も同様にチェックが"
"続きます。"

msgid ""
"Let's say the ``news/year_archive.html`` template was found. Here's what "
"that might look like:"
msgstr ""
"さて、 ``news/year_archive.html`` が見つかったとしましょう。テンプレートは以"
"下のように書かれています:"

msgid ""
"Variables are surrounded by double-curly braces. ``{{ article.headline }}`` "
"means \"Output the value of the article's headline attribute.\" But dots "
"aren't used only for attribute lookup. They also can do dictionary-key "
"lookup, index lookup and function calls."
msgstr ""
"変数は二重の波括弧で囲まれています。 ``{{ article.headline }}`` は、"
"「article の headline という属性の出力」を表しています。とはいえ、ドット表記"
"は属性の検索に使われるだけではありません。辞書の検索や、インデクス指定、関数"
"呼び出しも行えます。"

msgid ""
"Note ``{{ article.pub_date|date:\"F j, Y\" }}`` uses a Unix-style \"pipe"
"\" (the \"|\" character). This is called a template filter, and it's a way "
"to filter the value of a variable. In this case, the date filter formats a "
"Python datetime object in the given format (as found in PHP's date function)."
msgstr ""
"``{{ article.pub_date|date:\"F j, Y\" }}`` で、 Unix スタイルの「パイプ」 (文"
"字 “|”) を使っていることに注意して下さい。これはテンプレートフィルターと呼ば"
"れ、変数の値にフィルターをかけるためのものです。この例では、フィルタによって "
"Python の datetime オブジェクトを指定の形式にフォーマットしています (PHP の "
"date 関数に似ていますね) 。"

msgid ""
"You can chain together as many filters as you'd like. You can write :ref:"
"`custom template filters <howto-writing-custom-template-filters>`. You can "
"write :doc:`custom template tags </howto/custom-template-tags>`, which run "
"custom Python code behind the scenes."
msgstr ""
"フィルターはいくつでも好きなだけ繋げることが出来ます。また、独自の Python "
"コードを実行する :ref:`カスタムテンプレートフィルタ <howto-writing-custom-"
"template-filters>` や :doc:`カスタムテンプレートタグ</howto/custom-template-"
"tags>` を書くことも出来ます。"

msgid ""
"Finally, Django uses the concept of \"template inheritance\". That's what "
"the ``{% extends \"base.html\" %}`` does. It means \"First load the template "
"called 'base', which has defined a bunch of blocks, and fill the blocks with "
"the following blocks.\" In short, that lets you dramatically cut down on "
"redundancy in templates: each template has to define only what's unique to "
"that template."
msgstr ""
"最後に、 Django にはテンプレートの継承という概念があります。 継承を宣言してい"
"るのは ``{% extends \"base.html\" %}`` の部分です。このタグは「まず ‘base’ と"
"いうテンプレートをロードせよ。このテンプレートにはいくつかのブロックが定義さ"
"れているが、それらのブロックの中身を以下のブロック定義で埋めよ」という命令で"
"す。要するに、テンプレートを継承すると、各テンプレートごとに固有の定義だけを"
"記述すればよくなり、テンプレート間の冗長性が劇的に減るのです。"

msgid ""
"Here's what the \"base.html\" template, including the use of :doc:`static "
"files </howto/static-files/index>`, might look like:"
msgstr ""
"ここでよくある“base.html” テンプレートで、 :doc:`静的ファイルの配信 </howto/"
"static-files/index>` を含む例をあげます:"

msgid ""
"Simplistically, it defines the look-and-feel of the site (with the site's "
"logo), and provides \"holes\" for child templates to fill. This makes a site "
"redesign as easy as changing a single file -- the base template."
msgstr ""
"このテンプレートはサイトのルック & フィール (とサイトのロゴ) を定義するだけ "
"にまで、極度に単純化されています。また、子テンプレートで埋めるための「穴」 を"
"提供しています。これによって、ベーステンプレート一つを変更するだけでサイ ト全"
"体のデザインを簡単に変更できます。"

msgid ""
"It also lets you create multiple versions of a site, with different base "
"templates, while reusing child templates. Django's creators have used this "
"technique to create strikingly different mobile versions of sites -- simply "
"by creating a new base template."
msgstr ""
"また、子テンプレートを変えずにベーステンプレートだけを変えた複数バージョン の"
"サイトも作成できます。 Django の作者たちはこのテクニックを使い、新しいテンプ"
"レートを作成するだけでモバイル向けのまったく見栄えの違うサイトを作成してきま"
"した。"

msgid ""
"Note that you don't have to use Django's template system if you prefer "
"another system. While Django's template system is particularly well-"
"integrated with Django's model layer, nothing forces you to use it. For that "
"matter, you don't have to use Django's database API, either. You can use "
"another database abstraction layer, you can read XML files, you can read "
"files off disk, or anything you want. Each piece of Django -- models, views, "
"templates -- is decoupled from the next."
msgstr ""
"他のシステムを使いたければ、必ずしも Django のテンプレートシステムを使う必 要"
"はないということに注意してください。 Django のテンプレートシステムは Django "
"のモデルレイヤと部分的にしっかり組み合わさっていますが、絶対に使わねばならな"
"いということではありません。さらに言えば、 Django のデータベース API を使う必"
"然性もありません。別のデータベース抽象化レイヤを使っても構いま せんし、 XML "
"ファイルやディスク上のファイルを読み込んでも構いません。何でもやりたいことを"
"できるのです。Django の構成要素 – モデル、ビュー、テンプレー ト – は、互いに"
"切り離して利用できるのです。"

msgid "This is just the surface"
msgstr "これらはほんの一部にすぎません"

msgid ""
"This has been only a quick overview of Django's functionality. Some more "
"useful features:"
msgstr ""
"以上、 Django の機能についてざっと紹介してきました。 Django は他にもまだま だ"
"便利な機能を備えています:"

msgid ""
"A :doc:`caching framework </topics/cache>` that integrates with memcached or "
"other backends."
msgstr ""
"memcached などのバックエンドを組み込んだ  :doc:`キャッシュフレームワーク </"
"topics/cache>` 。"

msgid ""
"A :doc:`syndication framework </ref/contrib/syndication>` that makes "
"creating RSS and Atom feeds as easy as writing a small Python class."
msgstr ""
"小さな Python クラスを書くだけで簡単に RSS や Atom フィードを生成できる :doc:"
"`配信フィードフレームワーク </ref/contrib/syndication>` 。"

msgid ""
"More sexy automatically-generated admin features -- this overview barely "
"scratched the surface."
msgstr ""
"自動生成される admin のセクシーな機能の数々。ここで紹介したのはほんの表層の一"
"部でしかありません。"

msgid ""
"The next obvious steps are for you to `download Django`_, read :doc:`the "
"tutorial </intro/tutorial01>` and join `the community`_. Thanks for your "
"interest!"
msgstr ""
"次は、あなたが `Django をダウンロード`_ して、 :doc:`チュートリアル </intro/"
"tutorial01>` を読み、 `コミュニティ`_ に参加する番です。ご精読ありがとうござ"
"いました!"

msgid "Advanced tutorial: How to write reusable apps"
msgstr "高度なチュートリアル: 再利用可能アプリの書き方"

msgid ""
"This advanced tutorial begins where :doc:`Tutorial 7 </intro/tutorial07>` "
"left off. We'll be turning our Web-poll into a standalone Python package you "
"can reuse in new projects and share with other people."
msgstr ""
"この高度なチュートリアルは、 :doc:`Tutorial 7 </intro/tutorial07>` が終わった"
"ところから始まります。Web-poll を、新しいプロジェクトで再利用でき、他の人に共"
"有できる独立した Python のパッケージへと変えていきましょう。"

msgid ""
"If you haven't recently completed Tutorials 1–7, we encourage you to review "
"these so that your example project matches the one described below."
msgstr ""
"直近のチュートリアル 1 - 7 が終わっていないなら、一目通すことをおすすめしま"
"す。例で作ったプロジェクトが以下の説明でも使われるからです。"

msgid "Reusability matters"
msgstr "再利用性の問題"

msgid ""
"It's a lot of work to design, build, test and maintain a web application. "
"Many Python and Django projects share common problems. Wouldn't it be great "
"if we could save some of this repeated work?"
msgstr ""
"Web アプリケーションの設計、開発、テスト、そしてメンテナンスには多大な労力が"
"必要です。そして多くの Python 、 Django プロジェクト は共通の問題を抱えていま"
"す。この繰り返し作業を一部保存して保存しておければ良いと思いませんか？"

msgid ""
"Reusability is the way of life in Python. `The Python Package Index (PyPI) "
"<https://pypi.python.org/pypi>`_ has a vast range of packages you can use in "
"your own Python programs. Check out `Django Packages <https://www."
"djangopackages.com>`_ for existing reusable apps you could incorporate in "
"your project. Django itself is also just a Python package. This means that "
"you can take existing Python packages or Django apps and compose them into "
"your own web project. You only need to write the parts that make your "
"project unique."
msgstr ""
"再利用は、 Python ではごく当たり前のことです。 `Python Package Index (PyPI) "
"<https://pypi.python.org/pypi>`_ には様々なパッケージが登録されており、それら"
"はすべてあなたの Python プログラム上で使えます。 `Django Packages <https://"
"www.djangopackages.com>`_ にもプロジェクトに組み込める組み込める再利用可能な"
"アプリケーションがあるので見てみてください。 Django 自体も単なる Python パッ"
"ケージです。つまり既存の Python パッケージまたは Django アプリケーションを"
"使って、自分の Web プロジェクトを構成できるということです。必要なのはそのプロ"
"ジェクト独自の部品を書くことだけです。"

msgid ""
"Let's say you were starting a new project that needed a polls app like the "
"one we've been working on. How do you make this app reusable? Luckily, "
"you're well on the way already. In :doc:`Tutorial 3 </intro/tutorial03>`, we "
"saw how we could decouple polls from the project-level URLconf using an "
"``include``. In this tutorial, we'll take further steps to make the app easy "
"to use in new projects and ready to publish for others to install and use."
msgstr ""
"投票アプリケーションが必要なプロジェクトを開始したとしましょう。ちょうど今ま"
"で作ってきたものと似たようなものです。どうやってその\n"
"アプリケーションを再利用可能にしますか？運のいいことに、その方法はすでに会得"
"済みです。 :doc:`チュートリアル3 </intro/tutorial03>` では、プロジェクトレベ"
"ルの URLconf から ``include`` を使って、投票アプリを分離する方法をみました。"
"このチュートリアルではアプリケーションを新規のプロジェクトで使いやすいように"
"し、いつでも別の場所でインストール/利用できるようにしました。"

msgid "Package? App?"
msgstr "パッケージ？アプリ？"

msgid ""
"A Python :term:`package` provides a way of grouping related Python code for "
"easy reuse. A package contains one or more files of Python code (also known "
"as \"modules\")."
msgstr ""
"Python の :term:`package` は再利用しやすいように、関連する Python コードをま"
"とめる方法を提供しています。パッケージは Python コードのファイル ( 通称 \"モ"
"ジュール\" ) を１つ以上含んでいます。"

msgid ""
"A package can be imported with ``import foo.bar`` or ``from foo import "
"bar``. For a directory (like ``polls``) to form a package, it must contain a "
"special file ``__init__.py``, even if this file is empty."
msgstr ""
"パッケージは ``import foo.bar`` または ``from foo import bar`` でインポートで"
"きます。パッケージ内のディレクトリ (例えば ``polls``) は ``__init__.py`` とい"
"う特殊なファイルを、空のファイルでもいいので含む必要があります。"

msgid ""
"A Django *application* is just a Python package that is specifically "
"intended for use in a Django project. An application may use common Django "
"conventions, such as having ``models``, ``tests``, ``urls``, and ``views`` "
"submodules."
msgstr ""
"Django *アプリケーション* は単なる Python パッケージで、特に Django プロジェ"
"クトで使うよう意図されたものです。アプリは一般的な Django の慣例に則っている"
"でしょう。例えば ``models`` 、``tests``, ``urls`` や  ``views``  のサブモ"
"ジュールがあったりです。"

msgid ""
"Later on we use the term *packaging* to describe the process of making a "
"Python package easy for others to install. It can be a little confusing, we "
"know."
msgstr ""
"以降 *パッケージング* という言葉を、別の場所でインストールしやすいように "
"Python パッケージを作るプロセスを表すのに用います。少し混乱するかもしれません"
"ね。"

msgid "Your project and your reusable app"
msgstr "プロジェクトと再利用可能アプリ"

msgid "After the previous tutorials, our project should look like this::"
msgstr ""
"前のチュートリアルを終えると、プロジェクトはこのようになっていたはずです::"

msgid ""
"You created ``mysite/templates`` in :doc:`Tutorial 7 </intro/tutorial07>`, "
"and ``polls/templates`` in :doc:`Tutorial 3 </intro/tutorial03>`. Now "
"perhaps it is clearer why we chose to have separate template directories for "
"the project and application: everything that is part of the polls "
"application is in ``polls``. It makes the application self-contained and "
"easier to drop into a new project."
msgstr ""
"すでに ``mysite/templates`` を :doc:`チュートリアル 7 </intro/tutorial07>` "
"で、 ``polls/templates`` を :doc:`チュートリアル 3 </intro/tutorial03>` で作"
"成しました。今になるとなぜテンプレートディレクトリをプロジェクトとアプリケー"
"ションに分けたかが明確にわかりますね。投票アプリケーションに関する全ては "
"``polls`` にあります。アプリケーションが自己完結していて、新規のプロジェクト"
"にも導入しやすくなっています。"

msgid ""
"The ``polls`` directory could now be copied into a new Django project and "
"immediately reused. It's not quite ready to be published though. For that, "
"we need to package the app to make it easy for others to install."
msgstr ""
"今、 ``polls`` ディレクトリは新規の Django プロジェクトにコピーでき、すぐに再"
"利用できる状態です。しかし公開するための準備が完璧というわけではありません。"
"そのために、アプリをパッケージにして別の場所でインストールしやすいようにする"
"必要があります。"

msgid "Installing some prerequisites"
msgstr "事前に必要な物をインストールする"

msgid ""
"The current state of Python packaging is a bit muddled with various tools. "
"For this tutorial, we're going to use setuptools_ to build our package. It's "
"the recommended packaging tool (merged with the ``distribute`` fork). We'll "
"also be using `pip`_ to install and uninstall it. You should install these "
"two packages now. If you need help, you can refer to :ref:`how to install "
"Django with pip<installing-official-release>`. You can install "
"``setuptools`` the same way."
msgstr ""
"Python のパッケージングの現状は、複数のツールがあることで少しややこしいです。"
"このチュートリアルでは setuptools_ をパッケージに使用します。これはおすすめの"
"パッケージングツールです( forkされていた ``distribute`` はマージされました)。"
"終わった後にアンインストールするために `pip`_ も使います。今はこの 2 つのパッ"
"ケージをインストールしておいてください。分からなければ :ref:`Django をpip で"
"インストールする <installing-official-release>`. を参照してください。 "
"``distribute`` も同じ方法でインストールできます。"

msgid "Packaging your app"
msgstr "アプリケーションをパッケージングする"

msgid ""
"Python *packaging* refers to preparing your app in a specific format that "
"can be easily installed and used. Django itself is packaged very much like "
"this. For a small app like polls, this process isn't too difficult."
msgstr ""
"Python の *パッケージング* は特定のフォーマットでアプリを作っておくことを指し"
"ます。このフォーマットは簡単にインストールして使えます。 Django 自体もこのよ"
"うにパッケージ化されています。投票アプリのような小さなものでは、このプロセス"
"はそれほど難しいものではありません。"

msgid ""
"First, create a parent directory for ``polls``, outside of your Django "
"project. Call this directory ``django-polls``."
msgstr ""
"はじめに、 ``polls`` の親ディレクトリを、 Django プロジェクトの外に作りましょ"
"う。 ``django-polls`` というディレクトリにします。"

msgid "Choosing a name for your app"
msgstr "アプリケーションの名前を選んでください"

msgid ""
"When choosing a name for your package, check resources like PyPI to avoid "
"naming conflicts with existing packages. It's often useful to prepend "
"``django-`` to your module name when creating a package to distribute. This "
"helps others looking for Django apps identify your app as Django specific."
msgstr ""
"パッケージの名前を決めるときま、 PyPI のようなリソースをチェックして、すでに"
"あるパッケージとの名前の衝突を避ける必要があります。 Django アプリケーション"
"のパッケージを作って配布する際には、モジュール名の先頭に ``django-`` を付ける"
"のがよいでしょう。これによって Django アプリを探してる人が、作ったアプリが "
"Django 特化のものであると分かりやすいからです。"

msgid ""
"Application labels (that is, the final part of the dotted path to "
"application packages) *must* be unique in :setting:`INSTALLED_APPS`. Avoid "
"using the same label as any of the Django :doc:`contrib packages </ref/"
"contrib/index>`, for example ``auth``, ``admin``, or ``messages``."
msgstr ""
"アプリケーションラベル (アプリケーションパッケージのドット分けされたパスの最"
"後の部分です)は :setting:`INSTALLED_APPS` の中で *必ず* ユニークでなければな"
"りません。 ``auth`` 、 ``admin`` や ``messages`` のようなDjango :doc:"
"`contrib packages </ref/contrib/index>` のどれとも同じラベルを使うことは避け"
"ます。"

msgid "Move the ``polls`` directory into the ``django-polls`` directory."
msgstr "``polls`` ディレクトリを ``django-polls`` ディレクトリに移動する"

msgid "Create a file ``django-polls/README.rst`` with the following contents:"
msgstr ""
"以下の内容の ``django-polls/README.rst`` という名前のファイルを作成します:"

msgid ""
"Create a ``django-polls/LICENSE`` file. Choosing a license is beyond the "
"scope of this tutorial, but suffice it to say that code released publicly "
"without a license is *useless*. Django and many Django-compatible apps are "
"distributed under the BSD license; however, you're free to pick your own "
"license. Just be aware that your licensing choice will affect who is able to "
"use your code."
msgstr ""
"``django-polls/LICENSE`` ファイルを作成します。ライセンスの選択はこのチュート"
"リアルの範疇を超えていますが、ライセンスなしで公にリリースされたコードは *役"
"立たず* であると言えば十分です。 Django と多くの Django 互換アプリケーション"
"はBSDライセンスの元に配布されます。でもどのライセンスを選択するかは自由です。"
"ライセンスの選択は、誰がコードを使え得るかに影響すると注意してください。"

msgid ""
"Next we'll create a ``setup.py`` file which provides details about how to "
"build and install the app.  A full explanation of this file is beyond the "
"scope of this tutorial, but the `setuptools docs <https://setuptools."
"readthedocs.io/en/latest/>`_ have a good explanation. Create a file ``django-"
"polls/setup.py`` with the following contents:"
msgstr ""
"次に ``setup.py`` ファイルを作りましょう。これはアプリケーションがどのように"
"ビルド、インストールされるかを提供するものです。このファイルの網羅的な説明は"
"このチュートリアルの範疇を超えていますが、 `setuptools docs <https://"
"setuptools.readthedocs.io/en/latest/>`_ には役立つ説明があります。以下のよう"
"に ``django-polls/setup.py`` ファイルを作ってみましょう:"

msgid ""
"Only Python modules and packages are included in the package by default. To "
"include additional files, we'll need to create a ``MANIFEST.in`` file. The "
"setuptools docs referred to in the previous step discuss this file in more "
"details. To include the templates, the ``README.rst`` and our ``LICENSE`` "
"file, create a file ``django-polls/MANIFEST.in`` with the following contents:"
msgstr ""
"デフォルトでは、パッケージには Python のモジュールとパッケージだけがまとめら"
"れます。追加のファイルを含めるには、``MANIFEST.in`` というファイルを作成する"
"必要があります。前のステップで挙げた setuptools のドキュメントには、このファ"
"イルについて詳しい説明があります。テンプレート、``README.rst``、および "
"``LICENSE`` をパッケージに含めるには、``django-polls/MANIFEST.in`` というファ"
"イルを作成し、その中に次のように書きます。"

msgid ""
"It's optional, but recommended, to include detailed documentation with your "
"app. Create an empty directory ``django-polls/docs`` for future "
"documentation. Add an additional line to ``django-polls/MANIFEST.in``::"
msgstr ""
"アプリケーションの詳細なドキュメントを含めるのは、任意ですが推奨されます。空"
"のディレクトリ ``django-polls/docs`` を将来のドキュメンテーションのために作っ"
"ておきましょう。 ``django-polls/MANAFEST.in`` に行を追加しておいてください::"

msgid ""
"Note that the ``docs`` directory won't be included in your package unless "
"you add some files to it. Many Django apps also provide their documentation "
"online through sites like `readthedocs.org <https://readthedocs.org>`_."
msgstr ""
"``MANIFEST.in`` に対象のファイルを追加しないと ``docs`` ディレクトリがパッ"
"ケージに含まれないことに注意してください。多くの Django アプリではドキュメン"
"トを `readthedocs.org <https://readthedocs.org>`_ のようなサイトを通して提供"
"しています。"

msgid ""
"Try building your package with ``python setup.py sdist`` (run from inside "
"``django-polls``). This creates a directory called ``dist`` and builds your "
"new package, ``django-polls-0.1.tar.gz``."
msgstr ""
"``python setup.py sdist`` でパッケージをビルドしてみましょう (``django-"
"polls`` 内で実行してください) 。これによって ``dist`` というディレクトリと、"
"新しいパッケージである ``django-polls-0.1.tar.gz`` が作られます。"

msgid ""
"For more information on packaging, see Python's `Tutorial on Packaging and "
"Distributing Projects <https://packaging.python.org/en/latest/distributing."
"html>`_."
msgstr ""
"パッケージングに関するより豊富な情報は `Tutorial on Packaging and "
"Distributing Projects <https://packaging.python.org/en/latest/distributing."
"html>`_. にあります。"

msgid "Using your own package"
msgstr "自分のパッケージを使ってみる"

msgid ""
"Since we moved the ``polls`` directory out of the project, it's no longer "
"working. We'll now fix this by installing our new ``django-polls`` package."
msgstr ""
"``polls`` ディレクトリはプロジェクト外に移動したので、これはもう必要ありませ"
"ん。代わりにできたての ``django-polls`` パッケージを使ってみましょう。"

msgid "Installing as a user library"
msgstr "ユーザーライブラリとしてインストールする"

msgid ""
"The following steps install ``django-polls`` as a user library. Per-user "
"installs have a lot of advantages over installing the package system-wide, "
"such as being usable on systems where you don't have administrator access as "
"well as preventing the package from affecting system services and other "
"users of the machine."
msgstr ""
"以下のステップは ``django-polls`` をユーザーライブラリとしてインストールする"
"ものです。ユーザー単位でのインストールはシステム全体でのインストールよりも多"
"くの利点があります。管理者アクセス権を持っていないシステム上で使用可能という"
"だけでなく、パッケージがシステムサービスやマシン上の他ユーザーに影響を与える"
"のを防げます。"

msgid ""
"Note that per-user installations can still affect the behavior of system "
"tools that run as that user, so ``virtualenv`` is a more robust solution "
"(see below)."
msgstr ""
"ユーザー単位でのインストールは依然、そのユーザーのシステムツールの振る舞いに"
"影響をあたえます。なので ``virtualenv`` はより確実な解決になります (下記を参"
"照してください) 。"

msgid ""
"To install the package, use pip (you already :ref:`installed it <installing-"
"reusable-apps-prerequisites>`, right?)::"
msgstr ""
"パッケージをインストールするためには、pip を利用してください (すでに ref:`イ"
"ンストール <installing-reusable-apps-prerequisites>` していますよね?)::\n"
"To install the package, use pip (you already :ref:`installed it <installing-"
"reusable-apps-prerequisites>`, right?)::"

msgid ""
"With luck, your Django project should now work correctly again. Run the "
"server again to confirm this."
msgstr ""
"運が良ければ Django プロジェクトは再度、正常に動作します。確認するために再び"
"サーバーを起動します。"

msgid "To uninstall the package, use pip::"
msgstr "パッケージをアンインストールするには pip を使います::"

msgid "Publishing your app"
msgstr "アプリを公開する"

msgid ""
"Now that we've packaged and tested ``django-polls``, it's ready to share "
"with the world! If this wasn't just an example, you could now:"
msgstr ""
"``django-polls`` のパッケージを作り、テストしました。世界に共有するときです！"
"これが単なる例でなければこうします::"

msgid "Email the package to a friend."
msgstr "パッケージを友人にメールで送る"

msgid "Upload the package on your website."
msgstr "自身の Web サイトにアップロードする"

msgid ""
"Post the package on a public repository, such as `the Python Package Index "
"(PyPI)`_. `packaging.python.org <https://packaging.python.org>`_ has `a good "
"tutorial <https://packaging.python.org/en/latest/distributing.html#uploading-"
"your-project-to-pypi>`_ for doing this."
msgstr ""
"公開されているリポジトリに投稿する。例えば `the Python Package Index "
"(PyPI)`_. `packaging.python.org <https://packaging.python.org>`_ には `よくで"
"きたチュートリアル <https://packaging.python.org/en/latest/distributing."
"html#uploading-your-project-to-pypi>`_ があります。"

msgid "Installing Python packages with virtualenv"
msgstr "virtualenv に Python パッケージをインストールする"

msgid ""
"Earlier, we installed the polls app as a user library. This has some "
"disadvantages:"
msgstr ""
"これまでは投票アプリをユーザーライブラリにインストールしてきました。これには"
"いくつか欠点があります:"

msgid ""
"Modifying the user libraries can affect other Python software on your system."
msgstr ""
"ユーザーライブラリの変更はシステム上の他の Python ソフトウェアに影響を与える"
"おそれがあります"

msgid ""
"You won't be able to run multiple versions of this package (or others with "
"the same name)."
msgstr ""
"このパッケージの複数バージョン (もしくは同じ名前の別のもの) を実行できません"

msgid ""
"Typically, these situations only arise once you're maintaining several "
"Django projects. When they do, the best solution is to use `virtualenv "
"<https://virtualenv.pypa.io/>`_. This tool allows you to maintain multiple "
"isolated Python environments, each with its own copy of the libraries and "
"package namespace."
msgstr ""
"通常このような問題が起こるのは、複数の Django プロジェクトを管理している場合"
"だけです。一番の解決方法は、 `virtualenv <https://virtualenv.pypa.io/>`_ を利"
"用することです。このツールを使えば、複数の孤立した Python 環境を作り、各環境"
"ごとにライブラリのコピーやパッケージの名前空間を管理することができます。"

msgid "Writing your first Django app, part 1"
msgstr "はじめての Django アプリ作成、その 1"

msgid "Let's learn by example."
msgstr "さあ、例を交えながら学んでゆきましょう。"

msgid ""
"Throughout this tutorial, we'll walk you through the creation of a basic "
"poll application."
msgstr ""
"このチュートリアルでは、簡単な投票 (poll) アプリケーションの作成に取り組ん で"
"もらいます。"

msgid "It'll consist of two parts:"
msgstr "Poll アプリケーションは 2 つの部分からなります:"

msgid "A public site that lets people view polls and vote in them."
msgstr "ユーザが投票したり結果を表示したりできる公開用サイト"

msgid "An admin site that lets you add, change, and delete polls."
msgstr "投票項目の追加、変更、削除を行うための管理 (admin) サイト"

msgid ""
"We'll assume you have :doc:`Django installed </intro/install>` already. You "
"can tell Django is installed and which version by running the following "
"command in a shell prompt (indicated by the $ prefix):"
msgstr ""
":doc:`Django は既にインストール済み </intro/install>` として説明を進めます。"
"Django がインストールされているかどうか、またどのバージョンがインストールされ"
"ているかを調べるには、以下のコマンドをシェルプロンプト（先頭の $ は入力待ちを"
"示す記号です）で実行します。"

msgid ""
"If Django is installed, you should see the version of your installation. If "
"it isn't, you'll get an error telling \"No module named django\"."
msgstr ""
"Django がインストールされていれば、インストールされている Django のバージョン"
"がわかります。もしなければ \"No module named django\" とエラーが表示されま"
"す。"

msgid ""
"This tutorial is written for Django |version| and Python 3.4 or later. If "
"the Django version doesn't match, you can refer to the tutorial for your "
"version of Django by using the version switcher at the bottom right corner "
"of this page, or update Django to the newest version. If you are still using "
"Python 2.7, you will need to adjust the code samples slightly, as described "
"in comments."
msgstr ""
"このチュートリアルは Django |version| と Python 3.4 以降を対象に書かれていま"
"す。 Django のバージョンが合わなければ、このページの右下のバージョンスイッ"
"チャーを使用して、インストールされている Django のバージョンのチュートリアル"
"を参照するか、最新の Django にアップデートしてください。 Python 2.7 を使用し"
"ている場合は、コメントで説明されているように、サンプルコードを調整する必要が"
"あります。"

msgid ""
"See :doc:`How to install Django </topics/install>` for advice on how to "
"remove older versions of Django and install a newer one."
msgstr ""
":doc:`Django のインストール方法 </topics/install>` を見て、 Django の旧バー"
"ジョンを削除してより新しいものをインストールしてください。"

msgid ""
"If you're having trouble going through this tutorial, please post a message "
"to |django-users| or drop by `#django on irc.freenode.net <irc://irc."
"freenode.net/django>`_ to chat with other Django users who might be able to "
"help."
msgstr ""
"このチュートリアルを進めてゆく上で困ったことがあったら、 |django-users| もし"
"くは `irc.freenode.net の #django チャンネル <irc://irc.freenode.net/"
"django>`_  で誰か助けてくれそうな Django ユーザと話してみてください。"

msgid "Creating a project"
msgstr "プロジェクトを作成する"

msgid ""
"If this is your first time using Django, you'll have to take care of some "
"initial setup. Namely, you'll need to auto-generate some code that "
"establishes a Django :term:`project` -- a collection of settings for an "
"instance of Django, including database configuration, Django-specific "
"options and application-specific settings."
msgstr ""
"初めて Django を使うのなら、最初のセットアップを行う必要があります。通常は、 "
"Django の :term:`プロジェクト` (:term:`project`) を構成するコードを自動生成し"
"ます。プロジェクトとは、データベースの設定や Django 固有のオプション、アプリ"
"ケーション固有の設定などといった、個々の Django インスタンスの設定を集めたも"
"のです。"

msgid ""
"From the command line, ``cd`` into a directory where you'd like to store "
"your code, then run the following command:"
msgstr ""
"コマンドラインから、コードを置きたい場所に ``cd`` して、以下のコマンドを 実行"
"してください。"

msgid ""
"This will create a ``mysite`` directory in your current directory. If it "
"didn't work, see :ref:`troubleshooting-django-admin`."
msgstr ""
"現在のディレクトリに ``mysite`` ディレクトリが作成されます。動作しなければ :"
"ref:`troubleshooting-django-admin` を参照してください。"

msgid ""
"You'll need to avoid naming projects after built-in Python or Django "
"components. In particular, this means you should avoid using names like "
"``django`` (which will conflict with Django itself) or ``test`` (which "
"conflicts with a built-in Python package)."
msgstr ""
"プロジェクトの名前を付けるとき、組み込みの Python モジュールや Django のコン"
"ポーネントの名前を使わないようにしてください。とりわけ、 ``django`` (Django "
"自体と名前が衝突します) や ``test`` (組み込みの Python パッケージ名と名前が衝"
"突します) を使わないようにしましょう。"

msgid "Where should this code live?"
msgstr "コードはどこに置くの？"

msgid ""
"If your background is in plain old PHP (with no use of modern frameworks), "
"you're probably used to putting code under the Web server's document root "
"(in a place such as ``/var/www``). With Django, you don't do that. It's not "
"a good idea to put any of this Python code within your Web server's document "
"root, because it risks the possibility that people may be able to view your "
"code over the Web. That's not good for security."
msgstr ""
"(モダンなフレームワークを使わない) 古いプレーンな PHP の経験があるなら、これ"
"までは Web サーバのドキュメントルート下 (``/var/www`` といった場所) にコード"
"を配置してきたことでしょう。 Django ではそうしないでください｡ Python コード"
"を Web サーバーのドキュメントルート下に置かないでください｡コードをドキュメン"
"トルート下に置くと、 誰かがコードを Web を介して読めるようになってしまうから"
"です。これは安全上良くありません。"

msgid ""
"Put your code in some directory **outside** of the document root, such as :"
"file:`/home/mycode`."
msgstr ""
"コードはドキュメントルートの外､例えば ``/home/mycode`` の ような場所に置きま"
"しょう。"

msgid "Let's look at what :djadmin:`startproject` created::"
msgstr ":djadmin:`startproject` が何を作成したかをみてみましょう::"

msgid "These files are:"
msgstr "ファイルはそれぞれ以下のような役割を持っています::"

msgid ""
"The outer :file:`mysite/` root directory is just a container for your "
"project. Its name doesn't matter to Django; you can rename it to anything "
"you like."
msgstr ""
"外側の  :file:`mysite/` ルートディレクトリは、このプロジェクトのただの入れ物"
"です。 この名前は Django に関係しませんので、好きな名前に変更できます。"

msgid ""
":file:`manage.py`: A command-line utility that lets you interact with this "
"Django project in various ways. You can read all the details about :file:"
"`manage.py` in :doc:`/ref/django-admin`."
msgstr ""
":file:`manage.py`: Django プロジェクトに対する様々な操作を行うためのコマンド"
"ラインユーティリティです｡詳しくは :doc:`/ref/django-admin` 内の :file:"
"`manage.py` を参照してください｡"

msgid ""
"The inner :file:`mysite/` directory is the actual Python package for your "
"project. Its name is the Python package name you'll need to use to import "
"anything inside it (e.g. ``mysite.urls``)."
msgstr ""
"内側の :file:`mysite/` ディレクトリは、このプロジェクトの本当の Python パッ"
"ケージです。この名前が Python パッケージの名前であり、 import の際に 使用する"
"名前です (例えば import ``mysite.urls``) 。"

msgid ""
":file:`mysite/__init__.py`: An empty file that tells Python that this "
"directory should be considered a Python package. If you're a Python "
"beginner, read :ref:`more about packages <tut-packages>` in the official "
"Python docs."
msgstr ""
":file:`mysite/__init__.py`: このディレクトリが Python パッケージであることを "
"Python に知らせるための空のファイルです。Python の初心者は、 Python の公式 ド"
"キュメントの :ref:`more about packages <tut-packages>` を読んで下さい。"

msgid ""
":file:`mysite/settings.py`: Settings/configuration for this Django "
"project.  :doc:`/topics/settings` will tell you all about how settings work."
msgstr ""
":file:`mysite/settings.py`: Django プロジェクトの設定ファイルです。 設定の仕"
"組みは :doc:`/topics/settings` を参照してください。"

msgid ""
":file:`mysite/urls.py`: The URL declarations for this Django project; a "
"\"table of contents\" of your Django-powered site. You can read more about "
"URLs in :doc:`/topics/http/urls`."
msgstr ""
":file:`mysite/urls.py`: Django プロジェクトの URL 宣言、いうなれば Django サ"
"イトにおける「目次」に相当します。詳しくは :doc:`/topics/http/urls` を参照 し"
"てください。"

msgid ""
":file:`mysite/wsgi.py`: An entry-point for WSGI-compatible web servers to "
"serve your project. See :doc:`/howto/deployment/wsgi/index` for more details."
msgstr ""
":file:`mysite/wsgi.py`: プロジェクトをサーブするためのWSGI互換Webサーバーとの"
"エントリーポイントです。詳細は :doc:`/howto/deployment/wsgi/index` を参照して"
"ください。"

msgid "The development server"
msgstr "開発用サーバー"

msgid ""
"Let's verify your Django project works. Change into the outer :file:`mysite` "
"directory, if you haven't already, and run the following commands:"
msgstr ""
"Django のプロジェクトがうまく動作するか確認しましょう。外側の :file:`mysite` "
"ディレクトリに移動ができたら下記のコマンドを実行してください:"

msgid "You'll see the following output on the command line:"
msgstr "コマンドライン上で下記の出力が確認できるでしょう:"

msgid ""
"Ignore the warning about unapplied database migrations for now; we'll deal "
"with the database shortly."
msgstr ""
"適用されていないデータベースマイグレーションについての警告はここでは無視しま"
"す、後ほどすぐにデータベースとともにたっぷりと取り組みます。"

msgid ""
"You've started the Django development server, a lightweight Web server "
"written purely in Python. We've included this with Django so you can develop "
"things rapidly, without having to deal with configuring a production server "
"-- such as Apache -- until you're ready for production."
msgstr ""
"これで、 Django 開発サーバを起動しました。 Django 開発サーバは Python だけで"
"書かれた軽量な Web サーバです。このサーバは、開発を迅速に行い、運用に適した状"
"態になるまで Apache のような運用サーバの設定をいじらなくても良いようにするた"
"めのものです。"

msgid ""
"Now's a good time to note: **don't** use this server in anything resembling "
"a production environment. It's intended only for use while developing. "
"(We're in the business of making Web frameworks, not Web servers.)"
msgstr ""
"ここでちょっと注意しておきましょう。このサーバは開発中の利用だけを考えて作ら"
"れています。絶対に運用環境では **使わないでください** (筆者たちの専門は Web "
"フレームワークであって、Web サーバではありません)。"

msgid ""
"Now that the server's running, visit http://127.0.0.1:8000/ with your Web "
"browser. You'll see a \"Welcome to Django\" page, in pleasant, light-blue "
"pastel. It worked!"
msgstr ""
"さあ、これでサーバが起動したので、ブラウザで http://127.0.0.1:8000/ にアクセ"
"スしてみてください。 “Welcome to Django” と表示された、明るいパステル調のライ"
"トブルーのページが出るはずです。やりましたね！"

msgid "Changing the port"
msgstr "ポート番号の変更"

msgid ""
"By default, the :djadmin:`runserver` command starts the development server "
"on the internal IP at port 8000."
msgstr ""
"デフォルトでは :djadmin:`runserver` コマンドは内部 IP のポート 8000 で起動し"
"ます。"

msgid ""
"If you want to change the server's port, pass it as a command-line argument. "
"For instance, this command starts the server on port 8080:"
msgstr ""
"サーバーのポートを変えたい場合は、以下のようにコマンドライン引数を渡してくだ"
"さい。このコマンドによってポート 8080 で起動させれます:"

msgid ""
"If you want to change the server's IP, pass it along with the port. For "
"example, to listen on all available public IPs (which is useful if you are "
"running Vagrant or want to show off your work on other computers on the "
"network), use:"
msgstr ""

msgid ""
"**0** is a shortcut for **0.0.0.0**. Full docs for the development server "
"can be found in the :djadmin:`runserver` reference."
msgstr ""

msgid "Automatic reloading of :djadmin:`runserver`"
msgstr ":djadmin:`runserver` の自動リロード"

msgid ""
"The development server automatically reloads Python code for each request as "
"needed. You don't need to restart the server for code changes to take "
"effect. However, some actions like adding files don't trigger a restart, so "
"you'll have to restart the server in these cases."
msgstr ""
"開発サーバーは必要に応じてリクエストごとにPythonコードを自動的にリロードしま"
"す。コード変更の効果を得るためにサーバーを再起動する必要はありません。しかし"
"ながら、ファイルの追加のようないくつかの行動は再起動をトリガーしません、この"
"ような場合はサーバーを再起動する必要があります。"

msgid "Creating the Polls app"
msgstr "Polls アプリケーションをつくる"

msgid ""
"Now that your environment -- a \"project\" -- is set up, you're set to start "
"doing work."
msgstr ""
"さあ、これで自分用の環境、すなわちプロジェクトが立ち上がり、作業にとりかかる"
"準備ができました。"

msgid ""
"Each application you write in Django consists of a Python package that "
"follows a certain convention. Django comes with a utility that automatically "
"generates the basic directory structure of an app, so you can focus on "
"writing code rather than creating directories."
msgstr ""
"Django 内に追加する各アプリケーションは以下の規則に従った Python パッケージで"
"構成されます。 Django には基本的なディレクトリ構造を自動生成するユーティリ"
"ティが含まれているので、ディレクトリを作ることでなくコードを書くことに集中で"
"きます。"

msgid "Projects vs. apps"
msgstr "プロジェクトとアプリケーション"

msgid ""
"What's the difference between a project and an app? An app is a Web "
"application that does something -- e.g., a Weblog system, a database of "
"public records or a simple poll app. A project is a collection of "
"configuration and apps for a particular website. A project can contain "
"multiple apps. An app can be in multiple projects."
msgstr ""
"プロジェクトとアプリケーションの違いとは何でしょうか？アプリケーションとは、"
"実際に何らかの処理を行う Web アプリケーションを指します。例えばブログシステム"
"や公開レコードのデータベース、単純な投票アプリといった具合です。プロジェクト"
"とは、あるウェブサイト向けに設定とアプリケーションを集めたものです。一つのプ"
"ロジェクトには複数のアプリケーションを入れられ ます。また、一つのアプリケー"
"ションは複数のプロジェクトで使えます。"

msgid ""
"Your apps can live anywhere on your :ref:`Python path <tut-searchpath>`. In "
"this tutorial, we'll create our poll app right next to your :file:`manage."
"py` file so that it can be imported as its own top-level module, rather than "
"a submodule of ``mysite``."
msgstr ""
"アプリケーションは :ref:`Python path <tut-searchpath>` のどこにでも置けます。"
"このチュートリアルでは投票アプリケーションを :file:`manage.py` のすぐ隣に作り"
"ます。なので、 ``mysite`` のサブモジュールとしてでなく、トップレベルのモ"
"ジュールとしてインポートできます。"

msgid ""
"To create your app, make sure you're in the same directory as :file:`manage."
"py` and type this command:"
msgstr ""
"アプリケーションを作るには、 :file:`manage.py` と同じディレクトリに入って、こ"
"のコマンドを実行します:"

msgid "That'll create a directory :file:`polls`, which is laid out like this::"
msgstr ""
"このコマンドは :file:`polls` というディレクトリを作成します。中身はこのように"
"なっています::"

msgid "This directory structure will house the poll application."
msgstr "このディレクトリ構造が、 poll アプリケーションの全体像です。"

msgid "Write your first view"
msgstr "はじめてのビュー作成"

msgid ""
"Let's write the first view. Open the file ``polls/views.py`` and put the "
"following Python code in it:"
msgstr ""
"最初のビューを書いてみましょう。 ``polls/views.py`` を開いて、以下の Python "
"コードを書いてください:"

msgid ""
"This is the simplest view possible in Django. To call the view, we need to "
"map it to a URL - and for this we need a URLconf."
msgstr ""
"Django上で最も単純なビューです。ビューを呼ぶために、 URL を対応付けしてやる必"
"要があります。 URLconf が必要ですね。"

msgid ""
"To create a URLconf in the polls directory, create a file called ``urls."
"py``. Your app directory should now look like::"
msgstr ""
"polls ディレクトリに URLconf を作るには ``urls.py`` というファイルを作りま"
"す。アプリのディレクトリはこのようになっているはずです::"

msgid "In the ``polls/urls.py`` file include the following code:"
msgstr "``polls/urls.py`` ファイルには以下のコードを書いてください:"

msgid ""
"The next step is to point the root URLconf at the ``polls.urls`` module. In "
"``mysite/urls.py``, add an import for ``django.conf.urls.include`` and "
"insert an :func:`~django.conf.urls.include` in the ``urlpatterns`` list, so "
"you have:"
msgstr ""
"次のステップはルートのURLconfに ``polls.urls`` モジュールの記述を反映させるこ"
"とです。 ``mysite/urls.py`` に ``django.conf.urls.include`` のimportを追加し"
"て、 ``urlpatterns`` のリストに :func:`~django.conf.urls.include` を挿入しま"
"す。するとこのようになります:"

msgid ""
"The :func:`~django.conf.urls.include` function allows referencing other "
"URLconfs. Note that the regular expressions for the :func:`~django.conf.urls."
"include` function doesn't have a ``$`` (end-of-string match character) but "
"rather a trailing slash. Whenever Django encounters :func:`~django.conf.urls."
"include`, it chops off whatever part of the URL matched up to that point and "
"sends the remaining string to the included URLconf for further processing."
msgstr ""
":func:`~django.conf.urls.include` は他の URLconfs への参照を許可します。 :"
"func:`~django.conf.urls.include` のための正規表現は、 ``$`` ( 文字列の終わり"
"に一致する文字 ) よりもむしろトレイリングスラッシュとなることを覚えておいてく"
"ださい。Django が :func:`~django.conf.urls.include` に遭遇すると、いつも一致"
"した箇所を URL から切り落とし、次の処理のために残りの文字列を include された "
"URLconf へ渡します。"

msgid ""
"The idea behind :func:`~django.conf.urls.include` is to make it easy to plug-"
"and-play URLs. Since polls are in their own URLconf (``polls/urls.py``), "
"they can be placed under \"/polls/\", or under \"/fun_polls/\", or under \"/"
"content/polls/\", or any other path root, and the app will still work."
msgstr ""
":func:`~django.conf.urls.include` の背景にある考えは、 URL のプラグ & プレイ"
"を簡単に作ることです。 polls には独自の URLconf (``polls/urls.py``) を持って"
"いるので、 \"/polls/\" 、 \"/fun_polls/\" や、 \"/content/polls/\" といった、"
"どんなパスルート下にも置けて、どこに置いてもきちんと動作します。"

msgid "When to use :func:`~django.conf.urls.include()`"
msgstr ":func:`~django.conf.urls.include()` を使うとき"

msgid ""
"You should always use ``include()`` when you include other URL patterns. "
"``admin.site.urls`` is the only exception to this."
msgstr ""
"URLパターンをインクルードするときはいつでも ``include()`` を使うべきです。 "
"``admin.site.urls`` はこれについての唯一の例外です。"

msgid "Doesn't match what you see?"
msgstr "自分のレイアウトと違う場合"

msgid ""
"If you're seeing ``include(admin.site.urls)`` instead of just ``admin.site."
"urls``, you're probably using a version of Django that doesn't match this "
"tutorial version.  You'll want to either switch to the older tutorial or the "
"newer Django version."
msgstr ""
"もし ``admin.site.urls`` ではなく ``include(admin.site.urls)`` を閲覧している"
"場合、古いチュートリアルを参照するか、新しいバージョンの Django を入手してく"
"ださい。"

msgid ""
"You have now wired an ``index`` view into the URLconf. Lets verify it's "
"working, run the following command:"
msgstr ""
"これで\"index\"ビューをURLconfに接続を接続しました。下記のコマンドを実行し"
"て、動作を確認しましょう:"

msgid ""
"Go to http://localhost:8000/polls/ in your browser, and you should see the "
"text \"*Hello, world. You're at the polls index.*\", which you defined in "
"the ``index`` view."
msgstr ""
"ブラウザで http://localhost:8000/polls/ にアクセスすると、\"*Hello, world. "
"You're at the polls index.*\" と表示されるのが確認できるでしょう。これは"
"ビューの``index``で定義したものです。"

msgid ""
"The :func:`~django.conf.urls.url` function is passed four arguments, two "
"required: ``regex`` and ``view``, and two optional: ``kwargs``, and "
"``name``. At this point, it's worth reviewing what these arguments are for."
msgstr ""
":func:`~django.conf.urls.url` 関数は4つの引数を受け取り、そのうち2つが必須で"
"す。 ``regex`` と ``view`` 、オプションで ``kwargs`` と ``name`` です。ここで"
"引数が何のためにあるものかを見ておきましょう。"

msgid ":func:`~django.conf.urls.url` argument: regex"
msgstr ":func:`~django.conf.urls.url` 引数: regex"

msgid ""
"The term \"regex\" is a commonly used short form meaning \"regular expression"
"\", which is a syntax for matching patterns in strings, or in this case, url "
"patterns. Django starts at the first regular expression and makes its way "
"down the list,  comparing the requested URL against each regular expression "
"until it finds one that matches."
msgstr ""
"\"regex\" という単語は省略形で、一般的に \"regular expression\" という意味が"
"あります。これは文字列にマッチするパターンの構文で、この場合はURLパターンにあ"
"たります。 Django ははじめの正規表現から開始し、リストを順に下に見ていきま"
"す。リクエストされたURLと各正規表現を、マッチするものが見つかるまで比較しま"
"す。"

msgid ""
"Note that these regular expressions do not search GET and POST parameters, "
"or the domain name. For example, in a request to ``https://www.example.com/"
"myapp/``, the URLconf will look for ``myapp/``. In a request to ``https://"
"www.example.com/myapp/?page=3``, the URLconf will also look for ``myapp/``."
msgstr ""
"これらの正規表現はGETやPOSTのパラメーター、そしてドメイン名をサーチ検索しない"
"ことに注意します。例えば、 ``https://www.example.com/myapp/`` へのリクエスト"
"においては、URLconfは ``myapp/`` を見ます。 ``https://www.example.com/myapp/?"
"page=3`` へのリクエストにおいても、URLconfは ``myapp/`` を見ます。"

msgid ""
"If you need help with regular expressions, see `Wikipedia's entry`_ and the "
"documentation of the :mod:`re` module. Also, the O'Reilly book \"Mastering "
"Regular Expressions\" by Jeffrey Friedl is fantastic. In practice, however, "
"you don't need to be an expert on regular expressions, as you really only "
"need to know how to capture simple patterns. In fact, complex regexes can "
"have poor lookup performance, so you probably shouldn't rely on the full "
"power of regexes."
msgstr ""
"正規表現についてわからないことがあれば `Wikipediaのエントリー`_ と :mod:`re` "
"モジュールのドキュメントを参照してください。オライリーから出版されている "
"Jeffery Friendl の \"Mastering Reglar Expressions\" も参考になります。しかし"
"実際問題としては、正規表現のエキスパートになる必要はありません。単純なパター"
"ンをキャプチャする方法を知っていれば十分です。それに複雑な正規表現はルック"
"アップのパフォーマンスが悪いので、正規表現のフルパワーに依存するのはよくあり"
"ません。"

msgid ""
"Finally, a performance note: these regular expressions are compiled the "
"first time the URLconf module is loaded. They're super fast (as long as the "
"lookups aren't too complex as noted above)."
msgstr ""
"パフォーマンスノート: 正規表現は URLconf モジュールが読み込まれた最初にコンパ"
"イルされるので、高速に動作します (先ほど述べたように複雑すぎない場合)。"

msgid ":func:`~django.conf.urls.url` argument: view"
msgstr ":func:`~django.conf.urls.url` 引数: view"

msgid ""
"When Django finds a regular expression match, Django calls the specified "
"view function, with an :class:`~django.http.HttpRequest` object as the first "
"argument and any “captured” values from the regular expression as other "
"arguments. If the regex uses simple captures, values are passed as "
"positional arguments; if it uses named captures, values are passed as "
"keyword arguments. We'll give an example of this in a bit."
msgstr ""
"Django がマッチする正規表現を見つけると、 Django は指定されたビュー関数を呼び"
"出します。その際は :class:`~django.http.HttpRequest` オブジェクトを第一引数"
"に、そして正規表現で「キャプチャされた」値をその他の引数にして関数を呼び出し"
"ます。正規表現が単純にキャプチャをしている場合は位置引数として、名前付きで"
"キャプチャしている場合はキーワード引数として呼び出します。この例はこの後すぐ"
"出てきます。"

msgid ":func:`~django.conf.urls.url` argument: kwargs"
msgstr ":func:`~django.conf.urls.url` 引数: kwargs"

msgid ""
"Arbitrary keyword arguments can be passed in a dictionary to the target "
"view. We aren't going to use this feature of Django in the tutorial."
msgstr ""
"任意のキーワード引数を辞書として対象のビューに渡せます。この機能はチュートリ"
"アルでは使いません。"

msgid ":func:`~django.conf.urls.url` argument: name"
msgstr ":func:`~django.conf.urls.url` 引数: name"

msgid ""
"Naming your URL lets you refer to it unambiguously from elsewhere in Django, "
"especially from within templates. This powerful feature allows you to make "
"global changes to the URL patterns of your project while only touching a "
"single file."
msgstr ""
"URL に名前付けをしておけば Django のどこからでも明確に参照でき、とくにテンプ"
"レートの中で有効です。この便利な機能のおかげで、プロジェクトのURLにグローバル"
"な変更を加える場合にも1つのファイルを変更するだけで済むようになります。"

msgid ""
"When you're comfortable with the basic request and response flow, read :doc:"
"`part 2 of this tutorial </intro/tutorial02>` to start working with the "
"database."
msgstr ""
"基本的なリクエストとレスポンスのフローに馴染んだら、データベースを使った作業"
"を始めるために :doc:`チュートリアルその2 </intro/tutorial02>` を読みましょ"
"う。"

msgid "Writing your first Django app, part 2"
msgstr "はじめての Django アプリ作成、その2"

msgid ""
"This tutorial begins where :doc:`Tutorial 1 </intro/tutorial01>` left off. "
"We'll setup the database, create your first model, and get a quick "
"introduction to Django's automatically-generated admin site."
msgstr ""
"このチュートリアルは :doc:`チュートリアルその 1 </intro/tutorial01>` の続きで"
"す。ここでは、データベースをセットアップして、最初のモデルを作成し、そして "
"Django が自動的に生成してくれる管理 (admin) サイトについて、簡単なイントロダ"
"クションをします。"

msgid "Database setup"
msgstr "Database の設定"

msgid ""
"Now, open up :file:`mysite/settings.py`. It's a normal Python module with "
"module-level variables representing Django settings."
msgstr ""
"それでは、 :file:`mysite/settings.py` を開いてください。これは、 Django の設"
"定を表現するモジュールレベルの変数を持つ通常の Python モジュールです。"

msgid ""
"By default, the configuration uses SQLite. If you're new to databases, or "
"you're just interested in trying Django, this is the easiest choice. SQLite "
"is included in Python, so you won't need to install anything else to support "
"your database. When starting your first real project, however, you may want "
"to use a more scalable database like PostgreSQL, to avoid database-switching "
"headaches down the road."
msgstr ""
"デフォルトの設定では SQLite を使用します。データベースに詳しくなかったり、単"
"に Django を試してみたいだけなら、これが一番簡単な選択です。 SQLite は "
"Python に標準で組み込まれているため、データベースをサポートするために何も追加"
"でインストールする必要がないからです。ただし、本番の環境で使う場合には、頭痛"
"の種となるデータベースの移行作業を避けるため、PostgreSQL などのよりスケーラブ"
"ルなデータベースを使った方が良いでしょう。"

msgid ""
"If you wish to use another database, install the appropriate :ref:`database "
"bindings <database-installation>` and change the following keys in the :"
"setting:`DATABASES` ``'default'`` item to match your database connection "
"settings:"
msgstr ""
"他のデータベースを使いたい場合、適切な :ref:`データベースのバインディング "
"<database-installation>` をインストールして、設定ファイルの :setting:"
"`DATABASES` の ``'default'`` 項目内の以下のキーをデータベースの接続設定に合う"
"ように変更してください。"

msgid ""
":setting:`ENGINE <DATABASE-ENGINE>` -- Either ``'django.db.backends."
"sqlite3'``, ``'django.db.backends.postgresql'``, ``'django.db.backends."
"mysql'``, or ``'django.db.backends.oracle'``. Other backends are :ref:`also "
"available <third-party-notes>`."
msgstr ""
":setting:`ENGINE <DATABASE-ENGINE>` -- ``'django.db.backends.sqlite3'``、"
"``'django.db.backends.postgresql'``、``'django.db.backends.mysql'`` または "
"``'django.db.backends.oracle'`` のいずれかにします。:ref:`その他のバックエン"
"ド <third-party-notes>` も利用可能です。"

msgid ""
":setting:`NAME` -- The name of your database. If you're using SQLite, the "
"database will be a file on your computer; in that case, :setting:`NAME` "
"should be the full absolute path, including filename, of that file. The "
"default value, ``os.path.join(BASE_DIR, 'db.sqlite3')``, will store the file "
"in your project directory."
msgstr ""
":setting:`NAME` -- データベースの名前です。SQLite を使用している場合、データ"
"ベースはコンピュータ上のファイルになります。その場合、:setting:`NAME` には、"
"そのファイルのファイル名を含んだ絶対パスを指定する必要があります。デフォルト"
"値は ``os.path.join(BASE_DIR, 'db.sqlite3')`` で、ファイルはプロジェクトの"
"ディレクトリに保存されます。"

msgid ""
"If you are not using SQLite as your database, additional settings such as :"
"setting:`USER`, :setting:`PASSWORD`, and :setting:`HOST` must be added. For "
"more details, see the reference documentation for :setting:`DATABASES`."
msgstr ""
"データベースとして SQLite を使っていない場合、 :setting:`USER` や :setting:"
"`PASSWORD` そして :setting:`HOST などの追加設定を加える必要があります。詳細に"
"ついては  :setting:`DATABASES` のリファレンスドキュメントを参照してください。"

msgid "For databases other than SQLite"
msgstr "SQLite 以外のデータベースの場合"

msgid ""
"If you're using a database besides SQLite, make sure you've created a "
"database by this point. Do that with \"``CREATE DATABASE database_name;``\" "
"within your database's interactive prompt."
msgstr ""
"もし SQLite 以外を使っている場合、 database を今のうちに作っておいてくださ"
"い。 \"``CREATE DATABASE database_name;``\" とデータベースのインタラクティブ"
"プロンプトで実行してください。"

msgid ""
"Also make sure that the database user provided in :file:`mysite/settings.py` "
"has \"create database\" privileges. This allows automatic creation of a :ref:"
"`test database <the-test-database>` which will be needed in a later tutorial."
msgstr ""
":file:`mysite/settings.py` のデータベースユーザに 「データベース作成」の権限"
"があることを確認します。これは、この後のチュートリアルの :ref:`テストDB <the-"
"test-database>` を自動作成することができます。　"

msgid ""
"If you're using SQLite, you don't need to create anything beforehand - the "
"database file will be created automatically when it is needed."
msgstr ""
"SQLite を使っている場合は、前もってすることはありません。必要であればデータ"
"ベースファイルが自動で生成されます。"

msgid ""
"While you're editing :file:`mysite/settings.py`, set :setting:`TIME_ZONE` to "
"your time zone."
msgstr ""
":file:`mysite/settings.py` を編集する際、 :setting:`TIME_ZONE` に自分のタイム"
"ゾーンも設定します。"

msgid ""
"Also, note the :setting:`INSTALLED_APPS` setting at the top of the file. "
"That holds the names of all Django applications that are activated in this "
"Django instance. Apps can be used in multiple projects, and you can package "
"and distribute them for use by others in their projects."
msgstr ""
"同じく、ファイル先頭にある :setting:`INSTALLED_APPS` に注意してください。これ"
"はこのDjangoインスタンスの中で有効化されているすべてのDjangoアプリケーション"
"の名前を保持しています。アプリは複数のプロジェクトによって使用されることがで"
"きますし、また、他の開発者が彼らのプロジェクトで使用するためにパッケージして"
"配布することもできます。"

msgid ""
"By default, :setting:`INSTALLED_APPS` contains the following apps, all of "
"which come with Django:"
msgstr ""
"デフォルトでは、 :settings:`INSTALLED_APPS` には以下のアプリケーションがは"
"いっています。"

msgid ":mod:`django.contrib.admin` -- The admin site. You'll use it shortly."
msgstr ":mod:`django.contrib.admin`  - 管理（admin）サイト。まもなく使います"

msgid ":mod:`django.contrib.auth` -- An authentication system."
msgstr ":mod:`django.contrib.auth` - 認証システム"

msgid ":mod:`django.contrib.contenttypes` -- A framework for content types."
msgstr ":mod:`django.contrib.contenttypes` - コンテンツタイプフレームワーク"

msgid ":mod:`django.contrib.sessions` -- A session framework."
msgstr ":mod:`django.contrib.sessions` - セッションフレームワーク"

msgid ":mod:`django.contrib.messages` -- A messaging framework."
msgstr ":mod:`django.contrib.messages` - メッセージフレームワーク"

msgid ""
":mod:`django.contrib.staticfiles` -- A framework for managing static files."
msgstr ":mod:`django.contrib.staticfiles` - 静的ファイルの管理フレームワーク"

msgid ""
"These applications are included by default as a convenience for the common "
"case."
msgstr "これらの機能はよく使われるのでデフォルトで付属しています。"

msgid ""
"Some of these applications make use of at least one database table, though, "
"so we need to create the tables in the database before we can use them. To "
"do that, run the following command:"
msgstr ""
"これらのアプリケーションは最低1つデータベースのテーブルを使うので、使い始まる"
"前にデータベースにテーブルを作る必要があります。以下のコマンドを実行してくだ"
"さい:"

msgid ""
"The :djadmin:`migrate` command looks at the :setting:`INSTALLED_APPS` "
"setting and creates any necessary database tables according to the database "
"settings in your :file:`mysite/settings.py` file and the database migrations "
"shipped with the app (we'll cover those later). You'll see a message for "
"each migration it applies. If you're interested, run the command-line client "
"for your database and type ``\\dt`` (PostgreSQL), ``SHOW TABLES;`` (MySQL), "
"``.schema`` (SQLite), or ``SELECT TABLE_NAME FROM USER_TABLES;`` (Oracle) to "
"display the tables Django created."
msgstr ""
":djadmin:`migrate` コマンドは :setting:`INSTALLED_APPS` の設定を参照するとと"
"もに、 :file:`mysite/settings.py` ファイルのデータベース設定に従って必要なす"
"べてのデータベースのテーブルを作成します。このデータベースマイグレーションは"
"アプリと共に配布されます  (これらについては後ほどカバーします)。マイグレー"
"ションを実施するたび、メッセージを見ることになります。もしこれに興味を引かれ"
"たら、Djangoが作成したテーブルを表示するために、コマンドラインクライアントで"
"あなたのデータベースの種類に合わせて ``\\dt`` (PostgreSQL)、``SHOW TABLES;`` "
"(MySQL)、 ``.schema`` (SQLite)、もしくは ``SELECT TABLE_NAME FROM "
"USER_TABLES;`` (Oracle) とタイプしてみましょう。"

msgid "For the minimalists"
msgstr "ミニマリストのために"

msgid ""
"Like we said above, the default applications are included for the common "
"case, but not everybody needs them. If you don't need any or all of them, "
"feel free to comment-out or delete the appropriate line(s) from :setting:"
"`INSTALLED_APPS` before running :djadmin:`migrate`. The :djadmin:`migrate` "
"command will only run migrations for apps in :setting:`INSTALLED_APPS`."
msgstr ""
"すでに述べたように、一般的な場合のためにデフォルトのアプリケーション群が含ま"
"れていますが、すべての人がそれを必要とするわけではありません。もしその中のど"
"れかかすべてが必要ない場合、 :djadmin:`migrate` を実行する前に :setting:"
"`INSTALLED_APPS` から適切な行(複数)をコメントアウトしたり削除しても構いませ"
"ん。:djadmin:`migrate` コマンドは :setting:`INSTALLED_APPS` のアプリのためだ"
"けに実行されます。"

msgid "Creating models"
msgstr "モデルの作成"

msgid ""
"Now we'll define your models -- essentially, your database layout, with "
"additional metadata."
msgstr ""
"これからモデルを定義します -- 追加的なメタデータとともにデータベースのレイア"
"ウトを行う、必須の作業です。"

msgid "Philosophy"
msgstr "設計思想"

msgid ""
"A model is the single, definitive source of truth about your data. It "
"contains the essential fields and behaviors of the data you're storing. "
"Django follows the :ref:`DRY Principle <dry>`. The goal is to define your "
"data model in one place and automatically derive things from it."
msgstr ""
"モデルは、手持ちのデータに対する唯一の決定的なソースです。モデルには自分が格"
"納したいデータにとって必要不可欠なフィー ルドと、そのデータの挙動を収めま"
"す。 Django は :ref:`DRY 則 <dry>` に従っています。 Django のモデルの目的は、"
"ただ一つの場所でデータモデルを定義し、そこから自動的にデータを取り出すことに"
"あります。"

msgid ""
"This includes the migrations - unlike in Ruby On Rails, for example, "
"migrations are entirely derived from your models file, and are essentially "
"just a history that Django can roll through to update your database schema "
"to match your current models."
msgstr ""
"これはマイグレーションを含みます - 例えば、Ruby On Railsと違って、Djangoは歴"
"史的に、現在のモデルに合致するようデータベースのスキーマをアップデートするよ"
"う進むことを可能とすることで、マイグレーションは完全にモデルのファイルから生"
"成されます。"

msgid ""
"In our simple poll app, we'll create two models: ``Question`` and "
"``Choice``. A ``Question`` has a question and a publication date. A "
"``Choice`` has two fields: the text of the choice and a vote tally. Each "
"``Choice`` is associated with a ``Question``."
msgstr ""
"これから開発する簡単な poll アプリケーションでは、投票項目 (``Question``) と"
"選択肢 (``Choice``) の二つのモデルを作成します。 ``Poll`` には質問事項 "
"(question) と公開日 (publication date) の情報があります。 ``Choice`` には選択"
"肢のテキストと投票数 (vote) という二つのフィールドがあります。各 ``Choice`` "
"は一つの ``Question`` に関連づけられています。"

msgid ""
"These concepts are represented by simple Python classes. Edit the :file:"
"`polls/models.py` file so it looks like this:"
msgstr ""
"Django では、こうした概念を簡単な Python クラスで表現できます。 :file:`polls/"
"models.py` ファイルを以下のように編集してください:"

msgid ""
"The code is straightforward. Each model is represented by a class that "
"subclasses :class:`django.db.models.Model`. Each model has a number of class "
"variables, each of which represents a database field in the model."
msgstr ""
"コードは単純明解ですね。各モデルは一つのクラスで表現され、いずれも :class:"
"`django.db.models.Model` のサブクラスです。各モデルには複数のクラス変数があ"
"り、個々のクラス変数はモデルのデータベースフィールドを表現しています。"

msgid ""
"Each field is represented by an instance of a :class:`~django.db.models."
"Field` class -- e.g., :class:`~django.db.models.CharField` for character "
"fields and :class:`~django.db.models.DateTimeField` for datetimes. This "
"tells Django what type of data each field holds."
msgstr ""
"各フィールドは :class:`~django.db.models.Field` クラスのインスタンスとして表"
"現されています。例えば、 :class:`~django.db.models.CharField` は文字のフィー"
"ルドで、 :class:`~django.db.models.DateTimeField` は日時フィー ルドです。こう"
"したクラスは、各フィールドにどのようなデータ型を記憶させるか を Django に教え"
"ます。"

msgid ""
"The name of each :class:`~django.db.models.Field` instance (e.g. "
"``question_text`` or ``pub_date``) is the field's name, in machine-friendly "
"format. You'll use this value in your Python code, and your database will "
"use it as the column name."
msgstr ""
":class:`~django.db.models.Field` インスタンスそれぞれの名前(例: "
"``question_text`` や ``pub_date``)は、機械可読なフィールド名です。このフィー"
"ルド名はPythonコードで使うとともに、データベースも列の名前として使うことにな"
"ります。"

msgid ""
"You can use an optional first positional argument to a :class:`~django.db."
"models.Field` to designate a human-readable name. That's used in a couple of "
"introspective parts of Django, and it doubles as documentation. If this "
"field isn't provided, Django will use the machine-readable name. In this "
"example, we've only defined a human-readable name for ``Question.pub_date``. "
"For all other fields in this model, the field's machine-readable name will "
"suffice as its human-readable name."
msgstr ""
":class:`~django.db.models.Field` の第一固定引数には、オプションとして人間可読"
"なフィールド名も指定できます。このフィールド名は Django の二つの内省機能で使"
"う他、ドキュメントとしての役割も果たします。人間可読なフィールド名を指定しな"
"い場合、 Django は機械可読な名前を使います。上の例では、  ``Question."
"pub_date`` にだけ人間可読なフィールド名を指定しました。モデルの他のフィールド"
"では、フィールドの機械可読な名前は人間可読な名前としても十分なので定義してい"
"ません。"

msgid ""
"Some :class:`~django.db.models.Field` classes have required arguments. :"
"class:`~django.db.models.CharField`, for example, requires that you give it "
"a :attr:`~django.db.models.CharField.max_length`. That's used not only in "
"the database schema, but in validation, as we'll soon see."
msgstr ""
":class:`~django.db.models.Field` クラスの中には必須の引数を持つものがありま "
"す。例えば `~django.db.models.CharField` には :attr:`~django.db.models."
"CharField.max_length` を指定する必要があります。この引数はデータベーススキー"
"マで使われる他、後で述べるバリデーションでも使われま す。"

msgid ""
"A :class:`~django.db.models.Field` can also have various optional arguments; "
"in this case, we've set the :attr:`~django.db.models.Field.default` value of "
"``votes`` to 0."
msgstr ""
":class:`~django.db.models.Field` はいつくかオプションの引数も取れます。今回の"
"場合、 ```votes`` の :attr:`~django.db.models.Field.default` 値を 0 に設定し"
"ました。"

msgid ""
"Finally, note a relationship is defined, using :class:`~django.db.models."
"ForeignKey`. That tells Django each ``Choice`` is related to a single "
"``Question``. Django supports all the common database relationships: many-to-"
"one, many-to-many, and one-to-one."
msgstr ""
"ついに、 :class:`~django.db.models.ForeignKey` を使用したリレーションシップの"
"記述が定義されました。これは、それぞれの``Choice`` が一つの``Question``に関連"
"付けられていることをDjangoに伝えます。Djangoは 多対一、多対多、そして一対一の"
"ような一般的なデータベースリレーションシップすべてをサポートします。"

msgid "Activating models"
msgstr "モデルを有効にする"

msgid ""
"That small bit of model code gives Django a lot of information. With it, "
"Django is able to:"
msgstr ""
"前述のようなほんのわずかなコードをモデルに書くだけで、 Django はたくさんの情"
"報を知れます。このコードを使って、 Django は:"

msgid "Create a database schema (``CREATE TABLE`` statements) for this app."
msgstr ""
"アプリケーションのデータベーススキーマを作成 (``CREATE TABLE`` 文を実行) でき"
"ます。"

msgid ""
"Create a Python database-access API for accessing ``Question`` and "
"``Choice`` objects."
msgstr ""
"``Question`` や ``Choice`` オブジェクトに Python からアクセスするためのデータ"
"ベー ス API を作成できます。"

msgid ""
"But first we need to tell our project that the ``polls`` app is installed."
msgstr ""
"でもその前に ``polls`` アプリケーションをインストールしたことをプロジェクトに"
"教えてやる必要があります。"

msgid ""
"Django apps are \"pluggable\": You can use an app in multiple projects, and "
"you can distribute apps, because they don't have to be tied to a given "
"Django installation."
msgstr ""
"Django アプリケーションは「プラガブル (pluggable)」です。アプリケーショ ンは"
"特定の Django インストールに結び付いていないので、アプリケーションを複数のプ"
"ロジェクトで使ったり、単体で配布したりできます。"

msgid ""
"To include the app in our project, we need to add a reference to its "
"configuration class in the :setting:`INSTALLED_APPS` setting. The "
"``PollsConfig`` class is in the :file:`polls/apps.py` file, so its dotted "
"path is ``'polls.apps.PollsConfig'``. Edit the :file:`mysite/settings.py` "
"file and add that dotted path to the :setting:`INSTALLED_APPS` setting. "
"It'll look like this:"
msgstr ""
"プロジェクトにあるアプリケーションを含めるために、構成クラスへの参照を :"
"setting:`INSTALLED_APPS` 設定に追加する必要があります。 ``PollsConfig`` クラ"
"スは、 :file:`polls/apps.py` にあるので、ドットでつながれたパスは ``'polls."
"apps.PollsConfig'`` となります。 :file:`mysite/settings.py` を編集し、 :"
"setting:`INSTALLED_APPS` 設定にドットでつながれたパスを追加してください。そう"
"すると下記のようになります。"

msgid ""
"Now Django knows to include the ``polls`` app. Let's run another command:"
msgstr ""
"これで Django は ``polls`` アプリケーションが含まれていると知りました。もうひ"
"とつコマンドを実行しましょう:"

msgid "You should see something similar to the following:"
msgstr "次のようなものが表示されるはずです:"

msgid ""
"By running ``makemigrations``, you're telling Django that you've made some "
"changes to your models (in this case, you've made new ones) and that you'd "
"like the changes to be stored as a *migration*."
msgstr ""
"``makemigrations``を実行することで、Djangoにモデルに変更があったこと(この場"
"合、新しいものを作成しました)を伝え、そして変更を*マイグレーション*の形で保存"
"することができました。"

msgid ""
"Migrations are how Django stores changes to your models (and thus your "
"database schema) - they're just files on disk. You can read the migration "
"for your new model if you like; it's the file ``polls/"
"migrations/0001_initial.py``. Don't worry, you're not expected to read them "
"every time Django makes one, but they're designed to be human-editable in "
"case you want to manually tweak how Django changes things."
msgstr ""
"マイグレーションはDjangoがモデル(そしてデータベーススキーマでもあります)の変"
"更をディスク上のファイルに保存する方法です。望むならば、新しいモデルをマイグ"
"レーションのファイル ``polls/migrations/0001_initial.py`` から読むことも出来"
"ます。安心して下さい、Djangoが作成する度にマイグレーションのファイルを読む必"
"要はありません、しかし、Djangoが行った変更を手動で微調整したいというときのた"
"めに人間可読なファイルとして設計されています。"

msgid ""
"There's a command that will run the migrations for you and manage your "
"database schema automatically - that's called :djadmin:`migrate`, and we'll "
"come to it in a moment - but first, let's see what SQL that migration would "
"run. The :djadmin:`sqlmigrate` command takes migration names and returns "
"their SQL:"
msgstr ""
"これは自動でデータベーススキーマを管理するためのマイグレーション実行するとの"
"コマンドです。:djadmin:`migrate` と呼ばれる、あっという間に完了します、しかし"
"最初は、マイグレーションがどんなSQLを実行するのか見てみましょう。:djadmin:"
"`sqlmigrate` コマンドはマイグレーションの名前を引数にとってSQLを返します:"

msgid ""
"You should see something similar to the following (we've reformatted it for "
"readability):"
msgstr ""
"あなたは次のようなもの (読みやすさのためにそれを再フォーマットした) が表示さ"
"れるはずです:"

msgid "Note the following:"
msgstr "以下に注意してください:"

msgid ""
"The exact output will vary depending on the database you are using. The "
"example above is generated for PostgreSQL."
msgstr ""
"正確な出力は、使用しているデータベースによって異なります。上記の例では、 "
"PostgreSQL のために生成されます。"

msgid ""
"Table names are automatically generated by combining the name of the app "
"(``polls``) and the lowercase name of the model -- ``question`` and "
"``choice``. (You can override this behavior.)"
msgstr ""
"テーブル名はアプリケーションの名前 (``polls``) とモデルの小文字表記 の "
"``question``  と ``choice`` を組み合わせて自動的に生成されます。 (この挙動は"
"オーバライドできます)"

msgid ""
"Primary keys (IDs) are added automatically. (You can override this, too.)"
msgstr ""
"主キー (primary key, ID) は自動的に追加されます (この挙動もオーバライド可能で"
"す)。"

msgid ""
"By convention, Django appends ``\"_id\"`` to the foreign key field name. "
"(Yes, you can override this, as well.)"
msgstr ""
"便宜上、 Django は外部キーのフィールド名に ``\"_id\"`` を追加します。もちろん"
"この挙動もオーバライド可能です。"

msgid ""
"The foreign key relationship is made explicit by a ``FOREIGN KEY`` "
"constraint. Don't worry about the ``DEFERRABLE`` parts; that's just telling "
"PostgreSQL to not enforce the foreign key until the end of the transaction."
msgstr ""
"外部キーリレーションシップは``FOREIGN KEY`` 制約で明確化されます。"
"``DEFERRABLE``の部分については心配しないでください; これはただPostgreSQLに外"
"部キーをトランザクション終了まで強制しないよう伝えているだけです。"

msgid ""
"It's tailored to the database you're using, so database-specific field types "
"such as ``auto_increment`` (MySQL), ``serial`` (PostgreSQL), or ``integer "
"primary key autoincrement`` (SQLite) are handled for you automatically. Same "
"goes for the quoting of field names -- e.g., using double quotes or single "
"quotes."
msgstr ""
"これはあなたが使用しているデータベースに合わせて、``auto_increment`` "
"(MySQL)、 ``serial`` (PostgreSQL) もしくは `integer primary key "
"autoincrement`` (SQLite) のようなデータベースに特化した型が自動的に選択され生"
"成されます。フィールド名のクォーティングをダブルクォートにするか、シングル"
"クォートにするかも同じように扱われます。"

msgid ""
"The :djadmin:`sqlmigrate` command doesn't actually run the migration on your "
"database - it just prints it to the screen so that you can see what SQL "
"Django thinks is required. It's useful for checking what Django is going to "
"do or if you have database administrators who require SQL scripts for "
"changes."
msgstr ""
":djadmin:`sqlmigrate` コマンドは実際にはデータベースにマイグレーションを実行"
"しません。ただ、Djangoが必要としているSQLが何であるかをスクリーンに表示するだ"
"けです。これはDjangoが何をしようとしているかを確認したり、データベース管理者"
"に変更のためのSQLスクリプトを要求されているときに役に立ちます。"

msgid ""
"If you're interested, you can also run :djadmin:`python manage.py check "
"<check>`; this checks for any problems in your project without making "
"migrations or touching the database."
msgstr ""
"もし興味があれば :djadmin:`python manage.py check <check>` を実行することもで"
"きます; これはマイグレーションを作成したりデータベースにふれることなくプロ"
"ジェクトになんの問題がないか確認します 。"

msgid ""
"Now, run :djadmin:`migrate` again to create those model tables in your "
"database:"
msgstr ""
":djadmin:`migrate` を再度実行し、 モデルのテーブルをデータベースに作成しま"
"しょう。"

msgid ""
"The :djadmin:`migrate` command takes all the migrations that haven't been "
"applied (Django tracks which ones are applied using a special table in your "
"database called ``django_migrations``) and runs them against your database - "
"essentially, synchronizing the changes you made to your models with the "
"schema in the database."
msgstr ""
":djadmin:`migrate` コマンドはすべての適用されていないマイグレーション(Django"
"はデータベース内の``django_migrations``と呼ばれる特別なテーブルを利用してどれ"
"が適用されているかを追跡しています)を捕捉してデータベースに対してそれを実行し"
"ます - 重要なのは、モデルに対して行った変更はデータベースのスキーマに同期する"
"ということです。"

msgid ""
"Migrations are very powerful and let you change your models over time, as "
"you develop your project, without the need to delete your database or tables "
"and make new ones - it specializes in upgrading your database live, without "
"losing data. We'll cover them in more depth in a later part of the tutorial, "
"but for now, remember the three-step guide to making model changes:"
msgstr ""
"マイグレーションは、データベースやテーブルを削除しまた新しいものを作成する必"
"要なく、プロジェクトを開発するように、いつでもモデルを変更可能とする強力な"
"ツールです - データを失うことなしにデータベースをライブでアップグレードするよ"
"う特化しています。これらについてチュートリアルの後の部分でより深くカバーしま"
"す、しかし今は、モデルの変更を実施するための3ステップガイドを覚えておいてくだ"
"さい:"

msgid "Change your models (in ``models.py``)."
msgstr "モデルを変更する (``models.py`` の中の)"

msgid ""
"Run :djadmin:`python manage.py makemigrations <makemigrations>` to create "
"migrations for those changes"
msgstr ""
"これらの変更のためのマイグレーションを作成するために :djadmin:`python manage."
"py makemigrations <makemigrations>`  を実行します。"

msgid ""
"Run :djadmin:`python manage.py migrate <migrate>` to apply those changes to "
"the database."
msgstr ""
"データベースにこれらの変更を適用するために :djadmin:`python manage.py "
"migrate <migrate>`  を実行します。"

msgid ""
"The reason that there are separate commands to make and apply migrations is "
"because you'll commit migrations to your version control system and ship "
"them with your app; they not only make your development easier, they're also "
"useable by other developers and in production."
msgstr ""
"マイグレーションの作成と適用のコマンドが分割されている理由は、マイグレーショ"
"ンをバージョン管理システムにコミットし、アプリとともに配布するためです。これ"
"によって、あなたの開発が容易になるだけでなく、他の開発者や本番環境にとって使"
"いやすいものになります。"

msgid ""
"Read the :doc:`django-admin documentation </ref/django-admin>` for full "
"information on what the ``manage.py`` utility can do."
msgstr ""
"``manage.py`` ユーティリティでできることについては :doc:`django-admin のド"
"キュメント </ref/django-admin>` を読んで下さい。"

msgid "Playing with the API"
msgstr "API で遊んでみる"

msgid ""
"Now, let's hop into the interactive Python shell and play around with the "
"free API Django gives you. To invoke the Python shell, use this command:"
msgstr ""
"さぁ、 Python 対話シェルを起動して、 Django が提供する API で遊んでみましょ"
"う。 Python シェルを起動するには、以下のコマンドを実行します:"

msgid ""
"We're using this instead of simply typing \"python\", because :file:`manage."
"py` sets the ``DJANGO_SETTINGS_MODULE`` environment variable, which gives "
"Django the Python import path to your :file:`mysite/settings.py` file."
msgstr ""
"単に “python” を実行しないのは、 Django に :file:`mysite/settings.py` ファイ"
"ルへの import パスを与える ``DJANGO_SETTINGS_MODULE`` の環境変数を :file:"
"`manage.py` で設定しているからです。"

msgid "Bypassing manage.py"
msgstr "manage.py を使わずに済ませる方法"

msgid ""
"If you'd rather not use :file:`manage.py`, no problem. Just set the :envvar:"
"`DJANGO_SETTINGS_MODULE` environment variable to ``mysite.settings``, start "
"a plain Python shell, and set up Django:"
msgstr ""
":file:`manage.py` を使用しなくても問題ありません。環境変数 :envvar:"
"`DJANGO_SETTINGS_MODULE` を ``mysite.settings`` に設定して、標準のPython "
"shellを起動しDjangoをセットアップします。"

msgid ""
"If this raises an :exc:`AttributeError`, you're probably using a version of "
"Django that doesn't match this tutorial version. You'll want to either "
"switch to the older tutorial or the newer Django version."
msgstr ""
":exc:`AttributeError` が発生したするのであれば、おそらくこのチュートリアルに"
"合致しないDjangoを使用しているのでしょう。より古いチュートリアルに切り替える"
"か、Djangoのバージョンを新しくして下さい。"

msgid ""
"You must run ``python`` from the same directory :file:`manage.py` is in, or "
"ensure that directory is on the Python path, so that ``import mysite`` works."
msgstr ""
"``import mysite`` の動作のために、:file:`manage.py` があるのと同じディレクト"
"リ、もしくはPythonのパスが通っていることを保証されたディレクトリから"
"``python``を実行しなくてはなりません。 "

msgid ""
"For more information on all of this, see the :doc:`django-admin "
"documentation </ref/django-admin>`."
msgstr ""
"詳しくは :doc:`django-admin.py のドキュメント </ref/django-admin>` を参照して"
"ください。"

msgid ""
"Once you're in the shell, explore the :doc:`database API </topics/db/"
"queries>`::"
msgstr ""
"シェルに入ったら :doc:`データベース API </topics/db/queries>` の世界を探検し"
"てみましょう::"

msgid ""
"Wait a minute. ``<Question: Question object>`` is, utterly, an unhelpful "
"representation of this object. Let's fix that by editing the ``Question`` "
"model (in the ``polls/models.py`` file) and adding a :meth:`~django.db."
"models.Model.__str__` method to both ``Question`` and ``Choice``:"
msgstr ""
"ちょっと待ってください。 ``<Question: Question object>`` はこのオブジェクトの"
"表現としてまったく役に立ちません。( ``polls/models.py`` ファイルの中にある) "
"``Question`` モデルを編集してこれを修正しましょう。 :meth:`~django.db.models."
"Model.__str__` メソッドを ``Question`` と ``Choice`` の両方に追加します:"

msgid ""
"It's important to add :meth:`~django.db.models.Model.__str__` methods to "
"your models, not only for your own convenience when dealing with the "
"interactive prompt, but also because objects' representations are used "
"throughout Django's automatically-generated admin."
msgstr ""
"あなた自身のインタラクティブシェルでの表示での利便性のためだけではなく、"
"Djangoの自動生成adminでオブジェクトの表現として使用されるという理由からも :"
"meth:`~django.db.models.Model.__str__` メソッドをモデルに追加することは重要で"
"す。"

msgid ""
"Note these are normal Python methods. Let's add a custom method, just for "
"demonstration:"
msgstr ""
"これらは通常の Python メソッドということに注意してください。デモ用にカスタム"
"のメソッドを追加してみましょう:"

msgid ""
"Note the addition of ``import datetime`` and ``from django.utils import "
"timezone``, to reference Python's standard :mod:`datetime` module and "
"Django's time-zone-related utilities in :mod:`django.utils.timezone`, "
"respectively. If you aren't familiar with time zone handling in Python, you "
"can learn more in the :doc:`time zone support docs </topics/i18n/timezones>`."
msgstr ""
"``import datetime`` と ``from django.utils import timezone`` で Python の 標"
"準モジュール :mod:`datetime` と Django のタイムゾーン関連ユーティリティの :"
"mod:`django.utils.timezone` を参照していることに注意してください。 Python で"
"のタイムゾーンの取り扱いに不慣れな場合は、 `タイムゾーンサポートドキュメント "
"</topics/i18n/timezones>` を参照してください。"

msgid ""
"Save these changes and start a new Python interactive shell by running "
"``python manage.py shell`` again::"
msgstr ""
"変更を保存して、もう一度 ``python manage.py shell`` を実行して新しい Python "
"対話シェルを始めましょう::"

msgid ""
"For more information on model relations, see :doc:`Accessing related objects "
"</ref/models/relations>`. For more on how to use double underscores to "
"perform field lookups via the API, see :ref:`Field lookups <field-lookups-"
"intro>`. For full details on the database API, see our :doc:`Database API "
"reference </topics/db/queries>`."
msgstr ""
"モデルのリレーションについては :doc:`リレーション先オブジェクトにアクセスす"
"る </ref/models/relations>` を参照してください。 API を通じた、フィールドルッ"
"クアップのためのダブルアンダースコアの使い方は :ref:`フィールドルックアップ "
"<field-lookups-intro>` を参照してください。データーベース API の詳細は :doc:`"
"データベース API リファレンス </topics/db/queries>` を参照してください。"

msgid "Introducing the Django Admin"
msgstr "Django Adminの紹介"

msgid ""
"Generating admin sites for your staff or clients to add, change, and delete "
"content is tedious work that doesn't require much creativity. For that "
"reason, Django entirely automates creation of admin interfaces for models."
msgstr ""
"あなたのスタッフや顧客のためのコンテンツ追加、変更そして削除のための管理サイ"
"トの生成は、創造性を要求されない退屈な仕事です。そのため、Djangoはモデルのた"
"めの管理インタフェース群の生成を完全に自動化します。"

msgid ""
"Django was written in a newsroom environment, with a very clear separation "
"between \"content publishers\" and the \"public\" site. Site managers use "
"the system to add news stories, events, sports scores, etc., and that "
"content is displayed on the public site. Django solves the problem of "
"creating a unified interface for site administrators to edit content."
msgstr ""
"Django はニュースルーム環境で開発されました。ニュースルーム環境では、 「コン"
"テンツの作成者 (content publisher)」と「公開 (public) 」サイトをきわめて明確"
"に区別しています。サイト管理者は新たな話題やイベント、 スポーツのスコアなどの"
"入力にシステムを使い、コンテンツは公開用サイト上で表示されます。 Django は、"
"サイト管理者向けの一元化されたコンテンツ編集インタフェースを提供しています。"

msgid ""
"The admin isn't intended to be used by site visitors. It's for site managers."
msgstr ""
"admin はサイトの訪問者でなく、サイト管理者に使われることを意図しています。"

msgid "Creating an admin user"
msgstr "管理ユーザーを作成する"

msgid ""
"First we'll need to create a user who can login to the admin site. Run the "
"following command:"
msgstr ""
"まず最初に私達はadminサイトにログインできるユーザーを作成する必要があります。"
"下記のコマンドを実行します:"

msgid "Enter your desired username and press enter."
msgstr "好きなユーザー名を入力しEnterを押してください。"

msgid "You will then be prompted for your desired email address:"
msgstr "希望するemailアドレスを入力するよう促されます:"

msgid ""
"The final step is to enter your password. You will be asked to enter your "
"password twice, the second time as a confirmation of the first."
msgstr ""
"最後のステップはパスワードの入力です。2回目のパスワードが1回目と同じことを確"
"認するため、パスワードの入力を2回求められます。"

msgid "Start the development server"
msgstr "開発サーバーの起動"

msgid ""
"The Django admin site is activated by default. Let's start the development "
"server and explore it."
msgstr ""
"Django adminサイトはデフォルトで有効化されます。開発サーバーを起動して探索を"
"始めましょう。"

msgid "If the server is not running start it like so:"
msgstr "もしサーバーが起動していなかったら、このようにして起動しましょう:"

msgid ""
"Now, open a Web browser and go to \"/admin/\" on your local domain -- e.g., "
"http://127.0.0.1:8000/admin/. You should see the admin's login screen:"
msgstr ""
"次はブラウザを起動して、ローカルドメインの “/admin/” 、つまり "
"http://127.0.0.1:8000/admin/ にアクセスします。以下のような admin のログイ ン"
"画面が表示されるはずです:"

msgid ""
"Since :doc:`translation </topics/i18n/translation>` is turned on by default, "
"the login screen may be displayed in your own language, depending on your "
"browser's settings and if Django has a translation for this language."
msgstr ""
":doc:`translation </topics/i18n/translation>`はデフォルトでonになっていま"
"す。 あなたのブラウザの設定とDjangoの翻訳状況によって、ログインスクリーンはあ"
"なたの言語で表示されるかもしれません。"

msgid "Enter the admin site"
msgstr "admin サイトに入る"

msgid ""
"Now, try logging in with the superuser account you created in the previous "
"step. You should see the Django admin index page:"
msgstr ""
"今回は、前のステップで作成したスーパーユーザーのアカウントでログインを試して"
"みましょう。Django adminのインデックスページが表示されるはずです:"

msgid ""
"You should see a few types of editable content: groups and users. They are "
"provided by :mod:`django.contrib.auth`, the authentication framework shipped "
"by Django."
msgstr ""
"groupsとusersといういくつかのタイプの編集可能なコンテンツが閲覧できるはずで"
"す。これらはDjangoに含まれる認証フレームワーク :mod:`django.contrib.auth` に"
"よって提供されます。"

msgid "Make the poll app modifiable in the admin"
msgstr "Poll アプリを admin 上で編集できるようにする"

msgid "But where's our poll app? It's not displayed on the admin index page."
msgstr ""
"ところで、 polls アプリはどこにあるんでしょう？ admin のインデクスページを見"
"ても表示されていませんね。"

msgid ""
"Just one thing to do: we need to tell the admin that ``Question`` objects "
"have an admin interface. To do this, open the :file:`polls/admin.py` file, "
"and edit it to look like this:"
msgstr ""
"やるべきことは一つです: adminに\"Question\"オブジェクト達はadmin インタフェー"
"スを持つことを伝える必要があります。これを行うために、ファイル  :file:`polls/"
"admin.py` を開いてこのように編集しましょう:"

msgid "Explore the free admin functionality"
msgstr "admin の機能を探究してみる"

msgid ""
"Now that we've registered ``Question``, Django knows that it should be "
"displayed on the admin index page:"
msgstr ""
"今では私たちが\"Question\"を登録したので、Djangoはadmin インデクスページにこ"
"れを表示すべきだということを知っています:"

msgid ""
"Click \"Questions\". Now you're at the \"change list\" page for questions. "
"This page displays all the questions in the database and lets you choose one "
"to change it. There's the \"What's up?\" question we created earlier:"
msgstr ""
"\"Questions\"をクリックしましょう。questionsのための\"change list\"ページが表"
"示されます。このページにはデータベースの中のすべてのquestionsが表示され、あな"
"たはこの中のひとつを変更のために選択することができます。ここに私たちが以前作"
"成した\"What's UP?\" questionもあります:"

msgid "Click the \"What's up?\" question to edit it:"
msgstr "\"What's up?\" questionを編集するためにクリックしましょう:"

msgid "Things to note here:"
msgstr "以下の点に注意してください:"

msgid "The form is automatically generated from the ``Question`` model."
msgstr "フォームは ``Question`` モデルから自動的に生成されます。"

msgid ""
"The different model field types (:class:`~django.db.models.DateTimeField`, :"
"class:`~django.db.models.CharField`) correspond to the appropriate HTML "
"input widget. Each type of field knows how to display itself in the Django "
"admin."
msgstr ""
"モデルのフィールドの型 (:class:`~django.db.models.DateTimeField` 、 :class:"
"`~django.db.models.CharField` など) によって適切な HTML 入力ウィジェッ トが対"
"応しています。各種のフィールドには Django 管理サイトでデー タを表示する方法が"
"定義されています。"

msgid ""
"Each :class:`~django.db.models.DateTimeField` gets free JavaScript "
"shortcuts. Dates get a \"Today\" shortcut and calendar popup, and times get "
"a \"Now\" shortcut and a convenient popup that lists commonly entered times."
msgstr ""
"各 :class:`~django.db.models.DateTimeField` は JavaScript ショートカットがつ"
"いています。日付 (dates) のカラムには「今日 (today)」 へのショートカットとカ"
"レンダーポップアップボタンがあります。 時刻 (times) には「現在 (now)」への"
"ショートカットと、よく入力される時刻のリストを表示するポップアップボタンがあ"
"ります。"

msgid "The bottom part of the page gives you a couple of options:"
msgstr "ページの末尾の部分には操作ボタンがいくつか表示されています:"

msgid ""
"Save -- Saves changes and returns to the change-list page for this type of "
"object."
msgstr ""
"保存 (Save) – 変更を保存して、このモデルのチェンジリストのページに戻ります。"

msgid ""
"Save and continue editing -- Saves changes and reloads the admin page for "
"this object."
msgstr ""
"保存して編集を続ける (Save and continue editing) – 変更を保存して、このオブ"
"ジェクトの編集ページをリロードします。"

msgid ""
"Save and add another -- Saves changes and loads a new, blank form for this "
"type of object."
msgstr ""
"保存してもう一つ追加 (Save and add another) – 変更を保存して、このモデルのオ"
"ブジェクトを新規追加するための空の編集ページをロードします。"

msgid "Delete -- Displays a delete confirmation page."
msgstr "削除 (Delete) – 削除確認ページを表示します。"

msgid ""
"If the value of \"Date published\" doesn't match the time when you created "
"the question in :doc:`Tutorial 1</intro/tutorial01>`, it probably means you "
"forgot to set the correct value for the :setting:`TIME_ZONE` setting. Change "
"it, reload the page and check that the correct value appears."
msgstr ""
"もし「Data published」の値があなたが以前 :doc:`チュートリアルその1</intro/"
"tutorial01>` で作成した questionと一致しないのであれば、それはおそらくあなた"
"が :setting:`TIME_ZONE`  で正しい値を設定することを忘れていたことを意味しま"
"す。これを変更して、ページをリロードし、正しい値が表示されるかチェックしま"
"す。"

msgid ""
"Change the \"Date published\" by clicking the \"Today\" and \"Now\" "
"shortcuts. Then click \"Save and continue editing.\" Then click \"History\" "
"in the upper right. You'll see a page listing all changes made to this "
"object via the Django admin, with the timestamp and username of the person "
"who made the change:"
msgstr ""
"「今日」や「現在」ショートカットをクリックして、「Date published」を変更して"
"みましょう。変更したら、「保存して編集を続ける」を押します。次に、右上に ある"
"「履歴 (History)」をクリックしてみましょう。ユーザが管理サイト上でオブジェク"
"トに対して行った変更履歴の全てを、変更時刻と変更を行ったユーザ名付きでリスト"
"にしたページが表示されます:"

msgid ""
"When you're comfortable with the models API and have familiarized yourself "
"with the admin site, read :doc:`part 3 of this tutorial</intro/tutorial03>` "
"to learn about how to add more views to our polls app."
msgstr ""
"モデルのAPIや、あなた自身で親しみやすくしたadmin サイトが方があった方が具合が"
"いいと思うときは、polls アプリにより多くのビュー追加する方法を学習するため :"
"doc:`チュートリアルその3</intro/tutorial03>` を読みましょう。"

msgid "Writing your first Django app, part 3"
msgstr "はじめての Django アプリ作成、その 3"

msgid ""
"This tutorial begins where :doc:`Tutorial 2 </intro/tutorial02>` left off. "
"We're continuing the Web-poll application and will focus on creating the "
"public interface -- \"views.\""
msgstr ""
"このチュートリアルは :doc:`チュートリアルその 2 </intro/tutorial02>` の続きで"
"す。ここでは、引続き Web 投票アプリケーションの開発を例にして、公開用のインタ"
"フェース、ビュー(view) の作成を焦点に解説します。"

msgid "Overview"
msgstr "オーバービュー"

msgid ""
"A view is a \"type\" of Web page in your Django application that generally "
"serves a specific function and has a specific template. For example, in a "
"blog application, you might have the following views:"
msgstr ""
"ビューとは、 Django のアプリケーションにおいて特定の機能を提供するウェブペー "
"ジの「型 (type)」であり、各々のテンプレートを持っています。例えばブログアプリ"
"ケーションなら、以下のようなビューがあるでしょう:"

msgid "Blog homepage -- displays the latest few entries."
msgstr "Blog ホームページ - 最新エントリーをいくつか表示"

msgid "Entry \"detail\" page -- permalink page for a single entry."
msgstr "エントリー詳細ページ - 1エントリーへのパーマリンク (permalink) ページ"

msgid ""
"Year-based archive page -- displays all months with entries in the given "
"year."
msgstr "年ごとのアーカイブページ - 指定された年のエントリーの月を全て表示"

msgid ""
"Month-based archive page -- displays all days with entries in the given "
"month."
msgstr "月ごとのアーカイブページ - 指定された月のエントリーの日をすべて表示"

msgid "Day-based archive page -- displays all entries in the given day."
msgstr "日ごとのアーカイブページ - 指定された日の全てのエントリーを表示"

msgid "Comment action -- handles posting comments to a given entry."
msgstr "コメント投稿 - エントリーに対するコメントの投稿を受付"

msgid "In our poll application, we'll have the following four views:"
msgstr "投票アプリケーションでは、以下4つのビューを作成します:"

msgid "Question \"index\" page -- displays the latest few questions."
msgstr "質問 \"インデックス\" ページ -- 最新の質問をいくつか表示"

msgid ""
"Question \"detail\" page -- displays a question text, with no results but "
"with a form to vote."
msgstr ""
"質問 \"詳細\" ページ -- 結果を表示せず、質問テキストと投票フォームを表示"

msgid ""
"Question \"results\" page -- displays results for a particular question."
msgstr "質問 \"結果\" ページ -- 特定の質問の結果を表示"

msgid ""
"Vote action -- handles voting for a particular choice in a particular "
"question."
msgstr "投票ページ -- 特定の質問の選択を投票として受付"

msgid ""
"In Django, web pages and other content are delivered by views. Each view is "
"represented by a simple Python function (or method, in the case of class-"
"based views). Django will choose a view by examining the URL that's "
"requested (to be precise, the part of the URL after the domain name)."
msgstr ""
"Django へだ、各ページとコンテンツはビューによって提供されます。各ビューは単純"
"に Python 関数 (クラスベースビューの場合はメソッド) として実装されています。 "
"Django はビューを、リクエストされたURLから決定します (正確には、URLのドメイン"
"移行の部分)"

msgid ""
"Now in your time on the web you may have come across such beauties as \"ME2/"
"Sites/dirmod.asp?sid=&type=gen&mod=Core+Pages&gid=A6CD4967199A42D9B65B1B\". "
"You will be pleased to know that Django allows us much more elegant *URL "
"patterns* than that."
msgstr ""
"インターネットサーフィンをしてるときなどに、 \"ME2/Sites/dirmod.asp?"
"sid=&type=gen&mod=Core+Pages&gid=A6CD4967199A42D9B65B1B\" のような美しいURLを"
"見かけることがあるでしょう。 Django はこんなものよりもっとエレガントな \"URL"
"パターン\" を提供していると知っておいてください。"

msgid ""
"A URL pattern is simply the general form of a URL - for example: ``/"
"newsarchive/<year>/<month>/``."
msgstr ""
"URLパターンはURLをシンプルに一般化したものです。例えば \"/newsarchive/<year>/"
"<month>/\" などです。"

msgid ""
"To get from a URL to a view, Django uses what are known as 'URLconfs'. A "
"URLconf maps URL patterns (described as regular expressions) to views."
msgstr ""
"URLからビューには、 Django は 'URLconfs' として知られているものを使います。 "
"URLconf は (正規表現で表される) URLパターンとビューを対応付けます。"

msgid ""
"This tutorial provides basic instruction in the use of URLconfs, and you can "
"refer to :mod:`django.urls` for more information."
msgstr ""
"このチュートリアルでは基本的な URLconf の使い方を紹介します。詳細については :"
"mod:`django.urls` を参照してください。"

msgid "Writing more views"
msgstr "もっとビューを書いてみる"

msgid ""
"Now let's add a few more views to ``polls/views.py``. These views are "
"slightly different, because they take an argument:"
msgstr ""
"それではもう少しviewを ``polls/views.py`` に追加していきましょう。これから追"
"加するviewでは引数をとります。"

msgid ""
"Wire these new views into the ``polls.urls`` module by adding the following :"
"func:`~django.conf.urls.url` calls:"
msgstr ""
"以下の :func:`~django.conf.urls.url` コールを追加して、新しいviewを ``polls."
"urls`` と結びつけます。"

msgid ""
"Take a look in your browser, at \"/polls/34/\". It'll run the ``detail()`` "
"method and display whatever ID you provide in the URL. Try \"/polls/34/"
"results/\" and \"/polls/34/vote/\" too -- these will display the placeholder "
"results and voting pages."
msgstr ""
"お使いのブラウザで、 \"/polls/34/\" を見てください。 ``detail()`` メソッドが"
"実行され、URLで提供したIDが表示されます。\"/polls/34/results/\" と \"/"
"polls/34/vote/\" も試してください。結果と投票ページのプレースホルダがそれぞれ"
"表示されます。"

msgid ""
"When somebody requests a page from your website -- say, \"/polls/34/\", "
"Django will load the ``mysite.urls`` Python module because it's pointed to "
"by the :setting:`ROOT_URLCONF` setting. It finds the variable named "
"``urlpatterns`` and traverses the regular expressions in order. After "
"finding the match at ``'^polls/'``, it strips off the matching text (``"
"\"polls/\"``) and sends the remaining text -- ``\"34/\"`` -- to the 'polls."
"urls' URLconf for further processing. There it matches ``r'^(?"
"P<question_id>[0-9]+)/$'``, resulting in a call to the ``detail()`` view "
"like so::"
msgstr ""
"誰かがWebサイトの \"/polls/34/\" をリクエストすると、 Django は :setting:"
"`ROOT_URLCONF` に指定されている、 Python モジュール ``mysite.urls`` をロード"
"します。そのモジュール内の ``urlpatterns`` という変数を探し、その中に入ってい"
"る正規表現を順に検査してゆきます。 ``'^polls/'`` に合致した箇所を見つけた後、"
"一致した文字列 (``\"polls/\"``) を除き、残りの文字列である ``\"34/\"`` を次の"
"処理のために 'polls.urls' の URLconf に渡します。これは ``r'^(?"
"P<question_id>[0-9]+)/$'`` に合致し、結果として下記のように ``detail()`` が呼"
"ばれます。"

msgid ""
"The ``question_id='34'`` part comes from ``(?P<question_id>[0-9]+)``. Using "
"parentheses around a pattern \"captures\" the text matched by that pattern "
"and sends it as an argument to the view function; ``?P<question_id>`` "
"defines the name that will be used to identify the matched pattern; and "
"``[0-9]+`` is a regular expression to match a sequence of digits (i.e., a "
"number)."
msgstr ""
"``question_id='34'`` の部分は、 ``(?P<question_id>[0-9]+)`` から来ています。"
"パターンの前後に括弧を使用すると、そのパターンにマッチしたテキストを \"キャプ"
"チャ\" し、ビュー関数の引数として、それを送信します。 ``?P<question_id>`` は"
"マッチしたパターンを識別するために使用する名前を定義します。 ``[0-9]+`` は一"
"桁以上の数字(すなわち、数)にマッチする正規表現です。"

msgid ""
"Because the URL patterns are regular expressions, there really is no limit "
"on what you can do with them. And there's no need to add URL cruft such as "
"``.html`` -- unless you want to, in which case you can do something like "
"this::"
msgstr ""
"URL パターンは正規表現であるため、正規表現で実現できる限り制限はありません。"
"また、 ``.html`` のような文字列を URL に追加する必要もありません。ただし、次"
"のようにすれば、表現できます::"

msgid "But, don't do that. It's silly."
msgstr "とはいえ、こんな阿呆なことはやめましょう。"

msgid "Write views that actually do something"
msgstr "実際に動作するビューを書く"

msgid ""
"Each view is responsible for doing one of two things: returning an :class:"
"`~django.http.HttpResponse` object containing the content for the requested "
"page, or raising an exception such as :exc:`~django.http.Http404`. The rest "
"is up to you."
msgstr ""
"各ビューには二つの役割があります: 一つはリクエストされたページのコ ンテンツを"
"含む :class:`~django.http.HttpResponse` オブジェクトを返すこと、もう一つは :"
"exc:`~django.http.Http404` のような例外の送出です。それ以外の処理はユーザ次第"
"です。"

msgid ""
"Your view can read records from a database, or not. It can use a template "
"system such as Django's -- or a third-party Python template system -- or "
"not. It can generate a PDF file, output XML, create a ZIP file on the fly, "
"anything you want, using whatever Python libraries you want."
msgstr ""
"ビューはデータベースからレコードを読みだしても、読み出さなくてもかまいませ"
"ん。 Django のテンプレートシステム、あるいはサードパーティの Python テンプ "
"レートシステムを使ってもよいですし、使わなくてもかまいません。 PDF ファイルを"
"生成しても、 XML を出力しても、 ZIP ファイルをその場で生成してもかまいませ"
"ん。 Python ライブラリを使ってやりたいことを何でも実現できます。"

msgid ""
"All Django wants is that :class:`~django.http.HttpResponse`. Or an exception."
msgstr ""
"Django にとって必要なのは :class:`~django.http.HttpResponse` か、あるいは例外"
"です。"

msgid ""
"Because it's convenient, let's use Django's own database API, which we "
"covered in :doc:`Tutorial 2 </intro/tutorial02>`. Here's one stab at a new "
"``index()`` view, which displays the latest 5 poll questions in the system, "
"separated by commas, according to publication date:"
msgstr ""
"簡単のため、 :doc:`チュートリアルその 2 </intro/tutorial02>` で解説した "
"Django のデータベース API を使ってみましょう。 ``index()`` ビューを、システム"
"上にある最新の 5 件の質問項目をカンマで区切り、日付順に表示させてみます:"

msgid ""
"There's a problem here, though: the page's design is hard-coded in the view. "
"If you want to change the way the page looks, you'll have to edit this "
"Python code. So let's use Django's template system to separate the design "
"from Python by creating a template that the view can use."
msgstr ""
"このコードには問題があります。ビューの中で、ページのデザインがハードコードさ"
"れています。ページの見栄えを変更するたびに、 Python コードを編集する必要があ"
"ります。 Django のテンプレートシステムを使って、ビューから使用できるテンプ"
"レートを作成し、Python からデザインを分離しましょう。"

msgid ""
"First, create a directory called ``templates`` in your ``polls`` directory. "
"Django will look for templates in there."
msgstr ""
"最初に、 ``polls`` ディレクトリの中に、 ``templates``  ディレクトリを作成しま"
"す。 Django はそこからテンプレートを探します。"

msgid ""
"Your project's :setting:`TEMPLATES` setting describes how Django will load "
"and render templates. The default settings file configures a "
"``DjangoTemplates`` backend whose :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` "
"option is set to ``True``. By convention ``DjangoTemplates`` looks for a "
"\"templates\" subdirectory in each of the :setting:`INSTALLED_APPS`."
msgstr ""
"Django がどのようにテンプレートをロードしレンダリングするかについて、プロジェ"
"クトの :setting:`TEMPLATES` の設定を説明します。デフォルトの "
"``DjangoTemplates`` の設定ファイルは、 :setting:`APP_DIRS <TEMPLATES-"
"APP_DIRS>` のオプションが ``True`` に設定されています。設定により、 "
"``DjangoTemplates`` は :setting:`INSTALLED_APPS` のそれぞれのサブディレクトリ"
"の \"templates\" を検索します。"

msgid ""
"Within the ``templates`` directory you have just created, create another "
"directory called ``polls``, and within that create a file called ``index."
"html``. In other words, your template should be at ``polls/templates/polls/"
"index.html``. Because of how the ``app_directories`` template loader works "
"as described above, you can refer to this template within Django simply as "
"``polls/index.html``."
msgstr ""
"先ほど作成した ``templates`` ディレクトリ内では、 ``polls`` と呼ばれる別の"
"ディレクトリを作成し、その中に ``index.html`` というファイルを作成します。つ"
"まり、テンプレートは ``polls/templates/polls/index.html`` にする必要がありま"
"す。そのため、 ``app_directories`` テンプレートローダは前述したように、"
"Django 内でこのテンプレートを ``polls/index.html`` として参照することができま"
"す。"

msgid "Template namespacing"
msgstr "テンプレートの名前空間"

msgid ""
"Now we *might* be able to get away with putting our templates directly in "
"``polls/templates`` (rather than creating another ``polls`` subdirectory), "
"but it would actually be a bad idea. Django will choose the first template "
"it finds whose name matches, and if you had a template with the same name in "
"a *different* application, Django would be unable to distinguish between "
"them. We need to be able to point Django at the right one, and the easiest "
"way to ensure this is by *namespacing* them. That is, by putting those "
"templates inside *another* directory named for the application itself."
msgstr ""
"作ったテンプレートを ``polls`` という別のサブディレクトリを作らずに、直接 "
"``polls/templates`` の中に置いてもいいのではないか、と思うかもしれませんね。"
"しかし、それは実際には悪い考えです。Django は、名前がマッチした最初のテンプ"
"レートを使用するので、もし *異なる* アプリケーションの中に同じ名前のテンプ"
"レートがあった場合、Django はそれらを区別することができません。そのため、"
"Django に正しいテンプレートを教えてあげる必要がありますが、一番簡単な方法は、"
"それらに *名前空間を与える*  ことです。アプリケーションと同じ名前をつけた *も"
"う一つの* ディレクトリの中にテンプレートを置いたのは、そういうわけなのです。"

msgid "Put the following code in that template:"
msgstr "テンプレートには次のコードを書きます:"

msgid ""
"Now let's update our ``index`` view in ``polls/views.py`` to use the "
"template:"
msgstr ""
"テンプレートを使用するために ``polls/views.py`` の ``index`` ビューを更新して"
"みましょう:"

msgid ""
"That code loads the template called  ``polls/index.html`` and passes it a "
"context. The context is a dictionary mapping template variable names to "
"Python objects."
msgstr ""
"このコードは、 ``polls/index.html`` というテンプレートをロードし、コンテキス"
"トを渡します。コンテキストは、テンプレート変数名を Python オブジェクトへの"
"マッピングしている辞書です。"

msgid ""
"Load the page by pointing your browser at \"/polls/\", and you should see a "
"bulleted-list containing the \"What's up\" question from :doc:`Tutorial 2 </"
"intro/tutorial02>`. The link points to the question's detail page."
msgstr ""
"ブラウザで \"/polls/\" を開くと、 :doc:`チュートリアルその2 </intro/"
"tutorial02>` で作った、 \"What's up\" という質問の入ったブレットリストを表示"
"します。リンクは質問の詳細ページを指します。"

msgid "A shortcut: :func:`~django.shortcuts.render`"
msgstr "ショートカット: :func:`~django.shortcuts.render`"

msgid ""
"It's a very common idiom to load a template, fill a context and return an :"
"class:`~django.http.HttpResponse` object with the result of the rendered "
"template. Django provides a shortcut. Here's the full ``index()`` view, "
"rewritten:"
msgstr ""
"テンプレートをロードしてコンテキストに値を入れ、テンプレートをレンダリングし"
"た結果を :class:`~django.http.HttpResponse`  オブジェクトで返す、というイディ"
"オムは非常によく使われます。 Django はこのためのショートカットを提供します。"
"これを使って ``index()`` ビューを書き換えてみましょう:"

msgid ""
"Note that once we've done this in all these views, we no longer need to "
"import :mod:`~django.template.loader` and :class:`~django.http.HttpResponse` "
"(you'll want to keep ``HttpResponse`` if you still have the stub methods for "
"``detail``, ``results``, and ``vote``)."
msgstr ""
"この作業によって、 :mod:`~django.template.loader` や :class:`~django.http."
"HttpResponse` ( ``detail`` 、 ``results`` や  ``vote`` のスタブメソッドがある"
"場合は ``HttpResponse`` のままにします) を import する必要はなくなりました。"

msgid ""
"The :func:`~django.shortcuts.render` function takes the request object as "
"its first argument, a template name as its second argument and a dictionary "
"as its optional third argument. It returns an :class:`~django.http."
"HttpResponse` object of the given template rendered with the given context."
msgstr ""
":func:`~django.shortcuts.render` 関数は、第1引数として request  オブジェク"
"ト、第2引数としてテンプレート名、第3引数としてその他のオプション辞書を受け取"
"ります。この関数はテンプレートを指定のコンテキストでレンダリングし、 :class:"
"`~django.http.HttpResponse` オブジェクトを返します。"

msgid "Raising a 404 error"
msgstr "404 エラーの送出"

msgid ""
"Now, let's tackle the question detail view -- the page that displays the "
"question text for a given poll. Here's the view:"
msgstr ""
"指定された投票の質問文を表示するページの詳細ビューを片付けましょう。ビューは"
"次のようになります:"

msgid ""
"The new concept here: The view raises the :exc:`~django.http.Http404` "
"exception if a question with the requested ID doesn't exist."
msgstr ""
"新しい概念がでて来ました。このビューはリクエストした ID を持つ質問が存在しな"
"いときに :exc:`~django.http.Http404` を送出します。"

msgid ""
"We'll discuss what you could put in that ``polls/detail.html`` template a "
"bit later, but if you'd like to quickly get the above example working, a "
"file containing just:"
msgstr ""
"``polls/detail.html`` テンプレートに何を書けばよいかは後で解説しますが、さし"
"あたって上の例題を動かしたければ、さ しあたって上の例題を動かしたければ、単"
"に:"

msgid "will get you started for now."
msgstr "と書いておいてください。"

msgid "A shortcut: :func:`~django.shortcuts.get_object_or_404`"
msgstr "ショートカット: :func:`~django.shortcuts.get_object_or_404`"

msgid ""
"It's a very common idiom to use :meth:`~django.db.models.query.QuerySet.get` "
"and raise :exc:`~django.http.Http404` if the object doesn't exist. Django "
"provides a shortcut. Here's the ``detail()`` view, rewritten:"
msgstr ""
":meth:`~django.db.models.query.QuerySet.get` を実行し、オブジェクトが存在しな"
"い場合には :exc:`~django.http.Http404` を送出することは非常によく使われるイ"
"ディオムです。 Django はこのためのショートカットを提供しています。ショート"
"カットを使って、 ``detail()`` ビューを書き換えてみましょう:"

msgid ""
"The :func:`~django.shortcuts.get_object_or_404` function takes a Django "
"model as its first argument and an arbitrary number of keyword arguments, "
"which it passes to the :meth:`~django.db.models.query.QuerySet.get` function "
"of the model's manager. It raises :exc:`~django.http.Http404` if the object "
"doesn't exist."
msgstr ""
" :func:`~django.shortcuts.get_object_or_404`  関数は、第一引数に Django のモ"
"デル、任意の個数のキーワード引数をとります。キーワード引数はそのまま、モデル"
"のマネージャの :meth:`~django.db.models.query.QuerySet.get` に渡します。オブ"
"ジェクトが存在しなければ、 :exc:`~django.http.Http404` を送出します。"

msgid ""
"Why do we use a helper function :func:`~django.shortcuts.get_object_or_404` "
"instead of automatically catching the :exc:`~django.core.exceptions."
"ObjectDoesNotExist` exceptions at a higher level, or having the model API "
"raise :exc:`~django.http.Http404` instead of :exc:`~django.core.exceptions."
"ObjectDoesNotExist`?"
msgstr ""
"なぜ :exc:`~django.core.exceptions.ObjectDoesNotExist` 例外を高水準で自動的に"
"キャッチせず、ヘルパー関数 :func:`~django.shortcuts.get_object_or_404` を使う"
"のでしょうか、また、なぜモデル API に :exc:`~django.core.exceptions."
"ObjectDoesNotExist` ではなく、 :exc:`~django.http.Http404` を送出させるので"
"しょうか?"

msgid ""
"Because that would couple the model layer to the view layer. One of the "
"foremost design goals of Django is to maintain loose coupling. Some "
"controlled coupling is introduced in the :mod:`django.shortcuts` module."
msgstr ""
"答えは、モデルレイヤとビューレイヤをカップリングしてしまうからです。 Django "
"の最も大きな目標の一つは、ルーズカップリングの維持にあります。いくつかの制御"
"カップリングは、 :mod:`django.shortcuts` モジュールの中にあります。"

msgid ""
"There's also a :func:`~django.shortcuts.get_list_or_404` function, which "
"works just as :func:`~django.shortcuts.get_object_or_404` -- except using :"
"meth:`~django.db.models.query.QuerySet.filter` instead of :meth:`~django.db."
"models.query.QuerySet.get`. It raises :exc:`~django.http.Http404` if the "
"list is empty."
msgstr ""
":func:`~django.shortcuts.get_list_or_404` という関数もあります。この関数は  :"
"func:`~django.shortcuts.get_object_or_404` と同じように動きますが、 :meth:"
"`~django.db.models.query.QuerySet.get` ではなく、  :meth:`~django.db.models."
"query.QuerySet.filter` を使います。リストが空の場合は :exc:`~django.http."
"Http404` を送出します。"

msgid "Use the template system"
msgstr "テンプレートシステムを使う"

msgid ""
"Back to the ``detail()`` view for our poll application. Given the context "
"variable ``question``, here's what the ``polls/detail.html`` template might "
"look like:"
msgstr ""
"投票アプリの ``detail()`` ビューに戻りましょう。コンテキスト変数  "
"``question`` とすると、 ``polls/detail.html`` テンプレートは次のようなります:"

msgid ""
"The template system uses dot-lookup syntax to access variable attributes. In "
"the example of ``{{ question.question_text }}``, first Django does a "
"dictionary lookup on the object ``question``. Failing that, it tries an "
"attribute lookup -- which works, in this case. If attribute lookup had "
"failed, it would've tried a list-index lookup."
msgstr ""
"テンプレートシステムは、変数の属性にアクセスするためにドット使った表記法を使"
"用します。 ``{{ question.question_text }}`` を例にすると、はじめに Django は "
"`` question`` オブジェクトを辞書検索を行います。これには失敗するので、今度は"
"属性として検索を行い、この場合は成功します。仮に、属性の検索に失敗すると、リ"
"ストインデックスでの検索を行います。"

msgid ""
"Method-calling happens in the :ttag:`{% for %}<for>` loop: ``question."
"choice_set.all`` is interpreted as the Python code ``question.choice_set."
"all()``, which returns an iterable of ``Choice`` objects and is suitable for "
"use in the :ttag:`{% for %}<for>` tag."
msgstr ""
"メソッドの呼び出しは :ttag:`{% for %}<for>` ループの中で行われています。 "
"``question.choice_set.all`` は、 Python コードの ``question.choice_set."
"all()`` と解釈されます。その結果、``Choice`` オブジェクトからなるイテレーショ"
"ン可能オブジェ クトを返し、 :ttag:`{% for %}<for>` タグで使えるようになりま"
"す。"

msgid ""
"See the :doc:`template guide </topics/templates>` for more about templates."
msgstr ""
"テンプレートの詳しい動作は  :doc:`テンプレートガイド </topics/templates>` を"
"参照してください。"

msgid "Removing hardcoded URLs in templates"
msgstr "テンプレート内のハードコードされたURLを削除"

msgid ""
"Remember, when we wrote the link to a question in the ``polls/index.html`` "
"template, the link was partially hardcoded like this:"
msgstr ""
"``polls/index.html`` テンプレートで質問へのリンクを書いたとき、リンクの一部は"
"次のようにハードコードされていました:"

msgid ""
"The problem with this hardcoded, tightly-coupled approach is that it becomes "
"challenging to change URLs on projects with a lot of templates. However, "
"since you defined the name argument in the :func:`~django.conf.urls.url` "
"functions in the ``polls.urls`` module, you can remove a reliance on "
"specific URL paths defined in your url configurations by using the ``{% url "
"%}`` template tag:"
msgstr ""
"このハードコードされた、密結合のアプローチの問題は、多くのテンプレートを伴う"
"プロジェクトで、URLを変更することを困難にすることです。しかし、 ``polls."
"urls`` モジュール内の :func:`~django.conf.urls.url` 関数の name 引数を定義し"
"たため、テンプレートタグの ``{% url %}`` を用いることで、 URL 設定で定義され"
"た特定の URL パスへの依存をなくすことができます:"

msgid ""
"The way this works is by looking up the URL definition as specified in the "
"``polls.urls`` module. You can see exactly where the URL name of 'detail' is "
"defined below::"
msgstr ""
"これが機能する方法は、 ``polls.urls`` モジュールに指定されたURLの定義を調べる"
"ことです。'detail' のURL名は次に定義されている場所を正確に見ることができま"
"す::"

msgid ""
"If you want to change the URL of the polls detail view to something else, "
"perhaps to something like ``polls/specifics/12/`` instead of doing it in the "
"template (or templates) you would change it in ``polls/urls.py``::"
msgstr ""
"投票の詳細ビューの URL を何か他のものに変更したい場合、たとえば  ``polls/"
"specifics/12/`` のように変更したいとき、対象となる(複数の)テンプレートを変更"
"する代わりに、 ``polls/urls.py`` を変更します::"

msgid "Namespacing URL names"
msgstr "URL 名の名前空間"

msgid ""
"The tutorial project has just one app, ``polls``. In real Django projects, "
"there might be five, ten, twenty apps or more. How does Django differentiate "
"the URL names between them? For example, the ``polls`` app has a ``detail`` "
"view, and so might an app on the same project that is for a blog. How does "
"one make it so that Django knows which app view to create for a url when "
"using the ``{% url %}`` template tag?"
msgstr ""
"チュートリアルプロジェクトは「polls」というただ一つのアプリを含みます。本物の"
"Djangoプロジェクトでは、これらは5, 10 , 20かより多くのアプリになるでしょう。"
"Djangoはどうやってこれらの間のURL 名を区別するのでしょうか?例えば、「polls」"
"アプリは詳細ビューを含みます、同じプロジェクトにブログのためのアプリがあるか"
"もしれません。どうすれば、Djangoは ``{% url %}`` テンプレートタグを使ってurl"
"に対してどのアプリのビューを作成すればいいと知ることができるのでしょう？"

msgid ""
"The answer is to add namespaces to your  URLconf. In the ``polls/urls.py`` "
"file, go ahead and add an ``app_name`` to set the application namespace:"
msgstr ""
"URLconfに名前空間を追加すること、が答えです。 ``polls/urls.py`` ファイル内"
"の、アプリケーションの名前空間を設定するため ``app_name`` の箇所に向かい追加"
"します。"

msgid "Now change your ``polls/index.html`` template from:"
msgstr "それでは ``polls/index.html`` テンプレートを変更します:"

msgid "to point at the namespaced detail view:"
msgstr "詳細ビューの名前空間を指します:"

msgid ""
"When you're comfortable with writing views, read :doc:`part 4 of this "
"tutorial </intro/tutorial04>` to learn about simple form processing and "
"generic views."
msgstr ""
"ビューを書けるようになったら、 :doc:`チュートリアルその4  </intro/"
"tutorial04>`  に進んで、簡単なフォームの処理と汎用ビューについて学びましょ"
"う。"

msgid "Writing your first Django app, part 4"
msgstr "はじめての Django アプリ作成、その 4"

msgid ""
"This tutorial begins where :doc:`Tutorial 3 </intro/tutorial03>` left off. "
"We're continuing the Web-poll application and will focus on simple form "
"processing and cutting down our code."
msgstr ""
"このチュートリアルは :doc:`チュートリアルその 3 </intro/tutorial03>` の続きで"
"す。ここでは、引続き Web 投票アプリケーションの開発を例にして、簡単なフォー "
"ム処理とコードの縮小化を中心に解説します。"

msgid "Write a simple form"
msgstr "簡単なフォームを書く"

msgid ""
"Let's update our poll detail template (\"polls/detail.html\") from the last "
"tutorial, so that the template contains an HTML ``<form>`` element:"
msgstr ""
"それでは、前回のチュートリアルで作成した投票詳細テンプレート (\"polls/detail."
"html\") を更新して、HTML の ``<form>`` 要素を入れましょう。"

msgid "A quick rundown:"
msgstr "簡単に説明:"

msgid ""
"The above template displays a radio button for each question choice. The "
"``value`` of each radio button is the associated question choice's ID. The "
"``name`` of each radio button is ``\"choice\"``. That means, when somebody "
"selects one of the radio buttons and submits the form, it'll send the POST "
"data ``choice=#`` where # is the ID of the selected choice. This is the "
"basic concept of HTML forms."
msgstr ""
"上のテンプレートは、各質問の選択肢のラジオボタンが表示されます。各ラジオボタ"
"ンの ``value`` は、関連する質問の選択肢のIDです。各ラジオボタンの ``name`` "
"は ``\"choice\"`` です。投票者がラジオボタンの1つを選択し、フォームを送信する"
"場合には、POSTデータ ``choice=#`` を送信します。＃の場所には選択肢のIDが入り"
"ます。これは、HTMLフォームの基本的な概念です。"

msgid ""
"We set the form's ``action`` to ``{% url 'polls:vote' question.id %}``, and "
"we set ``method=\"post\"``. Using ``method=\"post\"`` (as opposed to "
"``method=\"get\"``) is very important, because the act of submitting this "
"form will alter data server-side. Whenever you create a form that alters "
"data server-side, use ``method=\"post\"``. This tip isn't specific to "
"Django; it's just good Web development practice."
msgstr ""
"フォームの ``action`` を ``{% url 'polls:vote' question.id %}`` に設定し、 さ"
"らに、 ``method=\"post\"`` を設定します。``method=\"post\"`` を使用する "
"(``method=\"get\"`` ではなく) ことは非常に重要です。なぜなら、フォームの送信"
"はサーバ側のデータの更新につながるからです。サーバ側のデータを更新するフォー"
"ムを作成する場合は、 ``method=\"post\"`` を使いましょう。これは、 Django 固有"
"のものではなく、いわば Web 開発の王道です。"

msgid ""
"``forloop.counter`` indicates how many times the :ttag:`for` tag has gone "
"through its loop"
msgstr ""
"``forloop.counter`` は、ttag:`for` タグのループが何度実行されたかを表す値で"
"す。"

msgid ""
"Since we're creating a POST form (which can have the effect of modifying "
"data), we need to worry about Cross Site Request Forgeries. Thankfully, you "
"don't have to worry too hard, because Django comes with a very easy-to-use "
"system for protecting against it. In short, all POST forms that are targeted "
"at internal URLs should use the :ttag:`{% csrf_token %}<csrf_token>` "
"template tag."
msgstr ""
"POST フォーム(データを改ざんされる恐れのある) を作成しているので、クロス サイ"
"トリクエストフォージェリを心配する必要があります。ありがたいことに、 Django "
"がこれに対応するとても使いやすい仕組みを提供してくれているので、あまり心配す"
"る必要はありません。手短に言うと、全ての自サイトへの  POST フォームに、 :"
"ttag:`{% csrf_token %}<csrf_token>` テンプレートタグを使います。"

msgid ""
"Now, let's create a Django view that handles the submitted data and does "
"something with it. Remember, in :doc:`Tutorial 3 </intro/tutorial03>`, we "
"created a URLconf for the polls application that includes this line:"
msgstr ""
"送信されたデータを処理するための Django のビューを作成しましょう。 :doc:`"
"チュートリアルその 3 </intro/tutorial03>` で、以下のような投票アプリケーショ"
"ンの URLconf を作成したことを思い出しましょう:"

msgid ""
"We also created a dummy implementation of the ``vote()`` function. Let's "
"create a real version. Add the following to ``polls/views.py``:"
msgstr ""
"すでに、 ``vote()`` 関数のダミー実装を作成しました。今度は、本物を実装しま"
"しょう。以下を ``polls/views.py`` に追加してください:"

msgid ""
"This code includes a few things we haven't covered yet in this tutorial:"
msgstr ""
"このコードには、これまでのチュートリアルで扱っていなかったことがいくつか入っ"
"ています:"

msgid ""
":attr:`request.POST <django.http.HttpRequest.POST>` is a dictionary-like "
"object that lets you access submitted data by key name. In this case, "
"``request.POST['choice']`` returns the ID of the selected choice, as a "
"string. :attr:`request.POST <django.http.HttpRequest.POST>` values are "
"always strings."
msgstr ""
":attr:`request.POST <django.http.HttpRequest.POST>` は送信したキーの名前で"
"データにアクセスできる辞書のようなオブジェクトです。この場合、 ``request."
"POST['choice']`` は、選択された選択肢の ID を文字列として返します。 :attr:"
"`request.POST <django.http.HttpRequest.POST>` の値は常に文字列です。"

msgid ""
"Note that Django also provides :attr:`request.GET <django.http.HttpRequest."
"GET>` for accessing GET data in the same way -- but we're explicitly using :"
"attr:`request.POST <django.http.HttpRequest.POST>` in our code, to ensure "
"that data is only altered via a POST call."
msgstr ""
"Django では、GET データにアクセスするために同様に :attr:`request.GET <django."
"http.HttpRequest.GET>` を提供しています。ただし、このコードでは、POST を経由"
"した呼び出しでないとデータを更新させないようにするために、:attr:`request."
"POST <django.http.HttpRequest.POST>` を明示的に使っています。"

msgid ""
"``request.POST['choice']`` will raise :exc:`KeyError` if ``choice`` wasn't "
"provided in POST data. The above code checks for :exc:`KeyError` and "
"redisplays the question form with an error message if ``choice`` isn't given."
msgstr ""
"POST データに ``choice`` がなければ、 ``request.POST['choice']`` は :exc:"
"`KeyError` を送出します。上のコードでは :exc:`KeyError` をチェックし、 "
"``choice`` がない場合にはエラーメッセージ付きの質問フォームを再表示します。"

msgid ""
"After incrementing the choice count, the code returns an :class:`~django."
"http.HttpResponseRedirect` rather than a normal :class:`~django.http."
"HttpResponse`. :class:`~django.http.HttpResponseRedirect` takes a single "
"argument: the URL to which the user will be redirected (see the following "
"point for how we construct the URL in this case)."
msgstr ""
"choice のカウントをインクリメントした後、このコードは、  通常の :class:"
"`~django.http.HttpResponse` ではなく :class:`~django.http."
"HttpResponseRedirect` を返します。 :class:`~django.http."
"HttpResponseRedirect` はひとつの引数をとります: リダイレクト先のURL (このよう"
"な場合にURLを構築する方法については、以下のポイントを参照してください)"

msgid ""
"As the Python comment above points out, you should always return an :class:"
"`~django.http.HttpResponseRedirect` after successfully dealing with POST "
"data. This tip isn't specific to Django; it's just good Web development "
"practice."
msgstr ""
"上記の Python コメントが指摘するように、POST データが成功した後に :class:"
"`~django.http.HttpResponseRedirect` を常に返す必要があります。これは Django "
"固有のものではありません。それは良い Web 開発のプラクティスです。"

msgid ""
"We are using the :func:`~django.urls.reverse` function in the :class:"
"`~django.http.HttpResponseRedirect` constructor in this example. This "
"function helps avoid having to hardcode a URL in the view function. It is "
"given the name of the view that we want to pass control to and the variable "
"portion of the URL pattern that points to that view. In this case, using the "
"URLconf we set up in :doc:`Tutorial 3 </intro/tutorial03>`, this :func:"
"`~django.urls.reverse` call will return a string like ::"
msgstr ""
"この例では、 :class:`~django.http.HttpResponseRedirect` コンストラクタの中"
"で :func:`~django.urls.reverse` 関数を使用しています。この関数を使うと、"
"ビュー関数中での URL のハードコードを防げます。関数には、制御を渡したいビュー"
"の名前と、そのビューに与える URL パターンの位置引数を与えます。この例では、 :"
"doc:`チュートリアルその 3</intro/tutorial03>` で設定した URLconf を使っている"
"ので、 :func:`~django.urls.reverse` を呼ぶと、次のような文字列が返ってきま"
"す。"

msgid ""
"where the ``3`` is the value of ``question.id``. This redirected URL will "
"then call the ``'results'`` view to display the final page."
msgstr ""
"この ``3`` は ``question.id`` の値です。 リダイレクト先の URL は "
"``'results'`` ビューを呼び出し、最終的なページを表示します。"

msgid ""
"As mentioned in :doc:`Tutorial 3 </intro/tutorial03>`, ``request`` is an :"
"class:`~django.http.HttpRequest` object. For more on :class:`~django.http."
"HttpRequest` objects, see the :doc:`request and response documentation </ref/"
"request-response>`."
msgstr ""
":doc:`チュートリアルその 3 </intro/tutorial03>` で触れたように、 ``request`` "
"は :class:`~django.http.HttpRequest` オブジェクトです。 :class:`~django.http."
"HttpRequest` オブジェクトの詳細は :doc:`リクエスト・レスポンスオブジェクトの"
"ドキュメント </ref/request-response>` を参照してください。"

msgid ""
"After somebody votes in a question, the ``vote()`` view redirects to the "
"results page for the question. Let's write that view:"
msgstr ""
"誰かが質問の投票すると、 ``vote()`` ビューは質問の結果ページにリダイレクトし"
"ます。このビューを書きましょう:"

msgid ""
"This is almost exactly the same as the ``detail()`` view from :doc:`Tutorial "
"3 </intro/tutorial03>`. The only difference is the template name. We'll fix "
"this redundancy later."
msgstr ""
":doc:`チュートリアルその 3 </intro/tutorial03>` の ``detail()`` とほぼ同じで"
"す。テンプレートの名前のみ違います。この冗長さは後で修正することにします。"

msgid "Now, create a ``polls/results.html`` template:"
msgstr "それでは ``polls/results.html`` テンプレートを作成します:"

msgid ""
"Now, go to ``/polls/1/`` in your browser and vote in the question. You "
"should see a results page that gets updated each time you vote. If you "
"submit the form without having chosen a choice, you should see the error "
"message."
msgstr ""
"ブラウザで ``/polls/1/`` を表示して投票してみましょう。票を入れるたびに、結果"
"のページが更新されていることがわかるはずです。選択肢を選ばずにフォームを送信"
"すると、エラーメッセージを表示されるはずです。"

msgid ""
"The code for our ``vote()`` view does have a small problem. It first gets "
"the ``selected_choice`` object from the database, then computes the new "
"value of ``votes``, and then saves it back to the database. If two users of "
"your website try to vote at *exactly the same time*, this might go wrong: "
"The same value, let's say 42, will be retrieved for ``votes``. Then, for "
"both users the new value of 43 is computed and saved, but 44 would be the "
"expected value."
msgstr ""
"これまで作ってきた ``vote()`` ビューのコードは、小さな問題を抱えています。最"
"初にデータベースから ``selected_choice`` オブジェクトを取得し、そこで "
"``votes`` の新しい値を計算し、データベースにそれを戻して保存します。もしウェ"
"ブサイトのユーザー 2 人が *まったく同時に* 投票しようとすると、誤りが発生しま"
"す。``votes`` の元の値が 42 だったとしましょう。その時、両方のユーザーに対し"
"て新しい値として 43 が計算され保存されます、しかし 44 が本来想定される値で"
"す。"

msgid ""
"This is called a *race condition*. If you are interested, you can read :ref:"
"`avoiding-race-conditions-using-f` to learn how you can solve this issue."
msgstr ""
"この問題は、「競合状態」と呼ばれています。この問題に興味がある人は、:ref:"
"`avoiding-race-conditions-using-f` を読むと、この問題の解決方法がわかります。"

msgid "Use generic views: Less code is better"
msgstr "汎用ビューを使う: コードが少ないのはいいことだ"

msgid ""
"The ``detail()`` (from :doc:`Tutorial 3 </intro/tutorial03>`) and "
"``results()`` views are very simple -- and, as mentioned above, redundant. "
"The ``index()`` view, which displays a list of polls, is similar."
msgstr ""
"``detail()`` ( :doc:`チュートリアルその 3 </intro/tutorial03>` ) と "
"``results()`` ビューはとても簡単で、先程も述べたように冗長です。投票の一覧を"
"表示する ``index()`` ビュー (チュートリアルその 3) も同様です。 "

msgid ""
"These views represent a common case of basic Web development: getting data "
"from the database according to a parameter passed in the URL, loading a "
"template and returning the rendered template. Because this is so common, "
"Django provides a shortcut, called the \"generic views\" system."
msgstr ""
"これらのビューは基本的な Web開発の一般的なケースを表します。すなわち、 URL を"
"介して渡されたパラメータに従ってデータベースからデータを取り出し、テンプレー"
"トをロードして、レンダリングしたテンプレートを返します。これはきわめてよくあ"
"ることなので、 Django では、汎用ビュー \"generic view\" というショートカット"
"を提供しています。"

msgid ""
"Generic views abstract common patterns to the point where you don't even "
"need to write Python code to write an app."
msgstr ""
"汎用ビューとは、よくあるパターンを抽象化して、 Python コードすら書かずにアプ"
"リケーションを書き上げられる状態にしたものです。"

msgid ""
"Let's convert our poll app to use the generic views system, so we can delete "
"a bunch of our own code. We'll just have to take a few steps to make the "
"conversion. We will:"
msgstr ""
"これまで作成してきた poll アプリを汎用ビューシステムに変換して、 コードをばっ"
"さり捨てられるようにしましょう。変換にはほんの数ステップしかか かりません。そ"
"のステップとは:"

msgid "Convert the URLconf."
msgstr "URLconf を変換する。"

msgid "Delete some of the old, unneeded views."
msgstr "古い不要なビューを削除する。"

msgid "Introduce new views based on Django's generic views."
msgstr "新しいビューに Djangoの汎用ビューを設定する。"

msgid "Read on for details."
msgstr "詳しく見てゆきましょう。"

msgid "Why the code-shuffle?"
msgstr "なぜコードを入れ換えるの？"

msgid ""
"Generally, when writing a Django app, you'll evaluate whether generic views "
"are a good fit for your problem, and you'll use them from the beginning, "
"rather than refactoring your code halfway through. But this tutorial "
"intentionally has focused on writing the views \"the hard way\" until now, "
"to focus on core concepts."
msgstr ""
"一般に Django アプリケーションを書く場合は、まず自分の問題を解決するために汎"
"用ビューが適しているか考えた上で、最初から汎用ビューを使い、途中まで書き上げ"
"たコードをリファクタすることはありません。ただ、このチュートリアルでは中核と"
"なるコンセプトに焦点を合わせるために、わざと「大変な」ビューの作成に集中して"
"もらったのです。"

msgid "You should know basic math before you start using a calculator."
msgstr "電卓を使う前に、算数の基本を知っておかねばならないのと同じです。"

msgid "Amend URLconf"
msgstr "URLconf の修正"

msgid "First, open the ``polls/urls.py`` URLconf and change it like so:"
msgstr "まず、 URLconf の ``polls/urls.py`` を開き、次のように変更します:"

msgid ""
"Note that the name of the matched pattern in the regexes of the second and "
"third patterns has changed from ``<question_id>`` to ``<pk>``."
msgstr ""
"2 つ目と 3 つ目の正規表現でのマッチパターンの名前が ``<question_id>`` から "
"``<pk>`` に変更されたことに注意してください。"

msgid "Amend views"
msgstr "views の修正"

msgid ""
"Next, we're going to remove our old ``index``, ``detail``, and ``results`` "
"views and use Django's generic views instead. To do so, open the ``polls/"
"views.py`` file and change it like so:"
msgstr ""
"次に、古い ``index`` 、 ``detail`` 、と ``results`` のビューを削除し、代わり"
"に Django の汎用ビューを使用します。これを行うには、 ``polls/views.py`` ファ"
"イルを開き、次のように変更します:"

msgid ""
"We're using two generic views here: :class:`~django.views.generic.list."
"ListView` and :class:`~django.views.generic.detail.DetailView`. "
"Respectively, those two views abstract the concepts of \"display a list of "
"objects\" and \"display a detail page for a particular type of object.\""
msgstr ""
"ここでは、:class:`~django.views.generic.list.ListView` と :class:`~django."
"views.generic.detail.DetailView` を使用しています。これらのビューはそれぞれ、"
"「オブジェクトのリストを表示する」および「あるタイプのオブジェクトの詳細ペー"
"ジを表示する」という二つの概念を抽象化しています。"

msgid ""
"Each generic view needs to know what model it will be acting upon. This is "
"provided using the ``model`` attribute."
msgstr ""
"各汎用ビューは自分がどのモデルに対して動作するのか知っておく必要があります。"
"これは、 ``model`` 属性を使用して提供されます。"

msgid ""
"The :class:`~django.views.generic.detail.DetailView` generic view expects "
"the primary key value captured from the URL to be called ``\"pk\"``, so "
"we've changed ``question_id`` to ``pk`` for the generic views."
msgstr ""
":class:`~django.views.generic.detail.DetailView` 汎用ビューには、 ``\"pk\"`` "
"という名前で URL からプライマリキーをキャプチャして渡すことになっていので、 "
"汎用ビュー向けに ``question_id`` を  ``pk`` に変更しています。"

msgid ""
"By default, the :class:`~django.views.generic.detail.DetailView` generic "
"view uses a template called ``<app name>/<model name>_detail.html``. In our "
"case, it would use the template ``\"polls/question_detail.html\"``. The "
"``template_name`` attribute is used to tell Django to use a specific "
"template name instead of the autogenerated default template name. We also "
"specify the ``template_name`` for the ``results`` list view -- this ensures "
"that the results view and the detail view have a different appearance when "
"rendered, even though they're both a :class:`~django.views.generic.detail."
"DetailView` behind the scenes."
msgstr ""
"デフォルトでは、 :class:`~django.views.generic.detail.DetailView` 汎用ビュー"
"は ``<app name>/<model name>_detail.html`` という名前のテンプレートを使いま"
"す。この場合、テンプレートの名前は ``\"polls/question_detail.html\"`` です。 "
"``template_name`` 属性は Django に自動生成されたデフォルトのテンプレート名で"
"はなく、指定した名前を使うように伝えるために使われます。 ``results`` リスト"
"ビューにも ``template_name`` を指定します。これは、 結果ビューと詳細ビューが"
"お互い実は :class:`~django.views.generic.detail.DetailView` であるにも関わら"
"ず、レンダリングされたとき違った外観を持っているためです。"

msgid ""
"Similarly, the :class:`~django.views.generic.list.ListView` generic view "
"uses a default template called ``<app name>/<model name>_list.html``; we use "
"``template_name`` to tell :class:`~django.views.generic.list.ListView` to "
"use our existing ``\"polls/index.html\"`` template."
msgstr ""
"同様に、 :class:`~django.views.generic.list.ListView` 汎用ビューは ``<app "
"name>/<model name>_list.html`` というデフォルトのテンプレートを使うので、 "
"``template_name`` を使って :class:`~django.views.generic.list.ListView` に既"
"存の ``\"polls/index.html\"`` テンプレートを使用するように伝えます。"

msgid ""
"In previous parts of the tutorial, the templates have been provided with a "
"context that contains the ``question`` and ``latest_question_list`` context "
"variables. For ``DetailView`` the ``question`` variable is provided "
"automatically -- since we're using a Django model (``Question``), Django is "
"able to determine an appropriate name for the context variable. However, for "
"ListView, the automatically generated context variable is ``question_list``. "
"To override this we provide the ``context_object_name`` attribute, "
"specifying that we want to use ``latest_question_list`` instead. As an "
"alternative approach, you could change your templates to match the new "
"default context variables -- but it's a lot easier to just tell Django to "
"use the variable you want."
msgstr ""
"このチュートリアルの前の部分では、 ``question`` や ``latest_question_list`` "
"といった変数の入ったコンテキストをテンプレートに渡していました。 "
"``DetailView`` には、 ``question`` という変数が自動的に渡されます。なぜな"
"ら、 Django モデル (``Question``) を使用していて、 Django はコンテキスト変数"
"にふさわしい名前を決めることができるからです。一方で、 ListView では、自動的"
"に生成されるコンテキスト変数は ``question_list`` になります。これを上書きする"
"には、 ``context_object_name`` 属性を与え、 ``latest_question_list`` を代わり"
"に使用すると指定します。この代替アプローチとして、新しいデフォルトのコンテキ"
"スト変数を一致するようにテンプレートを変えることもできます。しかし、ただ "
"Django に使用したい変数名を伝えるほうが簡単でしょう。"

msgid "Run the server, and use your new polling app based on generic views."
msgstr ""
"サーバを実行して、新しく汎用ビューベースにした投票アプリケーションを使ってみ"
"ましょう。"

msgid ""
"For full details on generic views, see the :doc:`generic views documentation "
"</topics/class-based-views/index>`."
msgstr ""
"汎用ビューの詳細は、:doc:`汎用ビューのドキュメント </topics/class-based-"
"views/index>` を参照してください。"

msgid ""
"When you're comfortable with forms and generic views, read :doc:`part 5 of "
"this tutorial</intro/tutorial05>` to learn about testing our polls app."
msgstr ""
"フォームや汎用ビューを使いこなせるようになったら、 :doc:`チュートリアルその5 "
"</intro/tutorial05>` に進んで、投票アプリのテストについて学びましょう。 "

msgid "Writing your first Django app, part 5"
msgstr "はじめての Django アプリ作成、その 5"

msgid ""
"This tutorial begins where :doc:`Tutorial 4 </intro/tutorial04>` left off. "
"We've built a Web-poll application, and we'll now create some automated "
"tests for it."
msgstr ""
"このチュートリアルは :doc:`チュートリアル 4 </intro/tutorial04>` の続きです。"
"Web 投票アプリケーションが完成したので、今度は自動テストを作ってみましょう。"

msgid "Introducing automated testing"
msgstr "自動テストの導入"

msgid "What are automated tests?"
msgstr "自動テストとは何ですか？"

msgid "Tests are simple routines that check the operation of your code."
msgstr "テストとは、コードの動作を確認する単純なプログラムです。"

msgid ""
"Testing operates at different levels. Some tests might apply to a tiny "
"detail (*does a particular model method return values as expected?*) while "
"others examine the overall operation of the software (*does a sequence of "
"user inputs on the site produce the desired result?*). That's no different "
"from the kind of testing you did earlier in :doc:`Tutorial 2 </intro/"
"tutorial02>`, using the :djadmin:`shell` to examine the behavior of a "
"method, or running the application and entering data to check how it behaves."
msgstr ""
"テストは異なるレベルで実行されます。あるテストは、小さな機能に対して行われる"
"もの (*ある特定のモデルのメソッドは期待通りの値を返すか？*) かもしれません"
"し、別のテストは、ソフトウェア全体の動作に対して行われるもの (*サイト上での"
"ユーザの一連の入力に対して、期待通りの結果が表示されるか？*) かもしれません。"
"こうしたテストは、前に :doc:`チュートリアル その2 </intro/tutorial02>` で :"
"djadmin:`shell` を用いてメソッドの動作を確かめたことや、実際にアプリケーショ"
"ンを実行して値を入力して結果がどうなるのかを確かめるといったことと、何も違い"
"はありません。"

msgid ""
"What's different in *automated* tests is that the testing work is done for "
"you by the system. You create a set of tests once, and then as you make "
"changes to your app, you can check that your code still works as you "
"originally intended, without having to perform time consuming manual testing."
msgstr ""
"*自動* テストが他と異なる点は、テスト作業がシステムによって実行されることで"
"す。一度テストセットを作成すると、それからはアプリに変更を加えるたびに、あな"
"たの意図した通りにコードが動作するか確認できます。手動でテストする時間がかか"
"ることはありません。"

msgid "Why you need to create tests"
msgstr "なぜテストを作成せねばならないのか"

msgid "So why create tests, and why now?"
msgstr "どうしてテストを作るのか？また、なぜ今なのか？"

msgid ""
"You may feel that you have quite enough on your plate just learning Python/"
"Django, and having yet another thing to learn and do may seem overwhelming "
"and perhaps unnecessary. After all, our polls application is working quite "
"happily now; going through the trouble of creating automated tests is not "
"going to make it work any better. If creating the polls application is the "
"last bit of Django programming you will ever do, then true, you don't need "
"to know how to create automated tests. But, if that's not the case, now is "
"an excellent time to learn."
msgstr ""
"これまで学んだ Python/Django の知識に満足し、さらに別のことを学ぶのは大変で不"
"必要なことだと思われるかもしれません。だって投票アプリケーションはきちんと動"
"いているし、わざわざ自動テストを導入したところでアプリケーションがより良くな"
"るわけではないのだから。もし Django プログラミングを学ぶことの全ての目的がこ"
"の投票アプリケーションを作ることであるのならば確かに自動テストの導入は必要な"
"いと思います。しかし、そうではないのならば自動テストについて学ぶことは役に立"
"つことでしょう。"

msgid "Tests will save you time"
msgstr "テストはあなたの時間を節約します"

msgid ""
"Up to a certain point, 'checking that it seems to work' will be a "
"satisfactory test. In a more sophisticated application, you might have "
"dozens of complex interactions between components."
msgstr ""
"ある一定の基準まで、'動くであろうことを確認すること'が十分なテストでしょう。"
"高機能なアプリケーションでは、コンポーネント間で複雑な連携が数多くあるかもし"
"れません。"

msgid ""
"A change in any of those components could have unexpected consequences on "
"the application's behavior. Checking that it still 'seems to work' could "
"mean running through your code's functionality with twenty different "
"variations of your test data just to make sure you haven't broken something "
"- not a good use of your time."
msgstr ""
"プログラムの変更によって予想だにしない箇所の挙動が変わってしまう可能性があり"
"ます。それを確かめるためには、様々なテストデータを用いてプログラムを走らせて "
"'正しく動いていそう' であることを確認する必要があります - これは効率がよくあ"
"りません。"

msgid ""
"That's especially true when automated tests could do this for you in "
"seconds. If something's gone wrong, tests will also assist in identifying "
"the code that's causing the unexpected behavior."
msgstr ""
"自動テストを導入することによってプログラムが正しく動くことの確認を一瞬で終わ"
"らせることができ、またテストはプログラムのどこで予期せぬ動作が起きたかを見極"
"めるのに役立つことでしょう。"

msgid ""
"Sometimes it may seem a chore to tear yourself away from your productive, "
"creative programming work to face the unglamorous and unexciting business of "
"writing tests, particularly when you know your code is working properly."
msgstr ""
"テストを書くという行為は、特にプログラムが適切に動くと分かっているときには、"
"生産的でも創造的でもないつまらないことのように思われるかもしれません。"

msgid ""
"However, the task of writing tests is a lot more fulfilling than spending "
"hours testing your application manually or trying to identify the cause of a "
"newly-introduced problem."
msgstr ""
"しかしテストを書くことは、何時間もかけてアプリケーションの動作を確認したり、"
"新しく発生した問題の原因を探したりすることよりもずっとやりがいのあることなの"
"です。"

msgid "Tests don't just identify problems, they prevent them"
msgstr ""
"またテストは問題点を検出するのみならず、問題が発生するのを防ぐこともできま"
"す。"

msgid ""
"It's a mistake to think of tests merely as a negative aspect of development."
msgstr "テストを単に開発の負な面と考えることは誤りです。"

msgid ""
"Without tests, the purpose or intended behavior of an application might be "
"rather opaque. Even when it's your own code, you will sometimes find "
"yourself poking around in it trying to find out what exactly it's doing."
msgstr ""
"テストなくしては、アプリケーションの目的や意図した動作というものが曖昧になっ"
"てしまうことがあります。自分自身で書いたコードであっても、時にはそのコードが"
"することを正確に理解するのに時間がかかってしまうことがあります。"

msgid ""
"Tests change that; they light up your code from the inside, and when "
"something goes wrong, they focus light on the part that has gone wrong - "
"*even if you hadn't even realized it had gone wrong*."
msgstr ""
"テストはこの状況を大きく変え、いわばコードを内側から照らし出してくれます。そ"
"して、何か間違ったことをしてしまった時には、*自分自身では間違っていると気づか"
"なかった場合でさえ*、間違いが起きた場所にスポットライトを当ててくれるのです。"

msgid "Tests make your code more attractive"
msgstr "テストは、コードをより魅力的にします"

msgid ""
"You might have created a brilliant piece of software, but you will find that "
"many other developers will simply refuse to look at it because it lacks "
"tests; without tests, they won't trust it. Jacob Kaplan-Moss, one of "
"Django's original developers, says \"Code without tests is broken by design."
"\""
msgstr ""
"たとえあなたが輝かしいソフトウェアを作ったとしても、テストがないというそれだ"
"けの理由で、多くの開発者は見ることさえしてくれないでしょう。テストのないソフ"
"トは信用されないのです。Django を開発した Jacob Kaplan-Moss は次の言葉を残し"
"ています。「テストのないコードは、デザインとして壊れている。」"

msgid ""
"That other developers want to see tests in your software before they take it "
"seriously is yet another reason for you to start writing tests."
msgstr ""
"あなたのソフトウェアを他の開発者が真剣に見てもらうというのも、テストを書くべ"
"きもう一つの理由です。"

msgid "Tests help teams work together"
msgstr "テストを書くことはチームで共同作業を行う上で役に立ちます。"

msgid ""
"The previous points are written from the point of view of a single developer "
"maintaining an application. Complex applications will be maintained by "
"teams. Tests guarantee that colleagues don't inadvertently break your code "
"(and that you don't break theirs without knowing). If you want to make a "
"living as a Django programmer, you must be good at writing tests!"
msgstr ""
"これまでの点は、1人の開発者でアプリケーションをメンテナンスしているという観点"
"から書きました。しかし、複雑なアプリケーションはチームでメンテナンスされるよ"
"うになるものです。テストは、あなたが書いたコードを他人がうっかり壊してしまう"
"ことから守ってくれます (そして、他の人が書いたコードをあなたが壊してしまうこ"
"とからも)。Django のプログラマとして生きてゆくつもりなら、良いテストを絶対に"
"書かなければなりません！"

msgid "Basic testing strategies"
msgstr "基本的なテスト方針"

msgid "There are many ways to approach writing tests."
msgstr "テストを書くためのアプローチには、さまざまなものがあります。"

msgid ""
"Some programmers follow a discipline called \"`test-driven development`_\"; "
"they actually write their tests before they write their code. This might "
"seem counter-intuitive, but in fact it's similar to what most people will "
"often do anyway: they describe a problem, then create some code to solve it. "
"Test-driven development simply formalizes the problem in a Python test case."
msgstr ""
"プログラマの中には、「`テスト駆動開発`_」の原則に従っている人がいます。これ"
"は、実際にコードを書く前にテストを書く、という原則です。この原則は直感に反す"
"るように感じるかもしれませんが、実際には多くの人がどんなことでも普通にしてい"
"ることに似ています。つまり、問題をきちんと言葉にしてから、その問題を解決する"
"ためのコードを書く、ということです。テスト駆動開発は、ここで言う問題を単に "
"Python のテストケースとして形式化しただけのことです。"

msgid ""
"More often, a newcomer to testing will create some code and later decide "
"that it should have some tests. Perhaps it would have been better to write "
"some tests earlier, but it's never too late to get started."
msgstr ""
"テストの初心者の多くは、先にコードを書いてから、その後でテストが必要だと考え"
"るものです。おそらく、おそらく早くからいくつかテストを書いておいた方が良いで"
"すが、テストを始めるのに遅すぎるということはありません。"

msgid ""
"Sometimes it's difficult to figure out where to get started with writing "
"tests. If you have written several thousand lines of Python, choosing "
"something to test might not be easy. In such a case, it's fruitful to write "
"your first test the next time you make a change, either when you add a new "
"feature or fix a bug."
msgstr ""
"どこからテストを始めるべき場所を見つけるのが難しいこともあります。もしすでに"
"数千行の Python コードがあったとしたら、テストすべき場所を選ぶのは簡単ではな"
"いかもしれません。そのような場合には、次に新しい機能やバグの修正を行う時に、"
"最初のテストを書いてみると役に立つでしょう。"

msgid "So let's do that right away."
msgstr "それでは早速始めてみましょう。"

msgid "Writing our first test"
msgstr "初めてのテスト作成"

msgid "We identify a bug"
msgstr "バグを見つけたとき"

msgid ""
"Fortunately, there's a little bug in the ``polls`` application for us to fix "
"right away: the ``Question.was_published_recently()`` method returns "
"``True`` if the ``Question`` was published within the last day (which is "
"correct) but also if the ``Question``’s ``pub_date`` field is in the future "
"(which certainly isn't)."
msgstr ""
"運よく、 ``polls`` のアプリケーションにはすぐに修正可能な小さなバグがありまし"
"た。``Question.was_published_recently()`` のメソッドは ``Question`` が昨日以"
"降に作成された場合に ``True`` を返すのですが(適切な動作)、 ``Question`` の "
"``pub_date`` が未来の日付になっている場合にも``True``を返してしまいます(不適"
"切な動作)。"

msgid ""
"To check if the bug really exists, using the Admin create a question whose "
"date lies in the future and check the method using the :djadmin:`shell`::"
msgstr ""
"このバグが本当に存在するのかを確かめるために、 :djadmin:`shell`: から未来の日"
"付の ``Question`` を作成し、メソッドの結果を見てみましょう:"

msgid "Since things in the future are not 'recent', this is clearly wrong."
msgstr "未来の日付は '最近' ではないため、この結果は明らかに間違っています。"

msgid "Create a test to expose the bug"
msgstr "バクをあらわにするためテストを作成します。"

msgid ""
"What we've just done in the :djadmin:`shell` to test for the problem is "
"exactly what we can do in an automated test, so let's turn that into an "
"automated test."
msgstr ""
"問題をテストするために :djadmin:`shell` でたった今したことこそ、自動テストで"
"したいことです。そこで、それを自動テストの中に取り込みましょう。"

msgid ""
"A conventional place for an application's tests is in the application's "
"``tests.py`` file; the testing system will automatically find tests in any "
"file whose name begins with ``test``."
msgstr ""
"アプリケーションのテストを書く場所は、慣習として、アプリケーションの ``tests."
"py`` ファイル内ということになっています。テストシステムが ``test`` で始まる名"
"前のファイルの中から、自動的にテストを見つけてくれます。"

msgid ""
"Put the following in the ``tests.py`` file in the ``polls`` application:"
msgstr ""
"``polls`` アプリケーションの ``tests.py`` ファイルに次のコードを書きます。"

msgid ""
"What we have done here is created a :class:`django.test.TestCase` subclass "
"with a method that creates a ``Question`` instance with a ``pub_date`` in "
"the future. We then check the output of ``was_published_recently()`` - which "
"*ought* to be False."
msgstr ""
"ここではまず、:class:`django.test.TestCase` を継承したサブクラスを作り、未来"
"の日付の ``pub_date`` を持つ ``Question`` のインスタンスを作っています。それ"
"から、``was_published_recently()`` の出力をチェックしています。これは False "
"になるはずです。"

msgid "Running tests"
msgstr "テストの実行"

msgid "In the terminal, we can run our test::"
msgstr "ターミナルから、次のコマンドでテストが実行できます。"

msgid "and you'll see something like::"
msgstr "すると、次のような結果を得るでしょう。"

msgid "What happened is this:"
msgstr "ここでは以下のようなことが起こりました。"

msgid ""
"``python manage.py test polls`` looked for tests in the ``polls`` application"
msgstr ""
"``python manage.py test polls`` は ``polls`` アプリケーションからテストを探し"
"ます"

msgid "it found a subclass of the :class:`django.test.TestCase` class"
msgstr ":class:`django.test.TestCase` クラスのサブクラスを発見します"

msgid "it created a special database for the purpose of testing"
msgstr "テストのための特別なデータベースを作成します"

msgid "it looked for test methods - ones whose names begin with ``test``"
msgstr "テスト用のメソッドとして、``test`` で始まるメソッドを探します"

msgid ""
"in ``test_was_published_recently_with_future_question`` it created a "
"``Question`` instance whose ``pub_date`` field is 30 days in the future"
msgstr ""
"``test_was_published_recently_with_future_question`` の中で、``pub_date`` "
"フィールドに今日から30日後の日付を持つ ``Question`` インスタンスが作成されま"
"す"

msgid ""
"... and using the ``assertIs()`` method, it discovered that its "
"``was_published_recently()`` returns ``True``, though we wanted it to return "
"``False``"
msgstr ""
"そして最後に、 ``assertIs()`` メソッドを使うことで、本当に返してほしいのは "
"``False`` だったにもかかわらず、 ``was_published_recently()`` が ``True`` を"
"返していることを発見します"

msgid ""
"The test informs us which test failed and even the line on which the failure "
"occurred."
msgstr ""
"テストは私たちにテストの失敗を教えてくれるだけでなく、失敗が起こったコードの"
"行数まで教えてくれています。"

msgid "Fixing the bug"
msgstr "バグを修正する"

msgid ""
"We already know what the problem is: ``Question.was_published_recently()`` "
"should return ``False`` if its ``pub_date`` is in the future. Amend the "
"method in ``models.py``, so that it will only return ``True`` if the date is "
"also in the past:"
msgstr ""
"私たちはすでに問題の原因を知っています。それは、``Question."
"was_published_recently()`` は ``pub_date`` が未来の日付だった場合には "
"``False`` を返さなければならない、ということです。``models.py`` にあるメソッ"
"ドを修正して、日付が過去だった場合にのみ ``True`` を返すようにしましょう。"

msgid "and run the test again::"
msgstr "そして、もう一度テストを実行します。"

msgid ""
"After identifying a bug, we wrote a test that exposes it and corrected the "
"bug in the code so our test passes."
msgstr ""
"バグを発見した後、私たちはそのバグをあぶり出してくれるようなテストを書いて、"
"コード内のバグを直したので、テストは無事にパスされました。"

msgid ""
"Many other things might go wrong with our application in the future, but we "
"can be sure that we won't inadvertently reintroduce this bug, because simply "
"running the test will warn us immediately. We can consider this little "
"portion of the application pinned down safely forever."
msgstr ""
"このアプリケーションでは将来、たくさんの他のバグが生じるかもしれませんが、こ"
"のバグがうっかり入ってしまうことは二度とありません。単にテストを実行するだけ"
"で、すぐに警告を受けられるからです。アプリケーションのこの小さな部分が、安全"
"に、そして永遠にピン留めされたと考えて差し支えありません。"

msgid "More comprehensive tests"
msgstr "より包括的なテスト"

msgid ""
"While we're here, we can further pin down the ``was_published_recently()`` "
"method; in fact, it would be positively embarrassing if in fixing one bug we "
"had introduced another."
msgstr ""
"この段階で、``was_published_recently()`` メソッドをさらにピン留めしておけま"
"す。実際、一つのバグを直したことでほかのバグを作り出すなんてしたくありません"
"よね。"

msgid ""
"Add two more test methods to the same class, to test the behavior of the "
"method more comprehensively:"
msgstr ""
"このメソッドの振る舞いをより包括的にテストするために、同じクラスにさらに2つの"
"テストを追加しましょう。"

msgid ""
"And now we have three tests that confirm that ``Question."
"was_published_recently()`` returns sensible values for past, recent, and "
"future questions."
msgstr ""
"これで、``Question.was_published_recently()`` が過去、現在、そして未来の質問"
"に対して意味のある値を返すことを確認する3つのテストが揃いました。"

msgid ""
"Again, ``polls`` is a simple application, but however complex it grows in "
"the future and whatever other code it interacts with, we now have some "
"guarantee that the method we have written tests for will behave in expected "
"ways."
msgstr ""
"繰り返しになりますが、``polls`` は簡単なアプリケーションであっても、将来この"
"アプリケーションが他のどんなコードと関係するようになっても、複雑さは増してい"
"きます。メソッドに対してテストを書いたおかげで、今ではそのメソッドが期待した"
"とおりに動作することを、ある程度保証でききるようになったのです。"

msgid "Test a view"
msgstr "ビューをテストする"

msgid ""
"The polls application is fairly undiscriminating: it will publish any "
"question, including ones whose ``pub_date`` field lies in the future. We "
"should improve this. Setting a ``pub_date`` in the future should mean that "
"the Question is published at that moment, but invisible until then."
msgstr ""
"この投票アプリケーションは、まだ質問をちゃんと見分けることができません。"
"``pub_date`` フィールドが未来の日付になっている質問を含め、どんな質問でも公開"
"してしまいます。この点を改善するべきでしょう。``pub_date`` を未来に設定すると"
"いうことは、その Question がその日付になった時に公開され、それまでは表示され"
"ないことを意味するはずです。"

msgid "A test for a view"
msgstr "ビューに対するテスト"

msgid ""
"When we fixed the bug above, we wrote the test first and then the code to "
"fix it. In fact that was a simple example of test-driven development, but it "
"doesn't really matter in which order we do the work."
msgstr ""
"上でバグを修正した時には、初めにテストを書いてからコードを修正しました。実"
"は、テスト駆動開発の簡単な例だったわけです。しかし、テストとコードを書く順番"
"はどちらでも構いません。"

msgid ""
"In our first test, we focused closely on the internal behavior of the code. "
"For this test, we want to check its behavior as it would be experienced by a "
"user through a web browser."
msgstr ""
"初めのテストでは、コード内部の細かい動作に焦点を当てましたが、このテストで"
"は、ユーザが Web ブラウザを通して経験する動作をチェックしましょう。"

msgid ""
"Before we try to fix anything, let's have a look at the tools at our "
"disposal."
msgstr "初めに何かを修正する前に、使用できるツールについて見ておきましょう。"

msgid "The Django test client"
msgstr "Django テストクライアント"

msgid ""
"Django provides a test :class:`~django.test.Client` to simulate a user "
"interacting with the code at the view level.  We can use it in ``tests.py`` "
"or even in the :djadmin:`shell`."
msgstr ""
"Django は、ビューレベルでのユーザとのインタラクションをシミュレートすることが"
"できる :class:`~django.test.Client` を用意しています。これを ``tests.py`` の"
"中や :djadmin:`shell` でも使うことができます。"

msgid ""
"We will start again with the :djadmin:`shell`, where we need to do a couple "
"of things that won't be necessary in ``tests.py``. The first is to set up "
"the test environment in the :djadmin:`shell`::"
msgstr ""
"もう一度 :djadmin:`shell` からはじめましょう。ここでテストクライアントを使う"
"場合には、``tests.py`` では必要がない2つの準備が必要になります。まず最初にし"
"なければならないのは、:djadmin:`shell` の上でテスト環境をセットアップすること"
"です。"

msgid ""
":meth:`~django.test.utils.setup_test_environment` installs a template "
"renderer which will allow us to examine some additional attributes on "
"responses such as ``response.context`` that otherwise wouldn't be available. "
"Note that this method *does not* setup a test database, so the following "
"will be run against the existing database and the output may differ slightly "
"depending on what questions you already created. You might get unexpected "
"results if your ``TIME_ZONE`` in ``settings.py`` isn't correct. If you don't "
"remember setting it earlier, check it before continuing."
msgstr ""
":meth:`~django.test.utils.setup_test_environment` は、レンダリングのテンプ"
"レートをインストールします。 これによって、 ``response.context`` を含むよう"
"な、レスポンス上のいくつかの追加的な属性を試験ができるようなります。 注意点と"
"して、データベースを作成しないので、既存のデータベースに対して以下が実行さ"
"れ、あなたの作成した question によってはアウトプットが多少異なるかもしれませ"
"ん。また ``settings.py`` の ``TIME_ZONE`` が正しくない場合は、予期しない結果"
"になるでしょう。設定変更がまだの場合は、次に進む前に設定を確認してください。"

msgid ""
"Next we need to import the test client class (later in ``tests.py`` we will "
"use the :class:`django.test.TestCase` class, which comes with its own "
"client, so this won't be required)::"
msgstr ""
"つぎに、テストクライアントのクラスをインポートする必要があります (後ほどの "
"``tests.py`` の中では、\"class\"`django.test.TestCase` クラス自体がクライアン"
"トを持っているため、インポートは不要です)。"

msgid "With that ready, we can ask the client to do some work for us::"
msgstr "さて、これでクライアントに仕事を頼む準備ができました。"

msgid "Improving our view"
msgstr "ビューを改良する"

msgid ""
"The list of polls shows polls that aren't published yet (i.e. those that "
"have a ``pub_date`` in the future). Let's fix that."
msgstr ""
"現在の投票のリストには、まだ公開されていない (つまり``pub_date`` の日付が未来"
"になっている) 投票が表示される状態になっています。これを直しましょう。"

msgid ""
"In :doc:`Tutorial 4 </intro/tutorial04>` we introduced a class-based view, "
"based on :class:`~django.views.generic.list.ListView`:"
msgstr ""
":doc:`Tutorial 4 </intro/tutorial04>` では、以下のような :class:`~django."
"views.generic.list.ListView`: をベースにしたクラスベースビューを導入しまし"
"た。"

msgid ""
"We need to amend the ``get_queryset()`` method and change it so that it also "
"checks the date by comparing it with ``timezone.now()``. First we need to "
"add an import:"
msgstr ""
"``get_queryset()`` メソッドを修正して、日付を ``timezone.now()`` と比較して確"
"認できるようにする必要があります。まず、インポート文を追加します:"

msgid "and then we must amend the ``get_queryset`` method like so:"
msgstr "そして、次のように ``get_queryset`` メソッドを修正します。"

msgid ""
"``Question.objects.filter(pub_date__lte=timezone.now())`` returns a queryset "
"containing ``Question``\\s whose ``pub_date`` is less than or equal to - "
"that is, earlier than or equal to - ``timezone.now``."
msgstr ""
"``Question.objects.filter(pub_date__lte=timezone.now())`` は、``pub_date`` "
"が ``timezone.now`` 以前の ``Question`` を含んだクエリセットを返します。"

msgid "Testing our new view"
msgstr "新しいビューをテストする"

msgid ""
"Now you can satisfy yourself that this behaves as expected by firing up the "
"runserver, loading the site in your browser, creating ``Questions`` with "
"dates in the past and future, and checking that only those that have been "
"published are listed.  You don't want to have to do that *every single time "
"you make any change that might affect this* - so let's also create a test, "
"based on our :djadmin:`shell` session above."
msgstr ""
"それでは、これで期待通りの満足のいく動作をしてくれるかどうか確かめましょう。"
"まず、runserver を実行して、ブラウザでサイトを読み込みます。過去と未来、それ"
"ぞれの日付を持つ ``Question`` を作成し、すでに公開されている質問だけがリスト"
"に表示されるかどうかを確認します。あなたはまさか、*この通りにちゃんと動作して"
"いるか、プロジェクトにわずかでも変更を加えるたびに毎回手動で* 確認したいなど"
"とは思わないですよね？ それなら、今回も上の :djadmin:`shell` のセッションに基"
"づいてテストを作りましょう。"

msgid "Add the following to ``polls/tests.py``:"
msgstr "まず、``polls/tests.py`` に次の行を追加します。"

msgid ""
"and we'll create a shortcut function to create questions as well as a new "
"test class:"
msgstr ""
"そして、question を簡単に作れるようにするショートカット関数と、新しいテストク"
"ラスを作ります。"

msgid "Let's look at some of these more closely."
msgstr "これらのコードを詳しく見ていきましょう。"

msgid ""
"First is a question shortcut function, ``create_question``, to take some "
"repetition out of the process of creating questions."
msgstr ""
"まず、question のショートカット関数 ``create_question`` です。この関数は、処"
"理の中の question を作成する繰り返しを取り除いてくれています。"

msgid ""
"``test_index_view_with_no_questions`` doesn't create any questions, but "
"checks the message: \"No polls are available.\" and verifies the "
"``latest_question_list`` is empty. Note that the :class:`django.test."
"TestCase` class provides some additional assertion methods. In these "
"examples, we use :meth:`~django.test.SimpleTestCase.assertContains()` and :"
"meth:`~django.test.TransactionTestCase.assertQuerysetEqual()`."
msgstr ""
"``test_index_view_with_no_questions`` は question を1つも作りませんが、\"No "
"polls are available.\" というメッセージが表示されていることをチェックし、"
"``latest_question_list`` が空になっているか確認しています。:class:`django."
"test.TestCase` クラスが追加のアサーション (assertion) メソッドを提供している"
"ことに注意してください。このチュートリアルでは、:meth:`~django.test."
"SimpleTestCase.assertContains()` と :meth:`~django.test.TransactionTestCase."
"assertQuerysetEqual()` を使用します。"

msgid ""
"In ``test_index_view_with_a_past_question``, we create a question and verify "
"that it appears in the list."
msgstr ""
"``test_index_view_with_a_past_question`` では、question を作成し、その "
"question がリストに現れるかどうかを検証しています。"

msgid ""
"In ``test_index_view_with_a_future_question``, we create a question with a "
"``pub_date`` in the future. The database is reset for each test method, so "
"the first question is no longer there, and so again the index shouldn't have "
"any questions in it."
msgstr ""
"``test_index_view_with_a_future_question`` では、``pub_date`` が未来の日付の"
"質問を作っています。データベースは各テストメソッドごとにリセットされるので、"
"この時にはデータベースには最初の質問は残っていません。そのため、index ページ"
"にはquestion は1つもありません。"

msgid ""
"And so on. In effect, we are using the tests to tell a story of admin input "
"and user experience on the site, and checking that at every state and for "
"every new change in the state of the system, the expected results are "
"published."
msgstr ""
"以下のテストメソッドも同様です。実際のところ、私たちはテストを用いて、管理者"
"の入力とサイトでのユーザの体験についてのストーリを語り、システムの各状態とそ"
"こでの新しい変化のそれぞれに対して、期待通りの結果が公開されているかどうかを"
"チェックしているのです。"

msgid "Testing the ``DetailView``"
msgstr "``DetailView`` のテスト"

msgid ""
"What we have works well; however, even though future questions don't appear "
"in the *index*, users can still reach them if they know or guess the right "
"URL. So we need to add a similar  constraint to ``DetailView``:"
msgstr ""
"とても上手くいっていますね。しかし、未来の質問は *index* に表示されないもの"
"の、正しいURL を知っていたり推測したりしたユーザは、まだページに到達できてし"
"まいます。そのため、同じような制約を ``DetailView`` にも追加する必要がありま"
"す。"

msgid ""
"And of course, we will add some tests, to check that a ``Question`` whose "
"``pub_date`` is in the past can be displayed, and that one with a "
"``pub_date`` in the future is not:"
msgstr ""
"そしてもちろん、2つのテストを追加します。``pub_date`` が過去の ``Question`` "
"が表示されることを確認するテストと、``pub_date`` が未来の ``Question`` が表示"
"されないことを確認するテストです。"

msgid "Ideas for more tests"
msgstr "さらなるテストについて考える"

msgid ""
"We ought to add a similar ``get_queryset`` method to ``ResultsView`` and "
"create a new test class for that view. It'll be very similar to what we have "
"just created; in fact there will be a lot of repetition."
msgstr ""
"``ResultsView`` にも同じように ``get_queryset`` メソッドを追加して、新しいテ"
"ストクラスも作らなければならないようです。しかしこれは、今作ったばかりのもの"
"とそっくりになるでしょう。実際、テストは重複だらけになるはずです。"

msgid ""
"We could also improve our application in other ways, adding tests along the "
"way. For example, it's silly that ``Questions`` can be published on the site "
"that have no ``Choices``. So, our views could check for this, and exclude "
"such ``Questions``. Our tests would create a ``Question`` without "
"``Choices`` and then test that it's not published, as well as create a "
"similar ``Question`` *with* ``Choices``, and test that it *is* published."
msgstr ""
"テストを追加することによって、同じように他の方法でアプリを改善できるでしょ"
"う。例えば、``Choices`` を一つも持たない馬鹿げた ``Questions`` が公開可能に"
"なっています。このような ``Questions`` を排除するようビューでチェックできま"
"す。 ``Choices`` がない ``Question`` を作成し、それが公開されないことをテスト"
"し、同じようにして、``Choices`` *がある* ``Question`` を作成し、それが公開 *"
"される* ことをテストすることになるでしょう。"

msgid ""
"Perhaps logged-in admin users should be allowed to see unpublished "
"``Questions``, but not ordinary visitors. Again: whatever needs to be added "
"to the software to accomplish this should be accompanied by a test, whether "
"you write the test first and then make the code pass the test, or work out "
"the logic in your code first and then write a test to prove it."
msgstr ""
"もしかすると管理者としてログインしているユーザーは、一般の訪問者と違い、 まだ"
"公開されていない ``Questions`` を見ることができるようにした方がいいかもしれま"
"せん。また繰り返しになりますが、この問題を解決するためにソフトウェアにどんな"
"コードが追加されべきであったとしても、そのコードにはテストが伴うべきです。テ"
"ストを先に書いてからそのテストを通るコードを書くのか、あるいはコードの中で先"
"にロジックを試してからテストを書いてそれを検証するのか、いずれにしてもです。"

msgid ""
"At a certain point you are bound to look at your tests and wonder whether "
"your code is suffering from test bloat, which brings us to:"
msgstr ""
"ある時点で、書いたテストが限界に達しているように見え、テストが膨らみすぎて"
"コードが苦しくなってしまうのではないかという疑問が浮かんでくるでしょう。こう"
"なって場合にはどうすれば良いのでしょうか？"

msgid "When testing, more is better"
msgstr "テストにおいて、多いことはいいことだ"

msgid ""
"It might seem that our tests are growing out of control. At this rate there "
"will soon be more code in our tests than in our application, and the "
"repetition is unaesthetic, compared to the elegant conciseness of the rest "
"of our code."
msgstr ""
"私たちのテストは、手がつけられないほど成長してしまっているように見えるかもし"
"れません。この割合で行けば、テストコードがアプリケーションのコードよりもすぐ"
"に大きくなってしまうでしょう。そして繰り返しは、残りの私たちのコードのエレガ"
"ントな簡潔さに比べて、美しくありません。"

msgid ""
"**It doesn't matter**. Let them grow. For the most part, you can write a "
"test once and then forget about it. It will continue performing its useful "
"function as you continue to develop your program."
msgstr ""
"**構いません**。 テストコードを大きくしましょう。たいていあなたはテストを一回"
"書いてそのことを忘れます。プログラムを開発し終えるまで便利な関数を使いそれを"
"続けましょう。"

msgid ""
"Sometimes tests will need to be updated. Suppose that we amend our views so "
"that only ``Questions`` with ``Choices`` are published. In that case, many "
"of our existing tests will fail - *telling us exactly which tests need to be "
"amended to bring them up to date*, so to that extent tests help look after "
"themselves."
msgstr ""
"時には、テストにアップデートが必要になることがあります。``Choices`` を持つ "
"``Questions`` だけを公開するよう、ビューを修正したときのことを思い出してくだ"
"さい。この後、既存のテストの多くは失敗します。この失敗は、*どのテストが、最新"
"の状態に対応するために修正する必要があるのか* をわたしたちに教えてくれている"
"のです。テストはこの意味でも、テスト自身をチェックするのに役に立っています。"

msgid ""
"At worst, as you continue developing, you might find that you have some "
"tests that are now redundant. Even that's not a problem; in testing "
"redundancy is a *good* thing."
msgstr ""
"最悪の場合、開発を続けていくにつれて、あるテストが今では冗長なものになってい"
"ることに気づいてしまうかもしれません。これも問題ではありません。テストにおい"
"ては、冗長であることは *良い* ことなのです。"

msgid ""
"As long as your tests are sensibly arranged, they won't become unmanageable. "
"Good rules-of-thumb include having:"
msgstr ""
"テストを意味のあるものとなるように整えている限り、手に負えないものになること"
"はありません。経験上、次のルールを守るようにすれば問題ありません。"

msgid "a separate ``TestClass`` for each model or view"
msgstr "モデルやビューごとに ``TestClass`` を分割する"

msgid "a separate test method for each set of conditions you want to test"
msgstr "テストしたい条件の集まりのそれぞれに対して、異なるテストメソッドを作る"

msgid "test method names that describe their function"
msgstr "テストメソッドの名前は、その機能を説明するようなものにする"

msgid "Further testing"
msgstr "さらなるテスト"

msgid ""
"This tutorial only introduces some of the basics of testing. There's a great "
"deal more you can do, and a number of very useful tools at your disposal to "
"achieve some very clever things."
msgstr ""
"このチュートリアルでは、テストの基本の一部を紹介しました。この他にもあなたに"
"できることはまだまだたくさんありますし、いろいろと賢いことを実現するに使える"
"とても便利なツールが数多く用意されています。"

msgid ""
"For example, while our tests here have covered some of the internal logic of "
"a model and the way our views publish information, you can use an \"in-"
"browser\" framework such as Selenium_ to test the way your HTML actually "
"renders in a browser. These tools allow you to check not just the behavior "
"of your Django code, but also, for example, of your JavaScript. It's quite "
"something to see the tests launch a browser, and start interacting with your "
"site, as if a human being were driving it! Django includes :class:`~django."
"test.LiveServerTestCase` to facilitate integration with tools like Selenium."
msgstr ""
"たとえば、ここでのテストでは、モデルの内部ロジックと、ビューの情報の公開の仕"
"方をカバーしましたが、ブラウザが HTML を実際にどのようにレンダリングのするの"
"かをテストする Selenium_ のような \"in-browser\" のフレームワークを使うことも"
"できます。これらのツールは、Django が生成したコードの振る舞いだけでなく、たと"
"えば、 JavaScript の振る舞いも確認できます。テストがブラウザを起動してサイト"
"とインタラクションしているのを見るのはとても面白いですよ。まるで本物の人間が"
"ブラウザを操作しているかのように見えるんです！ Django には、Selenium のような"
"ツールとの連携を容易にしてくれる :class:`~django.test.LiveServerTestCase` が"
"用意されています。"

msgid ""
"If you have a complex application, you may want to run tests automatically "
"with every commit for the purposes of `continuous integration`_, so that "
"quality control is itself - at least partially - automated."
msgstr ""
"複雑なアプリケーションを開発する時には、継続的インテグレーション "
"(`continuous integration`_) のために、コミットの度に自動的にテストを実行した"
"いくなるかもしれませんね。継続的インテグレーションを行れば、品質管理それ自体"
"が、少なくとも部分的には自動化できます。"

msgid ""
"A good way to spot untested parts of your application is to check code "
"coverage. This also helps identify fragile or even dead code. If you can't "
"test a piece of code, it usually means that code should be refactored or "
"removed. Coverage will help to identify dead code. See :ref:`topics-testing-"
"code-coverage` for details."
msgstr ""
"アプリケーションのテストされていない部分を発見するには、コードカバレッジを"
"チェックするのが良いやり方です。これはまた、脆弱なコードや使用されていない"
"デッドコードの発見にも役に立ちます。テストできないコード片がある場合、ふつう"
"は、そのコードはリファクタリングするか削除する必要があることを意味します。カ"
"バレッジはデッドコードの識別に役に立つでしょう。詳細は :ref:`topics-testing-"
"code-coverage`  を参照してください。"

msgid ""
":doc:`Testing in Django </topics/testing/index>` has comprehensive "
"information about testing."
msgstr ""
":doc:`Django におけるテスト </topics/testing/index>` には、テストに関する包括"
"的な情報がまとめられています。"

msgid "What's next?"
msgstr "次は何をしましょうか？"

msgid ""
"For full details on testing, see :doc:`Testing in Django </topics/testing/"
"index>`."
msgstr ""
"テストの詳細は、:doc:`Djagnoにおけるテスト </topics/testing/index>` を参照し"
"てください。"

msgid ""
"When you're comfortable with testing Django views, read :doc:`part 6 of this "
"tutorial</intro/tutorial06>` to learn about static files management."
msgstr ""
"テストやビューを使いこなせるようになったら、 :doc:`チュートリアルその6 </"
"intro/tutorial06>` に進んで、静的ファイルの管理について学びましょう。 "

msgid "Writing your first Django app, part 6"
msgstr "はじめての Django アプリ作成、その 6"

msgid ""
"This tutorial begins where :doc:`Tutorial 5 </intro/tutorial05>` left off. "
"We've built a tested Web-poll application, and we'll now add a stylesheet "
"and an image."
msgstr ""
"このチュートリアルは :doc:`チュートリアル 5 </intro/tutorial05>` の続きです。"
"Web 投票アプリケーションのテストが完成したので、今度はスタイルシートや画像を"
"追加しましょう。"

msgid ""
"Aside from the HTML generated by the server, web applications generally need "
"to serve additional files — such as images, JavaScript, or CSS — necessary "
"to render the complete web page. In Django, we refer to these files as "
"\"static files\"."
msgstr ""
"サーバで生成するHTML以外に、Webアプリケーションは一般的に完全なWebページをレ"
"ンダリングするために、画像、JavaScript、CSSなど必要なファイルを提供する必要が"
"あります。Djangoでは、これらのファイルを \"静的 (static) ファイル\" と呼びま"
"す。"

msgid ""
"For small projects, this isn't a big deal, because you can just keep the "
"static files somewhere your web server can find it. However, in bigger "
"projects -- especially those comprised of multiple apps -- dealing with the "
"multiple sets of static files provided by each application starts to get "
"tricky."
msgstr ""
"小さなプロジェクトではこのことは大きな問題になりません。 Web サーバが見つけら"
"れる場所で静的ファイルを単に管理することができるからです。しかし、もっと大き"
"な プロジェクトで、特に複数のアプリケーションからなる場合は、各アプリケーショ"
"ンが 持っている静的ファイルの集まりを複数扱うことになり、ややこしくなってきま"
"す。"

msgid ""
"That's what ``django.contrib.staticfiles`` is for: it collects static files "
"from each of your applications (and any other places you specify) into a "
"single location that can easily be served in production."
msgstr ""
"``django.contrib.staticfiles`` はまさにそのためにあります。これは静的なファ"
"イ ルを各アプリケーションから (さらに指定した別の場所からも) 一つの場所に集"
"め、運用環境で公開しやすくするものです。"

msgid "Customize your *app's* look and feel"
msgstr "*アプリ* の構造をカスタマイズする"

msgid ""
"First, create a directory called ``static`` in your ``polls`` directory. "
"Django will look for static files there, similarly to how Django finds "
"templates inside ``polls/templates/``."
msgstr ""
"最初に、 ``polls`` ディレクトリの中に、 ``static`` ディレクトリを作成します。"
"Django はそこから静的ファイルを探します。Django が ``polls/templates/`` から"
"テンプレートを探す方法と同様です。"

msgid ""
"Django's :setting:`STATICFILES_FINDERS` setting contains a list of finders "
"that know how to discover static files from various sources. One of the "
"defaults is ``AppDirectoriesFinder`` which looks for a \"static\" "
"subdirectory in each of the :setting:`INSTALLED_APPS`, like the one in "
"``polls`` we just created. The admin site uses the same directory structure "
"for its static files."
msgstr ""
"Django の :setting:`STATICFILES_FINDERS` は、さまざまなソースから静的ファイル"
"を検索する方法を知っているファインダのリストです。デフォルトのファイダの一つ"
"は ``AppDirectoriesFinder`` で、:setting:`INSTALLED_APPS` に書かれた各アプリ"
"ケーションに対して、ちょうど今作った ``polls`` のような \"static\" サブディレ"
"クトリを検索してくれます。管理サイトの静的ファイルにも、これと同じディレクト"
"リ構造が使われます。"

msgid ""
"Within the ``static`` directory you have just created, create another "
"directory called ``polls`` and within that create a file called ``style."
"css``. In other words, your stylesheet should be at ``polls/static/polls/"
"style.css``. Because of how the ``AppDirectoriesFinder`` staticfile finder "
"works, you can refer to this static file in Django simply as ``polls/style."
"css``, similar to how you reference the path for templates."
msgstr ""
"今作った ``static`` ディレクトリの中に、``polls`` という名前の新しいディレク"
"トリを作り、さらにその中に、``style.css`` という名前のファイルを作成します。"
"つまり、このスタイルシートは ``polls/static/polls/style.css`` に保存します。"
"``AppDirectoriesFinder`` の動作のしくみのおかげで、Django では、ただ ``polls/"
"style.css`` と書くだけでこの静的ファイルを参照することができます。これは、テ"
"ンプレートのパスを参照する時と同じです。"

msgid "Static file namespacing"
msgstr "静的ファイルの名前空間"

msgid ""
"Just like templates, we *might* be able to get away with putting our static "
"files directly in ``polls/static`` (rather than creating another ``polls`` "
"subdirectory), but it would actually be a bad idea. Django will choose the "
"first static file it finds whose name matches, and if you had a static file "
"with the same name in a *different* application, Django would be unable to "
"distinguish between them. We need to be able to point Django at the right "
"one, and the easiest way to ensure this is by *namespacing* them. That is, "
"by putting those static files inside *another* directory named for the "
"application itself."
msgstr ""
"テンプレートと同様に、``polls`` という別のサブディレクトリを作らずに、直接 "
"``polls/static`` の中に静的ファイルを置いてもいいのではないか、と思うかもしれ"
"ませんね。しかし、それは実際には悪い考えです。Django は、名前がマッチした最初"
"のテンプレートを使用するので、もし *異なる* アプリケーションの中に同じ名前の"
"テンプレートがあった場合、Django はそれらを区別することができません。そのた"
"め、Django に正しいテンプレートを教えてあげる必要がありますが、一番簡単な方法"
"は、それらに *名前空間を与える* ことです。アプリケーションと同じ名前をつけた "
"*もう一つの* ディレクトリの中にテンプレートを置いたのは、そういうわけなので"
"す。"

msgid ""
"Put the following code in that stylesheet (``polls/static/polls/style.css``):"
msgstr ""
"スタイルシートに次のコードを配置します (``polls/static/polls/style.css``):"

msgid ""
"Next, add the following at the top of ``polls/templates/polls/index.html``:"
msgstr "次に、``polls/templates/polls/index.html`` の上部に追加します:"

msgid ""
"The ``{% static %}`` template tag generates the absolute URL of static files."
msgstr ""
"``{% static %}`` テンプレートタグは、静的ファイルの完全 URL を生成します。"

msgid ""
"That's all you need to do for development. Reload ``http://localhost:8000/"
"polls/`` and you should see that the question links are green (Django "
"style!) which means that your stylesheet was properly loaded."
msgstr ""
"開発でするべきことはこれだけです。``http://localhost:8000/polls/`` をリロード"
"すれば、質問のリンクが緑色 (Django のスタイル！) に変わったはずです。これで、"
"スタイルシートがちゃんと読み込まれたことがわかりました。"

msgid "Adding a background-image"
msgstr "背景画像を追加する"

msgid ""
"Next, we'll create a subdirectory for images. Create an ``images`` "
"subdirectory in the ``polls/static/polls/`` directory. Inside this "
"directory, put an image called ``background.gif``. In other words, put your "
"image in ``polls/static/polls/images/background.gif``."
msgstr ""
"つぎに、画像のためのサブディレクトリを作りましょう。``images`` サブディレクト"
"リを ``polls/static/polls/`` ディレクトリの中に作成します。このディレクトリの"
"中に、``background.gif`` という名前の画像を置きます。つまり、画像は ``polls/"
"static/polls/images/background.gif`` に置きます。"

msgid "Then, add to your stylesheet (``polls/static/polls/style.css``):"
msgstr ""
"さらに、スタイルシート (``polls/static/polls/style.css``) に次のコードを追加"
"します。"

msgid ""
"Reload ``http://localhost:8000/polls/`` and you should see the background "
"loaded in the bottom right of the screen."
msgstr ""
"``http://localhost:8000/polls/`` をリロードすれば、画面の右下に、読み込まれた"
"背景画像が表示されるはずです。"

msgid ""
"Of course the ``{% static %}`` template tag is not available for use in "
"static files like your stylesheet which aren't generated by Django. You "
"should always use **relative paths** to link your static files between each "
"other, because then you can change :setting:`STATIC_URL` (used by the :ttag:"
"`static` template tag to generate its URLs) without having to modify a bunch "
"of paths in your static files as well."
msgstr ""
"もちろん、``{% static %}`` テンプレートタグは、スタイルシートのような Django "
"が生成しない静的ファイル内では使用できません。そのため、2つの静的ファイルを互"
"いにリンクするときには、必ず **相対パス** を使用するべきです。そうすれば、:"
"setting:`STATIC_URL` (:ttag:`static` テンプレートタグが URL を生成する時に使"
"われる) を変更しても、静的ファイルのパスを書き換えずに済みます。"

msgid ""
"These are the **basics**. For more details on settings and other bits "
"included with the framework see :doc:`the static files howto </howto/static-"
"files/index>` and :doc:`the staticfiles reference </ref/contrib/"
"staticfiles>`. :doc:`Deploying static files </howto/static-files/"
"deployment>` discusses how to use static files on a real server."
msgstr ""
"これらは静的ファイルの **基本** です。設定方法やフレームワークの機能の詳細に"
"ついては、:doc:`静的ファイルの配信 </howto/static-files/index>` と :doc:"
"`staticfiles のリファレンス </ref/contrib/staticfiles>` を読んでください。:"
"doc:`静的ファイルのデプロイ </howto/static-files/deployment>` では、実際の"
"サーバでの静的ファイルの使い方について説明しています。"

msgid ""
"When you're comfortable with the static files, read :doc:`part 7 of this "
"tutorial </intro/tutorial07>` to learn how to customize Django's "
"automatically-generated admin site."
msgstr ""
"静的ファイルを使いこなせるようになったら、:doc:`チュートリアル その7 </intro/"
"tutorial07>` に進んで、Django が自動生成する管理サイトのカスタマイズをしてみ"
"ましょう。"

msgid "Writing your first Django app, part 7"
msgstr "はじめての Django アプリ作成、その 7"

msgid ""
"This tutorial begins where :doc:`Tutorial 6 </intro/tutorial06>` left off. "
"We're continuing the Web-poll application and will focus on customizing "
"Django's automatically-generated admin site that we first explored in :doc:"
"`Tutorial 2 </intro/tutorial02>`."
msgstr ""
"このチュートリアルは :doc:`チュートリアル その6 </intro/tutorial06>` の続きで"
"す。ここでは、引き続き Web 投票アプリケーションの開発を続け、 :doc:`チュート"
"リアル その2 </intro/tutorial02>` で少し触れた、Django が 自動生成する管理サ"
"イトのカスタマイズに焦点を当てます。"

msgid "Customize the admin form"
msgstr "admin フォームのカスタマイズ"

msgid ""
"By registering the ``Question`` model with ``admin.site."
"register(Question)``, Django was able to construct a default form "
"representation. Often, you'll want to customize how the admin form looks and "
"works. You'll do this by telling Django the options you want when you "
"register the object."
msgstr ""
"``admin.site.register(Question)`` の呼び出しによって ``Question`` モデルを登"
"録したことで、Django はデフォルトの形式でオブジェクトを表示できました。ふつう"
"は、admin フォームの表示方法や操作の仕方をデフォルトから少し変更したくなりま"
"すが、これには、オブジェクトを登録する時にオプションを指定します。"

msgid ""
"Let's see how this works by reordering the fields on the edit form. Replace "
"the ``admin.site.register(Question)`` line with:"
msgstr ""
"ためしに、編集フォームでのフィールドの並び順を並べ替えてみましょう。 ``admin."
"site.register(Question)`` の行を以下のように置き換えてみてください。"

msgid ""
"You'll follow this pattern -- create a model admin class, then pass it as "
"the second argument to ``admin.site.register()`` -- any time you need to "
"change the admin options for a model."
msgstr ""
"このように、モデルの admin のオプションを変更したいときには、モデルごとに "
"admin クラスを作成して、 ``admin.site.register()`` の 2 番目の引数に渡すと い"
"うパターンに従ってください。"

msgid ""
"This particular change above makes the \"Publication date\" come before the "
"\"Question\" field:"
msgstr ""
"上の例では、「Publication date」フィールドの表示位置を「Question」フィールド"
"よりも前に変更しています:"

msgid ""
"This isn't impressive with only two fields, but for admin forms with dozens "
"of fields, choosing an intuitive order is an important usability detail."
msgstr ""
"二つしかフィールドがないので、あまりぱっとした変化ではありませんね。しかし "
"admin フォームで何ダースものフィールドを操作するような場合には、直感的な"
"フィー ルドの並び順というものはユーザビリティ上重要な要素です。"

msgid ""
"And speaking of forms with dozens of fields, you might want to split the "
"form up into fieldsets:"
msgstr ""
"同じく何ダースもフィールドがある場合、フォームを複数のフィールドセットに分割"
"したいこともあるでしょう。"

msgid ""
"The first element of each tuple in :attr:`~django.contrib.admin.ModelAdmin."
"fieldsets` is the title of the fieldset. Here's what our form looks like now:"
msgstr ""
":attr:`~django.contrib.admin.ModelAdmin.fieldsets` の各タプルの先頭の要素は"
"フィールドセットのタイトルです。 フォームは以下のように表示されます。"

msgid "Adding related objects"
msgstr "リレーションを張ったオブジェクトの追加"

msgid ""
"OK, we have our Question admin page, but a ``Question`` has multiple "
"``Choice``\\s, and the admin page doesn't display choices."
msgstr ""
"OK、 Question の管理ページはできました。しかし ``Question`` は複数の "
"``Choice``\\s を持つのに、管理ページには表示されていませんね。"

msgid "Yet."
msgstr "今はまだ。"

msgid ""
"There are two ways to solve this problem. The first is to register "
"``Choice`` with the admin just as we did with ``Question``. That's easy:"
msgstr ""
"この問題の解決法は二つあります。一つ目は、 ``Question`` と同様、以下のように"
"して ``Choice`` モデルを管理サイトに登録するというものです。これは簡単です。"

msgid ""
"Now \"Choices\" is an available option in the Django admin. The \"Add choice"
"\" form looks like this:"
msgstr ""
"これで、 Django の管理サイト上で「Choice」 を選べます。「Choice の追加」"
"フォーム は以下のようになります。"

msgid ""
"In that form, the \"Question\" field is a select box containing every "
"question in the database. Django knows that a :class:`~django.db.models."
"ForeignKey` should be represented in the admin as a ``<select>`` box. In our "
"case, only one question exists at this point."
msgstr ""
"このフォームでは「Question」フィールドは選択ボックスで、データベース上の全て"
"の質問を選択できます。Django は :class:`~django.db.models.ForeignKey` を表示"
"する時には ``<select>`` ボックスを使わねばならないということを知っているので"
"す。今の時点では、 Question はデータベース上に一つしかないはずですね。"

msgid ""
"Also note the \"Add Another\" link next to \"Question.\" Every object with a "
"``ForeignKey`` relationship to another gets this for free. When you click "
"\"Add Another\", you'll get a popup window with the \"Add question\" form. "
"If you add a question in that window and click \"Save\", Django will save "
"the question to the database and dynamically add it as the selected choice "
"on the \"Add choice\" form you're looking at."
msgstr ""
"Question フィールドの隣に「もう一つ追加 (Add Another)」リンクがあるのに注意し"
"てください。 ``ForeignKey`` の関係にあるオブジェクトなら、何もしなくてもこの"
"リンクが表示されます。「もう一つ追加」をクリックすると、「Poll を追加 (Add "
"poll)」というポップアップウィンドウを表示します。このウィンドウで Poll を追加"
"して「保存」を押すと、 Django は Poll をデータベースに保存して、もとの "
"「Choice の追加」フォームに選択済みの項目として動的に追加します。"

msgid ""
"But, really, this is an inefficient way of adding ``Choice`` objects to the "
"system. It'd be better if you could add a bunch of Choices directly when you "
"create the ``Question`` object. Let's make that happen."
msgstr ""
"しかし、この方法は ``Choice`` オブジェクトをシステムに追加するには効率的では"
"ありません。 ``Question`` オブジェクトを追加する時に Choice をひと揃い追加で"
"きた方が便利ですよね。そうしてみましょう。"

msgid ""
"Remove the ``register()`` call for the ``Choice`` model. Then, edit the "
"``Question`` registration code to read:"
msgstr ""
"``Choice`` モデルに対する ``register()`` を削除して、 ``Question`` の登録する"
"部分を以下のように書き換えてください。"

msgid ""
"This tells Django: \"``Choice`` objects are edited on the ``Question`` admin "
"page. By default, provide enough fields for 3 choices.\""
msgstr ""
"この行は Django に対して、「``Choice`` オブジェクトは ``Question`` の管理ペー"
"ジから編集する。デフォルトでは、 3 つの ``Choice`` を表示するのに十分なフィー"
"ルドを用意すること」と指示しています。"

msgid "Load the \"Add question\" page to see how that looks:"
msgstr ""
"「questionを追加 (Add question)」ページを読み込んで、どのように見えるか確かめ"
"てみましょう。"

msgid ""
"It works like this: There are three slots for related Choices -- as "
"specified by ``extra`` -- and each time you come back to the \"Change\" page "
"for an already-created object, you get another three extra slots."
msgstr ""
"変わった点をみてみましょう。リレーション相手である ``Choice`` を表示するため"
"に 3 つのスロットがあります (``extra`` に指定した数ですね)。また、作成済みの"
"オブジェクトを「編集する」ページに行けば、いつでも 3 つ余分のスロットが表示さ"
"れるはずです。"

msgid ""
"At the end of the three current slots you will find an \"Add another Choice"
"\" link.  If you click on it, a new slot will be added. If you want to "
"remove the added slot, you can click on the X to the top right of the added "
"slot. Note that you can't remove the original three slots. This image shows "
"an added slot:"
msgstr ""
"現状ある3つのスロットの末尾に、「他の Choice を追加する (Add another "
"Choice)」リンクがあります。クリックすると、新しいプロットが追加されます。追加"
"されたスロットを削除したい場合は、追加されたスロット右上の 'X' をクリックして"
"ください。最初からある 3 つのスロットを削除できないことに注意してください。こ"
"の画像は追加されたスロットのみで有効です。"

msgid ""
"One small problem, though. It takes a lot of screen space to display all the "
"fields for entering related ``Choice`` objects. For that reason, Django "
"offers a tabular way of displaying inline related objects; you just need to "
"change the ``ChoiceInline`` declaration to read:"
msgstr ""
"さて、このコードにはちょっと問題があります。というのも、 ``Choice`` オブジェ"
"ク トを入力するためのフィールドを全部表示しようとすると、相当な広さのスクリー"
"ンが必要だからです。そこで、 Django にはテーブルを使ってインラインでリレー"
"ション相手のオブジェクトを表示するもう一つの方法があります。以下のように、 "
"``ChoiceInline`` の宣言を変更してください。"

msgid ""
"With that ``TabularInline`` (instead of ``StackedInline``), the related "
"objects are displayed in a more compact, table-based format:"
msgstr ""
"``StackedInline`` に変わって ``TabularInline`` を使うと、 リレーション相手の"
"オブジェクトはよりコンパクトなテーブル形式で表示されます:"

msgid ""
"Note that there is an extra \"Delete?\" column that allows removing rows "
"added using the \"Add Another Choice\" button and rows that have already "
"been saved."
msgstr ""
"追加の \"Delete?\" カラムがあることに注意してください。 \"Added Another "
"Choice\" ボタンで追加された行とすでに保存された行を削除するためにあります。"

msgid "Customize the admin change list"
msgstr "管理サイトのチェンジリストページをカスタマイズする"

msgid ""
"Now that the Question admin page is looking good, let's make some tweaks to "
"the \"change list\" page -- the one that displays all the questions in the "
"system."
msgstr ""
"さあ、これで Question の管理ページはだいぶよくなってきました。今度は「チェン"
"ジリスト」ページをすこしいじりましょう。チェンジリスト (change list) は、シス"
"テム上の全ての Question を表示するページです。"

msgid "Here's what it looks like at this point:"
msgstr "ここでは以下のようになります。"

msgid ""
"By default, Django displays the ``str()`` of each object. But sometimes it'd "
"be more helpful if we could display individual fields. To do that, use the :"
"attr:`~django.contrib.admin.ModelAdmin.list_display` admin option, which is "
"a tuple of field names to display, as columns, on the change list page for "
"the object:"
msgstr ""
"デフォルトでは、 Django はオブジェクトの ``str()`` を表示しますが、各フィール"
"ドの値も表示されていると便利でしょう。表示させるには :attr:`~django.contrib."
"admin.ModelAdmin.list_display` オプションを使います。このオプションには、カラ"
"ム表示したいフィールドの名前をタプルにして指定します。"

msgid ""
"Just for good measure, let's also include the ``was_published_recently()`` "
"method from :doc:`Tutorial 2 </intro/tutorial02>`:"
msgstr ""
"おまけとして、:doc:`チュートリアル その2 </intro/tutorial02>` で定義したカス"
"タムメソッド ``was_published_recently()`` も追加してみましょう。"

msgid "Now the question change list page looks like this:"
msgstr "これで、Question のチェンジリストのページは以下のようになります:"

msgid ""
"You can click on the column headers to sort by those values -- except in the "
"case of the ``was_published_recently`` header, because sorting by the output "
"of an arbitrary method is not supported. Also note that the column header "
"for ``was_published_recently`` is, by default, the name of the method (with "
"underscores replaced with spaces), and that each line contains the string "
"representation of the output."
msgstr ""
"カラムのヘッダをクリックすると、カラムの値に応じてエントリを並べ換えできま"
"す。ただし ``was_published_recently`` ヘッダは例外で、これはメソッドの戻り値"
"を 使った並べ換えをサポートしていないからです。 ``was_published_recently`` の"
"カラムヘッダのデフォルト値がメソッドの名前になっている (アンダースコアは空白"
"に置き換わっている)こと、各行が戻り値の文字列となっていることにも注意して下さ"
"い。"

msgid ""
"You can improve that by giving that method (in :file:`polls/models.py`) a "
"few attributes, as follows:"
msgstr ""
"これを改善するには、このメソッド (:file:`polls/models.py` にある) に次のよう"
"にいくつかの属性を追加します。"

msgid ""
"For more information on these method properties, see :attr:`~django.contrib."
"admin.ModelAdmin.list_display`."
msgstr ""
"このメソッドのプロパティに関する詳しい情報は、 :attr:`~django.contrib.admin."
"ModelAdmin.list_display` を参照してください。"

msgid ""
"Edit your :file:`polls/admin.py` file again and add an improvement to the "
"``Question`` change list page: filters using the :attr:`~django.contrib."
"admin.ModelAdmin.list_filter`. Add the following line to ``QuestionAdmin``::"
msgstr ""
":file:`polls/admin.py` ファイルをもう一度編集して、``Question`` のチェンジリ"
"ストのページに :attr:`~django.contrib.admin.ModelAdmin.list_filter` を追加し"
"て、さらに改良しましょう。それには、``QuestionAdmin`` に次に行を追加します。"

msgid ""
"That adds a \"Filter\" sidebar that lets people filter the change list by "
"the ``pub_date`` field:"
msgstr ""
"これで、「フィルタ (Filter)」サイドバーができ、チェンジリストを ``pub_date`` "
"フィールドの値に従ってフィルタできるようになります。"

msgid ""
"The type of filter displayed depends on the type of field you're filtering "
"on. Because ``pub_date`` is a :class:`~django.db.models.DateTimeField`, "
"Django knows to give appropriate filter options: \"Any date\", \"Today\", "
"\"Past 7 days\", \"This month\", \"This year\"."
msgstr ""
"フィルタの種類は、フィルタ対象のフィールドの種類に応じて変化します。"
"``pub_date`` は :class:`~django.db.models.DateTimeField` なので、Django はこ"
"のフィールドにふさわしいフィルタオプションが、「すべての期間 (\"Any date\")」"
"「今日 (\"Today\")」「今週 (\"Past 7 days\")」「今月 (\"This month\")」である"
"ことを知っているのです。"

msgid "This is shaping up well. Let's add some search capability::"
msgstr "細工は隆々ですね。今度は検索機能を追加してみましょう。"

msgid ""
"That adds a search box at the top of the change list. When somebody enters "
"search terms, Django will search the ``question_text`` field. You can use as "
"many fields as you'd like -- although because it uses a ``LIKE`` query "
"behind the scenes, limiting the number of search fields to a reasonable "
"number will make it easier for your database to do the search."
msgstr ""
"これで変更リストの上部に検索ボックスが表示されます。ユーザが検索語を入力する"
"と、 Django は ``question_text`` フィールドを検索します。フィールドはいくらで"
"も使えますが、舞台裏では ``LIKE`` クエリを使うのでデータベースに過剰な負荷を"
"かけないために常識的な範囲にしましょう。"

msgid ""
"Now's also a good time to note that change lists give you free pagination. "
"The default is to display 100 items per page. :attr:`Change list pagination "
"<django.contrib.admin.ModelAdmin.list_per_page>`, :attr:`search boxes "
"<django.contrib.admin.ModelAdmin.search_fields>`, :attr:`filters <django."
"contrib.admin.ModelAdmin.list_filter>`, :attr:`date-hierarchies <django."
"contrib.admin.ModelAdmin.date_hierarchy>`, and :attr:`column-header-ordering "
"<django.contrib.admin.ModelAdmin.list_display>` all work together like you "
"think they should."
msgstr ""
"さて、変更リストには何もしなくてもページ分割機能がある、ということをここでお"
"知らせしておいた方がよいでしょう。デフォルトではページあたり 100 個の要素を表"
"示します。:attr:`ページ分割 <django.contrib.admin.ModelAdmin."
"list_per_page>`、:attr:`検索ボックス <django.contrib.admin.ModelAdmin."
"search_fields>`、:attr:`フィルタ <django.contrib.admin.ModelAdmin."
"list_filter>`、:attr:`日付による階層化 <django.contrib.admin.ModelAdmin."
"date_hierarchy>`、:attr:`カラムヘッダを使った並び替え <django.contrib.admin."
"ModelAdmin.list_display>` チェンジリストの機能は、すべて協調して思いのままに"
"動作します。"

msgid "Customize the admin look and feel"
msgstr "管理サイトのルック & フィールをカスタマイズする"

msgid ""
"Clearly, having \"Django administration\" at the top of each admin page is "
"ridiculous. It's just placeholder text."
msgstr ""
"管理サイトの上部には「Django 管理 (Django adminstration)」と表示されています"
"が、これはいささか滑稽ですね。これは単なるプレースホルダテキストにすぎませ"
"ん。"

msgid ""
"That's easy to change, though, using Django's template system. The Django "
"admin is powered by Django itself, and its interfaces use Django's own "
"template system."
msgstr ""
"変更するのは簡単で、 Django のテンプレートシステムを使います。 Django の管理"
"サイトは、それ自身 Django で作られているので、インタフェースは Django のテン"
"プレートシステムを使っています。"

msgid "Customizing your *project's* templates"
msgstr "*プロジェクト* テンプレートをカスタムする。"

msgid ""
"Create a ``templates`` directory in your project directory (the one that "
"contains ``manage.py``). Templates can live anywhere on your filesystem that "
"Django can access. (Django runs as whatever user your server runs.) However, "
"keeping your templates within the project is a good convention to follow."
msgstr ""
"``templates`` ディレクトリをプロジェクトディレクトリ (``manage.py`` が置かれ"
"ているディレクトリ) に作成してください。テンプレートは Django がアクセスでき"
"るファイルシステム内のどこに置いても構いません (アプリケーションサーバーを実"
"行したユーザーでアクセスします)。しかし従うべき慣習として、テンプレートはプロ"
"ジェクト内に置きましょう。"

msgid ""
"Open your settings file (:file:`mysite/settings.py`, remember) and add a :"
"setting:`DIRS <TEMPLATES-DIRS>` option in the :setting:`TEMPLATES` setting:"
msgstr ""
"設定ファイル (:file:`mysite/settings.py`, remember) を開いて、:setting:"
"`TEMPLATES` 設定オプションの中に、次のように :setting:`DIRS <TEMPLATES-"
"DIRS>` オプションを追加します。"

msgid ""
":setting:`DIRS <TEMPLATES-DIRS>` is a list of filesystem directories to "
"check when loading Django templates; it's a search path."
msgstr ""
":setting:`DIRS <TEMPLATES-DIRS>` は、Django がテンプレートを読み込む時に"
"チェックする、ファイルシステム上のディレクトリのリストです。サーチパスのよう"
"なものです。"

msgid "Organizing templates"
msgstr "テンプレートの構成"

msgid ""
"Just like the static files, we *could* have all our templates together, in "
"one big templates directory, and it would work perfectly well. However, "
"templates that belong to a particular application should be placed in that "
"application’s template directory (e.g. ``polls/templates``) rather than the "
"project’s (``templates``). We'll discuss in more detail in the :doc:"
"`reusable apps tutorial </intro/reusable-apps>` *why* we do this."
msgstr ""
"static ファイルと同じように、すべてのテンプレートを1つの大きなテンプレート"
"ディレクトリの中に置くことも可能ではあります。しかし、到底のアプリケーション"
"に属するテンプレートは、プロジェクトのテンプレートディレクトリ(``templates``)"
"ではなく、各アプリケーションのテンプレートディレクトリ(例: ``polls/"
"templates``)に配置するべきです。 :doc:`再利用可能なアプリチュートリアル </"
"intro/reusable-apps>` では、そのようにすべき理由を説明しています。"

msgid ""
"Now create a directory called ``admin`` inside ``templates``, and copy the "
"template ``admin/base_site.html`` from within the default Django admin "
"template directory in the source code of Django itself (``django/contrib/"
"admin/templates``) into that directory."
msgstr ""
"さて、``templates`` の中に ``admin`` という名前のディレクトリを作りましょう。"
"Django 自体のソースコード内にある、デフォルトの Django admin テンプレートディ"
"レクトリ (``django/contrib/admin/templates``) を探して、 ``admin/base_site."
"html`` というテンプレートを、新しく作ったディレクトリにコピーします。"

msgid "Where are the Django source files?"
msgstr "Django のソースファイルの場所はどこ？"

msgid ""
"If you have difficulty finding where the Django source files are located on "
"your system, run the following command:"
msgstr ""
"Django のソースファイルがシステム中のどこにあるのか分からない場合は、以下のコ"
"マンドを実行してください。"

msgid ""
"Then, just edit the file and replace ``{{ site_header|default:_('Django "
"administration') }}`` (including the curly braces) with your own site's name "
"as you see fit. You should end up with a section of code like:"
msgstr ""
"あとは、ファイルを編集して、``{{ site_header|default:_('Django "
"administration') }}`` (カーリーブラケットも含みます) を適当な自分自身のサイト"
"名に書き換えるだけです。コードは最終的に次のようになります。"

msgid ""
"We use this approach to teach you how to override templates. In an actual "
"project, you would probably use the :attr:`django.contrib.admin.AdminSite."
"site_header` attribute to more easily make this particular customization."
msgstr ""
"他のテンプレートのオーバーライドも、このような方法で行います。実際のプロジェ"
"クトで今行ったのと同じカスタマイズを行いたい場合には、:attr:`django.contrib."
"admin.AdminSite.site_header` 属性を使えば、もっと簡単に設定できます。"

msgid ""
"This template file contains lots of text like ``{% block branding %}`` and "
"``{{ title }}``. The ``{%`` and ``{{`` tags are part of Django's template "
"language. When Django renders ``admin/base_site.html``, this template "
"language will be evaluated to produce the final HTML page, just like we saw "
"in :doc:`Tutorial 3 </intro/tutorial03>`."
msgstr ""
"このテンプレートファイルは \"{% block branding %}\" や \"{{ title }}\" のよう"
"なテキストを多く含んでいます。 \"{%\" と \"{{\" タグは Django のテンプレート"
"言語の一部です。 :doc:`チュートリアル その3 </intro/tutorial03>` で見たよう"
"に、Djangoが \"admin/base_site.html\" をレンダリングする時に、このテンプレー"
"ト言語が評価され、最終的なHTMLページが生成されます。"

msgid ""
"Note that any of Django's default admin templates can be overridden. To "
"override a template, just do the same thing you did with ``base_site.html`` "
"-- copy it from the default directory into your custom directory, and make "
"changes."
msgstr ""
"Django のデフォルトの admin 用テンプレートは上書き可能です。上書きするには、"
"ただ ``base_site.html`` にしたことと同じことをしてください。デフォルトのディ"
"レクトリからカスタム用のディレクトリにコピーして、変更してください。"

msgid "Customizing your *application's* templates"
msgstr "*アプリケーション用の* テンプレートをカスタマイズする"

msgid ""
"Astute readers will ask: But if :setting:`DIRS <TEMPLATES-DIRS>` was empty "
"by default, how was Django finding the default admin templates? The answer "
"is that, since :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` is set to ``True``, "
"Django automatically looks for a ``templates/`` subdirectory within each "
"application package, for use as a fallback (don't forget that ``django."
"contrib.admin`` is an application)."
msgstr ""
"するどい読者はこう質問されるでしょう: :setting:`DIRS <TEMPLATES-DIRS>`   はデ"
"フォルトで空っぽなのに、Djangoはなぜデフォルトのadminテンプレートを見つけるこ"
"とができたのだろう? その答えは:setting:`APP_DIRS <TEMPLATES-APP_DIRS>` が "
"``True`` に設定されているため、Djangoは自動的に各アプリケーションのパッケージ"
"のサブディレクトリからフォールバックとして``templates/``を探すからです"
"(``django.contrib.admin`` は一つのアプリケーションだということを忘れないでく"
"ださい)。"

msgid ""
"Our poll application is not very complex and doesn't need custom admin "
"templates. But if it grew more sophisticated and required modification of "
"Django's standard admin templates for some of its functionality, it would be "
"more sensible to modify the *application's* templates, rather than those in "
"the *project*. That way, you could include the polls application in any new "
"project and be assured that it would find the custom templates it needed."
msgstr ""
"投票アプリケーションはそれほど複雑ではないので、カスタムのアドミンテンプレー"
"トは必要ないでしょう。しかしより凝ったものに成長したり、機能のため標準の "
"admin テンプレートの変更は必要となった場合、 *アプリケーションの* テンプレー"
"トを編集するのは、 *プロジェクト* のそれを編集するより賢い選択になるでしょ"
"う。それにより、投票アプリケーションを他のどの新しいプロジェクトに追加できま"
"す。そのアプリが必要としているカスタムテンプレートを見つけることも見つけるこ"
"ともできます。"

msgid ""
"See the :ref:`template loading documentation <template-loading>` for more "
"information about how Django finds its templates."
msgstr ""
"Django のテンプレートの検索方法に関する詳しい情報は、:ref:`テンプレート読み込"
"み ドキュメント <template-loading>` を参照してください。"

msgid "Customize the admin index page"
msgstr "admin index ページをカスタムする"

msgid ""
"On a similar note, you might want to customize the look and feel of the "
"Django admin index page."
msgstr ""
"近い話題として、 Django の admin index ページのルックアンドフィールをカスタマ"
"イズもできます。"

msgid ""
"By default, it displays all the apps in :setting:`INSTALLED_APPS` that have "
"been registered with the admin application, in alphabetical order. You may "
"want to make significant changes to the layout. After all, the index is "
"probably the most important page of the admin, and it should be easy to use."
msgstr ""
"デフォルトでは、admin アプリケーションに登録されている :settings:"
"`INSTALLED_APPS` のすべてのアプリケーションが、アルファベット順に表示されてし"
"まいまうので、レイアウトを大きく変更したくなることがあるでしょう。なんといっ"
"ても、index ページはおそらく admin の中でも最も重要なページなので、使いやすく"
"あるべきですからね。"

msgid ""
"The template to customize is ``admin/index.html``. (Do the same as with "
"``admin/base_site.html`` in the previous section -- copy it from the default "
"directory to your custom template directory). Edit the file, and you'll see "
"it uses a template variable called ``app_list``. That variable contains "
"every installed Django app. Instead of using that, you can hard-code links "
"to object-specific admin pages in whatever way you think is best."
msgstr ""
"カスタマイズ対象のテンプレートは \"admin/index.html\" です。 (前セクションで "
"\"admin/base_site.html\" にしたことと同じことをしてください。デフォルトのディ"
"レクトリからコピーして、カスタムテンプレートのディレクトリに配置してくださ"
"い)。編集してみると \"app_list\" というテンプレート変数が使われているのがわか"
"るでしょう。この変数にはインストールされた全 Django アプリが含まれています。"
"これを使う代わりに、オブジェクトごとの管理ページヘのリンクをハードコードする"
"ことができます。"

msgid ""
"The beginner tutorial ends here. In the meantime, you might want to check "
"out some pointers on :doc:`where to go from here </intro/whatsnext>`."
msgstr ""
"これで、初めての人のためのチュートリアルはおしまいです。:doc:`次のステップへ "
"</intro/whatsnext>` では、ここから進める場所について説明しています。"

msgid ""
"If you are familiar with Python packaging and interested in learning how to "
"turn polls into a \"reusable app\", check out :doc:`Advanced tutorial: How "
"to write reusable apps</intro/reusable-apps>`."
msgstr ""
"Python のパッケージングについて知っていて、polls アプリケーションを「再利用可"
"能なアプリケーション」へと変える方法について学びたい場合は、:doc:`チュートリ"
"アル 応用編: 再利用可能なアプリケーションの書き方 </intro/reusable-apps>` を"
"読んでみてください。"

msgid "What to read next"
msgstr "次のステップへ"

msgid ""
"So you've read all the :doc:`introductory material </intro/index>` and have "
"decided you'd like to keep using Django. We've only just scratched the "
"surface with this intro (in fact, if you've read every single word, you've "
"read about 5% of the overall documentation)."
msgstr ""
"さあ、ここにきたあなたは、:doc:`入門編 </intro/index>` をあらかた読み終え"
"て、 Django を使い続ける決心をしたことだと思います。入門編では、Django のほん"
"の表面的な部分に触れただけにすぎません (実際、入門編の分量は、全体のドキュメ "
"ントの 5% にも満たないのです)。"

msgid "So what's next?"
msgstr "さて、次は何をしましょうか？"

msgid ""
"Well, we've always been big fans of learning by doing. At this point you "
"should know enough to start a project of your own and start fooling around. "
"As you need to learn new tricks, come back to the documentation."
msgstr ""
"そうですね、私たちは「なすことによって学ぶ (learning by doing)」ことがとても"
"大好きですよね。今や、読者のみなさんは自分のプロジェクトを作成して、いろいろ"
"と遊んでみるのに十分な段階にあります。もし新しい技を学ぶ必要が出てきたら、そ"
"の時は、いつでもここに戻って来てください。"

msgid ""
"We've put a lot of effort into making Django's documentation useful, easy to "
"read and as complete as possible. The rest of this document explains more "
"about how the documentation works so that you can get the most out of it."
msgstr ""
"私たちは、Django ドキュメントを有意義で、読みやすく、可能な限り完全なものにし"
"ようと努力しています。このドキュメントの残りの部分では、読者の皆さんが "
"Django のドキュメントをできるだけ活用できるように、ドキュメントがどういうしく"
"みになっているのかを説明しています。"

msgid ""
"(Yes, this is documentation about documentation. Rest assured we have no "
"plans to write a document about how to read the document about "
"documentation.)"
msgstr ""
"(そう、これはいわばドキュメントのドキュメントです。ただし、このドキュメントの"
"ドキュメントの読み方を説明するドキュメント、などといったものを書いたりはしま"
"せんから、安心してくださいね。)"

msgid "Finding documentation"
msgstr "ドキュメントの探し方"

msgid ""
"Django's got a *lot* of documentation -- almost 450,000 words and counting "
"-- so finding what you need can sometimes be tricky. A few good places to "
"start are the :ref:`search` and the :ref:`genindex`."
msgstr ""
"Django には、いまや約 450,000 語以上のたくさんドキュメントがあるので、その中"
"から必要なものを捜し出すのは大変です。そういうときは、:ref:`search` や :ref:"
"`genindex` から辿るとよいでしょう。"

msgid "Or you can just browse around!"
msgstr "もちろん、片っ端から読み進むのもいいですけどね。"

msgid "How the documentation is organized"
msgstr "ドキュメントの構成"

msgid ""
"Django's main documentation is broken up into \"chunks\" designed to fill "
"different needs:"
msgstr ""
"Django のドキュメントは、用途に応じていくつかのセクションに分かれています。"

msgid ""
"The :doc:`introductory material </intro/index>` is designed for people new "
"to Django -- or to Web development in general. It doesn't cover anything in "
"depth, but instead gives a high-level overview of how developing in Django "
"\"feels\"."
msgstr ""
":doc:`入門編 </intro/index>` は、Django やウェブ開発全般の初心者を対象に作ら"
"れています。あまり詳細な解説はありませんが、Django の開発が「どのようなもの"
"か」を高い視点から見られます。"

msgid ""
"The :doc:`topic guides </topics/index>`, on the other hand, dive deep into "
"individual parts of Django. There are complete guides to Django's :doc:"
"`model system </topics/db/index>`, :doc:`template engine </topics/"
"templates>`, :doc:`forms framework </topics/forms/index>`, and much more."
msgstr ""
"一方、:doc:`トピック別ガイド </topics/index>` では、Django の個々の構成要素に"
"ついて詳しく解説しています。このセクションでは、Django's :doc:`モデルシステ"
"ム </topics/db/index>`、:doc:`テンプレートエンジン </topics/templates>`、:"
"doc:`フォームフレームワーク </topics/forms/index>`などといったトピックを解説"
"しています。"

msgid ""
"This is probably where you'll want to spend most of your time; if you work "
"your way through these guides you should come out knowing pretty much "
"everything there is to know about Django."
msgstr ""
"おそらく、読者の皆さんは、このセクションを読み進むのに、大部分の時間を使うで"
"しょう。このガイドを全て読破すれば、Django を扱う上で必要なことのほとんどを知"
"ることができるはずです。"

msgid ""
"Web development is often broad, not deep -- problems span many domains. "
"We've written a set of :doc:`how-to guides </howto/index>` that answer "
"common \"How do I ...?\" questions. Here you'll find information about :doc:"
"`generating PDFs with Django </howto/outputting-pdf>`, :doc:`writing custom "
"template tags </howto/custom-template-tags>`, and more."
msgstr ""
"ウェブ開発に必要な知識は、いくつもの領域にまたがって広く浅く分布しているもの"
"です。このセクションには、「〜をするにはどうしたらよいか？」というような質問"
"に答えてくれる :doc:`How-to </howto/index>` が集まっています。たとえば、:doc:"
"`Django で PDF を生成する方法 </howto/outputting-pdf>` や、:doc:`テンプレート"
"タグを自作する方法 </howto/custom-template-tags>` などの How-to があります。"

msgid ""
"Answers to really common questions can also be found in the :doc:`FAQ </faq/"
"index>`."
msgstr "よくある質問は、これとは別に :doc:`FAQ </faq/index>` で扱っています。"

msgid ""
"The guides and how-to's don't cover every single class, function, and method "
"available in Django -- that would be overwhelming when you're trying to "
"learn. Instead, details about individual classes, functions, methods, and "
"modules are kept in the :doc:`reference </ref/index>`. This is where you'll "
"turn to find the details of a particular function or whatever you need."
msgstr ""
"ガイドや How-to ドキュメントでは、Django のクラスや関数、メソッドのすべてを解"
"説しているわけではありません。初めて Django を学ぼうとする人に一度に全てを教"
"えようとしても、教えたことが記憶からあふれてしまうからです。その代わりに、一"
"つひとつのクラスや関数、メソッド、モジュールの詳しい解説は、 :doc:`リファレン"
"ス </ref/index>` に書いてあります。特定の関数の仕様や、使える機能を調べたい場"
"合には、このセクションを参照してください。"

msgid ""
"If you are interested in deploying a project for public use, our docs have :"
"doc:`several guides</howto/deployment/index>` for various deployment setups "
"as well as a :doc:`deployment checklist</howto/deployment/checklist>` for "
"some things you'll need to think about."
msgstr ""
"公開用にプロジェクトをデプロイする方法について知りたければ、さまざまなデプロ"
"イ環境に対応した :doc:`いくつかのガイド</howto/deployment/index>` を用意して"
"います。デプロイ時に考えなくてはいけないことをリストアップした :doc:`デプロイ"
"時チェックリストdeployment checklist</howto/deployment/checklist>` と合わせて"
"読んでみてください。"

msgid ""
"Finally, there's some \"specialized\" documentation not usually relevant to "
"most developers. This includes the :doc:`release notes </releases/index>` "
"and :doc:`internals documentation </internals/index>` for those who want to "
"add code to Django itself, and a :doc:`few other things that simply don't "
"fit elsewhere </misc/index>`."
msgstr ""
"最後に、ほとんどの開発者にとってはあまり関係のない「特殊な」ドキュメントとし"
"て、 :doc:`リリースノート </releases/index>`、Django 自体にコードを追加したい"
"人のための :doc:`内部使用のドキュメント </internals/index>`、そして、:doc:`分"
"類が難しいその他のドキュメント </misc/index>` があります。"

msgid "How documentation is updated"
msgstr "ドキュメントの更新の方針"

msgid ""
"Just as the Django code base is developed and improved on a daily basis, our "
"documentation is consistently improving. We improve documentation for "
"several reasons:"
msgstr ""
"Django のコードベースが毎日のように開発と改良を重ねているように、ドキュメン "
"トも常に改良を重ねています。ドキュメントの改良は以下のような理由に基づいて 行"
"われます。"

msgid "To make content fixes, such as grammar/typo corrections."
msgstr "文法やタイプミスなどの誤りを修正する場合。"

msgid ""
"To add information and/or examples to existing sections that need to be "
"expanded."
msgstr "既存の内容に対して、新たに情報や例題を追加する場合。"

msgid ""
"To document Django features that aren't yet documented. (The list of such "
"features is shrinking but exists nonetheless.)"
msgstr ""
"まだ解説されていない Django の機能をドキュメント化する場合 (未ドキュメントの"
"機能は減りつつありますが、まだいくつか残っています)。"

msgid ""
"To add documentation for new features as new features get added, or as "
"Django APIs or behaviors change."
msgstr ""
"新たな機能が追加され、ドキュメントも追加する場合。あるいは、Django の API や"
"挙動が変更された場合。"

msgid ""
"Django's documentation is kept in the same source control system as its "
"code. It lives in the `docs`_ directory of our Git repository. Each document "
"online is a separate text file in the repository."
msgstr ""
"Django のドキュメントはコードと同じソースコード管理システム下にあり、 Git リ"
"ポジトリの `docs`_ ディレクトリ以下に置かれています。オンラインで表示される各"
"ドキュメントは、レポジトリ上でそれぞれ別々のテキストファイルに分かれていま"
"す。"

msgid "Where to get it"
msgstr "ドキュメントの入手"

msgid ""
"You can read Django documentation in several ways. They are, in order of "
"preference:"
msgstr ""
"Django のドキュメントを入手するにはいくつか方法があります。おすすめの順に以 "
"下に示します。"

msgid "On the Web"
msgstr "Web 版"

msgid ""
"The most recent version of the Django documentation lives at https://docs."
"djangoproject.com/en/dev/. These HTML pages are generated automatically from "
"the text files in source control. That means they reflect the \"latest and "
"greatest\" in Django -- they include the very latest corrections and "
"additions, and they discuss the latest Django features, which may only be "
"available to users of the Django development version. (See \"Differences "
"between versions\" below.)"
msgstr ""
"Django ドキュメントの最新版は https://docs.djangoproject.com/en/dev/ にありま"
"す。ここにある HTML ページは、ソースコード管理システム上のテキストファイルか"
"ら自動生成されているものです。したがって、これらのファイルは「最新最良の」 "
"Django に対応しています。つまり、最近の修正や追加事項を反映していて、 まだ開"
"発版でしか使えないような最新の機能についても部分的に解説しているわけです。(後"
"述の「バージョン間の相違点」を参照してください。)"

msgid ""
"We encourage you to help improve the docs by submitting changes, corrections "
"and suggestions in the `ticket system`_. The Django developers actively "
"monitor the ticket system and use your feedback to improve the documentation "
"for everybody."
msgstr ""
"ドキュメント改良のお手伝いは大歓迎です。変更すべき点、修正すべき点、改良す べ"
"き点などを `チケットシステム`_ に提出してください。Django の開発陣はチケット"
"システムを監視して、あなたのフィードバックが皆に恩恵をもたらすようにドキュメ"
"ントを改良しています。"

msgid ""
"Note, however, that tickets should explicitly relate to the documentation, "
"rather than asking broad tech-support questions. If you need help with your "
"particular Django setup, try the |django-users| mailing list or the `#django "
"IRC channel`_ instead."
msgstr ""
"ただし、チケットは一般的なテクニカルサポートに関わる質問ではなく、ドキュメ ン"
"ト自体に関する内容にしてください。 Django のセットアップに関する個別の問 題は"
"ドキュメントのコメント欄にではなく、 django-users メーリングリストや IRC の "
"`#django チャネル`_ にお願いします。"

msgid "In plain text"
msgstr "プレーンテキスト版"

msgid ""
"For offline reading, or just for convenience, you can read the Django "
"documentation in plain text."
msgstr ""
"オフラインで読みたい人や手早く読みたい人のために、Django ドキュメントはプレー"
"ンテキスト形式でも読めます。"

msgid ""
"If you're using an official release of Django, note that the zipped package "
"(tarball) of the code includes a ``docs/`` directory, which contains all the "
"documentation for that release."
msgstr ""
"Django の公式リリース版を使っているなら、ソースコードのアーカイブパッケージ "
"(tarball) に docs/ ディレクトリが入っています。このディレクトリには各リリース"
"の全てのドキュメントが入っています。"

msgid ""
"If you're using the development version of Django (aka \"trunk\"), note that "
"the ``docs/`` directory contains all of the documentation. You can update "
"your Git checkout to get the latest changes."
msgstr ""
"Django の開発版 (別名 “trunk”) を使っている場合、``docs/`` ディレクトリに全て"
"のドキュメントが入っています。最新版を取得したければ、Git checkout を実行して"
"ください。"

msgid ""
"One low-tech way of taking advantage of the text documentation is by using "
"the Unix ``grep`` utility to search for a phrase in all of the "
"documentation. For example, this will show you each mention of the phrase "
"\"max_length\" in any Django document:"
msgstr ""
"テキストドキュメントの便利でローテクな使い方の一つに Unix の grep ユーティリ"
"ティを使った全ドキュメント検索があります。例えば、以下のようにすれば、 "
"“max_length” について触れている部分を表示できます:"

msgid "As HTML, locally"
msgstr "ローカルで HTML で読む"

msgid ""
"You can get a local copy of the HTML documentation following a few easy "
"steps:"
msgstr ""
"以下の簡単なステップを踏めば、 HTML ドキュメントのローカルコピーを手に入れら"
"れます。"

msgid ""
"Django's documentation uses a system called Sphinx__ to convert from plain "
"text to HTML. You'll need to install Sphinx by either downloading and "
"installing the package from the Sphinx website, or with ``pip``:"
msgstr ""
"Django のドキュメントは、 Sphinx__ というシステムを使ってプレーンテキストか"
"ら HTML への変換を行っています。 Sphinx のウェブサイトから Sphinx をダウン"
"ロードしてインストールするか、次のコマンドで ``pip`` を使ってインストールしま"
"す。"

msgid ""
"Then, just use the included ``Makefile`` to turn the documentation into HTML:"
msgstr ""
"そして、次のコマンドで、Django のドキュメントディレクトリにある ``Makefile`` "
"を使って、ドキュメントを HTML に変換するだけです。"

msgid "You'll need `GNU Make`__ installed for this."
msgstr ""
"これを実行するには、`GNU Make`__ がインストールされている必要があります。"

msgid "If you're on Windows you can alternatively use the included batch file:"
msgstr ""
"もし Windows の場合は、ドキュメントディレクトリにあるバッチファイルを使用して"
"変換できます。"

msgid "The HTML documentation will be placed in ``docs/_build/html``."
msgstr "HTML ドキュメントが ``docs/_build/html`` に生成されます。"

msgid "Differences between versions"
msgstr "バージョンごとの違い"

msgid ""
"As previously mentioned, the text documentation in our Git repository "
"contains the \"latest and greatest\" changes and additions. These changes "
"often include documentation of new features added in the Django development "
"version -- the Git (\"trunk\") version of Django. For that reason, it's "
"worth pointing out our policy on keeping straight the documentation for "
"various versions of the framework."
msgstr ""
"前述したように、 Git リポジトリに入っているテキストドキュメントは変更や追加に"
"よって「最新最良」の状態にあります。変更によって、開発版、すなわち Git "
"(“trunk”) 版の Django に新たに登場した機能がテキストに記載されることがよくあ"
"ります。このため、Django の各バージョン間で一貫したドキュメンテーションポリシ"
"をここで示しておきます。"

msgid "We follow this policy:"
msgstr "私たちは以下の方針に従います。"

msgid ""
"The primary documentation on djangoproject.com is an HTML version of the "
"latest docs in Git. These docs always correspond to the latest official "
"Django release, plus whatever features we've added/changed in the framework "
"*since* the latest release."
msgstr ""
"djangoproject.com の第一のドキュメントは Git の 最新の docs から生成される "
"HTML 形式のドキュメントです。これらのドキュメントは、常に最新の Django 公式リ"
"リースと、最新のリリース *以後* に追加／変更された機能に対応しています。"

msgid ""
"As we add features to Django's development version, we try to update the "
"documentation in the same Git commit transaction."
msgstr ""
"Django の開発版に機能を追加する場合、可能ならば、同じ Git のコミットトランザ"
"クションにおいて、ドキュメントの変更もコミットします。"

msgid ""
"To distinguish feature changes/additions in the docs, we use the phrase: "
"\"New in version X.Y\", being X.Y the next release version (hence, the one "
"being developed)."
msgstr ""
"追加／変更された機能を区別するため、「バージョン X.Y で新たに追加された機能で"
"す (New in version X.Y)」 というフレーズを使います。X.Y は次の (開発中の) リ"
"リースバージョンです。"

msgid ""
"Documentation fixes and improvements may be backported to the last release "
"branch, at the discretion of the committer, however, once a version of "
"Django is :ref:`no longer supported<backwards-compatibility-policy>`, that "
"version of the docs won't get any further updates."
msgstr ""
"ドキュメントの修正や改善は、コミッターの判断により、最後のリリースブランチに"
"バックポートされることがあります。しかし、あるバージョンが :ref:`サポート終了"
"<backwards-compatibility-policy>` の状態にされた場合、そのバージョンのドキュ"
"メントは、それ以上いかなる更新もされません。"

msgid ""
"The `main documentation Web page`_ includes links to documentation for all "
"previous versions. Be sure you are using the version of the docs "
"corresponding to the version of Django you are using!"
msgstr ""
"`Web のドキュメントのメインページ`_ には、以前の全てのバージョンのドキュメン"
"トへのリンクがあるので、今使っている Django のバージョンと、今読んでいるド"
"キュメントのバージョンとが、ちゃんと同じものであるか、十分に注意するようにし"
"てください！"
