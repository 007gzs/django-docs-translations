# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# 
# Translators:
# gustavi <augustin.laville@gustavi.net>, 2014
# CHABERT Loic <chabert.loic.74@gmail.com>, 2013
# Christophe kryskool <christophe.chauvet@gmail.com>, 2013
# Claude Paroz <claude@2xlibre.net>, 2015
# Jérôme Hugon <jerome@theatreinterface.ch>, 2015
# mlorant <maxime.lorant@gmail.com>, 2014-2015
# Sébastien Fievet <zyegfryed@gmail.com>, 2014
msgid ""
msgstr ""
"Project-Id-Version: django-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-12-30 03:06-0600\n"
"PO-Revision-Date: 2015-12-30 13:05+0000\n"
"Last-Translator: Claude Paroz <claude@2xlibre.net>\n"
"Language-Team: French (http://www.transifex.com/django/django-docs/language/fr/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

# f7d32e372e7c49af8393307df4152ae1
#: ../../../../1.9/docs/releases/0.95.txt:3
msgid "Django version 0.95 release notes"
msgstr "Notes de publication pour Django version 0.95"

# 4ff9c72331c8467597a61da2d54ed144
#: ../../../../1.9/docs/releases/0.95.txt:5
msgid "Welcome to the Django 0.95 release."
msgstr "Bienvenue sur la version 0.95 de Django."

# a17d8ce452704dc1842fc911f719af2f
#: ../../../../1.9/docs/releases/0.95.txt:7
msgid ""
"This represents a significant advance in Django development since the 0.91 "
"release in January 2006. The details of every change in this release would "
"be too extensive to list in full, but a summary is presented below."
msgstr "Cela représente un progrès important dans le développement de Django depuis la publication de la 0.91 en Janvier 2006. Les détails de chaque changement contenu dans cette publication seraient trop longs à énumérer dans son intégralité, mais un résumé est présenté ci-dessous."

# b026dac7ece848378d97bb8232213b69
#: ../../../../1.9/docs/releases/0.95.txt:12
msgid "Suitability and API stability"
msgstr "Pertinence et stabilité de l'API"

# 3dd9cb0bcea046d5b3c8987fba8f64c7
#: ../../../../1.9/docs/releases/0.95.txt:14
msgid ""
"This release is intended to provide a stable reference point for developers "
"wanting to work on production-level applications that use Django."
msgstr "Cette publication est destinée à fournir un point de référence stable pour les développeurs souhaitant travailler sur des applications de production et utilisant Django."

# e260c21c2be7433bb2324b9504373d44
#: ../../../../1.9/docs/releases/0.95.txt:17
msgid ""
"However, it's not the 1.0 release, and we'll be introducing further changes "
"before 1.0. For a clear look at which areas of the framework will change "
"(and which ones will *not* change) before 1.0, see the ``api-stability.txt``"
" file, which lives in the docs/ directory of the distribution."
msgstr "Cependant, il ne s'agit pas de la publication de la 1.0, et nous introduirons de nouvelles modifications avant la 1.0. Pour avoir une bonne vision de quelles zones du système pourraient changer (et celles qui ne changeront *pas*) avant la 1.0, voir le fichier ``api-stability.txt``, qui réside dans le répertoire docs/ de la distribution."

# ace9693f33074491a5942e3a922ae0fe
#: ../../../../1.9/docs/releases/0.95.txt:22
msgid ""
"You may have a need to use some of the features that are marked as \"subject"
" to API change\" in that document, but that's OK with us as long as it's OK "
"with you, and as long as you understand APIs may change in the future."
msgstr "Vous pourriez avoir besoin d'utiliser certaines des fonctionnalités qui sont marqués comme « sous réserve de changement d'API » dans ce document, mais c'est OK avec nous aussi longtemps que c'est OK avec vous, et aussi longtemps que vous comprenez que les API peuvent changer dans le futur."

# 0e12c22671154cf7a6581d279bad5978
#: ../../../../1.9/docs/releases/0.95.txt:26
msgid ""
"Fortunately, most of Django's core APIs won't be changing before version "
"1.0. There likely won't be as big of a change between 0.95 and 1.0 versions "
"as there was between 0.91 and 0.95."
msgstr "Heureusement, la majorité des API du noyau de Django ne changeront pas avant la version 1.0. Il n'y aura probablement pas de changements aussi importants entre les versions 0.95 et 1.0 qu'il y en a eu entre les versions 0.91 et 0.95."

# 8a85484892504d85ad062fec8acf4293
#: ../../../../1.9/docs/releases/0.95.txt:31
msgid "Changes and new features"
msgstr "Changements et nouvelles fonctionalités "

# 2fa6ad36dec547f3a914b20a18151649
#: ../../../../1.9/docs/releases/0.95.txt:33
msgid ""
"The major changes in this release (for developers currently using the 0.91 "
"release) are a result of merging the 'magic-removal' branch of development. "
"This branch removed a number of constraints in the way Django code had to be"
" written that were a consequence of decisions made in the early days of "
"Django, prior to its open-source release. It's now possible to write more "
"natural, Pythonic code that works as expected, and there's less \"black "
"magic\" happening behind the scenes."
msgstr "Le changement principal dans cette version (pour les développeurs utilisant toujours la version 0.91) est la fusion de la branche de développement 'magic-removal'. Cette branche retire un certain nombre de contraintes dans la façon d'écrire du code avec Django, qui était une conséquence des décisions faites au début de l'existence du framework, avant sa version libre. Il est désormais possible d'écrire de façon plus naturel et Pythonique certains codes, avec un côté moins \"magique\" derrière."

# 0599cdd2b5234bd3acd2f622dbca2219
#: ../../../../1.9/docs/releases/0.95.txt:41
msgid ""
"Aside from that, another main theme of this release is a dramatic increase "
"in usability. We've made countless improvements in error messages, "
"documentation, etc., to improve developers' quality of life."
msgstr "En parallèle, un changement conséquent de cette version est l'amélioration de l'utilisabilité du framework. Nous avons réalisé un nombre incalculable d'améliorations dans les messages d'erreurs, la documentation, etc., afin de faciliter la vie des développeurs. "

# 177b55adf7334f8b862fe8b5c6a7ae09
#: ../../../../1.9/docs/releases/0.95.txt:45
msgid "The new features and changes introduced in 0.95 include:"
msgstr "Les nouvelles fonctionnalités et modifications introduites dans la version 0.95 sont entre autre :"

# 47aa0ae6f6de4c5385b3101d185f3631
#: ../../../../1.9/docs/releases/0.95.txt:47
msgid ""
"Django now uses a more consistent and natural filtering interface for "
"retrieving objects from the database."
msgstr "Django utilise maintenant une interface de filtrage plus cohérente et naturelle pour récupérer des objet depuis la base de donnée"

# 1b0da0798b9d493fabf1ca685878ed54
#: ../../../../1.9/docs/releases/0.95.txt:50
msgid ""
"User-defined models, functions and constants now appear in the module "
"namespace they were defined in. (Previously everything was magically "
"transferred to the django.models.* namespace.)"
msgstr "Les modèles définis par l'utilisateur, les fonctions et constantes apparaissent désormais dans l'espace de noms du module où ils ont été défini. (Auparavant, tout était transféré dans l'espace de nom django.models.* de façon magique)"

# 050ad4db82c648f98421e7c1f5ab8291
#: ../../../../1.9/docs/releases/0.95.txt:54
msgid ""
"Some optional applications, such as the FlatPage, Sites and Redirects apps, "
"have been decoupled and moved into django.contrib. If you don't want to use "
"these applications, you no longer have to install their database tables."
msgstr "Divers applications optionnelles, comme FlatPages, Sites et Redirects, ont été séparées et déplacées vers django.contrib. Si vous n'utilisez pas ces applications, vous n'êtes plus obligé de créer leurs tables dans la base de données."

# 4807785964cd4e90abb2cf4a388fef29
#: ../../../../1.9/docs/releases/0.95.txt:59
msgid "Django now has support for managing database transactions."
msgstr "Django intègre désormais le support de la gestion des transactions de base de données."

# 0f78920548554b28a530b9a9a8a6c7a2
#: ../../../../1.9/docs/releases/0.95.txt:61
msgid ""
"We've added the ability to write custom authentication and authorization "
"backends for authenticating users against alternate systems, such as LDAP."
msgstr "Nous avons ajouté la possibilité d'écrire son propre système d'authentification et de permissions, pour identifier les utilisateurs avec des systèmes alternatifs tel que LDAP."

# 09c89da306b74fe0b029fb9023e81433
#: ../../../../1.9/docs/releases/0.95.txt:65
msgid ""
"We've made it easier to add custom table-level functions to models, through "
"a new \"Manager\" API."
msgstr ""

# 1c7843d0e26b45cdb021179de80867eb
#: ../../../../1.9/docs/releases/0.95.txt:68
msgid ""
"It's now possible to use Django without a database. This simply means that "
"the framework no longer requires you to have a working database set up just "
"to serve dynamic pages. In other words, you can just use URLconfs/views on "
"their own. Previously, the framework required that a database be configured,"
" regardless of whether you actually used it."
msgstr "Il est maintenant possible d'utiliser Django sans base de données. Cela signifie simplement que le cadre ne nécessite plus que vous avez une base de données de travail mis en place juste pour servir des pages dynamiques. En d'autres termes, vous pouvez simplement utiliser URLconfs / points de vue sur leur propre. Auparavant, le cadre nécessaire qu'une base de données est configurée, indépendamment du fait que vous avez réellement utilisé."

# 7e5837f4b0224119b380b68e095e030d
#: ../../../../1.9/docs/releases/0.95.txt:74
msgid ""
"It's now more explicit and natural to override save() and delete() methods "
"on models, rather than needing to hook into the pre_save() and post_save() "
"method hooks."
msgstr "Il est désormais plus explicite et naturel de surcharger les méthodes save() et delete() dans les modèles, plutôt que de devoir passer via les hooks pre_save() et post_save()."

# 40ce60b5bff94578af43db869c8fd1c7
#: ../../../../1.9/docs/releases/0.95.txt:78
msgid ""
"Individual pieces of the framework now can be configured without requiring "
"the setting of an environment variable. This permits use of, for example, "
"the Django templating system inside other applications."
msgstr "Des pièces individuelles du cadre peuvent désormais être configurés sans nécessiter l'établissement d'une variable d'environnement. Cela permet d'utiliser, par exemple, le système de templates Django à l'intérieur d'autres applications."

# 9531b24cee644275bc643a9a32707d9a
#: ../../../../1.9/docs/releases/0.95.txt:82
msgid ""
"More and more parts of the framework have been internationalized, as we've "
"expanded internationalization (i18n) support. The Django codebase, including"
" code and templates, has now been translated, at least in part, into 31 "
"languages. From Arabic to Chinese to Hungarian to Welsh, it is now possible "
"to use Django's admin site in your native language."
msgstr "De plus en plus de parties du cadre ont été internationalisée, comme nous l'avons élargi le soutien à l'internationalisation (i18n). La base de code Django, y compris le code et modèles, a été traduit, au moins en partie, dans 31 langues. De l'arabe au chinois au hongrois au gallois, il est désormais possible d'utiliser le site d'administration de Django dans votre langue maternelle."

# 27346e00e81940aaa69c5741496e3b66
#: ../../../../1.9/docs/releases/0.95.txt:88
msgid ""
"The number of changes required to port from 0.91-compatible code to the 0.95"
" code base are significant in some cases. However, they are, for the most "
"part, reasonably routine and only need to be done once. A list of the "
"necessary changes is described in the `Removing The Magic`_ wiki page. There"
" is also an easy checklist_ for reference when undertaking the porting "
"operation."
msgstr "Le nombre de changements pour rendre du code compatible 0.91 à la version 0.95 peut être important dans certains cas. Cependant, ces changements sont, pour la plupart, assez mécaniques et n'ont besoin d'être effectués qu'une seule fois. Une liste des changements nécessaire est décrit dans la page wiki `Removing The Magic`_. Il y a également une checklist_ auquel vous pouvez vous référer au moment du basculement."

# e6f1b5b44ca84c90bb9a5148cd3b10c8
#: ../../../../1.9/docs/releases/0.95.txt:98
msgid "Problem reports and getting help"
msgstr "Les rapports de problème et la demande d'aide"

# 9fccdc048e184f618587c8f336ba52fe
#: ../../../../1.9/docs/releases/0.95.txt:100
msgid ""
"Need help resolving a problem with Django? The documentation in the "
"distribution is also available :doc:`online </index>` at the `Django "
"website`_. The :doc:`FAQ </faq/index>` document is especially recommended, "
"as it contains a number of issues that come up time and again."
msgstr ""

# d9472726a250463d88a9caba8afdcc65
#: ../../../../1.9/docs/releases/0.95.txt:105
msgid ""
"For more personalized help, the `django-users`_ mailing list is a very "
"active list, with more than 2,000 subscribers who can help you solve any "
"sort of Django problem. We recommend you search the archives first, though, "
"because many common questions appear with some regularity, and any "
"particular problem may already have been answered."
msgstr "Pour une aide personnalisé, la mailing-list `django-users`_ est très active, avec plus de 2 000 inscrits, qui peuvent vous aider à résoudre n'importe quel type de problème avec Django. Nous vous recommandons de chercher tout d'abord dans les archives, car de nombreuses questions basiques sont posées régulièrement et votre problème a donc peut-être déjà été réglé."

# 8c57a4b6d10146ecaa86cc811b1ab44b
#: ../../../../1.9/docs/releases/0.95.txt:111
msgid ""
"Finally, for those who prefer the more immediate feedback offered by IRC, "
"there's a #django channel on irc.freenode.net that is regularly populated by"
" Django users and developers from around the world. Friendly people are "
"usually available at any hour of the day -- to help, or just to chat."
msgstr "Enfin, pour ceux qui préfère une réponse immédiate via IRC, il existe #django sur irc.freenode.net avec très souvent des utilisateurs et développeurs de Django du monde entier. Il y a toujours des gens amicales pour vous aider à n'importe quelle heure, ou juste pour discuter."

# a1908aa71d5e4913848b14f26532ac4d
#: ../../../../1.9/docs/releases/0.95.txt:119
msgid "Thanks for using Django!"
msgstr "Merci d'utiliser Django!"

# d609d9d5d8dd4df4a973603c99b299ce
#: ../../../../1.9/docs/releases/0.95.txt:121
msgid "The Django Team July 2006"
msgstr "L'équipe Django en Juillet 2006"

# d715723bfc4449e2a6f396722d6f0d2d
#: ../../../../1.9/docs/releases/0.96.txt:3
msgid "Django version 0.96 release notes"
msgstr "Notes de versions Django 0.96"

# f26e38183dc941f092f40247a4c65f28
#: ../../../../1.9/docs/releases/0.96.txt:5
msgid "Welcome to Django 0.96!"
msgstr "Bienvenue sur Django 0.96 !"

# ad2e5ba8339142f08c0bd57d1d720ea9
#: ../../../../1.9/docs/releases/0.96.txt:7
msgid ""
"The primary goal for 0.96 is a cleanup and stabilization of the features "
"introduced in 0.95. There have been a few small `backwards-incompatible "
"changes`_ since 0.95, but the upgrade process should be fairly simple and "
"should not require major changes to existing applications."
msgstr ""

# 5d0ad27b6a054745951b485aab791109
#: ../../../../1.9/docs/releases/0.96.txt:12
msgid ""
"However, we're also releasing 0.96 now because we have a set of backwards-"
"incompatible changes scheduled for the near future. Once completed, they "
"will involve some code changes for application developers, so we recommend "
"that you stick with Django 0.96 until the next official release; then you'll"
" be able to upgrade in one step instead of needing to make incremental "
"changes to keep up with the development version of Django."
msgstr ""

# 5b314a7d7e1544f5b0a1b37a7f71b8b6
# 484fd75eb9654cd6bcb69f047759f44a
#: ../../../../1.9/docs/releases/0.96.txt:21
#: ../../../../1.9/docs/releases/1.0.txt:33
msgid "Backwards-incompatible changes"
msgstr ""

# 699d57c76430447eb724f6f5c3611cbb
#: ../../../../1.9/docs/releases/0.96.txt:23
msgid ""
"The following changes may require you to update your code when you switch "
"from 0.95 to 0.96:"
msgstr ""

# 32c0d56a01ca46909ddd69d00023a944
#: ../../../../1.9/docs/releases/0.96.txt:27
msgid "``MySQLdb`` version requirement"
msgstr ""

# 8fbfe32631d54183afa0a949a25541d3
#: ../../../../1.9/docs/releases/0.96.txt:29
msgid ""
"Due to a bug in older versions of the ``MySQLdb`` Python module (which "
"Django uses to connect to MySQL databases), Django's MySQL backend now "
"requires version 1.2.1p2 or higher of ``MySQLdb``, and will raise exceptions"
" if you attempt to use an older version."
msgstr ""

# c51ff5a85ca44f7a9802811f8e2defb5
#: ../../../../1.9/docs/releases/0.96.txt:34
msgid ""
"If you're currently unable to upgrade your copy of ``MySQLdb`` to meet this "
"requirement, a separate, backwards-compatible backend, called \"mysql_old\","
" has been added to Django. To use this backend, change the "
"``DATABASE_ENGINE`` setting in your Django settings file from this::"
msgstr ""

# 7299f7e6cb9f43fa8d84a8736a91e442
# 09f3e6b561f642d1bc5b1446689d8c13
#: ../../../../1.9/docs/releases/0.96.txt:41
#: ../../../../1.9/docs/releases/1.2.txt:593
msgid "to this::"
msgstr ""

# 9dce7a3244b54328a331be01e9a07056
#: ../../../../1.9/docs/releases/0.96.txt:45
msgid ""
"However, we strongly encourage MySQL users to upgrade to a more recent "
"version of ``MySQLdb`` as soon as possible, The \"mysql_old\" backend is "
"provided only to ease this transition, and is considered deprecated; aside "
"from any necessary security fixes, it will not be actively maintained, and "
"it will be removed in a future release of Django."
msgstr ""

# 739d08aee9dd44df80a15b98ab7448b2
#: ../../../../1.9/docs/releases/0.96.txt:51
msgid ""
"Also, note that some features, like the new ``DATABASE_OPTIONS`` setting "
"(see the :doc:`databases documentation </ref/databases>` for details), are "
"only available on the \"mysql\" backend, and will not be made available for "
"\"mysql_old\"."
msgstr ""

# ea5ee33341604252944e6535126490dc
#: ../../../../1.9/docs/releases/0.96.txt:57
msgid "Database constraint names changed"
msgstr ""

# b812dd84f1f84421be21a3c02766e4ec
#: ../../../../1.9/docs/releases/0.96.txt:59
msgid ""
"The format of the constraint names Django generates for foreign key "
"references have changed slightly. These names are generally only used when "
"it is not possible to put the reference directly on the affected column, so "
"they are not always visible."
msgstr ""

# 5a50fdcb617043f995b248aef4ade5ac
#: ../../../../1.9/docs/releases/0.96.txt:64
msgid ""
"The effect of this change is that running ``manage.py reset`` and similar "
"commands against an existing database may generate SQL with the new form of "
"constraint name, while the database itself contains constraints named in the"
" old form; this will cause the database server to raise an error message "
"about modifying non-existent constraints."
msgstr ""

# 144cd677ee1d4eb28d4278b5d4980878
#: ../../../../1.9/docs/releases/0.96.txt:70
msgid "If you need to work around this, there are two methods available:"
msgstr ""

# 8e41e5fc570f462393616fe8a005b5a8
#: ../../../../1.9/docs/releases/0.96.txt:72
msgid ""
"Redirect the output of ``manage.py`` to a file, and edit the generated SQL "
"to use the correct constraint names before executing it."
msgstr ""

# 4ed087e7b88c4961b973cff1b2f6f6ca
#: ../../../../1.9/docs/releases/0.96.txt:76
msgid ""
"Examine the output of ``manage.py sqlall`` to see the new-style constraint "
"names, and use that as a guide to rename existing constraints in your "
"database."
msgstr ""

# e5ac6d81af1a4bc7b6cf97b724247be7
#: ../../../../1.9/docs/releases/0.96.txt:81
msgid "Name changes in ``manage.py``"
msgstr ""

# b9eebaac4a044f9d8cbe6f88250cf266
#: ../../../../1.9/docs/releases/0.96.txt:83
msgid ""
"A few of the options to ``manage.py`` have changed with the addition of "
"fixture support:"
msgstr ""

# df761ce215b444589d4c2c6c8a260435
#: ../../../../1.9/docs/releases/0.96.txt:86
msgid ""
"There are new ``dumpdata`` and ``loaddata`` commands which, as you might "
"expect, will dump and load data to/from the database. These commands can "
"operate against any of Django's supported serialization formats."
msgstr ""

# d2487688b8b94e308f6feaacda5f65ce
#: ../../../../1.9/docs/releases/0.96.txt:91
msgid ""
"The ``sqlinitialdata`` command has been renamed to ``sqlcustom`` to "
"emphasize that ``loaddata`` should be used for data (and ``sqlcustom`` for "
"other custom SQL -- views, stored procedures, etc.)."
msgstr ""

# 143ecd36943747d4a941fbea006b39e3
#: ../../../../1.9/docs/releases/0.96.txt:95
msgid "The vestigial ``install`` command has been removed. Use ``syncdb``."
msgstr ""

# f8bab384a2cb4a979a87601911d1cc23
#: ../../../../1.9/docs/releases/0.96.txt:98
msgid "Backslash escaping changed"
msgstr ""

# 5f144c5f0f3e48d4b90cdd1e4e5c6456
#: ../../../../1.9/docs/releases/0.96.txt:100
msgid ""
"The Django database API now escapes backslashes given as query parameters. "
"If you have any database API code that matches backslashes, and it was "
"working before (despite the lack of escaping), you'll have to change your "
"code to \"unescape\" the slashes one level."
msgstr ""

# 9c6c01d9bd3f41bb93aa872cd5e03a2b
#: ../../../../1.9/docs/releases/0.96.txt:105
msgid "For example, this used to work::"
msgstr "Par exemple, ceci fonctionnait::"

# f3facf96c78242548d65afca0fb3f1fa
#: ../../../../1.9/docs/releases/0.96.txt:110
msgid "The above is now incorrect, and should be rewritten as::"
msgstr ""

# 7331945262e04a89a92524d7f7a0a3bf
#: ../../../../1.9/docs/releases/0.96.txt:116
msgid "Removed ENABLE_PSYCO setting"
msgstr ""

# 209604ddf1c749519791e29b663e8414
#: ../../../../1.9/docs/releases/0.96.txt:118
msgid ""
"The ``ENABLE_PSYCO`` setting no longer exists. If your settings file "
"includes ``ENABLE_PSYCO`` it will have no effect; to use Psyco_, we "
"recommend writing a middleware class to activate it."
msgstr ""

# 63d8a502aec240a2b4246d447cb3fdb5
#: ../../../../1.9/docs/releases/0.96.txt:125
msgid "What's new in 0.96?"
msgstr "Quoi de neuf dans 0.96?"

# 311d118cc2dc40c481561b3c1bb1c22f
#: ../../../../1.9/docs/releases/0.96.txt:127
msgid ""
"This revision represents over a thousand source commits and over four "
"hundred bug fixes, so we can't possibly catalog all the changes. Here, we "
"describe the most notable changes in this release."
msgstr ""

# 57b8184d1c654ae8a1116eb62e7a5f57
#: ../../../../1.9/docs/releases/0.96.txt:132
msgid "New forms library"
msgstr ""

# b7360dec2cfa4530b047fe2c1e565b4a
#: ../../../../1.9/docs/releases/0.96.txt:134
msgid ""
"``django.newforms`` is Django's new form-handling library. It's a "
"replacement for ``django.forms``, the old form/manipulator/validation "
"framework.  Both APIs are available in 0.96, but over the next two releases "
"we plan to switch completely to the new forms system, and deprecate and "
"remove the old system."
msgstr ""

# 1696312f0721492aaeab66b7e4545de8
#: ../../../../1.9/docs/releases/0.96.txt:140
msgid "There are three elements to this transition:"
msgstr ""

# 34af9fe553b94be697a785fbfbbecd7f
#: ../../../../1.9/docs/releases/0.96.txt:142
msgid ""
"We've copied the current ``django.forms`` to ``django.oldforms``. This "
"allows you to upgrade your code *now* rather than waiting for the backwards-"
"incompatible change and rushing to fix your code after the fact.  Just "
"change your import statements like this::"
msgstr ""

# e85d864449eb456f8fb420c41c1cb39c
#: ../../../../1.9/docs/releases/0.96.txt:151
msgid ""
"The next official release of Django will move the current "
"``django.newforms`` to ``django.forms``. This will be a backwards-"
"incompatible change, and anyone still using the old version of "
"``django.forms`` at that time will need to change their import statements as"
" described above."
msgstr ""

# ad0af4dbc7dd48808e81d827ddae3f30
#: ../../../../1.9/docs/releases/0.96.txt:157
msgid ""
"The next release after that will completely remove ``django.oldforms``."
msgstr ""

# b0d26408d90d48458f17396826ee47ba
#: ../../../../1.9/docs/releases/0.96.txt:160
msgid ""
"Although the ``newforms`` library will continue to evolve, it's ready for "
"use for most common cases. We recommend that anyone new to form handling "
"skip the old forms system and start with the new."
msgstr ""

# 5ec3a42b64bf40bbbec1173f151a64de
#: ../../../../1.9/docs/releases/0.96.txt:164
msgid ""
"For more information about ``django.newforms``, read the :doc:`newforms "
"documentation </topics/forms/index>`."
msgstr ""

# 1d3ab50407f14dab88e62ca7b28bcbf6
#: ../../../../1.9/docs/releases/0.96.txt:168
msgid "URLconf improvements"
msgstr ""

# 06497a76914a4e5c97219f800f0c1283
#: ../../../../1.9/docs/releases/0.96.txt:170
msgid ""
"You can now use any callable as the callback in URLconfs (previously, only "
"strings that referred to callables were allowed). This allows a much more "
"natural use of URLconfs. For example, this URLconf::"
msgstr ""

# 55c68da5686146a7bf19442b8d3283c4
#: ../../../../1.9/docs/releases/0.96.txt:180
msgid "can now be rewritten as::"
msgstr ""

# 4e62a1a326724ced9f3ccba04eb23e1b
#: ../../../../1.9/docs/releases/0.96.txt:189
msgid ""
"One useful application of this can be seen when using decorators; this "
"change allows you to apply decorators to views *in your URLconf*. Thus, you "
"can make a generic view require login very easily::"
msgstr ""

# 80e8c1d8bc40478788d1bd0c4126e290
#: ../../../../1.9/docs/releases/0.96.txt:207
msgid ""
"Note that both syntaxes (strings and callables) are valid, and will continue"
" to be valid for the foreseeable future."
msgstr ""

# 6b11e11c716d42e195d5d2408b377d84
#: ../../../../1.9/docs/releases/0.96.txt:211
msgid "The test framework"
msgstr ""

# 7b086281843b43a296574ab7024cc5e8
#: ../../../../1.9/docs/releases/0.96.txt:213
msgid ""
"Django now includes a test framework so you can start transmuting fear into "
"boredom (with apologies to Kent Beck). You can write tests based on "
":mod:`doctest` or :mod:`unittest` and test your views with a simple test "
"client."
msgstr ""

# 6bdeaca6071f439ab43172534c2b227a
#: ../../../../1.9/docs/releases/0.96.txt:217
msgid ""
"There is also new support for \"fixtures\" -- initial data, stored in any of"
" the supported :doc:`serialization formats </topics/serialization>`, that "
"will be loaded into your database at the start of your tests. This makes "
"testing with real data much easier."
msgstr ""

# d16b5d6690dd47e08f5464db09a1db08
#: ../../../../1.9/docs/releases/0.96.txt:222
msgid ""
"See :doc:`the testing documentation </topics/testing/index>` for the full "
"details."
msgstr ""

# 9a14953a132240fb870863bf62645226
#: ../../../../1.9/docs/releases/0.96.txt:225
msgid "Improvements to the admin interface"
msgstr ""

# 721fe67251264f9ab69af0a5e8bfb958
#: ../../../../1.9/docs/releases/0.96.txt:227
msgid ""
"A small change, but a very nice one: dedicated views for adding and updating"
" users have been added to the admin interface, so you no longer need to "
"worry about working with hashed passwords in the admin."
msgstr ""

# 714c9261efe74ecca3061cb8be44de6b
#: ../../../../1.9/docs/releases/0.96.txt:232
msgid "Thanks"
msgstr ""

# ff9c115905c34866a1b2f99c4af6581e
#: ../../../../1.9/docs/releases/0.96.txt:234
msgid ""
"Since 0.95, a number of people have stepped forward and taken a major new "
"role in Django's development. We'd like to thank these people for all their "
"hard work:"
msgstr ""

# 4cb5440b896a4dda8f3e7cc04ecee0a4
#: ../../../../1.9/docs/releases/0.96.txt:238
msgid ""
"Russell Keith-Magee and Malcolm Tredinnick for their major code "
"contributions. This release wouldn't have been possible without them."
msgstr ""

# 13b293888e2c4d1e946a341a72c9043b
#: ../../../../1.9/docs/releases/0.96.txt:241
msgid ""
"Our new release manager, James Bennett, for his work in getting out 0.95.1, "
"0.96, and (hopefully) future release."
msgstr ""

# d57c25c344594e3d814cd0f89049eb2f
#: ../../../../1.9/docs/releases/0.96.txt:244
msgid ""
"Our ticket managers Chris Beaven (aka SmileyChris), Simon Greenhill, Michael"
" Radziej, and Gary Wilson. They agreed to take on the monumental task of "
"wrangling our tickets into nicely cataloged submission. Figuring out what to"
" work on is now about a million times easier; thanks again, guys."
msgstr ""

# fef3239a84e4459986dba5e7b04d0385
#: ../../../../1.9/docs/releases/0.96.txt:250
msgid ""
"Everyone who submitted a bug report, patch or ticket comment. We can't "
"possibly thank everyone by name -- over 200 developers submitted patches "
"that went into 0.96 -- but everyone who's contributed to Django is listed in"
" AUTHORS_."
msgstr ""

# 91a2bd6ae6434fb182a3f4b173ea5cfd
#: ../../../../1.9/docs/releases/1.0.txt:3
msgid "Django 1.0 release notes"
msgstr "Note de versions Django 1.0"

# 9fe2fb46670948a999c54b58aa0f0305
#: ../../../../1.9/docs/releases/1.0.txt:5
msgid "Welcome to Django 1.0!"
msgstr "Bienvenue dans Django 1.0 !"

# ec69bb03c6a9401ea9e8e15a80b956c6
#: ../../../../1.9/docs/releases/1.0.txt:7
msgid ""
"We've been looking forward to this moment for over three years, and it's "
"finally here. Django 1.0 represents a the largest milestone in Django's "
"development to date: a Web framework that a group of perfectionists can "
"truly be proud of."
msgstr ""

# 3d41d1c17379466488f1034257af8623
#: ../../../../1.9/docs/releases/1.0.txt:11
msgid ""
"Django 1.0 represents over three years of community development as an Open "
"Source project. Django's received contributions from hundreds of developers,"
" been translated into fifty languages, and today is used by developers on "
"every continent and in every kind of job."
msgstr ""

# 878878e6bd1c41498e3b8fc81f5ad835
#: ../../../../1.9/docs/releases/1.0.txt:16
msgid ""
"An interesting historical note: when Django was first released in July 2005,"
" the initial released version of Django came from an internal repository at "
"revision number 8825. Django 1.0 represents revision 8961 of our public "
"repository. It seems fitting that our 1.0 release comes at the moment where "
"community contributions overtake those made privately."
msgstr ""

# 06663072da974cfea967861d83184ac5
#: ../../../../1.9/docs/releases/1.0.txt:23
msgid "Stability and forwards-compatibility"
msgstr ""

# 699cda8a2430466e9685c12ba69fc625
#: ../../../../1.9/docs/releases/1.0.txt:25
msgid ""
":doc:`The release of Django 1.0 </releases/1.0>` comes with a promise of API"
" stability and forwards-compatibility. In a nutshell, this means that code "
"you develop against Django 1.0 will continue to work against 1.1 unchanged, "
"and you should need to make only minor changes for any 1.X release."
msgstr ""

# a55a58290ef047059b7c60fe1abac13b
#: ../../../../1.9/docs/releases/1.0.txt:30
msgid ""
"See the :doc:`API stability guide </misc/api-stability>` for full details."
msgstr ""

# a4ba2d6a480644bfae223ab9823e92bd
#: ../../../../1.9/docs/releases/1.0.txt:35
msgid ""
"Django 1.0 has a number of backwards-incompatible changes from Django 0.96. "
"If you have apps written against Django 0.96 that you need to port, see our "
"detailed porting guide:"
msgstr ""

# 015d9315847c4189a1bdbe4128dc5b2a
#: ../../../../1.9/docs/releases/1.0.txt:44
msgid ""
"A complete list of backwards-incompatible changes can be found at "
"https://code.djangoproject.com/wiki/BackwardsIncompatibleChanges."
msgstr ""

# 0dceca382f6e4f4d8c4d9a95a9827649
#: ../../../../1.9/docs/releases/1.0.txt:48
msgid "What's new in Django 1.0"
msgstr "Quoi de neuf dans Django 1.0"

# 23affc360df3493491597f05761dede8
#: ../../../../1.9/docs/releases/1.0.txt:50
msgid "A *lot*!"
msgstr ""

# ed43559f7f1a49a28ed22aa428176106
#: ../../../../1.9/docs/releases/1.0.txt:52
msgid ""
"Since Django 0.96, we've made over 4,000 code commits, fixed more than 2,000"
" bugs, and edited, added, or removed around 350,000 lines of code. We've "
"also added 40,000 lines of new documentation, and greatly improved what was "
"already there."
msgstr ""

# 96b9291fc1ac4ca4966e7ba75d11e901
#: ../../../../1.9/docs/releases/1.0.txt:57
msgid ""
"In fact, new documentation is one of our favorite features of Django 1.0, so"
" we might as well start there. First, there's a new documentation site:"
msgstr ""

# 823a15b456744e108a6172f1c84ca7fb
#: ../../../../1.9/docs/releases/1.0.txt:60
msgid "https://docs.djangoproject.com/"
msgstr "https://docs.djangoproject.com/"

# 3aec0a4b446a4956baaceb0b65c17cd8
#: ../../../../1.9/docs/releases/1.0.txt:62
msgid ""
"The documentation has been greatly improved, cleaned up, and generally made "
"awesome. There's now dedicated search, indexes, and more."
msgstr ""

# cef94bb6638848ccbf3c188c6825267c
#: ../../../../1.9/docs/releases/1.0.txt:65
msgid ""
"We can't possibly document everything that's new in 1.0, but the "
"documentation will be your definitive guide. Anywhere you see something "
"like:"
msgstr ""

# 5af5091a1c734fbd816a9366922fa270
#: ../../../../1.9/docs/releases/1.0.txt:70
msgid "This feature is new in Django 1.0"
msgstr ""

# d74a070c658947e9be624dd153904c79
#: ../../../../1.9/docs/releases/1.0.txt:72
msgid "You'll know that you're looking at something new or changed."
msgstr ""

# 42d65c32bdec407db697fb6c158d3d6b
#: ../../../../1.9/docs/releases/1.0.txt:74
msgid "The other major highlights of Django 1.0 are:"
msgstr ""

# bc083a0957c34c2b8d3a9e8d8ddc3a52
#: ../../../../1.9/docs/releases/1.0.txt:77
msgid "Re-factored admin application"
msgstr ""

# 18f29fe2f6324d38abbd02e8a5dfddfd
#: ../../../../1.9/docs/releases/1.0.txt:79
msgid ""
"The Django administrative interface (``django.contrib.admin``) has been "
"completely refactored; admin definitions are now completely decoupled from "
"model definitions (no more ``class Admin`` declaration in models!), "
"rewritten to use Django's new form-handling library (introduced in the 0.96 "
"release as ``django.newforms``, and now available as simply "
"``django.forms``) and redesigned with extensibility and customization in "
"mind. Full documentation for the admin application is available online in "
"the official Django documentation:"
msgstr ""

# 2f07793c7b804576a9c848894e7a1596
#: ../../../../1.9/docs/releases/1.0.txt:87
msgid "See the :doc:`admin reference </ref/contrib/admin/index>` for details"
msgstr ""

# 7215000f6cfc456aab5e57640f2b404b
#: ../../../../1.9/docs/releases/1.0.txt:90
msgid "Improved Unicode handling"
msgstr ""

# 1a50466a888a4b018211e78c4c72b789
#: ../../../../1.9/docs/releases/1.0.txt:92
msgid ""
"Django's internals have been refactored to use Unicode throughout; this "
"drastically simplifies the task of dealing with non-Western-European content"
" and data in Django. Additionally, utility functions have been provided to "
"ease interoperability with third-party libraries and systems which may or "
"may not handle Unicode gracefully. Details are available in Django's "
"Unicode-handling documentation."
msgstr ""

# 1b4e21edb8314c9c8c58f20384ea5cec
#: ../../../../1.9/docs/releases/1.0.txt:99
msgid "See :doc:`/ref/unicode`."
msgstr "Voir :doc:`/ref/unicode`."

# 4b92795b60fd4681aa0e8a2477ee6d11
#: ../../../../1.9/docs/releases/1.0.txt:102
msgid "An improved ORM"
msgstr ""

# a5b067ddd0c4421a95394dd095bd945a
#: ../../../../1.9/docs/releases/1.0.txt:104
msgid ""
"Django's object-relational mapper -- the component which provides the "
"mapping between Django model classes and your database, and which mediates "
"your database queries -- has been dramatically improved by a massive "
"refactoring. For most users of Django this is backwards-compatible; the "
"public-facing API for database querying underwent a few minor changes, but "
"most of the updates took place in the ORM's internals. A guide to the "
"changes, including backwards-incompatible modifications and mentions of new "
"features opened up by this refactoring, is `available on the Django wiki`__."
msgstr ""

# 8b133bfa129a4c439fc0296f7415f3ee
#: ../../../../1.9/docs/releases/1.0.txt:116
msgid "Automatic escaping of template variables"
msgstr ""

# fad9e5e334fc4034ac83f1c57eb5567b
#: ../../../../1.9/docs/releases/1.0.txt:118
msgid ""
"To provide improved security against cross-site scripting (XSS) "
"vulnerabilities, Django's template system now automatically escapes the "
"output of variables. This behavior is configurable, and allows both "
"variables and larger template constructs to be marked as safe (requiring no "
"escaping) or unsafe (requiring escaping). A full guide to this feature is in"
" the documentation for the :ttag:`autoescape` tag."
msgstr ""

# 63f88130e8e64f0bad46864906615aba
#: ../../../../1.9/docs/releases/1.0.txt:126
msgid "``django.contrib.gis`` (GeoDjango)"
msgstr "``django.contrib.gis`` (GeoDjango)"

# 50f2c427cde34b208a5783be47384197
#: ../../../../1.9/docs/releases/1.0.txt:128
msgid ""
"A project over a year in the making, this adds world-class GIS (`Geographic "
"Information Systems`_) support to Django, in the form of a ``contrib`` "
"application. Its documentation is currently being maintained externally, and"
" will be merged into the main Django documentation shortly. Huge thanks go "
"to Justin Bronn, Jeremy Dunck, Brett Hoerner and Travis Pinney for their "
"efforts in creating and completing this feature."
msgstr ""

# 191bda07d867473bbcfa33af2c11174e
#: ../../../../1.9/docs/releases/1.0.txt:135
msgid "See http://geodjango.org/ for details."
msgstr "Voir http://geodjango.org/ pour les détails."

# 28add7953ac443d7ac74096641585238
#: ../../../../1.9/docs/releases/1.0.txt:140
msgid "Pluggable file storage"
msgstr ""

# 4ff1ee1e48304f1a8cee270393ce0875
#: ../../../../1.9/docs/releases/1.0.txt:142
msgid ""
"Django's built-in ``FileField`` and ``ImageField`` now can take advantage of"
" pluggable file-storage backends, allowing extensive customization of where "
"and how uploaded files get stored by Django. For details, see :doc:`the "
"files documentation </topics/files>`; big thanks go to Marty Alchin for "
"putting in the hard work to get this completed."
msgstr ""

# 689087dfe1c3409eb7fa5d6f207f8f18
#: ../../../../1.9/docs/releases/1.0.txt:149
msgid "Jython compatibility"
msgstr "Compatibilité Jython"

# d6943b66d85c4628a6f7bfef7681e79b
#: ../../../../1.9/docs/releases/1.0.txt:151
msgid ""
"Thanks to a lot of work from Leo Soto during a Google Summer of Code "
"project, Django's codebase has been refactored to remove incompatibilities "
"with `Jython`_, an implementation of Python written in Java, which runs "
"Python code on the Java Virtual Machine. Django is now compatible with the "
"forthcoming Jython 2.5 release."
msgstr ""

# 9edd68d8c1fc4a939ce411d0b0450417
#: ../../../../1.9/docs/releases/1.0.txt:157
msgid "See :doc:`/howto/jython`."
msgstr "Voir :doc:`/howto/jython`."

# 3f31f39b6ac54cb6ac23bc39662b675e
#: ../../../../1.9/docs/releases/1.0.txt:162
msgid "Generic relations in forms and admin"
msgstr "Relations génériques dans les formulaires et l'interface d'administration"

# 73d4e6fa76e44e0cad595f86f0ee12ee
#: ../../../../1.9/docs/releases/1.0.txt:164
msgid ""
"Classes are now included in ``django.contrib.contenttypes`` which can be "
"used to support generic relations in both the admin interface and in end-"
"user forms. See :ref:`the documentation for generic relations <generic-"
"relations>` for details."
msgstr ""

# 8c82fd638a3b4357bd72ab2cca52757b
#: ../../../../1.9/docs/releases/1.0.txt:169
msgid "``INSERT``/``UPDATE`` distinction"
msgstr ""

# d66ce6965412401b8d94081c3ca1b4d4
#: ../../../../1.9/docs/releases/1.0.txt:171
msgid ""
"Although Django's default behavior of having a model's ``save()`` method "
"automatically determine whether to perform an ``INSERT`` or an ``UPDATE`` at"
" the SQL level is suitable for the majority of cases, there are occasional "
"situations where forcing one or the other is useful. As a result, models can"
" now support an additional parameter to ``save()`` which can force a "
"specific operation."
msgstr ""

# 305cfa046d624dc2afdbdddff8d94880
#: ../../../../1.9/docs/releases/1.0.txt:177
msgid "See :ref:`ref-models-force-insert` for details."
msgstr "Voir :ref:`ref-models-force-insert` pour les détails."

# 66e205880b814f0abdde379d72329470
#: ../../../../1.9/docs/releases/1.0.txt:180
msgid "Split ``CacheMiddleware``"
msgstr ""

# 00c9393683894395ba917fd76fe783ac
#: ../../../../1.9/docs/releases/1.0.txt:182
msgid ""
"Django's ``CacheMiddleware`` has been split into three classes: "
"``CacheMiddleware`` itself still exists and retains all of its previous "
"functionality, but it is now built from two separate middleware classes "
"which handle the two parts of caching (inserting into and reading from the "
"cache) separately, offering additional flexibility for situations where "
"combining these functions into a single middleware posed problems."
msgstr ""

# 04d1e8eb43e74501950b12c3cd1ad81f
#: ../../../../1.9/docs/releases/1.0.txt:189
msgid ""
"Full details, including updated notes on appropriate use, are in :doc:`the "
"caching documentation </topics/cache>`."
msgstr ""

# ee37c2e2a4484b54a43467a43289e7e6
#: ../../../../1.9/docs/releases/1.0.txt:193
msgid "Refactored ``django.contrib.comments``"
msgstr ""

# d990076294fd49438082e9f26489df88
#: ../../../../1.9/docs/releases/1.0.txt:195
msgid ""
"As part of a Google Summer of Code project, Thejaswi Puthraya carried out a "
"major rewrite and refactoring of Django's bundled comment system, greatly "
"increasing its flexibility and customizability."
msgstr ""

# 9dd2ef911565483fbe513ca4b762eb6c
#: ../../../../1.9/docs/releases/1.0.txt:200
msgid "Removal of deprecated features"
msgstr ""

# 5f3f66648531495f9672b0388e27a4ee
#: ../../../../1.9/docs/releases/1.0.txt:202
msgid ""
"A number of features and methods which had previously been marked as "
"deprecated, and which were scheduled for removal prior to the 1.0 release, "
"are no longer present in Django. These include imports of the form library "
"from ``django.newforms`` (now located simply at ``django.forms``), the "
"``form_for_model`` and ``form_for_instance`` helper functions (which have "
"been replaced by ``ModelForm``) and a number of deprecated features which "
"were replaced by the dispatcher, file-uploading and file-storage "
"refactorings introduced in the Django 1.0 alpha releases."
msgstr ""

# 3d09cf88cb3a499da0f5c174a96d4e79
#: ../../../../1.9/docs/releases/1.0.txt:212
msgid "Known issues"
msgstr "Issues connues"

# 87fe90ea831d459dbb6db935f814c602
#: ../../../../1.9/docs/releases/1.0.txt:214
msgid ""
"We've done our best to make Django 1.0 as solid as possible, but "
"unfortunately there are a couple of issues that we know about in the "
"release."
msgstr ""

# 1f277e2e954f402480171ef7ba5a97b6
#: ../../../../1.9/docs/releases/1.0.txt:218
msgid "Multi-table model inheritance with ``to_field``"
msgstr ""

# e0cdbf3aa4874f179ec28f657fcb742d
#: ../../../../1.9/docs/releases/1.0.txt:220
msgid ""
"If you're using :ref:`multiple table model inheritance <multi-table-"
"inheritance>`, be aware of this caveat: child models using a custom "
"``parent_link`` and ``to_field`` will cause database integrity errors. A set"
" of models like the following are **not valid**::"
msgstr ""

# 752a4db8f3ed4600a5af3c542fa18c40
#: ../../../../1.9/docs/releases/1.0.txt:233
msgid "This bug will be fixed in the next release of Django."
msgstr ""

# 06e0d0366432408fbf8d6a22173e8f21
#: ../../../../1.9/docs/releases/1.0.txt:236
msgid "Caveats with support of certain databases"
msgstr ""

# e7c403d9299349f8a688b48776c008ed
#: ../../../../1.9/docs/releases/1.0.txt:238
msgid ""
"Django attempts to support as many features as possible on all database "
"backends. However, not all database backends are alike, and in particular "
"many of the supported database differ greatly from version to version. It's "
"a good idea to checkout our :doc:`notes on supported database "
"</ref/databases>`:"
msgstr ""

# 2b4f958b559a48ef92fed91a01514786
#: ../../../../1.9/docs/releases/1.0.txt:241
msgid ":ref:`mysql-notes`"
msgstr ":ref:`mysql-notes`"

# e2f2975d5e3e41e394fedc579ed3e0db
#: ../../../../1.9/docs/releases/1.0.txt:242
msgid ":ref:`sqlite-notes`"
msgstr ":ref:`sqlite-notes`"

# b1087fc3399a4ca0a3099be4c341fe42
#: ../../../../1.9/docs/releases/1.0.txt:243
msgid ":ref:`oracle-notes`"
msgstr ":ref:`oracle-notes`"

# 0743a72ba3ee4769a63bfd74cd8a71ff
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:3
msgid "Porting your apps from Django 0.96 to 1.0"
msgstr ""

# 48bcc3747a944105843a538115823161
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:7
msgid "Django 1.0 breaks compatibility with 0.96 in some areas."
msgstr ""

# f6ff90461a58494e819646decd9ac0bc
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:9
msgid ""
"This guide will help you port 0.96 projects and apps to 1.0. The first part "
"of this document includes the common changes needed to run with 1.0. If "
"after going through the first part your code still breaks, check the section"
" `Less-common Changes`_ for a list of a bunch of less-common compatibility "
"issues."
msgstr ""

# 0926aa1cf09d407e986c43b6fd75c5d3
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:16
msgid ""
"The :doc:`1.0 release notes </releases/1.0>`. That document explains the new"
" features in 1.0 more deeply; the porting guide is more concerned with "
"helping you quickly update your code."
msgstr ""

# b91d6abac9cd450d94e8507fa8509cb7
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:21
msgid "Common changes"
msgstr ""

# 06aa81e2fe4b43e39187759ef1419e97
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:23
msgid ""
"This section describes the changes between 0.96 and 1.0 that most users will"
" need to make."
msgstr ""

# 7b941b63303d451fa42444cb889bbaa9
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:27
msgid "Use Unicode"
msgstr ""

# e80b31098bce40c48669f0b56221514c
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:29
msgid ""
"Change string literals (``'foo'``) into Unicode literals (``u'foo'``). "
"Django now uses Unicode strings throughout. In most places, raw strings will"
" continue to work, but updating to use Unicode literals will prevent some "
"obscure problems."
msgstr ""

# 6961ff7657064bfb8e6a1666abb6e31e
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:34
msgid "See :doc:`/ref/unicode` for full details."
msgstr "Voir :doc:`/ref/unicode` pour tous les détails."

# 07e6b38de7ba44f79c484ac2c6b54aef
# 37d4b740ddbb470a9ab7828f5b407910
# 7c959a96820e40a4be10fedb4cb7afa4
# 7e9ff62b9e7045899be3d765c9b00e28
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:37
#: ../../../../1.9/docs/releases/1.7.txt:752
#: ../../../../1.9/docs/releases/1.8.txt:495
#: ../../../../1.9/docs/releases/1.9.txt:479
msgid "Models"
msgstr "Modèles"

# b491440d09dc4053a179ff878299977d
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:39
msgid "Common changes to your models file:"
msgstr ""

# 595b9c3885384606bcf080eac0a2204a
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:42
msgid "Rename ``maxlength`` to ``max_length``"
msgstr "Renommer ``maxlength`` en ``max_length``"

# 4f1e7ed9a3004332831dacf860621094
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:44
msgid ""
"Rename your ``maxlength`` argument to ``max_length`` (this was changed to be"
" consistent with form fields):"
msgstr ""

# 7ac92c05ff8643a3b8f26f512b27d99c
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:48
msgid "Replace ``__str__`` with ``__unicode__``"
msgstr "Remplacer ``__str__`` par ``__unicode__``"

# d7369734792d4418b32f32536483e1ff
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:50
msgid ""
"Replace your model's ``__str__`` function with a ``__unicode__`` method, and"
" make sure you `use Unicode`_ (``u'foo'``) in that method."
msgstr ""

# f5218fa08d2f42aa8f4264a58fe2f67d
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:54
msgid "Remove ``prepopulated_from``"
msgstr "Remove ``prepopulated_from``"

# 06229a55ad5c42efba2b67dc962f0411
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:56
msgid ""
"Remove the ``prepopulated_from`` argument on model fields. It's no longer "
"valid and has been moved to the ``ModelAdmin`` class in ``admin.py``. See "
"`the admin`_, below, for more details about changes to the admin."
msgstr ""

# c7a00cea099a49f78dcb75a3838be86d
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:61
msgid "Remove ``core``"
msgstr ""

# acfd7dfa5ea84eb59e7268745debba2d
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:63
msgid ""
"Remove the ``core`` argument from your model fields. It is no longer "
"necessary, since the equivalent functionality (part of :ref:`inline editing "
"<admin-inlines>`) is handled differently by the admin interface now. You "
"don't have to worry about inline editing until you get to `the admin`_ "
"section, below. For now, remove all references to ``core``."
msgstr ""

# a84cbe00acc043c4bc87cd0f1d308734
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:70
msgid "Replace ``class Admin:`` with ``admin.py``"
msgstr ""

# ad04635fbf974a5db6fd2dd86b20a2a3
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:72
msgid ""
"Remove all your inner ``class Admin`` declarations from your models. They "
"won't break anything if you leave them, but they also won't do anything. To "
"register apps with the admin you'll move those declarations to an "
"``admin.py`` file; see `the admin`_ below for more details."
msgstr ""

# 998ef91741234a9ab9eb16c05aabae01
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:79
msgid ""
"A contributor to djangosnippets__ has written a script that'll `scan your "
"models.py and generate a corresponding admin.py`__."
msgstr ""

# a6913b13d1d94b0d84c99c7b1aa519ae
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:86
msgid "Example"
msgstr "Exemple"

# c7d1f05691ee40a09c7fdd85427bf393
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:88
msgid ""
"Below is an example ``models.py`` file with all the changes you'll need to "
"make:"
msgstr ""

# 9e898e408cc44158a4df72a377dc509c
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:90
msgid "Old (0.96) ``models.py``::"
msgstr ""

# a4131397865749d884d1add65c58c772
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:103
msgid "New (1.0) ``models.py``::"
msgstr ""

# c2eeb5c347434f3ea5a43ae8fa65b580
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:113
msgid "New (1.0) ``admin.py``::"
msgstr ""

# 76efcc0830164a718f9ef84e665ef169
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:127
msgid "The Admin"
msgstr "L'admin"

# 843519624dec4740ae22c82e64675f2a
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:129
msgid ""
"One of the biggest changes in 1.0 is the new admin. The Django "
"administrative interface (``django.contrib.admin``) has been completely "
"refactored; admin definitions are now completely decoupled from model "
"definitions, the framework has been rewritten to use Django's new form-"
"handling library and redesigned with extensibility and customization in "
"mind."
msgstr ""

# f18d3965872a4d57bf176fb93800f440
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:135
msgid ""
"Practically, this means you'll need to rewrite all of your ``class Admin`` "
"declarations. You've already seen in `models`_ above how to replace your "
"``class Admin`` with a ``admin.site.register()`` call in an ``admin.py`` "
"file. Below are some more details on how to rewrite that ``Admin`` "
"declaration into the new syntax."
msgstr ""

# 0c56db72f7f44c3b8362fa2dd3d16210
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:142
msgid "Use new inline syntax"
msgstr ""

# ddc2c6c1f1cf4716a7296f384d1a3adc
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:144
msgid ""
"The new ``edit_inline`` options have all been moved to ``admin.py``. Here's "
"an example:"
msgstr ""

# 48725c775df847f6a3bff40c9da3ec10
# 4fba3c5b06934909a50138f02d929b87
# 32d5ea2318a34d219ae27d145b61b7a8
# f2617f662d74494eb847bf43c176b83c
# fbdd796a4c1a40408a005fa15af70248
# 70f6a6b765f24ef880119802b6e47f4c
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:147
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:176
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:484
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:506
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:523
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:649
msgid "Old (0.96)::"
msgstr ""

# 06dc3f9489eb4630a6fe06b75ae91996
# d9e35e0bc11541d2a4a3b153715cd846
# c85d453e9efb49ba807eda2a4ca3968f
# 9bc8a7db5bee4e8b913a4f3246370b39
# 3476f92daa004580b04c8ceb70ad7d5b
# fec99fdba3924aa0813e793dd6cb5de0
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:156
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:196
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:491
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:512
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:529
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:655
msgid "New (1.0)::"
msgstr ""

# b5a6d955d8544f9dba6c8ea171250cad
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:168
msgid "See :ref:`admin-inlines` for more details."
msgstr ""

# d76bf366190b4266a6a6c2a45c6b3fad
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:171
msgid "Simplify ``fields``, or use ``fieldsets``"
msgstr ""

# ef5d777d5975450ca226b0e59c2601d2
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:173
msgid ""
"The old ``fields`` syntax was quite confusing, and has been simplified. The "
"old syntax still works, but you'll need to use ``fieldsets`` instead."
msgstr ""

# ec4516bbfaed44ae82e2a5430dc83264
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:210
msgid ""
"More detailed information about the changes and the reasons behind them can "
"be found on the `NewformsAdminBranch wiki page`__"
msgstr ""

# 6f0705b05fd542fa9d88a0be825c2013
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:213
msgid ""
"The new admin comes with a ton of new features; you can read about them in "
"the :doc:`admin documentation </ref/contrib/admin/index>`."
msgstr ""

# f4603b9cadf74eb5a0696c41aacaaff9
# 17e9dc09800744dd9b25100b18655fc1
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:219
#: ../../../../1.9/docs/releases/1.9.txt:650
msgid "URLs"
msgstr "URL"

# fb1d3f5aa28d4ab8a3040468ad065ffb
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:222
msgid "Update your root ``urls.py``"
msgstr ""

# 330a1b76ba1147aeac663a17e8cdcaca
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:224
msgid ""
"If you're using the admin site, you need to update your root ``urls.py``."
msgstr ""

# e064c46ee0b8423b9e75198fcf79a119
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:226
msgid "Old (0.96) ``urls.py``::"
msgstr ""

# 1cf442a87777453eb398f50ef7f29ce3
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:236
msgid "New (1.0) ``urls.py``::"
msgstr ""

# ec609e9c794b4cfbb8c83cbffaadd3f9
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:251
msgid "Views"
msgstr "Vues"

# 1e046b84f61542c8b95950bfa5e9e934
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:254
msgid "Use ``django.forms`` instead of ``newforms``"
msgstr ""

# 26ab7b8df7294e479337397d05f5b8a4
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:256
msgid ""
"Replace ``django.newforms`` with ``django.forms`` -- Django 1.0 renamed the "
"``newforms`` module (introduced in 0.96) to plain old ``forms``. The "
"``oldforms`` module was also removed."
msgstr ""

# a62cd549e68f474c8af5b0f2beac5cc3
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:260
msgid ""
"If you're already using the ``newforms`` library, and you used our "
"recommended ``import`` statement syntax, all you have to do is change your "
"import statements."
msgstr ""

# 12718c129df14064950e3891d56da63a
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:264
msgid "Old::"
msgstr "Avant::"

# de7c9daa220d4530bd99aad7367e0d91
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:268
msgid "New::"
msgstr "Après::"

# e191fdfdf3f54a358c74ea77f1a26606
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:272
msgid ""
"If you're using the old forms system (formerly known as ``django.forms`` and"
" ``django.oldforms``), you'll have to rewrite your forms. A good place to "
"start is the :doc:`forms documentation </topics/forms/index>`"
msgstr ""

# 714efc09de594e35850e3bb38dca9be0
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:277
msgid "Handle uploaded files using the new API"
msgstr ""

# 59418b24eb8547ef90b1646e04ca4793
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:279
msgid ""
"Replace use of uploaded files -- that is, entries in ``request.FILES`` -- as"
" simple dictionaries with the new "
":class:`~django.core.files.uploadedfile.UploadedFile`. The old dictionary "
"syntax no longer works."
msgstr ""

# 780123f0c1ad460588095564fade35a9
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:284
msgid "Thus, in a view like::"
msgstr ""

# 33f22a44023942a0928b864743c8051d
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:290
msgid "...you'd need to make the following changes:"
msgstr ""

# d33a9a579cfb4441b1ad30572412d3c2
# 8686d6c66f3f4fd08bf998f456f4b287
# 92e99731a48c420d9ad18a9cd44d457f
# 0580e84588b8471d8dad7680b0ee2df0
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:293
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:310
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:382
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:741
msgid "Old (0.96)"
msgstr ""

# 4869d05b63994a3497d971ad06156015
# 4f02238817174400875670614a17c74f
# 622d51e5d90547ddba53e3bedad60a7e
# 5b95c807be2b43cea6e194dc08b3b8f6
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:293
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:310
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:382
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:741
msgid "New (1.0)"
msgstr ""

# 01172c7561dd411da5caa3158222081b
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:295
msgid "``f['content']``"
msgstr ""

# a02cc5af796a44d7b20005c70d816bec
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:295
msgid "``f.read()``"
msgstr ""

# f704f1120f684cbdbb42d773f8c8ef58
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:296
msgid "``f['filename']``"
msgstr ""

# a71494f714f44dfc9db0400862bdf87e
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:296
msgid "``f.name``"
msgstr ""

# c75820071a8447a8a81736829e986662
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:297
msgid "``f['content-type']``"
msgstr ""

# 3b2bc86fe96a4ac88193dbdf4d24ff99
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:297
msgid "``f.content_type``"
msgstr ""

# 5d93b4c8d23b4d8fa66406422d49f9ec
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:301
msgid "Work with file fields using the new API"
msgstr ""

# 52b3c996fb2f4374bf0967d57a72b910
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:303
msgid ""
"The internal implementation of :class:`django.db.models.FileField` have "
"changed. A visible result of this is that the way you access special "
"attributes (URL, filename, image size, etc) of these model fields has "
"changed. You will need to make the following changes, assuming your model's "
":class:`~django.db.models.FileField` is called ``myfile``:"
msgstr ""

# fede1808d40943908c7df2d153b2cd5a
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:312
msgid "``myfile.get_content_filename()``"
msgstr ""

# bf459c695bc74b359e57e4801edc38d3
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:312
msgid "``myfile.content.path``"
msgstr ""

# 46fcb78d086947f7bbdcfb7b8f746250
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:313
msgid "``myfile.get_content_url()``"
msgstr ""

# f2ed65c3d3d74c8d9091ab6edd1db186
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:313
msgid "``myfile.content.url``"
msgstr ""

# 6897e03f429549da8e47e38b8dab7495
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:314
msgid "``myfile.get_content_size()``"
msgstr ""

# 496b929fe1c14db6a2a74dd8d83dad58
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:314
msgid "``myfile.content.size``"
msgstr ""

# 57860cc83d4949a389a3664b20a4a634
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:315
msgid "``myfile.save_content_file()``"
msgstr ""

# 81cd77812f6347dd8ed3c6ddc49c570f
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:315
msgid "``myfile.content.save()``"
msgstr ""

# 11d031bdd4d044d486aa2bdcded00099
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:316
msgid "``myfile.get_content_width()``"
msgstr ""

# ddd052b0b00c495da9af173dea07a969
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:316
msgid "``myfile.content.width``"
msgstr ""

# 6fe512492c094b288a58226c3054928c
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:317
msgid "``myfile.get_content_height()``"
msgstr ""

# 6103cda90dce48819982751ca5bc5d47
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:317
msgid "``myfile.content.height``"
msgstr ""

# 4548cdec52844d31b37511b33c350c0f
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:320
msgid ""
"Note that the ``width`` and ``height`` attributes only make sense for "
":class:`~django.db.models.ImageField` fields. More details can be found in "
"the :doc:`model API </ref/models/fields>` documentation."
msgstr ""

# aab4eb1ca0354ab5ad1ddbbc83072e13
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:325
msgid "Use ``Paginator`` instead of ``ObjectPaginator``"
msgstr ""

# 1b0bb149b4134ffc9bab9fec46d122f9
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:327
msgid ""
"The ``ObjectPaginator`` in 0.96 has been removed and replaced with an "
"improved version, :class:`django.core.paginator.Paginator`."
msgstr ""

# d67d49769293488f8dc73a214215669b
# 3ebabee6462042ddba661f4534cd69b3
# e870d6042ac9486ca33121547b95b7dc
# 6315ac4c00924207b6be57affd631261
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:331
#: ../../../../1.9/docs/releases/1.7.txt:822
#: ../../../../1.9/docs/releases/1.8.txt:562
#: ../../../../1.9/docs/releases/1.9.txt:595
msgid "Templates"
msgstr "Gabarits"

# 2a0d7f1035b948f6960c6840d36fad49
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:334
msgid "Learn to love autoescaping"
msgstr ""

# 79ef4e762d8f4a7d9173997afd1128c9
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:336
msgid ""
"By default, the template system now automatically HTML-escapes the output of"
" every variable. To learn more, see :ref:`automatic-html-escaping`."
msgstr ""

# 42168b52b42d43f0ba5883f04bca757c
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:339
msgid ""
"To disable auto-escaping for an individual variable, use the :tfilter:`safe`"
" filter:"
msgstr ""

# b30ae9ea21394350bac64561ef9270b3
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:347
msgid ""
"To disable auto-escaping for an entire template, wrap the template (or just "
"a particular section of the template) in the :ttag:`autoescape` tag:"
msgstr ""

# 632a2ec8e09c4dce9112695fbca9ee0a
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:357
msgid "Less-common changes"
msgstr ""

# a44011ae45a84bf487a90e15ca8333ad
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:359
msgid ""
"The following changes are smaller, more localized changes. They should only "
"affect more advanced users, but it's probably worth reading through the list"
" and checking your code for these things."
msgstr ""

# b6a0d7bd41c640ad9231d7a35ca69067
# f64d32a319e046c4a391bbf257559c60
# f1d67cc6a32d40978f740497c7a4f197
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:364
#: ../../../../1.9/docs/releases/1.7.txt:812
#: ../../../../1.9/docs/releases/1.8.txt:542
msgid "Signals"
msgstr "Signaux"

# e0549bc85de04e0a85ed6a182b8fc340
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:366
msgid "Add ``**kwargs`` to any registered signal handlers."
msgstr ""

# 5e70f6716bdb483cb643f2a5051f802b
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:368
msgid ""
"Connect, disconnect, and send signals via methods on the "
":class:`~django.dispatch.Signal` object instead of through module methods in"
" ``django.dispatch.dispatcher``."
msgstr ""

# 08e8dc7ac5ea42168f0bc615468ef3b7
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:372
msgid ""
"Remove any use of the ``Anonymous`` and ``Any`` sender options; they no "
"longer exist. You can still receive signals sent by any sender by using "
"``sender=None``"
msgstr ""

# b24020eaab0f4dd0afd7f0b53f9ca8a4
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:376
msgid ""
"Make any custom signals you've declared into instances of "
":class:`django.dispatch.Signal` instead of anonymous objects."
msgstr ""

# bd2f33b06f304280a15c076a3ded68e6
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:379
msgid "Here's quick summary of the code changes you'll need to make:"
msgstr ""

# ebd6f7d164904be68c03bf61e6bbce0b
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:384
msgid "``def callback(sender)``"
msgstr ""

# d54c1b6a2bea44f9b87b9a971e7ea99d
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:384
msgid "``def callback(sender, **kwargs)``"
msgstr ""

# 4d08f291b45e4d34ac14e7cbb6b785d3
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:385
msgid "``sig = object()``"
msgstr ""

# 7f1fa85f38ff48f898c64415f6b263df
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:385
msgid "``sig = django.dispatch.Signal()``"
msgstr ""

# c5814d4b9791428a98e1b733b15fa41c
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:386
msgid "``dispatcher.connect(callback, sig)``"
msgstr ""

# 99b6b1cc338b4799886f26be4d216b94
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:386
msgid "``sig.connect(callback)``"
msgstr ""

# 8ad471951e284c798c6a12cd1422b6bf
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:387
msgid "``dispatcher.send(sig, sender)``"
msgstr ""

# c613bee9178446e690c5d72fa312f759
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:387
msgid "``sig.send(sender)``"
msgstr ""

# ded865ff734d40da817d5bf7e6a2e0fe
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:388
msgid "``dispatcher.connect(callback, sig, sender=Any)``"
msgstr ""

# 867e90484a124ea1a44a179726c0f7a8
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:388
msgid "``sig.connect(callback, sender=None)``"
msgstr ""

# 4090b45c84854a3ba4652d4fac238c70
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:392
msgid "Comments"
msgstr "Commentaires"

# 48945d6724934dbdb5bddb02db193d9e
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:394
msgid ""
"If you were using Django 0.96's ``django.contrib.comments`` app, you'll need"
" to upgrade to the new comments app introduced in 1.0. See the upgrade guide"
" for details."
msgstr ""

# e48391da1b4948c99ea2a20d1942b4fd
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:399
msgid "Template tags"
msgstr "Balises de gabarit"

# ccd3a2827e8049a6859c1c56f9bea991
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:402
msgid ":ttag:`spaceless` tag"
msgstr ""

# 59795e8f9d674ce2a37b6ca9a313c0af
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:404
msgid ""
"The spaceless template tag now removes *all* spaces between HTML tags, "
"instead of preserving a single space."
msgstr ""

# 35cdd192b60845848c3dea96c87abc03
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:408
msgid "Local flavors"
msgstr ""

# 7ac22259550b48839dc8f8c6304e4c7c
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:411
msgid "U.S. local flavor"
msgstr ""

# 5c74262df73e4d10a8b83cc6e83a49be
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:413
msgid ""
"``django.contrib.localflavor.usa`` has been renamed to "
"``django.contrib.localflavor.us``. This change was made to match the naming "
"scheme of other local flavors. To migrate your code, all you need to do is "
"change the imports."
msgstr ""

# c95a237a8cd743bd85f0296686a511ea
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:419
msgid "Sessions"
msgstr "Sessions"

# 653b0750c52f49ccbb71a2ea043b2952
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:422
msgid "Getting a new session key"
msgstr ""

# 662fdf903bac40a58436d85c0d1488d6
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:424
msgid ""
"``SessionBase.get_new_session_key()`` has been renamed to "
"``_get_new_session_key()``. ``get_new_session_object()`` no longer exists."
msgstr ""

# 9efc03e1d74b4bc79e10a0024c1b518d
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:428
msgid "Fixtures"
msgstr "Instantanés"

# c8049176e0a840fbb80d7616c89060c7
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:431
msgid "Loading a row no longer calls ``save()``"
msgstr ""

# 76c739c950964144877f60ac5453d52e
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:433
msgid ""
"Previously, loading a row automatically ran the model's ``save()`` method. "
"This is no longer the case, so any fields (for example: timestamps) that "
"were auto-populated by a ``save()`` now need explicit values in any fixture."
msgstr ""

# 13fdb78faaa642f8842678a1ef60905c
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:438
msgid "Settings"
msgstr "Réglages"

# 5a6f5791c03042d8b85a7060e3b264c1
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:441
msgid "Better exceptions"
msgstr ""

# b85ec0efef7e4979aa0f0592a0a1f007
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:443
msgid ""
"The old :exc:`EnvironmentError` has split into an :exc:`ImportError` when "
"Django fails to find the settings module and a :exc:`RuntimeError` when you "
"try to reconfigure settings after having already used them."
msgstr ""

# e166e0681252440da03c97dba69253e6
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:449
msgid ":setting:`LOGIN_URL` has moved"
msgstr ""

# 55fbd7ad653e48b4a6f92f3a1f98d382
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:451
msgid ""
"The :setting:`LOGIN_URL` constant moved from ``django.contrib.auth`` into "
"the ``settings`` module. Instead of using ``from django.contrib.auth import "
"LOGIN_URL`` refer to :setting:`settings.LOGIN_URL <LOGIN_URL>`."
msgstr ""

# 2afcb82bbc47421ab95a105df5924985
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:456
msgid ":setting:`APPEND_SLASH` behavior has been updated"
msgstr ""

# 47fbdc5999534987a477a341a480e697
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:458
msgid ""
"In 0.96, if a URL didn't end in a slash or have a period in the final "
"component of its path, and :setting:`APPEND_SLASH` was True, Django would "
"redirect to the same URL, but with a slash appended to the end. Now, Django "
"checks to see whether the pattern without the trailing slash would be "
"matched by something in your URL patterns. If so, no redirection takes "
"place, because it is assumed you deliberately wanted to catch that pattern."
msgstr ""

# 886f050f5e2849d19ea244859742929e
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:465
msgid ""
"For most people, this won't require any changes. Some people, though, have "
"URL patterns that look like this::"
msgstr ""

# 7363b080c6364397b1eb1e5f11f09f66
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:470
msgid ""
"Previously, those patterns would have been redirected to have a trailing "
"slash. If you always want a slash on such URLs, rewrite the pattern as::"
msgstr ""

# 241b8152fe9b4ddaa33d35aee0ddeace
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:476
msgid "Smaller model changes"
msgstr ""

# c8a8a1c1b1904193bf8d0d93c4f13ee5
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:479
msgid "Different exception from ``get()``"
msgstr ""

# 3cadff5532c242a4b825bdc8e18c91dc
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:481
msgid ""
"Managers now return a :exc:`~django.core.exceptions.MultipleObjectsReturned`"
" exception instead of :exc:`AssertionError`:"
msgstr ""

# 1fb181774e1f47ef8c58f29d0eb2a507
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:499
msgid "``LazyDate`` has been fired"
msgstr ""

# eafc00c3a1bb49bc9b86cf64e4fb8057
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:501
msgid "The ``LazyDate`` helper class no longer exists."
msgstr ""

# 9ecc443fd2db4f0388c3ae4be3a5e574
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:503
msgid ""
"Default field values and query arguments can both be callable objects, so "
"instances of ``LazyDate`` can be replaced with a reference to "
"``datetime.datetime.now``:"
msgstr ""

# b11dfbce247f47a39f07fbdb872d84f0
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:521
msgid "``DecimalField`` is new, and ``FloatField`` is now a proper float"
msgstr ""

# 9fb7be87f5124fff990289def096435e
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:535
msgid ""
"If you forget to make this change, you will see errors about ``FloatField`` "
"not taking a ``max_digits`` attribute in ``__init__``, because the new "
"``FloatField`` takes no precision-related arguments."
msgstr ""

# 9b823572bbbd49f09ce9ea07daf0365a
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:539
msgid ""
"If you're using MySQL or PostgreSQL, no further changes are needed. The "
"database column types for ``DecimalField`` are the same as for the old "
"``FloatField``."
msgstr ""

# fedb39ebd9704f5e81ba44399b615d02
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:543
msgid ""
"If you're using SQLite, you need to force the database to view the "
"appropriate columns as decimal types, rather than floats. To do this, you'll"
" need to reload your data. Do this after you have made the change to using "
"``DecimalField`` in your code and updated the Django code."
msgstr ""

# 27826ea57d2a4cbd82d5724ce78d5fe0
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:550
msgid "**Back up your database first!**"
msgstr ""

# 5a504b9fa6934a22a020fc5b3b705263
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:552
msgid ""
"For SQLite, this means making a copy of the single file that stores the "
"database (the name of that file is the ``DATABASE_NAME`` in your settings.py"
" file)."
msgstr ""

# b34c4d7a257a419d9b31800e138c0d89
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:556
msgid ""
"To upgrade each application to use a ``DecimalField``, you can do the "
"following, replacing ``<app>`` in the code below with each app's name:"
msgstr ""

# 9516038a7efd44389aefd4f380c686e0
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:565
msgid "Notes:"
msgstr "Notes :"

# 0b43ad6611c34aefb25048574e47fcce
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:567
msgid ""
"It's important that you remember to use XML format in the first step of this"
" process. We are exploiting a feature of the XML data dumps that makes "
"porting floats to decimals with SQLite possible."
msgstr ""

# 757bc0836a8a43d59b52c4147cd52ec5
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:571
msgid ""
"In the second step you will be asked to confirm that you are prepared to "
"lose the data for the application(s) in question. Say yes; we'll restore "
"this data in the third step, of course."
msgstr ""

# 150e6bccc7aa4d5f9ddc9a36bd7ade09
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:575
msgid ""
"``DecimalField`` is not used in any of the apps shipped with Django prior to"
" this change being made, so you do not need to worry about performing this "
"procedure for any of the standard Django models."
msgstr ""

# 6fd3c1afa59d46549e7225171ff67598
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:579
msgid ""
"If something goes wrong in the above process, just copy your backed up "
"database file over the original file and start again."
msgstr ""

# ec699c935f0b4c4786690ddd936cb811
# 5fba11fe3a66434aa5d22b1160a4daa4
# ba9cb337af37435d943987ea20f8560f
# 13ec5c7ebe6b44c1833de0077db83151
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:583
#: ../../../../1.9/docs/releases/1.7.txt:666
#: ../../../../1.9/docs/releases/1.8.txt:391
#: ../../../../1.9/docs/releases/1.9.txt:378
msgid "Internationalization"
msgstr "Internationalisation"

# c6af0b409fe9462c848236cd016632d8
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:586
msgid ":func:`django.views.i18n.set_language` now requires a POST request"
msgstr ""

# 312847158b14429a9eb83f6652e9d59e
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:588
msgid ""
"Previously, a GET request was used. The old behavior meant that state (the "
"locale used to display the site) could be changed by a GET request, which is"
" against the HTTP specification's recommendations. Code calling this view "
"must ensure that a POST request is now made, instead of a GET. This means "
"you can no longer use a link to access the view, but must use a form "
"submission of some kind (e.g. a button)."
msgstr ""

# 3aa73bdf99824c0098d1f6a6366f16a8
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:596
msgid "``_()`` is no longer in builtins"
msgstr ""

# 6a032f9730df493f987c047e871336c1
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:598
msgid ""
"``_()`` (the callable object whose name is a single underscore) is no longer"
" monkeypatched into builtins -- that is, it's no longer available magically "
"in every module."
msgstr ""

# e6ad5a1d1bd94f2390a8aa4125bfe8ce
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:602
msgid ""
"If you were previously relying on ``_()`` always being present, you should "
"now explicitly import ``ugettext`` or ``ugettext_lazy``, if appropriate, and"
" alias it to ``_`` yourself::"
msgstr ""

# 1e620a44c7de4ba482b4eba51df28e37
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:609
msgid "HTTP request/response objects"
msgstr ""

# 114d3ec4d4104a8682566ee6716743b2
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:612
msgid "Dictionary access to ``HttpRequest``"
msgstr ""

# 551fc12448844a3eb5c530c9405d2143
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:614
msgid ""
"``HttpRequest`` objects no longer directly support dictionary-style access; "
"previously, both ``GET`` and ``POST`` data were directly available on the "
"``HttpRequest`` object (e.g., you could check for a piece of form data by "
"using ``if 'some_form_key' in request`` or by reading "
"``request['some_form_key']``. This is no longer supported; if you need "
"access to the combined ``GET`` and ``POST`` data, use ``request.REQUEST`` "
"instead."
msgstr ""

# f9cd72fe7af94d8c873db38cfde1739f
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:622
msgid ""
"It is strongly suggested, however, that you always explicitly look in the "
"appropriate dictionary for the type of request you expect to receive "
"(``request.GET`` or ``request.POST``); relying on the combined "
"``request.REQUEST`` dictionary can mask the origin of incoming data."
msgstr ""

# 323ba35ee42d4558b9970bf132a0f11e
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:628
msgid "Accessing ``HTTPResponse`` headers"
msgstr ""

# c9dc92ee052041ab8cad590aee906c45
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:630
msgid ""
"``django.http.HttpResponse.headers`` has been renamed to ``_headers`` and "
":class:`~django.http.HttpResponse` now supports containment checking "
"directly. So use ``if header in response:`` instead of ``if header in "
"response.headers:``."
msgstr ""

# 9eaee203835146729448de124069c921
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:635
msgid "Generic relations"
msgstr "Relations génériques"

# a6f0870a7b8c4ef48d587656ebadaa56
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:638
msgid "Generic relations have been moved out of core"
msgstr ""

# 8ce664854f7144788cb154041edc7e3c
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:640
msgid ""
"The generic relation classes -- ``GenericForeignKey`` and "
"``GenericRelation`` -- have moved into the "
":mod:`django.contrib.contenttypes` module."
msgstr ""

# 21fff5e909cd4b3b9a4df9c27f4bc250
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:644
msgid "Testing"
msgstr "Tests"

# 613c08baa3df4a9180422846f6b01b7f
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:647
msgid ":meth:`django.test.Client.login` has changed"
msgstr ""

# 365f6df9f0e343b69636b2b6e8373e23
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:661
msgid "Management commands"
msgstr ""

# d1dbc6af3bf0434d90ab17045b15ba1a
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:664
msgid "Running management commands from your code"
msgstr "Lancement de commandes de gestion à partir du code"

# c8cbb126bc5e4415a49aeb02d41c092a
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:666
msgid ":mod:`django.core.management` has been greatly refactored."
msgstr ""

# 84b76f91899940bfb6dd01773e22be47
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:668
msgid ""
"Calls to management services in your code now need to use ``call_command``. "
"For example, if you have some test code that calls flush and load_data::"
msgstr ""

# 0e8f9a48195d410cac73ee28aa42b08a
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:676
msgid "...you'll need to change this code to read::"
msgstr ""

# 052911d66b8d495695e33466958d2e48
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:683
msgid "Subcommands must now precede options"
msgstr ""

# b6ca78cbddf946e787ffe779877338c5
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:685
msgid ""
"``django-admin.py`` and ``manage.py`` now require subcommands to precede "
"options. So:"
msgstr ""

# 7ce4e52048dd468d8ff1dd97184a08aa
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:692
msgid "...no longer works and should be changed to:"
msgstr ""

# c517f730cc5c4c75b8930a24eb0d53e7
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:699
msgid "Syndication"
msgstr "Syndication"

# 2e756af01d0c44d484752dc4ff65479d
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:702
msgid "``Feed.__init__`` has changed"
msgstr ""

# cf0cbef45db141d880b260796d3ed940
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:704
msgid ""
"The ``__init__()`` method of the syndication framework's ``Feed`` class now "
"takes an ``HttpRequest`` object as its second parameter, instead of the "
"feed's URL. This allows the syndication framework to work without requiring "
"the sites framework. This only affects code that subclasses ``Feed`` and "
"overrides the ``__init__()`` method, and code that calls ``Feed.__init__()``"
" directly."
msgstr ""

# 7035275d04ac4fcb8a8433b65c1be270
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:711
msgid "Data structures"
msgstr ""

# 811db6bc76184e138e67f287104c7a10
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:714
msgid "``SortedDictFromList`` is gone"
msgstr ""

# 6c9617ad14474558b42cb2f8ff4e7039
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:716
msgid ""
"``django.newforms.forms.SortedDictFromList`` was removed. "
"``django.utils.datastructures.SortedDict`` can now be instantiated with a "
"sequence of tuples."
msgstr ""

# 41a6c1b7032e42a780710abf7a35102b
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:720
msgid "To update your code:"
msgstr ""

# 25ddec4798fa4c388c0939af712c0da0
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:722
msgid ""
"Use ``django.utils.datastructures.SortedDict`` wherever you were using "
"``django.newforms.forms.SortedDictFromList``."
msgstr ""

# 201d14d01204477a9eec4c392d38a903
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:725
msgid ""
"Because ``django.utils.datastructures.SortedDict.copy`` doesn't return a "
"deepcopy as ``SortedDictFromList.copy()`` did, you will need to update your "
"code if you were relying on a deepcopy. Do this by using ``copy.deepcopy`` "
"directly."
msgstr ""

# df67459ee1f74be2ad714d834099c817
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:731
msgid "Database backend functions"
msgstr ""

# 0da16fde3b9b449a836b342cc1d2b4d1
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:734
msgid "Database backend functions have been renamed"
msgstr ""

# e28f3eea07fe4d7f8c2960868bdfc72f
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:736
msgid ""
"Almost *all* of the database backend-level functions have been renamed "
"and/or relocated. None of these were documented, but you'll need to change "
"your code if you're using any of these functions, all of which are in "
":mod:`django.db`:"
msgstr ""

# 0e99cf327dc94da68b84eb4ca518fd80
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:743
msgid "``backend.get_autoinc_sql``"
msgstr ""

# 7174a52904da477eb2edb97b2b7d4779
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:743
msgid "``connection.ops.autoinc_sql``"
msgstr ""

# 15f75fc0111d411693b5962d1ac298b2
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:744
msgid "``backend.get_date_extract_sql``"
msgstr ""

# ec23fda0cd6a4414ab98b4c92fce0325
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:744
msgid "``connection.ops.date_extract_sql``"
msgstr ""

# 08ae548bcb2c4c7b8484074cc49b9359
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:745
msgid "``backend.get_date_trunc_sql``"
msgstr ""

# 0af365c0cb724337a30d4c8d96d9f330
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:745
msgid "``connection.ops.date_trunc_sql``"
msgstr ""

# 5b2b95c792074e9ba3e93db18e286d4f
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:746
msgid "``backend.get_datetime_cast_sql``"
msgstr ""

# 159cbfd43af8423a93271d45fa27b047
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:746
msgid "``connection.ops.datetime_cast_sql``"
msgstr ""

# 2cebc91f14684b1381e70d042f92ba36
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:747
msgid "``backend.get_deferrable_sql``"
msgstr ""

# e32e194fc6c344f48cf41985ffed99dc
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:747
msgid "``connection.ops.deferrable_sql``"
msgstr ""

# ce0635c3af6f41039bfea91457cbb883
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:748
msgid "``backend.get_drop_foreignkey_sql``"
msgstr ""

# 4760c4c4bd7e40e3a84fcc3608435250
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:748
msgid "``connection.ops.drop_foreignkey_sql``"
msgstr ""

# 74896e19cda449ce972011d0f66ec429
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:749
msgid "``backend.get_fulltext_search_sql``"
msgstr ""

# d4465b39a375429a939ca09ccea91961
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:749
msgid "``connection.ops.fulltext_search_sql``"
msgstr ""

# 0a9d138f21cb49c2bcd8734b4eb74fe4
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:750
msgid "``backend.get_last_insert_id``"
msgstr ""

# c526799ef5f24e93a47631763b7f8b94
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:750
msgid "``connection.ops.last_insert_id``"
msgstr ""

# 3f3e2f9cfa304d50b192c026c84e1582
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:751
msgid "``backend.get_limit_offset_sql``"
msgstr ""

# 3261b24dc7dd46a785bf47835a597624
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:751
msgid "``connection.ops.limit_offset_sql``"
msgstr ""

# ae1c627038af4961bf8d83c2e482c3c9
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:752
msgid "``backend.get_max_name_length``"
msgstr ""

# 54d5231c1b304da282df43848b99bd2b
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:752
msgid "``connection.ops.max_name_length``"
msgstr ""

# 3a8f27b0fde54f7e83e8f79106793470
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:753
msgid "``backend.get_pk_default_value``"
msgstr ""

# 627c9ba281ae424e8d70d044129f6716
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:753
msgid "``connection.ops.pk_default_value``"
msgstr ""

# 42400ee005ac4e999228fc6403da98d9
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:754
msgid "``backend.get_random_function_sql``"
msgstr ""

# 81131b2450fb4286a588d43e4fb2cbba
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:754
msgid "``connection.ops.random_function_sql``"
msgstr ""

# 60aafb3f6b604df58e969bd78da4d61f
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:755
msgid "``backend.get_sql_flush``"
msgstr ""

# e312ed4308304828aa0efbda9d8fa049
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:755
msgid "``connection.ops.sql_flush``"
msgstr ""

# 560ceafb5141404b89a134ed98b6b5a8
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:756
msgid "``backend.get_sql_sequence_reset``"
msgstr ""

# 380de060be1d4c11b31569222d7da5b2
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:756
msgid "``connection.ops.sequence_reset_sql``"
msgstr ""

# df4e365f99214a64997147f79621cd62
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:757
msgid "``backend.get_start_transaction_sql``"
msgstr ""

# b86f4fd726bc4210bea80a2966cb497f
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:757
msgid "``connection.ops.start_transaction_sql``"
msgstr ""

# 6d5f9013db944f35b96345cf36e3d5b8
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:758
msgid "``backend.get_tablespace_sql``"
msgstr ""

# 75f29c3d50864ac7acdf5a6d584a09ab
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:758
msgid "``connection.ops.tablespace_sql``"
msgstr ""

# da31ef7a79174fd194614f9500e8346a
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:759
msgid "``backend.quote_name``"
msgstr ""

# 3bce8808b1114d03825d5541e388c190
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:759
msgid "``connection.ops.quote_name``"
msgstr ""

# 1f1a366150de47ac98efdd6c9cf231e6
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:760
msgid "``backend.get_query_set_class``"
msgstr ""

# a60bdb2699a1436e99df7c4527cdc368
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:760
msgid "``connection.ops.query_set_class``"
msgstr ""

# bed2f81fefd24ba388373d35917b1cfb
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:761
msgid "``backend.get_field_cast_sql``"
msgstr ""

# c16d17490a3f436caf14112ef241650c
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:761
msgid "``connection.ops.field_cast_sql``"
msgstr ""

# 6309e51fb3e3427ca5dcbb734216bdd9
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:762
msgid "``backend.get_drop_sequence``"
msgstr ""

# eb3efbce882a4d338825c63d5a634854
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:762
msgid "``connection.ops.drop_sequence_sql``"
msgstr ""

# f8ad73dfcdb94b09b71911460485611d
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:763
msgid "``backend.OPERATOR_MAPPING``"
msgstr ""

# 67db2ad004f7435e877a081bb13953f8
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:763
msgid "``connection.operators``"
msgstr ""

# 20fa753393ed4d4eba3ab7f36045a420
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:764
msgid "``backend.allows_group_by_ordinal``"
msgstr ""

# ab9781a9835f4f8cabf819d0917c7b5a
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:764
msgid "``connection.features.allows_group_by_ordinal``"
msgstr ""

# dc947af10c5e4de2bb867347dc39bc8c
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:765
msgid "``backend.allows_unique_and_pk``"
msgstr ""

# 791f898a063e46fbbcd305d7b7b47c8c
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:765
msgid "``connection.features.allows_unique_and_pk``"
msgstr ""

# db24f53c5807449d86f6c4b74d6e986a
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:766
msgid "``backend.autoindexes_primary_keys``"
msgstr ""

# cc9f9e00cab14e25bc251d111a7b6f3c
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:766
msgid "``connection.features.autoindexes_primary_keys``"
msgstr ""

# ea3b1c85c7c8429b9df2bf37318f9ec4
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:767
msgid "``backend.needs_datetime_string_cast``"
msgstr ""

# 5d635ce8e0294437aec1b45303b49b3f
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:767
msgid "``connection.features.needs_datetime_string_cast``"
msgstr ""

# 0fe25cb551c9479dace3c5d3193b19d8
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:768
msgid "``backend.needs_upper_for_iops``"
msgstr ""

# 240d35158edc45cfb81d6aba644c4c2e
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:768
msgid "``connection.features.needs_upper_for_iops``"
msgstr ""

# f00f4093c617436f88a6f1bd5435d499
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:769
msgid "``backend.supports_constraints``"
msgstr ""

# e792728521d04b409860e405c2287a29
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:769
msgid "``connection.features.supports_constraints``"
msgstr ""

# f445f5ae6ce94419b652554b068188d2
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:770
msgid "``backend.supports_tablespaces``"
msgstr ""

# 8f05308bacd44e0ba0e3bfc187b8bfca
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:770
msgid "``connection.features.supports_tablespaces``"
msgstr ""

# c2d588d879cd415b8b5395d3c98db13e
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:771
msgid "``backend.uses_case_insensitive_names``"
msgstr ""

# faacb47977094135935bd3af256f07c1
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:771
msgid "``connection.features.uses_case_insensitive_names``"
msgstr ""

# 4efe5d9a0e9249c2a8b13388bdb47c88
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:772
msgid "``backend.uses_custom_queryset``"
msgstr ""

# 51f55871799e495dbc08bb3d236bd606
#: ../../../../1.9/docs/releases/1.0-porting-guide.txt:772
msgid "``connection.features.uses_custom_queryset``"
msgstr ""

# 7135b8b02d814c438ca3dc0d41968b7d
#: ../../../../1.9/docs/releases/1.0.1.txt:3
msgid "Django 1.0.1 release notes"
msgstr ""

# 971d9101699b49ed85be94fa32188584
#: ../../../../1.9/docs/releases/1.0.1.txt:5
msgid "Welcome to Django 1.0.1!"
msgstr ""

# be4fcc73863249eb908b68be3ac738d8
#: ../../../../1.9/docs/releases/1.0.1.txt:7
msgid ""
"This is the first \"bugfix\" release in the Django 1.0 series, improving the"
" stability and performance of the Django 1.0 codebase. As such, Django 1.0.1"
" contains no new features (and, pursuant to :doc:`our compatibility policy "
"</misc/api-stability/>`, maintains backwards compatibility with Django 1.0),"
" but does contain a number of fixes and other improvements. Django 1.0.1 is "
"a recommended upgrade for any development or deployment currently using or "
"targeting Django 1.0."
msgstr ""

# 24e8e1c973d7458388db2003e9b35696
#: ../../../../1.9/docs/releases/1.0.1.txt:17
msgid "Fixes and improvements in Django 1.0.1"
msgstr ""

# bcf0edde2c864af395f0e976b0d33d1f
#: ../../../../1.9/docs/releases/1.0.1.txt:19
msgid ""
"Django 1.0.1 contains over two hundred fixes to the original Django 1.0 "
"codebase; full details of every fix are available in `the history of the "
"1.0.X branch`_, but here are some of the highlights:"
msgstr ""

# b24eb550c22e454ea9fb520312e5387b
#: ../../../../1.9/docs/releases/1.0.1.txt:24
msgid ""
"Several fixes in ``django.contrib.comments``, pertaining to RSS feeds of "
"comments, default ordering of comments and the XHTML and "
"internationalization of the default templates for comments."
msgstr ""

# 2b8b10949cc346e7a50c2d1a9a63f753
#: ../../../../1.9/docs/releases/1.0.1.txt:28
msgid ""
"Multiple fixes for Django's support of Oracle databases, including "
"pagination support for GIS QuerySets, more efficient slicing of results and "
"improved introspection of existing databases."
msgstr ""

# f85229feece845269f235bb6c506eb88
#: ../../../../1.9/docs/releases/1.0.1.txt:32
msgid ""
"Several fixes for query support in the Django object-relational mapper, "
"including repeated setting and resetting of ordering and fixes for working "
"with ``INSERT``-only queries."
msgstr ""

# 9501d63bec2045ada1540b70e9fbddb2
#: ../../../../1.9/docs/releases/1.0.1.txt:36
msgid "Multiple fixes for inline forms in formsets."
msgstr ""

# f18ffda089e84e4eb44d41adcfe5eff1
#: ../../../../1.9/docs/releases/1.0.1.txt:38
msgid ""
"Multiple fixes for ``unique`` and ``unique_together`` model constraints in "
"automatically-generated forms."
msgstr ""

# c402838b09c54dcda0e7d4973273c268
#: ../../../../1.9/docs/releases/1.0.1.txt:41
msgid ""
"Fixed support for custom callable ``upload_to`` declarations when handling "
"file uploads through automatically-generated forms."
msgstr ""

# 1dfc9afe9d4648c7ad903f2fc184f56f
#: ../../../../1.9/docs/releases/1.0.1.txt:44
msgid ""
"Fixed support for sorting an admin change list based on a callable "
"attributes in ``list_display``."
msgstr ""

# ddcc27c564db41ecbf8672441ec287db
#: ../../../../1.9/docs/releases/1.0.1.txt:47
msgid ""
"A fix to the application of autoescaping for literal strings passed to the "
"``join`` template filter. Previously, literal strings passed to ``join`` "
"were automatically escaped, contrary to :ref:`the documented behavior for "
"autoescaping and literal strings <string-literals-and-automatic-escaping>`. "
"Literal strings passed to ``join`` are no longer automatically escaped, "
"meaning you must now manually escape them; this is an incompatibility if you"
" were relying on this bug, but not if you were relying on escaping behaving "
"as documented."
msgstr ""

# a67e91d21a674307b9a177a0eecf581d
#: ../../../../1.9/docs/releases/1.0.1.txt:57
msgid ""
"Improved and expanded translation files for many of the languages Django "
"supports by default."
msgstr ""

# 2056c4584c7a4566ae36a595361d104e
#: ../../../../1.9/docs/releases/1.0.1.txt:60
msgid ""
"And as always, a large number of improvements to Django's documentation, "
"including both corrections to existing documents and expanded and new "
"documentation."
msgstr ""

# de3d936535294457930e74972e27e839
#: ../../../../1.9/docs/releases/1.0.2.txt:3
msgid "Django 1.0.2 release notes"
msgstr ""

# ab959abe3c9e4b84bc193e1556bfa02a
#: ../../../../1.9/docs/releases/1.0.2.txt:5
msgid "Welcome to Django 1.0.2!"
msgstr ""

# 270b89bf64844f31801555136661e13d
#: ../../../../1.9/docs/releases/1.0.2.txt:7
msgid ""
"This is the second \"bugfix\" release in the Django 1.0 series, improving "
"the stability and performance of the Django 1.0 codebase. As such, Django "
"1.0.2 contains no new features (and, pursuant to :doc:`our compatibility "
"policy </misc/api-stability>`, maintains backwards compatibility with Django"
" 1.0.0), but does contain a number of fixes and other improvements. Django "
"1.0.2 is a recommended upgrade for any development or deployment currently "
"using or targeting Django 1.0."
msgstr ""

# abfadfc0dab642b4b39478e7f678851d
#: ../../../../1.9/docs/releases/1.0.2.txt:17
msgid "Fixes and improvements in Django 1.0.2"
msgstr ""

# c6acbe25114d4a05b89ab6426add85be
#: ../../../../1.9/docs/releases/1.0.2.txt:19
msgid ""
"The primary reason behind this release is to remedy an issue in the "
"recently-released Django 1.0.1; the packaging scripts used for Django 1.0.1 "
"omitted some directories from the final release package, including one "
"directory required by ``django.contrib.gis`` and part of Django's unit-test "
"suite."
msgstr ""

# 8892f5a347d5462181ee09b8dbf061e9
#: ../../../../1.9/docs/releases/1.0.2.txt:25
msgid ""
"Django 1.0.2 contains updated packaging scripts, and the release package "
"contains the directories omitted from Django 1.0.1. As such, this release "
"contains all of the fixes and improvements from Django 1.0.1; see :doc:`the "
"Django 1.0.1 release notes </releases/1.0.1>` for details."
msgstr ""

# 568f9ca8b1bb44a38e0b4548efb10fca
#: ../../../../1.9/docs/releases/1.0.2.txt:31
msgid "Additionally, in the period since Django 1.0.1 was released:"
msgstr ""

# da6a9c2109e842d5bbb7621529a1e730
#: ../../../../1.9/docs/releases/1.0.2.txt:33
msgid "Updated Hebrew and Danish translations have been added."
msgstr ""

# fab6477e0bb74949928faaa1cd920ee6
#: ../../../../1.9/docs/releases/1.0.2.txt:35
msgid ""
"The default ``__repr__`` method of Django models has been made more robust "
"in the face of bad Unicode data coming from the ``__unicode__`` method; "
"rather than raise an exception in such cases, ``repr()`` will now contain "
"the string \"[Bad Unicode data]\" in place of the invalid Unicode."
msgstr ""

# 2502adf290d942e784cdf69e2419dc7a
#: ../../../../1.9/docs/releases/1.0.2.txt:41
msgid ""
"A bug involving the interaction of Django's ``SafeUnicode`` class and the "
"MySQL adapter has been resolved; ``SafeUnicode`` instances (generated, for "
"example, by template rendering) can now be assigned to model attributes and "
"saved to MySQL without requiring an explicit intermediate cast to "
"``unicode``."
msgstr ""

# 17e52c9ebcf64b1bbbd1051ec8b406d7
#: ../../../../1.9/docs/releases/1.0.2.txt:47
msgid ""
"A bug affecting filtering on a nullable ``DateField`` in SQLite has been "
"resolved."
msgstr ""

# 4c6e463594104d65b8e6b794b748c525
#: ../../../../1.9/docs/releases/1.0.2.txt:50
msgid ""
"Several updates and improvements have been made to Django's documentation."
msgstr ""

# 4c888530a70946edaf34ab3bcb0f8cd5
#: ../../../../1.9/docs/releases/1.1.txt:3
msgid "Django 1.1 release notes"
msgstr ""

# 3b2321d5f1d641e0af9edfd7d6d1197c
#: ../../../../1.9/docs/releases/1.1.txt:6
msgid "July 29, 2009"
msgstr ""

# cf891ea3b155465a906b4fbddfcc2067
#: ../../../../1.9/docs/releases/1.1.txt:8
msgid "Welcome to Django 1.1!"
msgstr ""

# 7042e50844404ced989fd2ce860465ca
#: ../../../../1.9/docs/releases/1.1.txt:10
msgid ""
"Django 1.1 includes a number of nifty `new features`_, lots of bug fixes, "
"and an easy upgrade path from Django 1.0."
msgstr ""

# e37ed92a48994b8f80f08733ec25a363
#: ../../../../1.9/docs/releases/1.1.txt:18
msgid "Backwards-incompatible changes in 1.1"
msgstr ""

# 959539366bbf45b79043f02174c5434e
#: ../../../../1.9/docs/releases/1.1.txt:20
msgid ""
"Django has a policy of :doc:`API stability </misc/api-stability>`. This "
"means that, in general, code you develop against Django 1.0 should continue "
"to work against 1.1 unchanged. However, we do sometimes make backwards-"
"incompatible changes if they're necessary to resolve bugs, and there are a "
"handful of such (minor) changes between Django 1.0 and Django 1.1."
msgstr ""

# 33698942fe2a4a308b709a1bca35da59
#: ../../../../1.9/docs/releases/1.1.txt:26
msgid ""
"Before upgrading to Django 1.1 you should double-check that the following "
"changes don't impact you, and upgrade your code if they do."
msgstr ""

# 2e67ac3f551b4f69bc79418748423ac0
#: ../../../../1.9/docs/releases/1.1.txt:30
msgid "Changes to constraint names"
msgstr ""

# a3b8afa8594b44d2a4fccc6a68a4437a
#: ../../../../1.9/docs/releases/1.1.txt:32
msgid ""
"Django 1.1 modifies the method used to generate database constraint names so"
" that names are consistent regardless of machine word size. This change is "
"backwards incompatible for some users."
msgstr ""

# 589ee7baa2424022a119bfe137a58014
#: ../../../../1.9/docs/releases/1.1.txt:36
msgid ""
"If you are using a 32-bit platform, you're off the hook; you'll observe no "
"differences as a result of this change."
msgstr ""

# dd8e7b7e56ae4479818a0b9c475cc36c
#: ../../../../1.9/docs/releases/1.1.txt:39
msgid ""
"However, **users on 64-bit platforms may experience some problems** using "
"the ``reset`` management command. Prior to this change, 64-bit platforms "
"would generate a 64-bit, 16 character digest in the constraint name; for "
"example::"
msgstr ""

# c6b18700737440c998596e81d7e30304
#: ../../../../1.9/docs/releases/1.1.txt:46
msgid ""
"Following this change, all platforms, regardless of word size, will generate"
" a 32-bit, 8 character digest in the constraint name; for example::"
msgstr ""

# 605661d263ae47f09eb9935a8fbda303
#: ../../../../1.9/docs/releases/1.1.txt:51
msgid ""
"As a result of this change, you will not be able to use the ``reset`` "
"management command on any table made by a 64-bit machine. This is because "
"the new generated name will not match the historically generated name; as a "
"result, the SQL constructed by the reset command will be invalid."
msgstr ""

# 4982cf4b7c2749a4813bc7263e6585a7
#: ../../../../1.9/docs/releases/1.1.txt:56
msgid ""
"If you need to reset an application that was created with 64-bit "
"constraints, you will need to manually drop the old constraint prior to "
"invoking ``reset``."
msgstr ""

# e49f9d57ade54106b0bb233ad7829868
#: ../../../../1.9/docs/releases/1.1.txt:61
msgid "Test cases are now run in a transaction"
msgstr ""

# 758a84f75ac1430e80319dc8e5c0e689
#: ../../../../1.9/docs/releases/1.1.txt:63
msgid ""
"Django 1.1 runs tests inside a transaction, allowing better test performance"
" (see `test performance improvements`_ for details)."
msgstr ""

# b04666d0ec774559a44280413820c3ae
#: ../../../../1.9/docs/releases/1.1.txt:66
msgid ""
"This change is slightly backwards incompatible if existing tests need to "
"test transactional behavior, if they rely on invalid assumptions about the "
"test environment, or if they require a specific test case ordering."
msgstr ""

# 945c510e4ea64f1ea533840e938e0b98
#: ../../../../1.9/docs/releases/1.1.txt:70
msgid ""
"For these cases, :class:`~django.test.TransactionTestCase` can be used "
"instead. This is a just a quick fix to get around test case errors revealed "
"by the new rollback approach; in the long-term tests should be rewritten to "
"correct the test case."
msgstr ""

# 0527e1271d9b4b0c966fb1cc92c31054
#: ../../../../1.9/docs/releases/1.1.txt:78
msgid "Removed ``SetRemoteAddrFromForwardedFor`` middleware"
msgstr ""

# 1e4d235ad32d45c3b7abbc9750698d49
#: ../../../../1.9/docs/releases/1.1.txt:80
msgid ""
"For convenience, Django 1.0 included an optional middleware class -- "
"``django.middleware.http.SetRemoteAddrFromForwardedFor`` -- which updated "
"the value of ``REMOTE_ADDR`` based on the HTTP ``X-Forwarded-For`` header "
"commonly set by some proxy configurations."
msgstr ""

# 4be876b6738d45c5a4761cbe5e23340d
#: ../../../../1.9/docs/releases/1.1.txt:85
msgid ""
"It has been demonstrated that this mechanism cannot be made reliable enough "
"for general-purpose use, and that (despite documentation to the contrary) "
"its inclusion in Django may lead application developers to assume that the "
"value of ``REMOTE_ADDR`` is \"safe\" or in some way reliable as a source of "
"authentication."
msgstr ""

# bf034f069b5f492686305a74e7e4a20d
#: ../../../../1.9/docs/releases/1.1.txt:90
msgid ""
"While not directly a security issue, we've decided to remove this middleware"
" with the Django 1.1 release. It has been replaced with a class that does "
"nothing other than raise a ``DeprecationWarning``."
msgstr ""

# 0cae28201dba4bbf8e1fe8273507fed9
#: ../../../../1.9/docs/releases/1.1.txt:94
msgid ""
"If you've been relying on this middleware, the easiest upgrade path is:"
msgstr ""

# db163bd0055e4235be6ad08560087a36
#: ../../../../1.9/docs/releases/1.1.txt:96
msgid "Examine `the code as it existed before it was removed`__."
msgstr ""

# 7dd27e54e092451cb9cd930504e93e99
#: ../../../../1.9/docs/releases/1.1.txt:98
msgid ""
"Verify that it works correctly with your upstream proxy, modifying it to "
"support your particular proxy (if necessary)."
msgstr ""

# 1bd71cdd51e340f2ad82a2a8ecce4a8e
#: ../../../../1.9/docs/releases/1.1.txt:101
msgid ""
"Introduce your modified version of ``SetRemoteAddrFromForwardedFor`` as a "
"piece of middleware in your own project."
msgstr ""

# 100ba16ded7b464c83422e895d1ef0c2
#: ../../../../1.9/docs/releases/1.1.txt:107
msgid "Names of uploaded files are available later"
msgstr ""

# 821bbf4c8e2c45a8836b4f157201b0bf
#: ../../../../1.9/docs/releases/1.1.txt:111
msgid ""
"In Django 1.0, files uploaded and stored in a model's :class:`FileField` "
"were saved to disk before the model was saved to the database. This meant "
"that the actual file name assigned to the file was available before saving. "
"For example, it was available in a model's pre-save signal handler."
msgstr ""

# 20d9200db5cb494eb1e8f851959f078c
#: ../../../../1.9/docs/releases/1.1.txt:116
msgid ""
"In Django 1.1 the file is saved as part of saving the model in the database,"
" so the actual file name used on disk cannot be relied on until *after* the "
"model has been saved."
msgstr ""

# 45f300b1e92d4cd9a7e7271f10381cb8
#: ../../../../1.9/docs/releases/1.1.txt:121
msgid "Changes to how model formsets are saved"
msgstr ""

# e9d089e1ef7c4d398098c97ff52b5717
#: ../../../../1.9/docs/releases/1.1.txt:123
msgid ""
"In Django 1.1, :class:`~django.forms.models.BaseModelFormSet` now calls "
"``ModelForm.save()``."
msgstr ""

# 50b6805131b14121beee0e815a2a49c3
#: ../../../../1.9/docs/releases/1.1.txt:126
msgid ""
"This is backwards-incompatible if you were modifying ``self.initial`` in a "
"model formset's ``__init__``, or if you relied on the internal "
"``_total_form_count`` or ``_initial_form_count`` attributes of BaseFormSet. "
"Those attributes are now public methods."
msgstr ""

# b19bf95005214f25932edbaa591ab9ee
#: ../../../../1.9/docs/releases/1.1.txt:132
msgid "Fixed the ``join`` filter's escaping behavior"
msgstr ""

# dd4da240663a426b9b71475def88ccdf
#: ../../../../1.9/docs/releases/1.1.txt:134
msgid ""
"The :tfilter:`join` filter no longer escapes the literal value that is "
"passed in for the connector."
msgstr ""

# e6230109ac5242d6a888e76369e944f2
#: ../../../../1.9/docs/releases/1.1.txt:137
msgid ""
"This is backwards incompatible for the special situation of the literal "
"string containing one of the five special HTML characters. Thus, if you were"
" writing ``{{ foo|join:\"&\" }}``, you now have to write ``{{ "
"foo|join:\"&amp;\" }}``."
msgstr ""

# ab6641ab7fc3452488003186f11051da
#: ../../../../1.9/docs/releases/1.1.txt:141
msgid ""
"The previous behavior was a bug and contrary to what was documented and "
"expected."
msgstr ""

# 509f860281df494c850006cc15353ebe
#: ../../../../1.9/docs/releases/1.1.txt:145
msgid "Permanent redirects and the ``redirect_to()`` generic view"
msgstr ""

# cd7b329f78a4477e83e6b016327cdf69
#: ../../../../1.9/docs/releases/1.1.txt:147
msgid ""
"Django 1.1 adds a ``permanent`` argument to the "
"``django.views.generic.simple.redirect_to()`` view. This is technically "
"backwards-incompatible if you were using the ``redirect_to`` view with a "
"format-string key called 'permanent', which is highly unlikely."
msgstr ""

# 89ccb1a933424b2f9e43b308ff7a5461
#: ../../../../1.9/docs/releases/1.1.txt:155
msgid "Features deprecated in 1.1"
msgstr ""

# 368303bfb037469ea97cdf387cf23d69
#: ../../../../1.9/docs/releases/1.1.txt:157
msgid "One feature has been marked as deprecated in Django 1.1:"
msgstr ""

# cdd31e0079d54f06a32a67b56bdc7fdb
#: ../../../../1.9/docs/releases/1.1.txt:159
msgid ""
"You should no longer use ``AdminSite.root()`` to register that admin views. "
"That is, if your URLconf contains the line::"
msgstr ""

# ad703e09c4ae41f28ca3c94ff6b44db5
#: ../../../../1.9/docs/releases/1.1.txt:164
msgid "You should change it to read::"
msgstr ""

# 729d61443af8469bb0df9c9edd0d57d5
#: ../../../../1.9/docs/releases/1.1.txt:168
msgid ""
"You should begin to remove use of this feature from your code immediately."
msgstr ""

# a70d1d5d874f4e1d914f72fef437af88
#: ../../../../1.9/docs/releases/1.1.txt:170
msgid ""
"``AdminSite.root`` will raise a ``PendingDeprecationWarning`` if used in "
"Django 1.1. This warning is hidden by default. In Django 1.2, this warning "
"will be upgraded to a ``DeprecationWarning``, which will be displayed "
"loudly. Django 1.3 will remove ``AdminSite.root()`` entirely."
msgstr ""

# f9d4995801ab4154bfbf434566dae347
#: ../../../../1.9/docs/releases/1.1.txt:175
msgid ""
"For more details on our deprecation policies and strategy, see "
":doc:`/internals/release-process`."
msgstr ""

# e329ba23aaca4d8ba7bd2bc986178203
#: ../../../../1.9/docs/releases/1.1.txt:179
msgid "What's new in Django 1.1"
msgstr ""

# 17e72634d0fb4631b71ae237cd31395d
#: ../../../../1.9/docs/releases/1.1.txt:181
msgid ""
"Quite a bit: since Django 1.0, we've made 1,290 code commits, fixed 1,206 "
"bugs, and added roughly 10,000 lines of documentation."
msgstr ""

# 3415ad80bb0640859c55f7631b7278cc
#: ../../../../1.9/docs/releases/1.1.txt:184
msgid "The major new features in Django 1.1 are:"
msgstr ""

# 95a2ca97701c4b8fb0fc618204689187
#: ../../../../1.9/docs/releases/1.1.txt:187
msgid "ORM improvements"
msgstr ""

# 80fc7dc6107242dab8c5dfc493c33cf3
#: ../../../../1.9/docs/releases/1.1.txt:191
msgid ""
"Two major enhancements have been added to Django's object-relational mapper "
"(ORM): aggregate support, and query expressions."
msgstr ""

# bc03d86cba574365b021ea8c627c51c8
#: ../../../../1.9/docs/releases/1.1.txt:195
msgid "Aggregate support"
msgstr ""

# af5a5b01fe43443fa620a6591366acb8
#: ../../../../1.9/docs/releases/1.1.txt:197
msgid ""
"It's now possible to run SQL aggregate queries (i.e. ``COUNT()``, ``MAX()``,"
" ``MIN()``, etc.) from within Django's ORM. You can choose to either return "
"the results of the aggregate directly, or else annotate the objects in a "
":class:`~django.db.models.query.QuerySet` with the results of the aggregate "
"query."
msgstr ""

# 331ce32b55514c1186370d1ebdf74ea7
#: ../../../../1.9/docs/releases/1.1.txt:203
msgid ""
"This feature is available as new "
":meth:`~django.db.models.query.QuerySet.aggregate` and "
":meth:`~django.db.models.query.QuerySet.annotate` methods, and is covered in"
" detail in :doc:`the ORM aggregation documentation "
"</topics/db/aggregation>`."
msgstr ""

# 2a1faf04b8904970a8878f5926df1a2c
#: ../../../../1.9/docs/releases/1.1.txt:209
msgid "Query expressions"
msgstr ""

# 65568f3dacbb4543b9fd45f466a3e3f2
#: ../../../../1.9/docs/releases/1.1.txt:211
msgid ""
"Queries can now refer to a another field on the query and can traverse "
"relationships to refer to fields on related models. This is implemented in "
"the new :class:`~django.db.models.F` object; for full details, including "
"examples, consult the :class:`F expressions documentation "
"<django.db.models.F>`."
msgstr ""

# b6ff3fdd890c4073ac9faea90b9d39b7
#: ../../../../1.9/docs/releases/1.1.txt:217
msgid "Model improvements"
msgstr ""

# 3161e544924e4de6a5b4f42b39c74f31
#: ../../../../1.9/docs/releases/1.1.txt:219
msgid "A number of features have been added to Django's model layer:"
msgstr ""

# e53140e500d34a2d90781ff58b01d621
#: ../../../../1.9/docs/releases/1.1.txt:222
msgid "\"Unmanaged\" models"
msgstr ""

# db290fda9c844250986a160030f7e15b
#: ../../../../1.9/docs/releases/1.1.txt:224
msgid ""
"You can now control whether or not Django manages the life-cycle of the "
"database tables for a model using the :attr:`~Options.managed` model option."
" This defaults to ``True``, meaning that Django will create the appropriate "
"database tables in ``syncdb`` and remove them as part of the ``reset`` "
"command. That is, Django *manages* the database table's lifecycle."
msgstr ""

# 7d1c1d2e70b3418eb95f4649716c76cf
#: ../../../../1.9/docs/releases/1.1.txt:230
msgid ""
"If you set this to ``False``, however, no database table creating or "
"deletion will be automatically performed for this model. This is useful if "
"the model represents an existing table or a database view that has been "
"created by some other means."
msgstr ""

# 66ca598aa3cc43e39a85b71c32e68e57
#: ../../../../1.9/docs/releases/1.1.txt:235
msgid ""
"For more details, see the documentation for the :attr:`~Options.managed` "
"option."
msgstr ""

# 3c568c07ad074f55b834665f55f4939b
#: ../../../../1.9/docs/releases/1.1.txt:239
msgid "Proxy models"
msgstr "Modèles mandataires"

# 8ec5f498d45b4db6b719a4e47bc74525
#: ../../../../1.9/docs/releases/1.1.txt:241
msgid ""
"You can now create :ref:`proxy models <proxy-models>`: subclasses of "
"existing models that only add Python-level (rather than database-level) "
"behavior and aren't represented by a new table. That is, the new model is a "
"*proxy* for some underlying model, which stores all the real data."
msgstr ""

# 1e7f92e50ddb4af188bf4877c0947519
#: ../../../../1.9/docs/releases/1.1.txt:246
msgid ""
"All the details can be found in the :ref:`proxy models documentation <proxy-"
"models>`. This feature is similar on the surface to unmanaged models, so the"
" documentation has an explanation of :ref:`how proxy models differ from "
"unmanaged models <proxy-vs-unmanaged-models>`."
msgstr ""

# 2eb7623178ac473eae8f8bba2769912c
#: ../../../../1.9/docs/releases/1.1.txt:252
msgid "Deferred fields"
msgstr ""

# 4e887a40785241dfa4509ddf57d8257c
#: ../../../../1.9/docs/releases/1.1.txt:254
msgid ""
"In some complex situations, your models might contain fields which could "
"contain a lot of data (for example, large text fields), or require expensive"
" processing to convert them to Python objects. If you know you don't need "
"those particular fields, you can now tell Django not to retrieve them from "
"the database."
msgstr ""

# 26ae517d13cc42ba8d908fc352630aad
#: ../../../../1.9/docs/releases/1.1.txt:260
msgid ""
"You'll do this with the new queryset methods "
":meth:`~django.db.models.query.QuerySet.defer` and "
":meth:`~django.db.models.query.QuerySet.only`."
msgstr ""

# 6705726bf99c4317bfcc4d4d91e4f0f0
#: ../../../../1.9/docs/releases/1.1.txt:265
msgid "Testing improvements"
msgstr ""

# cce52e16081240cabe308b2963948e4d
#: ../../../../1.9/docs/releases/1.1.txt:267
msgid ""
"A few notable improvements have been made to the :doc:`testing framework "
"</topics/testing/index>`."
msgstr ""

# e9a7243400124fba8bb6ffb1c19d2ee6
#: ../../../../1.9/docs/releases/1.1.txt:271
msgid "Test performance improvements"
msgstr ""

# 73e5f16dcff74d938e952edbe9a04fa7
#: ../../../../1.9/docs/releases/1.1.txt:275
msgid ""
"Tests written using Django's :doc:`testing framework "
"</topics/testing/index>` now run dramatically faster (as much as 10 times "
"faster in many cases)."
msgstr ""

# f9826bd8319d4337aceecc9ae87d0d58
#: ../../../../1.9/docs/releases/1.1.txt:278
msgid ""
"This was accomplished through the introduction of transaction-based tests: "
"when using :class:`django.test.TestCase`, your tests will now be run in a "
"transaction which is rolled back when finished, instead of by flushing and "
"re-populating the database. This results in an immense speedup for most "
"types of unit tests. See the documentation for :class:`TestCase` and "
":class:`TransactionTestCase` for a full description, and some important "
"notes on database support."
msgstr ""

# 22cbf332d3a447c9b2e77831a8b996f9
#: ../../../../1.9/docs/releases/1.1.txt:286
msgid "Test client improvements"
msgstr ""

# f7ce3a0dadb943539341786c74696186
#: ../../../../1.9/docs/releases/1.1.txt:288
msgid ""
"A couple of small -- but highly useful -- improvements have been made to the"
" test client:"
msgstr ""

# 8f4e19c8b4e4496a9be15f1ffa84c6e4
#: ../../../../1.9/docs/releases/1.1.txt:291
msgid ""
"The test :class:`Client` now can automatically follow redirects with the "
"``follow`` argument to :meth:`Client.get` and :meth:`Client.post`. This "
"makes testing views that issue redirects simpler."
msgstr ""

# f4933b9a02174e9fa68a36af39304073
#: ../../../../1.9/docs/releases/1.1.txt:295
msgid ""
"It's now easier to get at the template context in the response returned the "
"test client: you'll simply access the context as ``request.context[key]``. "
"The old way, which treats ``request.context`` as a list of contexts, one for"
" each rendered template in the inheritance chain, is still available if you "
"need it."
msgstr ""

# dbbc003c8bc8411ba239f37ded9316eb
#: ../../../../1.9/docs/releases/1.1.txt:302
msgid "New admin features"
msgstr ""

# 1ee4300cd34f4c858dc41ad7cee579cf
#: ../../../../1.9/docs/releases/1.1.txt:304
msgid ""
"Django 1.1 adds a couple of nifty new features to Django's admin interface:"
msgstr ""

# 5deb7976cf844996acabc8e62bc1882d
#: ../../../../1.9/docs/releases/1.1.txt:307
msgid "Editable fields on the change list"
msgstr ""

# 7acb2ddcad2844f8a14f5237f21956d4
#: ../../../../1.9/docs/releases/1.1.txt:309
msgid ""
"You can now make fields editable on the admin list views via the new "
":ref:`list_editable <admin-list-editable>` admin option. These fields will "
"show up as form widgets on the list pages, and can be edited and saved in "
"bulk."
msgstr ""

# 768cd479b13b4c989dd488d36bc6a3ae
#: ../../../../1.9/docs/releases/1.1.txt:314
msgid "Admin \"actions\""
msgstr ""

# 2a93b8494a6c4fb893fe2ca250d0fd5a
#: ../../../../1.9/docs/releases/1.1.txt:316
msgid ""
"You can now define :doc:`admin actions </ref/contrib/admin/actions>` that "
"can perform some action to a group of models in bulk. Users will be able to "
"select objects on the change list page and then apply these bulk actions to "
"all selected objects."
msgstr ""

# 92d55f5e2d27463386ac8b720c63c33c
#: ../../../../1.9/docs/releases/1.1.txt:321
msgid ""
"Django ships with one pre-defined admin action to delete a group of objects "
"in one fell swoop."
msgstr ""

# 8bf4d09ffead4057846a7f5960b5817c
#: ../../../../1.9/docs/releases/1.1.txt:325
msgid "Conditional view processing"
msgstr "Traitement conditionnel de vue"

# 067b37552da84fc192426dd291405d40
#: ../../../../1.9/docs/releases/1.1.txt:327
msgid ""
"Django now has much better support for :doc:`conditional view processing "
"</topics/conditional-view-processing>` using the standard ``ETag`` and "
"``Last-Modified`` HTTP headers. This means you can now easily short-circuit "
"view processing by testing less-expensive conditions. For many views this "
"can lead to a serious improvement in speed and reduction in bandwidth."
msgstr ""

# 71dfb21f6ac64e44a1a001b801587e6c
#: ../../../../1.9/docs/releases/1.1.txt:334
msgid "URL namespaces"
msgstr "Les espaces de noms d'URL"

# 341dacc25599428cb0417fb89153b51d
#: ../../../../1.9/docs/releases/1.1.txt:336
msgid ""
"Django 1.1 improves :ref:`named URL patterns <naming-url-patterns>` with the"
" introduction of URL \"namespaces.\""
msgstr ""

# c915c7c626be4f1f9ee6db05f1978c9f
#: ../../../../1.9/docs/releases/1.1.txt:339
msgid ""
"In short, this feature allows the same group of URLs, from the same "
"application, to be included in a Django URLConf multiple times, with varying"
" (and potentially nested) named prefixes which will be used when performing "
"reverse resolution. In other words, reusable applications like Django's "
"admin interface may be registered multiple times without URL conflicts."
msgstr ""

# c8baa1c83a7f433388bbfbf3743be97a
#: ../../../../1.9/docs/releases/1.1.txt:345
msgid ""
"For full details, see :ref:`the documentation on defining URL namespaces "
"<topics-http-defining-url-namespaces>`."
msgstr ""

# 35f75d1cbc914f958ac48b037a1e8464
# 95d6ea4f420a4b329c7d462091a266e3
# 2d499e624bca478197094839871812ea
# 2d99efd1b81745859160f3a80ce9e6a8
# 83595545dd464c099375ddca7f274136
# 1d527656a61f427188eb5d0686ef9567
# 001c382d0c58473f9418303cc786bde2
#: ../../../../1.9/docs/releases/1.1.txt:349
#: ../../../../1.9/docs/releases/1.2.txt:339
#: ../../../../1.9/docs/releases/1.2.txt:1082
#: ../../../../1.9/docs/releases/1.2.4.txt:76
#: ../../../../1.9/docs/releases/1.3.txt:259
#: ../../../../1.9/docs/releases/1.3.txt:800
#: ../../../../1.9/docs/releases/1.5.txt:219
msgid "GeoDjango"
msgstr "GeoDjango"

# 142ca56c955f41aa85100541cc40fb49
#: ../../../../1.9/docs/releases/1.1.txt:351
msgid ""
"In Django 1.1, GeoDjango_ (i.e. ``django.contrib.gis``) has several new "
"features:"
msgstr ""

# 627ccbe7100d402982108e98b051f06e
#: ../../../../1.9/docs/releases/1.1.txt:354
msgid ""
"Support for SpatiaLite_ -- a spatial database for SQLite -- as a spatial "
"backend."
msgstr ""

# bb2909b02d964291bf322eac013bc3bb
#: ../../../../1.9/docs/releases/1.1.txt:357
msgid ""
"Geographic aggregates (``Collect``, ``Extent``, ``MakeLine``, ``Union``) and"
" ``F`` expressions."
msgstr ""

# d6059c86717949b2a88821a744d46f2e
#: ../../../../1.9/docs/releases/1.1.txt:360
msgid ""
"New ``GeoQuerySet`` methods: ``collect``, ``geojson``, and ``snap_to_grid``."
msgstr ""

# c07f75663fa24b23a46cbc460c0cfe2b
#: ../../../../1.9/docs/releases/1.1.txt:363
msgid "A new list interface methods for ``GEOSGeometry`` objects."
msgstr ""

# 0cc9715321c344e784c1562e19a535f4
#: ../../../../1.9/docs/releases/1.1.txt:365
msgid "For more details, see the GeoDjango documentation."
msgstr ""

# beabea4e322a4d96a1847b7c52ca7de7
#: ../../../../1.9/docs/releases/1.1.txt:371
msgid "Other improvements"
msgstr ""

# a841e1059c21429889a56be3ae861c44
#: ../../../../1.9/docs/releases/1.1.txt:373
msgid "Other new features and changes introduced since Django 1.0 include:"
msgstr ""

# 0bc2141c6d38430b9187c90bf4199327
#: ../../../../1.9/docs/releases/1.1.txt:375
msgid ""
"The :doc:`CSRF protection middleware </ref/csrf>` has been split into two "
"classes -- ``CsrfViewMiddleware`` checks incoming requests, and "
"``CsrfResponseMiddleware`` processes outgoing responses. The combined "
"``CsrfMiddleware`` class (which does both) remains for backwards-"
"compatibility, but using the split classes is now recommended in order to "
"allow fine-grained control of when and where the CSRF processing takes "
"place."
msgstr ""

# 13c2debf3daf4047aa8613b16c669693
#: ../../../../1.9/docs/releases/1.1.txt:383
msgid ""
":func:`~django.core.urlresolvers.reverse` and code which uses it (e.g., the "
"``{% url %}`` template tag) now works with URLs in Django's administrative "
"site, provided that the admin URLs are set up via "
"``include(admin.site.urls)`` (sending admin requests to the "
"``admin.site.root`` view still works, but URLs in the admin will not be "
"\"reversible\" when configured this way)."
msgstr ""

# ef93b7ee753944aea0cc191bc9f76c21
#: ../../../../1.9/docs/releases/1.1.txt:389
msgid ""
"The ``include()`` function in Django URLconf modules can now accept "
"sequences of URL patterns (generated by ``patterns()``) in addition to "
"module names."
msgstr ""

# 1724cbf1ff9a4f91a7ee7f85800b9841
#: ../../../../1.9/docs/releases/1.1.txt:392
msgid ""
"Instances of Django forms (see :doc:`the forms overview "
"</topics/forms/index>`) now have two additional methods, ``hidden_fields()``"
" and ``visible_fields()``, which return the list of hidden -- i.e., ``<input"
" type=\"hidden\">`` -- and visible fields on the form, respectively."
msgstr ""

# 694d33eb3c9949eb89aa1c51ffbbcdd8
#: ../../../../1.9/docs/releases/1.1.txt:397
msgid ""
"The ``redirect_to`` generic view now accepts an additional keyword argument "
"``permanent``. If ``permanent`` is ``True``, the view will emit an HTTP "
"permanent redirect (status code 301). If ``False``, the view will emit an "
"HTTP temporary redirect (status code 302)."
msgstr ""

# f7a28639b8bd4de2b1a28e6e92cf9186
#: ../../../../1.9/docs/releases/1.1.txt:403
msgid ""
"A new database lookup type -- ``week_day`` -- has been added for "
"``DateField`` and ``DateTimeField``. This type of lookup accepts a number "
"between 1 (Sunday) and 7 (Saturday), and returns objects where the field "
"value matches that day of the week. See :ref:`the full list of lookup types "
"<field-lookups>` for details."
msgstr ""

# 3b2a1400ec9d44f885a09d0af711a245
#: ../../../../1.9/docs/releases/1.1.txt:409
msgid ""
"The ``{% for %}`` tag in Django's template language now accepts an optional "
"``{% empty %}`` clause, to be displayed when ``{% for %}`` is asked to loop "
"over an empty sequence. See :doc:`the list of built-in template tags "
"</ref/templates/builtins>` for examples of this."
msgstr ""

# cf185d4c9307430091de20bc7c73ba32
#: ../../../../1.9/docs/releases/1.1.txt:414
msgid ""
"The :djadmin:`dumpdata` management command now accepts individual model "
"names as arguments, allowing you to export the data just from particular "
"models."
msgstr ""

# c2a0d24eb2aa480a8889c3521ddf2a1f
#: ../../../../1.9/docs/releases/1.1.txt:418
msgid ""
"There's a new :tfilter:`safeseq` template filter which works just like "
":tfilter:`safe` for lists, marking each item in the list as safe."
msgstr ""

# d09b6179fc9c411fa78fe327ea69c474
#: ../../../../1.9/docs/releases/1.1.txt:421
msgid ""
":doc:`Cache backends </topics/cache>` now support ``incr()`` and ``decr()`` "
"commands to increment and decrement the value of a cache key. On cache "
"backends that support atomic increment/decrement -- most notably, the "
"memcached backend -- these operations will be atomic, and quite fast."
msgstr ""

# 443905fe1a1540ee9802fc8e03e3ed4e
#: ../../../../1.9/docs/releases/1.1.txt:427
msgid ""
"Django now can :doc:`easily delegate authentication to the Web server "
"</howto/auth-remote-user>` via a new authentication backend that supports "
"the standard ``REMOTE_USER`` environment variable used for this purpose."
msgstr ""

# 42c4665a465549158fda52c0d38d60b3
#: ../../../../1.9/docs/releases/1.1.txt:431
msgid ""
"There's a new :func:`django.shortcuts.redirect` function that makes it "
"easier to issue redirects given an object, a view name, or a URL."
msgstr ""

# a3cd92117e0045fcbbdd247a4f7b8365
#: ../../../../1.9/docs/releases/1.1.txt:434
msgid ""
"The ``postgresql_psycopg2`` backend now supports :ref:`native PostgreSQL "
"autocommit <postgresql-notes>`. This is an advanced, PostgreSQL-specific "
"feature, that can make certain read-heavy applications a good deal faster."
msgstr ""

# 70eb61a00a8f4e4ab49c0561b5f259af
#: ../../../../1.9/docs/releases/1.1.txt:440
msgid "What's next?"
msgstr "Et ensuite ?"

# b6e2cc4bfa814a569ec31a69d86ed285
#: ../../../../1.9/docs/releases/1.1.txt:442
msgid ""
"We'll take a short break, and then work on Django 1.2 will begin -- no rest "
"for the weary! If you'd like to help, discussion of Django development, "
"including progress toward the 1.2 release, takes place daily on the django-"
"developers mailing list:"
msgstr ""

# 52a4d315492547f79b0c4cd2cfbdc683
#: ../../../../1.9/docs/releases/1.1.txt:447
msgid "https://groups.google.com/group/django-developers"
msgstr ""

# 6e935d6be4034a15b19a9ca9a2a024f5
#: ../../../../1.9/docs/releases/1.1.txt:449
msgid ""
"... and in the ``#django-dev`` IRC channel on ``irc.freenode.net``. Feel "
"free to join the discussions!"
msgstr ""

# 55a8054a47404e5c84849fcc7fb1dddf
#: ../../../../1.9/docs/releases/1.1.txt:452
msgid ""
"Django's online documentation also includes pointers on how to contribute to"
" Django:"
msgstr ""

# 71032eeae96e48108d9e6afd4423b39f
#: ../../../../1.9/docs/releases/1.1.txt:455
msgid ":doc:`How to contribute to Django </internals/contributing/index>`"
msgstr ""

# 3507f56d33004c7185f61cbfe59b2946
#: ../../../../1.9/docs/releases/1.1.txt:457
msgid ""
"Contributions on any level -- developing code, writing documentation or "
"simply triaging tickets and helping to test proposed bugfixes -- are always "
"welcome and appreciated."
msgstr ""

# 9562638a6f0244639f35ce8a0944d404
#: ../../../../1.9/docs/releases/1.1.txt:461
msgid "And that's the way it is."
msgstr ""

# b9c3993eb1994c6ea0de5815d4dca27e
#: ../../../../1.9/docs/releases/1.1.2.txt:3
msgid "Django 1.1.2 release notes"
msgstr ""

# 1a433039482f4419a80557949901e908
#: ../../../../1.9/docs/releases/1.1.2.txt:5
msgid "Welcome to Django 1.1.2!"
msgstr ""

# 0e42446875f34f7b8136acf39f013afa
#: ../../../../1.9/docs/releases/1.1.2.txt:7
msgid ""
"This is the second \"bugfix\" release in the Django 1.1 series, improving "
"the stability and performance of the Django 1.1 codebase."
msgstr ""

# bff04d6afd2c4872a82a3c4e44b74a58
#: ../../../../1.9/docs/releases/1.1.2.txt:10
msgid ""
"Django 1.1.2 maintains backwards compatibility with Django 1.1.0, but "
"contain a number of fixes and other improvements. Django 1.1.2 is a "
"recommended upgrade for any development or deployment currently using or "
"targeting Django 1.1."
msgstr ""

# e58dc47f760f4a789e2a1eccfaefa502
# 930684f1d77045a8b74f6decdf7919ad
# f2f08af8ecb04a1f9737f40f3253dd4d
#: ../../../../1.9/docs/releases/1.1.2.txt:15
#: ../../../../1.9/docs/releases/1.1.3.txt:15
#: ../../../../1.9/docs/releases/1.1.4.txt:15
msgid ""
"For full details on the new features, backwards incompatibilities, and "
"deprecated features in the 1.1 branch, see the :doc:`/releases/1.1`."
msgstr ""

# 70ac9465005844d9b17c48cb81420529
#: ../../../../1.9/docs/releases/1.1.2.txt:19
msgid "Backwards-incompatible changes in 1.1.2"
msgstr ""

# f5384ee03096456191f36cfb615facae
# 2f79babb154543e786b95c12217ffef1
#: ../../../../1.9/docs/releases/1.1.2.txt:22
#: ../../../../1.9/docs/releases/1.2.txt:672
msgid "Test runner exit status code"
msgstr ""

# 57f84a30639d4f658fd29be3374c7712
#: ../../../../1.9/docs/releases/1.1.2.txt:24
msgid ""
"The exit status code of the test runners (``tests/runtests.py`` and ``python"
" manage.py test``) no longer represents the number of failed tests, since a "
"failure of 256 or more tests resulted in a wrong exit status code.  The exit"
" status code for the test runner is now 0 for success (no failing tests) and"
" 1 for any number of test failures.  If needed, the number of test failures "
"can be found at the end of the test runner's output."
msgstr ""

# 70ae1dbc32e94f71bebef2faca43e499
# d5db5db5f608467ca3f51aad2ef22d16
#: ../../../../1.9/docs/releases/1.1.2.txt:32
#: ../../../../1.9/docs/releases/1.2.txt:682
msgid "Cookie encoding"
msgstr ""

# 09307ece7c884ac181a4416afef6065e
#: ../../../../1.9/docs/releases/1.1.2.txt:34
msgid ""
"To fix bugs with cookies in Internet Explorer, Safari, and possibly other "
"browsers, our encoding of cookie values was changed so that the characters "
"comma and semi-colon are treated as non-safe characters, and are therefore "
"encoded as ``\\054`` and ``\\073`` respectively.  This could produce "
"backwards incompatibilities, especially if you are storing comma or semi-"
"colon in cookies and have JavaScript code that parses and manipulates cookie"
" values client-side."
msgstr ""

# 798459fb51c943bf8ce8b764b3e92cb2
# a119aa9390b14322b0114486f197ed36
# 1f64594c74954ab7a0e470c305245486
#: ../../../../1.9/docs/releases/1.1.2.txt:43
#: ../../../../1.9/docs/releases/1.2.2.txt:19
#: ../../../../1.9/docs/releases/1.2.4.txt:53
msgid "One new feature"
msgstr ""

# 78410840907446c180b3d8948a4a8f4f
#: ../../../../1.9/docs/releases/1.1.2.txt:45
msgid ""
"Ordinarily, a point release would not include new features, but in the case "
"of Django 1.1.2, we have made an exception to this rule. Django 1.2 (the "
"next major release of Django) will contain a feature that will improve "
"protection against Cross-Site Request Forgery (CSRF) attacks. This feature "
"requires the use of a new :ttag:`csrf_token` template tag in all forms that "
"Django renders."
msgstr ""

# 2558f236fad44a23bedc0ba49febe2cb
#: ../../../../1.9/docs/releases/1.1.2.txt:52
msgid ""
"To make it easier to support both 1.1.X and 1.2.X versions of Django with "
"the same templates, we have decided to introduce the :ttag:`csrf_token` "
"template tag to the 1.1.X branch. In the 1.1.X branch, :ttag:`csrf_token` "
"does nothing - it has no effect on templates or form processing. However, it"
" means that the same template will work with Django 1.2."
msgstr ""

# 7ec44273d0e246eca95b04ba96dc2981
#: ../../../../1.9/docs/releases/1.1.3.txt:3
msgid "Django 1.1.3 release notes"
msgstr ""

# 5376f49936364bc783a5a95900fca1cc
#: ../../../../1.9/docs/releases/1.1.3.txt:5
msgid "Welcome to Django 1.1.3!"
msgstr ""

# f9fee4c669c743b280ca8626a7347c50
#: ../../../../1.9/docs/releases/1.1.3.txt:7
msgid ""
"This is the third \"bugfix\" release in the Django 1.1 series, improving the"
" stability and performance of the Django 1.1 codebase."
msgstr ""

# b4f5767c24d549e6ba320a3852edfbc2
#: ../../../../1.9/docs/releases/1.1.3.txt:10
msgid ""
"With one exception, Django 1.1.3 maintains backwards compatibility with "
"Django 1.1.2. It also contains a number of fixes and other improvements. "
"Django 1.1.2 is a recommended upgrade for any development or deployment "
"currently using or targeting Django 1.1."
msgstr ""

# 38c9e1856161434d8c42dd580f72df25
# 230151f5d7234461864dae4ceae53cb0
# 94bdb1b22db541a3a6480813919d810f
# 29acc48cb5ba4d1ea3db8e9de1dbd828
# 97212924f1594274a76247b259772d99
# d9185b1528814ec484b71d80dfba2e05
#: ../../../../1.9/docs/releases/1.1.3.txt:19
#: ../../../../1.9/docs/releases/1.1.4.txt:19
#: ../../../../1.9/docs/releases/1.2.4.txt:19
#: ../../../../1.9/docs/releases/1.2.5.txt:19
#: ../../../../1.9/docs/releases/1.4.2.txt:40
#: ../../../../1.9/docs/releases/1.5.5.txt:36
msgid "Backwards incompatible changes"
msgstr ""

# e1d4647f7d164be5a20301cd964cfee7
# 3650c6d95a824f828fe4a24a6aa06f94
# 247cd03c3c8c49ae8381dcf3a8e802aa
#: ../../../../1.9/docs/releases/1.1.3.txt:22
#: ../../../../1.9/docs/releases/1.2.4.txt:22
#: ../../../../1.9/docs/releases/1.3.txt:350
msgid "Restricted filters in admin interface"
msgstr ""

# 3b6fe6a89a7440099b4d4dfb635ade04
# aa9e77c2bb664153bde90e963eb6a92b
#: ../../../../1.9/docs/releases/1.1.3.txt:24
#: ../../../../1.9/docs/releases/1.2.4.txt:24
msgid ""
"The Django administrative interface, django.contrib.admin, supports "
"filtering of displayed lists of objects by fields on the corresponding "
"models, including across database-level relationships. This is implemented "
"by passing lookup arguments in the querystring portion of the URL, and "
"options on the ModelAdmin class allow developers to specify particular "
"fields or relationships which will generate automatic links for filtering."
msgstr ""

# d2757a11bfcd4f8ca7bf138be31a154a
# 71d14fc8b2ea46bf9609cb878eaf9829
#: ../../../../1.9/docs/releases/1.1.3.txt:32
#: ../../../../1.9/docs/releases/1.2.4.txt:32
msgid ""
"One historically-undocumented and -unofficially-supported feature has been "
"the ability for a user with sufficient knowledge of a model's structure and "
"the format of these lookup arguments to invent useful new filters on the fly"
" by manipulating the querystring."
msgstr ""

# 3a28d72bac0944bfbd567eda10c1f31c
# 28cf046192ca409f8d8a847d118b549a
#: ../../../../1.9/docs/releases/1.1.3.txt:37
#: ../../../../1.9/docs/releases/1.2.4.txt:37
msgid ""
"However, it has been demonstrated that this can be abused to gain access to "
"information outside of an admin user's permissions; for example, an attacker"
" with access to the admin and sufficient knowledge of model structure and "
"relations could construct query strings which -- with repeated use of "
"regular-expression lookups supported by the Django database API -- expose "
"sensitive information such as users' password hashes."
msgstr ""

# e7decb97bf0649c88d1cf91cc5fe4454
# fe9e94d030e64ef0a04e73deb315942c
#: ../../../../1.9/docs/releases/1.1.3.txt:45
#: ../../../../1.9/docs/releases/1.2.4.txt:45
msgid ""
"To remedy this, django.contrib.admin will now validate that querystring "
"lookup arguments either specify only fields on the model being viewed, or "
"cross relations which have been explicitly whitelisted by the application "
"developer using the pre-existing mechanism mentioned above. This is "
"backwards-incompatible for any users relying on the prior ability to insert "
"arbitrary lookups."
msgstr ""

# 3857ccd371b34eaba00f459d26f1f116
#: ../../../../1.9/docs/releases/1.1.4.txt:3
msgid "Django 1.1.4 release notes"
msgstr ""

# 124b6d28379348f1961c42c8e5b6421f
#: ../../../../1.9/docs/releases/1.1.4.txt:5
msgid "Welcome to Django 1.1.4!"
msgstr ""

# 66d3e223a90e4b8e9809ce108c308b55
#: ../../../../1.9/docs/releases/1.1.4.txt:7
msgid ""
"This is the fourth \"bugfix\" release in the Django 1.1 series, improving "
"the stability and performance of the Django 1.1 codebase."
msgstr ""

# 0a7a2f26d3fa494b977b858fbee3c93f
#: ../../../../1.9/docs/releases/1.1.4.txt:10
msgid ""
"With one exception, Django 1.1.4 maintains backwards compatibility with "
"Django 1.1.3. It also contains a number of fixes and other improvements. "
"Django 1.1.4 is a recommended upgrade for any development or deployment "
"currently using or targeting Django 1.1."
msgstr ""

# 757a35f2282b4077a10962d9b707d521
# 3eb96a43e1584f02b22ac79622a36781
#: ../../../../1.9/docs/releases/1.1.4.txt:22
#: ../../../../1.9/docs/releases/1.2.5.txt:22
msgid "CSRF exception for AJAX requests"
msgstr ""

# 41f5a2ee1fd54d2dab3cf4f5ee826a90
# 5e83fb86daae4b9481c913132ba236c9
#: ../../../../1.9/docs/releases/1.1.4.txt:24
#: ../../../../1.9/docs/releases/1.2.5.txt:24
msgid ""
"Django includes a CSRF-protection mechanism, which makes use of a token "
"inserted into outgoing forms. Middleware then checks for the token's "
"presence on form submission, and validates it."
msgstr ""

# a40536d6740347a2a24e451593872859
# f13c8ce5138843b0affa3da795f24fee
#: ../../../../1.9/docs/releases/1.1.4.txt:28
#: ../../../../1.9/docs/releases/1.2.5.txt:28
msgid ""
"Prior to Django 1.2.5, our CSRF protection made an exception for AJAX "
"requests, on the following basis:"
msgstr ""

# d6afcb053a9b4bcca8bb4b1dc1861092
# 2c6802143b8e4b508b6853bcf9587da8
#: ../../../../1.9/docs/releases/1.1.4.txt:31
#: ../../../../1.9/docs/releases/1.2.5.txt:31
msgid ""
"Many AJAX toolkits add an X-Requested-With header when using XMLHttpRequest."
msgstr ""

# b38c1ac5bb5f43f989cc4105010af846
# ffae3873625347d6826719f692565805
#: ../../../../1.9/docs/releases/1.1.4.txt:34
#: ../../../../1.9/docs/releases/1.2.5.txt:34
msgid "Browsers have strict same-origin policies regarding XMLHttpRequest."
msgstr ""

# 53752ef4210d46fdb8ff4bf9626154f9
# d9059804422a45ea936bbe573a7d73ef
#: ../../../../1.9/docs/releases/1.1.4.txt:37
#: ../../../../1.9/docs/releases/1.2.5.txt:37
msgid ""
"In the context of a browser, the only way that a custom header of this "
"nature can be added is with XMLHttpRequest."
msgstr ""

# dac8a44058984ae5b418b66efb69148f
# c9d44466925942c29acc35ba3b5f97d4
#: ../../../../1.9/docs/releases/1.1.4.txt:40
#: ../../../../1.9/docs/releases/1.2.5.txt:40
msgid ""
"Therefore, for ease of use, we did not apply CSRF checks to requests that "
"appeared to be AJAX on the basis of the X-Requested-With header. The Ruby on"
" Rails web framework had a similar exemption."
msgstr ""

# 63760baf977644d38ace4906e1861c7f
# 29b10132d99b4719aa24800adb6c055f
#: ../../../../1.9/docs/releases/1.1.4.txt:44
#: ../../../../1.9/docs/releases/1.2.5.txt:44
msgid ""
"Recently, engineers at Google made members of the Ruby on Rails development "
"team aware of a combination of browser plugins and redirects which can allow"
" an attacker to provide custom HTTP headers on a request to any website. "
"This can allow a forged request to appear to be an AJAX request, thereby "
"defeating CSRF protection which trusts the same-origin nature of AJAX "
"requests."
msgstr ""

# fb6ed45c8e094b5d899c1a4a960749b9
# 06af4a97e517403f9de99401ee896c3c
#: ../../../../1.9/docs/releases/1.1.4.txt:51
#: ../../../../1.9/docs/releases/1.2.5.txt:51
msgid ""
"Michael Koziarski of the Rails team brought this to our attention, and we "
"were able to produce a proof-of-concept demonstrating the same vulnerability"
" in Django's CSRF handling."
msgstr ""

# d700554be7da4d769c0be7c10f280c9a
# 1c5469bc6ade4c13b6c86dc51e049b98
#: ../../../../1.9/docs/releases/1.1.4.txt:55
#: ../../../../1.9/docs/releases/1.2.5.txt:55
msgid ""
"To remedy this, Django will now apply full CSRF validation to all requests, "
"regardless of apparent AJAX origin. This is technically backwards-"
"incompatible, but the security risks have been judged to outweigh the "
"compatibility concerns in this case."
msgstr ""

# bf6483728a224ecd9e734efe6d812bb4
# b481b644e0204d0fabb5f134e46f8970
#: ../../../../1.9/docs/releases/1.1.4.txt:60
#: ../../../../1.9/docs/releases/1.2.5.txt:60
msgid ""
"Additionally, Django will now accept the CSRF token in the custom HTTP "
"header X-CSRFTOKEN, as well as in the form submission itself, for ease of "
"use with popular JavaScript toolkits which allow insertion of custom headers"
" into all AJAX requests."
msgstr ""

# f9ee2be7077847eea8a48fa718b4deda
# 1be6d616ffb64c3f94560434689bcc40
#: ../../../../1.9/docs/releases/1.1.4.txt:65
#: ../../../../1.9/docs/releases/1.2.5.txt:65
msgid ""
"Please see the :ref:`CSRF docs for example jQuery code <csrf-ajax>` that "
"demonstrates this technique, ensuring that you are looking at the "
"documentation for your version of Django, as the exact code necessary is "
"different for some older versions of Django."
msgstr ""

# 4b1effeb5a0a484ea8ad3f79f12189bc
#: ../../../../1.9/docs/releases/1.2.txt:3
msgid "Django 1.2 release notes"
msgstr ""

# 329d8817c59640d695b13f5247f02d92
#: ../../../../1.9/docs/releases/1.2.txt:5
msgid "*May 17, 2010.*"
msgstr ""

# e237b84e44d141b28302985e5cd34ee8
#: ../../../../1.9/docs/releases/1.2.txt:7
msgid "Welcome to Django 1.2!"
msgstr ""

# 899b2247f12846b284e215c3ef897265
#: ../../../../1.9/docs/releases/1.2.txt:9
msgid ""
"Nearly a year in the making, Django 1.2 packs an impressive list of `new "
"features`_ and lots of bug fixes. These release notes cover the new "
"features, as well as important changes you'll want to be aware of when "
"upgrading from Django 1.1 or older versions."
msgstr ""

# 1419133a0aee4d66b55e670e694a4db5
# 7c9edc20a7ec4ef4a7b664d2ec22c954
# 78a4b397516f4449b37f8ed6703e0889
# 02e78a8a06984237afb3441b6398f753
#: ../../../../1.9/docs/releases/1.2.txt:17
#: ../../../../1.9/docs/releases/1.3.txt:16
#: ../../../../1.9/docs/releases/1.4.txt:21
#: ../../../../1.9/docs/releases/1.5.txt:21
msgid "Overview"
msgstr "Aperçu"

# a1457d260bf84eafafca7b6a9123c900
#: ../../../../1.9/docs/releases/1.2.txt:19
msgid ""
"Django 1.2 introduces several large, important new features, including:"
msgstr ""

# 33fbcc7a1d784960b95db4387659d39b
#: ../../../../1.9/docs/releases/1.2.txt:21
msgid ""
"Support for `multiple database connections`_ in a single Django instance."
msgstr ""

# 54f236008e09476ea8794be9be354b6a
#: ../../../../1.9/docs/releases/1.2.txt:23
msgid "`Model validation`_ inspired by Django's form validation."
msgstr ""

# 45c0ca904a9a45bcaa1850fdff48b0c7
#: ../../../../1.9/docs/releases/1.2.txt:25
msgid ""
"Vastly `improved protection against Cross-Site Request Forgery`_ (CSRF)."
msgstr ""

# 5d0851ce3fff4c4084f8584f6d9fbe35
#: ../../../../1.9/docs/releases/1.2.txt:27
msgid ""
"A new `user \"messages\" framework`_ with support for cookie- and session-"
"based message for both anonymous and authenticated users."
msgstr ""

# 52f0bef28cdc47f69c36d47c174745e1
#: ../../../../1.9/docs/releases/1.2.txt:30
msgid ""
"Hooks for `object-level permissions`_, `permissions for anonymous users`_, "
"and `more flexible username requirements`_."
msgstr ""

# e945ee0f9dd04ceaae6287f0e190c182
#: ../../../../1.9/docs/releases/1.2.txt:33
msgid "Customization of email sending via `email backends`_."
msgstr ""

# 4e4aee5999ca45e995a9b79479c5b167
#: ../../../../1.9/docs/releases/1.2.txt:35
msgid ""
"New :ref:`\"smart\" if template tag <new-in-1.2-smart-if>` which supports "
"comparison operators."
msgstr ""

# 39e0d180e2aa4db7b8ec400bb614d5e1
#: ../../../../1.9/docs/releases/1.2.txt:43
msgid ""
"These are just the highlights; full details and a complete list of features "
"`may be found below`_."
msgstr ""

# 2df06be1cda54bf4bbc521ae284b699e
#: ../../../../1.9/docs/releases/1.2.txt:50
msgid ""
"`Django Advent`_ covered the release of Django 1.2 with a series of articles"
" and tutorials that cover some of the new features in depth."
msgstr ""

# cc75c086319a47ccbf3c5aa542903e9b
#: ../../../../1.9/docs/releases/1.2.txt:55
msgid ""
"Wherever possible these features have been introduced in a backwards-"
"compatible manner per :doc:`our API stability policy </misc/api-stability>` "
"policy."
msgstr ""

# 4e41a68ae8bd49d3a630c3e6189822de
#: ../../../../1.9/docs/releases/1.2.txt:58
msgid ""
"However, a handful of features *have* changed in ways that, for some users, "
"will be backwards-incompatible. The big changes are:"
msgstr ""

# 4f91f57ea5354e3686d9459412f57ee0
#: ../../../../1.9/docs/releases/1.2.txt:61
msgid "Support for Python 2.3 has been dropped. See the full notes below."
msgstr ""

# 1b6b826c192441b2b3fe9b765295141b
#: ../../../../1.9/docs/releases/1.2.txt:64
msgid ""
"The new CSRF protection framework is not backwards-compatible with the old "
"system. Users of the old system will not be affected until the old system is"
" removed in Django 1.4."
msgstr ""

# d18832e6c830496aae98b43298333e03
#: ../../../../1.9/docs/releases/1.2.txt:68
msgid ""
"However, upgrading to the new CSRF protection framework requires a few "
"important backwards-incompatible changes, detailed in `CSRF Protection`_, "
"below."
msgstr ""

# 41dfef5e389b4b0b95da2fe7f4de3d58
#: ../../../../1.9/docs/releases/1.2.txt:72
msgid ""
"Authors of custom :class:`~django.db.models.Field` subclasses should be "
"aware that a number of methods have had a change in prototype, detailed "
"under `get_db_prep_*() methods on Field`_, below."
msgstr ""

# ca75050861754cd4a8f94551f778491e
#: ../../../../1.9/docs/releases/1.2.txt:76
msgid ""
"The internals of template tags have changed somewhat; authors of custom "
"template tags that need to store state (e.g. custom control flow tags) "
"should ensure that their code follows the new rules for `stateful template "
"tags`_"
msgstr ""

# 8666615c7fc94a00b1f1fd78b901ced0
#: ../../../../1.9/docs/releases/1.2.txt:81
msgid ""
"The :func:`~django.contrib.auth.decorators.user_passes_test`, "
":func:`~django.contrib.auth.decorators.login_required`, and "
":func:`~django.contrib.auth.decorators.permission_required`, decorators from"
" :mod:`django.contrib.auth` only apply to functions and no longer work on "
"methods. There's a simple one-line fix `detailed below`_."
msgstr ""

# 6f53739d2bc64f07ad068d9a49b0a65d
#: ../../../../1.9/docs/releases/1.2.txt:89
msgid ""
"Again, these are just the big features that will affect the most users. "
"Users upgrading from previous versions of Django are heavily encouraged to "
"consult the complete list of :ref:`backwards-incompatible changes "
"<backwards-incompatible-changes-1.2>` and the list of :ref:`deprecated "
"features <deprecated-features-1.2>`."
msgstr ""

# 37025d44c9a44bbabadcb45a9e6adabe
# 4557b5099f00460baba8a0b2fe5acb53
# be8933f5c5344c7b9e647fc0e3ba61d9
# a9c5e45a0b2745cb8deb421e60ef7299
# ad24163a9a114be498af88e7243742db
# 4078f13f6bb94caea7149199a692c160
# 69566cfea2cc41a281972693a49b4373
# 3ce344e35b4f45d59cbf563bff801f1e
# 32dc82d902ef4d1db2e3f82232118db7
#: ../../../../1.9/docs/releases/1.2.txt:96
#: ../../../../1.9/docs/releases/1.3.txt:54
#: ../../../../1.9/docs/releases/1.4.txt:63
#: ../../../../1.9/docs/releases/1.4.10.txt:10
#: ../../../../1.9/docs/releases/1.5.txt:70
#: ../../../../1.9/docs/releases/1.6.txt:38
#: ../../../../1.9/docs/releases/1.7.txt:21
#: ../../../../1.9/docs/releases/1.8.txt:26
#: ../../../../1.9/docs/releases/1.9.txt:21
msgid "Python compatibility"
msgstr "Compatibilité Python"

# 931d843679e94f8d938bf5d76fd50540
#: ../../../../1.9/docs/releases/1.2.txt:98
msgid ""
"While not a new feature, it's important to note that Django 1.2 introduces "
"the first shift in our Python compatibility policy since Django's initial "
"public debut. Previous Django releases were tested and supported on 2.x "
"Python versions from 2.3 up; Django 1.2, however, drops official support for"
" Python 2.3. As such, the minimum Python version required for Django is now "
"2.4, and Django is tested and supported on Python 2.4, 2.5 and 2.6, and will"
" be supported on the as-yet-unreleased Python 2.7."
msgstr ""

# 015788b3736d4e50b53088e6d356aeb7
#: ../../../../1.9/docs/releases/1.2.txt:107
msgid ""
"This change should affect only a small number of Django users, as most "
"operating-system vendors today are shipping Python 2.4 or newer as their "
"default version. If you're still using Python 2.3, however, you'll need to "
"stick to Django 1.1 until you can upgrade; per :doc:`our support policy "
"</internals/release-process>`, Django 1.1 will continue to receive security "
"support until the release of Django 1.3."
msgstr ""

# 3b8f2e360623445b8f1e53a98ac146a3
#: ../../../../1.9/docs/releases/1.2.txt:114
msgid ""
"A roadmap for Django's overall 2.x Python support, and eventual transition "
"to Python 3.x, is currently being developed, and will be announced prior to "
"the release of Django 1.3."
msgstr ""

# bdafdaa38d58491aa23bc5aaed3840b3
#: ../../../../1.9/docs/releases/1.2.txt:119
msgid "What's new in Django 1.2"
msgstr ""

# a0312f5af80a4406b35341e37a6dabe8
#: ../../../../1.9/docs/releases/1.2.txt:122
msgid "Support for multiple databases"
msgstr ""

# 2235891660c04ee6a8a06a31df5793dd
#: ../../../../1.9/docs/releases/1.2.txt:124
msgid ""
"Django 1.2 adds the ability to use :doc:`more than one database </topics/db"
"/multi-db>` in your Django project. Queries can be issued at a specific "
"database with the ``using()`` method on ``QuerySet`` objects. Individual "
"objects can be saved to a specific database by providing a ``using`` "
"argument when you call ``save()``."
msgstr ""

# 50abd40fda964562b8b5a60de3a3f006
#: ../../../../1.9/docs/releases/1.2.txt:131
msgid "Model validation"
msgstr ""

# a04028f5f2144cb4994cd464966f30da
#: ../../../../1.9/docs/releases/1.2.txt:133
msgid ""
"Model instances now have support for :ref:`validating their own data "
"<validating-objects>`, and both model and form fields now accept "
"configurable lists of :doc:`validators </ref/validators>` specifying "
"reusable, encapsulated validation behavior. Note, however, that validation "
"must still be performed explicitly. Simply invoking a model instance's "
"``save()`` method will not perform any validation of the instance's data."
msgstr ""

# 6b0963ea64844ddba38d4be002cb60b4
#: ../../../../1.9/docs/releases/1.2.txt:141
msgid "Improved CSRF protection"
msgstr ""

# 3fe780a0296b4647aaaed1535a15f544
#: ../../../../1.9/docs/releases/1.2.txt:143
msgid ""
"Django now has much improved protection against :doc:`Cross-Site Request "
"Forgery (CSRF) attacks</ref/csrf>`. This type of attack occurs when a "
"malicious website contains a link, a form button or some JavaScript that is "
"intended to perform some action on your website, using the credentials of a "
"logged-in user who visits the malicious site in their browser. A related "
"type of attack, \"login CSRF,\" where an attacking site tricks a user's "
"browser into logging into a site with someone else's credentials, is also "
"covered."
msgstr ""

# 8953107134bf49239b3d10900c50b492
#: ../../../../1.9/docs/releases/1.2.txt:152
msgid "Messages framework"
msgstr ""

# b5a4160267f64e2f914396d3fef18b24
#: ../../../../1.9/docs/releases/1.2.txt:154
msgid ""
"Django now includes a robust and configurable :doc:`messages framework "
"</ref/contrib/messages>` with built-in support for cookie- and session-based"
" messaging, for both anonymous and authenticated clients. The messages "
"framework replaces the deprecated user message API and allows you to "
"temporarily store messages in one request and retrieve them for display in a"
" subsequent request (usually the next one)."
msgstr ""

# 7428574b8aad435e80bcbf9492bf5077
#: ../../../../1.9/docs/releases/1.2.txt:162
msgid "Object-level permissions"
msgstr ""

# 08559941c74f4159991c5f89ef535aaf
#: ../../../../1.9/docs/releases/1.2.txt:164
msgid ""
"A foundation for specifying permissions at the per-object level has been "
"added. Although there is no implementation of this in core, a custom "
"authentication backend can provide this implementation and it will be used "
"by :class:`django.contrib.auth.models.User`. See the :doc:`authentication "
"docs </topics/auth/index>` for more information."
msgstr ""

# d13fecdcaf264792bd74128e8eaa7014
#: ../../../../1.9/docs/releases/1.2.txt:171
msgid "Permissions for anonymous users"
msgstr ""

# 8f4c24afd122471cb9e75072f6947e34
#: ../../../../1.9/docs/releases/1.2.txt:173
msgid ""
"If you provide a custom auth backend with ``supports_anonymous_user`` set to"
" ``True``, AnonymousUser will check the backend for permissions, just like "
"User already did.  This is useful for centralizing permission handling - "
"apps can always delegate the question of whether something is allowed or not"
" to the authorization/authentication backend. See the :doc:`authentication "
"docs </topics/auth/index>` for more details."
msgstr ""

# 006a6158528e4fa48bbda73ee381e6d2
#: ../../../../1.9/docs/releases/1.2.txt:181
msgid "Relaxed requirements for usernames"
msgstr ""

# 0aa837daa93d4d4ba1e109600eca8584
#: ../../../../1.9/docs/releases/1.2.txt:183
msgid ""
"The built-in :class:`~django.contrib.auth.models.User` model's "
":attr:`~django.contrib.auth.models.User.username` field now allows a wider "
"range of characters, including ``@``, ``+``, ``.`` and ``-`` characters."
msgstr ""

# e198e5428d4c41cd890aa57632443695
#: ../../../../1.9/docs/releases/1.2.txt:188
msgid "Email backends"
msgstr "Moteurs de messagerie"

# f616f76092f34d719d501b4561507e53
#: ../../../../1.9/docs/releases/1.2.txt:190
msgid ""
"You can now :ref:`configure the way that Django sends email <topic-email-"
"backends>`. Instead of using SMTP to send all email, you can now choose a "
"configurable email backend to send messages. If your hosting provider uses a"
" sandbox or some other non-SMTP technique for sending mail, you can now "
"construct an email backend that will allow Django's standard :doc:`mail "
"sending methods</topics/email>` to use those facilities."
msgstr ""

# da80b98755f940e082690e6cbacc6baf
#: ../../../../1.9/docs/releases/1.2.txt:198
msgid ""
"This also makes it easier to debug mail sending. Django ships with backend "
"implementations that allow you to send email to a :ref:`file<topic-email-"
"file-backend>`, to the :ref:`console<topic-email-console-backend>`, or to "
":ref:`memory<topic-email-memory-backend>`. You can even configure all email "
"to be :ref:`thrown away<topic-email-dummy-backend>`."
msgstr ""

# 0f45c1f37719468a8415390b2ed3d47e
#: ../../../../1.9/docs/releases/1.2.txt:208
msgid "\"Smart\" :ttag:`if` tag"
msgstr ""

# a1c90524eba74328909590d7f0dc85cc
#: ../../../../1.9/docs/releases/1.2.txt:210
msgid ""
"The :ttag:`if` tag has been upgraded to be much more powerful. First, we've "
"added support for comparison operators. No longer will you have to type:"
msgstr ""

# c0f9de97526e480b8d7e2e71d223f235
#: ../../../../1.9/docs/releases/1.2.txt:219
msgid "You can now do this:"
msgstr ""

# e53bb6d7e37243faa57dbe64270a1c08
#: ../../../../1.9/docs/releases/1.2.txt:227
msgid ""
"There's really no reason to use ``{% ifequal %}`` or ``{% ifnotequal %}`` "
"anymore, unless you're the nostalgic type."
msgstr ""

# 68b41c69dd7c4024ba0cdffe28cbf175
#: ../../../../1.9/docs/releases/1.2.txt:230
msgid ""
"The operators supported are ``==``, ``!=``, ``<``, ``>``, ``<=``, ``>=``, "
"``in`` and ``not in``, all of which work like the Python operators, in "
"addition to ``and``, ``or`` and ``not``, which were already supported."
msgstr ""

# 0b1b303eaa55491e9c37980da0e83b96
#: ../../../../1.9/docs/releases/1.2.txt:234
msgid "Also, filters may now be used in the ``if`` expression. For example:"
msgstr ""

# 92b4f10df4614187bbe7bca586ecf60a
#: ../../../../1.9/docs/releases/1.2.txt:245
msgid "Template caching"
msgstr ""

# 7247b13816ec4109800db3c08c13f974
#: ../../../../1.9/docs/releases/1.2.txt:247
msgid ""
"In previous versions of Django, every time you rendered a template, it would"
" be reloaded from disk. In Django 1.2, you can use a :ref:`cached template "
"loader <template-loaders>` to load templates once, then cache the result for"
" every subsequent render. This can lead to a significant performance "
"improvement if your templates are broken into lots of smaller subtemplates "
"(using the ``{% extends %}`` or ``{% include %}`` tags)."
msgstr ""

# 271d005abed74aa5ac6a375df1f8e65e
#: ../../../../1.9/docs/releases/1.2.txt:255
msgid ""
"As a side effect, it is now much easier to support non-Django template "
"languages."
msgstr ""

# 591f15712fb9498a9776c788ff33dac4
#: ../../../../1.9/docs/releases/1.2.txt:259
msgid "Class-based template loaders"
msgstr ""

# 4eac7b1680054746bf2e0049df11e31f
#: ../../../../1.9/docs/releases/1.2.txt:261
msgid ""
"As part of the changes made to introduce `Template caching`_  and following "
"a general trend in Django, the template loaders API has been modified to use"
" template loading mechanisms that are encapsulated in Python classes as "
"opposed to functions, the only method available until Django 1.1."
msgstr ""

# e872a6926e8d45ffaafdd03ee57d5ec6
#: ../../../../1.9/docs/releases/1.2.txt:266
msgid ""
"All the template loaders :ref:`shipped with Django <template-loaders>` have "
"been ported to the new API but they still implement the function-based API "
"and the template core machinery still accepts function-based loaders "
"(builtin or third party) so there is no immediate need to modify your "
"``TEMPLATE_LOADERS`` setting in existing projects, things will keep working "
"if you leave it untouched up to and including the Django 1.3 release."
msgstr ""

# 37c51cd7e47e43369a6a5703e9c30048
#: ../../../../1.9/docs/releases/1.2.txt:273
msgid ""
"If you have developed your own custom template loaders we suggest to "
"consider porting them to a class-based implementation because the code for "
"backwards compatibility with function-based loaders starts its deprecation "
"process in Django 1.2 and will be removed in Django 1.4.  There is a "
"description of the API these loader classes must implement in the template "
"API reference and you can also examine the source code of the loaders "
"shipped with Django."
msgstr ""

# 95af87cfdacc4004944a114cd3c77c70
#: ../../../../1.9/docs/releases/1.2.txt:281
msgid "Natural keys in fixtures"
msgstr ""

# 3f65a3cbccd04ff7b20c407468e4fe2a
#: ../../../../1.9/docs/releases/1.2.txt:283
msgid ""
"Fixtures can now refer to remote objects using :ref:`topics-serialization-"
"natural-keys`. This lookup scheme is an alternative to the normal primary-"
"key based object references in a fixture, improving readability and "
"resolving problems referring to objects whose primary key value may not be "
"predictable or known."
msgstr ""

# 8ae945a37d1c47b58fcf37d94789d1e6
#: ../../../../1.9/docs/releases/1.2.txt:290
msgid "Fast failure for tests"
msgstr ""

# ef38e8066b804647989bc10dc614dc88
#: ../../../../1.9/docs/releases/1.2.txt:292
msgid ""
"Both the :djadmin:`test` subcommand of ``django-admin.py`` and the "
"``runtests.py`` script used to run Django's own test suite now support a "
"``--failfast`` option. When specified, this option causes the test runner to"
" exit after encountering a failure instead of continuing with the test run. "
"In addition, the handling of ``Ctrl-C`` during a test run has been improved "
"to trigger a graceful exit from the test run that reports details of the "
"tests that were run before the interruption."
msgstr ""

# c19a0d924ffd48ec9495df7ebb35a71a
#: ../../../../1.9/docs/releases/1.2.txt:301
msgid "``BigIntegerField``"
msgstr "``BigIntegerField``"

# ff64156a15df4011b7f46097c0ceddb3
#: ../../../../1.9/docs/releases/1.2.txt:303
msgid ""
"Models can now use a 64-bit :class:`~django.db.models.BigIntegerField` type."
msgstr ""

# d62d1864d04d419285087c41e423e72c
#: ../../../../1.9/docs/releases/1.2.txt:306
msgid "Improved localization"
msgstr ""

# 506af26f87734985bf5483ba9311ef89
#: ../../../../1.9/docs/releases/1.2.txt:308
msgid ""
"Django's :doc:`internationalization framework </topics/i18n/index>` has been"
" expanded with locale-aware formatting and form processing. That means, if "
"enabled, dates and numbers on templates will be displayed using the format "
"specified for the current locale. Django will also use localized formats "
"when parsing data in forms. See :ref:`Format localization <format-"
"localization>` for more details."
msgstr ""

# 19f7525bdd7e42478574f6d45f5667ca
#: ../../../../1.9/docs/releases/1.2.txt:315
msgid "``readonly_fields`` in ``ModelAdmin``"
msgstr ""

# 0065c3234b3146c490fc64b8e0450668
#: ../../../../1.9/docs/releases/1.2.txt:317
msgid ""
":attr:`django.contrib.admin.ModelAdmin.readonly_fields` has been added to "
"enable non-editable fields in add/change pages for models and inlines. Field"
" and calculated values can be displayed alongside editable fields."
msgstr ""

# 3c7a393fdda64f3d86f39801087586e9
#: ../../../../1.9/docs/releases/1.2.txt:322
msgid "Customizable syntax highlighting"
msgstr ""

# 1a5a86bf5f3a43bba6fec24b92df307b
#: ../../../../1.9/docs/releases/1.2.txt:324
msgid ""
"You can now use a ``DJANGO_COLORS`` environment variable to modify or "
"disable the colors used by ``django-admin.py`` to provide :ref:`syntax "
"highlighting <syntax-coloring>`."
msgstr ""

# 7623a0f25c864d159d256d120450419b
#: ../../../../1.9/docs/releases/1.2.txt:329
msgid "Syndication feeds as views"
msgstr ""

# 5ad1b9a2e9b84170bbf230ea974d596b
#: ../../../../1.9/docs/releases/1.2.txt:331
msgid ""
":doc:`Syndication feeds </ref/contrib/syndication>` can now be used directly"
" as views in your :doc:`URLconf </topics/http/urls>`. This means that you "
"can maintain complete control over the URL structure of your feeds. Like any"
" other view, feeds views are passed a ``request`` object, so you can do "
"anything you would normally do with a view, like user based access control, "
"or making a feed a named URL."
msgstr ""

# d18652ddadc346f199a83442bba242c5
#: ../../../../1.9/docs/releases/1.2.txt:341
msgid ""
"The most significant new feature for :doc:`GeoDjango "
"</ref/contrib/gis/index>` in 1.2 is support for multiple spatial databases."
"  As a result, the following :ref:`spatial database backends <spatial-"
"backends>` are now included:"
msgstr ""

# a9462a24dc154b86b043b25a3610db0d
#: ../../../../1.9/docs/releases/1.2.txt:346
msgid "``django.contrib.gis.db.backends.postgis``"
msgstr "``django.contrib.gis.db.backends.postgis``"

# 43f37d04358b45f18c567d2eb9a6731a
#: ../../../../1.9/docs/releases/1.2.txt:347
msgid "``django.contrib.gis.db.backends.mysql``"
msgstr "``django.contrib.gis.db.backends.mysql``"

# 610905f10e6c4da2b189c67ce3ef6d9c
#: ../../../../1.9/docs/releases/1.2.txt:348
msgid "``django.contrib.gis.db.backends.oracle``"
msgstr "``django.contrib.gis.db.backends.oracle``"

# 751fc76595824e2c93df39e57f1d810e
#: ../../../../1.9/docs/releases/1.2.txt:349
msgid "``django.contrib.gis.db.backends.spatialite``"
msgstr "``django.contrib.gis.db.backends.spatialite``"

# 6548e419003f4241b6a184bcf9c9de08
#: ../../../../1.9/docs/releases/1.2.txt:351
msgid ""
"GeoDjango now supports the rich capabilities added in the `PostGIS 1.5 "
"release <http://postgis.net/docs/manual-1.5/>`_. New features include "
"support for the :ref:`geography type <geography-type>` and enabling of "
":ref:`distance queries <distance-queries>` with non-point geometries on "
"geographic coordinate systems."
msgstr ""

# 978d2b5c20554773b3586a684f92afad
#: ../../../../1.9/docs/releases/1.2.txt:357
msgid ""
"Support for 3D geometry fields was added, and may be enabled by setting the "
":attr:`~django.contrib.gis.db.models.GeometryField.dim` keyword to 3 in your"
" :class:`~django.contrib.gis.db.models.GeometryField`. The "
":class:`~django.contrib.gis.db.models.Extent3D` aggregate and "
":meth:`~django.contrib.gis.db.models.GeoQuerySet.extent3d` ``GeoQuerySet`` "
"method were added as a part of this feature."
msgstr ""

# 0795012096254f20b1d15a33d883e1e2
#: ../../../../1.9/docs/releases/1.2.txt:364
msgid ""
"The following :class:`~django.contrib.gis.db.models.GeoQuerySet` methods are"
" new in 1.2:"
msgstr ""

# 3945396e7bf94427885548a65b2c27fa
#: ../../../../1.9/docs/releases/1.2.txt:367
msgid ":meth:`~django.contrib.gis.db.models.GeoQuerySet.force_rhr`"
msgstr ""

# dc3ea08f5d4a4d38ae48b7ac29189e99
#: ../../../../1.9/docs/releases/1.2.txt:368
msgid ":meth:`~django.contrib.gis.db.models.GeoQuerySet.reverse_geom`"
msgstr ""

# 086b6fbefca74a50826eb35b92f0510d
#: ../../../../1.9/docs/releases/1.2.txt:369
msgid ":meth:`~django.contrib.gis.db.models.GeoQuerySet.geohash`"
msgstr ""

# b03c8579596f45c085cd59eb32cfd974
#: ../../../../1.9/docs/releases/1.2.txt:371
msgid ""
"The GEOS interface was updated to use thread-safe C library functions when "
"available on the platform."
msgstr ""

# d619f4727b054ecdba00fe86bb01e077
#: ../../../../1.9/docs/releases/1.2.txt:374
msgid ""
"The GDAL interface now allows the user to set a "
":attr:`~django.contrib.gis.gdal.Layer.spatial_filter` on the features "
"returned when iterating over a :class:`~django.contrib.gis.gdal.Layer`."
msgstr ""

# fea54fdd630c41d38b246d5f1b8e6156
#: ../../../../1.9/docs/releases/1.2.txt:378
msgid ""
"Finally, :doc:`GeoDjango's documentation </ref/contrib/gis/index>` is now "
"included with Django's and is no longer hosted separately at `geodjango.org "
"<http://geodjango.org/>`_."
msgstr ""

# 006ac18d710540029ea7b37450ee5a76
#: ../../../../1.9/docs/releases/1.2.txt:385
msgid "JavaScript-assisted handling of inline related objects in the admin"
msgstr ""

# 6297590e093a41ac969566866ddd2ed5
#: ../../../../1.9/docs/releases/1.2.txt:387
msgid ""
"If a user has JavaScript enabled in their browser, the interface for inline "
"objects in the admin now allows inline objects to be dynamically added and "
"removed. Users without JavaScript-enabled browsers will see no change in the"
" behavior of inline objects."
msgstr ""

# f1a0ae226c4a4405ab8d926a7cab76c7
#: ../../../../1.9/docs/releases/1.2.txt:393
msgid "New ``now`` template tag format specifier characters: ``c`` and ``u``"
msgstr ""

# dbba786840fe45e784f6dc820131130f
#: ../../../../1.9/docs/releases/1.2.txt:395
msgid ""
"The argument to the :ttag:`now` has gained two new format characters: ``c`` "
"to specify that a datetime value should be formatted in ISO 8601 format, and"
" ``u`` that allows output of the microseconds part of a datetime or time "
"value."
msgstr ""

# 0177ffcc4ff0497d94bd6d2f83aacf18
#: ../../../../1.9/docs/releases/1.2.txt:400
msgid ""
"These are also available in others parts like the :tfilter:`date` and "
":tfilter:`time` template filters, the ``humanize`` template tag library and "
"the new `format localization`_ framework."
msgstr ""

# 52a7ca6fa7e94815b6549f9386f483a7
#: ../../../../1.9/docs/releases/1.2.txt:409
msgid "Backwards-incompatible changes in 1.2"
msgstr ""

# 641fa5a112f44553aafe67db9b03fa0b
#: ../../../../1.9/docs/releases/1.2.txt:411
msgid ""
"Wherever possible the new features above have been introduced in a "
"backwards-compatible manner per :doc:`our API stability policy </misc/api-"
"stability>` policy. This means that practically all existing code which "
"worked with Django 1.1 will continue to work with Django 1.2; such code "
"will, however, begin issuing warnings (see below for details)."
msgstr ""

# f1516a41711a4bd8a0013e6158e63f10
#: ../../../../1.9/docs/releases/1.2.txt:418
msgid ""
"However, a handful of features *have* changed in ways that, for some users, "
"will be immediately backwards-incompatible. Those changes are detailed "
"below."
msgstr ""

# db859b21d0a54485afe2f3c013c865c6
#: ../../../../1.9/docs/releases/1.2.txt:423
msgid "CSRF Protection"
msgstr ""

# 079b1569d4984d5a9943ef2116ed064d
#: ../../../../1.9/docs/releases/1.2.txt:425
msgid ""
"We've made large changes to the way CSRF protection works, detailed in "
":doc:`the CSRF documentation </ref/csrf>`. Here are the major changes you "
"should be aware of:"
msgstr ""

# 0178e54e5af84e3cbff5c53b27fde1ec
#: ../../../../1.9/docs/releases/1.2.txt:429
msgid ""
"``CsrfResponseMiddleware`` and ``CsrfMiddleware`` have been deprecated and "
"will be removed completely in Django 1.4, in favor of a template tag that "
"should be inserted into forms."
msgstr ""

# 9c052d91b808452aa924ae405fc05464
#: ../../../../1.9/docs/releases/1.2.txt:433
msgid ""
"All contrib apps use a ``csrf_protect`` decorator to protect the view. This "
"requires the use of the ``csrf_token`` template tag in the template. If you "
"have used custom templates for contrib views, you MUST READ THE UPGRADE "
"INSTRUCTIONS to fix those templates."
msgstr ""

# e7be6096da25455d8c0f0f8ab88e4de9
# 0a76fc8494f94333b24c8d1bc1e55afb
#: ../../../../1.9/docs/releases/1.2.txt:438
#: ../../../../1.9/docs/releases/1.2.txt:867
msgid "Documentation removed"
msgstr ""

# 29dc76600d3c4f30b37e5fe5e2b904b5
# 9718cd45e939412e87641b43834a81f7
#: ../../../../1.9/docs/releases/1.2.txt:440
#: ../../../../1.9/docs/releases/1.2.txt:869
msgid ""
"The upgrade notes have been removed in current Django docs. Please refer to "
"the docs for Django 1.3 or older to find these instructions."
msgstr ""

# a344c553ac6f466d894311c7a10ed45c
#: ../../../../1.9/docs/releases/1.2.txt:443
msgid ""
"``CsrfViewMiddleware`` is included in :setting:`MIDDLEWARE_CLASSES` by "
"default. This turns on CSRF protection by default, so views that accept POST"
" requests need to be written to work with the middleware. Instructions on "
"how to do this are found in the CSRF docs."
msgstr ""

# 37868672d6224adc97530d4ffd16f580
#: ../../../../1.9/docs/releases/1.2.txt:448
msgid ""
"All of the CSRF has moved from contrib to core (with backwards compatible "
"imports in the old locations, which are deprecated and will cease to be "
"supported in Django 1.4)."
msgstr ""

# 67c88af622964e9490a4c46bd0ed02ba
#: ../../../../1.9/docs/releases/1.2.txt:453
msgid "``get_db_prep_*()`` methods on ``Field``"
msgstr ""

# d8925cbd1d92470f8dafb89a168c92a3
#: ../../../../1.9/docs/releases/1.2.txt:455
msgid ""
"Prior to Django 1.2, a custom ``Field`` had the option of defining several "
"functions to support conversion of Python values into database-compatible "
"values. A custom field might look something like::"
msgstr ""

# 304da463a62144f392569c91b835dfa6
#: ../../../../1.9/docs/releases/1.2.txt:473
msgid ""
"In 1.2, these three methods have undergone a change in prototype, and two "
"extra methods have been introduced::"
msgstr ""

# f7bb4bb990ac4dcc994f2dd83c972425
#: ../../../../1.9/docs/releases/1.2.txt:497
msgid ""
"These changes are required to support multiple databases -- ``db_type`` and "
"``get_db_prep_*`` can no longer make any assumptions regarding the database "
"for which it is preparing. The ``connection`` argument now provides the "
"preparation methods with the specific connection for which the value is "
"being prepared."
msgstr ""

# 9dffb83e01294c5d978a72141a5938cd
#: ../../../../1.9/docs/releases/1.2.txt:503
msgid ""
"The two new methods exist to differentiate general data-preparation "
"requirements from requirements that are database-specific. The ``prepared`` "
"argument is used to indicate to the database-preparation methods whether "
"generic value preparation has been performed. If an unprepared (i.e., "
"``prepared=False``) value is provided to the ``get_db_prep_*()`` calls, they"
" should invoke the corresponding ``get_prep_*()`` calls to perform generic "
"data preparation."
msgstr ""

# dd6506ef7f9d4e549b8de8f07b655a7f
#: ../../../../1.9/docs/releases/1.2.txt:511
msgid ""
"We've provided conversion functions that will transparently convert "
"functions adhering to the old prototype into functions compatible with the "
"new prototype. However, these conversion functions will be removed in Django"
" 1.4, so you should upgrade your ``Field`` definitions to use the new "
"prototype as soon as possible."
msgstr ""

# bafd2c0fa6cb4294a851cf4db789b653
#: ../../../../1.9/docs/releases/1.2.txt:517
msgid ""
"If your ``get_db_prep_*()`` methods made no use of the database connection, "
"you should be able to upgrade by renaming ``get_db_prep_value()`` to "
"``get_prep_value()`` and ``get_db_prep_lookup()`` to ``get_prep_lookup()``. "
"If you require database specific conversions, then you will need to provide "
"an implementation ``get_db_prep_*`` that uses the ``connection`` argument to"
" resolve database-specific values."
msgstr ""

# b03635557bae46ac87094f7fad7cc958
#: ../../../../1.9/docs/releases/1.2.txt:526
msgid "Stateful template tags"
msgstr ""

# 4f57342bd20e4100b45b8f61e7fba5c2
#: ../../../../1.9/docs/releases/1.2.txt:528
msgid ""
"Template tags that store rendering state on their ``Node`` subclass have "
"always been vulnerable to thread-safety and other issues; as of Django 1.2, "
"however, they may also cause problems when used with the new :ref:`cached "
"template loader<template-loaders>`."
msgstr ""

# 5ea314c881f04efb988cb72c6242dcbc
#: ../../../../1.9/docs/releases/1.2.txt:533
msgid ""
"All of the built-in Django template tags are safe to use with the cached "
"loader, but if you're using custom template tags that come from third party "
"packages, or from your own code, you should ensure that the ``Node`` "
"implementation for each tag is thread-safe. For more information, see "
":ref:`template tag thread safety "
"considerations<template_tag_thread_safety>`."
msgstr ""

# 86d6b7f705ed4d66bbb00c947a72068a
#: ../../../../1.9/docs/releases/1.2.txt:540
msgid ""
"You may also need to update your templates if you were relying on the "
"implementation of Django's template tags *not* being thread safe. The "
":ttag:`cycle` tag is the most likely to be affected in this way, especially "
"when used in conjunction with the :ttag:`include` tag. Consider the "
"following template fragment::"
msgstr ""

# 4d147ff273a94e3291a71093df661717
#: ../../../../1.9/docs/releases/1.2.txt:550
msgid "with a ``subtemplate.html`` that reads::"
msgstr ""

# d4120cae87ed4b58beb145efc604f4df
#: ../../../../1.9/docs/releases/1.2.txt:554
msgid ""
"Using the non-thread-safe, pre-Django 1.2 renderer, this would output::"
msgstr ""

# 75c93301af854b3290fa0d4009331bdb
#: ../../../../1.9/docs/releases/1.2.txt:558
msgid "Using the thread-safe Django 1.2 renderer, you will instead get::"
msgstr ""

# 675d3d4ffc4249699868c7197567b04a
#: ../../../../1.9/docs/releases/1.2.txt:562
msgid ""
"This is because each rendering of the :ttag:`include` tag is an independent "
"rendering. When the :ttag:`cycle` tag was not thread safe, the state of the "
":ttag:`cycle` tag would leak between multiple renderings of the same "
":ttag:`include`. Now that the :ttag:`cycle` tag is thread safe, this leakage"
" no longer occurs."
msgstr ""

# a4949b74209c42fb9adc5fb77f72de34
#: ../../../../1.9/docs/releases/1.2.txt:569
msgid "``user_passes_test``, ``login_required`` and ``permission_required``"
msgstr ""

# 159ed81a28f04c13a5c971f2d2194c90
#: ../../../../1.9/docs/releases/1.2.txt:571
msgid ""
"``django.contrib.auth.decorators`` provides the decorators "
"``login_required``, ``permission_required`` and ``user_passes_test``. "
"Previously it was possible to use these decorators both on functions (where "
"the first argument is 'request') and on methods (where the first argument is"
" 'self', and the second argument is 'request'). Unfortunately, flaws were "
"discovered in the code supporting this: it only works in limited "
"circumstances, and produces errors that are very difficult to debug when it "
"does not work."
msgstr ""

# 68ecbabe80664c9cb2ee9b06834e56f0
#: ../../../../1.9/docs/releases/1.2.txt:581
msgid ""
"For this reason, the 'auto adapt' behavior has been removed, and if you are "
"using these decorators on methods, you will need to manually apply "
":func:`django.utils.decorators.method_decorator` to convert the decorator to"
" one that works with methods. For example, you would change code from this::"
msgstr ""

# 27c13773ec384363996abbd51797ecad
# 33626c9b4f0e4533b4ed644d1d925103
#: ../../../../1.9/docs/releases/1.2.txt:603
#: ../../../../1.9/docs/releases/1.6.txt:1018
msgid "or::"
msgstr "ou ::"

# 8210897a6ba7484f85b5d33903eb398b
#: ../../../../1.9/docs/releases/1.2.txt:615
msgid ""
"For those of you who've been following the development trunk, this change "
"also applies to other decorators introduced since 1.1, including "
"``csrf_protect``, ``cache_control`` and anything created using "
"``decorator_from_middleware``."
msgstr ""

# b4224e78ea4141cc9d1acec3ef88b35e
#: ../../../../1.9/docs/releases/1.2.txt:621
msgid ":ttag:`if` tag changes"
msgstr ""

# 274b708c49e146d4a89fb47ee456689d
#: ../../../../1.9/docs/releases/1.2.txt:623
msgid ""
"Due to new features in the :ttag:`if` template tag, it no longer accepts "
"'and', 'or' and 'not' as valid **variable** names. Previously, these strings"
" could be used as variable names. Now, the keyword status is always "
"enforced, and template code such as ``{% if not %}`` or ``{% if and %}`` "
"will throw a ``TemplateSyntaxError``. Also, ``in`` is a new keyword and so "
"is not a valid variable name in this tag."
msgstr ""

# caf1df88d6a14708b2b0288a3e4eeddd
#: ../../../../1.9/docs/releases/1.2.txt:631
msgid "``LazyObject``"
msgstr ""

# 788bd3f0c1c944e089e2c0548c3c262c
#: ../../../../1.9/docs/releases/1.2.txt:633
msgid ""
"``LazyObject`` is an undocumented-but-often-used utility class used for "
"lazily wrapping other objects of unknown type."
msgstr ""

# 7239c24bb7104711a96209faaf8d362e
#: ../../../../1.9/docs/releases/1.2.txt:636
msgid ""
"In Django 1.1 and earlier, it handled introspection in a non-standard way, "
"depending on wrapped objects implementing a public method named "
"``get_all_members()``. Since this could easily lead to name clashes, it has "
"been changed to use the standard Python introspection method, involving "
"``__members__`` and ``__dir__()``."
msgstr ""

# 42dc24a053354a00830af27bf02af4d0
#: ../../../../1.9/docs/releases/1.2.txt:642
msgid ""
"If you used ``LazyObject`` in your own code and implemented the "
"``get_all_members()`` method for wrapped objects, you'll need to make a "
"couple of changes:"
msgstr ""

# 623aa2119e0e4328ac01508f560b25b5
#: ../../../../1.9/docs/releases/1.2.txt:646
msgid ""
"First, if your class does not have special requirements for introspection "
"(i.e., you have not implemented ``__getattr__()`` or other methods that "
"allow for attributes not discoverable by normal mechanisms), you can simply "
"remove the ``get_all_members()`` method. The default implementation on "
"``LazyObject`` will do the right thing."
msgstr ""

# 49164a4ed6e042dfafe565a907c3b28b
#: ../../../../1.9/docs/releases/1.2.txt:652
msgid ""
"If you have more complex requirements for introspection, first rename the "
"``get_all_members()`` method to ``__dir__()``. This is the standard "
"introspection method for Python 2.6 and above. If you require support for "
"Python versions earlier than 2.6, add the following code to the class::"
msgstr ""

# 06ce6004e31247bb9ddb6588d1629c49
#: ../../../../1.9/docs/releases/1.2.txt:660
msgid "``__dict__`` on model instances"
msgstr ""

# 8f2ec16cbe024157a6ef61c0b4945e31
#: ../../../../1.9/docs/releases/1.2.txt:662
msgid ""
"Historically, the ``__dict__`` attribute of a model instance has only "
"contained attributes corresponding to the fields on a model."
msgstr ""

# 5c576ae2b24042b097ec7ad37320c513
#: ../../../../1.9/docs/releases/1.2.txt:665
msgid ""
"In order to support multiple database configurations, Django 1.2 has added a"
" ``_state`` attribute to object instances. This attribute will appear in "
"``__dict__`` for a model instance. If your code relies on iterating over "
"``__dict__`` to obtain a list of fields, you must now be prepared to handle "
"or filter out the ``_state`` attribute."
msgstr ""

# 0a24b16df4914c74a0811b5542e38af2
#: ../../../../1.9/docs/releases/1.2.txt:674
msgid ""
"The exit status code of the test runners (``tests/runtests.py`` and ``python"
" manage.py test``) no longer represents the number of failed tests, because "
"a failure of 256 or more tests resulted in a wrong exit status code. The "
"exit status code for the test runner is now 0 for success (no failing tests)"
" and 1 for any number of test failures. If needed, the number of test "
"failures can be found at the end of the test runner's output."
msgstr ""

# a9e081d6e686432bb750182e48a8fc51
#: ../../../../1.9/docs/releases/1.2.txt:684
msgid ""
"To fix bugs with cookies in Internet Explorer, Safari, and possibly other "
"browsers, our encoding of cookie values was changed so that the comma and "
"semicolon are treated as non-safe characters, and are therefore encoded as "
"``\\054`` and ``\\073`` respectively.  This could produce backwards "
"incompatibilities, especially if you are storing comma or semi-colon in "
"cookies and have JavaScript code that parses and manipulates cookie values "
"client-side."
msgstr ""

# 2c2d7079fe834365938fdf8681333c48
#: ../../../../1.9/docs/releases/1.2.txt:693
msgid "``ModelForm.is_valid()`` and ``ModelForm.errors``"
msgstr ""

# b1647c22de6b4c98a850bb86b84347fa
#: ../../../../1.9/docs/releases/1.2.txt:695
msgid ""
"Much of the validation work for ModelForms has been moved down to the model "
"level. As a result, the first time you call ``ModelForm.is_valid()``, access"
" ``ModelForm.errors`` or otherwise trigger form validation, your model will "
"be cleaned in-place. This conversion used to happen when the model was "
"saved. If you need an unmodified instance of your model, you should pass a "
"copy to the ``ModelForm`` constructor."
msgstr ""

# 7452de8a32b54c80bccbde1d37a4182f
#: ../../../../1.9/docs/releases/1.2.txt:703
msgid "``BooleanField`` on MySQL"
msgstr ""

# 57399acf176045eda367ff98e1e1ece3
#: ../../../../1.9/docs/releases/1.2.txt:705
msgid ""
"In previous versions of Django, a model's ``BooleanField`` under MySQL would"
" return its value as either ``1`` or ``0``, instead of ``True`` or "
"``False``; for most people this wasn't a problem because ``bool`` is a "
"subclass of ``int`` in Python. In Django 1.2, however, ``BooleanField`` on "
"MySQL correctly returns a real ``bool``.  The only time this should ever be "
"an issue is if you were expecting the ``repr`` of a ``BooleanField`` to "
"print ``1`` or ``0``."
msgstr ""

# 0a18fc5e15484b6aad5a413754fbe701
#: ../../../../1.9/docs/releases/1.2.txt:714
msgid "Changes to the interpretation of ``max_num`` in FormSets"
msgstr ""

# bf40e6f335e848c8b1acec8f79a739e2
#: ../../../../1.9/docs/releases/1.2.txt:716
msgid ""
"As part of enhancements made to the handling of FormSets, the default value "
"and interpretation of the ``max_num`` parameter to the "
":ref:`django.forms.formsets.formset_factory() <formsets-max-num>` and "
":ref:`django.forms.models.modelformset_factory() <model-formsets-max-num>` "
"functions has changed slightly. This change also affects the way the "
":attr:`~django.contrib.admin.InlineModelAdmin.max_num` argument is used for "
"inline admin objects."
msgstr ""

# 43d7f672631f4217a4cf6b6e548f770d
#: ../../../../1.9/docs/releases/1.2.txt:725
msgid ""
"Previously, the default value for ``max_num`` was ``0`` (zero). FormSets "
"then used the boolean value of ``max_num`` to determine if a limit was to be"
" imposed on the number of generated forms. The default value of ``0`` meant "
"that there was no default limit on the number of forms in a FormSet."
msgstr ""

# cf059d002dee4b749b7764c90be533f5
#: ../../../../1.9/docs/releases/1.2.txt:731
msgid ""
"Starting with 1.2, the default value for ``max_num`` has been changed to "
"``None``, and FormSets will differentiate between a value of ``None`` and a "
"value of ``0``. A value of ``None`` indicates that no limit on the number of"
" forms is to be imposed; a value of ``0`` indicates that a maximum of 0 "
"forms should be imposed. This doesn't necessarily mean that no forms will be"
" displayed -- see the :ref:`ModelFormSet documentation <model-formsets-max-"
"num>` for more details."
msgstr ""

# 765b6f0e70f04c28a911503fb4c9b2f9
#: ../../../../1.9/docs/releases/1.2.txt:740
msgid ""
"If you were manually specifying a value of ``0`` for ``max_num``, you will "
"need to update your FormSet and/or admin definitions."
msgstr ""

# 4567ad0e8d6547a4a4dd6dfe1852db49
#: ../../../../1.9/docs/releases/1.2.txt:745
msgid ":ref:`1.2-js-assisted-inlines`"
msgstr ""

# 300a24facf9c4b04bade330ea2d8520b
#: ../../../../1.9/docs/releases/1.2.txt:748
msgid "``email_re``"
msgstr ""

# 230246c45e9f49c68332feeb76e5e520
#: ../../../../1.9/docs/releases/1.2.txt:750
msgid ""
"An undocumented regular expression for validating email addresses has been "
"moved from ``django.form.fields`` to ``django.core.validators``. You will "
"need to update your imports if you are using it."
msgstr ""

# a9e6018f801047f99545c3bd7e63986a
#: ../../../../1.9/docs/releases/1.2.txt:757
msgid "Features deprecated in 1.2"
msgstr ""

# 0d2a0ef956f747a08d3c108e628524b1
#: ../../../../1.9/docs/releases/1.2.txt:759
msgid ""
"Finally, Django 1.2 deprecates some features from earlier releases. These "
"features are still supported, but will be gradually phased out over the next"
" few release cycles."
msgstr ""

# 9b3ff0b22d8548f5990a2794d89fb7ed
#: ../../../../1.9/docs/releases/1.2.txt:763
msgid ""
"Code taking advantage of any of the features below will raise a "
"``PendingDeprecationWarning`` in Django 1.2. This warning will be silent by "
"default, but may be turned on using Python's :mod:`warnings` module, or by "
"running Python with a ``-Wd`` or ``-Wall`` flag."
msgstr ""

# 8ddea4de786c4fc2a485683e9ea7eed1
#: ../../../../1.9/docs/releases/1.2.txt:768
msgid ""
"In Django 1.3, these warnings will become a ``DeprecationWarning``, which is"
" *not* silent. In Django 1.4 support for these features will be removed "
"entirely."
msgstr ""

# 35ba557de1c34e80b71eaca89de307ab
#: ../../../../1.9/docs/releases/1.2.txt:774
msgid ""
"For more details, see the documentation :doc:`Django's release process "
"</internals/release-process>` and our :doc:`deprecation timeline "
"</internals/deprecation>`.`"
msgstr ""

# 506014afe5c24564aa0b5bd16b06b453
#: ../../../../1.9/docs/releases/1.2.txt:781
msgid "Specifying databases"
msgstr ""

# b856f80bb02a43c2a31897ada52bb306
#: ../../../../1.9/docs/releases/1.2.txt:783
msgid ""
"Prior to Django 1.2, Django used a number of settings to control access to a"
" single database. Django 1.2 introduces support for multiple databases, and "
"as a result the way you define database settings has changed."
msgstr ""

# 38604e22572048ea93f4e0c613c17660
#: ../../../../1.9/docs/releases/1.2.txt:788
msgid ""
"Any existing Django settings file will continue to work as expected until "
"Django 1.4. Until then, old-style database settings will be automatically "
"translated to the new-style format."
msgstr ""

# 0b3aac825dbf46d187b7a152789ab41d
#: ../../../../1.9/docs/releases/1.2.txt:792
msgid ""
"In the old-style (pre 1.2) format, you had a number of ``DATABASE_`` "
"settings in your settings file. For example::"
msgstr ""

# 7e3b2c0cd4134d5393ab3b619900060b
#: ../../../../1.9/docs/releases/1.2.txt:800
msgid ""
"These settings are now in a dictionary named :setting:`DATABASES`. Each item"
" in the dictionary corresponds to a single database connection, with the "
"name ``'default'`` describing the default database connection. The setting "
"names have also been shortened. The previous sample settings would now look "
"like this::"
msgstr ""

# e126465dd5584cdc8dd09d9249da07d2
#: ../../../../1.9/docs/releases/1.2.txt:815
msgid "This affects the following settings:"
msgstr ""

# 700c549949084924880281c9bf0d1a1f
#: ../../../../1.9/docs/releases/1.2.txt:818
msgid "Old setting"
msgstr ""

# 12be149f5311422bb0cd30f487e547ce
#: ../../../../1.9/docs/releases/1.2.txt:818
msgid "New Setting"
msgstr ""

# 7ac6342a7a7849f1a91dd88ab2e85f59
#: ../../../../1.9/docs/releases/1.2.txt:820
msgid "`DATABASE_ENGINE`"
msgstr ""

# d78a23804a934735b1ae94d4cea810c9
#: ../../../../1.9/docs/releases/1.2.txt:820
msgid ":setting:`ENGINE <DATABASE-ENGINE>`"
msgstr ":setting:`ENGINE <DATABASE-ENGINE>`"

# 8fbbf6b7a1674781954b99aabe364007
#: ../../../../1.9/docs/releases/1.2.txt:821
msgid "`DATABASE_HOST`"
msgstr ""

# 0ff9869edddf4223927d50c4f9c246d2
#: ../../../../1.9/docs/releases/1.2.txt:821
msgid ":setting:`HOST`"
msgstr ":setting:`HOST`"

# 755bfb8c9b6a48c7b4bc03b5c63c2aff
#: ../../../../1.9/docs/releases/1.2.txt:822
msgid "`DATABASE_NAME`"
msgstr ""

# 6ca83c46ae16481a8fbcf2e8639033a5
#: ../../../../1.9/docs/releases/1.2.txt:822
msgid ":setting:`NAME`"
msgstr ":setting:`NAME`"

# b7c84bff8ffa45d4a102a20624a8d6c2
#: ../../../../1.9/docs/releases/1.2.txt:823
msgid "`DATABASE_OPTIONS`"
msgstr ""

# 255538f5024c4a7a930e6046e302f359
#: ../../../../1.9/docs/releases/1.2.txt:823
msgid ":setting:`OPTIONS`"
msgstr ""

# 314a7137d0334866a8ea4d420e7f57c4
#: ../../../../1.9/docs/releases/1.2.txt:824
msgid "`DATABASE_PASSWORD`"
msgstr ""

# 4b83425b29484a25b7138e5b9c2fdaa5
#: ../../../../1.9/docs/releases/1.2.txt:824
msgid ":setting:`PASSWORD`"
msgstr ":setting:`PASSWORD`"

# b2cb9d2f9bab4d39b86b7c816cbfeff9
#: ../../../../1.9/docs/releases/1.2.txt:825
msgid "`DATABASE_PORT`"
msgstr ""

# 54f1ea9650774d2cbe4db1ff0c62a6ad
#: ../../../../1.9/docs/releases/1.2.txt:825
msgid ":setting:`PORT`"
msgstr ":setting:`PORT`"

# 570ddfe3256e41a8a03ba68b71d02f4b
#: ../../../../1.9/docs/releases/1.2.txt:826
msgid "`DATABASE_USER`"
msgstr ""

# dc21abed031d44c19dedfed32b25d884
#: ../../../../1.9/docs/releases/1.2.txt:826
msgid ":setting:`USER`"
msgstr ":setting:`USER`"

# 643f3482ba274c81af927a6bc6502bc3
#: ../../../../1.9/docs/releases/1.2.txt:827
msgid "`TEST_DATABASE_CHARSET`"
msgstr ""

# 18fe2290e93a41e5994cf2ed10f16bba
#: ../../../../1.9/docs/releases/1.2.txt:827
msgid ":setting:`TEST_CHARSET`"
msgstr ":setting:`TEST_CHARSET`"

# 72f8513396f5470eaf9c30aacb791d73
#: ../../../../1.9/docs/releases/1.2.txt:828
msgid "`TEST_DATABASE_COLLATION`"
msgstr ""

# e0ebc15b12b74a5ab3dc7402a56f24d0
#: ../../../../1.9/docs/releases/1.2.txt:828
msgid ":setting:`TEST_COLLATION`"
msgstr ":setting:`TEST_COLLATION`"

# fe91043af65944e8a30c2176e7db2bb2
#: ../../../../1.9/docs/releases/1.2.txt:829
msgid "`TEST_DATABASE_NAME`"
msgstr ""

# 6a062e439d9d428c9674431509b88ae4
#: ../../../../1.9/docs/releases/1.2.txt:829
msgid ":setting:`TEST_NAME`"
msgstr ":setting:`TEST_NAME`"

# ffc9266bc1f2447298d056c760ecdc3c
#: ../../../../1.9/docs/releases/1.2.txt:832
msgid ""
"These changes are also required if you have manually created a database "
"connection using ``DatabaseWrapper()`` from your database backend of choice."
msgstr ""

# 9197a6b5299c48e2bd1eb968498207bf
#: ../../../../1.9/docs/releases/1.2.txt:835
msgid ""
"In addition to the change in structure, Django 1.2 removes the special "
"handling for the built-in database backends. All database backends must now "
"be specified by a fully qualified module name (i.e., "
"``django.db.backends.postgresql_psycopg2``, rather than just "
"``postgresql_psycopg2``)."
msgstr ""

# afd4a1115b824658889928b78831ba09
#: ../../../../1.9/docs/releases/1.2.txt:842
msgid "``postgresql`` database backend"
msgstr ""

# 6407d947f8354332a91fa687dbce4356
#: ../../../../1.9/docs/releases/1.2.txt:844
msgid ""
"The ``psycopg1`` library has not been updated since October 2005. As a "
"result, the ``postgresql`` database backend, which uses this library, has "
"been deprecated."
msgstr ""

# 0ff30ff2c1af4f6fb5dc3ad42b6f0bd6
#: ../../../../1.9/docs/releases/1.2.txt:848
msgid ""
"If you are currently using the ``postgresql`` backend, you should migrate to"
" using the ``postgresql_psycopg2`` backend. To update your code, install the"
" ``psycopg2`` library and change the :setting:`ENGINE <DATABASE-ENGINE>` "
"setting to use ``django.db.backends.postgresql_psycopg2``."
msgstr ""

# 0e3e8d263d8a432abb9480c073e41a75
#: ../../../../1.9/docs/releases/1.2.txt:855
msgid "CSRF response-rewriting middleware"
msgstr ""

# c4588c50e4044dee90095090226eedde
#: ../../../../1.9/docs/releases/1.2.txt:857
msgid ""
"``CsrfResponseMiddleware``, the middleware that automatically inserted CSRF "
"tokens into ``POST`` forms in outgoing pages, has been deprecated in favor "
"of a template tag method (see above), and will be removed completely in "
"Django 1.4. ``CsrfMiddleware``, which includes the functionality of "
"``CsrfResponseMiddleware`` and ``CsrfViewMiddleware``, has likewise been "
"deprecated."
msgstr ""

# 059df89231a3405ea4f2cc2905a9debb
#: ../../../../1.9/docs/releases/1.2.txt:864
msgid ""
"Also, the CSRF module has moved from contrib to core, and the old imports "
"are deprecated, as described in the upgrading notes."
msgstr ""

# d0c7e99252f94f60b5c478f66d8510d7
#: ../../../../1.9/docs/releases/1.2.txt:873
msgid "``SMTPConnection``"
msgstr ""

# 759165de16ae495790a79705902cf072
#: ../../../../1.9/docs/releases/1.2.txt:875
msgid ""
"The ``SMTPConnection`` class has been deprecated in favor of a generic email"
" backend API. Old code that explicitly instantiated an instance of an "
"SMTPConnection::"
msgstr ""

# f225d7a01cd84b62b3d3976c76954633
#: ../../../../1.9/docs/releases/1.2.txt:884
msgid ""
"...should now call :meth:`~django.core.mail.get_connection()` to instantiate"
" a generic email connection::"
msgstr ""

# 20a407fc23c848bb80f878bfbe751d2c
#: ../../../../1.9/docs/releases/1.2.txt:892
msgid ""
"Depending on the value of the :setting:`EMAIL_BACKEND` setting, this may not"
" return an SMTP connection. If you explicitly require an SMTP connection "
"with which to send email, you can explicitly request an SMTP connection::"
msgstr ""

# ee8fc53a28924420b69fd2e881e956db
#: ../../../../1.9/docs/releases/1.2.txt:902
msgid ""
"If your call to construct an instance of ``SMTPConnection`` required "
"additional arguments, those arguments can be passed to the "
":meth:`~django.core.mail.get_connection()` call::"
msgstr ""

# 09e1a087b4124918bf6faeb520f6e4e2
#: ../../../../1.9/docs/releases/1.2.txt:909
msgid "User Messages API"
msgstr ""

# 671d52a29a6b4eaa9907930a286356a2
#: ../../../../1.9/docs/releases/1.2.txt:911
msgid ""
"The API for storing messages in the user ``Message`` model (via "
"``user.message_set.create``) is now deprecated and will be removed in Django"
" 1.4 according to the standard :doc:`release process </internals/release-"
"process>`."
msgstr ""

# 8eb284e842dd4b299e256ad9057aa876
#: ../../../../1.9/docs/releases/1.2.txt:915
msgid "To upgrade your code, you need to replace any instances of this::"
msgstr ""

# 131bbc0cc44441a999cb9ef73e548bd6
#: ../../../../1.9/docs/releases/1.2.txt:919
msgid "...with the following::"
msgstr ""

# 28896077d25242a99ea758861640e804
#: ../../../../1.9/docs/releases/1.2.txt:924
msgid ""
"Additionally, if you make use of the method, you need to replace the "
"following::"
msgstr ""

# 0162b7c9a25842178205615dca6c13a8
#: ../../../../1.9/docs/releases/1.2.txt:930
msgid "...with::"
msgstr ""

# 65bd9e41de4f4164a8e0bd390117170b
#: ../../../../1.9/docs/releases/1.2.txt:936
msgid ""
"For more information, see the full :doc:`messages documentation "
"</ref/contrib/messages>`. You should begin to update your code to use the "
"new API immediately."
msgstr ""

# 12b08bee196d4321aaed2b1d85d558f4
#: ../../../../1.9/docs/releases/1.2.txt:941
msgid "Date format helper functions"
msgstr ""

# f604bbf682d54d239786959ee8717d44
#: ../../../../1.9/docs/releases/1.2.txt:943
msgid ""
"``django.utils.translation.get_date_formats()`` and "
"``django.utils.translation.get_partial_date_formats()`` have been deprecated"
" in favor of the appropriate calls to ``django.utils.formats.get_format()``,"
" which is locale-aware when :setting:`USE_L10N` is set to ``True``, and "
"falls back to default settings if set to ``False``."
msgstr ""

# ef52dde75ba745c794b1970d0104f231
#: ../../../../1.9/docs/releases/1.2.txt:949
msgid "To get the different date formats, instead of writing this::"
msgstr ""

# 71c756041dde4073b0c8eddb401b6750
#: ../../../../1.9/docs/releases/1.2.txt:954
msgid "...use::"
msgstr ""

# a3e93e6dbb064e9a85b87f47bfb87236
#: ../../../../1.9/docs/releases/1.2.txt:961
msgid "Or, when directly formatting a date value::"
msgstr ""

# 4725bb6f56084628917333e9fcb5b89f
#: ../../../../1.9/docs/releases/1.2.txt:966
msgid "The same applies to the globals found in ``django.forms.fields``:"
msgstr ""

# f3a35daf957543468a401e115694182b
#: ../../../../1.9/docs/releases/1.2.txt:968
msgid "``DEFAULT_DATE_INPUT_FORMATS``"
msgstr ""

# 0223f11d036d485cadcc26a04e48c5bf
#: ../../../../1.9/docs/releases/1.2.txt:969
msgid "``DEFAULT_TIME_INPUT_FORMATS``"
msgstr ""

# 5ef55d18d42148719e5900f3f4aabfa3
#: ../../../../1.9/docs/releases/1.2.txt:970
msgid "``DEFAULT_DATETIME_INPUT_FORMATS``"
msgstr ""

# a5a863a346ca4ca4830088c51a59a7fd
#: ../../../../1.9/docs/releases/1.2.txt:972
msgid ""
"Use ``django.utils.formats.get_format()`` to get the appropriate formats."
msgstr ""

# e0a7d61afa1b4ae0a12c3aa91f7372d8
#: ../../../../1.9/docs/releases/1.2.txt:975
msgid "Function-based test runners"
msgstr ""

# 8aca85bfa0f74a0883cb518b2482a8c7
#: ../../../../1.9/docs/releases/1.2.txt:977
msgid ""
"Django 1.2 changes the test runner tools to use a class-based approach. Old "
"style function-based test runners will still work, but should be updated to "
"use the new :ref:`class-based runners <topics-testing-test_runner>`."
msgstr ""

# 8ee9ecb928244a2a9c5857a7f89c30a9
#: ../../../../1.9/docs/releases/1.2.txt:985
msgid "``Feed`` in ``django.contrib.syndication.feeds``"
msgstr ""

# 13e1e98c8500499c942dc00a19c9a743
#: ../../../../1.9/docs/releases/1.2.txt:987
msgid ""
"The ``django.contrib.syndication.feeds.Feed`` class has been replaced by the"
" :class:`django.contrib.syndication.views.Feed` class. The old "
"``feeds.Feed`` class is deprecated, and will be removed in Django 1.4."
msgstr ""

# 73859058ea2d4619b5a80d9a2d79da3c
#: ../../../../1.9/docs/releases/1.2.txt:992
msgid ""
"The new class has an almost identical API, but allows instances to be used "
"as views. For example, consider the use of the old framework in the "
"following :doc:`URLconf </topics/http/urls>`::"
msgstr ""

# 109f15fd965d42a48094656aef2f80e0
#: ../../../../1.9/docs/releases/1.2.txt:1011
msgid ""
"Using the new Feed class, these feeds can be deployed directly as views::"
msgstr ""

# 9be05d551b89407294e1062dc9773350
#: ../../../../1.9/docs/releases/1.2.txt:1023
msgid ""
"If you currently use the ``feed()`` view, the ``LatestEntries`` class would "
"often not need to be modified apart from subclassing the new "
":class:`~django.contrib.syndication.views.Feed` class. The exception is if "
"Django was automatically working out the name of the template to use to "
"render the feed's description and title elements (if you were not specifying"
" the ``title_template`` and ``description_template`` attributes). You should"
" ensure that you always specify ``title_template`` and "
"``description_template`` attributes, or provide ``item_title()`` and "
"``item_description()`` methods."
msgstr ""

# 30adb4e0745747c09b67833c1cd9ec72
#: ../../../../1.9/docs/releases/1.2.txt:1032
msgid ""
"However, ``LatestEntriesByCategory`` uses the ``get_object()`` method with "
"the ``bits`` argument to specify a specific category to show. In the new "
":class:`~django.contrib.syndication.views.Feed` class, ``get_object()`` "
"method takes a ``request`` and arguments from the URL, so it would look like"
" this::"
msgstr ""

# 9ec31edeacf44df5afc4f5e0ec553d54
#: ../../../../1.9/docs/releases/1.2.txt:1048
msgid ""
"Additionally, the ``get_feed()`` method on ``Feed`` classes now take "
"different arguments, which may impact you if you use the ``Feed`` classes "
"directly. Instead of just taking an optional ``url`` argument, it now takes "
"two arguments: the object returned by its own ``get_object()`` method, and "
"the current ``request`` object."
msgstr ""

# 4ecb9192883f401c8fa608eca1cd6930
#: ../../../../1.9/docs/releases/1.2.txt:1054
msgid ""
"To take into account ``Feed`` classes not being initialized for each "
"request, the ``__init__()`` method now takes no arguments by default. "
"Previously it would have taken the ``slug`` from the URL and the ``request``"
" object."
msgstr ""

# 95b75038914b4dedab53675e9ded7e50
#: ../../../../1.9/docs/releases/1.2.txt:1059
msgid ""
"In accordance with `RSS best practices`_, RSS feeds will now include an "
"``atom:link`` element. You may need to update your tests to take this into "
"account."
msgstr ""

# 371f0d5171a349ceac3cef5f4f892d02
#: ../../../../1.9/docs/releases/1.2.txt:1063
msgid ""
"For more information, see the full :doc:`syndication framework documentation"
" </ref/contrib/syndication>`."
msgstr ""

# 5806850729f9443cbb76af968e15b513
#: ../../../../1.9/docs/releases/1.2.txt:1069
msgid "Technical message IDs"
msgstr ""

# f50bf28f07324e41b698867cc0d4215f
#: ../../../../1.9/docs/releases/1.2.txt:1071
msgid ""
"Up to version 1.1 Django used technical message IDs to provide localizers "
"the possibility to translate date and time formats. They were translatable "
":term:`translation strings <translation string>` that could be recognized "
"because they were all upper case (for example :setting:`DATETIME_FORMAT`, "
":setting:`DATE_FORMAT`, :setting:`TIME_FORMAT`). They have been deprecated "
"in favor of the new :ref:`Format localization <format-localization>` "
"infrastructure that allows localizers to specify that information in a "
"``formats.py`` file in the corresponding ``django/conf/locale/<locale "
"name>/`` directory."
msgstr ""

# 687094ad730c4ae98eaab171c4ffa0e1
#: ../../../../1.9/docs/releases/1.2.txt:1084
msgid ""
"To allow support for multiple databases, the GeoDjango database internals "
"were changed substantially.  The largest backwards-incompatible change is "
"that the module ``django.contrib.gis.db.backend`` was renamed to "
":mod:`django.contrib.gis.db.backends`, where the full-fledged :ref:`spatial "
"database backends <spatial-backends>` now exist.  The following sections "
"provide information on the most-popular APIs that were affected by these "
"changes."
msgstr ""

# f39e879655c64685adb9a65947fd4a1c
#: ../../../../1.9/docs/releases/1.2.txt:1093
msgid "``SpatialBackend``"
msgstr ""

# 1f73e74a8dd04a1690716c8169d5778a
#: ../../../../1.9/docs/releases/1.2.txt:1095
msgid ""
"Prior to the creation of the separate spatial backends, the "
"``django.contrib.gis.db.backend.SpatialBackend`` object was provided as an "
"abstraction to introspect on the capabilities of the spatial database.  All "
"of the attributes and routines provided by ``SpatialBackend`` are now a part"
" of the ``ops`` attribute of the database backend."
msgstr ""

# 96ec7f39a5744d0a9a00f282413d7222
#: ../../../../1.9/docs/releases/1.2.txt:1102
msgid ""
"The old module ``django.contrib.gis.db.backend`` is still provided for "
"backwards-compatibility access to a ``SpatialBackend`` object, which is just"
" an alias to the ``ops`` module of the *default* spatial database "
"connection."
msgstr ""

# eae53b7ca708469e905930df91439f66
#: ../../../../1.9/docs/releases/1.2.txt:1107
msgid ""
"Users that were relying on undocumented modules and objects within "
"``django.contrib.gis.db.backend``, rather the abstractions provided by "
"``SpatialBackend``, are required to modify their code. For example, the "
"following import which would work in 1.1 and below::"
msgstr ""

# 8307906ad7b548df8e5ab42412c33825
#: ../../../../1.9/docs/releases/1.2.txt:1115
msgid "Would need to be changed::"
msgstr ""

# a4b100ce1aa6425386b85e16a948ec88
#: ../../../../1.9/docs/releases/1.2.txt:1121
msgid "``SpatialRefSys`` and ``GeometryColumns`` models"
msgstr ""

# b88c9aba4f3648cea23f8baabb96ac93
#: ../../../../1.9/docs/releases/1.2.txt:1123
msgid ""
"In previous versions of GeoDjango, :mod:`django.contrib.gis.db.models` had "
"``SpatialRefSys`` and ``GeometryColumns`` models for querying the OGC "
"spatial metadata tables ``spatial_ref_sys`` and ``geometry_columns``, "
"respectively."
msgstr ""

# cdfeb5a95ec74a4389dcc5353b10be0e
#: ../../../../1.9/docs/releases/1.2.txt:1128
msgid ""
"While these aliases are still provided, they are only for the *default* "
"database connection and exist only if the default connection is using a "
"supported spatial database backend."
msgstr ""

# 1dae596b5855426586fcb97657c74329
#: ../../../../1.9/docs/releases/1.2.txt:1134
msgid ""
"Because the table structure of the OGC spatial metadata tables differs "
"across spatial databases, the ``SpatialRefSys`` and ``GeometryColumns`` "
"models can no longer be associated with the ``gis`` application name.  Thus,"
" no models will be returned when using the ``get_models`` method in the "
"following example::"
msgstr ""

# 52026ed48eaa4ef189a7f1b668f063ff
#: ../../../../1.9/docs/releases/1.2.txt:1144
msgid ""
"To get the correct ``SpatialRefSys`` and ``GeometryColumns`` for your "
"spatial database use the methods provided by the spatial backend::"
msgstr ""

# 62c4fb138c6145388b5d1e603aeffda8
#: ../../../../1.9/docs/releases/1.2.txt:1153
msgid ""
"When using the models returned from the ``spatial_ref_sys()`` and "
"``geometry_columns()`` method, you'll still need to use the correct database"
" alias when querying on the non-default connection. In other words, to "
"ensure that the models in the example above use the correct database::"
msgstr ""

# 53e3478d7fe8427c86547d2554ae265a
#: ../../../../1.9/docs/releases/1.2.txt:1163
msgid "Language code ``no``"
msgstr ""

# 8fe06e12080d4f51a3c3edbe7b9f1816
#: ../../../../1.9/docs/releases/1.2.txt:1165
msgid ""
"The currently used language code for Norwegian Bokmål ``no`` is being "
"replaced by the more common language code ``nb``."
msgstr ""

# dc40def9dc60475ca988652f4bd45726
#: ../../../../1.9/docs/releases/1.2.txt:1169
msgid "Function-based template loaders"
msgstr ""

# 38b671a5a4c7484aadc07ac6649251cf
#: ../../../../1.9/docs/releases/1.2.txt:1171
msgid ""
"Django 1.2 changes the template loading mechanism to use a class-based "
"approach. Old style function-based template loaders will still work, but "
"should be updated to use the new class-based template loaders."
msgstr ""

# 5b6c48b9ce064a4192599a36ff7f3a54
#: ../../../../1.9/docs/releases/1.2.1.txt:3
msgid "Django 1.2.1 release notes"
msgstr ""

# 25bfe8151b5f40cca967e29836b59180
#: ../../../../1.9/docs/releases/1.2.1.txt:5
msgid ""
"Django 1.2.1 was released almost immediately after 1.2.0 to correct two "
"small bugs: one was in the documentation packaging script, the other was a "
"bug_ that affected datetime form field widgets when localization was "
"enabled."
msgstr ""

# 67d495920a3541fca01b8898d0df1047
#: ../../../../1.9/docs/releases/1.2.2.txt:3
msgid "Django 1.2.2 release notes"
msgstr ""

# e00af70dd4a24764823ca2d64bc9db55
#: ../../../../1.9/docs/releases/1.2.2.txt:5
msgid "Welcome to Django 1.2.2!"
msgstr ""

# 87f59e7cf1434bca9a43349fc5cfecd2
#: ../../../../1.9/docs/releases/1.2.2.txt:7
msgid ""
"This is the second \"bugfix\" release in the Django 1.2 series, improving "
"the stability and performance of the Django 1.2 codebase."
msgstr ""

# b550b028b5c045308cace23a152bc77b
#: ../../../../1.9/docs/releases/1.2.2.txt:10
msgid ""
"Django 1.2.2 maintains backwards compatibility with Django 1.2.1, but "
"contain a number of fixes and other improvements. Django 1.2.2 is a "
"recommended upgrade for any development or deployment currently using or "
"targeting Django 1.2."
msgstr ""

# 279a23d90f9242da97c5eaa7455045fc
# 1bac249af21248dba8ac130cdfaae922
# ce6274e8f7884a99bdadc636841b7998
#: ../../../../1.9/docs/releases/1.2.2.txt:15
#: ../../../../1.9/docs/releases/1.2.4.txt:15
#: ../../../../1.9/docs/releases/1.2.5.txt:15
msgid ""
"For full details on the new features, backwards incompatibilities, and "
"deprecated features in the 1.2 branch, see the :doc:`/releases/1.2`."
msgstr ""

# f0e41e1824d540149e890875b7ff2afb
#: ../../../../1.9/docs/releases/1.2.2.txt:21
msgid ""
"Ordinarily, a point release would not include new features, but in the case "
"of Django 1.2.2, we have made an exception to this rule."
msgstr ""

# cf390081cfcf45a9b9a379cae608f4fa
#: ../../../../1.9/docs/releases/1.2.2.txt:24
msgid ""
"In order to test a bug fix that forms part of the 1.2.2 release, it was "
"necessary to add a feature -- the ``enforce_csrf_checks`` flag -- to the "
":ref:`test client <test-client>`. This flag forces the test client to "
"perform full CSRF checks on forms. The default behavior of the test client "
"hasn't changed, but if you want to do CSRF checks with the test client, it "
"is now possible to do so."
msgstr ""

# ab5efb6e42a74b7597417ca7d79ab58a
#: ../../../../1.9/docs/releases/1.2.3.txt:3
msgid "Django 1.2.3 release notes"
msgstr ""

# 4bc70f71f58b409fb0b8d08f4e18d672
#: ../../../../1.9/docs/releases/1.2.3.txt:5
msgid ""
"Django 1.2.3 fixed a couple of release problems in the 1.2.2 release and was"
" released two days after 1.2.2."
msgstr ""

# d99709d657b04baca4d0f72b8c0e9914
#: ../../../../1.9/docs/releases/1.2.3.txt:8
msgid "This release corrects the following problems:"
msgstr ""

# f04c4af494444e26afec98c5050777b2
#: ../../../../1.9/docs/releases/1.2.3.txt:10
msgid ""
"The patch_ applied for the security issue covered in Django 1.2.2 caused "
"issues with non-ASCII responses using CSRF tokens."
msgstr ""

# 535d7d2515e246f0bb0f90d5b1c3c166
#: ../../../../1.9/docs/releases/1.2.3.txt:13
msgid ""
"The patch also caused issues with some forms, most notably the user-editing "
"forms in the Django administrative interface."
msgstr ""

# 0e3ff09c5ed2418cbfac4eadef275d0a
#: ../../../../1.9/docs/releases/1.2.3.txt:16
msgid ""
"The packaging manifest did not contain the full list of required files."
msgstr ""

# cefbe772b18f43edb32e798f4ef4427e
#: ../../../../1.9/docs/releases/1.2.4.txt:3
msgid "Django 1.2.4 release notes"
msgstr ""

# 6279914aca6444c2a27a5b578239b6c3
#: ../../../../1.9/docs/releases/1.2.4.txt:5
msgid "Welcome to Django 1.2.4!"
msgstr ""

# a50079f599304217b333112a70715517
#: ../../../../1.9/docs/releases/1.2.4.txt:7
msgid ""
"This is the fourth \"bugfix\" release in the Django 1.2 series, improving "
"the stability and performance of the Django 1.2 codebase."
msgstr ""

# 6549b5818f6a4afbb1ee7af3bf1cdb8f
#: ../../../../1.9/docs/releases/1.2.4.txt:10
msgid ""
"With one exception, Django 1.2.4 maintains backwards compatibility with "
"Django 1.2.3. It also contains a number of fixes and other improvements. "
"Django 1.2.4 is a recommended upgrade for any development or deployment "
"currently using or targeting Django 1.2."
msgstr ""

# e1ac4174da244073bee1b03ebdbf7790
#: ../../../../1.9/docs/releases/1.2.4.txt:55
msgid ""
"Ordinarily, a point release would not include new features, but in the case "
"of Django 1.2.4, we have made an exception to this rule."
msgstr ""

# 52eb4eb6bb3b4ce4ac28872061815ed2
#: ../../../../1.9/docs/releases/1.2.4.txt:58
msgid ""
"One of the bugs fixed in Django 1.2.4 involves a set of circumstances "
"whereby a running a test suite on a multiple database configuration could "
"cause the original source database (i.e., the actual production database) to"
" be dropped, causing catastrophic loss of data. In order to provide a fix "
"for this problem, it was necessary to introduce a new setting -- "
":setting:`TEST_DEPENDENCIES` -- that allows you to define any creation order"
" dependencies in your database configuration."
msgstr ""

# 88aae4683b314db5bc63b9c81714b5e5
#: ../../../../1.9/docs/releases/1.2.4.txt:67
msgid ""
"Most users -- even users with multiple-database configurations -- need not "
"be concerned about the data loss bug, or the manual configuration of "
":setting:`TEST_DEPENDENCIES`. See the `original problem report`_ "
"documentation on :ref:`controlling the creation order of test databases "
"<topics-testing-creation-dependencies>` for details."
msgstr ""

# 4b32e4283b994249b3b60326ddfe1771
#: ../../../../1.9/docs/releases/1.2.4.txt:78
msgid ""
"The function-based :setting:`TEST_RUNNER` previously used to execute the "
"GeoDjango test suite, ``django.contrib.gis.tests.run_gis_tests``, was "
"finally deprecated in favor of a class-based test runner, "
"``django.contrib.gis.tests.GeoDjangoTestSuiteRunner``, added in this "
"release."
msgstr ""

# 8ae608a332a74caebdc143fce89641f5
#: ../../../../1.9/docs/releases/1.2.4.txt:84
msgid ""
"In addition, the GeoDjango test suite is now included when :ref:`running the"
" Django test suite <running-unit-tests>` with ``runtests.py`` and using "
":ref:`spatial database backends <spatial-backends>`."
msgstr ""

# 24fe55b4e8504114a00dd9e5e3dc910f
#: ../../../../1.9/docs/releases/1.2.5.txt:3
msgid "Django 1.2.5 release notes"
msgstr ""

# dfa8372ca9544ef886d3efb0a4dd0958
#: ../../../../1.9/docs/releases/1.2.5.txt:5
msgid "Welcome to Django 1.2.5!"
msgstr ""

# 1645a8e0666b48218ace6bfb717adb88
#: ../../../../1.9/docs/releases/1.2.5.txt:7
msgid ""
"This is the fifth \"bugfix\" release in the Django 1.2 series, improving the"
" stability and performance of the Django 1.2 codebase."
msgstr ""

# c8d07461a3e44862bdb906a8fd643425
#: ../../../../1.9/docs/releases/1.2.5.txt:10
msgid ""
"With four exceptions, Django 1.2.5 maintains backwards compatibility with "
"Django 1.2.4. It also contains a number of fixes and other improvements. "
"Django 1.2.5 is a recommended upgrade for any development or deployment "
"currently using or targeting Django 1.2."
msgstr ""

# 8c5f50ec2dae43aea110c35f08484a53
#: ../../../../1.9/docs/releases/1.2.5.txt:71
msgid "FileField no longer deletes files"
msgstr ""

# ab63be9d2cd24ecca746a9906e642669
#: ../../../../1.9/docs/releases/1.2.5.txt:73
msgid ""
"In earlier Django versions, when a model instance containing a "
":class:`~django.db.models.FileField` was deleted, "
":class:`~django.db.models.FileField` took it upon itself to also delete the "
"file from the backend storage. This opened the door to several potentially "
"serious data-loss scenarios, including rolled-back transactions and fields "
"on different models referencing the same file. In Django 1.2.5, "
":class:`~django.db.models.FileField` will never delete files from the "
"backend storage. If you need cleanup of orphaned files, you'll need to "
"handle it yourself (for instance, with a custom management command that can "
"be run manually or scheduled to run periodically via e.g. cron)."
msgstr ""

# 9f0c49d73e9743ddb31f70a89ceb7b26
# 0310ef54f6d34109a779c7c63d053ab6
#: ../../../../1.9/docs/releases/1.2.5.txt:85
#: ../../../../1.9/docs/releases/1.3.txt:532
msgid "Use of custom SQL to load initial data in tests"
msgstr ""

# 1437bfc8a90f49f58bd1e701201d094c
# a44d79e159a64e3e8bc74b882afeae49
#: ../../../../1.9/docs/releases/1.2.5.txt:87
#: ../../../../1.9/docs/releases/1.3.txt:534
msgid ""
"Django provides a custom SQL hooks as a way to inject hand-crafted SQL into "
"the database synchronization process. One of the possible uses for this "
"custom SQL is to insert data into your database. If your custom SQL contains"
" ``INSERT`` statements, those insertions will be performed every time your "
"database is synchronized. This includes the synchronization of any test "
"databases that are created when you run a test suite."
msgstr ""

# f840581dc7a84676b9e497fa577d82f6
# bc34295b3d7e4792a3c899072c00f85a
#: ../../../../1.9/docs/releases/1.2.5.txt:95
#: ../../../../1.9/docs/releases/1.3.txt:542
msgid ""
"However, in the process of testing the Django 1.3, it was discovered that "
"this feature has never completely worked as advertised. When using database "
"backends that don't support transactions, or when using a "
"TransactionTestCase, data that has been inserted using custom SQL will not "
"be visible during the testing process."
msgstr ""

# 9b6aebb3499145e28b622398d524a5c0
# a83aa5744dd14a6992f9dadde068562c
#: ../../../../1.9/docs/releases/1.2.5.txt:101
#: ../../../../1.9/docs/releases/1.3.txt:548
msgid ""
"Unfortunately, there was no way to rectify this problem without introducing "
"a backwards incompatibility. Rather than leave SQL-inserted initial data in "
"an uncertain state, Django now enforces the policy that data inserted by "
"custom SQL will *not* be visible during testing."
msgstr ""

# 84b3e4abc9124b968757e906a1b842f1
# cd8f0ae5919c4ceea4f2f2f8d53a4572
#: ../../../../1.9/docs/releases/1.2.5.txt:107
#: ../../../../1.9/docs/releases/1.3.txt:554
msgid ""
"This change only affects the testing process. You can still use custom SQL "
"to load data into your production database as part of the ``syncdb`` "
"process. If you require data to exist during test conditions, you should "
"either insert it using :ref:`test fixtures <topics-testing-fixtures>`, or "
"using the ``setUp()`` method of your test case."
msgstr ""

# e1bd784af056460b98dce30f120076b2
#: ../../../../1.9/docs/releases/1.2.5.txt:115
msgid "ModelAdmin.lookup_allowed signature changed"
msgstr ""

# 966bbad8ba3241c1ade7ea80255aae90
#: ../../../../1.9/docs/releases/1.2.5.txt:117
msgid ""
"Django 1.2.4 introduced a method ``lookup_allowed`` on ``ModelAdmin``, to "
"cope with a security issue (changeset `[15033] "
"<https://code.djangoproject.com/changeset/15033>`_). Although this method "
"was never documented, it seems some people have overridden "
"``lookup_allowed``, especially to cope with regressions introduced by that "
"changeset. While the method is still undocumented and not marked as stable, "
"it may be helpful to know that the signature of this function has changed."
msgstr ""

# 8e1d6c56931f4671af41e06b4be4a6b5
#: ../../../../1.9/docs/releases/1.2.6.txt:3
msgid "Django 1.2.6 release notes"
msgstr ""

# dce15d1f3f34411285469711a77a4474
# b2d75fd9966748d7884ff817524dede9
#: ../../../../1.9/docs/releases/1.2.6.txt:5
#: ../../../../1.9/docs/releases/1.3.1.txt:5
msgid "*September 9, 2011*"
msgstr ""

# d316dfcb18c94bd4a7ee409a4d9b8303
#: ../../../../1.9/docs/releases/1.2.6.txt:7
msgid "Welcome to Django 1.2.6!"
msgstr ""

# e8fa58530bdc418a8748ced2b2a59ea1
#: ../../../../1.9/docs/releases/1.2.6.txt:9
msgid ""
"This is the sixth bugfix/security release in the Django 1.2 series, fixing "
"several security issues present in Django 1.2.5.  Django 1.2.6 is a "
"recommended upgrade for all users of any Django release in the 1.2.X series."
msgstr ""

# 6279eef66fcd4ff38cb6afffb36268eb
# 263667174b074a30a32639756fdd6be7
# 02955df24cb8481585d0da08540a7f61
# 7f751f6dfbf849238a399f6f52479915
#: ../../../../1.9/docs/releases/1.2.6.txt:13
#: ../../../../1.9/docs/releases/1.3.1.txt:13
#: ../../../../1.9/docs/releases/1.3.2.txt:11
#: ../../../../1.9/docs/releases/1.4.1.txt:11
msgid ""
"For a full list of issues addressed in this release, see the `security "
"advisory`_."
msgstr ""

# 55c69c80a371454e812be614c139d5ed
#: ../../../../1.9/docs/releases/1.2.7.txt:3
msgid "Django 1.2.7 release notes"
msgstr ""

# 11fedeeef70f46399cb1697f41891225
#: ../../../../1.9/docs/releases/1.2.7.txt:5
msgid "*September 10, 2011*"
msgstr ""

# 36bbdd2e67c44ae79a68a45ad14e4a3c
#: ../../../../1.9/docs/releases/1.2.7.txt:7
msgid "Welcome to Django 1.2.7!"
msgstr ""

# ba25d8adc72e451bacb6771d1d5eaee6
#: ../../../../1.9/docs/releases/1.2.7.txt:9
msgid ""
"This is the seventh bugfix/security release in the Django 1.2 series. It "
"replaces Django 1.2.6 due to problems with the 1.2.6 release tarball. Django"
" 1.2.7 is a recommended upgrade for all users of any Django release in the "
"1.2.X series."
msgstr ""

# 4ed3a47dc42348acb56c0edf02649d2b
#: ../../../../1.9/docs/releases/1.2.7.txt:14
msgid "For more information, see the `release advisory`_."
msgstr ""

# b5b11ae2aa89428fa5160b3ea7cf6181
#: ../../../../1.9/docs/releases/1.3.txt:3
msgid "Django 1.3 release notes"
msgstr ""

# 8638a517c2fe493b91ca3354f77c1647
#: ../../../../1.9/docs/releases/1.3.txt:5
msgid "*March 23, 2011*"
msgstr ""

# 5decbf4facbc485bb2037a358a9308d4
#: ../../../../1.9/docs/releases/1.3.txt:7
msgid "Welcome to Django 1.3!"
msgstr ""

# 94237337eff744e898923ca39ca3d225
#: ../../../../1.9/docs/releases/1.3.txt:9
msgid ""
"Nearly a year in the making, Django 1.3 includes quite a few `new features`_"
" and plenty of bug fixes and improvements to existing features. These "
"release notes cover the new features in 1.3, as well as some `backwards-"
"incompatible changes`_ you'll want to be aware of when upgrading from Django"
" 1.2 or older versions."
msgstr ""

# 7876d8e941b345f0857f92213c9ba5ba
#: ../../../../1.9/docs/releases/1.3.txt:18
msgid ""
"Django 1.3's focus has mostly been on resolving smaller, long-standing "
"feature requests, but that hasn't prevented a few fairly significant new "
"features from landing, including:"
msgstr ""

# 1d75740b10614827ae438fe43fe7f917
#: ../../../../1.9/docs/releases/1.3.txt:22
msgid "A framework for writing `class-based views`_."
msgstr ""

# 0af9983ec92a4ba3bb306c9b49d2b245
#: ../../../../1.9/docs/releases/1.3.txt:24
msgid "Built-in support for `using Python's logging facilities`_."
msgstr ""

# 54891935ffa54c82bf445873a89520cc
#: ../../../../1.9/docs/releases/1.3.txt:26
msgid "Contrib support for `easy handling of static files`_."
msgstr ""

# de50f35475494e05b843dc3d5f0b9436
#: ../../../../1.9/docs/releases/1.3.txt:28
msgid ""
"Django's testing framework now supports (and ships with a copy of) `the "
"unittest2 library`_."
msgstr ""

# 3ce24d6dbb9e4a4982b3bd94dc2cb087
#: ../../../../1.9/docs/releases/1.3.txt:31
msgid ""
"There's plenty more, of course; see the coverage of `new features`_ below "
"for a full rundown and details."
msgstr ""

# 56ae6b92a0b94754997947301fe56859
#: ../../../../1.9/docs/releases/1.3.txt:34
msgid ""
"Wherever possible, of course, new features are introduced in a backwards-"
"compatible manner per :doc:`our API stability policy </misc/api-stability>` "
"policy. As a result of this policy, Django 1.3 `begins the deprecation "
"process for some features`_."
msgstr ""

# 5c0b4a9b9f0447e3a229eb5e91eefa83
#: ../../../../1.9/docs/releases/1.3.txt:39
msgid ""
"Some changes, unfortunately, are genuinely backwards-incompatible; in most "
"cases these are due to security issues or bugs which simply couldn't be "
"fixed any other way. Django 1.3 includes a few of these, and descriptions of"
" them -- along with the (minor) modifications you'll need to make to handle "
"them -- are documented in the list of `backwards-incompatible changes`_ "
"below."
msgstr ""

# 0773e6b0657a45fb8f2d52dafff598d2
#: ../../../../1.9/docs/releases/1.3.txt:56
msgid ""
"The release of Django 1.2 was notable for having the first shift in Django's"
" Python compatibility policy; prior to Django 1.2, Django supported any 2.x "
"version of Python from 2.3 up. As of Django 1.2, the minimum requirement was"
" raised to Python 2.4."
msgstr ""

# 08db6ba222154727b0d29b2b3275668f
#: ../../../../1.9/docs/releases/1.3.txt:61
msgid ""
"Django 1.3 continues to support Python 2.4, but will be the final Django "
"release series to do so; beginning with Django 1.4, the minimum supported "
"Python version will be 2.5. A document outlining our full timeline for "
"deprecating Python 2.x and moving to Python 3.x will be published shortly "
"after the release of Django 1.3."
msgstr ""

# d74a987b215b4629b40883bdd08ea7a0
#: ../../../../1.9/docs/releases/1.3.txt:68
msgid "What's new in Django 1.3"
msgstr ""

# bed6ded720bc49b3895056a9813f0730
#: ../../../../1.9/docs/releases/1.3.txt:71
msgid "Class-based views"
msgstr "Vues fondées sur les classes "

# 1d23326255b941e9a3de937e1e4ad9f3
#: ../../../../1.9/docs/releases/1.3.txt:73
msgid ""
"Django 1.3 adds a framework that allows you to use a class as a view. This "
"means you can compose a view out of a collection of methods that can be "
"subclassed and overridden to provide common views of data without having to "
"write too much code."
msgstr ""

# ff9e260c20bd4814ae01ff09883a24d4
#: ../../../../1.9/docs/releases/1.3.txt:78
msgid ""
"Analogs of all the old function-based generic views have been provided, "
"along with a completely generic view base class that can be used as the "
"basis for reusable applications that can be easily extended."
msgstr ""

# 5a269b48832e4660a09a2e8db578d2ab
#: ../../../../1.9/docs/releases/1.3.txt:83
msgid ""
"See :doc:`the documentation on class-based generic views</topics/class-"
"based-views/index>` for more details. There is also a document to help you "
"`convert your function-based generic views to class-based views "
"<https://docs.djangoproject.com/en/1.4/topics/generic-views-migration/>`_."
msgstr ""

# dd7a699faf894c29ab1ec24fafdf9292
# 4904482ec0b34947b91245abfa6fe5d3
#: ../../../../1.9/docs/releases/1.3.txt:89
#: ../../../../1.9/docs/releases/1.8.txt:399
msgid "Logging"
msgstr "Journalisation"

# 153421e133b2426fa42943d995478f8d
#: ../../../../1.9/docs/releases/1.3.txt:91
msgid ""
"Django 1.3 adds framework-level support for Python's ``logging`` module.  "
"This means you can now easily configure and control logging as part of your "
"Django project. A number of logging handlers and logging calls have been "
"added to Django's own code as well -- most notably, the error emails sent on"
" a HTTP 500 server error are now handled as a logging activity. See "
":doc:`the documentation on Django's logging interface </topics/logging>` for"
" more details."
msgstr ""

# b08d5bb97c4844c0b76195e171ee8ce8
#: ../../../../1.9/docs/releases/1.3.txt:100
msgid "Extended static files handling"
msgstr ""

# 6b0c47dac99a4b068855f9594ef5e32c
#: ../../../../1.9/docs/releases/1.3.txt:102
msgid ""
"Django 1.3 ships with a new contrib app -- ``django.contrib.staticfiles`` --"
" to help developers handle the static media files (images, CSS, JavaScript, "
"etc.) that are needed to render a complete web page."
msgstr ""

# 72c139cbe2b94b1a8fdab07c877738db
#: ../../../../1.9/docs/releases/1.3.txt:107
msgid ""
"In previous versions of Django, it was common to place static assets in "
":setting:`MEDIA_ROOT` along with user-uploaded files, and serve them both at"
" :setting:`MEDIA_URL`. Part of the purpose of introducing the "
"``staticfiles`` app is to make it easier to keep static files separate from "
"user-uploaded files. Static assets should now go in ``static/`` "
"subdirectories of your apps or in other static assets directories listed in "
":setting:`STATICFILES_DIRS`, and will be served at :setting:`STATIC_URL`."
msgstr ""

# 37408f66d33449aaa60d724bb146d614
#: ../../../../1.9/docs/releases/1.3.txt:116
msgid ""
"See the :doc:`reference documentation of the app </ref/contrib/staticfiles>`"
" for more details or learn how to :doc:`manage static files </howto/static-"
"files/index>`."
msgstr ""

# 9f7d1e8a08094fcfbd1941fe784aa91f
#: ../../../../1.9/docs/releases/1.3.txt:121
msgid "unittest2 support"
msgstr ""

# 88bd75380ee84df5a9563b43268d4495
#: ../../../../1.9/docs/releases/1.3.txt:123
msgid ""
"Python 2.7 introduced some major changes to the ``unittest`` library, adding"
" some extremely useful features. To ensure that every Django project can "
"benefit from these new features, Django ships with a copy of unittest2_, a "
"copy of the Python 2.7 unittest library, backported for Python 2.4 "
"compatibility."
msgstr ""

# 5f8079713c5f4fa7908305caa484c19b
#: ../../../../1.9/docs/releases/1.3.txt:129
msgid ""
"To access this library, Django provides the ``django.utils.unittest`` module"
" alias. If you are using Python 2.7, or you have installed ``unittest2`` "
"locally, Django will map the alias to the installed version of the unittest "
"library. Otherwise, Django will use its own bundled version of unittest2."
msgstr ""

# b8eaa128adcd4e93a5f022a064f74825
#: ../../../../1.9/docs/releases/1.3.txt:135
msgid "To take advantage of this alias, simply use::"
msgstr ""

# d5fb31e9aa454bb691dacf0d51b1a5ac
#: ../../../../1.9/docs/releases/1.3.txt:139
msgid "wherever you would have historically used::"
msgstr "à chaque endroit où vous auriez précédemment écrit ::"

# f571faa420f149ee95417ce4da5afd24
#: ../../../../1.9/docs/releases/1.3.txt:143
msgid ""
"If you want to continue to use the base unittest library, you can -- you "
"just won't get any of the nice new unittest2 features."
msgstr ""

# e8bb37526b394ead98927d294f33ac88
#: ../../../../1.9/docs/releases/1.3.txt:149
msgid "Transaction context managers"
msgstr ""

# d1ad102907ad4d33b6df3c494533c5e8
#: ../../../../1.9/docs/releases/1.3.txt:151
msgid ""
"Users of Python 2.5 and above may now use transaction management functions "
"as `context managers`_. For example::"
msgstr ""

# f11b2a7785b046009f69280c43ce75f2
#: ../../../../1.9/docs/releases/1.3.txt:160
msgid "Configurable delete-cascade"
msgstr ""

# f0cace5acd4e4cf98146f7f15d07c83e
#: ../../../../1.9/docs/releases/1.3.txt:162
msgid ""
":class:`~django.db.models.ForeignKey` and "
":class:`~django.db.models.OneToOneField` now accept an "
":attr:`~django.db.models.ForeignKey.on_delete` argument to customize "
"behavior when the referenced object is deleted. Previously, deletes were "
"always cascaded; available alternatives now include set null, set default, "
"set to any value, protect, or do nothing."
msgstr ""

# 5f5d87c3f63048d18853376d5e99ce72
#: ../../../../1.9/docs/releases/1.3.txt:169
msgid ""
"For more information, see the :attr:`~django.db.models.ForeignKey.on_delete`"
" documentation."
msgstr ""

# 34c0063d1e6844008f20547c2c2e5a09
#: ../../../../1.9/docs/releases/1.3.txt:173
msgid "Contextual markers and comments for translatable strings"
msgstr ""

# e5f09d9dd36a4c73bb4bc854da195634
#: ../../../../1.9/docs/releases/1.3.txt:175
msgid ""
"For translation strings with ambiguous meaning, you can now use the "
"``pgettext`` function to specify the context of the string."
msgstr ""

# c6f94a3f0afa49b08a3598e40ff40d7f
#: ../../../../1.9/docs/releases/1.3.txt:178
msgid ""
"And if you just want to add some information for translators, you can also "
"add special translator comments in the source."
msgstr ""

# bbcf8729ea17426e9aeacf485984b904
#: ../../../../1.9/docs/releases/1.3.txt:181
msgid ""
"For more information, see :ref:`contextual-markers` and :ref:`translator-"
"comments`."
msgstr ""

# f49312bff286407cb0c166ec0acb8283
#: ../../../../1.9/docs/releases/1.3.txt:185
msgid "Improvements to built-in template tags"
msgstr ""

# f6f5649c49dd41f19ad86228796c16eb
#: ../../../../1.9/docs/releases/1.3.txt:187
msgid ""
"A number of improvements have been made to Django's built-in template tags:"
msgstr ""

# a4233f025a63430e828b6843e94a14e1
#: ../../../../1.9/docs/releases/1.3.txt:189
msgid ""
"The :ttag:`include` tag now accepts a ``with`` option, allowing you to "
"specify context variables to the included template"
msgstr ""

# cd582258fbb344f4b15a22f9db3d349e
#: ../../../../1.9/docs/releases/1.3.txt:192
msgid ""
"The :ttag:`include` tag now accepts an ``only`` option, allowing you to "
"exclude the current context from the included context"
msgstr ""

# 5f786c14ed1a449eb6148237ce10b721
#: ../../../../1.9/docs/releases/1.3.txt:195
msgid ""
"The :ttag:`with` tag now allows you to define multiple context variables in "
"a single :ttag:`with` block."
msgstr ""

# 4a664b4c75dd4838aa946aa81afbfc7b
#: ../../../../1.9/docs/releases/1.3.txt:198
msgid ""
"The :ttag:`load` tag now accepts a ``from`` argument, allowing you to load a"
" single tag or filter from a library."
msgstr ""

# faf057793923467cbf8a67378ee7345a
#: ../../../../1.9/docs/releases/1.3.txt:202
msgid "TemplateResponse"
msgstr ""

# 5e6c0d242db44b1b88958299d5b5d0ad
#: ../../../../1.9/docs/releases/1.3.txt:204
msgid ""
"It can sometimes be beneficial to allow decorators or middleware to modify a"
" response *after* it has been constructed by the view. For example, you may "
"want to change the template that is used, or put additional data into the "
"context."
msgstr ""

# b291cd028f5640ad8a24a46fe45a0d84
#: ../../../../1.9/docs/releases/1.3.txt:209
msgid ""
"However, you can't (easily) modify the content of a basic "
":class:`~django.http.HttpResponse` after it has been constructed. To "
"overcome this limitation, Django 1.3 adds a new "
":class:`~django.template.response.TemplateResponse` class. Unlike basic "
":class:`~django.http.HttpResponse` objects, "
":class:`~django.template.response.TemplateResponse` objects retain the "
"details of the template and context that was provided by the view to compute"
" the response. The final output of the response is not computed until it is "
"needed, later in the response process."
msgstr ""

# f8de6fe88edd4c3ca08b91d7c9da8b69
#: ../../../../1.9/docs/releases/1.3.txt:219
msgid ""
"For more details, see the :doc:`documentation </ref/template-response>` on "
"the :class:`~django.template.response.TemplateResponse` class."
msgstr ""

# 8a53ea621b1e4229bac8e41689c4be5b
#: ../../../../1.9/docs/releases/1.3.txt:223
msgid "Caching changes"
msgstr ""

# e63d8ea59de941188f7f52652a0ba72e
#: ../../../../1.9/docs/releases/1.3.txt:225
msgid ""
"Django 1.3 sees the introduction of several improvements to the Django's "
"caching infrastructure."
msgstr ""

# ff6f76294f834a0388897eb2ea0ee25c
#: ../../../../1.9/docs/releases/1.3.txt:228
msgid ""
"Firstly, Django now supports multiple named caches. In the same way that "
"Django 1.2 introduced support for multiple database connections, Django 1.3 "
"allows you to use the new :setting:`CACHES` setting to define multiple named"
" cache connections."
msgstr ""

# 076460bb7a45447e802a6a5a61279e86
#: ../../../../1.9/docs/releases/1.3.txt:233
msgid ""
"Secondly, :ref:`versioning <cache_versioning>`, :ref:`site-wide prefixing "
"<cache_key_prefixing>` and :ref:`transformation <cache_key_transformation>` "
"have been added to the cache API."
msgstr ""

# 353cc238af754a30aae70995c7fedcf1
#: ../../../../1.9/docs/releases/1.3.txt:237
msgid ""
"Thirdly, :ref:`cache key creation <using-vary-headers>` has been updated to "
"take the request query string into account on ``GET`` requests."
msgstr ""

# cdf43b13b6834cb18e9c79cfa4ac36b0
#: ../../../../1.9/docs/releases/1.3.txt:241
msgid ""
"Finally, support for pylibmc_ has been added to the memcached cache backend."
msgstr ""

# bcdc29087e32471cb5d370bab9b4b1dd
#: ../../../../1.9/docs/releases/1.3.txt:244
msgid ""
"For more details, see the :doc:`documentation on caching in "
"Django</topics/cache>`."
msgstr ""

# eeb6180317c545cdaf6dcbe8bd82408c
#: ../../../../1.9/docs/releases/1.3.txt:250
msgid "Permissions for inactive users"
msgstr ""

# 3484a44c13ea46dc9f2b63c8cb003da1
#: ../../../../1.9/docs/releases/1.3.txt:252
msgid ""
"If you provide a custom auth backend with ``supports_inactive_user`` set to "
"``True``, an inactive ``User`` instance will check the backend for "
"permissions.  This is useful for further centralizing the permission "
"handling. See the :doc:`authentication docs </topics/auth/index>` for more "
"details."
msgstr ""

# e3055a6c8b414ee69faee5c74249ab93
#: ../../../../1.9/docs/releases/1.3.txt:261
msgid ""
"The GeoDjango test suite is now included when :ref:`running the Django test "
"suite <running-unit-tests>` with ``runtests.py`` when using :ref:`spatial "
"database backends <spatial-backends>`."
msgstr ""

# 39974f73b8924d69b6174614bca826cd
#: ../../../../1.9/docs/releases/1.3.txt:266
msgid ":setting:`MEDIA_URL` and :setting:`STATIC_URL` must end in a slash"
msgstr ""

# 448f6cc18ed44232abd37659e8c50834
#: ../../../../1.9/docs/releases/1.3.txt:268
msgid ""
"Previously, the :setting:`MEDIA_URL` setting only required a trailing slash "
"if it contained a suffix beyond the domain name."
msgstr ""

# c61106eb808043c9a077cc04f77d01f1
#: ../../../../1.9/docs/releases/1.3.txt:271
msgid ""
"A trailing slash is now *required* for :setting:`MEDIA_URL` and the new "
":setting:`STATIC_URL` setting as long as it is not blank. This ensures there"
" is a consistent way to combine paths in templates."
msgstr ""

# 4b5bbdd29b5b4cb097214c63d6c867e8
#: ../../../../1.9/docs/releases/1.3.txt:275
msgid ""
"Project settings which provide either of both settings without a trailing "
"slash will now raise a ``PendingDeprecationWarning``."
msgstr ""

# 1df450329085465da062434d6efeef52
#: ../../../../1.9/docs/releases/1.3.txt:278
msgid ""
"In Django 1.4 this same condition will raise ``DeprecationWarning``, and in "
"Django 1.5 will raise an ``ImproperlyConfigured`` exception."
msgstr ""

# daa72614b7eb4ff38924a28c7f35969c
#: ../../../../1.9/docs/releases/1.3.txt:282
msgid "Everything else"
msgstr ""

# 6b797d1fed6a4bfc99da69afbd11689f
#: ../../../../1.9/docs/releases/1.3.txt:284
msgid ""
"Django :doc:`1.1 <1.1>` and :doc:`1.2 <1.2>` added lots of big ticket items "
"to Django, like multiple-database support, model validation, and a session-"
"based messages framework. However, this focus on big features came at the "
"cost of lots of smaller features."
msgstr ""

# c929f9d8ec124e3e9df3923996ac043a
#: ../../../../1.9/docs/releases/1.3.txt:290
msgid ""
"To compensate for this, the focus of the Django 1.3 development process has "
"been on adding lots of smaller, long standing feature requests. These "
"include:"
msgstr ""

# 0e4863649c7d46b9bb157e613acd23e8
#: ../../../../1.9/docs/releases/1.3.txt:294
msgid ""
"Improved tools for accessing and manipulating the current "
":class:`~django.contrib.sites.models.Site` object in :doc:`the sites "
"framework </ref/contrib/sites>`."
msgstr ""

# 2a66112490fa48e3adbbde5a7b30bec0
#: ../../../../1.9/docs/releases/1.3.txt:298
msgid "A :class:`~django.test.RequestFactory` for mocking requests in tests."
msgstr ""

# eb992f525c19494993f7110659e44602
#: ../../../../1.9/docs/releases/1.3.txt:301
msgid ""
"A new test assertion -- "
":meth:`~django.test.TransactionTestCase.assertNumQueries` -- making it "
"easier to test the database activity associated with a view."
msgstr ""

# f11dcaf9ec6a4c1a88bbbe06b4c6c3dd
#: ../../../../1.9/docs/releases/1.3.txt:305
msgid ""
"Support for lookups spanning relations in admin's "
":attr:`~django.contrib.admin.ModelAdmin.list_filter`."
msgstr ""

# f0bbbcd618ac495097728d31cbe794f5
#: ../../../../1.9/docs/releases/1.3.txt:308
msgid "Support for HTTPOnly_ cookies."
msgstr ""

# ce95acac76054565be92fd6335cb3ddc
#: ../../../../1.9/docs/releases/1.3.txt:310
msgid ""
":meth:`~django.core.mail.mail_admins()` and "
":meth:`~django.core.mail.mail_managers()` now support easily attaching HTML "
"content to messages."
msgstr ""

# 576e50086ff3441f8bf8db83d348ca68
#: ../../../../1.9/docs/releases/1.3.txt:314
msgid ":class:`~django.core.mail.EmailMessage` now supports CC's."
msgstr ""

# 387a46f3ac2140149e28159f9c318984
#: ../../../../1.9/docs/releases/1.3.txt:316
msgid ""
"Error emails now include more of the detail and formatting of the debug "
"server error page."
msgstr ""

# a9cc52a832f54d6ea236679efa82154d
#: ../../../../1.9/docs/releases/1.3.txt:319
msgid ""
":meth:`~django.template.Library.simple_tag` now accepts a ``takes_context`` "
"argument, making it easier to write simple template tags that require access"
" to template context."
msgstr ""

# f841de0e7f524cbd999ac830c7169670
#: ../../../../1.9/docs/releases/1.3.txt:323
msgid ""
"A new :meth:`~django.shortcuts.render()` shortcut -- an alternative to "
"``django.shortcuts.render_to_response()`` providing a "
":class:`~django.template.RequestContext` by default."
msgstr ""

# 05676cdef4104e4ea086c12f4f92d113
#: ../../../../1.9/docs/releases/1.3.txt:327
msgid ""
"Support for combining :class:`F expressions <django.db.models.F>` with "
"timedelta values when retrieving or updating database values."
msgstr ""

# 48de54f837024bd1afafbaaafc22de5c
#: ../../../../1.9/docs/releases/1.3.txt:335
msgid "Backwards-incompatible changes in 1.3"
msgstr ""

# 1729f56788734038a204af2a9ef3c9c2
#: ../../../../1.9/docs/releases/1.3.txt:338
msgid "CSRF validation now applies to AJAX requests"
msgstr ""

# 415ce3c17ca045a9a42fe306e2c2551e
#: ../../../../1.9/docs/releases/1.3.txt:340
msgid ""
"Prior to Django 1.2.5, Django's CSRF-prevention system exempted AJAX "
"requests from CSRF verification; due to `security issues`_ reported to us, "
"however, *all* requests are now subjected to CSRF verification. Consult "
":doc:`the Django CSRF documentation </ref/csrf>` for details on how to "
"handle CSRF verification in AJAX requests."
msgstr ""

# 3c6bd68715e94e0081a1783b587edbb4
#: ../../../../1.9/docs/releases/1.3.txt:352
msgid ""
"Prior to Django 1.2.5, the Django administrative interface allowed filtering"
" on any model field or relation -- not just those specified in "
"``list_filter`` -- via query string manipulation. Due to security issues "
"reported to us, however, query string lookup arguments in the admin must be "
"for fields or relations specified in ``list_filter`` or ``date_hierarchy``."
msgstr ""

# 776ff1c4aaab4d4eaf4caa38ca268769
#: ../../../../1.9/docs/releases/1.3.txt:360
msgid "Deleting a model doesn't delete associated files"
msgstr ""

# 5d00ac3c5e574a1e8e20a9355f690d37
#: ../../../../1.9/docs/releases/1.3.txt:362
msgid ""
"In earlier Django versions, when a model instance containing a "
":class:`~django.db.models.FileField` was deleted, "
":class:`~django.db.models.FileField` took it upon itself to also delete the "
"file from the backend storage. This opened the door to several data-loss "
"scenarios, including rolled-back transactions and fields on different models"
" referencing the same file. In Django 1.3, when a model is deleted the "
":class:`~django.db.models.FileField`’s ``delete()`` method won't be called. "
"If you need cleanup of orphaned files, you'll need to handle it yourself "
"(for instance, with a custom management command that can be run manually or "
"scheduled to run periodically via e.g. cron)."
msgstr ""

# b22bfb0bddce4903bc5a7eda0b660cdb
#: ../../../../1.9/docs/releases/1.3.txt:374
msgid "PasswordInput default rendering behavior"
msgstr ""

# c604909ba08e45ccb5a51a5febe3e5e2
#: ../../../../1.9/docs/releases/1.3.txt:376
msgid ""
"The :class:`~django.forms.PasswordInput` form widget, intended for use with "
"form fields which represent passwords, accepts a boolean keyword argument "
"``render_value`` indicating whether to send its data back to the browser "
"when displaying a submitted form with errors. Prior to Django 1.3, this "
"argument defaulted to ``True``, meaning that the submitted password would be"
" sent back to the browser as part of the form. Developers who wished to add "
"a bit of additional security by excluding that value from the redisplayed "
"form could instantiate a :class:`~django.forms.PasswordInput` passing "
"``render_value=False`` ."
msgstr ""

# 22f6eb4a31a14445ad026b6168a7331e
#: ../../../../1.9/docs/releases/1.3.txt:386
msgid ""
"Due to the sensitive nature of passwords, however, Django 1.3 takes this "
"step automatically; the default value of ``render_value`` is now ``False``, "
"and developers who want the password value returned to the browser on a "
"submission with errors (the previous behavior) must now explicitly indicate "
"this. For example::"
msgstr ""

# a00067a176b148b6a0c98472f4ea1699
#: ../../../../1.9/docs/releases/1.3.txt:397
msgid "Clearable default widget for FileField"
msgstr ""

# 997f0e2a77f94bef9c4dd78912f1e12a
#: ../../../../1.9/docs/releases/1.3.txt:399
msgid ""
"Django 1.3 now includes a :class:`~django.forms.ClearableFileInput` form "
"widget in addition to :class:`~django.forms.FileInput`. "
"``ClearableFileInput`` renders with a checkbox to clear the field's value "
"(if the field has a value and is not required); ``FileInput`` provided no "
"means for clearing an existing file from a ``FileField``."
msgstr ""

# 62ebebc67e374287b9dc6df64bc9f1a8
#: ../../../../1.9/docs/releases/1.3.txt:405
msgid ""
"``ClearableFileInput`` is now the default widget for a ``FileField``, so "
"existing forms including ``FileField`` without assigning a custom widget "
"will need to account for the possible extra checkbox in the rendered form "
"output."
msgstr ""

# b2a30bec61704c48aafa0a4896e72697
#: ../../../../1.9/docs/releases/1.3.txt:409
msgid ""
"To return to the previous rendering (without the ability to clear the "
"``FileField``), use the ``FileInput`` widget in place of "
"``ClearableFileInput``. For instance, in a ``ModelForm`` for a hypothetical "
"``Document`` model with a ``FileField`` named ``document``::"
msgstr ""

# 14cd47519bc34371b8dc596b0ea8788d
#: ../../../../1.9/docs/releases/1.3.txt:423
msgid "New index on database session table"
msgstr ""

# 8e34af3775c54b50918e455ace440e02
#: ../../../../1.9/docs/releases/1.3.txt:425
msgid ""
"Prior to Django 1.3, the database table used by the database backend for the"
" :doc:`sessions </topics/http/sessions>` app had no index on the "
"``expire_date`` column. As a result, date-based queries on the session table"
" -- such as the query that is needed to purge old sessions -- would be very "
"slow if there were lots of sessions."
msgstr ""

# 5f0577b671dd4583bd8ba844b4fae3ff
#: ../../../../1.9/docs/releases/1.3.txt:431
msgid ""
"If you have an existing project that is using the database session backend, "
"you don't have to do anything to accommodate this change. However, you may "
"get a significant performance boost if you manually add the new index to the"
" session table. The SQL that will add the index can be found by running the "
"``sqlindexes`` admin command::"
msgstr ""

# 79532c87301e4f489302a943516a3cd8
#: ../../../../1.9/docs/releases/1.3.txt:440
msgid "No more naughty words"
msgstr ""

# 25c1531cc7d148a8a037c0ebc16b616d
#: ../../../../1.9/docs/releases/1.3.txt:442
msgid ""
"Django has historically provided (and enforced) a list of profanities. The "
"comments app has enforced this list of profanities, preventing people from "
"submitting comments that contained one of those profanities."
msgstr ""

# 45e9567ae08d4d2992333c8c53bfdefa
#: ../../../../1.9/docs/releases/1.3.txt:446
msgid ""
"Unfortunately, the technique used to implement this profanities list was "
"woefully naive, and prone to the `Scunthorpe problem`_. Improving the built-"
"in filter to fix this problem would require significant effort, and since "
"natural language processing isn't the normal domain of a web framework, we "
"have \"fixed\" the problem by making the list of prohibited words an empty "
"list."
msgstr ""

# 9763dc0559d64883823e621b8831b16d
#: ../../../../1.9/docs/releases/1.3.txt:453
msgid ""
"If you want to restore the old behavior, simply put a ``PROFANITIES_LIST`` "
"setting in your settings file that includes the words that you want to "
"prohibit (see the `commit that implemented this change`_ if you want to see "
"the list of words that was historically prohibited). However, if avoiding "
"profanities is important to you, you would be well advised to seek out a "
"better, less naive approach to the problem."
msgstr ""

# 23f3b5cdc0634c86b575ab75aa2d33d0
#: ../../../../1.9/docs/releases/1.3.txt:465
msgid "Localflavor changes"
msgstr ""

# 77da9dbfdb4749c08b0ce83976966778
#: ../../../../1.9/docs/releases/1.3.txt:467
msgid ""
"Django 1.3 introduces the following backwards-incompatible changes to local "
"flavors:"
msgstr ""

# 4d556d74f790441ea827b9ff8e3895f0
#: ../../../../1.9/docs/releases/1.3.txt:470
msgid ""
"Canada (ca) -- The province \"Newfoundland and Labrador\" has had its "
"province code updated to \"NL\", rather than the older \"NF\". In addition, "
"the Yukon Territory has had its province code corrected to \"YT\", instead "
"of \"YK\"."
msgstr ""

# 114f02b059164acf8a8db73c6ac25225
#: ../../../../1.9/docs/releases/1.3.txt:475
msgid ""
"Indonesia (id) -- The province \"Nanggroe Aceh Darussalam (NAD)\" has been "
"removed from the province list in favor of the new official designation "
"\"Aceh (ACE)\"."
msgstr ""

# adb9b0b6ab934699bee7f3d8c8be5dfe
#: ../../../../1.9/docs/releases/1.3.txt:479
msgid ""
"United States of America (us) -- The list of \"states\" used by "
"``USStateField`` has expanded to include Armed Forces postal codes. This is "
"backwards-incompatible if you were relying on ``USStateField`` not including"
" them."
msgstr ""

# 48b6c1bcdfb24f9f826d9d95c0075c1a
#: ../../../../1.9/docs/releases/1.3.txt:485
msgid "FormSet updates"
msgstr ""

# b87a6802b7804e99a020d3f193b356b7
#: ../../../../1.9/docs/releases/1.3.txt:487
msgid ""
"In Django 1.3 ``FormSet`` creation behavior is modified slightly. "
"Historically the class didn't make a distinction between not being passed "
"data and being passed empty dictionary. This was inconsistent with behavior "
"in other parts of the framework. Starting with 1.3 if you pass in empty "
"dictionary the ``FormSet`` will raise a ``ValidationError``."
msgstr ""

# 79068c547c2941dcafba14c3771f5a37
#: ../../../../1.9/docs/releases/1.3.txt:493
msgid "For example with a ``FormSet``::"
msgstr ""

# 6ce6abcd0d954c63ab0e3f13f2462827
#: ../../../../1.9/docs/releases/1.3.txt:500
msgid "the following code will raise a ``ValidationError``::"
msgstr ""

# 86067c7600df41e78fbd2996d39ce31a
#: ../../../../1.9/docs/releases/1.3.txt:507
msgid ""
"if you need to instantiate an empty ``FormSet``, don't pass in the data or "
"use ``None``::"
msgstr ""

# 41cf30cf5b144ae4af682410b1524073
#: ../../../../1.9/docs/releases/1.3.txt:514
msgid "Callables in templates"
msgstr ""

# e3c3d16f221244cfa3da0cd61d070a01
#: ../../../../1.9/docs/releases/1.3.txt:516
msgid ""
"Previously, a callable in a template would only be called automatically as "
"part of the variable resolution process if it was retrieved via attribute "
"lookup. This was an inconsistency that could result in confusing and "
"unhelpful behavior::"
msgstr ""

# 1b3453cc41674d55bcb0f06148b2b015
#: ../../../../1.9/docs/releases/1.3.txt:526
msgid ""
"This has been resolved in Django 1.3 - the result in both cases will be "
"``u'Joe Bloggs'``. Although the previous behavior was not useful for a "
"template language designed for web designers, and was never deliberately "
"supported, it is possible that some templates may be broken by this change."
msgstr ""

# 68bf2ee981224dd9a7ab99d569f30b22
#: ../../../../1.9/docs/releases/1.3.txt:562
msgid "Changed priority of translation loading"
msgstr ""

# 28b01375822d443391faa0ad8b134b85
#: ../../../../1.9/docs/releases/1.3.txt:564
msgid ""
"Work has been done to simplify, rationalize and properly document the "
"algorithm used by Django at runtime to build translations from the different"
" translations found on disk, namely:"
msgstr ""

# 49e7aed09afd4b30a588d2cade9d664e
#: ../../../../1.9/docs/releases/1.3.txt:568
msgid ""
"For translatable literals found in Python code and templates (``'django'`` "
"gettext domain):"
msgstr ""

# 76b43e6c86e844aea2c3582e10d9c1f2
#: ../../../../1.9/docs/releases/1.3.txt:571
msgid ""
"Priorities of translations included with applications listed in the "
":setting:`INSTALLED_APPS` setting were changed. To provide a behavior "
"consistent with other parts of Django that also use such setting (templates,"
" etc.) now, when building the translation that will be made available, the "
"apps listed first have higher precedence than the ones listed later."
msgstr ""

# 5117267d2df644c78a14b622587fe360
#: ../../../../1.9/docs/releases/1.3.txt:577
msgid ""
"Now it is possible to override the translations shipped with applications by"
" using the :setting:`LOCALE_PATHS` setting whose translations have now "
"higher precedence than the translations of :setting:`INSTALLED_APPS` "
"applications. The relative priority among the values listed in this setting "
"has also been modified so the paths listed first have higher precedence than"
" the ones listed later."
msgstr ""

# 6b0223026470463495de1c235c2c7762
#: ../../../../1.9/docs/releases/1.3.txt:584
msgid ""
"The ``locale`` subdirectory of the directory containing the settings, that "
"usually coincides with and is known as the *project directory* is being "
"deprecated in this release as a source of translations. (the precedence of "
"these translations is intermediate between applications and "
":setting:`LOCALE_PATHS` translations). See the `corresponding deprecated "
"features section`_ of this document."
msgstr ""

# 9523ba4e3b11401692d5ce1abb2045dc
#: ../../../../1.9/docs/releases/1.3.txt:591
msgid ""
"For translatable literals found in JavaScript code (``'djangojs'`` gettext "
"domain):"
msgstr ""

# 4b47b1b876754689b32d427022f236bf
#: ../../../../1.9/docs/releases/1.3.txt:594
msgid ""
"Similarly to the ``'django'`` domain translations: Overriding of "
"translations shipped with applications by using the :setting:`LOCALE_PATHS` "
"setting is now possible for this domain too. These translations have higher "
"precedence than the translations of Python packages passed to the "
":ref:`javascript_catalog view <javascript_catalog-view>`.  Paths listed "
"first have higher precedence than the ones listed later."
msgstr ""

# aef513f0165c4e1b9327c3f1359ba8b8
#: ../../../../1.9/docs/releases/1.3.txt:601
msgid ""
"Translations under the ``locale`` subdirectory of the *project directory* "
"have never been taken in account for JavaScript translations and remain in "
"the same situation considering the deprecation of such location."
msgstr ""

# da5530939f4f47b694c42ce4353927cf
#: ../../../../1.9/docs/releases/1.3.txt:608
msgid "Transaction management"
msgstr ""

# c80e57fdf69d4707a404fa2285935fe6
#: ../../../../1.9/docs/releases/1.3.txt:610
msgid ""
"When using managed transactions -- that is, anything but the default "
"autocommit mode -- it is important when a transaction is marked as "
"\"dirty\". Dirty transactions are committed by the ``commit_on_success`` "
"decorator or the ``django.middleware.transaction.TransactionMiddleware``, "
"and ``commit_manually`` forces them to be closed explicitly; clean "
"transactions \"get a pass\", which means they are usually rolled back at the"
" end of a request when the connection is closed."
msgstr ""

# 2ef0acc2ced54b3bb714212e52730524
#: ../../../../1.9/docs/releases/1.3.txt:618
msgid ""
"Until Django 1.3, transactions were only marked dirty when Django was aware "
"of a modifying operation performed in them; that is, either some model was "
"saved, some bulk update or delete was performed, or the user explicitly "
"called ``transaction.set_dirty()``. In Django 1.3, a transaction is marked "
"dirty when *any* database operation is performed."
msgstr ""

# 9016c12878d146adae8199b7cfbdce55
#: ../../../../1.9/docs/releases/1.3.txt:625
msgid ""
"As a result of this change, you no longer need to set a transaction dirty "
"explicitly when you execute raw SQL or use a data-modifying ``SELECT``. "
"However, you *do* need to explicitly close any read-only transactions that "
"are being managed using ``commit_manually()``. For example::"
msgstr ""

# c6383a0d4bff418385a3edb49ed3d113
#: ../../../../1.9/docs/releases/1.3.txt:635
msgid ""
"Prior to Django 1.3, this would work without error. However, under Django "
"1.3, this will raise a "
":class:`~django.db.transaction.TransactionManagementError` because the read "
"operation that retrieves the ``MyObject`` instance leaves the transaction in"
" a dirty state."
msgstr ""

# 9aa82cade39a4defb9dbdcfca615662b
#: ../../../../1.9/docs/releases/1.3.txt:642
msgid "No password reset for inactive users"
msgstr ""

# 56e369cd23a8481c98ee77ee90dc1e6d
#: ../../../../1.9/docs/releases/1.3.txt:644
msgid ""
"Prior to Django 1.3, inactive users were able to request a password reset "
"email and reset their password. In Django 1.3 inactive users will receive "
"the same message as a nonexistent account."
msgstr ""

# fba90dbb3ec6415794f8e9f8ebad8053
#: ../../../../1.9/docs/releases/1.3.txt:649
msgid "Password reset view now accepts ``from_email``"
msgstr ""

# 6ca8ff5d379e40a3b53140de559ae471
#: ../../../../1.9/docs/releases/1.3.txt:651
msgid ""
"The :func:`django.contrib.auth.views.password_reset` view now accepts a "
"``from_email`` parameter, which is passed to the ``password_reset_form``’s "
"``save()`` method as a keyword argument. If you are using this view with a "
"custom password reset form, then you will need to ensure your form's "
"``save()`` method accepts this keyword argument."
msgstr ""

# e04ca2cd5e0e462c93c47f83f0a2d21e
#: ../../../../1.9/docs/releases/1.3.txt:660
msgid "Features deprecated in 1.3"
msgstr ""

# 83547c85ae7040f1b71da835a6dd2b1c
#: ../../../../1.9/docs/releases/1.3.txt:662
msgid ""
"Django 1.3 deprecates some features from earlier releases. These features "
"are still supported, but will be gradually phased out over the next few "
"release cycles."
msgstr ""

# 1c7377dba16642e68594950c27a10617
#: ../../../../1.9/docs/releases/1.3.txt:666
msgid ""
"Code taking advantage of any of the features below will raise a "
"``PendingDeprecationWarning`` in Django 1.3. This warning will be silent by "
"default, but may be turned on using Python's :mod:`warnings` module, or by "
"running Python with a ``-Wd`` or ``-Wall`` flag."
msgstr ""

# 69009472893d481f8b392c8207da339d
#: ../../../../1.9/docs/releases/1.3.txt:671
msgid ""
"In Django 1.4, these warnings will become a ``DeprecationWarning``, which is"
" *not* silent. In Django 1.5 support for these features will be removed "
"entirely."
msgstr ""

# a865431bd22c4ecd9fa0c19b61a79112
#: ../../../../1.9/docs/releases/1.3.txt:677
msgid ""
"For more details, see the documentation :doc:`Django's release process "
"</internals/release-process>` and our :doc:`deprecation timeline "
"</internals/deprecation>`."
msgstr ""

# 7265c78912364d31b2ca2bb82fa6f5ab
#: ../../../../1.9/docs/releases/1.3.txt:682
msgid "``mod_python`` support"
msgstr ""

# a156911dec8e4f1dac9c636752c4507e
#: ../../../../1.9/docs/releases/1.3.txt:684
msgid ""
"The ``mod_python`` library has not had a release since 2007 or a commit "
"since 2008. The Apache Foundation board voted to remove ``mod_python`` from "
"the set of active projects in its version control repositories, and its lead"
" developer has shifted all of his efforts toward the lighter, slimmer, more "
"stable, and more flexible ``mod_wsgi`` backend."
msgstr ""

# 1c77adea0f6a4948883437c98d305b38
#: ../../../../1.9/docs/releases/1.3.txt:690
msgid ""
"If you are currently using the ``mod_python`` request handler, you should "
"redeploy your Django projects using another request handler. :doc:`mod_wsgi "
"</howto/deployment/wsgi/modwsgi>` is the request handler recommended by the "
"Django project, but FastCGI is also supported. Support for ``mod_python`` "
"deployment will be removed in Django 1.5."
msgstr ""

# f7fe23d4e5e54a1a9f07d3a51abdf306
#: ../../../../1.9/docs/releases/1.3.txt:697
msgid "Function-based generic views"
msgstr ""

# 723bfb72016b4e109844e5fd44b35a4e
#: ../../../../1.9/docs/releases/1.3.txt:699
msgid ""
"As a result of the introduction of class-based generic views, the function-"
"based generic views provided by Django have been deprecated. The following "
"modules and the views they contain have been deprecated:"
msgstr ""

# 134904b6907a4b249c3df6a5ac0e9d90
#: ../../../../1.9/docs/releases/1.3.txt:703
msgid "``django.views.generic.create_update``"
msgstr ""

# 56c673b86c1a46718deedc89d94645d1
#: ../../../../1.9/docs/releases/1.3.txt:704
msgid "``django.views.generic.date_based``"
msgstr ""

# 3b649bfd0640491683b450d291257439
#: ../../../../1.9/docs/releases/1.3.txt:705
msgid "``django.views.generic.list_detail``"
msgstr ""

# 5d8141a3adc54c48aecc0435026bc677
#: ../../../../1.9/docs/releases/1.3.txt:706
msgid "``django.views.generic.simple``"
msgstr ""

# 5962352d302f483eb6130df9141d677e
#: ../../../../1.9/docs/releases/1.3.txt:709
msgid "Test client response ``template`` attribute"
msgstr ""

# f56a676b674940cfbcd8da6f4fd57c67
#: ../../../../1.9/docs/releases/1.3.txt:711
msgid ""
"Django's :ref:`test client <test-client>` returns "
":class:`~django.test.Response` objects annotated with extra testing "
"information. In Django versions prior to 1.3, this included a ``template`` "
"attribute containing information about templates rendered in generating the "
"response: either None, a single :class:`~django.template.Template` object, "
"or a list of :class:`~django.template.Template` objects. This inconsistency "
"in return values (sometimes a list, sometimes not) made the attribute "
"difficult to work with."
msgstr ""

# ac9226def9084052b2f80034a52a7e98
#: ../../../../1.9/docs/releases/1.3.txt:720
msgid ""
"In Django 1.3 the ``template`` attribute is deprecated in favor of a new "
":attr:`~django.test.Response.templates` attribute, which is always a list, "
"even if it has only a single element or no elements."
msgstr ""

# d5bfca8753b04cc98511d71c63869351
#: ../../../../1.9/docs/releases/1.3.txt:725
msgid "``DjangoTestRunner``"
msgstr ""

# d2dd06ae93e746fd919bb951b34a734a
#: ../../../../1.9/docs/releases/1.3.txt:727
msgid ""
"As a result of the introduction of support for unittest2, the features of "
"``django.test.simple.DjangoTestRunner`` (including fail-fast and Ctrl-C test"
" termination) have been made redundant. In view of this redundancy, "
"``DjangoTestRunner`` has been turned into an empty placeholder class, and "
"will be removed entirely in Django 1.5."
msgstr ""

# f45e40682f0d4b58a394da1e56bb8e82
#: ../../../../1.9/docs/releases/1.3.txt:734
msgid "Changes to :ttag:`url` and :ttag:`ssi`"
msgstr ""

# eb50d3811fd6435d82fb8d419aa2f8f8
#: ../../../../1.9/docs/releases/1.3.txt:736
msgid ""
"Most template tags will allow you to pass in either constants or variables "
"as arguments -- for example::"
msgstr ""

# 19a79669a7f747eb99332867a3f625b5
#: ../../../../1.9/docs/releases/1.3.txt:741
msgid ""
"allows you to specify a base template as a constant, but if you have a "
"context variable ``templ`` that contains the value ``base.html``::"
msgstr ""

# 1d0af66bb9834f40bd3a2ee1653ea8fd
#: ../../../../1.9/docs/releases/1.3.txt:746
msgid "is also legal."
msgstr ""

# 0ad4c53dc0ae4c6eb97d8a269ce129b7
#: ../../../../1.9/docs/releases/1.3.txt:748
msgid ""
"However, due to an accident of history, the :ttag:`url` and :ttag:`ssi` are "
"different. These tags use the second, quoteless syntax, but interpret the "
"argument as a constant. This means it isn't possible to use a context "
"variable as the target of a :ttag:`url` and :ttag:`ssi` tag."
msgstr ""

# 09c3482b3e6c43c7a4956a78b31a8a86
#: ../../../../1.9/docs/releases/1.3.txt:754
msgid ""
"Django 1.3 marks the start of the process to correct this historical "
"accident. Django 1.3 adds a new template library -- ``future`` -- that "
"provides alternate implementations of the :ttag:`url` and :ttag:`ssi` "
"template tags. This ``future`` library implement behavior that makes the "
"handling of the first argument consistent with the handling of all other "
"variables. So, an existing template that contains::"
msgstr ""

# 88666193e97d47658be4482c76870964
#: ../../../../1.9/docs/releases/1.3.txt:763
msgid "should be replaced with::"
msgstr ""

# 86a07cc5e8a4401b9b7dbc07f30650d1
#: ../../../../1.9/docs/releases/1.3.txt:768
msgid ""
"The tags implementing the old behavior have been deprecated, and in Django "
"1.5, the old behavior will be replaced with the new behavior. To ensure "
"compatibility with future versions of Django, existing templates should be "
"modified to use the new ``future`` libraries and syntax."
msgstr ""

# bffd3222d54c4bfaba79e720427ec988
#: ../../../../1.9/docs/releases/1.3.txt:775
msgid "Changes to the login methods of the admin"
msgstr ""

# e0ea52419f4d421e97dbf16c781cd86f
#: ../../../../1.9/docs/releases/1.3.txt:777
msgid ""
"In previous version the admin app defined login methods in multiple "
"locations and ignored the almost identical implementation in the already "
"used auth app. A side effect of this duplication was the missing adoption of"
" the changes made in r12634_ to support a broader set of characters for "
"usernames."
msgstr ""

# bf676482f8964cbeb20c6574af605dc6
#: ../../../../1.9/docs/releases/1.3.txt:782
msgid ""
"This release refactors the admin's login mechanism to use a subclass of the "
":class:`~django.contrib.auth.forms.AuthenticationForm` instead of a manual "
"form validation. The previously undocumented method "
"``'django.contrib.admin.sites.AdminSite.display_login_form'`` has been "
"removed in favor of a new :attr:`~django.contrib.admin.AdminSite.login_form`"
" attribute."
msgstr ""

# b5cb4840a1ea4c9f8d7bda1b34d64752
#: ../../../../1.9/docs/releases/1.3.txt:792
msgid "``reset`` and ``sqlreset`` management commands"
msgstr ""

# 462934c993c641a2a29118343a07ede0
#: ../../../../1.9/docs/releases/1.3.txt:794
msgid ""
"Those commands have been deprecated. The ``flush`` and ``sqlflush`` commands"
" can be used to delete everything. You can also use ALTER TABLE or DROP "
"TABLE statements manually."
msgstr ""

# 2b601fe8c8af4cbb8dfc58f9bc8970dd
#: ../../../../1.9/docs/releases/1.3.txt:802
msgid ""
"The function-based :setting:`TEST_RUNNER` previously used to execute the "
"GeoDjango test suite, ``django.contrib.gis.tests.run_gis_tests``, was "
"deprecated for the class-based runner, "
"``django.contrib.gis.tests.GeoDjangoTestSuiteRunner``."
msgstr ""

# eb8b3a93aa6a4f52888c7100d1ab7983
#: ../../../../1.9/docs/releases/1.3.txt:807
msgid ""
"Previously, calling :meth:`~django.contrib.gis.geos.GEOSGeometry.transform` "
"would silently do nothing when GDAL wasn't available.  Now, a "
":class:`~django.contrib.gis.geos.GEOSException` is properly raised to "
"indicate possible faulty application code.  A warning is now raised if "
":meth:`~django.contrib.gis.geos.GEOSGeometry.transform` is called when the "
"SRID of the geometry is less than 0 or ``None``."
msgstr ""

# b56960150d70487f97d227d415736238
#: ../../../../1.9/docs/releases/1.3.txt:816
msgid "``CZBirthNumberField.clean``"
msgstr ""

# fa4c2e692b424db0af3be7bb45c4f740
#: ../../../../1.9/docs/releases/1.3.txt:818
msgid ""
"Previously this field's ``clean()`` method accepted a second, gender, "
"argument which allowed stronger validation checks to be made, however since "
"this argument could never actually be passed from the Django form machinery "
"it is now pending deprecation."
msgstr ""

# 3991aa216cd54d6b9b3c57db2e430c4c
#: ../../../../1.9/docs/releases/1.3.txt:824
msgid "``CompatCookie``"
msgstr ""

# 1172a5a105eb44eba4b91a9ab5baa75a
#: ../../../../1.9/docs/releases/1.3.txt:826
msgid ""
"Previously, ``django.http`` exposed an undocumented ``CompatCookie`` class, "
"which was a bugfix wrapper around the standard library ``SimpleCookie``. As "
"the fixes are moving upstream, this is now deprecated - you should use "
"``from django.http import SimpleCookie`` instead."
msgstr ""

# 9b1d578dff314e46bc1688a9c00dab49
#: ../../../../1.9/docs/releases/1.3.txt:834
msgid "Loading of *project-level* translations"
msgstr ""

# 3be59a6e2d244bf0b985521ca1e4cb0f
#: ../../../../1.9/docs/releases/1.3.txt:836
msgid ""
"This release of Django starts the deprecation process for inclusion of "
"translations located under the so-called *project path* in the translation "
"building process performed at runtime. The :setting:`LOCALE_PATHS` setting "
"can be used for the same task by adding the filesystem path to a ``locale`` "
"directory containing project-level translations to the value of that "
"setting."
msgstr ""

# 8390555abaa044ecbde45973e3521620
#: ../../../../1.9/docs/releases/1.3.txt:842
msgid "Rationale for this decision:"
msgstr ""

# 419ce7a680ee400daabbeb35f463a007
#: ../../../../1.9/docs/releases/1.3.txt:844
msgid ""
"The *project path* has always been a loosely defined concept (actually, the "
"directory used for locating project-level translations is the directory "
"containing the settings module) and there has been a shift in other parts of"
" the framework to stop using it as a reference for location of assets at "
"runtime."
msgstr ""

# 90a97cbdd54c4ea2a19bdadc717024c3
#: ../../../../1.9/docs/releases/1.3.txt:850
msgid ""
"Detection of the ``locale`` subdirectory tends to fail when the deployment "
"scenario is more complex than the basic one. e.g. it fails when the settings"
" module is a directory (ticket #10765)."
msgstr ""

# 9610547417914cc582dda8eaa6f0671c
#: ../../../../1.9/docs/releases/1.3.txt:854
msgid ""
"There are potential strange development- and deployment-time problems like "
"the fact that the ``project_dir/locale/`` subdir can generate spurious error"
" messages when the project directory is added to the Python path "
"(``manage.py runserver`` does this) and then it clashes with the equally "
"named standard library module, this is a typical warning message::"
msgstr ""

# e303c50a7fdb49ab9cbe650eb099f2af
#: ../../../../1.9/docs/releases/1.3.txt:864
msgid ""
"This location wasn't included in the translation building process for "
"JavaScript literals. This deprecation removes such inconsistency."
msgstr ""

# 44fb974fbe914f8f9dfb495f5c8103af
#: ../../../../1.9/docs/releases/1.3.txt:869
msgid "``PermWrapper`` moved to ``django.contrib.auth.context_processors``"
msgstr ""

# f405cb412ca7425dbeb34571b2131e12
#: ../../../../1.9/docs/releases/1.3.txt:871
msgid ""
"In Django 1.2, we began the process of changing the location of the ``auth``"
" context processor from ``django.core.context_processors`` to "
"``django.contrib.auth.context_processors``. However, the ``PermWrapper`` "
"support class was mistakenly omitted from that migration. In Django 1.3, the"
" ``PermWrapper`` class has also been moved to "
"``django.contrib.auth.context_processors``, along with the "
"``PermLookupDict`` support class. The new classes are functionally identical"
" to their old versions; only the module location has changed."
msgstr ""

# 43bd4a88e2534215be418e2ccd665437
#: ../../../../1.9/docs/releases/1.3.txt:881
msgid "Removal of ``XMLField``"
msgstr ""

# 1944d0a71c4542c3a4254a64d2d80cbf
#: ../../../../1.9/docs/releases/1.3.txt:883
msgid ""
"When Django was first released, Django included an ``XMLField`` that "
"performed automatic XML validation for any field input. However, this "
"validation function hasn't been performed since the introduction of "
"``newforms``, prior to the 1.0 release. As a result, ``XMLField`` as "
"currently implemented is functionally indistinguishable from a simple "
":class:`~django.db.models.TextField`."
msgstr ""

# 5b05867288c74c32a1900d4d6d1d37fe
#: ../../../../1.9/docs/releases/1.3.txt:889
msgid ""
"For this reason, Django 1.3 has fast-tracked the deprecation of ``XMLField``"
" -- instead of a two-release deprecation, ``XMLField`` will be removed "
"entirely in Django 1.4."
msgstr ""

# 1e4b9f4d871c4a0a915d90681a51cf88
#: ../../../../1.9/docs/releases/1.3.txt:893
msgid ""
"It's easy to update your code to accommodate this change -- just replace all"
" uses of ``XMLField`` with ``TextField``, and remove the ``schema_path`` "
"keyword argument (if it is specified)."
msgstr ""

# 2dac4c1c4d134f3a8ced579fd8c9a8e1
#: ../../../../1.9/docs/releases/1.3.1.txt:3
msgid "Django 1.3.1 release notes"
msgstr ""

# b6d01796db294ebd978a1adc5adfd4da
#: ../../../../1.9/docs/releases/1.3.1.txt:7
msgid "Welcome to Django 1.3.1!"
msgstr ""

# 26debb1dfd614bae8e96a68b5464de7d
#: ../../../../1.9/docs/releases/1.3.1.txt:9
msgid ""
"This is the first security release in the Django 1.3 series, fixing several "
"security issues in Django 1.3.  Django 1.3.1 is a recommended upgrade for "
"all users of Django 1.3."
msgstr ""

# 8324954434a0476592ad9ad4e5815162
#: ../../../../1.9/docs/releases/1.3.2.txt:3
msgid "Django 1.3.2 release notes"
msgstr ""

# 85f2aa0dadc94aedb0da01c1fab0a6ca
# 6560b7cd46f248c892aecad5602c553a
#: ../../../../1.9/docs/releases/1.3.2.txt:5
#: ../../../../1.9/docs/releases/1.4.1.txt:5
msgid "*July 30, 2012*"
msgstr ""

# 969cc3c1720c4df1ad484587007fb566
#: ../../../../1.9/docs/releases/1.3.2.txt:7
msgid ""
"This is the second security release in the Django 1.3 series, fixing several"
" security issues in Django 1.3. Django 1.3.2 is a recommended upgrade for "
"all users of Django 1.3."
msgstr ""

# 3695092a13a7434397708a2ee171766e
#: ../../../../1.9/docs/releases/1.3.3.txt:3
msgid "Django 1.3.3 release notes"
msgstr ""

# 285f8ac867364cf0a1edca0ee8218d9c
#: ../../../../1.9/docs/releases/1.3.3.txt:5
msgid "*August 1, 2012*"
msgstr ""

# 60cf3339ba884bfdb23d0d59c89f4d80
#: ../../../../1.9/docs/releases/1.3.3.txt:7
msgid ""
"Following Monday's security release of :doc:`Django 1.3.2 "
"</releases/1.3.2>`, we began receiving reports that one of the fixes applied"
" was breaking Python 2.4 compatibility for Django 1.3. Since Python 2.4 is a"
" supported Python version for that release series, this release fixes "
"compatibility with Python 2.4."
msgstr ""

# a3861e645e344c44851ebdf661625265
#: ../../../../1.9/docs/releases/1.3.4.txt:3
msgid "Django 1.3.4 release notes"
msgstr ""

# f60d184e36324b5992ccbbde03514a61
# 3dc1e698ff9b4a859abc123a38b25d72
#: ../../../../1.9/docs/releases/1.3.4.txt:5
#: ../../../../1.9/docs/releases/1.4.2.txt:5
msgid "*October 17, 2012*"
msgstr ""

# be52eeecffc24d8da0f95534f28956cb
#: ../../../../1.9/docs/releases/1.3.4.txt:7
msgid "This is the fourth release in the Django 1.3 series."
msgstr ""

# cfd61f264efc4d088c70e6acdf72ca74
# 042e0c9fae6042ba8be64a52f3e05732
# 2cbd381547ca4dc381d03b3acd019088
# a34e73fcf1fe492496520631992c2b0f
# d4e5d0cdad5d4165b340c03ed77f5dc7
# 9f84f924079041c8979dd97e4ffc776e
#: ../../../../1.9/docs/releases/1.3.4.txt:10
#: ../../../../1.9/docs/releases/1.3.5.txt:17
#: ../../../../1.9/docs/releases/1.3.6.txt:14
#: ../../../../1.9/docs/releases/1.4.2.txt:10
#: ../../../../1.9/docs/releases/1.4.3.txt:17
#: ../../../../1.9/docs/releases/1.4.4.txt:15
msgid "Host header poisoning"
msgstr ""

# b0b43e0dc2244785990f3ae58a838a8e
# 346e7a93da2a424ba027612dcf403747
#: ../../../../1.9/docs/releases/1.3.4.txt:12
#: ../../../../1.9/docs/releases/1.4.2.txt:12
msgid ""
"Some parts of Django -- independent of end-user-written applications -- make"
" use of full URLs, including domain name, which are generated from the HTTP "
"Host header. Some attacks against this are beyond Django's ability to "
"control, and require the web server to be properly configured; Django's "
"documentation has for some time contained notes advising users on such "
"configuration."
msgstr ""

# 9795833493784189bc7eff91244be5f4
# 4a55ea952d234b04915b8ea3135ee7eb
#: ../../../../1.9/docs/releases/1.3.4.txt:18
#: ../../../../1.9/docs/releases/1.4.2.txt:18
msgid ""
"Django's own built-in parsing of the Host header is, however, still "
"vulnerable, as was reported to us recently. The Host header parsing in "
"Django 1.3.3 and Django 1.4.1 -- specifically, "
"``django.http.HttpRequest.get_host()`` -- was incorrectly handling "
"username/password information in the header. Thus, for example, the "
"following Host header would be accepted by Django when running on "
"\"validsite.com\"::"
msgstr ""

# 73f724cf92c343a9b15cf55d47ecf43b
# 591730f869a3407db641fab90f410012
#: ../../../../1.9/docs/releases/1.3.4.txt:27
#: ../../../../1.9/docs/releases/1.4.2.txt:27
msgid ""
"Using this, an attacker can cause parts of Django -- particularly the "
"password-reset mechanism -- to generate and display arbitrary URLs to users."
msgstr ""

# 0c66dcbc698e4238aeda06c54a56a73e
# cb6caf49ce85401ab73a11a5c34c8f78
#: ../../../../1.9/docs/releases/1.3.4.txt:30
#: ../../../../1.9/docs/releases/1.4.2.txt:30
msgid ""
"To remedy this, the parsing in ``HttpRequest.get_host()`` is being modified;"
" Host headers which contain potentially dangerous content (such as "
"username/password pairs) now raise the exception "
":exc:`django.core.exceptions.SuspiciousOperation`."
msgstr ""

# fa6519fc112b48bcb89bc5f61756ad17
# cb682e3afa5c4f4bb9dee2275ad60aec
#: ../../../../1.9/docs/releases/1.3.4.txt:35
#: ../../../../1.9/docs/releases/1.4.2.txt:35
msgid ""
"Details of this issue were initially posted online as a `security "
"advisory`_."
msgstr ""

# 59cfa1c921704b068b02f2793e9afcb2
#: ../../../../1.9/docs/releases/1.3.5.txt:3
msgid "Django 1.3.5 release notes"
msgstr ""

# 7fcdde4c1c9443e695a5b4c4bb01d1d7
# 73cbc414293d41edab5562cee0df6cf0
#: ../../../../1.9/docs/releases/1.3.5.txt:5
#: ../../../../1.9/docs/releases/1.4.3.txt:5
msgid "*December 10, 2012*"
msgstr ""

# 2801bfae11484e9ca79a75e9bb54aa5f
#: ../../../../1.9/docs/releases/1.3.5.txt:7
msgid ""
"Django 1.3.5 addresses two security issues present in previous Django "
"releases in the 1.3 series."
msgstr ""

# eb954af0e7474ff48edbddc976a7c192
# 6c23687a1e944970927914741720347a
#: ../../../../1.9/docs/releases/1.3.5.txt:10
#: ../../../../1.9/docs/releases/1.4.3.txt:10
msgid ""
"Please be aware that this security release is slightly different from "
"previous ones. Both issues addressed here have been dealt with in prior "
"security updates to Django. In one case, we have received ongoing reports of"
" problems, and in the other we've chosen to take further steps to tighten up"
" Django's code in response to independent discovery of potential problems "
"from multiple sources."
msgstr ""

# 06e6eb97bbde43aab4b8bbd3ecf2a76c
# 828fa5c45b2c432190271ed1ea5473dc
#: ../../../../1.9/docs/releases/1.3.5.txt:19
#: ../../../../1.9/docs/releases/1.4.3.txt:19
msgid ""
"Several earlier Django security releases focused on the issue of poisoning "
"the HTTP Host header, causing Django to generate URLs pointing to arbitrary,"
" potentially-malicious domains."
msgstr ""

# b6e5c22ba5a54b34bd1fdf20929ec0b4
# 2144dc17d1d247438abac3a9eae9c737
#: ../../../../1.9/docs/releases/1.3.5.txt:23
#: ../../../../1.9/docs/releases/1.4.3.txt:23
msgid ""
"In response to further input received and reports of continuing issues "
"following the previous release, we're taking additional steps to tighten "
"Host header validation. Rather than attempt to accommodate all features HTTP"
" supports here, Django's Host header validation attempts to support a "
"smaller, but far more common, subset:"
msgstr ""

# 3acbb04da8a3408190605d69368ada3c
# 1bfc96d7514747eabae90eaccc3b6b5e
#: ../../../../1.9/docs/releases/1.3.5.txt:29
#: ../../../../1.9/docs/releases/1.4.3.txt:29
msgid ""
"Hostnames must consist of characters ``[A-Za-z0-9]`` plus hyphen ('-') or "
"dot ('.')."
msgstr ""

# d5b2095105e34a1daa5944af861f22c5
# 7fbf69e7f69d4d8cbd2047e2ab942e7c
#: ../../../../1.9/docs/releases/1.3.5.txt:31
#: ../../../../1.9/docs/releases/1.4.3.txt:31
msgid "IP addresses -- both IPv4 and IPv6 -- are permitted."
msgstr ""

# 5c9b5fac4ce8426489263cafba343759
# e7aba59111264b21bcf2efb5ecd7218b
#: ../../../../1.9/docs/releases/1.3.5.txt:32
#: ../../../../1.9/docs/releases/1.4.3.txt:32
msgid "Port, if specified, is numeric."
msgstr ""

# cd448486b1cd498d874a9d7c26907d39
# b4c69ff274534b0f845e074376a08106
#: ../../../../1.9/docs/releases/1.3.5.txt:34
#: ../../../../1.9/docs/releases/1.4.3.txt:34
msgid ""
"Any deviation from this will now be rejected, raising the exception "
":exc:`django.core.exceptions.SuspiciousOperation`."
msgstr ""

# 8e058c75059f4e3aae6fe1fb58af544a
# 952051b16f51433d83b1e63ee85db379
#: ../../../../1.9/docs/releases/1.3.5.txt:38
#: ../../../../1.9/docs/releases/1.4.3.txt:38
msgid "Redirect poisoning"
msgstr ""

# 90f4ef9d83fb4adb86ebf96b37800cc4
# 93ce93cd3d7940ea9945bea2b74935f7
#: ../../../../1.9/docs/releases/1.3.5.txt:40
#: ../../../../1.9/docs/releases/1.4.3.txt:40
msgid ""
"Also following up on a previous issue: in July of this year, we made changes"
" to Django's HTTP redirect classes, performing additional validation of the "
"scheme of the URL to redirect to (since, both within Django's own supplied "
"applications and many third-party applications, accepting a user-supplied "
"redirect target is a common pattern)."
msgstr ""

# 623a07ce1de1478d9a28392d377dfc3a
# 8e273ddd214547ba836ba3684abdc751
#: ../../../../1.9/docs/releases/1.3.5.txt:46
#: ../../../../1.9/docs/releases/1.4.3.txt:46
msgid ""
"Since then, two independent audits of the code turned up further potential "
"problems. So, similar to the Host-header issue, we are taking steps to "
"provide tighter validation in response to reported problems (primarily with "
"third-party applications, but to a certain extent also within Django "
"itself). This comes in two parts:"
msgstr ""

# 1afa54536bc54e459f5ab4a0230aeb63
# ea2a9638f6e54360b93ce598043d0b47
#: ../../../../1.9/docs/releases/1.3.5.txt:52
#: ../../../../1.9/docs/releases/1.4.3.txt:52
msgid ""
"1. A new utility function, ``django.utils.http.is_safe_url``, is added; this"
" function takes a URL and a hostname, and checks that the URL is either "
"relative, or if absolute matches the supplied hostname. This function is "
"intended for use whenever user-supplied redirect targets are accepted, to "
"ensure that such redirects cannot lead to arbitrary third-party sites."
msgstr ""

# ec6debf17f4643a8800f7f1e462df167
# 37d6c9aeb9db433d9e9f0be073ddd0a6
#: ../../../../1.9/docs/releases/1.3.5.txt:58
#: ../../../../1.9/docs/releases/1.4.3.txt:58
msgid ""
"2. All of Django's own built-in views -- primarily in the authentication "
"system -- which allow user-supplied redirect targets now use ``is_safe_url``"
" to validate the supplied URL."
msgstr ""

# 2cbb15c453f645dca61864739b17ebac
#: ../../../../1.9/docs/releases/1.3.6.txt:3
msgid "Django 1.3.6 release notes"
msgstr ""

# 8376a4d3927e488781b5ca2156132925
# 3d57844de0d1441ba0fd68fd56febf66
#: ../../../../1.9/docs/releases/1.3.6.txt:5
#: ../../../../1.9/docs/releases/1.4.4.txt:5
msgid "*February 19, 2013*"
msgstr ""

# 7c0ac279dace4fc089e2ad093552d49f
#: ../../../../1.9/docs/releases/1.3.6.txt:7
msgid ""
"Django 1.3.6 fixes four security issues present in previous Django releases "
"in the 1.3 series."
msgstr ""

# c722139923a44f3ea94561903bed1822
#: ../../../../1.9/docs/releases/1.3.6.txt:10
msgid "This is the sixth bugfix/security release in the Django 1.3 series."
msgstr ""

# 362ab160b8bb475ea30582535dd5afab
# 630636db0fb84231be6273fafaee3c32
#: ../../../../1.9/docs/releases/1.3.6.txt:16
#: ../../../../1.9/docs/releases/1.4.4.txt:17
msgid ""
"Some parts of Django -- independent of end-user-written applications -- make"
" use of full URLs, including domain name, which are generated from the HTTP "
"Host header. Django's documentation has for some time contained notes "
"advising users on how to configure webservers to ensure that only valid Host"
" headers can reach the Django application. However, it has been reported to "
"us that even with the recommended webserver configurations there are still "
"techniques available for tricking many common webservers into supplying the "
"application with an incorrect and possibly malicious Host header."
msgstr ""

# 15833fa66a9a4b80a9bf2fb5e4940742
#: ../../../../1.9/docs/releases/1.3.6.txt:25
msgid ""
"For this reason, Django 1.3.6 adds a new setting, ``ALLOWED_HOSTS``, which "
"should contain an explicit list of valid host/domain names for this site. A "
"request with a Host header not matching an entry in this list will raise "
"``SuspiciousOperation`` if ``request.get_host()`` is called. For full "
"details see the documentation for the :setting:`ALLOWED_HOSTS` setting."
msgstr ""

# 4906ac514b5140f2b96627e1b4c5ff61
#: ../../../../1.9/docs/releases/1.3.6.txt:31
msgid ""
"The default value for this setting in Django 1.3.6 is ``['*']`` (matching "
"any host), for backwards-compatibility, but we strongly encourage all sites "
"to set a more restrictive value."
msgstr ""

# 2b947fc039cb45cc90e664b42d702cb5
# 8c5aac2177ce40d8803f15226f5912d8
#: ../../../../1.9/docs/releases/1.3.6.txt:35
#: ../../../../1.9/docs/releases/1.4.4.txt:36
msgid ""
"This host validation is disabled when ``DEBUG`` is ``True`` or when running "
"tests."
msgstr ""

# 275fe7fea6754d6a8becd6795cee759c
# fe3c4ae37bfd460a84f75a0f8a4cbdc1
#: ../../../../1.9/docs/releases/1.3.6.txt:39
#: ../../../../1.9/docs/releases/1.4.4.txt:40
msgid "XML deserialization"
msgstr ""

# f94fbf30729447db98ebefd541de8144
#: ../../../../1.9/docs/releases/1.3.6.txt:41
msgid ""
"The XML parser in the Python standard library is vulnerable to a number of "
"attacks via external entities and entity expansion. Django uses this parser "
"for deserializing XML-formatted database fixtures. The fixture deserializer "
"is not intended for use with untrusted data, but in order to err on the side"
" of safety in Django 1.3.6 the XML deserializer refuses to parse an XML "
"document with a DTD (DOCTYPE definition), which closes off these attack "
"avenues."
msgstr ""

# 4178f1f8ede44c6fa25c4746d5998f04
# 75fbb3fdb9c048e7bc34a24f37b2f4b4
#: ../../../../1.9/docs/releases/1.3.6.txt:48
#: ../../../../1.9/docs/releases/1.4.4.txt:49
msgid ""
"These issues in the Python standard library are CVE-2013-1664 and "
"CVE-2013-1665. More information available `from the Python security team`_."
msgstr ""

# fbe22e8e778c4c31bc515587dd6c7821
# 73d7582c485a4c2eb376aa1bc473b3ba
#: ../../../../1.9/docs/releases/1.3.6.txt:51
#: ../../../../1.9/docs/releases/1.4.4.txt:52
msgid ""
"Django's XML serializer does not create documents with a DTD, so this should"
" not cause any issues with the typical round-trip from ``dumpdata`` to "
"``loaddata``, but if you feed your own XML documents to the ``loaddata`` "
"management command, you will need to ensure they do not contain a DTD."
msgstr ""

# 84d5246414264358a568c7be6fc9dada
# eb49f52d5542487e9baf9501fb9b28dd
#: ../../../../1.9/docs/releases/1.3.6.txt:60
#: ../../../../1.9/docs/releases/1.4.4.txt:61
msgid "Formset memory exhaustion"
msgstr ""

# bf4d64ceb38a4faaa31e446fbf52656f
# c7a0ff156432491c91df18c2583b0277
#: ../../../../1.9/docs/releases/1.3.6.txt:62
#: ../../../../1.9/docs/releases/1.4.4.txt:63
msgid ""
"Previous versions of Django did not validate or limit the form-count data "
"provided by the client in a formset's management form, making it possible to"
" exhaust a server's available memory by forcing it to create very large "
"numbers of forms."
msgstr ""

# 219447841700462f8f3373e6556527db
#: ../../../../1.9/docs/releases/1.3.6.txt:67
msgid ""
"In Django 1.3.6, all formsets have a strictly-enforced maximum number of "
"forms (1000 by default, though it can be set higher via the ``max_num`` "
"formset factory argument)."
msgstr ""

# afc8f1a3ee6d43d68767d146b2a69fb8
# 3ca0fd7ad76144859bd06d618d7378bd
#: ../../../../1.9/docs/releases/1.3.6.txt:73
#: ../../../../1.9/docs/releases/1.4.4.txt:74
msgid "Admin history view information leakage"
msgstr ""

# 4f517f7dc749490591f0abc7afcdf51b
#: ../../../../1.9/docs/releases/1.3.6.txt:75
msgid ""
"In previous versions of Django, an admin user without change permission on a"
" model could still view the unicode representation of instances via their "
"admin history log. Django 1.3.6 now limits the admin history log view for an"
" object to users with change permission for that model."
msgstr ""

# 4ac39f52fa674bd3bd346b0f0f2057e1
#: ../../../../1.9/docs/releases/1.3.7.txt:3
msgid "Django 1.3.7 release notes"
msgstr ""

# f4f4d1eee35f4554823e9543edeb2f31
# 61c7925e4b4444cf8c0378d0d5625e49
#: ../../../../1.9/docs/releases/1.3.7.txt:5
#: ../../../../1.9/docs/releases/1.4.5.txt:5
msgid "*February 20, 2013*"
msgstr ""

# 3a3b44b19f9a40f3975be24af8927bde
#: ../../../../1.9/docs/releases/1.3.7.txt:7
msgid ""
"Django 1.3.7 corrects a packaging problem with yesterday's :doc:`1.3.6 "
"release </releases/1.3.6>`."
msgstr ""

# 0ffb0db57abe44d7a3de19be8b63a7b2
# 42d90d08bad949d49ca469090fb3569a
#: ../../../../1.9/docs/releases/1.3.7.txt:10
#: ../../../../1.9/docs/releases/1.4.5.txt:10
msgid ""
"The release contained stray ``.pyc`` files that caused \"bad magic number\" "
"errors when running with some versions of Python. This releases corrects "
"this, and also fixes a bad documentation link in the project template "
"``settings.py`` file generated by ``manage.py startproject``."
msgstr ""

# e843030ecf064044a386025e13ceafc2
#: ../../../../1.9/docs/releases/1.4.txt:3
msgid "Django 1.4 release notes"
msgstr ""

# 7811f1b2eb2c464bad19a1fffcef138e
#: ../../../../1.9/docs/releases/1.4.txt:5
msgid "*March 23, 2012*"
msgstr ""

# b89db63f81a04d6d8e2960b7bded2602
#: ../../../../1.9/docs/releases/1.4.txt:7
msgid "Welcome to Django 1.4!"
msgstr ""

# a9c2d18ee45b4fd2ad91f5391f02fe6c
#: ../../../../1.9/docs/releases/1.4.txt:9
msgid ""
"These release notes cover the `new features`_, as well as some `backwards "
"incompatible changes`_ you'll want to be aware of when upgrading from Django"
" 1.3 or older versions. We've also dropped some features, which are detailed"
" in :ref:`our deprecation plan <deprecation-removed-in-1.4>`, and we've "
"`begun the deprecation process for some features`_."
msgstr ""

# b5b66237ac7c49b59ce2361439e0d6bd
#: ../../../../1.9/docs/releases/1.4.txt:23
msgid ""
"The biggest new feature in Django 1.4 is `support for time zones`_ when "
"handling date/times. When enabled, this Django will store date/times in UTC,"
" use timezone-aware objects internally, and translate them to users' local "
"timezones for display."
msgstr ""

# faecc01ffc9140af8393803a4711833a
#: ../../../../1.9/docs/releases/1.4.txt:28
msgid ""
"If you're upgrading an existing project to Django 1.4, switching to the "
"time- zone aware mode may take some care: the new mode disallows some rather"
" sloppy behavior that used to be accepted. We encourage anyone who's "
"upgrading to check out the :ref:`timezone migration guide <time-zones-"
"migration-guide>` and the :ref:`timezone FAQ <time-zones-faq>` for useful "
"pointers."
msgstr ""

# eaf91ed4a2e64d4f9b18d4fad9a7acd1
#: ../../../../1.9/docs/releases/1.4.txt:34
msgid "Other notable new features in Django 1.4 include:"
msgstr ""

# ff8a8d1651654affa60ae793dbe82062
#: ../../../../1.9/docs/releases/1.4.txt:36
msgid ""
"A number of ORM improvements, including `SELECT FOR UPDATE support`_, the "
"ability to `bulk insert <#model-objects-bulk-create-in-the-orm>`_ large "
"datasets for improved performance, and `QuerySet.prefetch_related`_, a "
"method to batch-load related objects in areas where "
":meth:`~django.db.models.query.QuerySet.select_related` doesn't work."
msgstr ""

# 2183dff372554b2bb483387398ff9d69
#: ../../../../1.9/docs/releases/1.4.txt:43
msgid ""
"Some nice security additions, including `improved password hashing`_ "
"(featuring PBKDF2_ and bcrypt_ support), new `tools for cryptographic "
"signing`_, several `CSRF improvements`_, and `simple clickjacking "
"protection`_."
msgstr ""

# 65004a211fad46c88dac897de784d27c
#: ../../../../1.9/docs/releases/1.4.txt:48
msgid ""
"An `updated default project layout and manage.py`_ that removes the "
"\"magic\" from prior versions. And for those who don't like the new layout, "
"you can use `custom project and app templates`_ instead!"
msgstr ""

# 8e0e2c639d1e4112adf92fd303db2d7f
#: ../../../../1.9/docs/releases/1.4.txt:52
msgid "`Support for in-browser testing frameworks`_ (like Selenium_)."
msgstr ""

# e03e1149949f4cbd9a70278b5b8c9e79
#: ../../../../1.9/docs/releases/1.4.txt:54
msgid "... and a whole lot more; `see below <#what-s-new-in-django-1-4>`_!"
msgstr ""

# 92a5d6cbebd0460b9596ad28efbd07d5
#: ../../../../1.9/docs/releases/1.4.txt:56
msgid ""
"Wherever possible we try to introduce new features in a backwards-compatible"
" manner per :doc:`our API stability policy </misc/api-stability>` policy. "
"However, as with previous releases, Django 1.4 ships with some minor "
"`backwards incompatible changes`_; people upgrading from previous versions "
"of Django should read that list carefully."
msgstr ""

# d51276f7f1024a938d95a6c9b7a00ff1
#: ../../../../1.9/docs/releases/1.4.txt:65
msgid ""
"Django 1.4 has dropped support for Python 2.4. Python 2.5 is now the minimum"
" required Python version. Django is tested and supported on Python 2.5, 2.6 "
"and 2.7."
msgstr ""

# 6596fa4e496142e1821c317f4124b26d
#: ../../../../1.9/docs/releases/1.4.txt:69
msgid ""
"This change should affect only a small number of Django users, as most "
"operating-system vendors today are shipping Python 2.5 or newer as their "
"default version. If you're still using Python 2.4, however, you'll need to "
"stick to Django 1.3 until you can upgrade. Per :doc:`our support policy "
"</internals/release-process>`, Django 1.3 will continue to receive security "
"support until the release of Django 1.5."
msgstr ""

# 1def366ff30a42a890bc79b251c47014
#: ../../../../1.9/docs/releases/1.4.txt:76
msgid ""
"Django does not support Python 3.x at this time. At some point before the "
"release of Django 1.4, we plan to publish a document outlining our full "
"timeline for deprecating Python 2.x and moving to Python 3.x."
msgstr ""

# d99993b8bbd444b8964ff1faf249d10e
#: ../../../../1.9/docs/releases/1.4.txt:81
msgid "What's new in Django 1.4"
msgstr ""

# f608feb9b7a74a54be2eef6edd7238b9
#: ../../../../1.9/docs/releases/1.4.txt:84
msgid "Support for time zones"
msgstr ""

# 1adabc788d0e42148ae3a6087c8de743
#: ../../../../1.9/docs/releases/1.4.txt:86
msgid ""
"In previous versions, Django used \"naive\" date/times (that is, date/times "
"without an associated time zone), leaving it up to each developer to "
"interpret what a given date/time \"really means\". This can cause all sorts "
"of subtle timezone-related bugs."
msgstr ""

# 1e848e62245444b88a130ea098804e66
#: ../../../../1.9/docs/releases/1.4.txt:91
msgid ""
"In Django 1.4, you can now switch Django into a more correct, time-zone "
"aware mode. In this mode, Django stores date and  time information in UTC in"
" the database, uses time-zone-aware datetime objects internally and "
"translates them to the end user's time zone in templates and forms. Reasons "
"for using this feature include:"
msgstr ""

# f7046787e77b4267b42dfd3fc1dfb0bd
#: ../../../../1.9/docs/releases/1.4.txt:97
msgid "Customizing date and time display for users around the world."
msgstr ""

# 6e3af59d8304490cb87b0b9ceed6795d
#: ../../../../1.9/docs/releases/1.4.txt:99
msgid ""
"Storing datetimes in UTC for database portability and interoperability. "
"(This argument doesn't apply to PostgreSQL, because it already stores "
"timestamps with time zone information in Django 1.3.)"
msgstr ""

# 2c3a8938556d49f092e8feb868b3ec87
#: ../../../../1.9/docs/releases/1.4.txt:103
msgid "Avoiding data corruption problems around DST transitions."
msgstr ""

# b59ad52e866a4e4a8522ad782a11910a
#: ../../../../1.9/docs/releases/1.4.txt:105
msgid ""
"Time zone support is enabled by default in new projects created with "
":djadmin:`startproject`. If you want to use this feature in an existing "
"project, read the :ref:`migration guide <time-zones-migration-guide>`. If "
"you encounter problems, there's a helpful :ref:`FAQ <time-zones-faq>`."
msgstr ""

# c958d4577fec45cd8debf667f7000acd
#: ../../../../1.9/docs/releases/1.4.txt:111
msgid "Support for in-browser testing frameworks"
msgstr ""

# 9728d6ecac174c74b8b2d98b8fd8aaa0
#: ../../../../1.9/docs/releases/1.4.txt:113
msgid ""
"Django 1.4 supports integration with in-browser testing frameworks like "
"Selenium_. The new :class:`django.test.LiveServerTestCase` base class lets "
"you test the interactions between your site's front and back ends more "
"comprehensively. See the "
":class:`documentation<django.test.LiveServerTestCase>` for more details and "
"concrete examples."
msgstr ""

# cb897a8d458646589168551cc8411b10
#: ../../../../1.9/docs/releases/1.4.txt:123
msgid "Updated default project layout and ``manage.py``"
msgstr ""

# da6e4d0d377f48b1ab43cb59ddbc7696
#: ../../../../1.9/docs/releases/1.4.txt:125
msgid ""
"Django 1.4 ships with an updated default project layout and ``manage.py`` "
"file for the :djadmin:`startproject` management command. These fix some "
"issues with the previous ``manage.py`` handling of Python import paths that "
"caused double imports, trouble moving from development to deployment, and "
"other difficult-to-debug path issues."
msgstr ""

# 576404b8ed5d4a0b9bff16fca0d932c0
#: ../../../../1.9/docs/releases/1.4.txt:131
msgid ""
"The previous ``manage.py`` called functions that are now deprecated, and "
"thus projects upgrading to Django 1.4 should update their ``manage.py``. "
"(The old-style ``manage.py`` will continue to work as before until Django "
"1.6. In 1.5 it will raise ``DeprecationWarning``)."
msgstr ""

# f590906f0f9443f0b1c900322e5beaee
#: ../../../../1.9/docs/releases/1.4.txt:136
msgid "The new recommended ``manage.py`` file should look like this::"
msgstr ""

# c30e8dbe21a642559513b96f8f426554
#: ../../../../1.9/docs/releases/1.4.txt:148
msgid ""
"``{{ project_name }}`` should be replaced with the Python package name of "
"the actual project."
msgstr ""

# b1dabfaedfee48e0aadcdeba74b035fc
#: ../../../../1.9/docs/releases/1.4.txt:151
msgid ""
"If settings, URLconfs and apps within the project are imported or referenced"
" using the project name prefix (e.g. ``myproject.settings``, ``ROOT_URLCONF "
"= \"myproject.urls\"``, etc), the new ``manage.py`` will need to be moved "
"one directory up, so it is outside the project package rather than adjacent "
"to ``settings.py`` and ``urls.py``."
msgstr ""

# b8dde1d075d54051b25e53ccfd73ed3e
#: ../../../../1.9/docs/releases/1.4.txt:157
msgid "For instance, with the following layout::"
msgstr ""

# ad13a6758dea42709e9f57cdbbbee877
#: ../../../../1.9/docs/releases/1.4.txt:168
msgid ""
"You could import ``mysite.settings``, ``mysite.urls``, and ``mysite.myapp``,"
" but not ``settings``, ``urls``, or ``myapp`` as top-level modules."
msgstr ""

# 28d1dbf5dc524487822b5d46c09980f2
#: ../../../../1.9/docs/releases/1.4.txt:171
msgid ""
"Anything imported as a top-level module can be placed adjacent to the new "
"``manage.py``. For instance, to decouple \"myapp\" from the project module "
"and import it as just ``myapp``, place it outside the ``mysite/`` "
"directory::"
msgstr ""

# e85a2ed6e52d4d8980662bcaaa5d74bb
#: ../../../../1.9/docs/releases/1.4.txt:184
msgid ""
"If the same code is imported inconsistently (some places with the project "
"prefix, some places without it), the imports will need to be cleaned up when"
" switching to the new ``manage.py``."
msgstr ""

# cd6523554c0e4c959e293f4428431e40
#: ../../../../1.9/docs/releases/1.4.txt:189
msgid "Custom project and app templates"
msgstr ""

# 30372eade49d4172ad8d61836fcb852f
#: ../../../../1.9/docs/releases/1.4.txt:191
msgid ""
"The :djadmin:`startapp` and :djadmin:`startproject` management commands now "
"have a ``--template`` option for specifying a path or URL to a custom app or"
" project template."
msgstr ""

# 8bc22951b1e84af9a5c5143be06c40da
#: ../../../../1.9/docs/releases/1.4.txt:195
msgid ""
"For example, Django will use the ``/path/to/my_project_template`` directory "
"when you run the following command::"
msgstr ""

# 87acb63600ac4d70994b87ebb3e9e5a2
#: ../../../../1.9/docs/releases/1.4.txt:200
msgid ""
"You can also now provide a destination directory as the second argument to "
"both :djadmin:`startapp` and :djadmin:`startproject`::"
msgstr ""

# 66879b059ca848e5af0cfc9830962f25
#: ../../../../1.9/docs/releases/1.4.txt:206
msgid ""
"For more information, see the :djadmin:`startapp` and "
":djadmin:`startproject` documentation."
msgstr ""

# 0c43a3122035400b9c40f593dc514775
#: ../../../../1.9/docs/releases/1.4.txt:210
msgid "Improved WSGI support"
msgstr ""

# f9154714b6bc450fbe1eb866217f7bc9
#: ../../../../1.9/docs/releases/1.4.txt:212
msgid ""
"The :djadmin:`startproject` management command now adds a :file:`wsgi.py` "
"module to the initial project layout, containing a simple WSGI application "
"that can be used for :doc:`deploying with WSGI app "
"servers</howto/deployment/wsgi/index>`."
msgstr ""

# 1afd3e3633ae445dbe5f8c314b133234
#: ../../../../1.9/docs/releases/1.4.txt:217
msgid ""
"The :djadmin:`built-in development server<runserver>` now supports using an "
"externally-defined WSGI callable, which makes it possible to run runserver "
"with the same WSGI configuration that is used for deployment. The new "
":setting:`WSGI_APPLICATION` setting lets you configure which WSGI callable "
":djadmin:`runserver` uses."
msgstr ""

# 75c4bbd290484cd2b6a8243e36116610
#: ../../../../1.9/docs/releases/1.4.txt:223
msgid ""
"(The ``runfcgi`` management command also internally wraps the WSGI callable "
"configured via :setting:`WSGI_APPLICATION`.)"
msgstr ""

# f851295989574a1987bdc46de314a496
#: ../../../../1.9/docs/releases/1.4.txt:227
msgid "``SELECT FOR UPDATE`` support"
msgstr ""

# 76d9f1b15d354c96b093d38eb43f43db
#: ../../../../1.9/docs/releases/1.4.txt:229
msgid ""
"Django 1.4 includes a :meth:`QuerySet.select_for_update() "
"<django.db.models.query.QuerySet.select_for_update>` method, which generates"
" a ``SELECT ... FOR UPDATE`` SQL query. This will lock rows until the end of"
" the transaction, meaning other transactions cannot modify or delete rows "
"matched by a ``FOR UPDATE`` query."
msgstr ""

# 02e3a8a7c085446480267a52adf476ad
#: ../../../../1.9/docs/releases/1.4.txt:235
msgid ""
"For more details, see the documentation for "
":meth:`~django.db.models.query.QuerySet.select_for_update`."
msgstr ""

# 7a08cea70393427d9ee01aee4a235b59
#: ../../../../1.9/docs/releases/1.4.txt:239
msgid "``Model.objects.bulk_create`` in the ORM"
msgstr ""

# 15d106839ab2447289a8de45349a4971
#: ../../../../1.9/docs/releases/1.4.txt:241
msgid ""
"This method lets you create multiple objects more efficiently. It can result"
" in significant performance increases if you have many objects."
msgstr ""

# 39d2725231c44e7fad1253981798e153
#: ../../../../1.9/docs/releases/1.4.txt:244
msgid ""
"Django makes use of this internally, meaning some operations (such as "
"database setup for test suites) have seen a performance benefit as a result."
msgstr ""

# 0a1bd32005fc4a16ae0b31ccbe755d8a
#: ../../../../1.9/docs/releases/1.4.txt:247
msgid ""
"See the :meth:`~django.db.models.query.QuerySet.bulk_create` docs for more "
"information."
msgstr ""

# 8e6e912cd4cb4484a4b0c162b9576ded
#: ../../../../1.9/docs/releases/1.4.txt:251
msgid "``QuerySet.prefetch_related``"
msgstr ""

# b31cd99a50d84029b5fc12223f44e462
#: ../../../../1.9/docs/releases/1.4.txt:253
msgid ""
"Similar to :meth:`~django.db.models.query.QuerySet.select_related` but with "
"a different strategy and broader scope, "
":meth:`~django.db.models.query.QuerySet.prefetch_related` has been added to "
":class:`~django.db.models.query.QuerySet`. This method returns a new "
"``QuerySet`` that will prefetch each of the specified related lookups in a "
"single batch as soon as the query begins to be evaluated. Unlike "
"``select_related``, it does the joins in Python, not in the database, and "
"supports many-to-many relationships, ``GenericForeignKey`` and more. This "
"allows you to fix a very common performance problem in which your code ends "
"up doing O(n) database queries (or worse) if objects on your primary "
"``QuerySet`` each have many related objects that you also need to fetch."
msgstr ""

# 2a7866459c8d4bbabc212d194a87f255
#: ../../../../1.9/docs/releases/1.4.txt:266
msgid "Improved password hashing"
msgstr ""

# b24bfb1a3cf44b1c8aea221e6e3c7f32
#: ../../../../1.9/docs/releases/1.4.txt:268
msgid ""
"Django's auth system (``django.contrib.auth``) stores passwords using a one-"
"way algorithm. Django 1.3 uses the SHA1_ algorithm, but increasing processor"
" speeds and theoretical attacks have revealed that SHA1 isn't as secure as "
"we'd like. Thus, Django 1.4 introduces a new password storage system: by "
"default Django now uses the PBKDF2_ algorithm (as recommended by NIST_). You"
" can also easily choose a different algorithm (including the popular bcrypt_"
" algorithm). For more details, see :ref:`auth_password_storage`."
msgstr ""

# 312e2a8f5bde41a597e60eb0e3bc3f48
#: ../../../../1.9/docs/releases/1.4.txt:282
msgid "HTML5 doctype"
msgstr ""

# c115fe75eb20415cb8547217ea842bc1
#: ../../../../1.9/docs/releases/1.4.txt:284
msgid ""
"We've switched the admin and other bundled templates to use the HTML5 "
"doctype. While Django will be careful to maintain compatibility with older "
"browsers, this change means that you can use any HTML5 features you need in "
"admin pages without having to lose HTML validity or override the provided "
"templates to change the doctype."
msgstr ""

# ed05cff2418b4c6088d0838f013955f6
#: ../../../../1.9/docs/releases/1.4.txt:291
msgid "List filters in admin interface"
msgstr ""

# 624cecbe90b24791b9fd7cb65e897ba9
#: ../../../../1.9/docs/releases/1.4.txt:293
msgid ""
"Prior to Django 1.4, the :mod:`~django.contrib.admin` app let you specify "
"change list filters by specifying a field lookup, but it didn't allow you to"
" create custom filters. This has been rectified with a simple API "
"(previously used internally and known as \"FilterSpec\"). For more details, "
"see the documentation for "
":attr:`~django.contrib.admin.ModelAdmin.list_filter`."
msgstr ""

# 089c7ec92e7f4352879583508edcc2b6
#: ../../../../1.9/docs/releases/1.4.txt:300
msgid "Multiple sort in admin interface"
msgstr ""

# e9cff71dfc2848de8dac044909913176
#: ../../../../1.9/docs/releases/1.4.txt:302
msgid ""
"The admin change list now supports sorting on multiple columns. It respects "
"all elements of the :attr:`~django.contrib.admin.ModelAdmin.ordering` "
"attribute, and sorting on multiple columns by clicking on headers is "
"designed to mimic the behavior of desktop GUIs. We also added a "
":meth:`~django.contrib.admin.ModelAdmin.get_ordering` method for specifying "
"the ordering dynamically (i.e., depending on the request)."
msgstr ""

# 63c4b5a74a9c4c63aff691ac9c46377a
#: ../../../../1.9/docs/releases/1.4.txt:310
msgid "New ``ModelAdmin`` methods"
msgstr ""

# 1180f0bfc2a342c48fd35de845dabd1f
#: ../../../../1.9/docs/releases/1.4.txt:312
msgid ""
"We added a :meth:`~django.contrib.admin.ModelAdmin.save_related` method to "
":mod:`~django.contrib.admin.ModelAdmin` to ease customization of how related"
" objects are saved in the admin."
msgstr ""

# cb6128c68f544a628799c06131c439cb
#: ../../../../1.9/docs/releases/1.4.txt:316
msgid ""
"Two other new :class:`~django.contrib.admin.ModelAdmin` methods, "
":meth:`~django.contrib.admin.ModelAdmin.get_list_display` and "
":meth:`~django.contrib.admin.ModelAdmin.get_list_display_links` enable "
"dynamic customization of fields and links displayed on the admin change "
"list."
msgstr ""

# 713300934af843969127c0b9c55ee693
#: ../../../../1.9/docs/releases/1.4.txt:323
msgid "Admin inlines respect user permissions"
msgstr ""

# 63fd7d5b4c6149cc84b6d7a8aaba8cb8
#: ../../../../1.9/docs/releases/1.4.txt:325
msgid ""
"Admin inlines now only allow those actions for which the user has "
"permission. For ``ManyToMany`` relationships with an auto-created "
"intermediate model (which does not have its own permissions), the change "
"permission for the related model determines if the user has the permission "
"to add, change or delete relationships."
msgstr ""

# a70d2488f4fb4161aed02b1edf7a33ef
#: ../../../../1.9/docs/releases/1.4.txt:332
msgid "Tools for cryptographic signing"
msgstr ""

# 17f55b3bfe9a4276b9bbfe104a5e02d6
#: ../../../../1.9/docs/releases/1.4.txt:334
msgid ""
"Django 1.4 adds both a low-level API for signing values and a high-level API"
" for setting and reading signed cookies, one of the most common uses of "
"signing in Web applications."
msgstr ""

# 3fe9dbdbd5f64139801332e152728d4c
#: ../../../../1.9/docs/releases/1.4.txt:338
msgid ""
"See the :doc:`cryptographic signing </topics/signing>` docs for more "
"information."
msgstr ""

# 93d07d05c3404377aad3d4af07c03592
#: ../../../../1.9/docs/releases/1.4.txt:342
msgid "Cookie-based session backend"
msgstr ""

# 50b01f6a3d0246a3afc8c3753cc23c9a
#: ../../../../1.9/docs/releases/1.4.txt:344
msgid ""
"Django 1.4 introduces a cookie-based session backend that uses the tools for"
" :doc:`cryptographic signing </topics/signing>` to store the session data in"
" the client's browser."
msgstr ""

# 29cdaeaad6954764a8d628a8aa7e9bfc
#: ../../../../1.9/docs/releases/1.4.txt:350
msgid ""
"Session data is signed and validated by the server, but it's not encrypted. "
"This means a user can view any data stored in the session but cannot change "
"it. Please read the documentation for further clarification before using "
"this backend."
msgstr ""

# 5eebb6c7c21f4bafb717f20a4e5f0934
#: ../../../../1.9/docs/releases/1.4.txt:355
msgid ""
"See the :ref:`cookie-based session backend <cookie-session-backend>` docs "
"for more information."
msgstr ""

# 664801c0511b4d94b451b57de97ebd01
#: ../../../../1.9/docs/releases/1.4.txt:359
msgid "New form wizard"
msgstr ""

# 61e418dc2875412ca8177e6efdb59f73
#: ../../../../1.9/docs/releases/1.4.txt:361
msgid ""
"The previous ``FormWizard`` from ``django.contrib.formtools`` has been "
"replaced with a new implementation based on the class-based views introduced"
" in Django 1.3. It features a pluggable storage API and doesn't require the "
"wizard to pass around hidden fields for every previous step."
msgstr ""

# 668e5e7fc95f448287b6562eb3a6d972
#: ../../../../1.9/docs/releases/1.4.txt:366
msgid ""
"Django 1.4 ships with a session-based storage backend and a cookie-based "
"storage backend. The latter uses the tools for :doc:`cryptographic signing "
"</topics/signing>` also introduced in Django 1.4 to store the wizard's state"
" in the user's cookies."
msgstr ""

# acfa8afe69a4431d9693f6c1396531d6
#: ../../../../1.9/docs/releases/1.4.txt:372
msgid "``reverse_lazy``"
msgstr ""

# 0a3081021d304c30871280aee36cdac6
#: ../../../../1.9/docs/releases/1.4.txt:374
msgid ""
"A lazily evaluated version of :func:`django.core.urlresolvers.reverse` was "
"added to allow using URL reversals before the project's URLconf gets loaded."
msgstr ""

# 9c6e04f98a544da686ba8647dbf75196
#: ../../../../1.9/docs/releases/1.4.txt:378
msgid "Translating URL patterns"
msgstr "Traduction de motifs d'URL"

# 9a2297e6bf0d46ff9d4ccafd85dbdb9f
#: ../../../../1.9/docs/releases/1.4.txt:380
msgid ""
"Django can now look for a language prefix in the URLpattern when using the "
"new :func:`~django.conf.urls.i18n.i18n_patterns` helper function. It's also "
"now possible to define translatable URL patterns using "
":func:`~django.utils.translation.ugettext_lazy`. See :ref:`url-"
"internationalization` for more information about the language prefix and how"
" to internationalize URL patterns."
msgstr ""

# 30eb70ee0dbf42a3aa8017e74650e7d4
#: ../../../../1.9/docs/releases/1.4.txt:388
msgid ""
"Contextual translation support for ``{% trans %}`` and ``{% blocktrans %}``"
msgstr ""

# 7b55ca4c5ef348e681641ca14e9cf697
#: ../../../../1.9/docs/releases/1.4.txt:390
msgid ""
"The :ref:`contextual translation<contextual-markers>` support introduced in "
"Django 1.3 via the ``pgettext`` function has been extended to the "
":ttag:`trans` and :ttag:`blocktrans` template tags using the new ``context``"
" keyword."
msgstr ""

# c4458be7bcf04c2794450f30849c5e30
#: ../../../../1.9/docs/releases/1.4.txt:396
msgid "Customizable ``SingleObjectMixin`` URLConf kwargs"
msgstr ""

# 90dc77f1adf4416b861e0a59e0805c78
#: ../../../../1.9/docs/releases/1.4.txt:398
msgid ""
"Two new attributes, "
":attr:`pk_url_kwarg<django.views.generic.detail.SingleObjectMixin.pk_url_kwarg>`"
" and "
":attr:`slug_url_kwarg<django.views.generic.detail.SingleObjectMixin.slug_url_kwarg>`,"
" have been added to :class:`~django.views.generic.detail.SingleObjectMixin` "
"to enable the customization of URLconf keyword arguments used for single "
"object generic views."
msgstr ""

# 2c2ce1d104494c0ca7d17e39428a70dd
#: ../../../../1.9/docs/releases/1.4.txt:407
msgid "Assignment template tags"
msgstr ""

# 2e519c9e436c4e77b6b82bf3493419e5
#: ../../../../1.9/docs/releases/1.4.txt:409
msgid ""
"A new ``assignment_tag`` helper function was added to ``template.Library`` "
"to ease the creation of template tags that store data in a specified context"
" variable."
msgstr ""

# 5f2d62297b1842dd862542cf4d8cc5da
#: ../../../../1.9/docs/releases/1.4.txt:414
msgid "``*args`` and ``**kwargs`` support for template tag helper functions"
msgstr ""

# b6200c86c0ac40ff8a3465021f7b5870
#: ../../../../1.9/docs/releases/1.4.txt:416
msgid ""
"The :ref:`simple_tag<howto-custom-template-tags-simple-tags>`, "
":ref:`inclusion_tag <howto-custom-template-tags-inclusion-tags>` and newly "
"introduced ``assignment_tag`` template helper functions may now accept any "
"number of positional or keyword arguments. For example::"
msgstr ""

# 0f79a074fc55410fa06331213f86a21c
#: ../../../../1.9/docs/releases/1.4.txt:428
msgid ""
"Then, in the template, any number of arguments may be passed to the template"
" tag. For example:"
msgstr ""

# 05e2dbcf082c4894b9c7c4865a5be296
#: ../../../../1.9/docs/releases/1.4.txt:436
msgid "No wrapping of exceptions in ``TEMPLATE_DEBUG`` mode"
msgstr ""

# 7fbcb2159b9a418a80c8c15ef74a75f7
#: ../../../../1.9/docs/releases/1.4.txt:438
msgid ""
"In previous versions of Django, whenever the ``TEMPLATE_DEBUG`` setting was "
"``True``, any exception raised during template rendering (even exceptions "
"unrelated to template syntax) were wrapped in ``TemplateSyntaxError`` and "
"re-raised. This was done in order to provide detailed template source "
"location information in the debug 500 page."
msgstr ""

# bb67f103cb3c448ebb576fda53737255
#: ../../../../1.9/docs/releases/1.4.txt:444
msgid ""
"In Django 1.4, exceptions are no longer wrapped. Instead, the original "
"exception is annotated with the source information. This means that catching"
" exceptions from template rendering is now consistent regardless of the "
"value of ``TEMPLATE_DEBUG``, and there's no need to catch and unwrap "
"``TemplateSyntaxError`` in order to catch other errors."
msgstr ""

# 0a50fa51606c4feaa5077c6f70787662
#: ../../../../1.9/docs/releases/1.4.txt:451
msgid "``truncatechars`` template filter"
msgstr ""

# 5366cbf67baf4ed180ff3b34e37c87a3
#: ../../../../1.9/docs/releases/1.4.txt:453
msgid ""
"This new filter truncates a string to be no longer than the specified number"
" of characters. Truncated strings end with a translatable ellipsis sequence "
"(\"...\"). See the documentation for :tfilter:`truncatechars` for more "
"details."
msgstr ""

# d4c4f4e6a89349b4a6fd278dc512c2a7
#: ../../../../1.9/docs/releases/1.4.txt:459
msgid "``static`` template tag"
msgstr ""

# dba3a2d7693544f4a08da7a605ed6a42
#: ../../../../1.9/docs/releases/1.4.txt:461
msgid ""
"The :mod:`staticfiles<django.contrib.staticfiles>` contrib app has a new "
":ttag:`static<staticfiles-static>` template tag to refer to files saved with"
" the :setting:`STATICFILES_STORAGE` storage backend. It uses the storage "
"backend's ``url`` method and therefore supports advanced features such as "
":ref:`serving files from a cloud service<staticfiles-from-cdn>`."
msgstr ""

# 40e17450456d487389feebf442fce02b
#: ../../../../1.9/docs/releases/1.4.txt:468
msgid "``CachedStaticFilesStorage`` storage backend"
msgstr ""

# b91bfd7251884be985500631c37746ba
#: ../../../../1.9/docs/releases/1.4.txt:470
msgid ""
"The :mod:`staticfiles<django.contrib.staticfiles>` contrib app now has a "
":class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` "
"backend that caches the files it saves (when running the "
":djadmin:`collectstatic` management command) by appending the MD5 hash of "
"the file's content to the filename. For example, the file ``css/styles.css``"
" would also be saved as ``css/styles.55e7cbb9ba48.css``"
msgstr ""

# b4f77caeece84ee4bdb715ff7cc64616
#: ../../../../1.9/docs/releases/1.4.txt:477
msgid ""
"See the "
":class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` docs "
"for more information."
msgstr ""

# f5c27340bf004b2f9864eec2121892ba
#: ../../../../1.9/docs/releases/1.4.txt:481
msgid "Simple clickjacking protection"
msgstr ""

# 45d5764e84e544249e40b8536de4d223
#: ../../../../1.9/docs/releases/1.4.txt:483
msgid ""
"We've added a middleware to provide easy protection against `clickjacking "
"<https://en.wikipedia.org/wiki/Clickjacking>`_ using the ``X-Frame-Options``"
" header. It's not enabled by default for backwards compatibility reasons, "
"but you'll almost certainly want to :doc:`enable it </ref/clickjacking/>` to"
" help plug that security hole for browsers that support the header."
msgstr ""

# b6bf74c6191c4443b38ddc530fb2c1c5
#: ../../../../1.9/docs/releases/1.4.txt:490
msgid "CSRF improvements"
msgstr ""

# 470901fea74945d6be385c869aebd9dc
#: ../../../../1.9/docs/releases/1.4.txt:492
msgid ""
"We've made various improvements to our CSRF features, including the "
":func:`~django.views.decorators.csrf.ensure_csrf_cookie` decorator, which "
"can help with AJAX-heavy sites; protection for PUT and DELETE requests; and "
"the :setting:`CSRF_COOKIE_SECURE` and :setting:`CSRF_COOKIE_PATH` settings, "
"which can improve the security and usefulness of CSRF protection. See the "
":doc:`CSRF docs </ref/csrf>` for more information."
msgstr ""

# e3bbcb4ae6aa471683b93552ccb5b8fe
#: ../../../../1.9/docs/releases/1.4.txt:500
msgid "Error report filtering"
msgstr ""

# fbcb7183a56f4939b56dc5640c1e9db3
#: ../../../../1.9/docs/releases/1.4.txt:502
msgid ""
"We added two function decorators, "
":func:`~django.views.decorators.debug.sensitive_variables` and "
":func:`~django.views.decorators.debug.sensitive_post_parameters`, to allow "
"designating the local variables and POST parameters that may contain "
"sensitive information and should be filtered out of error reports."
msgstr ""

# 71e6ade41dec4c998a1253e9d01378ee
#: ../../../../1.9/docs/releases/1.4.txt:508
msgid ""
"All POST parameters are now systematically filtered out of error reports for"
" certain views (``login``, ``password_reset_confirm``, ``password_change`` "
"and ``add_view`` in :mod:`django.contrib.auth.views`, as well as "
"``user_change_password`` in the admin app) to prevent the leaking of "
"sensitive information such as user passwords."
msgstr ""

# 521e8a0b647f4123b0341577a2338352
#: ../../../../1.9/docs/releases/1.4.txt:514
msgid ""
"You can override or customize the default filtering by writing a "
":ref:`custom filter<custom-error-reports>`. For more information see the "
"docs on :ref:`Filtering error reports<filtering-error-reports>`."
msgstr ""

# 454d20493ec94a438990cd310d05b59f
#: ../../../../1.9/docs/releases/1.4.txt:519
msgid "Extended IPv6 support"
msgstr ""

# a9b940404c89492ba5c06ab02b0c8fd3
#: ../../../../1.9/docs/releases/1.4.txt:521
msgid ""
"Django 1.4 can now better handle IPv6 addresses with the new "
":class:`~django.db.models.GenericIPAddressField` model field, "
":class:`~django.forms.GenericIPAddressField` form field and the validators "
":data:`~django.core.validators.validate_ipv46_address` and "
":data:`~django.core.validators.validate_ipv6_address`."
msgstr ""

# 95ad6b0fb93340a9ac0376e4dc0d89c0
#: ../../../../1.9/docs/releases/1.4.txt:528
msgid "HTML comparisons in tests"
msgstr ""

# 9f4d6ab195484b33af10b0129cdd70c0
#: ../../../../1.9/docs/releases/1.4.txt:530
msgid ""
"The base classes in :mod:`django.test` now have some helpers to compare HTML"
" without tripping over irrelevant differences in whitespace, argument "
"quoting/ordering and closing of self-closing tags. You can either compare "
"HTML directly with the new "
":meth:`~django.test.SimpleTestCase.assertHTMLEqual` and "
":meth:`~django.test.SimpleTestCase.assertHTMLNotEqual` assertions, or use "
"the ``html=True`` flag with "
":meth:`~django.test.SimpleTestCase.assertContains` and "
":meth:`~django.test.SimpleTestCase.assertNotContains` to test whether the "
"client's response contains a given HTML fragment. See the :ref:`assertions "
"documentation <assertions>` for more."
msgstr ""

# 5175a7ea01a940d088411530db75f840
#: ../../../../1.9/docs/releases/1.4.txt:543
msgid "Two new date format strings"
msgstr ""

# a34dc707313b4c858ae68deb9f84cad4
#: ../../../../1.9/docs/releases/1.4.txt:545
msgid ""
"Two new :tfilter:`date` formats were added for use in template filters, "
"template tags and :ref:`format-localization`:"
msgstr ""

# 63625a0546c648b9b56e70540056a9f8
#: ../../../../1.9/docs/releases/1.4.txt:548
msgid "``e`` -- the name of the timezone of the given datetime object"
msgstr ""

# 535b5761a5c14fe88e753ce86f4ed35d
#: ../../../../1.9/docs/releases/1.4.txt:549
msgid "``o`` -- the ISO 8601 year number"
msgstr ""

# 49cf2f75b17f47deaa3d09d15cdc46d9
#: ../../../../1.9/docs/releases/1.4.txt:551
msgid ""
"Please make sure to update your :ref:`custom format files <custom-format-"
"files>` if they contain either ``e`` or ``o`` in a format string. For "
"example a Spanish localization format previously only escaped the ``d`` "
"format character::"
msgstr ""

# 774284fc25bc41dba877b01f7c2637cf
#: ../../../../1.9/docs/releases/1.4.txt:558
msgid "But now it needs to also escape ``e`` and ``o``::"
msgstr ""

# 23e7f51aa79646e39a441d2679f6fa9d
#: ../../../../1.9/docs/releases/1.4.txt:562
msgid "For more information, see the :tfilter:`date` documentation."
msgstr ""

# 5e90f266d9be42fd892c90e200394f7f
# e0aa22551ad94659bcdc6678eed86b1a
# aa8ce1f143764fb6b827c13445ae396a
# 79b79ca865cb479f87c738258abb0e76
# dc72491e490b4b038f59a9009c4ee9f8
# 1e7a7ff6c9824dae99fc608df16244d8
#: ../../../../1.9/docs/releases/1.4.txt:565
#: ../../../../1.9/docs/releases/1.5.txt:244
#: ../../../../1.9/docs/releases/1.6.txt:158
#: ../../../../1.9/docs/releases/1.7.txt:368
#: ../../../../1.9/docs/releases/1.8.txt:142
#: ../../../../1.9/docs/releases/1.9.txt:147
msgid "Minor features"
msgstr "Fonctionnalités mineures"

# c3e9b20953b0425fbd4e0104c60ebac2
#: ../../../../1.9/docs/releases/1.4.txt:567
msgid "Django 1.4 also includes several smaller improvements worth noting:"
msgstr ""

# bb5ac4c57ffc44ecbf939bb5641f4676
#: ../../../../1.9/docs/releases/1.4.txt:569
msgid ""
"A more usable stacktrace in the technical 500 page. Frames in the stack "
"trace that reference Django's framework code are dimmed out, while frames in"
" application code are slightly emphasized. This change makes it easier to "
"scan a stacktrace for issues in application code."
msgstr ""

# 866ad81b0c5f4c0cab243d357395867d
#: ../../../../1.9/docs/releases/1.4.txt:574
msgid ":doc:`Tablespace support </topics/db/tablespaces>` in PostgreSQL."
msgstr ""

# de29324779ae4d80bb9982827a730931
#: ../../../../1.9/docs/releases/1.4.txt:576
msgid "Customizable names for :meth:`~django.template.Library.simple_tag`."
msgstr ""

# 733152dd64124830bc0bdb025af2d899
#: ../../../../1.9/docs/releases/1.4.txt:578
msgid ""
"In the documentation, a helpful :doc:`security overview </topics/security>` "
"page."
msgstr ""

# 2b49189d1ff34ae9a5cab8f112b710c9
#: ../../../../1.9/docs/releases/1.4.txt:581
msgid ""
"The ``django.contrib.auth.models.check_password`` function has been moved to"
" the :mod:`django.contrib.auth.hashers` module. Importing it from the old "
"location will still work, but you should update your imports."
msgstr ""

# 0a921a685b624e1d8e417600e81e4202
#: ../../../../1.9/docs/releases/1.4.txt:585
msgid ""
"The :djadmin:`collectstatic` management command now has a ``--clear`` option"
" to delete all files at the destination before copying or linking the static"
" files."
msgstr ""

# d09bee06748f4d8f9823551bf65949cd
#: ../../../../1.9/docs/releases/1.4.txt:589
msgid ""
"It's now possible to load fixtures containing forward references when using "
"MySQL with the InnoDB database engine."
msgstr ""

# 7d0cb23cd203493d82a733ccff6caea3
#: ../../../../1.9/docs/releases/1.4.txt:592
msgid ""
"A new 403 response handler has been added as "
"``'django.views.defaults.permission_denied'``. You can set your own handler "
"by setting the value of :data:`django.conf.urls.handler403`. See the "
"documentation about :ref:`the 403 (HTTP Forbidden) "
"view<http_forbidden_view>` for more information."
msgstr ""

# 82eb53203e2844e1975e09682f5d07da
#: ../../../../1.9/docs/releases/1.4.txt:598
msgid ""
"The :djadmin:`makemessages` command uses a new and more accurate lexer, "
"`JsLex`_, for extracting translatable strings from JavaScript files."
msgstr ""

# d3428f4399bc44a58c0ac05e6a1c6e2f
#: ../../../../1.9/docs/releases/1.4.txt:603
msgid ""
"The :ttag:`trans` template tag now takes an optional ``as`` argument to be "
"able to retrieve a translation string without displaying it but setting a "
"template context variable instead."
msgstr ""

# 447382ecad0e45a0a119c0a22496b321
#: ../../../../1.9/docs/releases/1.4.txt:607
msgid "The :ttag:`if` template tag now supports ``{% elif %}`` clauses."
msgstr ""

# d511f968427d4e43b0593f4a125e50c3
#: ../../../../1.9/docs/releases/1.4.txt:609
msgid ""
"If your Django app is behind a proxy, you might find the new "
":setting:`SECURE_PROXY_SSL_HEADER` setting useful. It solves the problem of "
"your proxy \"eating\" the fact that a request came in via HTTPS. But only "
"use this setting if you know what you're doing."
msgstr ""

# 58c6a3fb6a0f40fe95027e37e894f0a6
#: ../../../../1.9/docs/releases/1.4.txt:614
msgid ""
"A new, plain-text, version of the HTTP 500 status code internal error page "
"served when :setting:`DEBUG` is ``True`` is now sent to the client when "
"Django detects that the request has originated in JavaScript code. "
"(:meth:`~django.http.HttpRequest.is_ajax` is used for this.)"
msgstr ""

# f5130faefd384bd19821b68bff83b4db
#: ../../../../1.9/docs/releases/1.4.txt:619
msgid ""
"Like its HTML counterpart, it contains a collection of different pieces of "
"information about the state of the application."
msgstr ""

# 0d555f9ec4594b618b5739543a381900
#: ../../../../1.9/docs/releases/1.4.txt:622
msgid ""
"This should make it easier to read when debugging interaction with client-"
"side JavaScript."
msgstr ""

# b1918e344474488e8fe2c805df1aba63
#: ../../../../1.9/docs/releases/1.4.txt:625
msgid ""
"Added the :djadminopt:`--no-location` option to the :djadmin:`makemessages` "
"command."
msgstr ""

# d17f4d72fb6846018b61f6b54ccab23c
#: ../../../../1.9/docs/releases/1.4.txt:628
msgid ""
"Changed the ``locmem`` cache backend to use ``pickle.HIGHEST_PROTOCOL`` for "
"better compatibility with the other cache backends."
msgstr ""

# 46a1f8b40c854f65860b3548935b5f41
#: ../../../../1.9/docs/releases/1.4.txt:632
msgid ""
"Added support in the ORM for generating ``SELECT`` queries containing "
"``DISTINCT ON``."
msgstr ""

# bc3fe7efcdf1447bb6bd8e185672aae9
#: ../../../../1.9/docs/releases/1.4.txt:635
msgid ""
"The ``distinct()`` ``QuerySet`` method now accepts an optional list of model"
" field names. If specified, then the ``DISTINCT`` statement is limited to "
"these fields. This is only supported in PostgreSQL."
msgstr ""

# 09c87f9833284e368ed086940fa31cdf
#: ../../../../1.9/docs/releases/1.4.txt:639
msgid ""
"For more details, see the documentation for "
":meth:`~django.db.models.query.QuerySet.distinct`."
msgstr ""

# 20398c24611c422285d70a7ee9e57210
#: ../../../../1.9/docs/releases/1.4.txt:642
msgid ""
"The admin login page will add a password reset link if you include a URL "
"with the name `'admin_password_reset'` in your urls.py, so plugging in the "
"built-in password reset mechanism and making it available is now much "
"easier. For details, see :ref:`auth_password_reset`."
msgstr ""

# afbe9867b3d3473c88071efdae8e6ef8
#: ../../../../1.9/docs/releases/1.4.txt:647
msgid ""
"The MySQL database backend can now make use of the savepoint feature "
"implemented by MySQL version 5.0.3 or newer with the InnoDB storage engine."
msgstr ""

# e7b50ab57927486798935bcc5013a9b2
#: ../../../../1.9/docs/releases/1.4.txt:650
msgid ""
"It's now possible to pass initial values to the model forms that are part of"
" both model formsets and inline model formsets as returned from factory "
"functions ``modelformset_factory`` and ``inlineformset_factory`` "
"respectively just like with regular formsets. However, initial values only "
"apply to extra forms, i.e. those which are not bound to an existing model "
"instance."
msgstr ""

# 1d3a019827ff439ea81f94ad0a3d9c7b
#: ../../../../1.9/docs/releases/1.4.txt:656
msgid ""
"The sitemaps framework can now handle HTTPS links using the new "
":attr:`Sitemap.protocol <django.contrib.sitemaps.Sitemap.protocol>` class "
"attribute."
msgstr ""

# c2247c4a75f84af180711dd066380368
#: ../../../../1.9/docs/releases/1.4.txt:660
msgid ""
"A new :class:`django.test.SimpleTestCase` subclass of "
":class:`unittest.TestCase` that's lighter than :class:`django.test.TestCase`"
" and company. It can be useful in tests that don't need to hit a database. "
"See :ref:`testcase_hierarchy_diagram`."
msgstr ""

# 3803b840da7447a6a12e22f98e7e4b9d
#: ../../../../1.9/docs/releases/1.4.txt:667
msgid "Backwards incompatible changes in 1.4"
msgstr ""

# 3eba500582db4ddaaadb4055cd3dedaa
#: ../../../../1.9/docs/releases/1.4.txt:670
msgid "SECRET_KEY setting is required"
msgstr ""

# 3a4b444a632c413f812b1130601f356c
#: ../../../../1.9/docs/releases/1.4.txt:672
msgid ""
"Running Django with an empty or known :setting:`SECRET_KEY` disables many of"
" Django's security protections and can lead to remote-code-execution "
"vulnerabilities. No Django site should ever be run without a "
":setting:`SECRET_KEY`."
msgstr ""

# c21fac53dcf54fc5beb583e63572e054
#: ../../../../1.9/docs/releases/1.4.txt:677
msgid ""
"In Django 1.4, starting Django with an empty :setting:`SECRET_KEY` will "
"raise a `DeprecationWarning`. In Django 1.5, it will raise an exception and "
"Django will refuse to start. This is slightly accelerated from the usual "
"deprecation path due to the severity of the consequences of running Django "
"with no :setting:`SECRET_KEY`."
msgstr ""

# 393b55b24685404b9dc006020e0782b5
#: ../../../../1.9/docs/releases/1.4.txt:684
msgid "django.contrib.admin"
msgstr ""

# 748578646fc24163886625a22cdd15f8
#: ../../../../1.9/docs/releases/1.4.txt:686
msgid ""
"The included administration app ``django.contrib.admin`` has for a long time"
" shipped with a default set of static files such as JavaScript, images and "
"stylesheets. Django 1.3 added a new contrib app "
"``django.contrib.staticfiles`` to handle such files in a generic way and "
"defined conventions for static files included in apps."
msgstr ""

# 32f7591f497e4f93a30a4e8132f1c464
#: ../../../../1.9/docs/releases/1.4.txt:692
msgid ""
"Starting in Django 1.4, the admin's static files also follow this "
"convention, to make the files easier to deploy. In previous versions of "
"Django, it was also common to define an ``ADMIN_MEDIA_PREFIX`` setting to "
"point to the URL where the admin's static files live on a Web server. This "
"setting has now been deprecated and replaced by the more general setting "
":setting:`STATIC_URL`. Django will now expect to find the admin static files"
" under the URL ``<STATIC_URL>/admin/``."
msgstr ""

# 48b8a1cc028543d9aa069e390ca188c4
#: ../../../../1.9/docs/releases/1.4.txt:700
msgid ""
"If you've previously used a URL path for ``ADMIN_MEDIA_PREFIX`` (e.g. "
"``/media/``) simply make sure :setting:`STATIC_URL` and "
":setting:`STATIC_ROOT` are configured and your Web server serves those files"
" correctly. The development server continues to serve the admin files just "
"like before. Read the :doc:`static files howto </howto/static-files/index>` "
"for more details."
msgstr ""

# 93f2746d769a4275b2a1ee3890a59ac9
#: ../../../../1.9/docs/releases/1.4.txt:706
msgid ""
"If your ``ADMIN_MEDIA_PREFIX`` is set to an specific domain (e.g. "
"``http://media.example.com/admin/``), make sure to also set your "
":setting:`STATIC_URL` setting to the correct URL -- for example, "
"``http://media.example.com/``."
msgstr ""

# 8937a6ebd11f4531a368d2994e796339
#: ../../../../1.9/docs/releases/1.4.txt:713
msgid ""
"If you're implicitly relying on the path of the admin static files within "
"Django's source code, you'll need to update that path. The files were moved "
"from :file:`django/contrib/admin/media/` to "
":file:`django/contrib/admin/static/admin/`."
msgstr ""

# 2577c742ef114dcb82298feace326b4f
#: ../../../../1.9/docs/releases/1.4.txt:719
msgid "Supported browsers for the admin"
msgstr ""

# 75e44dadcf9f47f7a41d06b5423188bc
#: ../../../../1.9/docs/releases/1.4.txt:721
msgid ""
"Django hasn't had a clear policy on which browsers are supported by the "
"admin app. Our new policy formalizes existing practices: `YUI's A-grade`_ "
"browsers should provide a fully-functional admin experience, with the "
"notable exception of Internet Explorer 6, which is no longer supported."
msgstr ""

# 29ab4a0d0b2f43328057e58ee7601ebf
#: ../../../../1.9/docs/releases/1.4.txt:726
msgid ""
"Released over 10 years ago, IE6 imposes many limitations on modern Web "
"development. The practical implications of this policy are that contributors"
" are free to improve the admin without consideration for these limitations."
msgstr ""

# 450a3e1b35e94a96852a066f9ad223db
#: ../../../../1.9/docs/releases/1.4.txt:730
msgid ""
"Obviously, this new policy **has no impact** on sites you develop using "
"Django. It only applies to the Django admin. Feel free to develop apps "
"compatible with any range of browsers."
msgstr ""

# 9cf91ef02b9d423284f88c85c9c2a995
#: ../../../../1.9/docs/releases/1.4.txt:737
msgid "Removed admin icons"
msgstr ""

# c2a633d2530b4d0381755b967b4df588
#: ../../../../1.9/docs/releases/1.4.txt:739
msgid ""
"As part of an effort to improve the performance and usability of the admin's"
" change-list sorting interface and :attr:`horizontal "
"<django.contrib.admin.ModelAdmin.filter_horizontal>` and :attr:`vertical "
"<django.contrib.admin.ModelAdmin.filter_vertical>` \"filter\" widgets, some "
"icon files were removed and grouped into two sprite files."
msgstr ""

# 6a092b52f5cc45d2a8cb9ec5ff5974f6
#: ../../../../1.9/docs/releases/1.4.txt:745
msgid ""
"Specifically: ``selector-add.gif``, ``selector-addall.gif``, ``selector-"
"remove.gif``, ``selector-removeall.gif``, ``selector_stacked-add.gif`` and "
"``selector_stacked-remove.gif`` were combined into ``selector-icons.gif``; "
"and ``arrow-up.gif`` and ``arrow-down.gif`` were combined into ``sorting-"
"icons.gif``."
msgstr ""

# 5c669fff95574c94864254400e5a362e
#: ../../../../1.9/docs/releases/1.4.txt:751
msgid ""
"If you used those icons to customize the admin, then you'll need to replace "
"them with your own icons or get the files from a previous release."
msgstr ""

# f17b279c89ac45b181290db80ba432b1
#: ../../../../1.9/docs/releases/1.4.txt:755
msgid "CSS class names in admin forms"
msgstr ""

# c8a8f66ef8f84b9a9310d7976ef5b31e
#: ../../../../1.9/docs/releases/1.4.txt:757
msgid ""
"To avoid conflicts with other common CSS class names (e.g. \"button\"), we "
"added a prefix (\"field-\") to all CSS class names automatically generated "
"from the form field names in the main admin forms, stacked inline forms and "
"tabular inline cells. You'll need to take that prefix into account in your "
"custom style sheets or JavaScript files if you previously used plain field "
"names as selectors for custom styles or JavaScript transformations."
msgstr ""

# a7c255e5fd524130a46755a1bdc9dbee
#: ../../../../1.9/docs/releases/1.4.txt:765
msgid "Compatibility with old signed data"
msgstr ""

# f32461391a5a4b89a11ebb06f2d5d0c9
#: ../../../../1.9/docs/releases/1.4.txt:767
msgid ""
"Django 1.3 changed the cryptographic signing mechanisms used in a number of "
"places in Django. While Django 1.3 kept fallbacks that would accept hashes "
"produced by the previous methods, these fallbacks are removed in Django 1.4."
msgstr ""

# 49b41953a1964cb09b094bcf690c09e2
#: ../../../../1.9/docs/releases/1.4.txt:771
msgid ""
"So, if you upgrade to Django 1.4 directly from 1.2 or earlier, you may "
"lose/invalidate certain pieces of data that have been cryptographically "
"signed using an old method. To avoid this, use Django 1.3 first for a period"
" of time to allow the signed data to expire naturally. The affected parts "
"are detailed below, with 1) the consequences of ignoring this advice and 2) "
"the amount of time you need to run Django 1.3 for the data to expire or "
"become irrelevant."
msgstr ""

# d1ed2a19ab3145aebe83fba3053f7c0a
#: ../../../../1.9/docs/releases/1.4.txt:778
msgid "``contrib.sessions`` data integrity check"
msgstr ""

# 09a08c1ad45d4752bf64d620e17d929c
#: ../../../../1.9/docs/releases/1.4.txt:780
msgid ""
"Consequences: The user will be logged out, and session data will be lost."
msgstr ""

# 4bd4551c022a4162b0f965f8022c3999
#: ../../../../1.9/docs/releases/1.4.txt:782
msgid "Time period: Defined by :setting:`SESSION_COOKIE_AGE`."
msgstr ""

# 62debbf001004536ac5d13bf3c7299dc
#: ../../../../1.9/docs/releases/1.4.txt:784
msgid "``contrib.auth`` password reset hash"
msgstr ""

# b5df3aef5b074654b3b8ccc6773f3151
#: ../../../../1.9/docs/releases/1.4.txt:786
msgid ""
"Consequences: Password reset links from before the upgrade will not work."
msgstr ""

# c041faac2f5b420c9dcac6fd6abdde5c
#: ../../../../1.9/docs/releases/1.4.txt:788
msgid "Time period: Defined by :setting:`PASSWORD_RESET_TIMEOUT_DAYS`."
msgstr ""

# b46bdfcc6bda4e21adf570be25dbe2bb
#: ../../../../1.9/docs/releases/1.4.txt:790
msgid ""
"Form-related hashes: these have a are much shorter lifetime and are relevant"
" only for the short window where a user might fill in a form generated by "
"the pre-upgrade Django instance and try to submit it to the upgraded Django "
"instance:"
msgstr ""

# 650037cabbf247418e35c57de69f6d8c
#: ../../../../1.9/docs/releases/1.4.txt:795
msgid "``contrib.comments`` form security hash"
msgstr ""

# bd73827009c04cdc8346a860571370cc
#: ../../../../1.9/docs/releases/1.4.txt:797
msgid ""
"Consequences: The user will see the validation error \"Security hash "
"failed.\""
msgstr ""

# d1bf06bed2b746fd91f0cbd702c786b3
#: ../../../../1.9/docs/releases/1.4.txt:799
msgid ""
"Time period: The amount of time you expect users to take filling out comment"
" forms."
msgstr ""

# 0a42c0f9ee1849088c9cb7e549f087d4
#: ../../../../1.9/docs/releases/1.4.txt:802
msgid "``FormWizard`` security hash"
msgstr ""

# 0b0fddb67aa549cea3c864d82b762926
#: ../../../../1.9/docs/releases/1.4.txt:804
msgid ""
"Consequences: The user will see an error about the form having expired and "
"will be sent back to the first page of the wizard, losing the data entered "
"so far."
msgstr ""

# 270f1843840a42a18da5933c5824b44a
#: ../../../../1.9/docs/releases/1.4.txt:808
msgid ""
"Time period: The amount of time you expect users to take filling out the "
"affected forms."
msgstr ""

# e57fb9c99fd945c2a2b4b68948b2682b
#: ../../../../1.9/docs/releases/1.4.txt:811
msgid "CSRF check"
msgstr ""

# 56e5f274a1584b67a2c2dfe64954b31a
#: ../../../../1.9/docs/releases/1.4.txt:813
msgid ""
"Note: This is actually a Django 1.1 fallback, not Django 1.2, and it applies"
" only if you're upgrading from 1.1."
msgstr ""

# f9f02ec97ff8497f94030d5d3a9408f9
#: ../../../../1.9/docs/releases/1.4.txt:816
msgid ""
"Consequences: The user will see a 403 error with any CSRF-protected POST "
"form."
msgstr ""

# 5093d02a14a54b64807a4720a14efe99
#: ../../../../1.9/docs/releases/1.4.txt:819
msgid ""
"Time period: The amount of time you expect user to take filling out such "
"forms."
msgstr ""

# 8cbc5afdc1ba49faabf5da325b14c1cb
#: ../../../../1.9/docs/releases/1.4.txt:822
msgid "``contrib.auth`` user password hash-upgrade sequence"
msgstr ""

# 9dc15b418dbd4066ada5be4bd2acd967
#: ../../../../1.9/docs/releases/1.4.txt:824
msgid ""
"Consequences: Each user's password will be updated to a stronger password "
"hash when it's written to the database in 1.4. This means that if you "
"upgrade to 1.4 and then need to downgrade to 1.3, version 1.3 won't be able "
"to read the updated passwords."
msgstr ""

# cae3ee017e69438cbe4812f0500caff2
#: ../../../../1.9/docs/releases/1.4.txt:829
msgid ""
"Remedy: Set :setting:`PASSWORD_HASHERS` to use your original password "
"hashing when you initially upgrade to 1.4. After you confirm your app works "
"well with Django 1.4 and you won't have to roll back to 1.3, enable the new "
"password hashes."
msgstr ""

# 3f83553cf33b4740a3029c78466ddfeb
#: ../../../../1.9/docs/releases/1.4.txt:835
msgid "django.contrib.flatpages"
msgstr ""

# 57b212ddb0ff4329a90687d71221e2ed
#: ../../../../1.9/docs/releases/1.4.txt:837
msgid ""
"Starting in 1.4, the "
":class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` "
"only adds a trailing slash and redirects if the resulting URL refers to an "
"existing flatpage. For example, requesting ``/notaflatpageoravalidurl`` in a"
" previous version would redirect to ``/notaflatpageoravalidurl/``, which "
"would subsequently raise a 404. Requesting ``/notaflatpageoravalidurl`` now "
"will immediately raise a 404."
msgstr ""

# 9d560d8dd0a44b4cbaa95a0b99b650e1
#: ../../../../1.9/docs/releases/1.4.txt:845
msgid ""
"Also, redirects returned by flatpages are now permanent (with 301 status "
"code), to match the behavior of "
":class:`~django.middleware.common.CommonMiddleware`."
msgstr ""

# 7f4120735cf742d39a604fd01c6ee46d
#: ../../../../1.9/docs/releases/1.4.txt:849
msgid ""
"Serialization of :class:`~datetime.datetime` and :class:`~datetime.time`"
msgstr ""

# 5cad9733cac644268917092a7f2381f8
#: ../../../../1.9/docs/releases/1.4.txt:851
msgid ""
"As a consequence of time-zone support, and according to the ECMA-262 "
"specification, we made changes to the JSON serializer:"
msgstr ""

# 598bb25723b84d8fb86ba1e8a9712a44
#: ../../../../1.9/docs/releases/1.4.txt:854
msgid ""
"It includes the time zone for aware datetime objects. It raises an exception"
" for aware time objects."
msgstr ""

# 6f4255f4a237443ab007be2e1871cad2
#: ../../../../1.9/docs/releases/1.4.txt:856
msgid ""
"It includes milliseconds for datetime and time objects. There is still some "
"precision loss, because Python stores microseconds (6 digits) and JSON only "
"supports milliseconds (3 digits). However, it's better than discarding "
"microseconds entirely."
msgstr ""

# 57025219555d4eb3ad17b4d134b1750a
#: ../../../../1.9/docs/releases/1.4.txt:861
msgid ""
"We changed the XML serializer to use the ISO8601 format for datetimes. The "
"letter ``T`` is used to separate the date part from the time part, instead "
"of a space. Time zone information is included in the ``[+-]HH:MM`` format."
msgstr ""

# bb6670be304045ac83617c260ba4fc37
#: ../../../../1.9/docs/releases/1.4.txt:865
msgid ""
"Though the serializers now use these new formats when creating fixtures, "
"they can still load fixtures that use the old format."
msgstr ""

# 20ee6a56b61a4312884a43bb3af5f5d2
#: ../../../../1.9/docs/releases/1.4.txt:869
msgid "``supports_timezone`` changed to ``False`` for SQLite"
msgstr ""

# 51b4a4f076994ffcb90630cb231d93f7
#: ../../../../1.9/docs/releases/1.4.txt:871
msgid ""
"The database feature ``supports_timezone`` used to be ``True`` for SQLite. "
"Indeed, if you saved an aware datetime object, SQLite stored a string that "
"included an UTC offset. However, this offset was ignored when loading the "
"value back from the database, which could corrupt the data."
msgstr ""

# c9010661b74848868fc37effda4de60d
#: ../../../../1.9/docs/releases/1.4.txt:876
msgid ""
"In the context of time-zone support, this flag was changed to ``False``, and"
" datetimes are now stored without time-zone information in SQLite. When "
":setting:`USE_TZ` is ``False``, if you attempt to save an aware datetime "
"object, Django raises an exception."
msgstr ""

# ceb0d4e3e1ef44f39ba8faf577e72b17
#: ../../../../1.9/docs/releases/1.4.txt:882
msgid "``MySQLdb``-specific exceptions"
msgstr ""

# 643d80210e7d4f699a7e6ecb2194205b
#: ../../../../1.9/docs/releases/1.4.txt:884
msgid ""
"The MySQL backend historically has raised ``MySQLdb.OperationalError`` when "
"a query triggered an exception. We've fixed this bug, and we now raise "
":exc:`django.db.DatabaseError` instead. If you were testing for "
"``MySQLdb.OperationalError``, you'll need to update your ``except`` clauses."
msgstr ""

# fc393b1d80de44bdbfdcd0ec01137252
#: ../../../../1.9/docs/releases/1.4.txt:891
msgid "Database connection's thread-locality"
msgstr ""

# de5e641957684f26aa5995b4ef8480cb
#: ../../../../1.9/docs/releases/1.4.txt:893
msgid ""
"``DatabaseWrapper`` objects (i.e. the connection objects referenced by "
"``django.db.connection`` and ``django.db.connections[\"some_alias\"]``) used"
" to be thread-local. They are now global objects in order to be potentially "
"shared between multiple threads. While the individual connection objects are"
" now global, the ``django.db.connections`` dictionary referencing those "
"objects is still thread-local. Therefore if you just use the ORM or "
"``DatabaseWrapper.cursor()`` then the behavior is still the same as before. "
"Note, however, that ``django.db.connection`` does not directly reference the"
" default ``DatabaseWrapper`` object anymore and is now a proxy to access "
"that object's attributes. If you need to access the actual "
"``DatabaseWrapper`` object, use ``django.db.connections[DEFAULT_DB_ALIAS]`` "
"instead."
msgstr ""

# 3bd67ba8773147e39a0213b61a20a3a9
#: ../../../../1.9/docs/releases/1.4.txt:905
msgid ""
"As part of this change, all underlying SQLite connections are now enabled "
"for potential thread-sharing (by passing the ``check_same_thread=False`` "
"attribute to pysqlite). ``DatabaseWrapper`` however preserves the previous "
"behavior by disabling thread-sharing by default, so this does not affect any"
" existing code that purely relies on the ORM or on "
"``DatabaseWrapper.cursor()``."
msgstr ""

# 8ab01f334d3f4885adedc33a1864579a
#: ../../../../1.9/docs/releases/1.4.txt:911
msgid ""
"Finally, while it's now possible to pass connections between threads, Django"
" doesn't make any effort to synchronize access to the underlying backend. "
"Concurrency behavior is defined by the underlying backend implementation. "
"Check their documentation for details."
msgstr ""

# d0325842b20046c18ed4647da325dd35
#: ../../../../1.9/docs/releases/1.4.txt:917
msgid "`COMMENTS_BANNED_USERS_GROUP` setting"
msgstr ""

# 7586791f24ba419c9fabeedbce9c7303
#: ../../../../1.9/docs/releases/1.4.txt:919
msgid ""
"Django's comments has historically supported excluding the comments of a "
"special user group, but we've never documented the feature properly and "
"didn't enforce the exclusion in other parts of the app such as the template "
"tags. To fix this problem, we removed the code from the feed class."
msgstr ""

# 0a493ca6206c4d11b1699fbb48759ce8
#: ../../../../1.9/docs/releases/1.4.txt:925
msgid ""
"If you rely on the feature and want to restore the old behavior, use a "
"custom comment model manager to exclude the user group, like this::"
msgstr ""

# 8012b580954e4cd781a574f88bd671a5
#: ../../../../1.9/docs/releases/1.4.txt:940
msgid ""
"Save this model manager in your custom comment app (e.g., in "
"``my_comments_app/managers.py``) and add it your custom comment app model::"
msgstr ""

# 8f9d306d73e244faab06372190567114
#: ../../../../1.9/docs/releases/1.4.txt:954
msgid "`IGNORABLE_404_STARTS` and `IGNORABLE_404_ENDS` settings"
msgstr ""

# e2a0f46ffb6d41b898436df140c6be74
#: ../../../../1.9/docs/releases/1.4.txt:956
msgid ""
"Until Django 1.3, it was possible to exclude some URLs from Django's "
":doc:`404 error reporting</howto/error-reporting>` by adding prefixes to "
"``IGNORABLE_404_STARTS`` and suffixes to ``IGNORABLE_404_ENDS``."
msgstr ""

# 33ca0af3e6bb4328ad3c8c9e3515c29a
#: ../../../../1.9/docs/releases/1.4.txt:960
msgid ""
"In Django 1.4, these two settings are superseded by "
":setting:`IGNORABLE_404_URLS`, which is a list of compiled regular "
"expressions. Django won't send an email for 404 errors on URLs that match "
"any of them."
msgstr ""

# aff5303fa8b44647b7eb849cb694ab53
#: ../../../../1.9/docs/releases/1.4.txt:965
msgid ""
"Furthermore, the previous settings had some rather arbitrary default "
"values::"
msgstr ""

# cce004392c5a42bca07efc5e58a7ae8b
#: ../../../../1.9/docs/releases/1.4.txt:971
msgid ""
"It's not Django's role to decide if your website has a legacy ``/cgi-bin/`` "
"section or a ``favicon.ico``. As a consequence, the default values of "
":setting:`IGNORABLE_404_URLS`, ``IGNORABLE_404_STARTS``, and "
"``IGNORABLE_404_ENDS`` are all now empty."
msgstr ""

# b2c93b6fb46e4263a3e204a39b471452
#: ../../../../1.9/docs/releases/1.4.txt:976
msgid ""
"If you have customized ``IGNORABLE_404_STARTS`` or ``IGNORABLE_404_ENDS``, "
"or if you want to keep the old default value, you should add the following "
"lines in your settings file::"
msgstr ""

# 0d7bb77d7bab4f809d2469a4bfbb13a1
#: ../../../../1.9/docs/releases/1.4.txt:988
msgid ""
"Don't forget to escape characters that have a special meaning in a regular "
"expression, such as periods."
msgstr ""

# 71e983718e8f439387210451c22102e8
#: ../../../../1.9/docs/releases/1.4.txt:992
msgid "CSRF protection extended to PUT and DELETE"
msgstr ""

# 850d1a7657bc495f8e4eff8ecc93db80
#: ../../../../1.9/docs/releases/1.4.txt:994
msgid ""
"Previously, Django's :doc:`CSRF protection </ref/csrf/>` provided protection"
" only against POST requests. Since use of PUT and DELETE methods in AJAX "
"applications is becoming more common, we now protect all methods not defined"
" as safe by :rfc:`2616` -- i.e., we exempt GET, HEAD, OPTIONS and TRACE, and"
" we enforce protection on everything else."
msgstr ""

# 0490a3da05de4ac5b3feadf08c1bc83a
#: ../../../../1.9/docs/releases/1.4.txt:1000
msgid ""
"If you're using PUT or DELETE methods in AJAX applications, please see the "
":ref:`instructions about using AJAX and CSRF <csrf-ajax>`."
msgstr ""

# db103f915901477e8f7bb78d31938788
#: ../../../../1.9/docs/releases/1.4.txt:1004
msgid "Password reset view now accepts ``subject_template_name``"
msgstr ""

# a602422eb4774da2a3839a83d5317c0c
#: ../../../../1.9/docs/releases/1.4.txt:1006
msgid ""
"The ``password_reset`` view in ``django.contrib.auth`` now accepts a "
"``subject_template_name`` parameter, which is passed to the password save "
"form as a keyword argument. If you are using this view with a custom "
"password reset form, then you will need to ensure your form's ``save()`` "
"method accepts this keyword argument."
msgstr ""

# 361fecf40b39458fbddf92bbb92971ed
#: ../../../../1.9/docs/releases/1.4.txt:1013
msgid "``django.core.template_loaders``"
msgstr ""

# e89c95ca13ab46ee8bafceb4a03fc7f3
#: ../../../../1.9/docs/releases/1.4.txt:1015
msgid ""
"This was an alias to ``django.template.loader`` since 2005, and we've "
"removed it without emitting a warning due to the length of the deprecation. "
"If your code still referenced this, please use ``django.template.loader`` "
"instead."
msgstr ""

# 0e2d07886ff34e34b6ea9daab7266731
#: ../../../../1.9/docs/releases/1.4.txt:1020
msgid "``django.db.models.fields.URLField.verify_exists``"
msgstr ""

# 29042b06e98740d8ac667d692a574ffb
#: ../../../../1.9/docs/releases/1.4.txt:1022
msgid ""
"This functionality has been removed due to intractable performance and "
"security issues. Any existing usage of ``verify_exists`` should be removed."
msgstr ""

# fb97ed0b26224c97b7c479cadf72bc24
#: ../../../../1.9/docs/releases/1.4.txt:1027
msgid "``django.core.files.storage.Storage.open``"
msgstr ""

# 282703aa88c445cbb52865f73fad6724
#: ../../../../1.9/docs/releases/1.4.txt:1029
msgid ""
"The ``open`` method of the base Storage class used to take an obscure "
"parameter ``mixin`` that allowed you to dynamically change the base classes "
"of the returned file object. This has been removed. In the rare case you "
"relied on the ``mixin`` parameter, you can easily achieve the same by "
"overriding the ``open`` method, like this::"
msgstr ""

# e60fd03665984ca9b6cae87d4a96075e
#: ../../../../1.9/docs/releases/1.4.txt:1053
msgid "YAML deserializer now uses ``yaml.safe_load``"
msgstr ""

# 3ff078c9f8144c30acc0afce1a3c3add
#: ../../../../1.9/docs/releases/1.4.txt:1055
msgid ""
"``yaml.load`` is able to construct any Python object, which may trigger "
"arbitrary code execution if you process a YAML document that comes from an "
"untrusted source. This feature isn't necessary for Django's YAML "
"deserializer, whose primary use is to load fixtures consisting of simple "
"objects. Even though fixtures are trusted data, the YAML deserializer now "
"uses ``yaml.safe_load`` for additional security."
msgstr ""

# a236c87c60fe4488b242becbd9dbc172
#: ../../../../1.9/docs/releases/1.4.txt:1063
msgid "Session cookies now have the ``httponly`` flag by default"
msgstr ""

# 3e46e21653cd4c10975f4ba6fac4d0e4
#: ../../../../1.9/docs/releases/1.4.txt:1065
msgid ""
"Session cookies now include the ``httponly`` attribute by default to help "
"reduce the impact of potential XSS attacks. As a consequence of this change,"
" session cookie data, including sessionid, is no longer accessible from "
"JavaScript in many browsers. For strict backwards compatibility, use "
"``SESSION_COOKIE_HTTPONLY = False`` in your settings file."
msgstr ""

# 2d84361c4bac4f368931eb4ad7edd0ac
#: ../../../../1.9/docs/releases/1.4.txt:1073
msgid "The :tfilter:`urlize` filter no longer escapes every URL"
msgstr ""

# 231cc125988c45f7ab93f261ce60bcb9
#: ../../../../1.9/docs/releases/1.4.txt:1075
msgid ""
"When a URL contains a ``%xx`` sequence, where ``xx`` are two hexadecimal "
"digits, :tfilter:`urlize` now assumes that the URL is already escaped and "
"doesn't apply URL escaping again. This is wrong for URLs whose unquoted form"
" contains a ``%xx`` sequence, but such URLs are very unlikely to happen in "
"the wild, because they would confuse browsers too."
msgstr ""

# 80f0e4e2c52f405a87b8ee7a95b9486a
#: ../../../../1.9/docs/releases/1.4.txt:1082
msgid ""
"``assertTemplateUsed`` and ``assertTemplateNotUsed`` as context manager"
msgstr ""

# 2d44992969d84447b3a109790c76670f
#: ../../../../1.9/docs/releases/1.4.txt:1084
msgid ""
"It's now possible to check whether a template was used within a block of "
"code with :meth:`~django.test.SimpleTestCase.assertTemplateUsed` and "
":meth:`~django.test.SimpleTestCase.assertTemplateNotUsed`. And they can be "
"used as a context manager::"
msgstr ""

# 84279458e10f43509b29de8141fa0598
#: ../../../../1.9/docs/releases/1.4.txt:1094
msgid "See the :ref:`assertion documentation<assertions>` for more."
msgstr ""

# 8b8e2d887bed4d5882e18ef7d51ec244
#: ../../../../1.9/docs/releases/1.4.txt:1097
msgid "Database connections after running the test suite"
msgstr ""

# ff1900625b7945e3a50daf9353253a6d
#: ../../../../1.9/docs/releases/1.4.txt:1099
msgid ""
"The default test runner no longer restores the database connections after "
"tests' execution. This prevents the production database from being exposed "
"to potential threads that would still be running and attempting to create "
"new connections."
msgstr ""

# 9cdf98cd17964f3b97dec2a41190558d
#: ../../../../1.9/docs/releases/1.4.txt:1104
msgid ""
"If your code relied on connections to the production database being created "
"after tests' execution, then you can restore the previous behavior by "
"subclassing ``DjangoTestRunner`` and overriding its ``teardown_databases()``"
" method."
msgstr ""

# c91a7fac30a44621b476738b59b38116
#: ../../../../1.9/docs/releases/1.4.txt:1110
msgid "Output of :djadmin:`manage.py help <help>`"
msgstr ""

# bdd492aa2780477bb3ea3095a13c95c4
#: ../../../../1.9/docs/releases/1.4.txt:1112
msgid ""
":djadmin:`manage.py help <help>` now groups available commands by "
"application. If you depended on the output of this command -- if you parsed "
"it, for example -- then you'll need to update your code. To get a list of "
"all available management commands in a script, use :djadmin:`manage.py help "
"--commands <help>` instead."
msgstr ""

# 763343ba5a4f474e8eb1211bdd56c40a
#: ../../../../1.9/docs/releases/1.4.txt:1119
msgid "``extends`` template tag"
msgstr ""

# 5434ec2f992f4e2b98f7c7b619d3047e
#: ../../../../1.9/docs/releases/1.4.txt:1121
msgid ""
"Previously, the :ttag:`extends` tag used a buggy method of parsing "
"arguments, which could lead to it erroneously considering an argument as a "
"string literal when it wasn't. It now uses ``parser.compile_filter``, like "
"other tags."
msgstr ""

# 9b3f399a22ef45269b97228cfdd675c6
#: ../../../../1.9/docs/releases/1.4.txt:1125
msgid ""
"The internals of the tag aren't part of the official stable API, but in the "
"interests of full disclosure, the ``ExtendsNode.__init__`` definition has "
"changed, which may break any custom tags that use this class."
msgstr ""

# e05777d740354578af761f18d1bc9bae
#: ../../../../1.9/docs/releases/1.4.txt:1130
msgid "Loading some incomplete fixtures no longer works"
msgstr ""

# 0932425ed1ce4f509ff0e5c6ababa5e8
#: ../../../../1.9/docs/releases/1.4.txt:1132
msgid ""
"Prior to 1.4, a default value was inserted for fixture objects that were "
"missing a specific date or datetime value when auto_now or auto_now_add was "
"set for the field. This was something that should not have worked, and in "
"1.4 loading such incomplete fixtures will fail. Because fixtures are a raw "
"import, they should explicitly specify all field values, regardless of field"
" options on the model."
msgstr ""

# 95643c80c5624e928a8d96a3bf786f88
#: ../../../../1.9/docs/releases/1.4.txt:1139
msgid "Development Server Multithreading"
msgstr ""

# b65e9a37c7214092979778c8050f08a2
#: ../../../../1.9/docs/releases/1.4.txt:1141
msgid ""
"The development server is now is multithreaded by default. Use the "
":djadminopt:`--nothreading` option to disable the use of threading in the "
"development server::"
msgstr ""

# 7c9748290afa4a2d8e0779db9db3ac5f
#: ../../../../1.9/docs/releases/1.4.txt:1148
msgid "Attributes disabled in markdown when safe mode set"
msgstr ""

# c7fe1a06677e4aaaad7908dc9700638b
#: ../../../../1.9/docs/releases/1.4.txt:1150
msgid ""
"Prior to Django 1.4, attributes were included in any markdown output "
"regardless of safe mode setting of the filter. With version > 2.1 of the "
"Python-Markdown library, an enable_attributes option was added. When the "
"safe argument is passed to the markdown filter, both the ``safe_mode=True`` "
"and ``enable_attributes=False`` options are set. If using a version of the "
"Python-Markdown library less than 2.1, a warning is issued that the output "
"is insecure."
msgstr ""

# a24ff1e62a2f4e8b9fff6ec8925c172d
#: ../../../../1.9/docs/releases/1.4.txt:1159
msgid "FormMixin get_initial returns an instance-specific dictionary"
msgstr ""

# 4e29705006354375b40d8d5c1bb58afd
#: ../../../../1.9/docs/releases/1.4.txt:1161
msgid ""
"In Django 1.3, the ``get_initial`` method of the "
":class:`django.views.generic.edit.FormMixin` class was returning the class "
"``initial`` dictionary. This has been fixed to return a copy of this "
"dictionary, so form instances can modify their initial data without messing "
"with the class variable."
msgstr ""

# c4a7e9913fa74204b1a992f886abb3e9
#: ../../../../1.9/docs/releases/1.4.txt:1170
msgid "Features deprecated in 1.4"
msgstr ""

# a029f4c197bb4557bd0b1e1b0472bd96
#: ../../../../1.9/docs/releases/1.4.txt:1173
msgid "Old styles of calling ``cache_page`` decorator"
msgstr ""

# 7fedc4126fb54827ae4e1611f0ad802f
#: ../../../../1.9/docs/releases/1.4.txt:1175
msgid ""
"Some legacy ways of calling "
":func:`~django.views.decorators.cache.cache_page` have been deprecated. "
"Please see the documentation for the correct way to use this decorator."
msgstr ""

# 0fd919e75d4c4d0eb33cfd7ffeef15b1
#: ../../../../1.9/docs/releases/1.4.txt:1180
msgid "Support for PostgreSQL versions older than 8.2"
msgstr ""

# 0138a1fd0b164af0a68ffe16a175c105
#: ../../../../1.9/docs/releases/1.4.txt:1182
msgid ""
"Django 1.3 dropped support for PostgreSQL versions older than 8.0, and we "
"suggested using a more recent version because of performance improvements "
"and, more importantly, the end of upstream support periods for 8.0 and 8.1 "
"was near (November 2010)."
msgstr ""

# 20d5500e18c749e2b001541e5dcd74da
#: ../../../../1.9/docs/releases/1.4.txt:1187
msgid ""
"Django 1.4 takes that policy further and sets 8.2 as the minimum PostgreSQL "
"version it officially supports."
msgstr ""

# f48487188b10487f87fe57526e70bc8a
#: ../../../../1.9/docs/releases/1.4.txt:1191
msgid "Request exceptions are now always logged"
msgstr ""

# 0fc0e607e9de46f0a042fc19b552f7a8
#: ../../../../1.9/docs/releases/1.4.txt:1193
msgid ""
"When we added :doc:`logging support </topics/logging/>` in Django in 1.3, "
"the admin error email support was moved into the "
":class:`django.utils.log.AdminEmailHandler`, attached to the "
"``'django.request'`` logger. In order to maintain the established behavior "
"of error emails, the ``'django.request'`` logger was called only when "
":setting:`DEBUG` was ``False``."
msgstr ""

# 42695625bdb14fd78eb25d7778a89131
#: ../../../../1.9/docs/releases/1.4.txt:1200
msgid ""
"To increase the flexibility of error logging for requests, the "
"``'django.request'`` logger is now called regardless of the value of "
":setting:`DEBUG`, and the default settings file for new projects now "
"includes a separate filter attached to "
":class:`django.utils.log.AdminEmailHandler` to prevent admin error emails in"
" ``DEBUG`` mode::"
msgstr ""

# 46556c383fe345f4a7a691a18db7df63
#: ../../../../1.9/docs/releases/1.4.txt:1219
msgid ""
"If your project was created prior to this change, your :setting:`LOGGING` "
"setting will not include this new filter. In order to maintain backwards-"
"compatibility, Django will detect that your ``'mail_admins'`` handler "
"configuration includes no ``'filters'`` section and will automatically add "
"this filter for you and issue a pending-deprecation warning. This will "
"become a deprecation warning in Django 1.5, and in Django 1.6 the backwards-"
"compatibility shim will be removed entirely."
msgstr ""

# c7e28d7a9787449184553a3ddd5b78cb
#: ../../../../1.9/docs/releases/1.4.txt:1227
msgid ""
"The existence of any ``'filters'`` key under the ``'mail_admins'`` handler "
"will disable this backward-compatibility shim and deprecation warning."
msgstr ""

# f90d4b3a1588464ebdb338d622b60197
#: ../../../../1.9/docs/releases/1.4.txt:1231
msgid "``django.conf.urls.defaults``"
msgstr ""

# cef4a4f4bcb444fab33d1a52ab34ef5d
#: ../../../../1.9/docs/releases/1.4.txt:1233
msgid ""
"Until Django 1.3, the functions :func:`~django.conf.urls.include`, "
":func:`~django.conf.urls.patterns` and :func:`~django.conf.urls.url` plus "
":data:`~django.conf.urls.handler404`, :data:`~django.conf.urls.handler500` "
"were located in a ``django.conf.urls.defaults`` module."
msgstr ""

# 688071d7b8ac404e9f301bddf0e6dd29
#: ../../../../1.9/docs/releases/1.4.txt:1238
msgid "In Django 1.4, they live in :mod:`django.conf.urls`."
msgstr ""

# f57a45033cd342db837242a7e8fdd52e
#: ../../../../1.9/docs/releases/1.4.txt:1241
msgid "``django.contrib.databrowse``"
msgstr ""

# a24c8bc4ef574109aadc3324411edddb
#: ../../../../1.9/docs/releases/1.4.txt:1243
msgid ""
"Databrowse has not seen active development for some time, and this does not "
"show any sign of changing. There had been a suggestion for a `GSOC project`_"
" to integrate the functionality of databrowse into the admin, but no "
"progress was made. While Databrowse has been deprecated, an enhancement of "
"``django.contrib.admin`` providing a similar feature set is still possible."
msgstr ""

# 74be83d37f59436f84ce0c5c6cd51da5
#: ../../../../1.9/docs/releases/1.4.txt:1251
msgid ""
"The code that powers Databrowse is licensed under the same terms as Django "
"itself, so it's available to be adopted by an individual or group as a "
"third-party project."
msgstr ""

# e189b1b42c284be3ac61c5efc34c2ead
#: ../../../../1.9/docs/releases/1.4.txt:1256
msgid "``django.core.management.setup_environ``"
msgstr ""

# d8c3694e3da74f6d8937fc0cac61a293
#: ../../../../1.9/docs/releases/1.4.txt:1258
msgid ""
"This function temporarily modified ``sys.path`` in order to make the parent "
"\"project\" directory importable under the old flat :djadmin:`startproject` "
"layout. This function is now deprecated, as its path workarounds are no "
"longer needed with the new ``manage.py`` and default project layout."
msgstr ""

# 27d75820b9d345c7a7077f084143c9b5
#: ../../../../1.9/docs/releases/1.4.txt:1263
msgid ""
"This function was never documented or part of the public API, but it was "
"widely recommended for use in setting up a \"Django environment\" for a user"
" script. These uses should be replaced by setting the "
"``DJANGO_SETTINGS_MODULE`` environment variable or using "
":func:`django.conf.settings.configure`."
msgstr ""

# f3dcefa0040642d7ad7ae9f48d6f9233
#: ../../../../1.9/docs/releases/1.4.txt:1269
msgid "``django.core.management.execute_manager``"
msgstr ""

# 2377c7820480455f95cee250e5fe1a22
#: ../../../../1.9/docs/releases/1.4.txt:1271
msgid ""
"This function was previously used by ``manage.py`` to execute a management "
"command. It is identical to "
"``django.core.management.execute_from_command_line``, except that it first "
"calls ``setup_environ``, which is now deprecated. As such, "
"``execute_manager`` is also deprecated; ``execute_from_command_line`` can be"
" used instead. Neither of these functions is documented as part of the "
"public API, but a deprecation path is needed due to use in existing "
"``manage.py`` files."
msgstr ""

# 751058741f8e4277b7f94746dc18e030
#: ../../../../1.9/docs/releases/1.4.txt:1280
msgid "``is_safe`` and ``needs_autoescape`` attributes of template filters"
msgstr ""

# a6d218cbc01644f29bec5f26ffb2805c
#: ../../../../1.9/docs/releases/1.4.txt:1282
msgid ""
"Two flags, ``is_safe`` and ``needs_autoescape``, define how each template "
"filter interacts with Django's auto-escaping behavior. They used to be "
"attributes of the filter function::"
msgstr ""

# 75dab7cc98ee4369b6da1825295b554c
#: ../../../../1.9/docs/releases/1.4.txt:1291
msgid ""
"However, this technique caused some problems in combination with decorators,"
" especially :func:`@stringfilter "
"<django.template.defaultfilters.stringfilter>`. Now, the flags are keyword "
"arguments of :meth:`@register.filter <django.template.Library.filter>`::"
msgstr ""

# 0fe67dc3011a4bed81dbad05d07b6bb3
#: ../../../../1.9/docs/releases/1.4.txt:1300
msgid ""
"See :ref:`filters and auto-escaping <filters-auto-escaping>` for more "
"information."
msgstr ""

# a5b5f23b959d4c7f8cc6d6cb0dd88f2a
#: ../../../../1.9/docs/releases/1.4.txt:1303
msgid "Wildcard expansion of application names in `INSTALLED_APPS`"
msgstr ""

# 3292c5347c084247ae8373af6b3015ff
#: ../../../../1.9/docs/releases/1.4.txt:1305
msgid ""
"Until Django 1.3, :setting:`INSTALLED_APPS` accepted wildcards in "
"application names, like ``django.contrib.*``. The expansion was performed by"
" a filesystem-based implementation of ``from <package> import *``. "
"Unfortunately, `this can't be done reliably`_."
msgstr ""

# a2ba2bdccb9c4ed9bf4cfd6008d643f0
#: ../../../../1.9/docs/releases/1.4.txt:1310
msgid ""
"This behavior was never documented. Since it is unpythonic and not obviously"
" useful, it was removed in Django 1.4. If you relied on it, you must edit "
"your settings file to list all your applications explicitly."
msgstr ""

# b46484130c9048f2bc85c2b97df563d1
#: ../../../../1.9/docs/releases/1.4.txt:1317
msgid "``HttpRequest.raw_post_data`` renamed to ``HttpRequest.body``"
msgstr ""

# b99805cf62684c728fa3ab8f6aa393a9
#: ../../../../1.9/docs/releases/1.4.txt:1319
msgid ""
"This attribute was confusingly named ``HttpRequest.raw_post_data``, but it "
"actually provided the body of the HTTP request. It's been renamed to "
"``HttpRequest.body``, and ``HttpRequest.raw_post_data`` has been deprecated."
msgstr ""

# 2341121168f34856822c56266b32b62c
#: ../../../../1.9/docs/releases/1.4.txt:1324
msgid ""
"``django.contrib.sitemaps`` bug fix with potential performance implications"
msgstr ""

# 149fcc0b90ef4c2481f14bd9b2ee99ae
#: ../../../../1.9/docs/releases/1.4.txt:1326
msgid ""
"In previous versions, ``Paginator`` objects used in sitemap classes were "
"cached, which could result in stale site maps. We've removed the caching, so"
" each request to a site map now creates a new Paginator object and calls the"
" :attr:`~django.contrib.sitemaps.Sitemap.items()` method of the "
":class:`~django.contrib.sitemaps.Sitemap` subclass. Depending on what your "
"``items()`` method is doing, this may have a negative performance impact. To"
" mitigate the performance impact, consider using the :doc:`caching framework"
" </topics/cache>` within your ``Sitemap`` subclass."
msgstr ""

# a9a03915f88f4561801373affe29b90f
#: ../../../../1.9/docs/releases/1.4.txt:1336
msgid "Versions of Python-Markdown earlier than 2.1"
msgstr ""

# 6b75c2069eb64d2ca63f92f8a4e274bf
#: ../../../../1.9/docs/releases/1.4.txt:1338
msgid ""
"Versions of Python-Markdown earlier than 2.1 do not support the option to "
"disable attributes. As a security issue, earlier versions of this library "
"will not be supported by the markup contrib app in 1.5 under an accelerated "
"deprecation timeline."
msgstr ""

# a4ddd42048a448e8b8d44bc81d06e848
#: ../../../../1.9/docs/releases/1.4.1.txt:3
msgid "Django 1.4.1 release notes"
msgstr ""

# b4e21530ba2b4b3383cc7c94960995a7
#: ../../../../1.9/docs/releases/1.4.1.txt:7
msgid ""
"This is the first security release in the Django 1.4 series, fixing several "
"security issues in Django 1.4. Django 1.4.1 is a recommended upgrade for all"
" users of Django 1.4."
msgstr ""

# d21b4c764a174c128c5fa61447a44b23
#: ../../../../1.9/docs/releases/1.4.10.txt:3
msgid "Django 1.4.10 release notes"
msgstr ""

# b6f1bfa6c12147d19b4a931701f6eac5
# 2e8dd1e687fe42e3bff66ea05a240718
#: ../../../../1.9/docs/releases/1.4.10.txt:5
#: ../../../../1.9/docs/releases/1.6.txt:23
msgid "*November 6, 2013*"
msgstr ""

# bd00e0fe0d3e45aca681e46af03dd4e8
#: ../../../../1.9/docs/releases/1.4.10.txt:7
msgid "Django 1.4.10 fixes a Python-compatibility bug in the 1.4 series."
msgstr ""

# a5bacbde1a4445e6a24ccc19df16502d
#: ../../../../1.9/docs/releases/1.4.10.txt:12
msgid ""
"Django 1.4.9 inadvertently introduced issues with Python 2.5 compatibility. "
"Django 1.4.10 restores Python 2.5 compatibility. This was issue #21362 in "
"Django's Trac."
msgstr ""

# 54858f3d8e8b4444afe45588d6e729dc
#: ../../../../1.9/docs/releases/1.4.11.txt:3
msgid "Django 1.4.11 release notes"
msgstr ""

# 33c0406880704957a01df3f1b4f65d2d
# f0e9be7199474208834b03e01b15e7dd
# 066425ea923049adb6de74479a4a82f1
#: ../../../../1.9/docs/releases/1.4.11.txt:5
#: ../../../../1.9/docs/releases/1.5.6.txt:5
#: ../../../../1.9/docs/releases/1.6.3.txt:5
msgid "*April 21, 2014*"
msgstr ""

# 807fc80f47f2412d95ae24a2d1feb0a9
#: ../../../../1.9/docs/releases/1.4.11.txt:7
msgid ""
"Django 1.4.11 fixes three security issues in 1.4.10. Additionally, Django's "
"vendored version of six, :mod:`django.utils.six`, has been upgraded to the "
"latest release (1.6.1)."
msgstr ""

# 8e34658c0a314c8c9df65397cbe9ac65
# 98f526958b8448678ca8e407b0986b85
# 1e40ea0567e0434b8317cc141477c2ea
#: ../../../../1.9/docs/releases/1.4.11.txt:12
#: ../../../../1.9/docs/releases/1.5.6.txt:11
#: ../../../../1.9/docs/releases/1.6.3.txt:11
msgid "Unexpected code execution using ``reverse()``"
msgstr ""

# 10a02aec5765492c84040cca9fb15b45
# a796211c0ea3474caea6f086f6f6e395
# 378c111cc60045ad86217a2d8417e2e8
#: ../../../../1.9/docs/releases/1.4.11.txt:14
#: ../../../../1.9/docs/releases/1.5.6.txt:13
#: ../../../../1.9/docs/releases/1.6.3.txt:13
msgid ""
"Django's URL handling is based on a mapping of regex patterns (representing "
"the URLs) to callable views, and Django's own processing consists of "
"matching a requested URL against those patterns to determine the appropriate"
" view to invoke."
msgstr ""

# 8e98c9e76be44647892b7d0c1e87b4dc
# 8ee5a265f9ec4833a7773e19cfd5c814
# 2bac7cf73cb3492eb07e84ea44462464
#: ../../../../1.9/docs/releases/1.4.11.txt:19
#: ../../../../1.9/docs/releases/1.5.6.txt:18
#: ../../../../1.9/docs/releases/1.6.3.txt:18
msgid ""
"Django also provides a convenience function -- "
":func:`~django.core.urlresolvers.reverse` -- which performs this process in "
"the opposite direction. The ``reverse()`` function takes information about a"
" view and returns a URL which would invoke that view. Use of ``reverse()`` "
"is encouraged for application developers, as the output of ``reverse()`` is "
"always based on the current URL patterns, meaning developers do not need to "
"change other code when making changes to URLs."
msgstr ""

# b5e69b094b9449f1a20629ed13593a97
# 2082d93a77074cf0ac338922b424dc3a
# 5210fa59301a46d69e052f51084cd80b
#: ../../../../1.9/docs/releases/1.4.11.txt:28
#: ../../../../1.9/docs/releases/1.5.6.txt:27
#: ../../../../1.9/docs/releases/1.6.3.txt:27
msgid ""
"One argument signature for ``reverse()`` is to pass a dotted Python path to "
"the desired view. In this situation, Django will import the module indicated"
" by that dotted path as part of generating the resulting URL. If such a "
"module has import-time side effects, those side effects will occur."
msgstr ""

# ca2c7f011ee2440ab6e437c4908b0399
# e6527fe77b1b4dba961deeaaf386e109
# 77768ceec37640bf894f7434fb1edb44
#: ../../../../1.9/docs/releases/1.4.11.txt:34
#: ../../../../1.9/docs/releases/1.5.6.txt:33
#: ../../../../1.9/docs/releases/1.6.3.txt:33
msgid ""
"Thus it is possible for an attacker to cause unexpected code execution, "
"given the following conditions:"
msgstr ""

# 6421c7122ba74c40b3a1dfd831767b2d
# 215879644bd84d36ab573663d17a247b
# c3c2889b87f44b0b9e01860695778241
#: ../../../../1.9/docs/releases/1.4.11.txt:37
#: ../../../../1.9/docs/releases/1.5.6.txt:36
#: ../../../../1.9/docs/releases/1.6.3.txt:36
msgid ""
"One or more views are present which construct a URL based on user input "
"(commonly, a \"next\" parameter in a querystring indicating where to "
"redirect upon successful completion of an action)."
msgstr ""

# 04d5e6067efa422c89d1e6dbe9df4ae4
# 722533b61ec64b7087522792c6813754
# 977911b64f444694a43f30d6087cf852
#: ../../../../1.9/docs/releases/1.4.11.txt:41
#: ../../../../1.9/docs/releases/1.5.6.txt:40
#: ../../../../1.9/docs/releases/1.6.3.txt:40
msgid ""
"One or more modules are known to an attacker to exist on the server's Python"
" import path, which perform code execution with side effects on importing."
msgstr ""

# 9a9f7a611d6e4407b5f2c6206c0344f6
# 2092047af5ba48018cc3d21208d0acd4
# c0182a10f3d14e77aadc2c123e433a52
#: ../../../../1.9/docs/releases/1.4.11.txt:45
#: ../../../../1.9/docs/releases/1.5.6.txt:44
#: ../../../../1.9/docs/releases/1.6.3.txt:44
msgid ""
"To remedy this, ``reverse()`` will now only accept and import dotted paths "
"based on the view-containing modules listed in the project's :doc:`URL "
"pattern configuration </topics/http/urls>`, so as to ensure that only "
"modules the developer intended to be imported in this fashion can or will be"
" imported."
msgstr ""

# b7dff79d11dc4048acddc00e6ef9f09a
# 446d81fead5e4dcbb5ea4b3fbae215d9
# c59fa6a440a4490e877754d1ec1d01d9
#: ../../../../1.9/docs/releases/1.4.11.txt:51
#: ../../../../1.9/docs/releases/1.5.6.txt:50
#: ../../../../1.9/docs/releases/1.6.3.txt:50
msgid "Caching of anonymous pages could reveal CSRF token"
msgstr ""

# 6d1122992a13475699007f866578d5cb
# 6cd0e3434b3b4cd685c278003239e728
# 2fff665e5e5545a2a6aeb0716f4928b7
#: ../../../../1.9/docs/releases/1.4.11.txt:53
#: ../../../../1.9/docs/releases/1.5.6.txt:52
#: ../../../../1.9/docs/releases/1.6.3.txt:52
msgid ""
"Django includes both a :doc:`caching framework </topics/cache>` and a system"
" for :doc:`preventing cross-site request forgery (CSRF) attacks "
"</ref/csrf/>`. The CSRF-protection system is based on a random nonce sent to"
" the client in a cookie which must be sent by the client on future requests "
"and, in forms, a hidden value which must be submitted back with the form."
msgstr ""

# 79a3f090471c487da58f6a7cfd86752d
# f0220f31c56244ea942578715d48a36a
# 3af627451df846198e28e6e187981d5b
#: ../../../../1.9/docs/releases/1.4.11.txt:60
#: ../../../../1.9/docs/releases/1.5.6.txt:59
#: ../../../../1.9/docs/releases/1.6.3.txt:59
msgid ""
"The caching framework includes an option to cache responses to anonymous "
"(i.e., unauthenticated) clients."
msgstr ""

# 3f7eb0edf387479f98318bc55d9a4286
# 6b64df6fee1745de8c9327095e0c1caa
# 30c55d3844e84e0c84b3f6b28e2f34a2
#: ../../../../1.9/docs/releases/1.4.11.txt:63
#: ../../../../1.9/docs/releases/1.5.6.txt:62
#: ../../../../1.9/docs/releases/1.6.3.txt:62
msgid ""
"When the first anonymous request to a given page is by a client which did "
"not have a CSRF cookie, the cache framework will also cache the CSRF cookie "
"and serve the same nonce to other anonymous clients who do not have a CSRF "
"cookie. This can allow an attacker to obtain a valid CSRF cookie value and "
"perform attacks which bypass the check for the cookie."
msgstr ""

# 248e4bca1802408d915ab7a4411ee711
# 62803ea922654e4cb590638ec8c8003b
# 045f0ba0c4324232a797b433d1361ec5
#: ../../../../1.9/docs/releases/1.4.11.txt:70
#: ../../../../1.9/docs/releases/1.5.6.txt:69
#: ../../../../1.9/docs/releases/1.6.3.txt:69
msgid ""
"To remedy this, the caching framework will no longer cache such responses. "
"The heuristic for this will be:"
msgstr ""

# f36fd36444be414db7ff2f2a2479a814
# c57ab1f1a1c74805839b82d44f5384ba
# 25f14fadbc424a2bae717e597896c309
#: ../../../../1.9/docs/releases/1.4.11.txt:73
#: ../../../../1.9/docs/releases/1.5.6.txt:72
#: ../../../../1.9/docs/releases/1.6.3.txt:72
msgid "If the incoming request did not submit any cookies, and"
msgstr ""

# 743c4a6ba7894948890c633952063189
# d220fede8741448c80230a2b107d6001
# ab796eed4ee64a0e94003af7b641dccc
#: ../../../../1.9/docs/releases/1.4.11.txt:75
#: ../../../../1.9/docs/releases/1.5.6.txt:74
#: ../../../../1.9/docs/releases/1.6.3.txt:74
msgid "If the response did send one or more cookies, and"
msgstr ""

# 18a9706aca884b2aa6f2807b0cd8253f
# 1832501e3afc4ef5b33463ef86681650
# 2895a9bc683947c092f0817d592eb1b5
#: ../../../../1.9/docs/releases/1.4.11.txt:77
#: ../../../../1.9/docs/releases/1.5.6.txt:76
#: ../../../../1.9/docs/releases/1.6.3.txt:76
msgid ""
"If the ``Vary: Cookie`` header is set on the response, then the response "
"will not be cached."
msgstr ""

# c1c9737ae57b4abeb69e0c747c3667bf
# cdb34707fb524269adf5357c9b921fe9
# 007e4e97e86d4caa99dfec2fde3a290a
#: ../../../../1.9/docs/releases/1.4.11.txt:81
#: ../../../../1.9/docs/releases/1.5.6.txt:80
#: ../../../../1.9/docs/releases/1.6.3.txt:80
msgid "MySQL typecasting"
msgstr ""

# c4ad6e6d05864354b0bb3b90f44b014f
# 00f5c595879144d8b730c905827a8384
# 407d941a37f44232907d1a2560786a5f
#: ../../../../1.9/docs/releases/1.4.11.txt:83
#: ../../../../1.9/docs/releases/1.5.6.txt:82
#: ../../../../1.9/docs/releases/1.6.3.txt:82
msgid ""
"The MySQL database is known to \"typecast\" on certain queries; for example,"
" when querying a table which contains string values, but using a query which"
" filters based on an integer value, MySQL will first silently coerce the "
"strings to integers and return a result based on that."
msgstr ""

# 04a31bbfa78241faa25fcb767a9d2282
# b473c1200f0c47f3b46d39a10f5ff952
# 7860c4375928412f98a14f33cfa2f8db
#: ../../../../1.9/docs/releases/1.4.11.txt:88
#: ../../../../1.9/docs/releases/1.5.6.txt:87
#: ../../../../1.9/docs/releases/1.6.3.txt:87
msgid ""
"If a query is performed without first converting values to the appropriate "
"type, this can produce unexpected results, similar to what would occur if "
"the query itself had been manipulated."
msgstr ""

# 7edfef32922b46388f274e1bda3a649b
# 543289b4407f47119e9b7e998ab5b11b
# 5f5858527ddf43088845a4b9c425341e
#: ../../../../1.9/docs/releases/1.4.11.txt:92
#: ../../../../1.9/docs/releases/1.5.6.txt:91
#: ../../../../1.9/docs/releases/1.6.3.txt:91
msgid ""
"Django's model field classes are aware of their own types and most such "
"classes perform explicit conversion of query arguments to the correct "
"database-level type before querying. However, three model field classes did "
"not correctly convert their arguments:"
msgstr ""

# b245fb6631d04d6b96717496fe8c55b7
# 93d70288ca4e40aab856a5bf2a54975e
# d359f2b37ee04901a1ec05bee6277e39
#: ../../../../1.9/docs/releases/1.4.11.txt:97
#: ../../../../1.9/docs/releases/1.5.6.txt:96
#: ../../../../1.9/docs/releases/1.6.3.txt:96
msgid ":class:`~django.db.models.FilePathField`"
msgstr ""

# 9f08ae4c523e4f5b8c5c227fa3051187
# 424388d0c63645e19464055ecb2da76d
# 9bd2b4ceb9854de6a077d35ef0d318e4
#: ../../../../1.9/docs/releases/1.4.11.txt:98
#: ../../../../1.9/docs/releases/1.5.6.txt:97
#: ../../../../1.9/docs/releases/1.6.3.txt:97
msgid ":class:`~django.db.models.GenericIPAddressField`"
msgstr ""

# 682fdde49ab642abbba2ffe743c52a3d
# fc25feea591d4579bf6f64eaed729097
# 44732b4aec714635ab66112f894d1faf
# b3ab2abb83904e4cbdaf1f08b5a1f61b
#: ../../../../1.9/docs/releases/1.4.11.txt:99
#: ../../../../1.9/docs/releases/1.5.6.txt:98
#: ../../../../1.9/docs/releases/1.6.3.txt:98
#: ../../../../1.9/docs/releases/1.7.txt:1615
msgid "``IPAddressField``"
msgstr "``IPAddressField``"

# 290d164c85654b7894aa49d755b5724b
# c3f3ff70abc541b98a31832b74e1bdca
# 033986505cba4984845f7b60ea67d972
#: ../../../../1.9/docs/releases/1.4.11.txt:101
#: ../../../../1.9/docs/releases/1.5.6.txt:100
#: ../../../../1.9/docs/releases/1.6.3.txt:100
msgid ""
"These three fields have been updated to convert their arguments to the "
"correct types before querying."
msgstr ""

# 2cf654644b5e42bebb9ed2e567667c9f
# 6b21100e30074dbbadcaf4881c9a4ae3
# 0f5c954f678b4d9a98889df7cdd479dc
#: ../../../../1.9/docs/releases/1.4.11.txt:104
#: ../../../../1.9/docs/releases/1.5.6.txt:103
#: ../../../../1.9/docs/releases/1.6.3.txt:103
msgid ""
"Additionally, developers of custom model fields are now warned via "
"documentation to ensure their custom field classes will perform appropriate "
"type conversions, and users of the :meth:`raw() "
"<django.db.models.query.QuerySet.raw>` and :meth:`extra() "
"<django.db.models.query.QuerySet.extra>` query methods -- which allow the "
"developer to supply raw SQL or SQL fragments -- will be advised to ensure "
"they perform appropriate manual type conversions prior to executing queries."
msgstr ""

# f0659c74de4e44468255196f0ad4734b
#: ../../../../1.9/docs/releases/1.4.12.txt:3
msgid "Django 1.4.12 release notes"
msgstr ""

# 050723ef31894996bc492ec2ff736c71
# 2ae1f6dab240478d84ff9e9e5f18d170
# 3faa3f059bed44219ecde39814677ea9
#: ../../../../1.9/docs/releases/1.4.12.txt:5
#: ../../../../1.9/docs/releases/1.5.7.txt:5
#: ../../../../1.9/docs/releases/1.6.4.txt:5
msgid "*April 28, 2014*"
msgstr ""

# 7c78ad7883f54aa4846be01567c3d873
#: ../../../../1.9/docs/releases/1.4.12.txt:7
msgid "Django 1.4.12 fixes a regression in the 1.4.11 security release."
msgstr ""

# eebc5df1679f41b7958e49e5f1a2b349
# ea2513411792423ab7bb3f7a329177b1
# 9fb8a8890b5249d09c94e42b7a5cd79f
# 0361cbcfefbb480baae08a67e37b3973
# d7d27998aebb495c80e97148addbe1a1
# b872ee25c6be4a699aca07f1b258ec34
# 2931db127e154cd698528d48373d5cc8
# 7927d5a7717046d19af7f1a1b5c52323
# 02561a59c0eb47e29c5ce5db347e3d76
# 497fbc3433d74ee5a7faee06664d17e2
# d00317c7e6bb456daba98ef9fdca57fb
# 03966a4af2504fbd86db770527559722
# 985ddeda4c2b4c61a08814da232841fd
# 8495b8589bb5462e944031bbaeea9952
# e8361704ff56498cb6192557834703a9
# ec760717cc2447c680867fe5dc1c7d8e
# 4a42bf2ec99e4ea0bbc04202d9d936a5
# 7e8169eb4e984c2f933c219e18abd80f
# a40cc2640b054e84b692593a65036048
# bbd73454b9ea45448c20f9f014583dd8
# b7f061618f2f49c6811f482b6d37dbf1
# b43aec978df946ae87e0eaeb3971da77
# 7d050e0fa2eb47b293f9f2898439b387
# 98c7749bba9044ad80088c60e610b371
# a313e4740ff84755ab603122e5c7e7f9
# 933d40b99bf94cb2bc2dbb1adb03ceb8
# 503b3aa1796143699f1ccfd3e5b11026
# 2d4792438dfb4393a2bf3485ca230b24
# ea383425cc7d4ca8b663c42ee1c9168e
# bbe33397a16844a1ac6578c546a672c4
# 1af66093426046be92da4bdb1ff36ca6
# bb789fa87bf94da1964738681ae6ad7e
# d400ae9a19144d53b978e0b150d287b7
# 47c2eb4ee0e84eedbd59044fa298896a
# f9f186f013e2468088321d6dee460e17
# 290b2fac34174866b067d6f4529b3056
# cf1bd1b916c0414e800808eb5894ec99
# 66e8c3dd33b148418ad04a3170489c83
# f675ca0219654eec884e3ad372b300b9
# 8b485328b7d644eca7fc8289fd485c20
#: ../../../../1.9/docs/releases/1.4.12.txt:10
#: ../../../../1.9/docs/releases/1.4.15.txt:10
#: ../../../../1.9/docs/releases/1.4.16.txt:11
#: ../../../../1.9/docs/releases/1.4.17.txt:13
#: ../../../../1.9/docs/releases/1.4.18.txt:64
#: ../../../../1.9/docs/releases/1.4.19.txt:10
#: ../../../../1.9/docs/releases/1.4.6.txt:27
#: ../../../../1.9/docs/releases/1.4.9.txt:19
#: ../../../../1.9/docs/releases/1.5.10.txt:10
#: ../../../../1.9/docs/releases/1.5.11.txt:10
#: ../../../../1.9/docs/releases/1.5.12.txt:10
#: ../../../../1.9/docs/releases/1.5.2.txt:31
#: ../../../../1.9/docs/releases/1.5.4.txt:35
#: ../../../../1.9/docs/releases/1.5.5.txt:25
#: ../../../../1.9/docs/releases/1.5.6.txt:112
#: ../../../../1.9/docs/releases/1.5.7.txt:10
#: ../../../../1.9/docs/releases/1.6.4.txt:10
#: ../../../../1.9/docs/releases/1.6.5.txt:50
#: ../../../../1.9/docs/releases/1.6.6.txt:67
#: ../../../../1.9/docs/releases/1.6.7.txt:11
#: ../../../../1.9/docs/releases/1.6.8.txt:10
#: ../../../../1.9/docs/releases/1.6.9.txt:13
#: ../../../../1.9/docs/releases/1.7.1.txt:10
#: ../../../../1.9/docs/releases/1.7.11.txt:23
#: ../../../../1.9/docs/releases/1.7.2.txt:13
#: ../../../../1.9/docs/releases/1.7.3.txt:72
#: ../../../../1.9/docs/releases/1.7.4.txt:10
#: ../../../../1.9/docs/releases/1.7.5.txt:10
#: ../../../../1.9/docs/releases/1.7.6.txt:24
#: ../../../../1.9/docs/releases/1.7.7.txt:46
#: ../../../../1.9/docs/releases/1.7.9.txt:59
#: ../../../../1.9/docs/releases/1.8.1.txt:11
#: ../../../../1.9/docs/releases/1.8.2.txt:26
#: ../../../../1.9/docs/releases/1.8.3.txt:71
#: ../../../../1.9/docs/releases/1.8.4.txt:24
#: ../../../../1.9/docs/releases/1.8.5.txt:10
#: ../../../../1.9/docs/releases/1.8.6.txt:11
#: ../../../../1.9/docs/releases/1.8.7.txt:26
#: ../../../../1.9/docs/releases/1.8.8.txt:19
#: ../../../../1.9/docs/releases/1.9.1.txt:10
msgid "Bugfixes"
msgstr "Correction de bogues"

# 462a83ecfbda4e2ba7df3b7f16f694bc
#: ../../../../1.9/docs/releases/1.4.12.txt:12
msgid ""
"Restored the ability to :meth:`~django.core.urlresolvers.reverse` views "
"created using :func:`functools.partial()` (:ticket:`22486`)"
msgstr ""

# fe1629dff74048ae860afa1d7bf1e61e
#: ../../../../1.9/docs/releases/1.4.13.txt:3
msgid "Django 1.4.13 release notes"
msgstr ""

# ffc5d4ff13824f5f9c6f1934a1a7e3ca
# 119b51c08bb54523903cd23a0ffb9d1c
# 6f471371d6334c9394c51c7cf6816035
#: ../../../../1.9/docs/releases/1.4.13.txt:5
#: ../../../../1.9/docs/releases/1.5.8.txt:5
#: ../../../../1.9/docs/releases/1.6.5.txt:5
msgid "*May 14, 2014*"
msgstr ""

# f57db2aa02a04f8285d522d4be5eec98
#: ../../../../1.9/docs/releases/1.4.13.txt:7
msgid "Django 1.4.13 fixes two security issues in 1.4.12."
msgstr ""

# 6af31b551a0a404383ba0e41d078374a
# 7291e3beba5f4958b9242c74356c8d3b
#: ../../../../1.9/docs/releases/1.4.13.txt:10
#: ../../../../1.9/docs/releases/1.5.8.txt:10
msgid "Caches may incorrectly be allowed to store and serve private data"
msgstr ""

# a1e826b665b14387beaf399902a9c403
# 680a9a191f084ff4960df3a48fde5434
# 99e9716ee59244dfbe49a312b5318011
#: ../../../../1.9/docs/releases/1.4.13.txt:12
#: ../../../../1.9/docs/releases/1.5.8.txt:12
#: ../../../../1.9/docs/releases/1.6.5.txt:12
msgid ""
"In certain situations, Django may allow caches to store private data related"
" to a particular session and then serve that data to requests with a "
"different session, or no session at all. This can lead to information "
"disclosure and can be a vector for cache poisoning."
msgstr ""

# bd43cbb1c7c64587b877e2dee99f4fe1
# cd737127eaae4743936e6f59a5b87986
# afa08ffb2f924db9a44e637d2cdc3737
#: ../../../../1.9/docs/releases/1.4.13.txt:17
#: ../../../../1.9/docs/releases/1.5.8.txt:17
#: ../../../../1.9/docs/releases/1.6.5.txt:17
msgid ""
"When using Django sessions, Django will set a ``Vary: Cookie`` header to "
"ensure caches do not serve cached data to requests from other sessions. "
"However, older versions of Internet Explorer (most likely only Internet "
"Explorer 6, and Internet Explorer 7 if run on Windows XP or Windows Server "
"2003) are unable to handle the ``Vary`` header in combination with many "
"content types. Therefore, Django would remove the header if the request was "
"made by Internet Explorer."
msgstr ""

# c72aa9c2b8484770917769dbc69a57f8
# 863c27f87dae4137b6427e30d9b7d37a
# ee100585aed1422cba28bd87775b6434
#: ../../../../1.9/docs/releases/1.4.13.txt:25
#: ../../../../1.9/docs/releases/1.5.8.txt:25
#: ../../../../1.9/docs/releases/1.6.5.txt:25
msgid ""
"To remedy this, the special behavior for these older Internet Explorer "
"versions has been removed, and the ``Vary`` header is no longer stripped "
"from the response. In addition, modifications to the ``Cache-Control`` "
"header for all Internet Explorer requests with a ``Content-Disposition`` "
"header have also been removed as they were found to have similar issues."
msgstr ""

# f39d480f344e48b19e32fb398acba4de
# d378ee3a80494bcda89f4c5f14e0898b
#: ../../../../1.9/docs/releases/1.4.13.txt:32
#: ../../../../1.9/docs/releases/1.5.8.txt:32
msgid "Malformed redirect URLs from user input not correctly validated"
msgstr ""

# 5bd2ab428e524f7e90867533339e3224
# 7635d6a1256744c5bce208567dbefdd6
# 29351a91138940d3bc1dfa0fc0742b78
#: ../../../../1.9/docs/releases/1.4.13.txt:34
#: ../../../../1.9/docs/releases/1.5.8.txt:34
#: ../../../../1.9/docs/releases/1.6.5.txt:34
msgid ""
"The validation for redirects did not correctly validate some malformed URLs,"
" which are accepted by some browsers. This allows a user to be redirected to"
" an unsafe URL unexpectedly."
msgstr ""

# 97e5ba69523544308528d181346583c9
# 14569e7ea0f14f87b20380e7f98eb42e
# a3ce0be05a0b47a5b4d2bcc1f00594b5
#: ../../../../1.9/docs/releases/1.4.13.txt:38
#: ../../../../1.9/docs/releases/1.5.8.txt:38
#: ../../../../1.9/docs/releases/1.6.5.txt:38
msgid ""
"Django relies on user input in some cases (e.g. "
":func:`django.contrib.auth.views.login`, ``django.contrib.comments``, and "
":doc:`i18n </topics/i18n/index>`) to redirect the user to an \"on success\" "
"URL. The security checks for these redirects (namely "
"``django.utils.http.is_safe_url()``) did not correctly validate some "
"malformed URLs, such as `http:\\\\\\\\\\\\djangoproject.com`, which are "
"accepted by some browsers with more liberal URL parsing."
msgstr ""

# 50b6bc98a7a64f07bad73780f84aeca3
# b8b597d6d6024c0492910d8e76f3f491
# dd5465094b874274af5ec6c3cc415284
#: ../../../../1.9/docs/releases/1.4.13.txt:46
#: ../../../../1.9/docs/releases/1.5.8.txt:46
#: ../../../../1.9/docs/releases/1.6.5.txt:46
msgid ""
"To remedy this, the validation in ``is_safe_url()`` has been tightened to be"
" able to handle and correctly validate these malformed URLs."
msgstr ""

# 99c000b2ff284011bc5dc199d248f8bb
#: ../../../../1.9/docs/releases/1.4.14.txt:3
msgid "Django 1.4.14 release notes"
msgstr ""

# 512f002151f5427faa89f89a0e643f16
# 696de76e9d3f493689f74daf500db334
# 8d9561e450ad45f7a576b8c6546ed10d
#: ../../../../1.9/docs/releases/1.4.14.txt:5
#: ../../../../1.9/docs/releases/1.5.9.txt:5
#: ../../../../1.9/docs/releases/1.6.6.txt:5
msgid "*August 20, 2014*"
msgstr ""

# 4dbe09248fc5411abca4adda6fd41011
#: ../../../../1.9/docs/releases/1.4.14.txt:7
msgid "Django 1.4.14 fixes several security issues in 1.4.13."
msgstr ""

# 3e12e10e28984c6b937db08b9caddfdd
# b63708145c584e6cbc5aaef23b715119
# 02c98a147ffb4423b5cdc62e468c6951
#: ../../../../1.9/docs/releases/1.4.14.txt:10
#: ../../../../1.9/docs/releases/1.5.9.txt:10
#: ../../../../1.9/docs/releases/1.6.6.txt:10
msgid ""
":func:`~django.core.urlresolvers.reverse()` could generate URLs pointing to "
"other hosts"
msgstr ""

# ec264c720f264c8b98f3ae0b993491f8
# 3088014066894c2eb62ce242e063f6c2
# 8636aa094c074a92b59cce9e57f54804
#: ../../../../1.9/docs/releases/1.4.14.txt:12
#: ../../../../1.9/docs/releases/1.5.9.txt:12
#: ../../../../1.9/docs/releases/1.6.6.txt:12
msgid ""
"In certain situations, URL reversing could generate scheme-relative URLs  "
"(URLs starting with two slashes), which could unexpectedly redirect a user  "
"to a different host. An attacker could exploit this, for example, by "
"redirecting users to a phishing site designed to ask for user's passwords."
msgstr ""

# 013c4b5532ff4765ac2789c606f3bcb8
# 5c3480045e4848a4b2fb76a391baaf8c
# b6bfd9716d8646bfa5ffce1990031100
#: ../../../../1.9/docs/releases/1.4.14.txt:17
#: ../../../../1.9/docs/releases/1.5.9.txt:17
#: ../../../../1.9/docs/releases/1.6.6.txt:17
msgid ""
"To remedy this, URL reversing now ensures that no URL starts with two "
"slashes (//), replacing the second slash with its URL encoded counterpart "
"(%2F). This approach ensures that semantics stay the same, while making the "
"URL relative to the domain and not to the scheme."
msgstr ""

# fb7faf5bd4804f57a10006303ed66155
# 795f4d0f5a0a4c078dba4344f74ce118
# b2b2d33b95e44ed1a0a2a9b6dce7cdcd
#: ../../../../1.9/docs/releases/1.4.14.txt:23
#: ../../../../1.9/docs/releases/1.5.9.txt:23
#: ../../../../1.9/docs/releases/1.6.6.txt:23
msgid "File upload denial-of-service"
msgstr ""

# 4a1e08cd0f624ec18822b60ad8dedcc2
# 55014d629232407f809ad1e5029d4bf8
# 70e3011276d14f09a8620b0dfc5b62ae
#: ../../../../1.9/docs/releases/1.4.14.txt:25
#: ../../../../1.9/docs/releases/1.5.9.txt:25
#: ../../../../1.9/docs/releases/1.6.6.txt:25
msgid ""
"Before this release, Django's file upload handing in its default "
"configuration may degrade to producing a huge number of ``os.stat()`` system"
" calls when a duplicate filename is uploaded. Since ``stat()`` may invoke "
"IO, this may produce a huge data-dependent slowdown that slowly worsens over"
" time. The net result is that given enough time, a user with the ability to "
"upload files can cause poor performance in the upload handler, eventually "
"causing it to become very slow simply by uploading 0-byte files. At this "
"point, even a slow network connection and few HTTP requests would be all "
"that is necessary to make a site unavailable."
msgstr ""

# f9e0f4972a0641419ce3217d16713402
# b449732afde243e3b1d66d5905862d1e
# 41ff7a2fe165498b98b738f7dac87b8e
#: ../../../../1.9/docs/releases/1.4.14.txt:34
#: ../../../../1.9/docs/releases/1.5.9.txt:34
#: ../../../../1.9/docs/releases/1.6.6.txt:34
msgid ""
"We've remedied the issue by changing the algorithm for generating file names"
" if a file with the uploaded name already exists. "
":meth:`Storage.get_available_name() "
"<django.core.files.storage.Storage.get_available_name>` now appends an "
"underscore plus a random 7 character alphanumeric string (e.g. "
"``\"_x3a1gho\"``), rather than iterating through an underscore followed by a"
" number (e.g. ``\"_1\"``, ``\"_2\"``, etc.)."
msgstr ""

# 0cdb150878d3478da87623c52c5f2269
# 7b09d7d0abb544d4b8b1dac83e2d54ba
# 4ad9e57ff02945e78c35fbc7788310e4
#: ../../../../1.9/docs/releases/1.4.14.txt:43
#: ../../../../1.9/docs/releases/1.5.9.txt:43
#: ../../../../1.9/docs/releases/1.6.6.txt:43
msgid "``RemoteUserMiddleware`` session hijacking"
msgstr ""

# e4e6cc691dd74a90a3e3518cab0d4c01
# bc47db8bb07a4efc90244b312b96ba3a
# 5a4a9277a9ad4ac4bca15a286ddf5154
#: ../../../../1.9/docs/releases/1.4.14.txt:45
#: ../../../../1.9/docs/releases/1.5.9.txt:45
#: ../../../../1.9/docs/releases/1.6.6.txt:45
msgid ""
"When using the :class:`~django.contrib.auth.middleware.RemoteUserMiddleware`"
" and the ``RemoteUserBackend``, a change to the ``REMOTE_USER`` header "
"between requests without an intervening logout could result in the prior "
"user's session being co-opted by the subsequent user. The middleware now "
"logs the user out on a failed login attempt."
msgstr ""

# aa1dbfa2c83746168b4da50ee0499fc0
# 09f9439d04844ca286614cabe6722789
# 16eb3d4908bc4de0bf8732ed3011b469
#: ../../../../1.9/docs/releases/1.4.14.txt:52
#: ../../../../1.9/docs/releases/1.5.9.txt:52
#: ../../../../1.9/docs/releases/1.6.6.txt:52
msgid "Data leakage via query string manipulation in ``contrib.admin``"
msgstr ""

# 31448cde1fa0466494de3c36148163b0
# e92d9dcddf644135b82c85884c5f2963
#: ../../../../1.9/docs/releases/1.4.14.txt:54
#: ../../../../1.9/docs/releases/1.5.9.txt:54
msgid ""
"In older versions of Django it was possible to reveal any field's data by "
"modifying the \"popup\" and \"to_field\" parameters of the query string on "
"an admin change form page. For example, requesting a URL like "
"``/admin/auth/user/?pop=1&t=password`` and viewing the page's HTML allowed "
"viewing the password hash of each user. While the admin requires users to "
"have permissions to view the change form pages in the first place, this "
"could leak data if you rely on users having access to view only certain "
"fields on a model."
msgstr ""

# b8d47fcce2d246c1a9f0d3ec97a7cdb5
# bd9e02ec90ee4454873944bbb47b995d
# 5967ff2e7c474432a353c7ba82801951
#: ../../../../1.9/docs/releases/1.4.14.txt:62
#: ../../../../1.9/docs/releases/1.5.9.txt:62
#: ../../../../1.9/docs/releases/1.6.6.txt:62
msgid ""
"To address the issue, an exception will now be raised if a ``to_field`` "
"value that isn't a related field to a model that has been registered with "
"the admin is specified."
msgstr ""

# 324a161342f7485cae7c92432a1bf0e0
#: ../../../../1.9/docs/releases/1.4.15.txt:3
msgid "Django 1.4.15 release notes"
msgstr ""

# fffa2c49d05b4322b1b81c2dab729efd
# 4c995d5ba39640afbb8a43ceb476a40f
# be0cd84e88234c329bafa48574be2a04
# 0b9e376280d94c089acc7323200d33aa
#: ../../../../1.9/docs/releases/1.4.15.txt:5
#: ../../../../1.9/docs/releases/1.5.10.txt:5
#: ../../../../1.9/docs/releases/1.6.7.txt:5
#: ../../../../1.9/docs/releases/1.7.txt:5
msgid "*September 2, 2014*"
msgstr "*2 Septembre 2014*"

# b7ce5cfa1b5743d9bcbd9013135c4335
#: ../../../../1.9/docs/releases/1.4.15.txt:7
msgid "Django 1.4.15 fixes a regression in the 1.4.14 security release."
msgstr ""

# b65d2f1098234233b3ad0c7cb3ec6157
# f01b9054b5ca4ad493c2b7ba4eefee8d
#: ../../../../1.9/docs/releases/1.4.15.txt:12
#: ../../../../1.9/docs/releases/1.5.10.txt:12
msgid ""
"Allowed inherited and m2m fields to be referenced in the admin "
"(:ticket:`22486`)"
msgstr ""

# 77061a40c54843a8a3be3e06a054d5c9
#: ../../../../1.9/docs/releases/1.4.16.txt:3
msgid "Django 1.4.16 release notes"
msgstr ""

# 1e4937f48bad488cbc5e4de5d653b8f7
# dad9b42c71774b0aa8f5853b2daeb460
# 42a9b220b75b41b19c3af96805bc3af8
# 2847ea6746374592af73b6dce765de14
#: ../../../../1.9/docs/releases/1.4.16.txt:5
#: ../../../../1.9/docs/releases/1.5.11.txt:5
#: ../../../../1.9/docs/releases/1.6.8.txt:5
#: ../../../../1.9/docs/releases/1.7.1.txt:5
msgid "*October 22, 2014*"
msgstr ""

# b0cc645be5c54669b04e14bb41dcee0c
#: ../../../../1.9/docs/releases/1.4.16.txt:7
msgid ""
"Django 1.4.16 fixes a couple regressions in the 1.4.14 security release and "
"a bug preventing the use of some GEOS versions with GeoDjango."
msgstr ""

# f9dfad6add7443109a0c2c7c5ff0c156
# 674f36d8d14743159a3fc4ca0cf09751
# ff05e647cac84eae9e1fcc9f67375833
# 605fc46d8eb1484ab43416a93388abb7
#: ../../../../1.9/docs/releases/1.4.16.txt:13
#: ../../../../1.9/docs/releases/1.5.11.txt:12
#: ../../../../1.9/docs/releases/1.6.8.txt:12
#: ../../../../1.9/docs/releases/1.7.1.txt:12
msgid ""
"Allowed related many-to-many fields to be referenced in the admin "
"(:ticket:`23604`)."
msgstr ""

# bdb4f0b0709846e781348a900ffd57e8
# ccc49173a91c441bbc3a251f02b3bed3
# 9be7f11ff57d49c5b5ddbaf289e9b06d
# 4aa57f3e73734f3192b11980e346777a
#: ../../../../1.9/docs/releases/1.4.16.txt:16
#: ../../../../1.9/docs/releases/1.5.11.txt:15
#: ../../../../1.9/docs/releases/1.6.8.txt:15
#: ../../../../1.9/docs/releases/1.7.1.txt:28
msgid ""
"Allowed inline and hidden references to admin fields (:ticket:`23431`)."
msgstr ""

# 629ec7c4561e46d19cfdca68f274a2a9
#: ../../../../1.9/docs/releases/1.4.16.txt:19
msgid "Fixed parsing of the GEOS version string (:ticket:`20036`)."
msgstr ""

# 46711e367bd24b678cb964e728db267e
#: ../../../../1.9/docs/releases/1.4.17.txt:3
msgid "Django 1.4.17 release notes"
msgstr ""

# 259c4235915d49f782d3c0202426bbbb
# 3e583c4b538242fcb49e01d5f808ff65
# 24f723c0fe1e47308da2a3ee6f570cd9
# 5e2b1c099b7f44d3a0551699abbc3c74
#: ../../../../1.9/docs/releases/1.4.17.txt:5
#: ../../../../1.9/docs/releases/1.5.12.txt:5
#: ../../../../1.9/docs/releases/1.6.9.txt:5
#: ../../../../1.9/docs/releases/1.7.2.txt:5
msgid "*January 2, 2015*"
msgstr ""

# d4192d128af740f5b0d58e9936a2d0e3
#: ../../../../1.9/docs/releases/1.4.17.txt:7
msgid "Django 1.4.17 fixes a regression in the 1.4.14 security release."
msgstr ""

# 268c56184d474167abc85e0c823b1b75
# 7f5dbbe588ed49e1b564d08913397c97
# a499569a9cda4d11839627c4509e8cfc
#: ../../../../1.9/docs/releases/1.4.17.txt:9
#: ../../../../1.9/docs/releases/1.6.9.txt:9
#: ../../../../1.9/docs/releases/1.7.2.txt:9
msgid ""
"Additionally, Django's vendored version of six, :mod:`django.utils.six`, has"
" been upgraded to the latest release (1.9.0)."
msgstr ""

# 7cf9f03d005a42a2b6cacda34bd7381a
# 1368c05d8efe4ce092b9ac97b28b75d3
# 7ab3daa9db6d4437851943ec54de4154
# 568efc9a57514c5f8c085a4f75918126
#: ../../../../1.9/docs/releases/1.4.17.txt:15
#: ../../../../1.9/docs/releases/1.5.12.txt:12
#: ../../../../1.9/docs/releases/1.6.9.txt:15
#: ../../../../1.9/docs/releases/1.7.2.txt:87
msgid ""
"Fixed a regression with dynamically generated inlines and allowed field "
"references in the admin (:ticket:`23754`)."
msgstr ""

# 3800447009854d6e89cdb25836762fe1
#: ../../../../1.9/docs/releases/1.4.18.txt:3
msgid "Django 1.4.18 release notes"
msgstr ""

# 4f67e136b43d4b76a2dd230fa7ac5d49
# 5afed84b2eed4a7f91ba27990bee7ce2
# d215ab949f654e27b92f368d95319c17
#: ../../../../1.9/docs/releases/1.4.18.txt:5
#: ../../../../1.9/docs/releases/1.6.10.txt:5
#: ../../../../1.9/docs/releases/1.7.3.txt:5
msgid "*January 13, 2015*"
msgstr ""

# 30e51873c67f436ab8ee079af87bba1f
#: ../../../../1.9/docs/releases/1.4.18.txt:7
msgid ""
"Django 1.4.18 fixes several security issues in 1.4.17 as well as a "
"regression on Python 2.5 in the 1.4.17 release."
msgstr ""

# 5b5335b568874feba39cdeb03f4074bc
# cf3d452039384c57b9c0143c2ecdb8cb
# bd8fe78af6744739ab38c0162c9c26f3
#: ../../../../1.9/docs/releases/1.4.18.txt:11
#: ../../../../1.9/docs/releases/1.6.10.txt:10
#: ../../../../1.9/docs/releases/1.7.3.txt:10
msgid "WSGI header spoofing via underscore/dash conflation"
msgstr ""

# 8ddcfcfba9bd4ccea947df1aa40c002d
# a5a89ef67a634a25a4329927cd3d47f4
# 3a64ce468f7b4ea4a5739aaaf894a305
#: ../../../../1.9/docs/releases/1.4.18.txt:13
#: ../../../../1.9/docs/releases/1.6.10.txt:12
#: ../../../../1.9/docs/releases/1.7.3.txt:12
msgid ""
"When HTTP headers are placed into the WSGI environ, they are normalized by "
"converting to uppercase, converting all dashes to underscores, and "
"prepending `HTTP_`. For instance, a header ``X-Auth-User`` would become "
"``HTTP_X_AUTH_USER`` in the WSGI environ (and thus also in Django's "
"``request.META`` dictionary)."
msgstr ""

# a931e779d6254d8a941caeebc4f2e775
# a1b1aea0a937477cb5902eb4bd04a0db
# ca5d5093beba4bfebdbd6614c51d3cf2
#: ../../../../1.9/docs/releases/1.4.18.txt:19
#: ../../../../1.9/docs/releases/1.6.10.txt:18
#: ../../../../1.9/docs/releases/1.7.3.txt:18
msgid ""
"Unfortunately, this means that the WSGI environ cannot distinguish between "
"headers containing dashes and headers containing underscores: ``X-Auth-"
"User`` and ``X-Auth_User`` both become ``HTTP_X_AUTH_USER``. This means that"
" if a header is used in a security-sensitive way (for instance, passing "
"authentication information along from a front-end proxy), even if the proxy "
"carefully strips any incoming value for ``X-Auth-User``, an attacker may be "
"able to provide an ``X-Auth_User`` header (with underscore) and bypass this "
"protection."
msgstr ""

# f837ef65b7674af9ae02276c0bd886ab
# 42bf223547d548dbace6ef7738064649
# 5f87d17b2dfe4d9f9c059d76c21d9277
#: ../../../../1.9/docs/releases/1.4.18.txt:28
#: ../../../../1.9/docs/releases/1.6.10.txt:27
#: ../../../../1.9/docs/releases/1.7.3.txt:27
msgid ""
"In order to prevent such attacks, both Nginx and Apache 2.4+ strip all "
"headers containing underscores from incoming requests by default. Django's "
"built-in development server now does the same. Django's development server "
"is not recommended for production use, but matching the behavior of common "
"production servers reduces the surface area for behavior changes during "
"deployment."
msgstr ""

# 3554de23ff314db594f3bf1a10551cd9
# c32822972b504e4298b24118eec50d8a
# 2861aa91f6064511816b80da31488d17
# ff4881e2e34a414fb91168d56469a1b4
# 364c15585f5f422fb65c32d7a916787e
# 91fa978c99cf44fdb726de6adca0283b
# 4246165dec7c44a4a7931e4053f858f8
# 48f2a0f915e84ed7bdf30ace39299b68
#: ../../../../1.9/docs/releases/1.4.18.txt:35
#: ../../../../1.9/docs/releases/1.4.20.txt:10
#: ../../../../1.9/docs/releases/1.4.6.txt:13
#: ../../../../1.9/docs/releases/1.5.2.txt:10
#: ../../../../1.9/docs/releases/1.6.10.txt:34
#: ../../../../1.9/docs/releases/1.6.11.txt:27
#: ../../../../1.9/docs/releases/1.7.3.txt:34
#: ../../../../1.9/docs/releases/1.7.7.txt:27
msgid "Mitigated possible XSS attack via user-supplied redirect URLs"
msgstr ""

# c69267f1ef244cb3a5641ac57ab8e780
# 44c34d7c6df14d4b8e691e125ea3916a
# 9cd574916f6448cebf95362ae4a694bc
#: ../../../../1.9/docs/releases/1.4.18.txt:37
#: ../../../../1.9/docs/releases/1.6.10.txt:36
#: ../../../../1.9/docs/releases/1.7.3.txt:36
msgid ""
"Django relies on user input in some cases (e.g. "
":func:`django.contrib.auth.views.login` and :doc:`i18n "
"</topics/i18n/index>`) to redirect the user to an \"on success\" URL. The "
"security checks for these redirects (namely "
"``django.utils.http.is_safe_url()``) didn't strip leading whitespace on the "
"tested URL and as such considered URLs like ``\\njavascript:...`` safe. If a"
" developer relied on ``is_safe_url()`` to provide safe redirect targets and "
"put such a URL into a link, they could suffer from a XSS attack. This bug "
"doesn't affect Django currently, since we only put this URL into the "
"``Location`` response header and browsers seem to ignore JavaScript there."
msgstr ""

# 4641d1a5a3fd42e0b19d2f037a3cacd5
# 564062fc43fa4bdd85b768b48d14e1bf
# fa9cc45abcae4d1fad148aa5d25ef797
#: ../../../../1.9/docs/releases/1.4.18.txt:49
#: ../../../../1.9/docs/releases/1.6.10.txt:48
#: ../../../../1.9/docs/releases/1.7.3.txt:48
msgid "Denial-of-service attack against ``django.views.static.serve``"
msgstr ""

# 4bd8fd91337a464884c15dbe5909b820
# 4967c53dda21422d951b64cb789382bb
# 867f5941e37a45889854b33f2d50bc9d
#: ../../../../1.9/docs/releases/1.4.18.txt:51
#: ../../../../1.9/docs/releases/1.6.10.txt:50
#: ../../../../1.9/docs/releases/1.7.3.txt:50
msgid ""
"In older versions of Django, the :func:`django.views.static.serve` view read"
" the files it served one line at a time. Therefore, a big file with no "
"newlines would result in memory usage equal to the size of that file. An "
"attacker could exploit this and launch a denial-of-service attack by "
"simultaneously requesting many large files. This view now reads the file in "
"chunks to prevent large memory usage."
msgstr ""

# 755c0380a5b24f218928e238d67f2366
# 21d62ec538ee4a618247b60fe06b534b
# edc10ceeda5d4f389901a1eb861dc99e
#: ../../../../1.9/docs/releases/1.4.18.txt:58
#: ../../../../1.9/docs/releases/1.6.10.txt:57
#: ../../../../1.9/docs/releases/1.7.3.txt:57
msgid ""
"Note, however, that this view has always carried a warning that it is not "
"hardened for production use and should be used only as a development aid. "
"Now may be a good time to audit your project and serve your files in "
"production using a real front-end web server if you are not doing so."
msgstr ""

# 3fad1c7a5bfe4167a586707c8551e9fc
#: ../../../../1.9/docs/releases/1.4.18.txt:66
msgid ""
"To maintain compatibility with Python 2.5, Django's vendored version of six,"
" :mod:`django.utils.six`, has been downgraded to 1.8.0 which is the last "
"version to support Python 2.5."
msgstr ""

# 19891f1499b449739bf1e9cd8d5bfa5d
#: ../../../../1.9/docs/releases/1.4.19.txt:3
msgid "Django 1.4.19 release notes"
msgstr ""

# 3ba721eb25a34138a309eda5def5d668
# 601bfb4646b24db2b354f1184daed510
#: ../../../../1.9/docs/releases/1.4.19.txt:5
#: ../../../../1.9/docs/releases/1.7.4.txt:5
msgid "*January 27, 2015*"
msgstr ""

# 5f9d6e5633d7448182f9f4bbc17baa93
#: ../../../../1.9/docs/releases/1.4.19.txt:7
msgid "Django 1.4.19 fixes a regression in the 1.4.18 security release."
msgstr ""

# f99a885a090240398c6d9d9af23d735f
#: ../../../../1.9/docs/releases/1.4.19.txt:12
msgid ""
"``GZipMiddleware`` now supports streaming responses. As part of the 1.4.18 "
"security release, the ``django.views.static.serve()`` function was altered "
"to stream the files it serves. Unfortunately, the ``GZipMiddleware`` "
"consumed the stream prematurely and prevented files from being served "
"properly (:ticket:`24158`)."
msgstr ""

# 8856589656444ffb8e06df0eace6d54c
#: ../../../../1.9/docs/releases/1.4.2.txt:3
msgid "Django 1.4.2 release notes"
msgstr ""

# 4ceaeaebc5bb48ad87606d4c243be86b
#: ../../../../1.9/docs/releases/1.4.2.txt:7
msgid "This is the second security release in the Django 1.4 series."
msgstr ""

# 96a16e83f4c7441cb63142be528d51f8
#: ../../../../1.9/docs/releases/1.4.2.txt:42
msgid ""
"The newly introduced :class:`~django.db.models.GenericIPAddressField` "
"constructor arguments have been adapted to match those of all other model "
"fields. The first two keyword arguments are now verbose_name and name."
msgstr ""

# 5052fdc60dac4dbba7677f36a2589e6b
# c9d6c7df0da84db8b0381f614e342036
# d51aa2fafdad41babf588592c1fd5dee
#: ../../../../1.9/docs/releases/1.4.2.txt:47
#: ../../../../1.9/docs/releases/1.4.4.txt:83
#: ../../../../1.9/docs/releases/1.6.3.txt:135
msgid "Other bugfixes and changes"
msgstr ""

# 9e906443171f4426b5700640733fe33c
#: ../../../../1.9/docs/releases/1.4.2.txt:49
msgid "Subclass HTMLParser only for appropriate Python versions (#18239)."
msgstr ""

# a87d012e57674dc6a17981ca3ab79919
#: ../../../../1.9/docs/releases/1.4.2.txt:50
msgid "Added batch_size argument to qs.bulk_create() (#17788)."
msgstr ""

# 4f10b0737d1a4725ac0b94df613ea78e
#: ../../../../1.9/docs/releases/1.4.2.txt:51
msgid ""
"Fixed a small regression in the admin filters where wrongly formatted dates "
"passed as url parameters caused an unhandled ValidationError (#18530)."
msgstr ""

# ea9cab2617624ee8982eea5195b47bbc
#: ../../../../1.9/docs/releases/1.4.2.txt:52
msgid ""
"Fixed an endless loop bug when accessing permissions in templates (#18979)"
msgstr ""

# 9a3a4c6323fd43fbace7bf0824265356
#: ../../../../1.9/docs/releases/1.4.2.txt:53
msgid "Fixed some Python 2.5 compatibility issues"
msgstr ""

# 3716b220324741f6b280d64bde21af0f
#: ../../../../1.9/docs/releases/1.4.2.txt:54
msgid ""
"Fixed an issue with quoted filenames in Content-Disposition header (#19006)"
msgstr ""

# 60058e1c418546c68b1c03d2e353f1c1
#: ../../../../1.9/docs/releases/1.4.2.txt:55
msgid ""
"Made the context option in ``trans`` and ``blocktrans`` tags accept literals"
" wrapped in single quotes (#18881)."
msgstr ""

# 6c6d03386fb04bfd94bee9c804081579
# 9dd3c4975a884aa992386c635a3c3f6b
#: ../../../../1.9/docs/releases/1.4.2.txt:56
#: ../../../../1.9/docs/releases/1.4.4.txt:88
msgid "Numerous documentation improvements and fixes."
msgstr ""

# 925c3037edf04c62880e441362a1c608
#: ../../../../1.9/docs/releases/1.4.20.txt:3
msgid "Django 1.4.20 release notes"
msgstr ""

# 5673fdf2af134070b830bd63add2a74c
# e30c23e378b841778309b0334f887147
# 53f1d543a53c4b3b94a9702a8aae2c21
#: ../../../../1.9/docs/releases/1.4.20.txt:5
#: ../../../../1.9/docs/releases/1.6.11.txt:5
#: ../../../../1.9/docs/releases/1.7.7.txt:5
msgid "*March 18, 2015*"
msgstr ""

# 7afc86475cef464d8756379bef7044fd
#: ../../../../1.9/docs/releases/1.4.20.txt:7
msgid "Django 1.4.20 fixes one security issue in 1.4.19."
msgstr ""

# 9655d2e41a7846b98a7c165553eb45ae
# bbd173b4918a43f0b84b805e744d4ec4
# 3c840d1f9ba44425bb2002cfda34015f
#: ../../../../1.9/docs/releases/1.4.20.txt:12
#: ../../../../1.9/docs/releases/1.6.11.txt:29
#: ../../../../1.9/docs/releases/1.7.7.txt:29
msgid ""
"Django relies on user input in some cases (e.g. "
":func:`django.contrib.auth.views.login` and :doc:`i18n "
"</topics/i18n/index>`) to redirect the user to an \"on success\" URL. The "
"security checks for these redirects (namely "
"``django.utils.http.is_safe_url()``) accepted URLs with leading control "
"characters and so considered URLs like ``\\x08javascript:...`` safe. This "
"issue doesn't affect Django currently, since we only put this URL into the "
"``Location`` response header and browsers seem to ignore JavaScript there. "
"Browsers we tested also treat URLs prefixed with control characters such as "
"``%08//example.com`` as relative paths so redirection to an unsafe target "
"isn't a problem either."
msgstr ""

# 880413d645b149f2a4b93cd71edb759c
# f18678f554364302b35dd2de2ac03151
# 317bc689a19e4c088edef7e16a53ac3a
#: ../../../../1.9/docs/releases/1.4.20.txt:23
#: ../../../../1.9/docs/releases/1.6.11.txt:40
#: ../../../../1.9/docs/releases/1.7.7.txt:40
msgid ""
"However, if a developer relies on ``is_safe_url()`` to provide safe redirect"
" targets and puts such a URL into a link, they could suffer from an XSS "
"attack as some browsers such as Google Chrome ignore control characters at "
"the start of a URL in an anchor ``href``."
msgstr ""

# 2da64ceed7434762a1847fe086e45003
#: ../../../../1.9/docs/releases/1.4.21.txt:3
msgid "Django 1.4.21 release notes"
msgstr ""

# 3d8043ae4fae496a97876c2cc360b463
# 2d7be086489d4af0b909d034c9848fd7
# 15621a4fbb8a4e8da8e2106a4d18806b
#: ../../../../1.9/docs/releases/1.4.21.txt:5
#: ../../../../1.9/docs/releases/1.7.9.txt:5
#: ../../../../1.9/docs/releases/1.8.3.txt:5
msgid "*July 8, 2015*"
msgstr ""

# c14089a9779446b8b81ab0ddd30a497e
#: ../../../../1.9/docs/releases/1.4.21.txt:7
msgid "Django 1.4.21 fixes several security issues in 1.4.20."
msgstr ""

# 20020f087af44445b25498d4ecb37ffb
# 2f8c5c0e4eeb4d8882194da28dd618bc
# 71f6ff73a5bb443b8489e63e5c9be6c4
#: ../../../../1.9/docs/releases/1.4.21.txt:10
#: ../../../../1.9/docs/releases/1.7.9.txt:10
#: ../../../../1.9/docs/releases/1.8.3.txt:15
msgid "Denial-of-service possibility by filling session store"
msgstr ""

# bea8332105b34a9c9d3e61d50884e3ce
# 619d96b0a3e84f5e98f24a816afda7bf
# ccc59410ae6e4e598e97d19a26aecb17
#: ../../../../1.9/docs/releases/1.4.21.txt:12
#: ../../../../1.9/docs/releases/1.7.9.txt:12
#: ../../../../1.9/docs/releases/1.8.3.txt:17
msgid ""
"In previous versions of Django, the session backends created a new empty "
"record in the session storage anytime ``request.session`` was accessed and "
"there was a session key provided in the request cookies that didn't already "
"have a session record. This could allow an attacker to easily create many "
"new session records simply by sending repeated requests with unknown session"
" keys, potentially filling up the session store or causing other users' "
"session records to be evicted."
msgstr ""

# 2506edc6a7104645bee386bbd32755d8
# eaacffb7323b47f2b1b13ba4046c9fe5
# 5b06d435166a4678bb579a7725a2ecee
#: ../../../../1.9/docs/releases/1.4.21.txt:20
#: ../../../../1.9/docs/releases/1.7.9.txt:20
#: ../../../../1.9/docs/releases/1.8.3.txt:25
msgid ""
"The built-in session backends now create a session record only if the "
"session is actually modified; empty session records are not created. Thus "
"this potential DoS is now only possible if the site chooses to expose a "
"session-modifying view to anonymous users."
msgstr ""

# d517c8869ad144fa8c12748df961fba1
# dec19e21146e427e82e9e31af803daa0
# 14d3ed73540d4a5591796a14e683babc
#: ../../../../1.9/docs/releases/1.4.21.txt:25
#: ../../../../1.9/docs/releases/1.7.9.txt:25
#: ../../../../1.9/docs/releases/1.8.3.txt:30
msgid ""
"As each built-in session backend was fixed separately (rather than a fix in "
"the core sessions framework), maintainers of third-party session backends "
"should check whether the same vulnerability is present in their backend and "
"correct it if so."
msgstr ""

# e92905e8cb2d4ebc9b1163aab1a41888
# c72bfb4185be496b806e587662956319
# 52d5fa11b7cb48ab9d6a76add91c536c
#: ../../../../1.9/docs/releases/1.4.21.txt:31
#: ../../../../1.9/docs/releases/1.7.9.txt:31
#: ../../../../1.9/docs/releases/1.8.3.txt:36
msgid "Header injection possibility since validators accept newlines in input"
msgstr ""

# fde9dff3359d4f70b6e8f0b7068e5bb8
# 0b576ed3c621411a93ea1ed798573324
# 1dfde45a616f4f2f88436ef5ec6632a9
#: ../../../../1.9/docs/releases/1.4.21.txt:33
#: ../../../../1.9/docs/releases/1.7.9.txt:33
#: ../../../../1.9/docs/releases/1.8.3.txt:38
msgid ""
"Some of Django's built-in validators "
"(:class:`~django.core.validators.EmailValidator`, most seriously) didn't "
"prohibit newline characters (due to the usage of ``$`` instead of ``\\Z`` in"
" the regular expressions). If you use values with newlines in HTTP response "
"or email headers, you can suffer from header injection attacks. Django "
"itself isn't vulnerable because :class:`~django.http.HttpResponse` and the "
"mail sending utilities in :mod:`django.core.mail` prohibit newlines in HTTP "
"and SMTP headers, respectively. While the validators have been fixed in "
"Django, if you're creating HTTP responses or email messages in other ways, "
"it's a good idea to ensure that those methods prohibit newlines as well. You"
" might also want to validate that any existing data in your application "
"doesn't contain unexpected newlines."
msgstr ""

# 29c3214fca304175bfe8661900fdf614
#: ../../../../1.9/docs/releases/1.4.21.txt:46
msgid ""
":func:`~django.core.validators.validate_ipv4_address`, "
":func:`~django.core.validators.validate_slug`, and "
":class:`~django.core.validators.URLValidator` and their usage in the "
"corresponding form fields ``GenericIPAddresseField``, ``IPAddressField``, "
"``SlugField``, and ``URLField`` are also affected."
msgstr ""

# aa0eb0e6d953460487236f208cfaf07e
# 8face67cd76141c0b6774bf97ae4a64e
# 03631a264b0d4a24a854673c21003107
#: ../../../../1.9/docs/releases/1.4.21.txt:52
#: ../../../../1.9/docs/releases/1.7.9.txt:54
#: ../../../../1.9/docs/releases/1.8.3.txt:59
msgid ""
"The undocumented, internally unused ``validate_integer()`` function is now "
"stricter as it validates using a regular expression instead of simply "
"casting the value using ``int()`` and checking if an exception was raised."
msgstr ""

# e22ec94f428a4e49aef6c7d7aa0bef6b
#: ../../../../1.9/docs/releases/1.4.22.txt:3
msgid "Django 1.4.22 release notes"
msgstr ""

# eff1a17fb6b5425ea521f35a415c3c51
# 4f93699c4ecf4a15866edb9deeb8082b
# 0019be7df0604662b467078327b9ac38
#: ../../../../1.9/docs/releases/1.4.22.txt:5
#: ../../../../1.9/docs/releases/1.7.10.txt:5
#: ../../../../1.9/docs/releases/1.8.4.txt:5
msgid "*August 18, 2015*"
msgstr ""

# 96649f77afbe4b77a0808feb435cb8f2
#: ../../../../1.9/docs/releases/1.4.22.txt:7
msgid "Django 1.4.22 fixes a security issue in 1.4.21."
msgstr ""

# e14ff13b7fe147ae92753809b1a4af66
#: ../../../../1.9/docs/releases/1.4.22.txt:9
msgid ""
"It also fixes support with pip 7+ by disabling wheel support. Older versions"
" of 1.4 would silently build a broken wheel when installed with those "
"versions of pip."
msgstr ""

# 2ff78eaecc9f4ed7be718c6a59dc414a
# d1b6e6209dfa46f5b17f0d274a0339d7
# f443fea637ff4ad3bb74df1b5173127d
#: ../../../../1.9/docs/releases/1.4.22.txt:14
#: ../../../../1.9/docs/releases/1.7.10.txt:10
#: ../../../../1.9/docs/releases/1.8.4.txt:10
msgid ""
"Denial-of-service possibility in ``logout()`` view by filling session store"
msgstr ""

# 994298ee17a0415b84eba6997d13adac
# 80a03802ca2c4a9689cc88eb5c4916f5
# 5e119c9d1fe2488db431a0a1fd4c5129
#: ../../../../1.9/docs/releases/1.4.22.txt:16
#: ../../../../1.9/docs/releases/1.7.10.txt:12
#: ../../../../1.9/docs/releases/1.8.4.txt:12
msgid ""
"Previously, a session could be created when anonymously accessing the "
":func:`django.contrib.auth.views.logout` view (provided it wasn't decorated "
"with :func:`~django.contrib.auth.decorators.login_required` as done in the "
"admin). This could allow an attacker to easily create many new session "
"records by sending repeated requests, potentially filling up the session "
"store or causing other users' session records to be evicted."
msgstr ""

# 09e90313298243c18e0e349fe7c2186e
# 82b8b5c1902a4fe8be38c1c16986f833
# 05f44464b67845d2846f41296f998b95
#: ../../../../1.9/docs/releases/1.4.22.txt:23
#: ../../../../1.9/docs/releases/1.7.10.txt:19
#: ../../../../1.9/docs/releases/1.8.4.txt:19
msgid ""
"The :class:`~django.contrib.sessions.middleware.SessionMiddleware` has been "
"modified to no longer create empty session records, including when "
":setting:`SESSION_SAVE_EVERY_REQUEST` is active."
msgstr ""

# 5dfb21df0aa549e18c9df65a8475286b
# 4755fb1907c04f60bde2b223e92267da
#: ../../../../1.9/docs/releases/1.4.22.txt:27
#: ../../../../1.9/docs/releases/1.7.10.txt:23
msgid ""
"Additionally, the ``contrib.sessions.backends.base.SessionBase.flush()`` and"
" ``cache_db.SessionStore.flush()`` methods have been modified to avoid "
"creating a new empty session. Maintainers of third-party session backends "
"should check if the same vulnerability is present in their backend and "
"correct it if so."
msgstr ""

# 0852937367b249b49e0bde80ce4c19c1
#: ../../../../1.9/docs/releases/1.4.3.txt:3
msgid "Django 1.4.3 release notes"
msgstr ""

# 96e9fc8b8fee4cd7b3cf8579f6720e55
#: ../../../../1.9/docs/releases/1.4.3.txt:7
msgid ""
"Django 1.4.3 addresses two security issues present in previous Django "
"releases in the 1.4 series."
msgstr ""

# a702840193e04ffebaeea18fe41aa7bd
#: ../../../../1.9/docs/releases/1.4.4.txt:3
msgid "Django 1.4.4 release notes"
msgstr ""

# 3fe58f724fba4fd0ab09109792f5abcc
#: ../../../../1.9/docs/releases/1.4.4.txt:7
msgid ""
"Django 1.4.4 fixes four security issues present in previous Django releases "
"in the 1.4 series, as well as several other bugs and numerous documentation "
"improvements."
msgstr ""

# 70bea62215dd4e1fac6a109e3267ac96
#: ../../../../1.9/docs/releases/1.4.4.txt:11
msgid "This is the fourth bugfix/security release in the Django 1.4 series."
msgstr ""

# 5c0882c41e6341d29b3c0d128d444495
#: ../../../../1.9/docs/releases/1.4.4.txt:26
msgid ""
"For this reason, Django 1.4.4 adds a new setting, ``ALLOWED_HOSTS``, "
"containing an explicit list of valid host/domain names for this site. A "
"request with a Host header not matching an entry in this list will raise "
"``SuspiciousOperation`` if ``request.get_host()`` is called. For full "
"details see the documentation for the :setting:`ALLOWED_HOSTS` setting."
msgstr ""

# f27676c7c19d47ff9892c6618ba024fb
#: ../../../../1.9/docs/releases/1.4.4.txt:32
msgid ""
"The default value for this setting in Django 1.4.4 is ``['*']`` (matching "
"any host), for backwards-compatibility, but we strongly encourage all sites "
"to set a more restrictive value."
msgstr ""

# ef311e02d1434dd3b3495527642c6343
#: ../../../../1.9/docs/releases/1.4.4.txt:42
msgid ""
"The XML parser in the Python standard library is vulnerable to a number of "
"attacks via external entities and entity expansion. Django uses this parser "
"for deserializing XML-formatted database fixtures. This deserializer is not "
"intended for use with untrusted data, but in order to err on the side of "
"safety in Django 1.4.4 the XML deserializer refuses to parse an XML document"
" with a DTD (DOCTYPE definition), which closes off these attack avenues."
msgstr ""

# 44183dc2e7524146aa93b9496e3e1226
#: ../../../../1.9/docs/releases/1.4.4.txt:68
msgid ""
"In Django 1.4.4, all formsets have a strictly-enforced maximum number of "
"forms (1000 by default, though it can be set higher via the ``max_num`` "
"formset factory argument)."
msgstr ""

# ff5360c7dbbd40d99dcf0b8af15f8402
#: ../../../../1.9/docs/releases/1.4.4.txt:76
msgid ""
"In previous versions of Django, an admin user without change permission on a"
" model could still view the unicode representation of instances via their "
"admin history log. Django 1.4.4 now limits the admin history log view for an"
" object to users with change permission for that model."
msgstr ""

# 920f52f0101f43d89279d88736c6f884
#: ../../../../1.9/docs/releases/1.4.4.txt:85
msgid ""
"Prevented transaction state from leaking from one request to the next "
"(#19707)."
msgstr ""

# 0a3fea6395574384a33ea4f1e10fe90a
#: ../../../../1.9/docs/releases/1.4.4.txt:86
msgid "Changed an SQL command syntax to be MySQL 4 compatible (#19702)."
msgstr ""

# 0d6c7a40bb2f416787901af3e56b7e68
#: ../../../../1.9/docs/releases/1.4.4.txt:87
msgid ""
"Added backwards-compatibility with old unsalted MD5 passwords (#18144)."
msgstr ""

# b1ae797626954984957001464f428c57
#: ../../../../1.9/docs/releases/1.4.5.txt:3
msgid "Django 1.4.5 release notes"
msgstr ""

# 67680c7af99e4c1896be0fab16d8719d
#: ../../../../1.9/docs/releases/1.4.5.txt:7
msgid ""
"Django 1.4.5 corrects a packaging problem with yesterday's :doc:`1.4.4 "
"release </releases/1.4.4>`."
msgstr ""

# dfca2d57e0674fd5a4969fc60d608c93
#: ../../../../1.9/docs/releases/1.4.6.txt:3
msgid "Django 1.4.6 release notes"
msgstr ""

# 06d39295648949d7b615024d80e29fac
# 7913e2a6300744c3a58a5a1e60c809b9
#: ../../../../1.9/docs/releases/1.4.6.txt:5
#: ../../../../1.9/docs/releases/1.5.2.txt:5
msgid "*August 13, 2013*"
msgstr ""

# 6563871f246a46dca43b2c06072ae2cf
#: ../../../../1.9/docs/releases/1.4.6.txt:7
msgid ""
"Django 1.4.6 fixes one security issue present in previous Django releases in"
" the 1.4 series, as well as one other bug."
msgstr ""

# f951343f11a441c69d7f53d278ee945e
#: ../../../../1.9/docs/releases/1.4.6.txt:10
msgid "This is the sixth bugfix/security release in the Django 1.4 series."
msgstr ""

# e7f156449aa1411d90205e9500199a01
# cf707ab22aef4b958dad9cce0c8156e3
#: ../../../../1.9/docs/releases/1.4.6.txt:15
#: ../../../../1.9/docs/releases/1.5.2.txt:12
msgid ""
"Django relies on user input in some cases (e.g. "
":func:`django.contrib.auth.views.login`, ``django.contrib.comments``, and "
":doc:`i18n </topics/i18n/index>`) to redirect the user to an \"on success\" "
"URL. The security checks for these redirects (namely "
"``django.utils.http.is_safe_url()``) didn't check if the scheme is "
"``http(s)`` and as such allowed ``javascript:...`` URLs to be entered. If a "
"developer relied on ``is_safe_url()`` to provide safe redirect targets and "
"put such a URL into a link, they could suffer from a XSS attack. This bug "
"doesn't affect Django currently, since we only put this URL into the "
"``Location`` response header and browsers seem to ignore JavaScript there."
msgstr ""

# 7e547881a00e4acab0a7665f0b232e8c
# 5eb1fd77e57645ee9627fd3e6af8487e
#: ../../../../1.9/docs/releases/1.4.6.txt:29
#: ../../../../1.9/docs/releases/1.5.2.txt:60
msgid ""
"Fixed an obscure bug with the :func:`~django.test.override_settings` "
"decorator. If you hit an ``AttributeError: 'Settings' object has no "
"attribute '_original_allowed_hosts'`` exception, it's probably fixed "
"(#20636)."
msgstr ""

# b7b4c2351668440cb0303bc88d6b8b93
#: ../../../../1.9/docs/releases/1.4.7.txt:3
msgid "Django 1.4.7 release notes"
msgstr ""

# bacbf534974141409254b47c67570982
# 95c0e9f5246b4c8db40b031e7ee4fcad
#: ../../../../1.9/docs/releases/1.4.7.txt:5
#: ../../../../1.9/docs/releases/1.5.3.txt:5
msgid "*September 10, 2013*"
msgstr ""

# acb868bd02e34d22acc28ea1c8aa3ba6
#: ../../../../1.9/docs/releases/1.4.7.txt:7
msgid ""
"Django 1.4.7 fixes one security issue present in previous Django releases in"
" the 1.4 series."
msgstr ""

# 9e40fb5eaae14cffa6e86b1934ed9f33
# 4272d7d5a08a456a81b254cdee6349a9
#: ../../../../1.9/docs/releases/1.4.7.txt:11
#: ../../../../1.9/docs/releases/1.5.3.txt:12
msgid "Directory traversal vulnerability in :ttag:`ssi` template tag"
msgstr ""

# 325c8948af7c4b01b410c8bae44c7c97
# 0e63552c18164f75bb475cf8fae3ac0f
#: ../../../../1.9/docs/releases/1.4.7.txt:13
#: ../../../../1.9/docs/releases/1.5.3.txt:14
msgid ""
"In previous versions of Django it was possible to bypass the "
":setting:`ALLOWED_INCLUDE_ROOTS` setting used for security with the "
":ttag:`ssi` template tag by specifying a relative path that starts with one "
"of the allowed roots. For example, if ``ALLOWED_INCLUDE_ROOTS = "
"(\"/var/www\",)`` the following would be possible:"
msgstr ""

# 3f22f81d631b4427bc4b102b6714b03c
# 1488e6e05686421d913968535dff1036
#: ../../../../1.9/docs/releases/1.4.7.txt:23
#: ../../../../1.9/docs/releases/1.5.3.txt:24
msgid ""
"In practice this is not a very common problem, as it would require the "
"template author to put the :ttag:`ssi` file in a user-controlled variable, "
"but it's possible in principle."
msgstr ""

# c4f4aba33c98437b88e400e8fac56791
#: ../../../../1.9/docs/releases/1.4.8.txt:3
msgid "Django 1.4.8 release notes"
msgstr ""

# 1770f58c782f4ce4a18c919b03ea5c32
# c755cfee958c4de0b451137e1d6af745
#: ../../../../1.9/docs/releases/1.4.8.txt:5
#: ../../../../1.9/docs/releases/1.5.4.txt:5
msgid "*September 14, 2013*"
msgstr ""

# bca90b32512642ffbfdd1849141a960d
#: ../../../../1.9/docs/releases/1.4.8.txt:7
msgid ""
"Django 1.4.8 fixes two security issues present in previous Django releases "
"in the 1.4 series."
msgstr ""

# bd663fbde5184e8c8d9c29e09598a2d2
# 6402ae28c2544a74af088f5897d675d3
#: ../../../../1.9/docs/releases/1.4.8.txt:11
#: ../../../../1.9/docs/releases/1.5.4.txt:11
msgid "Denial-of-service via password hashers"
msgstr ""

# 2f7afc5872f64163a9bda004ea5ea6a2
# da836796429b40fd96f9ca77c2a49e7b
#: ../../../../1.9/docs/releases/1.4.8.txt:13
#: ../../../../1.9/docs/releases/1.5.4.txt:13
msgid ""
"In previous versions of Django, no limit was imposed on the plaintext length"
" of a password. This allowed a denial-of-service attack through submission "
"of bogus but extremely large passwords, tying up server resources performing"
" the (expensive, and increasingly expensive with the length of the password)"
" calculation of the corresponding hash."
msgstr ""

# 328d1dca4bbd4e6ca66e155c3cd35fec
#: ../../../../1.9/docs/releases/1.4.8.txt:19
msgid ""
"As of 1.4.8, Django's authentication framework imposes a 4096-byte limit on "
"passwords and will fail authentication with any submitted password of "
"greater length."
msgstr ""

# 28c66e17916f42d8a6f882856ff665e1
# 3e1e661ba4e34ac88a669134c7aeb84d
#: ../../../../1.9/docs/releases/1.4.8.txt:24
#: ../../../../1.9/docs/releases/1.5.4.txt:24
msgid ""
"Corrected usage of "
":func:`~django.views.decorators.debug.sensitive_post_parameters` in "
":mod:`django.contrib.auth`’s admin"
msgstr ""

# f789b3c6e7534667a79df4a51297f163
# 786f6220fede41b1964f48e09d4c6c5b
#: ../../../../1.9/docs/releases/1.4.8.txt:26
#: ../../../../1.9/docs/releases/1.5.4.txt:26
msgid ""
"The decoration of the ``add_view`` and ``user_change_password`` user admin "
"views with :func:`~django.views.decorators.debug.sensitive_post_parameters` "
"did not include :func:`~django.utils.decorators.method_decorator` (required "
"since the views are methods) resulting in the decorator not being properly "
"applied. This usage has been fixed and "
":func:`~django.views.decorators.debug.sensitive_post_parameters` will now "
"throw an exception if it's improperly used."
msgstr ""

# 8c0c5478fa9a49fa8bffc06d88d344a5
#: ../../../../1.9/docs/releases/1.4.9.txt:3
msgid "Django 1.4.9 release notes"
msgstr ""

# c820ef6e5a454df6b3d16454cb9ab225
# 1b68b9c28a4249d2bfb87dd9097c215d
#: ../../../../1.9/docs/releases/1.4.9.txt:5
#: ../../../../1.9/docs/releases/1.5.5.txt:5
msgid "*October 23, 2013*"
msgstr ""

# b2b93b8270884128b74dc3a01bc525e6
#: ../../../../1.9/docs/releases/1.4.9.txt:7
msgid ""
"Django 1.4.9 fixes a security-related bug in the 1.4 series and one other "
"data corruption bug."
msgstr ""

# e80d0058392048728fe3e08628cf408a
# c6ad86ed8b33410aad7a25eed5c05d53
#: ../../../../1.9/docs/releases/1.4.9.txt:11
#: ../../../../1.9/docs/releases/1.5.5.txt:11
msgid "Readdressed denial-of-service via password hashers"
msgstr ""

# 663486865757482c829e362f60f7ba56
#: ../../../../1.9/docs/releases/1.4.9.txt:13
msgid ""
"Django 1.4.8 imposes a 4096-byte limit on passwords in order to mitigate a "
"denial-of-service attack through submission of bogus but extremely large "
"passwords. In Django 1.4.9, we've reverted this change and instead improved "
"the speed of our PBKDF2 algorithm by not rehashing the key on every "
"iteration."
msgstr ""

# 89c1bd56a9cb4a00ac2ea6dcc352cb71
# 908822a0c8c94005aa8189ab92785846
#: ../../../../1.9/docs/releases/1.4.9.txt:21
#: ../../../../1.9/docs/releases/1.5.5.txt:27
msgid ""
"Fixed a data corruption bug with ``datetime_safe.datetime.combine`` "
"(#21256)."
msgstr ""

# 361f6c8185d04f8f928ffad6a336d6fc
#: ../../../../1.9/docs/releases/1.5.txt:3
msgid "Django 1.5 release notes"
msgstr ""

# 222c14bf8c1d48ec8b8f1228fd0999d6
#: ../../../../1.9/docs/releases/1.5.txt:5
msgid "*February 26, 2013*"
msgstr ""

# c39e909e78be4df788e316cb6e26dfff
#: ../../../../1.9/docs/releases/1.5.txt:7
msgid "Welcome to Django 1.5!"
msgstr ""

# 7cd5d21d82874d39a58e4f65cb07ec7f
#: ../../../../1.9/docs/releases/1.5.txt:9
msgid ""
"These release notes cover the `new features`_, as well as some `backwards "
"incompatible changes`_ you'll want to be aware of when upgrading from Django"
" 1.4 or older versions. We've also dropped some features, which are detailed"
" in :ref:`our deprecation plan <deprecation-removed-in-1.5>`, and we've "
"`begun the deprecation process for some features`_."
msgstr ""

# 57f1617d11fd440ab031ac33bc6a6e7e
#: ../../../../1.9/docs/releases/1.5.txt:23
msgid ""
"The biggest new feature in Django 1.5 is the `configurable User model`_. "
"Before Django 1.5, applications that wanted to use Django's auth framework "
"(:mod:`django.contrib.auth`) were forced to use Django's definition of a "
"\"user\". In Django 1.5, you can now swap out the ``User`` model for one "
"that you write yourself. This could be a simple extension to the existing "
"``User`` model -- for example, you could add a Twitter or Facebook ID field "
"-- or you could completely replace the ``User`` with one totally customized "
"for your site."
msgstr ""

# 625b85cbc36f48f983cf8b7c41e37cf0
#: ../../../../1.9/docs/releases/1.5.txt:31
msgid ""
"Django 1.5 is also the first release with `Python 3 support`_! We're "
"labeling this support \"experimental\" because we don't yet consider it "
"production-ready, but everything's in place for you to start porting your "
"apps to Python 3. Our next release, Django 1.6, will support Python 3 "
"without reservations."
msgstr ""

# 7a60233c535542388285acaadf52780e
#: ../../../../1.9/docs/releases/1.5.txt:36
msgid "Other notable new features in Django 1.5 include:"
msgstr ""

# 2cdea990fbbf4196ae0b81ad528c49a0
#: ../../../../1.9/docs/releases/1.5.txt:38
msgid ""
"`Support for saving a subset of model's fields`_ - :meth:`Model.save() "
"<django.db.models.Model.save()>` now accepts an ``update_fields`` argument, "
"letting you specify which fields are written back to the database when you "
"call ``save()``. This can help in high-concurrency operations, and can "
"improve performance."
msgstr ""

# e7baf4e74eb94eb2ba4c3985ab4a11d3
#: ../../../../1.9/docs/releases/1.5.txt:44
msgid ""
"Better `support for streaming responses <#explicit-streaming-responses>`_ "
"via the new  :class:`~django.http.StreamingHttpResponse` response class."
msgstr ""

# 7fa1e612266249a0aef5682fdcedfc80
#: ../../../../1.9/docs/releases/1.5.txt:47
msgid "`GeoDjango`_ now supports PostGIS 2.0."
msgstr ""

# 8c9995cffe8f4a81abe9a9f8b94ede61
#: ../../../../1.9/docs/releases/1.5.txt:49
msgid "... and more; `see below <#what-s-new-in-django-1-5>`_."
msgstr ""

# b392f4c2d2184d64ac132974e5f347ba
#: ../../../../1.9/docs/releases/1.5.txt:51
msgid ""
"Wherever possible we try to introduce new features in a backwards-compatible"
" manner per :doc:`our API stability policy </misc/api-stability>`. However, "
"as with previous releases, Django 1.5 ships with some minor `backwards "
"incompatible changes`_; people upgrading from previous versions of Django "
"should read that list carefully."
msgstr ""

# cf68d95e829e4165a26228bec99bf241
#: ../../../../1.9/docs/releases/1.5.txt:57
msgid ""
"One deprecated feature worth noting is the shift to \"new-style\" "
":ttag:`url` tag. Prior to Django 1.3, syntax like ``{% url myview %}`` was "
"interpreted incorrectly (Django considered ``\"myview\"`` to be a literal "
"name of a view, not a template variable named ``myview``). Django 1.3 and "
"above introduced the ``{% load url from future %}`` syntax to bring in the "
"corrected behavior where ``myview`` was seen as a variable."
msgstr ""

# d48c9dd0591546159b2938a027d74b0e
#: ../../../../1.9/docs/releases/1.5.txt:64
msgid ""
"The upshot of this is that if you are not using ``{% load url from future "
"%}`` in your templates, you'll need to change tags like ``{% url myview %}``"
" to ``{% url \"myview\" %}``. If you *were* using ``{% load url from future "
"%}`` you can simply remove that line under Django 1.5"
msgstr ""

# 954dab4daa0f41778275aa86d89a01c3
#: ../../../../1.9/docs/releases/1.5.txt:72
msgid ""
"Django 1.5 requires Python 2.6.5 or above, though we **highly recommend** "
"Python 2.7.3 or above. Support for Python 2.5 and below has been dropped."
msgstr ""

# 91b548cb83494ce193fae9d56f1f7d4c
#: ../../../../1.9/docs/releases/1.5.txt:75
msgid ""
"This change should affect only a small number of Django users, as most "
"operating-system vendors today are shipping Python 2.6 or newer as their "
"default version. If you're still using Python 2.5, however, you'll need to "
"stick to Django 1.4 until you can upgrade your Python version. Per :doc:`our"
" support policy </internals/release-process>`, Django 1.4 will continue to "
"receive security support until the release of Django 1.6."
msgstr ""

# 4e1ec05dddd6458d9f529378f7f0d206
#: ../../../../1.9/docs/releases/1.5.txt:82
msgid ""
"Django 1.5 does not run on a Jython final release, because Jython's latest "
"release doesn't currently support Python 2.6. However, Jython currently does"
" offer an alpha release featuring 2.7 support, and Django 1.5 supports that "
"alpha release."
msgstr ""

# b2eaf103661444c7a2a2b858595ccb0b
#: ../../../../1.9/docs/releases/1.5.txt:88
msgid "Python 3 support"
msgstr "Support de Python 3"

# 81edd5681a964665aa45fca216ff31cb
#: ../../../../1.9/docs/releases/1.5.txt:90
msgid ""
"Django 1.5 introduces support for Python 3 - specifically, Python 3.2 and "
"above. This comes in the form of a **single** codebase; you don't need to "
"install a different version of Django on Python 3. This means that you can "
"write applications targeted for just Python 2, just Python 3, or single "
"applications that support both platforms."
msgstr ""

# 7099b3c23790496db8f2d3db247e830c
#: ../../../../1.9/docs/releases/1.5.txt:96
msgid ""
"However, we're labeling this support \"experimental\" for now: although it's"
" received extensive testing via our automated test suite, it's received very"
" little real-world testing. We've done our best to eliminate bugs, but we "
"can't be sure we covered all possible uses of Django."
msgstr ""

# 20ef057a5d77447b980372d15666a273
#: ../../../../1.9/docs/releases/1.5.txt:101
msgid ""
"Some features of Django aren't available because they depend on third-party "
"software that hasn't been ported to Python 3 yet, including:"
msgstr ""

# bf634627bb6e4823a2b377f55500749a
#: ../../../../1.9/docs/releases/1.5.txt:104
msgid "the MySQL database backend (depends on MySQLdb)"
msgstr ""

# eb76657c0d5e495a8f3729ac5d4e15e2
#: ../../../../1.9/docs/releases/1.5.txt:105
msgid ":class:`~django.db.models.ImageField` (depends on PIL)"
msgstr ":class:`~django.db.models.ImageField` (requiert PIL)"

# d6aa9f2e2a3b41058d985a736c6d8638
#: ../../../../1.9/docs/releases/1.5.txt:106
msgid ""
":class:`~django.test.LiveServerTestCase` (depends on Selenium WebDriver)"
msgstr ":class:`~django.test.LiveServerTestCase` (requiert Selenium WebDriver)"

# b249b8b02e1e4642a8c3b75f4f1cba06
#: ../../../../1.9/docs/releases/1.5.txt:108
msgid ""
"Further, Django's more than a web framework; it's an ecosystem of pluggable "
"components. At this point, very few third-party applications have been "
"ported to Python 3, so it's unlikely that a real-world application will have"
" all its dependencies satisfied under Python 3."
msgstr ""

# 6f8d8227d0de4afc965c10059adc72b9
#: ../../../../1.9/docs/releases/1.5.txt:113
msgid ""
"Thus, we're recommending that Django 1.5 not be used in production under "
"Python 3. Instead, use this opportunity to begin :doc:`porting applications "
"to Python 3 </topics/python3>`. If you're an author of a pluggable "
"component, we encourage you to start porting now."
msgstr ""

# dda48dd700604d78824c8e5c13f7b592
#: ../../../../1.9/docs/releases/1.5.txt:118
msgid ""
"We plan to offer first-class, production-ready support for Python 3 in our "
"next release, Django 1.6."
msgstr ""

# 9429d0c3fa9a464da92c7254cd3d91c1
#: ../../../../1.9/docs/releases/1.5.txt:122
msgid "What's new in Django 1.5"
msgstr "Nouveautés de Django 1.5"

# 75628af20b3e4daa808b5574291b7f00
#: ../../../../1.9/docs/releases/1.5.txt:125
msgid "Configurable User model"
msgstr "Modèle utilisateur configurable"

# 80b765d00d7142d38b34d721e0e6642b
#: ../../../../1.9/docs/releases/1.5.txt:127
msgid ""
"In Django 1.5, you can now use your own model as the store for user-related "
"data. If your project needs a username with more than 30 characters, or if "
"you want to store user's names in a format other than first name/last name, "
"or you want to put custom profile information onto your User object, you can"
" now do so."
msgstr ""

# 292586f289f141ba85a2e562d7ef3cdb
#: ../../../../1.9/docs/releases/1.5.txt:133
msgid ""
"If you have a third-party reusable application that references the User "
"model, you may need to make some changes to the way you reference User "
"instances. You should also document any specific features of the User model "
"that your application relies upon."
msgstr ""

# 9fcc5dc1fa8d44daa722821f847958c1
#: ../../../../1.9/docs/releases/1.5.txt:138
msgid ""
"See the :ref:`documentation on custom User models <auth-custom-user>` for "
"more details."
msgstr ""

# 1f37120e86624854bf325e18346c94e9
#: ../../../../1.9/docs/releases/1.5.txt:142
msgid "Support for saving a subset of model's fields"
msgstr ""

# 7ddced552ddd4366b9692ad1e7a7a7fa
#: ../../../../1.9/docs/releases/1.5.txt:144
msgid ""
"The method :meth:`Model.save() <django.db.models.Model.save()>` has a new "
"keyword argument ``update_fields``. By using this argument it is possible to"
" save only a select list of model's fields. This can be useful for "
"performance reasons or when trying to avoid overwriting concurrent changes."
msgstr ""

# 953600d7bbfc4c5d9bde50a59fd8a2fa
#: ../../../../1.9/docs/releases/1.5.txt:149
msgid ""
"Deferred instances (those loaded by ``.only()`` or ``.defer()``) will "
"automatically save just the loaded fields. If any field is set manually "
"after load, that field will also get updated on save."
msgstr ""

# d3a1604c8251429a903f53e40c352fcf
#: ../../../../1.9/docs/releases/1.5.txt:153
msgid ""
"See the :meth:`Model.save() <django.db.models.Model.save()>` documentation "
"for more details."
msgstr ""

# be755964b5be4b4390aa1b3e39c91b0c
#: ../../../../1.9/docs/releases/1.5.txt:157
msgid "Caching of related model instances"
msgstr ""

# 3d43503887034299bf0c7b7d443516c8
#: ../../../../1.9/docs/releases/1.5.txt:159
msgid ""
"When traversing relations, the ORM will avoid re-fetching objects that were "
"previously loaded. For example, with the tutorial's models::"
msgstr ""

# 7d370c75b36c404dacd65182cdfaf605
#: ../../../../1.9/docs/releases/1.5.txt:167
msgid ""
"In Django 1.5, the third line no longer triggers a new SQL query to fetch "
"``first_choice.poll``; it was set by the second line."
msgstr ""

# c3ced94f57514efe840b3afae5654cf1
#: ../../../../1.9/docs/releases/1.5.txt:170
msgid ""
"For one-to-one relationships, both sides can be cached. For many-to-one "
"relationships, only the single side of the relationship can be cached. This "
"is particularly helpful in combination with ``prefetch_related``."
msgstr ""

# aa3f367a774b4544a7aba3aabb333f9d
#: ../../../../1.9/docs/releases/1.5.txt:177
msgid "Explicit support for streaming responses"
msgstr ""

# 973f71066cc34220a86f71150e5d1660
#: ../../../../1.9/docs/releases/1.5.txt:179
msgid ""
"Before Django 1.5, it was possible to create a streaming response by passing"
" an iterator to :class:`~django.http.HttpResponse`. But this was unreliable:"
" any middleware that accessed the :attr:`~django.http.HttpResponse.content` "
"attribute would consume the iterator prematurely."
msgstr ""

# c6744240c6d5447d9a15d59e212d7b5a
#: ../../../../1.9/docs/releases/1.5.txt:184
msgid ""
"You can now explicitly generate a streaming response with the new "
":class:`~django.http.StreamingHttpResponse` class. This class exposes a "
":class:`~django.http.StreamingHttpResponse.streaming_content` attribute "
"which is an iterator."
msgstr ""

# e643deb67bc445ec94805abc8bad1577
#: ../../../../1.9/docs/releases/1.5.txt:189
msgid ""
"Since :class:`~django.http.StreamingHttpResponse` does not have a "
"``content`` attribute, middleware that needs access to the response content "
"must test for streaming responses and behave accordingly. See :ref"
":`response-middleware` for more information."
msgstr ""

# 918af7d8433b4e23aa44db0b5ec7d9f0
#: ../../../../1.9/docs/releases/1.5.txt:195
msgid "``{% verbatim %}`` template tag"
msgstr ""

# 170513b71a4d44cbae6ac10ebc394123
#: ../../../../1.9/docs/releases/1.5.txt:197
msgid ""
"To make it easier to deal with JavaScript templates which collide with "
"Django's syntax, you can now use the :ttag:`verbatim` block tag to avoid "
"parsing the tag's content."
msgstr ""

# 93a4d8f3c1e8445fab5cb135dfcfbd3b
#: ../../../../1.9/docs/releases/1.5.txt:202
msgid "Retrieval of ``ContentType`` instances associated with proxy models"
msgstr ""

# af025a19143b4b469448298050e1c4ef
#: ../../../../1.9/docs/releases/1.5.txt:204
msgid ""
"The methods :meth:`ContentTypeManager.get_for_model() "
"<django.contrib.contenttypes.models.ContentTypeManager.get_for_model()>` and"
" :meth:`ContentTypeManager.get_for_models() "
"<django.contrib.contenttypes.models.ContentTypeManager.get_for_models()>` "
"have a new keyword argument – respectively ``for_concrete_model`` and "
"``for_concrete_models``. By passing ``False`` using this argument it is now "
"possible to retrieve the :class:`ContentType "
"<django.contrib.contenttypes.models.ContentType>` associated with proxy "
"models."
msgstr ""

# 3257ce6a45004b6d8dac6e6faae0fe3e
#: ../../../../1.9/docs/releases/1.5.txt:212
msgid "New ``view`` variable in class-based views context"
msgstr ""

# ab30c8cdec514f51b3186cd35a6d78c1
#: ../../../../1.9/docs/releases/1.5.txt:214
msgid ""
"In all :doc:`generic class-based views </topics/class-based-views/index>` "
"(or any class-based view inheriting from ``ContextMixin``), the context "
"dictionary contains a ``view`` variable that points to the ``View`` "
"instance."
msgstr ""

# 38316587837b47a296af6fdaaf385f5f
#: ../../../../1.9/docs/releases/1.5.txt:221
msgid ""
":class:`~django.contrib.gis.geos.LineString` and "
":class:`~django.contrib.gis.geos.MultiLineString` GEOS objects now support "
"the :meth:`~django.contrib.gis.geos.GEOSGeometry.interpolate()` and "
":meth:`~django.contrib.gis.geos.GEOSGeometry.project()` methods (so-called "
"linear referencing)."
msgstr ""

# 8a9734740ac14dc6a3f15468bfb352d9
#: ../../../../1.9/docs/releases/1.5.txt:227
msgid ""
"The ``wkb`` and ``hex`` properties of "
":class:`~django.contrib.gis.geos.GEOSGeometry` objects preserve the Z "
"dimension."
msgstr ""

# 851ead753f5d45c393baca662206b51d
#: ../../../../1.9/docs/releases/1.5.txt:231
msgid ""
"Support for PostGIS 2.0 has been added and support for GDAL < 1.5 has been "
"dropped."
msgstr ""

# 461f89ca20a74a24b62e2954b5cf6920
#: ../../../../1.9/docs/releases/1.5.txt:235
msgid "New tutorials"
msgstr "Nouveaux tutoriaux"

# b623e33649cd4060a518cffe82d40ee8
#: ../../../../1.9/docs/releases/1.5.txt:237
msgid ""
"Additions to the docs include a revamped :doc:`Tutorial "
"3</intro/tutorial03>` and a new :doc:`tutorial on "
"testing</intro/tutorial05>`. A new section, \"Advanced Tutorials\", offers "
":doc:`How to write reusable apps </intro/reusable-apps>` as well as a step-"
"by-step guide for new contributors in :doc:`Writing your first patch for "
"Django </intro/contributing>`."
msgstr ""

# 2a5cb8ff37a34005812abd9ec67104eb
#: ../../../../1.9/docs/releases/1.5.txt:246
msgid "Django 1.5 also includes several smaller improvements worth noting:"
msgstr ""

# 1b1da8e9a13f49ca89bfcaeadfe00af4
#: ../../../../1.9/docs/releases/1.5.txt:248
msgid ""
"The template engine now interprets ``True``, ``False`` and ``None`` as the "
"corresponding Python objects."
msgstr ""

# 3f55a1bfbeb24e0e9765b55e477c423d
#: ../../../../1.9/docs/releases/1.5.txt:251
msgid ""
":mod:`django.utils.timezone` provides a helper for converting aware "
"datetimes between time zones. See :func:`~django.utils.timezone.localtime`."
msgstr ""

# 4237a952f0c54e65a3bce4f494a23dfe
#: ../../../../1.9/docs/releases/1.5.txt:254
msgid "The generic views support OPTIONS requests."
msgstr ""

# c5f24e940b5c43ddb33de26ee309c788
#: ../../../../1.9/docs/releases/1.5.txt:256
msgid ""
"Management commands do not raise ``SystemExit`` any more when called by code"
" from :ref:`call_command <call-command>`. Any exception raised by the "
"command (mostly :ref:`CommandError <ref-command-exceptions>`) is propagated."
msgstr ""

# ad0ed4c31fb84757a4a853b307c01116
#: ../../../../1.9/docs/releases/1.5.txt:260
msgid ""
"Moreover, when you output errors or messages in your custom commands, you "
"should now use ``self.stdout.write('message')`` and "
"``self.stderr.write('error')`` (see the note on :ref:`management commands "
"output <management-commands-output>`)."
msgstr ""

# 76d3567c89f94b2db44a7f11f23927d3
#: ../../../../1.9/docs/releases/1.5.txt:265
msgid ""
"The dumpdata management command outputs one row at a time, preventing out-"
"of-memory errors when dumping large datasets."
msgstr ""

# 7603db8006244870bd825d1c7e3a4a0d
#: ../../../../1.9/docs/releases/1.5.txt:268
msgid ""
"In the localflavor for Canada, \"pq\" was added to the acceptable codes for "
"Quebec. It's an old abbreviation."
msgstr ""

# 5c9ddd6411ae47f6b1bc328f5ba21749
#: ../../../../1.9/docs/releases/1.5.txt:271
msgid ""
"The :ref:`receiver <connecting-receiver-functions>` decorator is now able to"
" connect to more than one signal by supplying a list of signals."
msgstr ""

# 4d9fa0873c9c4a14972359babc75d3e6
#: ../../../../1.9/docs/releases/1.5.txt:274
msgid ""
"In the admin, you can now filter users by groups which they are members of."
msgstr ""

# d35eea9f4f804a58bdb9430d52d2a284
#: ../../../../1.9/docs/releases/1.5.txt:276
msgid ""
":meth:`QuerySet.bulk_create() <django.db.models.query.QuerySet.bulk_create>`"
" now has a batch_size argument. By default the batch_size is unlimited "
"except for SQLite where single batch is limited so that 999 parameters per "
"query isn't exceeded."
msgstr ""

# ea2c4fb006af43c6b511002510c9af1d
#: ../../../../1.9/docs/releases/1.5.txt:281
msgid ""
"The :setting:`LOGIN_URL` and :setting:`LOGIN_REDIRECT_URL` settings now also"
" accept view function names and :ref:`named URL patterns <naming-url-"
"patterns>`. This allows you to reduce configuration duplication. More "
"information can be found in the "
":func:`~django.contrib.auth.decorators.login_required` documentation."
msgstr ""

# f94b60057ae24bb9a06550dcf6e85b1e
#: ../../../../1.9/docs/releases/1.5.txt:287
msgid ""
"Django now provides a mod_wsgi :doc:`auth handler </howto/deployment/wsgi"
"/apache-auth>`."
msgstr ""

# 907a0a44a9d9407ba106ec10b81535fc
#: ../../../../1.9/docs/releases/1.5.txt:290
msgid ""
"The :meth:`QuerySet.delete() <django.db.models.query.QuerySet.delete>` and "
":meth:`Model.delete() <django.db.models.Model.delete()>` can now take fast-"
"path in some cases. The fast-path allows for less queries and less objects "
"fetched into memory. See :meth:`QuerySet.delete() "
"<django.db.models.query.QuerySet.delete>` for details."
msgstr ""

# 1a9cfe140729423d94173e69bd4c6603
#: ../../../../1.9/docs/releases/1.5.txt:296
msgid ""
"An instance of :class:`~django.core.urlresolvers.ResolverMatch` is stored on"
" the request as ``resolver_match``."
msgstr ""

# 70424885354f4b5b980e385116743a9b
#: ../../../../1.9/docs/releases/1.5.txt:299
msgid ""
"By default, all logging messages reaching the ``django`` logger when "
":setting:`DEBUG` is ``True`` are sent to the console (unless you redefine "
"the logger in your :setting:`LOGGING` setting)."
msgstr ""

# a1aa9c0f2b6b4900996e57dcc5d1511c
#: ../../../../1.9/docs/releases/1.5.txt:303
msgid ""
"When using :class:`~django.template.RequestContext`, it is now possible to "
"look up permissions by using ``{% if 'someapp.someperm' in perms %}`` in "
"templates."
msgstr ""

# 7d0baae4c46d41a5b218da771cc603ad
#: ../../../../1.9/docs/releases/1.5.txt:307
msgid ""
"It's not required any more to have ``404.html`` and ``500.html`` templates "
"in the root templates directory. Django will output some basic error "
"messages for both situations when those templates are not found. Of course, "
"it's still recommended as good practice to provide those templates in order "
"to present pretty error pages to the user."
msgstr ""

# 83f2fcca636b4b3cb4d7854828cc3177
#: ../../../../1.9/docs/releases/1.5.txt:313
msgid ""
":mod:`django.contrib.auth` provides a new signal that is emitted whenever a "
"user fails to login successfully. See "
":data:`~django.contrib.auth.signals.user_login_failed`"
msgstr ""

# 4fb106cdb1b64518855df7fe03560fb3
#: ../../../../1.9/docs/releases/1.5.txt:317
msgid ""
"The loaddata management command now supports an "
":djadminopt:`--ignorenonexistent` option to ignore data for fields that no "
"longer exist."
msgstr ""

# 24f8a3ca627c452880b79c6bc2ef9e5e
#: ../../../../1.9/docs/releases/1.5.txt:321
msgid ""
":meth:`~django.test.SimpleTestCase.assertXMLEqual` and "
":meth:`~django.test.SimpleTestCase.assertXMLNotEqual` new assertions allow "
"you to test equality for XML content at a semantic level, without caring for"
" syntax differences (spaces, attribute order, etc.)."
msgstr ""

# 858b530bd46b431c889feace06fbd198
#: ../../../../1.9/docs/releases/1.5.txt:326
msgid ""
"RemoteUserMiddleware now forces logout when the REMOTE_USER header "
"disappears during the same browser session."
msgstr ""

# 950ac9f850074b95b2f6d0f2509aee0a
#: ../../../../1.9/docs/releases/1.5.txt:329
msgid ""
"The :ref:`cache-based session backend <cached-sessions-backend>` can store "
"session data in a non-default cache."
msgstr ""

# 3bd453c282ea480c91834647cc195d29
#: ../../../../1.9/docs/releases/1.5.txt:332
msgid ""
"Multi-column indexes can now be created on models. Read the "
":attr:`~django.db.models.Options.index_together` documentation for more "
"information."
msgstr ""

# e9e038465e1c4ccb8163e341371a6b66
#: ../../../../1.9/docs/releases/1.5.txt:336
msgid ""
"During Django's logging configuration verbose Deprecation warnings are "
"enabled and warnings are captured into the logging system. Logged warnings "
"are routed through the ``console`` logging handler, which by default "
"requires :setting:`DEBUG` to be True for output to be generated. The result "
"is that DeprecationWarnings should be printed to the console in development "
"environments the way they have been in Python versions < 2.7."
msgstr ""

# 8d33f2f35ec6489cafdc48aa8bee4c5a
#: ../../../../1.9/docs/releases/1.5.txt:343
msgid ""
"The API for :meth:`django.contrib.admin.ModelAdmin.message_user` method has "
"been modified to accept additional arguments adding capabilities similar to "
":func:`django.contrib.messages.add_message`. This is useful for generating "
"error messages from admin actions."
msgstr ""

# feea4accbe834ec69b73167d15cce2ab
#: ../../../../1.9/docs/releases/1.5.txt:348
msgid ""
"The admin's list filters can now be customized per-request thanks to the new"
" :meth:`django.contrib.admin.ModelAdmin.get_list_filter` method."
msgstr ""

# abd2e0fc76b64474aa58ebf4ebede8c8
#: ../../../../1.9/docs/releases/1.5.txt:352
msgid "Backwards incompatible changes in 1.5"
msgstr ""

# 271e242db03a40c4b43856c54b3436f4
#: ../../../../1.9/docs/releases/1.5.txt:356
msgid ""
"In addition to the changes outlined in this section, be sure to review the "
":ref:`deprecation plan <deprecation-removed-in-1.5>` for any features that "
"have been removed. If you haven't updated your code within the deprecation "
"timeline for a given feature, its removal may appear as a backwards "
"incompatible change."
msgstr ""

# 6f56bf22e44f400ba5def35cafaf3504
#: ../../../../1.9/docs/releases/1.5.txt:363
msgid "``ALLOWED_HOSTS`` required in production"
msgstr ""

# 6da43457fb174617afbe2444b5449075
#: ../../../../1.9/docs/releases/1.5.txt:365
msgid ""
"The new :setting:`ALLOWED_HOSTS` setting validates the request's ``Host`` "
"header and protects against host-poisoning attacks. This setting is now "
"required whenever :setting:`DEBUG` is ``False``, or else "
":meth:`django.http.HttpRequest.get_host()` will raise "
":exc:`~django.core.exceptions.SuspiciousOperation`. For more details see the"
" :setting:`full documentation<ALLOWED_HOSTS>` for the new setting."
msgstr ""

# d972fa2a215e450f979fce39339fb024
#: ../../../../1.9/docs/releases/1.5.txt:373
msgid "Managers on abstract models"
msgstr ""

# b75d45cc03e14897bdc96399faf76bca
#: ../../../../1.9/docs/releases/1.5.txt:375
msgid ""
"Abstract models are able to define a custom manager, and that manager "
":ref:`will be inherited by any concrete models extending the abstract model "
"<custom-managers-and-inheritance>`. However, if you try to use the abstract "
"model to call a method on the manager, an exception will now be raised. "
"Previously, the call would have been permitted, but would have failed as "
"soon as any database operation was attempted (usually with a \"table does "
"not exist\" error from the database)."
msgstr ""

# 8a7194b068644d25a04a3cc49fb5daaf
#: ../../../../1.9/docs/releases/1.5.txt:383
msgid ""
"If you have functionality on a manager that you have been invoking using the"
" abstract class, you should migrate that logic to a Python ``staticmethod`` "
"or ``classmethod`` on the abstract class."
msgstr ""

# 220928d1a22c4c20aee92fd5ad4050be
#: ../../../../1.9/docs/releases/1.5.txt:388
msgid "Context in year archive class-based views"
msgstr ""

# f8b754832d1f4dad962e0673d3ecfcd5
#: ../../../../1.9/docs/releases/1.5.txt:390
msgid ""
"For consistency with the other date-based generic views, "
":class:`~django.views.generic.dates.YearArchiveView` now passes ``year`` in "
"the context as a :class:`datetime.date` rather than a string.  If you are "
"using ``{{ year }}`` in your templates, you must replace it with ``{{ "
"year|date:\"Y\" }}``."
msgstr ""

# f220d4a19995418aa3a2f041213b342d
#: ../../../../1.9/docs/releases/1.5.txt:396
msgid ""
"``next_year`` and ``previous_year`` were also added in the context. They are"
" calculated according to ``allow_empty`` and ``allow_future``."
msgstr ""

# bfa10befa2e8432191cee7340bce84d5
#: ../../../../1.9/docs/releases/1.5.txt:400
msgid "Context in year and month archive class-based views"
msgstr ""

# 7d6d333f2c2c43db98b3deb6d86dd88e
#: ../../../../1.9/docs/releases/1.5.txt:402
msgid ""
":class:`~django.views.generic.dates.YearArchiveView` and "
":class:`~django.views.generic.dates.MonthArchiveView` were documented to "
"provide a ``date_list`` sorted in ascending order in the context, like their"
" function-based predecessors, but it actually was in descending order. In "
"1.5, the documented order was restored. You may want to add (or remove) the "
"``reversed`` keyword when you're iterating on ``date_list`` in a template::"
msgstr ""

# cc96d384b0f64789adaa1a1979a42182
#: ../../../../1.9/docs/releases/1.5.txt:411
msgid ""
":class:`~django.views.generic.dates.ArchiveIndexView` still provides a "
"``date_list`` in descending order."
msgstr ""

# f9a31068c86e4cbf89624de89e0828e9
#: ../../../../1.9/docs/releases/1.5.txt:415
msgid "Context in TemplateView"
msgstr ""

# 42e192c0b6504d5dbebb2867cca60483
#: ../../../../1.9/docs/releases/1.5.txt:417
msgid ""
"For consistency with the design of the other generic views, "
":class:`~django.views.generic.base.TemplateView` no longer passes a "
"``params`` dictionary into the context, instead passing the variables from "
"the URLconf directly into the context."
msgstr ""

# 434cd425853344be8b4be2a8fb8713aa
#: ../../../../1.9/docs/releases/1.5.txt:423
msgid "Non-form data in HTTP requests"
msgstr ""

# 46d3cb0d11824baead2f852a968d4266
#: ../../../../1.9/docs/releases/1.5.txt:425
msgid ""
":attr:`request.POST <django.http.HttpRequest.POST>` will no longer include "
"data posted via HTTP requests with non form-specific content-types in the "
"header. In prior versions, data posted with content-types other than "
"``multipart/form-data`` or ``application/x-www-form-urlencoded`` would still"
" end up represented in the :attr:`request.POST "
"<django.http.HttpRequest.POST>` attribute. Developers wishing to access the "
"raw POST data for these cases, should use the :attr:`request.body "
"<django.http.HttpRequest.body>` attribute instead."
msgstr ""

# a55da2a0ddde4aa5aff2f97c81496bd3
#: ../../../../1.9/docs/releases/1.5.txt:435
msgid ":data:`~django.core.signals.request_finished` signal"
msgstr ""

# 4b0561c24a9441528098f0aec3b1365c
#: ../../../../1.9/docs/releases/1.5.txt:437
msgid ""
"Django used to send the :data:`~django.core.signals.request_finished` signal"
" as soon as the view function returned a response. This interacted badly "
"with :ref:`streaming responses <httpresponse-streaming>` that delay content "
"generation."
msgstr ""

# 8e741b67b5894b63846104a214132adc
#: ../../../../1.9/docs/releases/1.5.txt:442
msgid ""
"This signal is now sent after the content is fully consumed by the WSGI "
"gateway. This might be backwards incompatible if you rely on the signal "
"being fired before sending the response content to the client. If you do, "
"you should consider using :doc:`middleware </topics/http/middleware>` "
"instead."
msgstr ""

# cfc09c0ae02149b78d1332b371d09786
#: ../../../../1.9/docs/releases/1.5.txt:449
msgid ""
"Some WSGI servers and middleware do not always call ``close`` on the "
"response object after handling a request, most notably uWSGI prior to 1.2.6 "
"and Sentry's error reporting middleware up to 2.0.7. In those cases the "
"``request_finished`` signal isn't sent at all. This can result in idle "
"connections to database and memcache servers."
msgstr ""

# bcc46c7c02be4569b279b0cff62d1393
#: ../../../../1.9/docs/releases/1.5.txt:456
msgid "OPTIONS, PUT and DELETE requests in the test client"
msgstr ""

# ed5e74dbb60c4a2eb6d5eea8173aa7a1
#: ../../../../1.9/docs/releases/1.5.txt:458
msgid ""
"Unlike GET and POST, these HTTP methods aren't implemented by web browsers. "
"Rather, they're used in APIs, which transfer data in various formats such as"
" JSON or XML. Since such requests may contain arbitrary data, Django doesn't"
" attempt to decode their body."
msgstr ""

# 8c3bd72724774f1d93d739c6bb3d6d83
#: ../../../../1.9/docs/releases/1.5.txt:463
msgid ""
"However, the test client used to build a query string for OPTIONS and DELETE"
" requests like for GET, and a request body for PUT requests like for POST. "
"This encoding was arbitrary and inconsistent with Django's behavior when it "
"receives the requests, so it was removed in Django 1.5."
msgstr ""

# f22c779273e7464ca39e769864648dd1
#: ../../../../1.9/docs/releases/1.5.txt:468
msgid ""
"If you were using the ``data`` parameter in an OPTIONS or a DELETE request, "
"you must convert it to a query string and append it to the ``path`` "
"parameter."
msgstr ""

# a700b782c96041c89ea42201c4f4f386
#: ../../../../1.9/docs/releases/1.5.txt:471
msgid ""
"If you were using the ``data`` parameter in a PUT request without a "
"``content_type``, you must encode your data before passing it to the test "
"client and set the ``content_type`` argument."
msgstr ""

# 58d2fb479eda4bd6a0c76d9157c9228f
#: ../../../../1.9/docs/releases/1.5.txt:478
msgid "System version of ``simplejson`` no longer used"
msgstr ""

# 4ac6f144aeeb4b14b01cc24845632a97
#: ../../../../1.9/docs/releases/1.5.txt:480
msgid ""
":ref:`As explained below <simplejson-deprecation>`, Django 1.5 deprecates "
"``django.utils.simplejson`` in favor of Python 2.6's built-in :mod:`json` "
"module. In theory, this change is harmless. Unfortunately, because of "
"incompatibilities between versions of ``simplejson``, it may trigger errors "
"in some circumstances."
msgstr ""

# 127b04b7e1704a4b9488100903129ddd
#: ../../../../1.9/docs/releases/1.5.txt:486
msgid ""
"JSON-related features in Django 1.4 always used ``django.utils.simplejson``."
" This module was actually:"
msgstr ""

# ee228f4c009b4a789d5f3866f116f9b1
#: ../../../../1.9/docs/releases/1.5.txt:489
msgid ""
"A system version of ``simplejson``, if one was available (ie. ``import "
"simplejson`` works), if it was more recent than Django's built-in copy or it"
" had the C speedups, or"
msgstr ""

# e80ad80afb2d421f9f6878e349d8227c
#: ../../../../1.9/docs/releases/1.5.txt:492
msgid ""
"The :mod:`json` module from the standard library, if it was available (ie. "
"Python 2.6 or greater), or"
msgstr ""

# b5ea844ce7e54730a5785da994de3980
#: ../../../../1.9/docs/releases/1.5.txt:494
msgid "A built-in copy of version 2.0.7 of ``simplejson``."
msgstr ""

# b7f1657b56b346c69c5a8bc6d47ea0e3
#: ../../../../1.9/docs/releases/1.5.txt:496
msgid ""
"In Django 1.5, those features use Python's :mod:`json` module, which is "
"based on version 2.0.9 of ``simplejson``."
msgstr ""

# 77e647b0c99e4d9797fbac6274ff8bd5
#: ../../../../1.9/docs/releases/1.5.txt:499
msgid ""
"There are no known incompatibilities between Django's copy of version 2.0.7 "
"and Python's copy of version 2.0.9. However, there are some "
"incompatibilities between other versions of ``simplejson``:"
msgstr ""

# 83370043e8e2450e9082d57aeeb173f1
#: ../../../../1.9/docs/releases/1.5.txt:503
msgid ""
"While the ``simplejson`` API is documented as always returning unicode "
"strings, the optional C implementation can return a byte string. This was "
"fixed in Python 2.7."
msgstr ""

# 29d1a98a8fbc4e2e953fd20ecc110529
#: ../../../../1.9/docs/releases/1.5.txt:506
msgid ""
"``simplejson.JSONEncoder`` gained a ``namedtuple_as_object`` keyword "
"argument in version 2.2."
msgstr ""

# 2a8c66c1151940e1bc2299205826dffe
#: ../../../../1.9/docs/releases/1.5.txt:509
msgid ""
"More information on these incompatibilities is available in `ticket "
"#18023`_."
msgstr ""

# 80e0a932eaba4ce8a198b696d57f35b6
#: ../../../../1.9/docs/releases/1.5.txt:511
msgid ""
"The net result is that, if you have installed ``simplejson`` and your code "
"uses Django's serialization internals directly -- for instance "
"``django.core.serializers.json.DjangoJSONEncoder``, the switch from "
"``simplejson`` to :mod:`json` could break your code. (In general, changes to"
" internals aren't documented; we're making an exception here.)"
msgstr ""

# 93c16e685004417ea49711b639242c80
#: ../../../../1.9/docs/releases/1.5.txt:517
msgid ""
"At this point, the maintainers of Django believe that using :mod:`json` from"
" the standard library offers the strongest guarantee of backwards-"
"compatibility. They recommend to use it from now on."
msgstr ""

# d1d211ae164543189e4d1519f1aea0e7
#: ../../../../1.9/docs/releases/1.5.txt:524
msgid "String types of hasher method parameters"
msgstr ""

# 49e556fe857d4091bca2a8ec39b9309b
#: ../../../../1.9/docs/releases/1.5.txt:526
msgid ""
"If you have written a :ref:`custom password hasher <auth_password_storage>`,"
" your ``encode()``, ``verify()`` or ``safe_summary()`` methods should accept"
" Unicode parameters (``password``, ``salt`` or ``encoded``). If any of the "
"hashing methods need byte strings, you can use the "
":func:`~django.utils.encoding.force_bytes` utility to encode the strings."
msgstr ""

# 64e87e33ba6949c0b832e07b663af7af
#: ../../../../1.9/docs/releases/1.5.txt:533
msgid "Validation of previous_page_number and next_page_number"
msgstr ""

# 694a36e2203246a0a4f806734c9271d8
#: ../../../../1.9/docs/releases/1.5.txt:535
msgid ""
"When using :doc:`object pagination </topics/pagination>`, the "
"``previous_page_number()`` and ``next_page_number()`` methods of the "
":class:`~django.core.paginator.Page` object did not check if the returned "
"number was inside the existing page range. It does check it now and raises "
"an :exc:`~django.core.paginator.InvalidPage` exception when the number is "
"either too low or too high."
msgstr ""

# f8b44276b49a4644b76ca2cac99cf346
#: ../../../../1.9/docs/releases/1.5.txt:543
msgid "Behavior of autocommit database option on PostgreSQL changed"
msgstr ""

# 9c575f48e88646bf84fdb3b231372bd6
#: ../../../../1.9/docs/releases/1.5.txt:545
msgid ""
"PostgreSQL's autocommit option didn't work as advertised previously. It did "
"work for single transaction block, but after the first block was left the "
"autocommit behavior was never restored. This bug is now fixed in 1.5. While "
"this is only a bug fix, it is worth checking your applications behavior if "
"you are using PostgreSQL together with the autocommit option."
msgstr ""

# 3b8aed6f87e34793acc205639e3133ea
#: ../../../../1.9/docs/releases/1.5.txt:552
msgid "Session not saved on 500 responses"
msgstr ""

# edaba9bff5f74a3595b6eea1a6bd5fb1
#: ../../../../1.9/docs/releases/1.5.txt:554
msgid ""
"Django's session middleware will skip saving the session data if the "
"response's status code is 500."
msgstr ""

# fd40306461374d48be62200320960ba1
#: ../../../../1.9/docs/releases/1.5.txt:558
msgid "Email checks on failed admin login"
msgstr ""

# ea9b9388d58542f29fbb6d8cc96749e6
#: ../../../../1.9/docs/releases/1.5.txt:560
msgid ""
"Prior to Django 1.5, if you attempted to log into the admin interface and "
"mistakenly used your email address instead of your username, the admin "
"interface would provide a warning advising that your email address was not "
"your username. In Django 1.5, the introduction of :ref:`custom User models "
"<auth-custom-user>` has required the removal of this warning. This doesn't "
"change the login behavior of the admin site; it only affects the warning "
"message that is displayed under one particular mode of login failure."
msgstr ""

# 99a17748083846a0a6504deeaeceb4eb
#: ../../../../1.9/docs/releases/1.5.txt:570
msgid "Changes in tests execution"
msgstr ""

# 987093611ae44146a0cb0c85c0dd89e8
#: ../../../../1.9/docs/releases/1.5.txt:572
msgid ""
"Some changes have been introduced in the execution of tests that might be "
"backward-incompatible for some testing setups:"
msgstr ""

# 53a6114e4885491bb71c66b10f08e56c
#: ../../../../1.9/docs/releases/1.5.txt:576
msgid "Database flushing in ``django.test.TransactionTestCase``"
msgstr ""

# 15334e965a524cf08e3ed906b1d0350b
#: ../../../../1.9/docs/releases/1.5.txt:578
msgid ""
"Previously, the test database was truncated *before* each test run in a "
":class:`~django.test.TransactionTestCase`."
msgstr ""

# 89696f688b084a409bbfbaa7cb23c0fc
#: ../../../../1.9/docs/releases/1.5.txt:581
msgid ""
"In order to be able to run unit tests in any order and to make sure they are"
" always isolated from each other, :class:`~django.test.TransactionTestCase` "
"will now reset the database *after* each test run instead."
msgstr ""

# bf86498cec7b472fa1c01a2da801c4c2
#: ../../../../1.9/docs/releases/1.5.txt:586
msgid "No more implicit DB sequences reset"
msgstr ""

# 4a043f6485884aecaec2c2c60f98532b
#: ../../../../1.9/docs/releases/1.5.txt:588
msgid ""
":class:`~django.test.TransactionTestCase` tests used to reset primary key "
"sequences automatically together with the database flushing actions "
"described above."
msgstr ""

# 8a4c2f81b8554cc3b0a144227c36d4c5
#: ../../../../1.9/docs/releases/1.5.txt:592
msgid ""
"This has been changed so no sequences are implicitly reset. This can cause "
":class:`~django.test.TransactionTestCase` tests that depend on hard-coded "
"primary key values to break."
msgstr ""

# 214976def646439fa5fbe19659f3bd30
#: ../../../../1.9/docs/releases/1.5.txt:596
msgid ""
"The new :attr:`~django.test.TransactionTestCase.reset_sequences` attribute "
"can be used to force the old behavior for "
":class:`~django.test.TransactionTestCase` that might need it."
msgstr ""

# bb146f098e59470fa3b2a58e6ff47126
#: ../../../../1.9/docs/releases/1.5.txt:601
msgid "Ordering of tests"
msgstr ""

# 24cc8913b9ae4abbbbf5d889b3686b63
#: ../../../../1.9/docs/releases/1.5.txt:603
msgid ""
"In order to make sure all ``TestCase`` code starts with a clean database, "
"tests are now executed in the following order:"
msgstr ""

# 57a33b4137cf49bca66a6901451b95e6
#: ../../../../1.9/docs/releases/1.5.txt:606
msgid ""
"First, all unittests (including :class:`unittest.TestCase`, "
":class:`~django.test.SimpleTestCase`, :class:`~django.test.TestCase` and "
":class:`~django.test.TransactionTestCase`) are run with no particular "
"ordering guaranteed nor enforced among them."
msgstr ""

# 4393da9f11f3437198922c7fba48713e
#: ../../../../1.9/docs/releases/1.5.txt:611
msgid ""
"Then any other tests (e.g. doctests) that may alter the database without "
"restoring it to its original state are run."
msgstr "Puis tous les autres tests (par ex. des « doctests ») qui pourraient modifier la base de données sans la restaurer à son état de départ sont lancés."

# f13410c45a334f819dd0c339a1e901f0
#: ../../../../1.9/docs/releases/1.5.txt:614
msgid ""
"This should not cause any problems unless you have existing doctests which "
"assume a :class:`~django.test.TransactionTestCase` executed earlier left "
"some database state behind or unit tests that rely on some form of state "
"being preserved after the execution of other tests. Such tests are already "
"very fragile, and must now be changed to be able to run independently."
msgstr ""

# edbbd8d72bd94841b6b4f6455aa3554f
#: ../../../../1.9/docs/releases/1.5.txt:621
msgid "`cleaned_data` dictionary kept for invalid forms"
msgstr ""

# 317adceaa98f42b7bc0ac9f96c260fee
#: ../../../../1.9/docs/releases/1.5.txt:623
msgid ""
"The :attr:`~django.forms.Form.cleaned_data` dictionary is now always present"
" after form validation. When the form doesn't validate, it contains only the"
" fields that passed validation. You should test the success of the "
"validation with the :meth:`~django.forms.Form.is_valid()` method and not "
"with the presence or absence of the :attr:`~django.forms.Form.cleaned_data` "
"attribute on the form."
msgstr ""

# 7b3b77e5648f42ff81a5affae013660a
#: ../../../../1.9/docs/releases/1.5.txt:631
msgid "Behavior of ``syncdb`` with multiple databases"
msgstr ""

# 90e1eb54e19d4937ad7ed02e3e75e983
#: ../../../../1.9/docs/releases/1.5.txt:633
msgid ""
"``syncdb`` now queries the database routers to determine if content types "
"(when :mod:`~django.contrib.contenttypes` is enabled) and permissions (when "
":mod:`~django.contrib.auth` is enabled) should be created in the target "
"database. Previously, it created them in the default database, even when "
"another database was specified with the :djadminopt:`--database` option."
msgstr ""

# e5c7091dfd9a4946afbcd8c6eede3312
#: ../../../../1.9/docs/releases/1.5.txt:639
msgid ""
"If you use ``syncdb`` on multiple databases, you should ensure that your "
"routers allow synchronizing content types and permissions to only one of "
"them. See the docs on the :ref:`behavior of contrib apps with multiple "
"databases <contrib_app_multiple_databases>` for more information."
msgstr ""

# 02f085d0de5545dab9c4bb23785fac7f
#: ../../../../1.9/docs/releases/1.5.txt:645
msgid "XML deserializer will not parse documents with a DTD"
msgstr ""

# 4d9b66bcfa9545f49b1da5dbffca13e9
#: ../../../../1.9/docs/releases/1.5.txt:647
msgid ""
"In order to prevent exposure to denial-of-service attacks related to "
"external entity references and entity expansion, the XML model deserializer "
"now refuses to parse XML documents containing a DTD (DOCTYPE definition). "
"Since the XML serializer does not output a DTD, this will not impact typical"
" usage, only cases where custom-created XML documents are passed to Django's"
" model deserializer."
msgstr ""

# 2165dfad23d04408aaa7b71adb7be2bf
#: ../../../../1.9/docs/releases/1.5.txt:655
msgid "Formsets default ``max_num``"
msgstr ""

# f3a3d803d1474b5e8a32dc3d4c502cd7
#: ../../../../1.9/docs/releases/1.5.txt:657
msgid ""
"A (default) value of ``None`` for the ``max_num`` argument to a formset "
"factory no longer defaults to allowing any number of forms in the formset. "
"Instead, in order to prevent memory-exhaustion attacks, it now defaults to a"
" limit of 1000 forms. This limit can be raised by explicitly setting a "
"higher value for ``max_num``."
msgstr ""

# f885a417e3ef4cae82f10e9c4ece378a
# 631c6408325b4f1bbd5982202260a075
# c67ef803b6964dfabb0d2eeefde4f8aa
# f8ff212c79d14364a7a9c1bcde464749
# af90f8b663ac4f43acc2383c41e03837
# 040bd97667d54583babbb009e7e164a7
#: ../../../../1.9/docs/releases/1.5.txt:664
#: ../../../../1.9/docs/releases/1.6.txt:853
#: ../../../../1.9/docs/releases/1.7.txt:1302
#: ../../../../1.9/docs/releases/1.8.txt:1065
#: ../../../../1.9/docs/releases/1.9.txt:1039
#: ../../../../1.9/docs/releases/1.9.txt:1322
msgid "Miscellaneous"
msgstr "Divers"

# 1254c1cf36234c4dadb04cdb30d3b499
#: ../../../../1.9/docs/releases/1.5.txt:666
msgid ""
":class:`django.forms.ModelMultipleChoiceField` now returns an empty "
"``QuerySet`` as the empty value instead of an empty list."
msgstr ""

# c5f8f5622ba54df6be7e68a40fd115c5
#: ../../../../1.9/docs/releases/1.5.txt:669
msgid ""
":func:`~django.utils.http.int_to_base36` properly raises a :exc:`TypeError` "
"instead of :exc:`ValueError` for non-integer inputs."
msgstr ""

# bf96fb0ebce245eebbdda0f054ad7ff8
#: ../../../../1.9/docs/releases/1.5.txt:672
msgid ""
"The ``slugify`` template filter is now available as a standard python "
"function at :func:`django.utils.text.slugify`. Similarly, ``remove_tags`` is"
" available at :func:`django.utils.html.remove_tags`."
msgstr ""

# ef805d36d5b841c99d8feff1c492dca3
#: ../../../../1.9/docs/releases/1.5.txt:676
msgid ""
"Uploaded files are no longer created as executable by default. If you need "
"them to be executable change :setting:`FILE_UPLOAD_PERMISSIONS` to your "
"needs. The new default value is ``0o666`` (octal) and the current umask "
"value is first masked out."
msgstr ""

# c299c8bc43f045f3976602db3bc37733
#: ../../../../1.9/docs/releases/1.5.txt:681
msgid ""
"The :class:`F expressions <django.db.models.F>` supported bitwise operators "
"by ``&`` and ``|``. These operators are now available using ``.bitand()`` "
"and ``.bitor()`` instead. The removal of ``&`` and ``|`` was done to be "
"consistent with :ref:`Q() expressions <complex-lookups-with-q>` and "
"``QuerySet`` combining where the operators are used as boolean AND and OR "
"operators."
msgstr ""

# bf87fd882cfb4e018bd90ceea42d442c
#: ../../../../1.9/docs/releases/1.5.txt:688
msgid ""
"In a ``filter()`` call, when :class:`F expressions <django.db.models.F>` "
"contained lookups spanning multi-valued relations, they didn't always reuse "
"the same relations as other lookups along the same chain. This was changed, "
"and now F() expressions will always use the same relations as other lookups "
"within the same ``filter()`` call."
msgstr ""

# 71d73bef9a7946568814ef4c5ecd9dbd
#: ../../../../1.9/docs/releases/1.5.txt:694
msgid ""
"The :ttag:`csrf_token` template tag is no longer enclosed in a div. If you "
"need HTML validation against pre-HTML5 Strict DTDs, you should add a div "
"around it in your pages."
msgstr ""

# 0457a2c162844a04a05f7e364074ef35
#: ../../../../1.9/docs/releases/1.5.txt:698
msgid ""
"The template tags library ``adminmedia``, which only contained the "
"deprecated template tag ``{% admin_media_prefix %}``, was removed. "
"Attempting to load it with ``{% load adminmedia %}`` will fail. If your "
"templates still contain that line you must remove it."
msgstr ""

# 9fe4faa4634f43dfbf343c7ab9a5abf6
#: ../../../../1.9/docs/releases/1.5.txt:703
msgid ""
"Because of an implementation oversight, it was possible to use "
":doc:`django.contrib.redirects </ref/contrib/redirects>` without enabling "
":doc:`django.contrib.sites </ref/contrib/sites>`. This isn't allowed any "
"longer. If you're using ``django.contrib.redirects``, make sure "
":setting:`INSTALLED_APPS` contains ``django.contrib.sites``."
msgstr ""

# e3c9f1b078184faa912f58f1fc1ba029
#: ../../../../1.9/docs/releases/1.5.txt:709
msgid ""
":meth:`BoundField.label_tag <django.forms.BoundField.label_tag>` now escapes"
" its ``contents`` argument. To avoid the HTML escaping, use "
":func:`django.utils.safestring.mark_safe` on the argument before passing it."
msgstr ""

# 09bdf12676db476087abd482d0f88911
#: ../../../../1.9/docs/releases/1.5.txt:713
msgid ""
"Accessing reverse one-to-one relations fetched via "
":meth:`~django.db.models.query.QuerySet.select_related` now raises "
":exc:`~django.db.models.Model.DoesNotExist` instead of returning ``None``."
msgstr ""

# 9da511a8f3b8417fa877deebe99a3cc1
#: ../../../../1.9/docs/releases/1.5.txt:720
msgid "Features deprecated in 1.5"
msgstr ""

# 6f43be6425894b8d97a4bb69a45a9fde
#: ../../../../1.9/docs/releases/1.5.txt:723
msgid "``django.contrib.localflavor``"
msgstr ""

# f0fa7941a0e642cea0a325c3a8de46d1
#: ../../../../1.9/docs/releases/1.5.txt:725
msgid ""
"The localflavor contrib app has been split into separate packages. "
"``django.contrib.localflavor`` itself will be removed in Django 1.6, after "
"an accelerated deprecation."
msgstr ""

# d653c485976945208e59509418f64f2b
#: ../../../../1.9/docs/releases/1.5.txt:729
msgid ""
"The new packages are available on GitHub. The core team cannot efficiently "
"maintain these packages in the long term — it spans just a dozen countries "
"at this time; similar to translations, maintenance will be handed over to "
"interested members of the community."
msgstr ""

# f7e6b65059074fa1b8c7443676c87e60
#: ../../../../1.9/docs/releases/1.5.txt:735
msgid "``django.contrib.markup``"
msgstr ""

# 62f00d4d6b64485b8dfc10e96942b89a
#: ../../../../1.9/docs/releases/1.5.txt:737
msgid ""
"The markup contrib module has been deprecated and will follow an accelerated"
" deprecation schedule. Direct use of Python markup libraries or 3rd party "
"tag libraries is preferred to Django maintaining this functionality in the "
"framework."
msgstr ""

# 05108d8d44194dcf84d840c50a353176
#: ../../../../1.9/docs/releases/1.5.txt:743
msgid "``AUTH_PROFILE_MODULE``"
msgstr ""

# bb444182701e43d5bc587816a9311e89
#: ../../../../1.9/docs/releases/1.5.txt:745
msgid ""
"With the introduction of :ref:`custom User models <auth-custom-user>`, there"
" is no longer any need for a built-in mechanism to store user profile data."
msgstr ""

# 325a8816edfa4c5a80fd853956d9401c
#: ../../../../1.9/docs/releases/1.5.txt:748
msgid ""
"You can still define user profiles models that have a one-to-one relation "
"with the User model - in fact, for many applications needing to associate "
"data with a User account, this will be an appropriate design pattern to "
"follow. However, the ``AUTH_PROFILE_MODULE`` setting, and the "
"``django.contrib.auth.models.User.get_profile()`` method for accessing the "
"user profile model, should not be used any longer."
msgstr ""

# 2fdc195c15f140d9b4d141c04d583d34
#: ../../../../1.9/docs/releases/1.5.txt:756
msgid "Streaming behavior of :class:`~django.http.HttpResponse`"
msgstr ""

# 0a6937e468bc48e291208fde757c666a
#: ../../../../1.9/docs/releases/1.5.txt:758
msgid ""
"Django 1.5 deprecates the ability to stream a response by passing an "
"iterator to :class:`~django.http.HttpResponse`. If you rely on this "
"behavior, switch to :class:`~django.http.StreamingHttpResponse`. See :ref"
":`explicit-streaming-responses` above."
msgstr ""

# 5dc129b0e094498cb440e93c52d2acc1
#: ../../../../1.9/docs/releases/1.5.txt:763
msgid ""
"In Django 1.7 and above, the iterator will be consumed immediately by "
":class:`~django.http.HttpResponse`."
msgstr ""

# 082c9943cfef40eeab862ee44b0f7319
#: ../../../../1.9/docs/releases/1.5.txt:769
msgid "``django.utils.simplejson``"
msgstr ""

# 08743718d1b54e1994b4c42ce7eaf159
#: ../../../../1.9/docs/releases/1.5.txt:771
msgid ""
"Since Django 1.5 drops support for Python 2.5, we can now rely on the "
":mod:`json` module being available in Python's standard library, so we've "
"removed our own copy of ``simplejson``. You should now import :mod:`json` "
"instead of ``django.utils.simplejson``."
msgstr ""

# e4c07be27ddf4b10b0837ce2d3167717
#: ../../../../1.9/docs/releases/1.5.txt:776
msgid ""
"Unfortunately, this change might have unwanted side-effects, because of "
"incompatibilities between versions of ``simplejson`` -- see the :ref"
":`backwards-incompatible changes <simplejson-incompatibilities>` section. If"
" you rely on features added to ``simplejson`` after it became Python's "
":mod:`json`, you should import ``simplejson`` explicitly."
msgstr ""

# 3baf77e7862f4fe4908179895ea55cae
#: ../../../../1.9/docs/releases/1.5.txt:783
msgid "``django.utils.encoding.StrAndUnicode``"
msgstr ""

# 09723b59c4c249a88316f34649a86488
#: ../../../../1.9/docs/releases/1.5.txt:785
msgid ""
"The ``django.utils.encoding.StrAndUnicode`` mix-in has been deprecated. "
"Define a ``__str__`` method and apply the "
":func:`~django.utils.encoding.python_2_unicode_compatible` decorator "
"instead."
msgstr ""

# 7600e98e68ac4dc99ee33e13dd3ecd8c
#: ../../../../1.9/docs/releases/1.5.txt:790
msgid "``django.utils.itercompat.product``"
msgstr ""

# 76dedf327ada496d90d57b887afbfe54
#: ../../../../1.9/docs/releases/1.5.txt:792
msgid ""
"The ``django.utils.itercompat.product`` function has been deprecated. Use "
"the built-in :func:`itertools.product` instead."
msgstr ""

# c7d523b8345b44ab9d396e0c73f23e69
#: ../../../../1.9/docs/releases/1.5.txt:796
msgid "``cleanup`` management command"
msgstr ""

# 45af26bfc5964dcbaffccc884696f61a
#: ../../../../1.9/docs/releases/1.5.txt:798
msgid ""
"The ``cleanup`` management command has been deprecated and replaced by "
":djadmin:`clearsessions`."
msgstr ""

# f863a01c4d99465e9d328c766a76ce7f
#: ../../../../1.9/docs/releases/1.5.txt:802
msgid "``daily_cleanup.py`` script"
msgstr ""

# 6d1bad8190c94e469c8af13bb33919b6
#: ../../../../1.9/docs/releases/1.5.txt:804
msgid ""
"The undocumented ``daily_cleanup.py`` script has been deprecated. Use the "
":djadmin:`clearsessions` management command instead."
msgstr ""

# d48e4148ca554a168f605c601c059dba
#: ../../../../1.9/docs/releases/1.5.txt:808
msgid "``depth`` keyword argument in ``select_related``"
msgstr ""

# ed4b6277341142a8b4f1614f425639cd
#: ../../../../1.9/docs/releases/1.5.txt:810
msgid ""
"The ``depth`` keyword argument in "
":meth:`~django.db.models.query.QuerySet.select_related` has been deprecated."
" You should use field names instead."
msgstr ""

# 7e2759458a3d4a4bbdabd1245eb7730f
#: ../../../../1.9/docs/releases/1.5.1.txt:3
msgid "Django 1.5.1 release notes"
msgstr ""

# 7ddaa6cf6cf340a59ab44e69e67db426
#: ../../../../1.9/docs/releases/1.5.1.txt:5
msgid "*March 28, 2013*"
msgstr ""

# 3cadaa0c6f4744738d9c640dd7397466
#: ../../../../1.9/docs/releases/1.5.1.txt:7
msgid ""
"This is Django 1.5.1, a bugfix release for Django 1.5. It's completely "
"backwards compatible with Django 1.5, but includes a handful of fixes."
msgstr ""

# 53f751642bae4db9bc33d62bee744a48
#: ../../../../1.9/docs/releases/1.5.1.txt:10
msgid ""
"The biggest fix is for a memory leak introduced in Django 1.5. Under certain"
" circumstances, repeated iteration over querysets could leak memory - "
"sometimes quite a bit of it. If you'd like more information, the details are"
" in `our ticket tracker`__ (and in `a related issue`__ in Python itself)."
msgstr ""

# 9ebe4d8ac782404badc0ee395b3d36d0
#: ../../../../1.9/docs/releases/1.5.1.txt:18
msgid ""
"If you've noticed memory problems under Django 1.5, upgrading to 1.5.1 "
"should fix those issues."
msgstr ""

# b36b5b8a2aeb47e6af20974d00f42e06
#: ../../../../1.9/docs/releases/1.5.1.txt:21
msgid "Django 1.5.1 also includes a couple smaller fixes:"
msgstr ""

# 5e60831197ee45b2a364f9f5a9579687
#: ../../../../1.9/docs/releases/1.5.1.txt:23
msgid ""
"Module-level warnings emitted during tests are no longer silently hidden "
"(:ticket:`18985`)."
msgstr ""

# 699f2d1e01c241f78052dafa9a28372f
#: ../../../../1.9/docs/releases/1.5.1.txt:25
msgid ""
"Prevented filtering on password hashes in the user admin (:ticket:`20078`)."
msgstr ""

# 3260e8d3dfff457aadb841ed41680c2a
#: ../../../../1.9/docs/releases/1.5.10.txt:3
msgid "Django 1.5.10 release notes"
msgstr ""

# fea7fc4969714a29ba6a56a56676ec74
#: ../../../../1.9/docs/releases/1.5.10.txt:7
msgid "Django 1.5.10 fixes a regression in the 1.5.9 security release."
msgstr ""

# 2c95d40ea42a44dfa016eabe785123c5
#: ../../../../1.9/docs/releases/1.5.11.txt:3
msgid "Django 1.5.11 release notes"
msgstr ""

# 1f3af4206e1946d491bad2abe21c0acd
#: ../../../../1.9/docs/releases/1.5.11.txt:7
msgid ""
"Django 1.5.11 fixes a couple regressions in the 1.5.9 security release."
msgstr ""

# d02d095e36bb464ead39fafe2a6cbc35
#: ../../../../1.9/docs/releases/1.5.12.txt:3
msgid "Django 1.5.12 release notes"
msgstr ""

# 162526b74dc54a478159da1be2adcd8e
#: ../../../../1.9/docs/releases/1.5.12.txt:7
msgid "Django 1.5.12 fixes a regression in the 1.5.9 security release."
msgstr ""

# 5a5d7f0fa712473094c5b7ae25ea3637
#: ../../../../1.9/docs/releases/1.5.2.txt:3
msgid "Django 1.5.2 release notes"
msgstr ""

# 20f02594145c4a93bba03545780965ce
#: ../../../../1.9/docs/releases/1.5.2.txt:7
msgid "This is Django 1.5.2, a bugfix and security release for Django 1.5."
msgstr ""

# 588dcf84e82540f797c09831f4de5bbb
#: ../../../../1.9/docs/releases/1.5.2.txt:24
msgid "XSS vulnerability in :mod:`django.contrib.admin`"
msgstr ""

# 538756408bab42168b42fd4a2dd89bae
#: ../../../../1.9/docs/releases/1.5.2.txt:26
msgid ""
"If a :class:`~django.db.models.URLField` is used in Django 1.5, it displays "
"the current value of the field and a link to the target on the admin change "
"page. The display routine of this widget was flawed and allowed for XSS."
msgstr ""

# 0da9e6d6c572400b8962ff71b1aeb74b
#: ../../../../1.9/docs/releases/1.5.2.txt:33
msgid ""
"Fixed a crash with :meth:`~django.db.models.query.QuerySet.prefetch_related`"
" (#19607) as well as some ``pickle`` regressions with ``prefetch_related`` "
"(#20157 and #20257)."
msgstr ""

# 88d045f770684ae7973a311166821319
#: ../../../../1.9/docs/releases/1.5.2.txt:36
msgid ""
"Fixed a regression in :mod:`django.contrib.gis` in the Google Map output on "
"Python 3 (#20773)."
msgstr ""

# cc95f0d2619145d58a824df1c13bed58
#: ../../../../1.9/docs/releases/1.5.2.txt:38
msgid ""
"Made ``DjangoTestSuiteRunner.setup_databases`` properly handle aliases for "
"the default database (#19940) and prevented ``teardown_databases`` from "
"attempting to tear down aliases (#20681)."
msgstr ""

# fb6fa632a6c043fcbaced6c045b216df
#: ../../../../1.9/docs/releases/1.5.2.txt:41
msgid ""
"Fixed the ``django.core.cache.backends.memcached.MemcachedCache`` backend's "
"``get_many()`` method on Python 3 (#20722)."
msgstr ""

# 245fbea9e9c744a4a1b10628d5f84800
#: ../../../../1.9/docs/releases/1.5.2.txt:43
msgid ""
"Fixed :mod:`django.contrib.humanize` translation syntax errors. Affected "
"languages: Mexican Spanish, Mongolian, Romanian, Turkish (#20695)."
msgstr ""

# f5da995f190a49fbbf72db7a3580c9b2
#: ../../../../1.9/docs/releases/1.5.2.txt:45
msgid "Added support for wheel packages (#19252)."
msgstr ""

# 9626d4adf08a43db8673d721e9adbb65
#: ../../../../1.9/docs/releases/1.5.2.txt:46
msgid "The CSRF token now rotates when a user logs in."
msgstr ""

# 9f727b637c8a4b528e1010cad527f1e1
#: ../../../../1.9/docs/releases/1.5.2.txt:47
msgid "Some Python 3 compatibility fixes including #20212 and #20025."
msgstr ""

# e597e51c0cc445afa4fa3c4f2071bccc
#: ../../../../1.9/docs/releases/1.5.2.txt:48
msgid ""
"Fixed some rare cases where :meth:`~django.db.models.query.QuerySet.get` "
"exceptions recursed infinitely (#20278)."
msgstr ""

# 8624c22c7e8042cba639dbd57304adfc
#: ../../../../1.9/docs/releases/1.5.2.txt:50
msgid ""
":djadmin:`makemessages` no longer crashes with ``UnicodeDecodeError`` "
"(#20354)."
msgstr ""

# 7b0d5c1a7a9f4ca5862d31a717c572e0
#: ../../../../1.9/docs/releases/1.5.2.txt:52
msgid "Fixed ``geojson`` detection with Spatialite."
msgstr ""

# cdff99ecc15a4aa18fb602dc8aad1eb8
#: ../../../../1.9/docs/releases/1.5.2.txt:53
msgid ""
":meth:`~django.test.SimpleTestCase.assertContains` once again works with "
"binary content (#20237)."
msgstr ""

# 6eaec007563a466ead207070b1bbee09
#: ../../../../1.9/docs/releases/1.5.2.txt:55
msgid ""
"Fixed :class:`~django.db.models.ManyToManyField` if it has a unicode "
"``name`` parameter (#20207)."
msgstr ""

# 67980852646743c9b067bb202c389f48
#: ../../../../1.9/docs/releases/1.5.2.txt:57
msgid ""
"Ensured that the WSGI request's path is correctly based on the "
"``SCRIPT_NAME`` environment variable or the :setting:`FORCE_SCRIPT_NAME` "
"setting, regardless of whether or not either has a trailing slash (#20169)."
msgstr ""

# 2e20f29b60734438a3bfde4b39b73feb
#: ../../../../1.9/docs/releases/1.5.3.txt:3
msgid "Django 1.5.3 release notes"
msgstr ""

# da6e18cd77b84ebcbd5bad05288c7868
#: ../../../../1.9/docs/releases/1.5.3.txt:7
msgid ""
"This is Django 1.5.3, the third release in the Django 1.5 series. It "
"addresses one security issue and also contains an opt-in feature to enhance "
"the security of :mod:`django.contrib.sessions`."
msgstr ""

# e4a29538dea841d8affd8ccf5111924e
#: ../../../../1.9/docs/releases/1.5.3.txt:29
msgid ""
"Mitigating a remote-code execution vulnerability in "
":mod:`django.contrib.sessions`"
msgstr ""

# f169fc40a71e409897053608d53c4c70
#: ../../../../1.9/docs/releases/1.5.3.txt:31
msgid ""
":mod:`django.contrib.sessions` currently uses :mod:`pickle` to serialize "
"session data before storing it in the backend. If you're using the "
":ref:`signed cookie session backend<cookie-session-backend>` and "
":setting:`SECRET_KEY` is known by an attacker (there isn't an inherent "
"vulnerability in Django that would cause it to leak), the attacker could "
"insert a string into his session which, when unpickled, executes arbitrary "
"code on the server. The technique for doing so is simple and easily "
"available on the internet. Although the cookie session storage signs the "
"cookie-stored data to prevent tampering, a :setting:`SECRET_KEY` leak "
"immediately escalates to a remote code execution vulnerability."
msgstr ""

# 96c3c4f472624b2dba40eae23dc0f26c
#: ../../../../1.9/docs/releases/1.5.3.txt:42
msgid ""
"This attack can be mitigated by serializing session data using JSON rather "
"than :mod:`pickle`. To facilitate this, Django 1.5.3 introduces a new "
"setting, :setting:`SESSION_SERIALIZER`, to customize the session "
"serialization format. For backwards compatibility, this setting defaults to "
"using :mod:`pickle`. While JSON serialization does not support all Python "
"objects like :mod:`pickle` does, we highly recommend switching to JSON-"
"serialized values. Also, as JSON requires string keys, you will likely run "
"into problems if you are using non-string keys in ``request.session``. See "
"the :ref:`session_serialization` documentation for more details."
msgstr ""

# 65b2040da792442590201392c58a4522
#: ../../../../1.9/docs/releases/1.5.4.txt:3
msgid "Django 1.5.4 release notes"
msgstr ""

# bfa98bc0977c4e68a654b60ca664ea5e
#: ../../../../1.9/docs/releases/1.5.4.txt:7
msgid ""
"This is Django 1.5.4, the fourth release in the Django 1.5 series. It "
"addresses two security issues and one bug."
msgstr ""

# 1331028fd9a14f3199d89656b3a7d75f
#: ../../../../1.9/docs/releases/1.5.4.txt:19
msgid ""
"As of 1.5.4, Django's authentication framework imposes a 4096-byte limit on "
"passwords, and will fail authentication with any submitted password of "
"greater length."
msgstr ""

# 39d186d7ab17436b836a824dba8e7093
#: ../../../../1.9/docs/releases/1.5.4.txt:37
msgid ""
"Fixed a bug that prevented a ``QuerySet`` that uses "
":meth:`~django.db.models.query.QuerySet.prefetch_related` from being pickled"
" and unpickled more than once (the second pickling attempt raised an "
"exception) (#21102)."
msgstr ""

# 21002e45ff0b41f7b447fbe1a1d44e64
#: ../../../../1.9/docs/releases/1.5.5.txt:3
msgid "Django 1.5.5 release notes"
msgstr ""

# e6bc335fd2864020b8c1a30e6ec47631
#: ../../../../1.9/docs/releases/1.5.5.txt:7
msgid ""
"Django 1.5.5 fixes a couple security-related bugs and several other bugs in "
"the 1.5 series."
msgstr ""

# e8363bd06ad74c9788a5e490f429d025
#: ../../../../1.9/docs/releases/1.5.5.txt:13
msgid ""
"Django 1.5.4 imposes a 4096-byte limit on passwords in order to mitigate a "
"denial-of-service attack through submission of bogus but extremely large "
"passwords. In Django 1.5.5, we've reverted this change and instead improved "
"the speed of our PBKDF2 algorithm by not rehashing the key on every "
"iteration."
msgstr ""

# 297bcfa363284e8c97a282ff9c3b4d02
#: ../../../../1.9/docs/releases/1.5.5.txt:19
msgid "Properly rotate CSRF token on login"
msgstr ""

# c9e14ba5c51f49f38d85a102636c1e46
#: ../../../../1.9/docs/releases/1.5.5.txt:21
msgid ""
"This behavior introduced as a security hardening measure in Django 1.5.2 did"
" not work properly and is now fixed."
msgstr ""

# 55ba1fd1c8bc483d8a57a87898471f25
#: ../../../../1.9/docs/releases/1.5.5.txt:28
msgid ""
"Fixed a Python 3 incompatibility in "
"``django.utils.text.unescape_entities()`` (#21185)."
msgstr ""

# 8b9ec2bad9ea47658456df03d1d19d2a
#: ../../../../1.9/docs/releases/1.5.5.txt:30
msgid ""
"Fixed a couple data corruption issues with ``QuerySet`` edge cases under "
"Oracle and MySQL (#21203, #21126)."
msgstr ""

# 1e493a23906f4c9cb00d9ae4602e7314
#: ../../../../1.9/docs/releases/1.5.5.txt:32
msgid ""
"Fixed crashes when using combinations of ``annotate()``, "
"``select_related()``, and ``only()`` (#16436)."
msgstr ""

# 1626ee68b6ea4abf889f476044748423
#: ../../../../1.9/docs/releases/1.5.5.txt:38
msgid ""
"The undocumented ``django.core.servers.basehttp.WSGIServerException`` has "
"been removed. Use ``socket.error`` provided by the standard library instead."
msgstr ""

# 0fc694fa8d1a45668e63e60987632d5b
#: ../../../../1.9/docs/releases/1.5.6.txt:3
msgid "Django 1.5.6 release notes"
msgstr ""

# 546351905028402cb945227998c3e16c
#: ../../../../1.9/docs/releases/1.5.6.txt:7
msgid ""
"Django 1.5.6 fixes several bugs in 1.5.5, including three security issues."
msgstr ""

# 5a8d07246da9411982aa4d319d9a9df7
# 8ff9d177a2ab49bcaaa836f2e79aa31e
#: ../../../../1.9/docs/releases/1.5.6.txt:114
#: ../../../../1.9/docs/releases/1.6.1.txt:20
msgid ""
"Fixed :class:`~django.contrib.auth.backends.ModelBackend` raising "
"``UnboundLocalError`` if :func:`~django.contrib.auth.get_user_model` raised "
"an error (#21439)."
msgstr ""

# 982895ef080f4823ba68824ff80ae554
#: ../../../../1.9/docs/releases/1.5.6.txt:118
msgid ""
"Additionally, Django's vendored version of six, :mod:`django.utils.six`, has"
" been upgraded to the latest release (1.6.1)."
msgstr ""

# b065e4852cee45b1b8658c1313c3591f
#: ../../../../1.9/docs/releases/1.5.7.txt:3
msgid "Django 1.5.7 release notes"
msgstr ""

# 356770fef4be4ee48cb2f3d9d3f81025
#: ../../../../1.9/docs/releases/1.5.7.txt:7
msgid "Django 1.5.7 fixes a regression in the 1.5.6 security release."
msgstr ""

# af7154234fbb426e91f77a26a0d2c051
# acf5165633654cd9a00d3d56412cd80b
#: ../../../../1.9/docs/releases/1.5.7.txt:12
#: ../../../../1.9/docs/releases/1.6.4.txt:16
msgid ""
"Restored the ability to :meth:`~django.core.urlresolvers.reverse` views "
"created using :func:`functools.partial()` (:ticket:`22486`)."
msgstr ""

# 561bc4a6441a472e95d3716fcbd61973
#: ../../../../1.9/docs/releases/1.5.8.txt:3
msgid "Django 1.5.8 release notes"
msgstr ""

# 99b3412171484e61aaa472eb18771b88
#: ../../../../1.9/docs/releases/1.5.8.txt:7
msgid "Django 1.5.8 fixes two security issues in 1.5.8."
msgstr ""

# 4d1eb704b0054a608c75d42db2f7fa2d
#: ../../../../1.9/docs/releases/1.5.9.txt:3
msgid "Django 1.5.9 release notes"
msgstr ""

# 35f09276334b402c8460af623285ab9f
#: ../../../../1.9/docs/releases/1.5.9.txt:7
msgid "Django 1.5.9 fixes several security issues in 1.5.8."
msgstr ""

# 5a1432e87fae4a549dcf04030b9cc3f3
#: ../../../../1.9/docs/releases/1.6.txt:3
msgid "Django 1.6 release notes"
msgstr "Note de versions Django 1.6"

# eaa1f6d60e39463e8b09e76b06a5d491
#: ../../../../1.9/docs/releases/1.6.txt:7
msgid "Dedicated to Malcolm Tredinnick"
msgstr ""

# 82f4aefbe8f1483ba42140a352c0ca38
#: ../../../../1.9/docs/releases/1.6.txt:9
msgid ""
"On March 17, 2013, the Django project and the free software community lost a"
" very dear friend and developer."
msgstr ""

# 2f5b0d2256684ade88a7416418c249dd
#: ../../../../1.9/docs/releases/1.6.txt:12
msgid ""
"Malcolm was a long-time contributor to Django, a model community member, a "
"brilliant mind, and a friend. His contributions to Django — and to many "
"other open source projects — are nearly impossible to enumerate. Many on the"
" core Django team had their first patches reviewed by him; his mentorship "
"enriched us. His consideration, patience, and dedication will always be an "
"inspiration to us."
msgstr ""

# 9eb4188987144875b72d3acaf605c731
#: ../../../../1.9/docs/releases/1.6.txt:19
msgid "This release of Django is for Malcolm."
msgstr ""

# 874fb40bad2443aba3dcbf32977cec2b
#: ../../../../1.9/docs/releases/1.6.txt:21
msgid "-- The Django Developers"
msgstr ""

# 56d148303ff24625b55b7e9010592bee
#: ../../../../1.9/docs/releases/1.6.txt:25
msgid "Welcome to Django 1.6!"
msgstr ""

# 108a95fe7d414bfba0d87c3bc5b24eb5
#: ../../../../1.9/docs/releases/1.6.txt:27
msgid ""
"These release notes cover the `new features`_, as well as some `backwards "
"incompatible changes`_ you'll want to be aware of when upgrading from Django"
" 1.5 or older versions. We've also dropped some features, which are detailed"
" in :ref:`our deprecation plan <deprecation-removed-in-1.6>`, and we've "
"`begun the deprecation process for some features`_."
msgstr ""

# 77dd66edc8ed407a8e316bb99dadd19c
#: ../../../../1.9/docs/releases/1.6.txt:40
msgid ""
"Django 1.6, like Django 1.5, requires Python 2.6.5 or above. Python 3 is "
"also officially supported. We **highly recommend** the latest minor release "
"for each supported Python series (2.6.X, 2.7.X, 3.2.X, and 3.3.X)."
msgstr ""

# 2e777bad9fdd48a0a2d12001c6e31099
#: ../../../../1.9/docs/releases/1.6.txt:44
msgid ""
"Django 1.6 will be the final release series to support Python 2.6; beginning"
" with Django 1.7, the minimum supported Python version will be 2.7."
msgstr ""

# 7f0450b447604c9ab4edbf1295fbe122
#: ../../../../1.9/docs/releases/1.6.txt:47
msgid "Python 3.4 is not supported, but support will be added in Django 1.7."
msgstr ""

# 82d5b4aee25b436ba47e804b04537cec
#: ../../../../1.9/docs/releases/1.6.txt:50
msgid "What's new in Django 1.6"
msgstr ""

# 1fa7038a388f45c7a44668c1c6e18971
#: ../../../../1.9/docs/releases/1.6.txt:53
msgid "Simplified default project and app templates"
msgstr ""

# 5d3dceaf79f54f8a89128adf5124f304
#: ../../../../1.9/docs/releases/1.6.txt:55
msgid ""
"The default templates used by :djadmin:`startproject` and "
":djadmin:`startapp` have been simplified and modernized. The :doc:`admin "
"</ref/contrib/admin/index>` is now enabled by default in new projects; the "
":doc:`sites </ref/contrib/sites>` framework no longer is. :ref:`clickjacking"
" prevention <clickjacking-prevention>` is now on and the database defaults "
"to SQLite."
msgstr ""

# b5157984cb9347eda3771208522d2cff
#: ../../../../1.9/docs/releases/1.6.txt:62
msgid ""
"If the default templates don't suit your tastes, you can use :ref:`custom "
"project and app templates <custom-app-and-project-templates>`."
msgstr ""

# 9e1f7c763d3b44a69e3f93c13cbaa7b6
#: ../../../../1.9/docs/releases/1.6.txt:66
msgid "Improved transaction management"
msgstr ""

# 7c01f4613d79456c8204c53803f95747
#: ../../../../1.9/docs/releases/1.6.txt:68
msgid ""
"Django's transaction management was overhauled. Database-level autocommit is"
" now turned on by default. This makes transaction handling more explicit and"
" should improve performance. The existing APIs were deprecated, and new APIs"
" were introduced, as described in the :doc:`transaction management docs "
"</topics/db/transactions>`."
msgstr ""

# e45747895f164c2e9d84f0b305f86652
#: ../../../../1.9/docs/releases/1.6.txt:75
msgid "Persistent database connections"
msgstr ""

# 771a983f76bf4045839c73e9fc1bf179
#: ../../../../1.9/docs/releases/1.6.txt:77
msgid ""
"Django now supports reusing the same database connection for several "
"requests. This avoids the overhead of re-establishing a connection at the "
"beginning of each request. For backwards compatibility, this feature is "
"disabled by default. See :ref:`persistent-database-connections` for details."
msgstr ""

# 21fd37bccb564c4e8b7e28bdd10db32b
#: ../../../../1.9/docs/releases/1.6.txt:83
msgid "Discovery of tests in any test module"
msgstr ""

# b0722fd7aab74e22ac38d239e0ad0498
#: ../../../../1.9/docs/releases/1.6.txt:85
msgid ""
"Django 1.6 ships with a new test runner that allows more flexibility in the "
"location of tests. The previous runner "
"(``django.test.simple.DjangoTestSuiteRunner``) found tests only in the "
"``models.py`` and ``tests.py`` modules of a Python package in "
":setting:`INSTALLED_APPS`."
msgstr ""

# ccdad6497fd247e6b2af8a9176eab577
#: ../../../../1.9/docs/releases/1.6.txt:91
msgid ""
"The new runner (``django.test.runner.DiscoverRunner``) uses the test "
"discovery features built into ``unittest2`` (the version of ``unittest`` in "
"the Python 2.7+ standard library, and bundled with Django). With test "
"discovery, tests can be located in any module whose name matches the pattern"
" ``test*.py``."
msgstr ""

# 721712f2d1954264903c94c88c65afc6
#: ../../../../1.9/docs/releases/1.6.txt:96
msgid ""
"In addition, the test labels provided to ``./manage.py test`` to nominate "
"specific tests to run must now be full Python dotted paths (or directory "
"paths), rather than ``applabel.TestCase.test_method_name`` pseudo-paths. "
"This allows running tests located anywhere in your codebase, rather than "
"only in :setting:`INSTALLED_APPS`. For more details, see "
":doc:`/topics/testing/index`."
msgstr ""

# 4e4077553b044e5b90d18ff4676f798a
#: ../../../../1.9/docs/releases/1.6.txt:102
msgid ""
"This change is backwards-incompatible; see the :ref:`backwards-"
"incompatibility notes<new-test-runner>`."
msgstr ""

# 2514e1fb151644cc91dfb3a75d9dd1a4
#: ../../../../1.9/docs/releases/1.6.txt:106
msgid "Time zone aware aggregation"
msgstr ""

# d9ead7bd64c742f58f4a049bd3a40bc6
#: ../../../../1.9/docs/releases/1.6.txt:108
msgid ""
"The support for :doc:`time zones </topics/i18n/timezones>` introduced in "
"Django 1.4 didn't work well with :meth:`QuerySet.dates() "
"<django.db.models.query.QuerySet.dates>`: aggregation was always performed "
"in UTC. This limitation was lifted in Django 1.6. Use "
":meth:`QuerySet.datetimes() <django.db.models.query.QuerySet.datetimes>` to "
"perform time zone aware aggregation on a "
":class:`~django.db.models.DateTimeField`."
msgstr ""

# fda66cf9279142728a6b55030127a167
#: ../../../../1.9/docs/releases/1.6.txt:116
msgid "Support for savepoints in SQLite"
msgstr ""

# ac2dbf41e97144f7bdcc965bcfe5f3ec
#: ../../../../1.9/docs/releases/1.6.txt:118
msgid ""
"Django 1.6 adds support for savepoints in SQLite, with some "
":ref:`limitations <savepoints-in-sqlite>`."
msgstr ""

# 704a0d89170e41ff893e621f544450ee
#: ../../../../1.9/docs/releases/1.6.txt:122
msgid "``BinaryField`` model field"
msgstr ""

# 92a75481394544cdb898f337140f4e3e
#: ../../../../1.9/docs/releases/1.6.txt:124
msgid ""
"A new :class:`django.db.models.BinaryField` model field allows storage of "
"raw binary data in the database."
msgstr ""

# 9df8d538f3c3471cb9d9f7d5d3218555
#: ../../../../1.9/docs/releases/1.6.txt:128
msgid "GeoDjango form widgets"
msgstr ""

# 888856a5016840179f8b0f1500f45747
#: ../../../../1.9/docs/releases/1.6.txt:130
msgid ""
"GeoDjango now provides :doc:`form fields and widgets </ref/contrib/gis"
"/forms-api>` for its geo-specialized fields. They are OpenLayers-based by "
"default, but they can be customized to use any other JS framework."
msgstr ""

# 77927d248a4947c69c12313ad20afb81
#: ../../../../1.9/docs/releases/1.6.txt:135
msgid "``check`` management command added for verifying compatibility"
msgstr ""

# 93003e77db814aa98d51a0e365ff959a
#: ../../../../1.9/docs/releases/1.6.txt:137
msgid ""
"A :djadmin:`check` management command was added, enabling you to verify if "
"your current configuration (currently oriented at settings) is compatible "
"with the current version of Django."
msgstr ""

# 0dc8e54ada894d199ce7cbfd5d6258da
#: ../../../../1.9/docs/releases/1.6.txt:142
msgid ":meth:`Model.save() <django.db.models.Model.save()>` algorithm changed"
msgstr ""

# 8e19fc1818504baf95ca444bdc4b8832
#: ../../../../1.9/docs/releases/1.6.txt:144
msgid ""
"The :meth:`Model.save() <django.db.models.Model.save()>` method now tries to"
" directly ``UPDATE`` the database if the instance has a primary key value. "
"Previously ``SELECT`` was performed to determine if ``UPDATE`` or ``INSERT``"
" were needed. The new algorithm needs only one query for updating an "
"existing row while the old algorithm needed two. See :meth:`Model.save() "
"<django.db.models.Model.save()>` for more details."
msgstr ""

# e2e62332d20b442eb84d65dc00fc6fad
#: ../../../../1.9/docs/releases/1.6.txt:151
msgid ""
"In some rare cases the database doesn't report that a matching row was found"
" when doing an ``UPDATE``. An example is the PostgreSQL ``ON UPDATE`` "
"trigger which returns ``NULL``. In such cases it is possible to set "
":attr:`django.db.models.Options.select_on_save` flag to force saving to use "
"the old algorithm."
msgstr ""

# a21251084a52468bbb6519292d2b11a8
#: ../../../../1.9/docs/releases/1.6.txt:160
msgid ""
"Authentication backends can raise ``PermissionDenied`` to immediately fail "
"the authentication chain."
msgstr ""

# e6b710095de041aa88f3535d104b4eac
#: ../../../../1.9/docs/releases/1.6.txt:163
msgid ""
"The ``HttpOnly`` flag can be set on the CSRF cookie with "
":setting:`CSRF_COOKIE_HTTPONLY`."
msgstr ""

# 82bc81a92136433ab35af89bf3cc390e
#: ../../../../1.9/docs/releases/1.6.txt:166
msgid ""
"The :meth:`~django.test.TransactionTestCase.assertQuerysetEqual` now checks "
"for undefined order and raises :exc:`ValueError` if undefined order is "
"spotted. The order is seen as undefined if the given ``QuerySet`` isn't "
"ordered and there are more than one ordered values to compare against."
msgstr ""

# df0a9d56fed140dfa26ebc2aec69de58
#: ../../../../1.9/docs/releases/1.6.txt:171
msgid ""
"Added :meth:`~django.db.models.query.QuerySet.earliest` for symmetry with "
":meth:`~django.db.models.query.QuerySet.latest`."
msgstr ""

# b6e147e9c19c4057a0b09471fb571975
#: ../../../../1.9/docs/releases/1.6.txt:174
msgid ""
"In addition to :lookup:`year`, :lookup:`month` and :lookup:`day`, the ORM "
"now supports :lookup:`hour`, :lookup:`minute` and :lookup:`second` lookups."
msgstr ""

# ebbd4b7844d04ec8a98009120df0bb7f
#: ../../../../1.9/docs/releases/1.6.txt:177
msgid "Django now wraps all PEP-249 exceptions."
msgstr ""

# 5ee93d3b67cb4972b10e1319ebdb25c2
#: ../../../../1.9/docs/releases/1.6.txt:179
msgid ""
"The default widgets for :class:`~django.forms.EmailField`, "
":class:`~django.forms.URLField`, :class:`~django.forms.IntegerField`, "
":class:`~django.forms.FloatField` and :class:`~django.forms.DecimalField` "
"use the new type attributes available in HTML5 (``type='email'``, "
"``type='url'``, ``type='number'``). Note that due to erratic support of the "
"``number`` input type with localized numbers in current browsers, Django "
"only uses it when numeric fields are not localized."
msgstr ""

# fbed523efe834d9ba6ccec027e9f6123
#: ../../../../1.9/docs/releases/1.6.txt:187
msgid ""
"The ``number`` argument for :ref:`lazy plural translations <lazy-plural-"
"translations>` can be provided at translation time rather than at definition"
" time."
msgstr ""

# 5bbc4c07b55243de97c5d57f1497e314
#: ../../../../1.9/docs/releases/1.6.txt:191
msgid ""
"For custom management commands: Verification of the presence of valid "
"settings in commands that ask for it by using the "
":attr:`~django.core.management.BaseCommand.can_import_settings` internal "
"option is now performed independently from handling of the locale that "
"should be active during the execution of the command. The latter can now be "
"influenced by the new "
":attr:`~django.core.management.BaseCommand.leave_locale_alone` internal "
"option. See :ref:`management-commands-and-locales` for more details."
msgstr ""

# 3c62854e298047c18aa9d76ac4677460
#: ../../../../1.9/docs/releases/1.6.txt:200
msgid ""
"The :attr:`~django.views.generic.edit.DeletionMixin.success_url` of "
":class:`~django.views.generic.edit.DeletionMixin` is now interpolated with "
"its ``object``’s ``__dict__``."
msgstr "L'attribut :attr:`~django.views.generic.edit.DeletionMixin.success_url` de :class:`~django.views.generic.edit.DeletionMixin` est désormais interpolée avec sa méthode ``object``.``__dict__``."

# 58515a3e4bef45eca9a49e1b881310d0
#: ../../../../1.9/docs/releases/1.6.txt:204
msgid ""
":class:`~django.http.HttpResponseRedirect` and "
":class:`~django.http.HttpResponsePermanentRedirect` now provide an ``url`` "
"attribute (equivalent to the URL the response will redirect to)."
msgstr ""

# 7bfcb3f323d744fdaf4f37fffe2a51a8
#: ../../../../1.9/docs/releases/1.6.txt:208
msgid ""
"The ``MemcachedCache`` cache backend now uses the latest :mod:`pickle` "
"protocol available."
msgstr ""

# 49480ff0a7714ccd9b438ed524fdb86d
#: ../../../../1.9/docs/releases/1.6.txt:211
msgid ""
"Added :class:`~django.contrib.messages.views.SuccessMessageMixin` which "
"provides a ``success_message`` attribute for "
":class:`~django.views.generic.edit.FormView` based classes."
msgstr ""

# 8936e71a273c4e2fbb93d5874c1ce802
#: ../../../../1.9/docs/releases/1.6.txt:215
msgid ""
"Added the :attr:`django.db.models.ForeignKey.db_constraint` and "
":attr:`django.db.models.ManyToManyField.db_constraint` options."
msgstr ""

# d9831df62afb4c9c94ded3349403e214
#: ../../../../1.9/docs/releases/1.6.txt:218
msgid ""
"The jQuery library embedded in the admin has been upgraded to version 1.9.1."
msgstr ""

# 82ce8418926c4382be5541647ff74284
#: ../../../../1.9/docs/releases/1.6.txt:220
msgid ""
"Syndication feeds (:mod:`django.contrib.syndication`) can now pass extra "
"context through to feed templates using a new :meth:`Feed.get_context_data()"
" <django.contrib.syndication.Feed.get_context_data>` callback."
msgstr ""

# 05442b60b0094306a2f5d3214b1bdba1
#: ../../../../1.9/docs/releases/1.6.txt:225
msgid ""
"The admin list columns have a ``column-<field_name>`` class in the HTML so "
"the columns header can be styled with CSS, e.g. to set a column width."
msgstr ""

# e44c8f95ffa345a5841e7fc270615b44
#: ../../../../1.9/docs/releases/1.6.txt:228
msgid ""
"The :ref:`isolation level<database-isolation-level>` can be customized under"
" PostgreSQL."
msgstr ""

# f217cb5eec84482a9a92164e17350e69
#: ../../../../1.9/docs/releases/1.6.txt:231
msgid ""
"The :ttag:`blocktrans` template tag now respects "
"``TEMPLATE_STRING_IF_INVALID`` for variables not present in the context, "
"just like other template constructs."
msgstr ""

# 418453de4a28450cb8ce58bcc036737c
#: ../../../../1.9/docs/releases/1.6.txt:235
msgid ""
"``SimpleLazyObject``\\s will now present more helpful representations in "
"shell debugging situations."
msgstr ""

# 8aa04c90bdfd411080d9731f67aecb30
#: ../../../../1.9/docs/releases/1.6.txt:238
msgid ""
"Generic :class:`~django.contrib.gis.db.models.GeometryField` is now editable"
" with the OpenLayers widget in the admin."
msgstr ""

# cdf4be1960c24c29a081b9a1d36ea5be
#: ../../../../1.9/docs/releases/1.6.txt:241
msgid ""
"The documentation contains a :doc:`deployment checklist "
"</howto/deployment/checklist>`."
msgstr ""

# ec26cbd1846e40e09a5f8d2530b51099
#: ../../../../1.9/docs/releases/1.6.txt:244
msgid "The :djadmin:`diffsettings` command gained a ``--all`` option."
msgstr ""

# 4d01ec06c77648c991b38742f14cbb5b
#: ../../../../1.9/docs/releases/1.6.txt:246
msgid ""
"``django.forms.fields.Field.__init__`` now calls ``super()``, allowing field"
" mixins to implement ``__init__()`` methods that will reliably be called."
msgstr ""

# 93512ec88bf94afc9775727c8a4013a1
#: ../../../../1.9/docs/releases/1.6.txt:250
msgid ""
"The ``validate_max`` parameter was added to ``BaseFormSet`` and "
":func:`~django.forms.formsets.formset_factory`, and ``ModelForm`` and inline"
" versions of the same.  The behavior of validation for formsets with "
"``max_num`` was clarified.  The previously undocumented behavior that "
"hardened formsets against memory exhaustion attacks was documented, and the "
"undocumented limit of the higher of 1000 or ``max_num`` forms was changed so"
" it is always 1000 more than ``max_num``."
msgstr ""

# b5e6eaf266ea42f79f1390ba5e2be2d2
#: ../../../../1.9/docs/releases/1.6.txt:258
msgid ""
"Added ``BCryptSHA256PasswordHasher`` to resolve the password truncation "
"issue with bcrypt."
msgstr ""

# e7e86cc3c8a64ce5a18a2f2930a499d1
#: ../../../../1.9/docs/releases/1.6.txt:261
msgid ""
"`Pillow`_ is now the preferred image manipulation library to use with "
"Django. `PIL`_ is pending deprecation (support to be removed in Django 1.8)."
" To upgrade, you should **first** uninstall PIL, **then** install Pillow."
msgstr ""

# 46df424fe49c4f41af572a2d1d99d108
#: ../../../../1.9/docs/releases/1.6.txt:268
msgid ":class:`~django.forms.ModelForm` accepts several new ``Meta`` options."
msgstr ""

# 2da0142206af4cb59dc3a84256928de8
#: ../../../../1.9/docs/releases/1.6.txt:271
msgid ""
"Fields included in the ``localized_fields`` list will be localized (by "
"setting ``localize`` on the form field)."
msgstr ""

# 73036c678dab4c1a9cf3af8d9f55452c
#: ../../../../1.9/docs/releases/1.6.txt:273
msgid ""
"The  ``labels``, ``help_texts`` and ``error_messages`` options may be used "
"to customize the default fields, see :ref:`modelforms-overriding-default-"
"fields` for details."
msgstr ""

# 68ad536a4eb64fa38592a36b6d3af34c
#: ../../../../1.9/docs/releases/1.6.txt:277
msgid ""
"The ``choices`` argument to model fields now accepts an iterable of "
"iterables instead of requiring an iterable of lists or tuples."
msgstr ""

# d667af3e57fa4596af6ed5af432e718c
#: ../../../../1.9/docs/releases/1.6.txt:280
msgid ""
"The reason phrase can be customized in HTTP responses using "
":attr:`~django.http.HttpResponse.reason_phrase`."
msgstr ""

# 504dc53a91ed4d16ba61c1a139461c48
#: ../../../../1.9/docs/releases/1.6.txt:283
msgid ""
"When giving the URL of the next page for "
":func:`~django.contrib.auth.views.logout`, "
":func:`~django.contrib.auth.views.password_reset`, "
":func:`~django.contrib.auth.views.password_reset_confirm`, and "
":func:`~django.contrib.auth.views.password_change`, you can now pass URL "
"names and they will be resolved."
msgstr ""

# 50c5fecd367141869f6f8b5f5a732ff9
#: ../../../../1.9/docs/releases/1.6.txt:290
msgid ""
"The :djadmin:`dumpdata` ``manage.py`` command now has a :djadminopt:`--pks` "
"option which will allow users to specify the primary keys of objects they "
"want to dump. This option can only be used with one model."
msgstr ""

# f7cb390ef9764ce38a4e37b41593d319
#: ../../../../1.9/docs/releases/1.6.txt:294
msgid ""
"Added ``QuerySet`` methods :meth:`~django.db.models.query.QuerySet.first` "
"and :meth:`~django.db.models.query.QuerySet.last` which are convenience "
"methods returning the first or last object matching the filters. Returns "
"``None`` if there are no objects matching."
msgstr ""

# 997f959bdccf4d95b913be2c0b7c0a47
#: ../../../../1.9/docs/releases/1.6.txt:299
msgid ""
":class:`~django.views.generic.base.View` and "
":class:`~django.views.generic.base.RedirectView` now support HTTP ``PATCH`` "
"method."
msgstr ""

# 76f80717ee084da581549bb48636490a
#: ../../../../1.9/docs/releases/1.6.txt:303
msgid ""
"``GenericForeignKey`` now takes an optional ``for_concrete_model`` argument,"
" which when set to ``False`` allows the field to reference proxy models. The"
" default is ``True`` to retain the old behavior."
msgstr ""

# 9c9d98cd22be4233b909e2e8f80d757f
#: ../../../../1.9/docs/releases/1.6.txt:307
msgid ""
"The :class:`~django.middleware.locale.LocaleMiddleware` now stores the "
"active language in session if it is not present there. This prevents loss of"
" language settings after session flush, e.g. logout."
msgstr ""

# 1b99aac9265f456eb260b1701c379d86
#: ../../../../1.9/docs/releases/1.6.txt:311
msgid ""
":exc:`~django.core.exceptions.SuspiciousOperation` has been differentiated "
"into a number of subclasses, and each will log to a matching named logger "
"under the ``django.security`` logging hierarchy. Along with this change, a "
"``handler400`` mechanism and default view are used whenever a "
"``SuspiciousOperation`` reaches the WSGI handler to return an "
"``HttpResponseBadRequest``."
msgstr ""

# fb30f57f7e8a4ba398cd4f046e26dc69
#: ../../../../1.9/docs/releases/1.6.txt:318
msgid ""
"The :exc:`~django.db.models.Model.DoesNotExist` exception now includes a "
"message indicating the name of the attribute used for the lookup."
msgstr ""

# e92008f17e0b452c90d463e97c9c1aa5
#: ../../../../1.9/docs/releases/1.6.txt:321
msgid ""
"The :meth:`~django.db.models.query.QuerySet.get_or_create` method no longer "
"requires at least one keyword argument."
msgstr ""

# 4ba76e9bd753442e8dcd9af52ffddf83
#: ../../../../1.9/docs/releases/1.6.txt:324
msgid ""
"The :class:`~django.test.SimpleTestCase` class includes a new assertion "
"helper for testing formset errors: "
":meth:`~django.test.SimpleTestCase.assertFormsetError`."
msgstr ""

# 19adc060e4984d79997feaaf7bb4fba9
#: ../../../../1.9/docs/releases/1.6.txt:328
msgid ""
"The list of related fields added to a "
":class:`~django.db.models.query.QuerySet` by "
":meth:`~django.db.models.query.QuerySet.select_related` can be cleared using"
" ``select_related(None)``."
msgstr ""

# 30775fa2b9f6463d981e6f3237a148e7
#: ../../../../1.9/docs/releases/1.6.txt:333
msgid ""
"The :meth:`~django.contrib.admin.InlineModelAdmin.get_extra` and "
":meth:`~django.contrib.admin.InlineModelAdmin.get_max_num` methods on "
":class:`~django.contrib.admin.InlineModelAdmin` may be overridden to "
"customize the extra and maximum number of inline forms."
msgstr ""

# 7a7c07eb7e6b4fe68c88ae07e2ed4bc0
#: ../../../../1.9/docs/releases/1.6.txt:338
msgid ""
"Formsets now have a "
":meth:`~django.forms.formsets.BaseFormSet.total_error_count` method."
msgstr ""

# 797324d3628147789f29c2f8a06ebade
#: ../../../../1.9/docs/releases/1.6.txt:341
msgid ""
":class:`~django.forms.ModelForm` fields can now override error messages "
"defined in model fields by using the "
":attr:`~django.forms.Field.error_messages` argument of a ``Field``’s "
"constructor. To take advantage of this new feature with your custom fields, "
":ref:`see the updated recommendation <raising-validation-error>` for raising"
" a ``ValidationError``."
msgstr ""

# dd57f40b1625415392c8ca6d610810ce
#: ../../../../1.9/docs/releases/1.6.txt:348
msgid ""
":class:`~django.contrib.admin.ModelAdmin` now preserves filters on the list "
"view after creating, editing or deleting an object. It's possible to restore"
" the previous behavior of clearing filters by setting the "
":attr:`~django.contrib.admin.ModelAdmin.preserve_filters` attribute to "
"``False``."
msgstr ""

# 28f70f58de544ac79df1a956ecd85a36
#: ../../../../1.9/docs/releases/1.6.txt:353
msgid ""
"Added "
":meth:`FormMixin.get_prefix<django.views.generic.edit.FormMixin.get_prefix>`"
" (which returns "
":attr:`FormMixin.prefix<django.views.generic.edit.FormMixin.prefix>` by "
"default) to allow customizing the :attr:`~django.forms.Form.prefix` of the "
"form."
msgstr ""

# bda15e1f38eb420f83e9bf40ac542074
#: ../../../../1.9/docs/releases/1.6.txt:360
msgid ""
"Raw queries (``Manager.raw()`` or ``cursor.execute()``) can now use the "
"\"pyformat\" parameter style, where placeholders in the query are given as "
"``'%(name)s'`` and the parameters are passed as a dictionary rather than a "
"list (except on SQLite). This has long been possible (but not officially "
"supported) on MySQL and PostgreSQL, and is now also available on Oracle."
msgstr ""

# 751e234b5c69455b89c84e89c490031e
#: ../../../../1.9/docs/releases/1.6.txt:366
msgid ""
"The default iteration count for the PBKDF2 password hasher has been "
"increased by 20%. This backwards compatible change will not affect existing "
"passwords or users who have subclassed "
"``django.contrib.auth.hashers.PBKDF2PasswordHasher`` to change the default "
"value. Passwords :ref:`will be upgraded <password-upgrades>` to use the new "
"iteration count as necessary."
msgstr ""

# ccb92679fbbe4b3fb866997f59ec1db6
#: ../../../../1.9/docs/releases/1.6.txt:374
msgid "Backwards incompatible changes in 1.6"
msgstr ""

# 623ebeb01a2248ea8e15b957e97eab31
#: ../../../../1.9/docs/releases/1.6.txt:378
msgid ""
"In addition to the changes outlined in this section, be sure to review the "
":ref:`deprecation plan <deprecation-removed-in-1.6>` for any features that "
"have been removed. If you haven't updated your code within the deprecation "
"timeline for a given feature, its removal may appear as a backwards "
"incompatible change."
msgstr ""

# 372290406ff949aaa178cd4813aeb318
#: ../../../../1.9/docs/releases/1.6.txt:385
msgid "New transaction management model"
msgstr ""

# b1b666ce732642cfbe097770dda8292c
#: ../../../../1.9/docs/releases/1.6.txt:388
msgid "Behavior changes"
msgstr ""

# 1e2d019b63504ac19771ca653a9ddc46
#: ../../../../1.9/docs/releases/1.6.txt:390
msgid ""
"Database-level autocommit is enabled by default in Django 1.6. While this "
"doesn't change the general spirit of Django's transaction management, there "
"are a few backwards-incompatibilities."
msgstr ""

# 8c4bcec183b54e0295a1baa17a4e07e9
#: ../../../../1.9/docs/releases/1.6.txt:395
msgid "Savepoints and ``assertNumQueries``"
msgstr ""

# 29b78e0303d240fbb10b4d341e868127
#: ../../../../1.9/docs/releases/1.6.txt:397
msgid ""
"The changes in transaction management may result in additional statements to"
" create, release or rollback savepoints. This is more likely to happen with "
"SQLite, since it didn't support savepoints until this release."
msgstr ""

# f727e02c919b4af88652f3120ed46d06
#: ../../../../1.9/docs/releases/1.6.txt:401
msgid ""
"If tests using :meth:`~django.test.TransactionTestCase.assertNumQueries` "
"fail because of a higher number of queries than expected, check that the "
"extra queries are related to savepoints, and adjust the expected number of "
"queries accordingly."
msgstr ""

# 9c663d8244904c58a9c5fe369b6970fd
#: ../../../../1.9/docs/releases/1.6.txt:407
msgid "Autocommit option for PostgreSQL"
msgstr ""

# f9fdb8e57915486a9af6e994986f1f47
#: ../../../../1.9/docs/releases/1.6.txt:409
msgid ""
"In previous versions, database-level autocommit was only an option for "
"PostgreSQL, and it was disabled by default. This option is now ignored and "
"can be removed."
msgstr ""

# 8a8c92cb36f34606adcd81cd749695b3
#: ../../../../1.9/docs/releases/1.6.txt:416
msgid "New test runner"
msgstr ""

# 7184339057444f42bfdf214ea71b4a39
#: ../../../../1.9/docs/releases/1.6.txt:418
msgid ""
"In order to maintain greater consistency with Python's unittest module, the "
"new test runner (``django.test.runner.DiscoverRunner``) does not "
"automatically support some types of tests that were supported by the "
"previous runner:"
msgstr ""

# 3fe0cc3fb191448f93afcfd76bc6d464
#: ../../../../1.9/docs/releases/1.6.txt:422
msgid ""
"Tests in ``models.py`` and ``tests/__init__.py`` files will no longer be "
"found and run. Move them to a file whose name begins with ``test``."
msgstr ""

# 6752eae6dd9d4c82a22b22dbcd0241d1
#: ../../../../1.9/docs/releases/1.6.txt:425
msgid ""
"Doctests will no longer be automatically discovered. To integrate doctests "
"in your test suite, follow the `recommendations in the Python "
"documentation`_."
msgstr ""

# e8f2301c2da747eca76bf0e98a839abe
#: ../../../../1.9/docs/releases/1.6.txt:428
msgid ""
"Django bundles a modified version of the :mod:`doctest` module from the "
"Python standard library (in ``django.test._doctest``) and includes some "
"additional doctest utilities. These utilities are deprecated and will be "
"removed in Django 1.8; doctest suites should be updated to work with the "
"standard library's doctest module (or converted to unittest-compatible "
"tests)."
msgstr ""

# 438cebf9c61f47ec892fa9f0ee6c7127
#: ../../../../1.9/docs/releases/1.6.txt:434
msgid ""
"If you wish to delay updates to your test suite, you can set your "
":setting:`TEST_RUNNER` setting to "
"``django.test.simple.DjangoTestSuiteRunner`` to fully restore the old test "
"behavior. ``DjangoTestSuiteRunner`` is deprecated but will not be removed "
"from Django until version 1.8."
msgstr ""

# a0ab67bbcead475798fc1a1c5ade9033
#: ../../../../1.9/docs/releases/1.6.txt:442
msgid ""
"Removal of ``django.contrib.gis.tests.GeoDjangoTestSuiteRunner`` GeoDjango "
"custom test runner"
msgstr ""

# cae4e591ed5747fa83a2c1705bb4926f
#: ../../../../1.9/docs/releases/1.6.txt:444
msgid ""
"This is for developers working on the GeoDjango application itself and "
"related to the item above about changes in the test runners:"
msgstr ""

# 8058711c3f3d43a0b572d021021c65f6
#: ../../../../1.9/docs/releases/1.6.txt:447
msgid ""
"The ``django.contrib.gis.tests.GeoDjangoTestSuiteRunner`` test runner has "
"been removed and the standalone GeoDjango tests execution setup it "
"implemented isn't supported anymore. To run the GeoDjango tests simply use "
"the new ``DiscoverRunner`` and specify the ``django.contrib.gis`` app."
msgstr ""

# 31ccbb6dad6c42ef8d8e80c593f86999
#: ../../../../1.9/docs/releases/1.6.txt:453
msgid "Custom User models in tests"
msgstr ""

# 84613660fe66446b9dba627d818d55f1
#: ../../../../1.9/docs/releases/1.6.txt:455
msgid ""
"The introduction of the new test runner has also slightly changed the way "
"that test models are imported. As a result, any test that overrides "
"``AUTH_USER_MODEL`` to test behavior with one of Django's test user models ("
" :class:`~django.contrib.auth.tests.custom_user.CustomUser` and "
":class:`~django.contrib.auth.tests.custom_user.ExtensionUser`) must now "
"explicitly import the User model in your test module::"
msgstr ""

# 19e42ae3782b4751bcccecdbb7607334
#: ../../../../1.9/docs/releases/1.6.txt:469
msgid ""
"This import forces the custom user model to be registered. Without this "
"import, the test will be unable to swap in the custom user model, and you "
"will get an error reporting::"
msgstr ""

# fffbb6f2f15349a7ab29ab8b1c0f6fa4
#: ../../../../1.9/docs/releases/1.6.txt:476
msgid "Time zone-aware ``day``, ``month``, and ``week_day`` lookups"
msgstr ""

# 769cbb62f7de4094a21c37647adecc64
#: ../../../../1.9/docs/releases/1.6.txt:478
msgid ""
"Django 1.6 introduces time zone support for :lookup:`day`, :lookup:`month`, "
"and :lookup:`week_day` lookups when :setting:`USE_TZ` is ``True``. These "
"lookups were previously performed in UTC regardless of the current time "
"zone."
msgstr ""

# 268aa76370104cf1a029239ba677c0a3
#: ../../../../1.9/docs/releases/1.6.txt:482
msgid ""
"This requires :ref:`time zone definitions in the database <database-time-"
"zone-definitions>`. If you're using SQLite, you must install pytz_. If "
"you're using MySQL, you must install pytz_ and load the time zone tables "
"with `mysql_tzinfo_to_sql`_."
msgstr ""

# 95a875e1e0744d2da8e42ce39e192ed4
#: ../../../../1.9/docs/releases/1.6.txt:491
msgid "Addition of ``QuerySet.datetimes()``"
msgstr ""

# 5a5544d70278471790fa2bc15a927bea
#: ../../../../1.9/docs/releases/1.6.txt:493
msgid ""
"When the :doc:`time zone support </topics/i18n/timezones>` added in Django "
"1.4 was active, :meth:`QuerySet.dates() "
"<django.db.models.query.QuerySet.dates>` lookups returned unexpected "
"results, because the aggregation was performed in UTC. To fix this, Django "
"1.6 introduces a new API, :meth:`QuerySet.datetimes() "
"<django.db.models.query.QuerySet.datetimes>`. This requires a few changes in"
" your code."
msgstr ""

# ff159b82653445da9a83f8ae01170154
#: ../../../../1.9/docs/releases/1.6.txt:501
msgid "``QuerySet.dates()`` returns ``date`` objects"
msgstr ""

# a58192e5166f42d58639a1f92d9a8eb8
#: ../../../../1.9/docs/releases/1.6.txt:503
msgid ""
":meth:`QuerySet.dates() <django.db.models.query.QuerySet.dates>` now returns"
" a list of :class:`~datetime.date`. It used to return a list of "
":class:`~datetime.datetime`."
msgstr ""

# 89406adf31324cd7bd899f620b8d0dd4
#: ../../../../1.9/docs/releases/1.6.txt:507
msgid ""
":meth:`QuerySet.datetimes() <django.db.models.query.QuerySet.datetimes>` "
"returns a list of :class:`~datetime.datetime`."
msgstr ""

# 08031b592e7c4549a98e1bd60c46582a
#: ../../../../1.9/docs/releases/1.6.txt:511
msgid "``QuerySet.dates()`` no longer usable on ``DateTimeField``"
msgstr ""

# 5b359c2570714359a3204d240546b2ac
#: ../../../../1.9/docs/releases/1.6.txt:513
msgid ""
":meth:`QuerySet.dates() <django.db.models.query.QuerySet.dates>` raises an "
"error if it's used on :class:`~django.db.models.DateTimeField` when time "
"zone support is active. Use :meth:`QuerySet.datetimes() "
"<django.db.models.query.QuerySet.datetimes>` instead."
msgstr ""

# 8a5223936c04445fae34b8b820a118a2
#: ../../../../1.9/docs/releases/1.6.txt:519
msgid "``date_hierarchy`` requires time zone definitions"
msgstr ""

# e2b7b2896e6f4006a7da9006f35af13f
#: ../../../../1.9/docs/releases/1.6.txt:521
msgid ""
"The :attr:`~django.contrib.admin.ModelAdmin.date_hierarchy` feature of the "
"admin now relies on :meth:`QuerySet.datetimes() "
"<django.db.models.query.QuerySet.datetimes>` when it's used on a "
":class:`~django.db.models.DateTimeField`."
msgstr ""

# 61dac511613e4480948d166f4f84e205
#: ../../../../1.9/docs/releases/1.6.txt:526
msgid ""
"This requires time zone definitions in the database when :setting:`USE_TZ` "
"is ``True``. :ref:`Learn more <database-time-zone-definitions>`."
msgstr ""

# 15f401f3f912437f82a7d1626b21a446
#: ../../../../1.9/docs/releases/1.6.txt:530
msgid "``date_list`` in generic views requires time zone definitions"
msgstr ""

# 428b7df9d9f34fffad80c33e7ecb2b54
#: ../../../../1.9/docs/releases/1.6.txt:532
msgid ""
"For the same reason, accessing ``date_list`` in the context of a date-based "
"generic view requires time zone definitions in the database when the view is"
" based on a :class:`~django.db.models.DateTimeField` and :setting:`USE_TZ` "
"is ``True``. :ref:`Learn more <database-time-zone-definitions>`."
msgstr ""

# 7582fe604bc747e5a254adc2e20ac6d0
#: ../../../../1.9/docs/releases/1.6.txt:538
msgid "New lookups may clash with model fields"
msgstr ""

# ecf9c9b7ef044d28b95e9e8884ced254
#: ../../../../1.9/docs/releases/1.6.txt:540
msgid ""
"Django 1.6 introduces ``hour``, ``minute``, and ``second`` lookups on "
":class:`~django.db.models.DateTimeField`. If you had model fields called "
"``hour``, ``minute``, or ``second``, the new lookups will clash with you "
"field names. Append an explicit :lookup:`exact` lookup if this is an issue."
msgstr ""

# 63e4c3174661422f87828f8a7904bbe3
#: ../../../../1.9/docs/releases/1.6.txt:546
msgid "``BooleanField`` no longer defaults to ``False``"
msgstr ""

# 12335798ab9f49a58e8664473d7f4f35
#: ../../../../1.9/docs/releases/1.6.txt:548
msgid ""
"When a :class:`~django.db.models.BooleanField` doesn't have an explicit "
":attr:`~django.db.models.Field.default`, the implicit default value is "
"``None``. In previous version of Django, it was ``False``, but that didn't "
"represent accurately the lack of a value."
msgstr ""

# 94e3b66915994e1db01fcdf37a3ceced
#: ../../../../1.9/docs/releases/1.6.txt:553
msgid ""
"Code that relies on the default value being ``False`` may raise an exception"
" when saving new model instances to the database, because ``None`` isn't an "
"acceptable value for a :class:`~django.db.models.BooleanField`. You should "
"either specify ``default=False`` in the field definition, or ensure the "
"field is set to ``True`` or ``False`` before saving the object."
msgstr ""

# b24867d9c4c64f4db8e3e5c2e494cd55
#: ../../../../1.9/docs/releases/1.6.txt:560
msgid "Translations and comments in templates"
msgstr ""

# d9935752a8a14d62b9dde0a73e2e4d4e
#: ../../../../1.9/docs/releases/1.6.txt:563
msgid "Extraction of translations after comments"
msgstr ""

# d8e6868af23d486d831e284fb7345b61
#: ../../../../1.9/docs/releases/1.6.txt:565
msgid ""
"Extraction of translatable literals from templates with the "
":djadmin:`makemessages` command now correctly detects i18n constructs when "
"they are located after a ``{#`` / ``#}``-type comment on the same line. "
"E.g.:"
msgstr ""

# 732993863dad448e86e68da62050dc4d
#: ../../../../1.9/docs/releases/1.6.txt:574
msgid "Location of translator comments"
msgstr ""

# d91b3560d7124c10b4f68b226a8f82ce
#: ../../../../1.9/docs/releases/1.6.txt:576
msgid ""
":ref:`translator-comments-in-templates` specified using ``{#`` / ``#}`` need"
" to be at the end of a line. If they are not, the comments are ignored and "
":djadmin:`makemessages` will generate a warning. For example:"
msgstr ""

# ba62b8adffc04cda9979c393c1764fbf
#: ../../../../1.9/docs/releases/1.6.txt:587
msgid "Quoting in :func:`~django.core.urlresolvers.reverse`"
msgstr ""

# 9358e1c0a6754c3fa212d6a5c7ba2a00
#: ../../../../1.9/docs/releases/1.6.txt:589
msgid ""
"When reversing URLs, Django didn't apply :func:`~django.utils.http.urlquote`"
" to arguments before interpolating them in URL patterns. This bug is fixed "
"in Django 1.6. If you worked around this bug by applying URL quoting before "
"passing arguments to :func:`~django.core.urlresolvers.reverse`, this may "
"result in double-quoting. If this happens, simply remove the URL quoting "
"from your code. You will also have to replace special characters in URLs "
"used in :func:`~django.test.SimpleTestCase.assertRedirects` with their "
"encoded versions."
msgstr ""

# 060af3e1fb314e709857a218ce343c32
#: ../../../../1.9/docs/releases/1.6.txt:598
msgid "Storage of IP addresses in the comments app"
msgstr ""

# e03992e87be04592b5c40464e0b86972
#: ../../../../1.9/docs/releases/1.6.txt:600
msgid ""
"The comments app now uses a ``GenericIPAddressField`` for storing "
"commenters' IP addresses, to support comments submitted from IPv6 addresses."
" Until now, it stored them in an ``IPAddressField``, which is only meant to "
"support IPv4. When saving a comment made from an IPv6 address, the address "
"would be silently truncated on MySQL databases, and raise an exception on "
"Oracle. You will need to change the column type in your database to benefit "
"from this change."
msgstr ""

# 08fca13f43634d70b47c931e433b59be
#: ../../../../1.9/docs/releases/1.6.txt:608
msgid "For MySQL, execute this query on your project's database:"
msgstr ""

# ca353fe3d168469786da5e7075524ee3
#: ../../../../1.9/docs/releases/1.6.txt:614
msgid "For Oracle, execute this query:"
msgstr ""

# 16b68dff46a54987bb36e3d8ede0ff4f
#: ../../../../1.9/docs/releases/1.6.txt:620
msgid ""
"If you do not apply this change, the behavior is unchanged: on MySQL, IPv6 "
"addresses are silently truncated; on Oracle, an exception is generated. No "
"database change is needed for SQLite or PostgreSQL databases."
msgstr ""

# 8bf08814e0594ce3a1afa085fa1db25a
#: ../../../../1.9/docs/releases/1.6.txt:625
msgid "Percent literals in ``cursor.execute`` queries"
msgstr ""

# 465aeaaceba34b57a4c876c5269e9d27
#: ../../../../1.9/docs/releases/1.6.txt:627
msgid ""
"When you are running raw SQL queries through the :ref:`cursor.execute "
"<executing-custom-sql>` method, the rule about doubling percent literals "
"(``%``) inside the query has been unified. Past behavior depended on the "
"database backend. Now, across all backends, you only need to double literal "
"percent characters if you are also providing replacement parameters. For "
"example::"
msgstr ""

# d5b78423735e40368d9d164c13470752
#: ../../../../1.9/docs/releases/1.6.txt:640
msgid "``SQLite`` users need to check and update such queries."
msgstr ""

# d2f6ad53eaa34c62862e6758813ae288
#: ../../../../1.9/docs/releases/1.6.txt:645
msgid "Help text of model form fields for ManyToManyField fields"
msgstr ""

# cc12160a1348447b86ec915d12b0ed2b
#: ../../../../1.9/docs/releases/1.6.txt:647
msgid ""
"HTML rendering of model form fields corresponding to "
":class:`~django.db.models.ManyToManyField` model fields used to get the "
"hard-coded sentence:"
msgstr ""

# f929c9fa74554453828539e4ded5b585
#: ../../../../1.9/docs/releases/1.6.txt:651
msgid "*Hold down \"Control\", or \"Command\" on a Mac, to select more than one.*"
msgstr ""

# f3a8bae67b9d42019a82297bbf6871e1
#: ../../../../1.9/docs/releases/1.6.txt:653
msgid ""
"(or its translation to the active locale) imposed as the help legend shown "
"along them if neither :attr:`model <django.db.models.Field.help_text>` nor "
":attr:`form <django.forms.Field.help_text>` ``help_text`` attributes were "
"specified by the user (or this string was appended to any ``help_text`` that"
" was provided)."
msgstr ""

# a665c05acce747b9bf5798e6e4702245
#: ../../../../1.9/docs/releases/1.6.txt:658
msgid ""
"Since this happened at the model layer, there was no way to prevent the text"
" from appearing in cases where it wasn't applicable such as form fields that"
" implement user interactions that don't involve a keyboard and/or a mouse."
msgstr ""

# c2cf61b6d6794cd9802eaf28d966267e
#: ../../../../1.9/docs/releases/1.6.txt:662
msgid ""
"Starting with Django 1.6, as an ad-hoc temporary backward-compatibility "
"provision, the logic to add the \"Hold down...\" sentence has been moved to "
"the model form field layer and modified to add the text only when the "
"associated widget is :class:`~django.forms.SelectMultiple` or selected "
"subclasses."
msgstr ""

# 7a6953b762a741b8b419a639376ffd0c
#: ../../../../1.9/docs/releases/1.6.txt:667
msgid ""
"The change can affect you in a backward incompatible way if you employ "
"custom model form fields and/or widgets for ``ManyToManyField`` model fields"
" whose UIs do rely on the automatic provision of the mentioned hard-coded "
"sentence. These form field implementations need to adapt to the new scenario"
" by providing their own handling of the ``help_text`` attribute."
msgstr ""

# fb994f192b064098a5146c906f8f627a
#: ../../../../1.9/docs/releases/1.6.txt:673
msgid ""
"Applications that use Django :doc:`model form </topics/forms/modelforms>` "
"facilities together with Django built-in form :doc:`fields "
"</ref/forms/fields>` and :doc:`widgets </ref/forms/widgets>` aren't affected"
" but need to be aware of what's described in :ref:`m2m-help_text-"
"deprecation` below."
msgstr ""

# 56df0d32b4ef4b0cbe296b55c57cc119
#: ../../../../1.9/docs/releases/1.6.txt:679
msgid "QuerySet iteration"
msgstr ""

# 2682471a932e428e913209d352b54186
#: ../../../../1.9/docs/releases/1.6.txt:681
msgid ""
"The ``QuerySet`` iteration was changed to immediately convert all fetched "
"rows to ``Model`` objects. In Django 1.5 and earlier the fetched rows were "
"converted to ``Model`` objects in chunks of 100."
msgstr ""

# 9a189ad9fcc242a590c8994b24e03119
#: ../../../../1.9/docs/releases/1.6.txt:685
msgid ""
"Existing code will work, but the amount of rows converted to objects might "
"change in certain use cases. Such usages include partially looping over a "
"queryset or any usage which ends up doing ``__bool__`` or ``__contains__``."
msgstr ""

# 85327c4dd0774f698433dccf91ccb75b
#: ../../../../1.9/docs/releases/1.6.txt:690
msgid ""
"Notably most database backends did fetch all the rows in one go already in "
"1.5."
msgstr ""

# 32b15c6fb2f84b52a14ef5b11088812d
#: ../../../../1.9/docs/releases/1.6.txt:693
msgid ""
"It is still possible to convert the fetched rows to ``Model`` objects lazily"
" by using the :meth:`~django.db.models.query.QuerySet.iterator()` method."
msgstr ""

# d746ff5302ba453fb458474162a2e332
#: ../../../../1.9/docs/releases/1.6.txt:698
msgid ""
":meth:`BoundField.label_tag<django.forms.BoundField.label_tag>` now includes"
" the form's :attr:`~django.forms.Form.label_suffix`"
msgstr ""

# c366c3f8e4db42d987fa3ece36d93245
#: ../../../../1.9/docs/releases/1.6.txt:700
msgid ""
"This is consistent with how methods like "
":meth:`Form.as_p<django.forms.Form.as_p>` and "
":meth:`Form.as_ul<django.forms.Form.as_ul>` render labels."
msgstr ""

# 30ef06b745414f3d964193cde03129b1
#: ../../../../1.9/docs/releases/1.6.txt:704
msgid "If you manually render ``label_tag`` in your templates:"
msgstr ""

# f4c14c9a7ca740a2a743fa0d0705d4de
#: ../../../../1.9/docs/releases/1.6.txt:710
msgid ""
"you'll want to remove the colon (or whatever other separator you may be "
"using) to avoid duplicating it when upgrading to Django 1.6. The following "
"template in Django 1.6 will render identically to the above template in "
"Django 1.5, except that the colon will appear inside the ``<label>`` "
"element."
msgstr ""

# 1eae040dec65499ab58dab566ebf532e
#: ../../../../1.9/docs/releases/1.6.txt:719
msgid "will render something like:"
msgstr ""

# 4e158134a5a144a6a1c12ddf0d75712c
#: ../../../../1.9/docs/releases/1.6.txt:725
msgid ""
"If you want to keep the current behavior of rendering ``label_tag`` without "
"the ``label_suffix``, instantiate the form ``label_suffix=''``. You can also"
" customize the ``label_suffix`` on a per-field basis using the new "
"``label_suffix`` parameter on :meth:`~django.forms.BoundField.label_tag`."
msgstr ""

# 3052d6e710b94f748cf40310d650f06d
#: ../../../../1.9/docs/releases/1.6.txt:731
msgid "Admin views ``_changelist_filters`` GET parameter"
msgstr ""

# 5691201ac30c48ba8680fbd443031fc7
#: ../../../../1.9/docs/releases/1.6.txt:733
msgid ""
"To achieve preserving and restoring list view filters, admin views now pass "
"around the `_changelist_filters` GET parameter. It's important that you "
"account for that change if you have custom admin templates or if your tests "
"rely on the previous URLs. If you want to revert to the original behavior "
"you can set the :attr:`~django.contrib.admin.ModelAdmin.preserve_filters` "
"attribute to ``False``."
msgstr ""

# fde5f25cd8d54208b80fbe5f2df559aa
#: ../../../../1.9/docs/releases/1.6.txt:741
msgid ""
"``django.contrib.auth`` password reset uses base 64 encoding of ``User`` PK"
msgstr ""

# c32a24f14d4a468aa2aa81f9ccc86afb
#: ../../../../1.9/docs/releases/1.6.txt:743
msgid ""
"Past versions of Django used base 36 encoding of the ``User`` primary key in"
" the password reset views and URLs "
"(:func:`django.contrib.auth.views.password_reset_confirm`). Base 36 encoding"
" is sufficient if the user primary key is an integer, however, with the "
"introduction of custom user models in Django 1.5, that assumption may no "
"longer be true."
msgstr ""

# fed96418f1f24fc0a7363fddeef554b4
#: ../../../../1.9/docs/releases/1.6.txt:750
msgid ""
":func:`django.contrib.auth.views.password_reset_confirm` has been modified "
"to take a ``uidb64`` parameter instead of ``uidb36``. If you are reversing "
"this view, for example in a custom ``password_reset_email.html`` template, "
"be sure to update your code."
msgstr ""

# a7ce473413e94ec694e77d7753ec16f4
#: ../../../../1.9/docs/releases/1.6.txt:755
msgid ""
"A temporary shim for "
":func:`django.contrib.auth.views.password_reset_confirm` that will allow "
"password reset links generated prior to Django 1.6 to continue to work has "
"been added to provide backwards compatibility; this will be removed in "
"Django 1.7. Thus, as long as your site has been running Django 1.6 for more "
"than :setting:`PASSWORD_RESET_TIMEOUT_DAYS`, this change will have no "
"effect. If not (for example, if you upgrade directly from Django 1.5 to "
"Django 1.7), then any password reset links generated before you upgrade to "
"Django 1.7 or later won't work after the upgrade."
msgstr ""

# 3538c93149144a928511c04d3fab6991
#: ../../../../1.9/docs/releases/1.6.txt:764
msgid ""
"In addition, if you have any custom password reset URLs, you will need to "
"update them by replacing ``uidb36`` with ``uidb64`` and the dash that "
"follows that pattern with a slash. Also add ``_\\-`` to the list of "
"characters that may match the ``uidb64`` pattern."
msgstr ""

# 7b6a2088d9cc48f1a97fb8649e08ba19
#: ../../../../1.9/docs/releases/1.6.txt:769
msgid "For example::"
msgstr "Par exemple ::"

# 248c9ea474f2412ab3aeb438fda7eac4
# 870f7a4be6e94bd58842ace17fa00647
# fb0de7c7d21d463db6db5bab8d0c16f6
# c9f69e0676dc430db613668c4d82e6c1
#: ../../../../1.9/docs/releases/1.6.txt:775
#: ../../../../1.9/docs/releases/1.6.txt:923
#: ../../../../1.9/docs/releases/1.8.txt:1582
#: ../../../../1.9/docs/releases/1.9.txt:1233
msgid "becomes::"
msgstr "devient ::"

# 31b5ae4c94cb41c7a0e7630ba90638e4
#: ../../../../1.9/docs/releases/1.6.txt:781
msgid ""
"You may also want to add the shim to support the old style reset links. "
"Using the example above, you would modify the existing url by replacing "
"``django.contrib.auth.views.password_reset_confirm`` with "
"``django.contrib.auth.views.password_reset_confirm_uidb36`` and also remove "
"the ``name`` argument so it doesn't conflict with the new url::"
msgstr ""

# daf7cb1099d14fe5aef3f9234d431d34
#: ../../../../1.9/docs/releases/1.6.txt:790
msgid ""
"You can remove this url pattern after your app has been deployed with Django"
" 1.6 for :setting:`PASSWORD_RESET_TIMEOUT_DAYS`."
msgstr ""

# b429961c44a94900aa5422bbf9b1dfd0
#: ../../../../1.9/docs/releases/1.6.txt:794
msgid "Default session serialization switched to JSON"
msgstr ""

# e19dc01aa2b144e2bf8b517db97e7794
#: ../../../../1.9/docs/releases/1.6.txt:796
msgid ""
"Historically, :mod:`django.contrib.sessions` used :mod:`pickle` to serialize"
" session data before storing it in the backend. If you're using the "
":ref:`signed cookie session backend<cookie-session-backend>` and "
":setting:`SECRET_KEY` is known by an attacker (there isn't an inherent "
"vulnerability in Django that would cause it to leak), the attacker could "
"insert a string into his session which, when unpickled, executes arbitrary "
"code on the server. The technique for doing so is simple and easily "
"available on the internet. Although the cookie session storage signs the "
"cookie-stored data to prevent tampering, a :setting:`SECRET_KEY` leak "
"immediately escalates to a remote code execution vulnerability."
msgstr ""

# 1a5996835aad42d7acbc7e745d3fde9a
#: ../../../../1.9/docs/releases/1.6.txt:807
msgid ""
"This attack can be mitigated by serializing session data using JSON rather "
"than :mod:`pickle`. To facilitate this, Django 1.5.3 introduced a new "
"setting, :setting:`SESSION_SERIALIZER`, to customize the session "
"serialization format. For backwards compatibility, this setting defaulted to"
" using :mod:`pickle` in Django 1.5.3, but we've changed the default to JSON "
"in 1.6. If you upgrade and switch from pickle to JSON, sessions created "
"before the upgrade will be lost. While JSON serialization does not support "
"all Python objects like :mod:`pickle` does, we highly recommend using JSON-"
"serialized sessions. Be aware of the following when checking your code to "
"determine if JSON serialization will work for your application:"
msgstr ""

# 91ffa2d67d204dee94b0f90028f11feb
#: ../../../../1.9/docs/releases/1.6.txt:818
msgid ""
"JSON requires string keys, so you will likely run into problems if you are "
"using non-string keys in ``request.session``."
msgstr ""

# 22c11efc96d64d13996ad4df0e2a3857
#: ../../../../1.9/docs/releases/1.6.txt:820
msgid ""
"Setting session expiration by passing ``datetime`` values to "
":meth:`~django.contrib.sessions.backends.base.SessionBase.set_expiry` will "
"not work as ``datetime`` values are not serializable in JSON. You can use "
"integer values instead."
msgstr ""

# e0f73b575e264620a1ee87edf6c4bb54
#: ../../../../1.9/docs/releases/1.6.txt:825
msgid "See the :ref:`session_serialization` documentation for more details."
msgstr ""

# 970034b996e7480fa0d19041f9ff24c4
#: ../../../../1.9/docs/releases/1.6.txt:828
msgid "Object Relational Mapper changes"
msgstr ""

# 9255c7d50d874570b97b5ae0c7984376
#: ../../../../1.9/docs/releases/1.6.txt:830
msgid ""
"Django 1.6 contains many changes to the ORM. These changes fall mostly in "
"three categories:"
msgstr "Django 1.6 contient plusieurs changement au sein de l'ORM. Ces changements sont principalement dans 3 catégories :"

# 46f0f3b619df4d9295056d3ef1ffdddc
#: ../../../../1.9/docs/releases/1.6.txt:833
msgid ""
"Bug fixes (e.g. proper join clauses for generic relations, query combining, "
"join promotion, and join trimming fixes)"
msgstr "Corrections de bugs (par exemple correction des jointures pour les relations génériques, combinaisons de requêtes, ...)"

# 51da283e4cf94c568339657a6c21735b
#: ../../../../1.9/docs/releases/1.6.txt:835
msgid ""
"Preparation for new features. For example the ORM is now internally ready "
"for multicolumn foreign keys."
msgstr "Préparation de nouvelles fonctionnalités. Par exemple, l'ORM est désormais prêt à intégrer le support des clés étrangères sur plusieurs colonnes."

# e67a6fc38b4b4581be5cd2ec25c5e54d
#: ../../../../1.9/docs/releases/1.6.txt:837
msgid "General cleanup."
msgstr "Nettoyage général."

# e107503a02af4e5bb11bae5ac06fb2ab
#: ../../../../1.9/docs/releases/1.6.txt:839
msgid ""
"These changes can result in some compatibility problems. For example, some "
"queries will now generate different table aliases. This can affect "
":meth:`QuerySet.extra() <django.db.models.query.QuerySet.extra>`. In "
"addition some queries will now produce different results. An example is "
":meth:`exclude(condition) <django.db.models.query.QuerySet.exclude>` where "
"the condition is a complex one (referencing multijoins inside :class:`Q "
"objects <django.db.models.Q>`). In many cases the affected queries didn't "
"produce correct results in Django 1.5 but do now. Unfortunately there are "
"also cases that produce different results, but neither Django 1.5 nor 1.6 "
"produce correct results."
msgstr "Ces changements peuvent entrainer des problèmes de compatibilité. Par exemple, certaines requêtes vont désormais produire des alias de table différents. Ceci peut affecter :meth:`QuerySet.extra() <django.db.models.query.QuerySet.extra>`. De plus, certaines requêtes vont produire un résultat différent. Un exemple possible est :meth:`exclude(condition) <django.db.models.query.QuerySet.exclude>` où la condition est complexe (utilisation de plusieurs jointures avec :class:`Q objects <django.db.models.Q>`). Dans plusieurs cas, les requêtes affectées ne produisaient pas de résultats corrects dans Django 1.5 mais le feront désormais. Malheureusement, il existe également des cas où les résultats sont différents et non valide aussi bien sur Django 1.5 que 1.6."

# 40fee23ff65041fc853020d63fbde8b9
#: ../../../../1.9/docs/releases/1.6.txt:850
msgid "Finally, there have been many changes to the ORM internal APIs."
msgstr "Enfin, il y a plusieurs changements au sein de l'API interne de l'ORM."

# 05d277d03d5043898a4c9f58f1bff87d
#: ../../../../1.9/docs/releases/1.6.txt:855
msgid ""
"The ``django.db.models.query.EmptyQuerySet`` can't be instantiated any more "
"- it is only usable as a marker class for checking if "
":meth:`~django.db.models.query.QuerySet.none` has been called: "
"``isinstance(qs.none(), EmptyQuerySet)``"
msgstr ""

# 6bea91f5ca9d4a60bcb0d5d3e1ed65b2
#: ../../../../1.9/docs/releases/1.6.txt:860
msgid ""
"If your CSS/JavaScript code used to access HTML input widgets by type, you "
"should review it as ``type='text'`` widgets might be now output as "
"``type='email'``, ``type='url'`` or ``type='number'`` depending on their "
"corresponding field type."
msgstr ""

# 3eace800f4f34ad6b097b07e780c3a50
#: ../../../../1.9/docs/releases/1.6.txt:865
msgid ""
"Form field's :attr:`~django.forms.Field.error_messages` that contain a "
"placeholder should now always use a named placeholder (``\"Value '%(value)s'"
" is too big\"`` instead of ``\"Value '%s' is too big\"``). See the "
"corresponding field documentation for details about the names of the "
"placeholders. The changes in 1.6 particularly affect "
":class:`~django.forms.DecimalField` and "
":class:`~django.forms.ModelMultipleChoiceField`."
msgstr ""

# 2d666da8b4ef4c57ad8ea9d47c04eca4
#: ../../../../1.9/docs/releases/1.6.txt:872
msgid ""
"Some :attr:`~django.forms.Field.error_messages` for "
":class:`~django.forms.IntegerField`, :class:`~django.forms.EmailField`, "
"``IPAddressField``, :class:`~django.forms.GenericIPAddressField`, and "
":class:`~django.forms.SlugField` have been suppressed because they "
"duplicated error messages already provided by validators tied to the fields."
msgstr ""

# 9b0c5adc2aed4deda9fb63af9a2d69c2
#: ../../../../1.9/docs/releases/1.6.txt:878
msgid ""
"Due to a change in the form validation workflow, "
":class:`~django.forms.TypedChoiceField` ``coerce`` method should always "
"return a value present in the ``choices`` field attribute. That limitation "
"should be lift again in Django 1.7."
msgstr ""

# 0faf92eaa54b49bbab9d68e67aaa3b34
#: ../../../../1.9/docs/releases/1.6.txt:883
msgid ""
"There have been changes in the way timeouts are handled in cache backends. "
"Explicitly passing in ``timeout=None`` no longer results in using the "
"default timeout. It will now set a non-expiring timeout. Passing 0 into the "
"memcache backend no longer uses the default timeout, and now will set-and-"
"expire-immediately the value."
msgstr ""

# 0a037700f5ef4dca82a5bd0336d00ea9
#: ../../../../1.9/docs/releases/1.6.txt:889
msgid ""
"The ``django.contrib.flatpages`` app used to set custom HTTP headers for "
"debugging purposes. This functionality was not documented and made caching "
"ineffective so it has been removed, along with its generic implementation, "
"previously available in ``django.core.xheaders``."
msgstr ""

# 6d2cb4abae4b4e5f812c569688638147
#: ../../../../1.9/docs/releases/1.6.txt:894
msgid ""
"The ``XViewMiddleware`` has been moved from ``django.middleware.doc`` to "
"``django.contrib.admindocs.middleware`` because it is an implementation "
"detail of admindocs, proven not to be reusable in general."
msgstr ""

# 1365a595453f4e8bb804170da0cb38cb
#: ../../../../1.9/docs/releases/1.6.txt:898
msgid ""
":class:`~django.db.models.GenericIPAddressField` will now only allow "
"``blank`` values if ``null`` values are also allowed. Creating a "
"``GenericIPAddressField`` where ``blank`` is allowed but ``null`` is not "
"will trigger a model validation error because ``blank`` values are always "
"stored as ``null``. Previously, storing a ``blank`` value in a field which "
"did not allow ``null`` would cause a database exception at runtime."
msgstr ""

# 6ab098f4dcc5479fa39230d357262bfa
#: ../../../../1.9/docs/releases/1.6.txt:905
msgid ""
"If a :class:`~django.core.urlresolvers.NoReverseMatch` exception is raised "
"from a method when rendering a template, it is not silenced. For example, "
"``{{ obj.view_href }}`` will cause template rendering to fail if "
"``view_href()`` raises ``NoReverseMatch``. There is no change to the "
":ttag:`{% url %}<url>` tag, it causes template rendering to fail like always"
" when ``NoReverseMatch`` is raised."
msgstr ""

# d9f23f94bcbe4f9f9e0e07c06590fb22
#: ../../../../1.9/docs/releases/1.6.txt:912
msgid ""
":meth:`django.test.Client.logout` now calls "
":meth:`django.contrib.auth.logout` which will send the "
":func:`~django.contrib.auth.signals.user_logged_out` signal."
msgstr ""

# 50f45222385b49c789a42ea4b9220b87
#: ../../../../1.9/docs/releases/1.6.txt:916
msgid ""
":ref:`Authentication views <built-in-auth-views>` are now reversed by name, "
"not their locations in ``django.contrib.auth.views``. If you are using the "
"views without a ``name``, you should update your ``urlpatterns`` to use "
":meth:`~django.conf.urls.url` with the ``name`` parameter. For example::"
msgstr ""

# 904d31d72a02451daec0512a14e8dd97
#: ../../../../1.9/docs/releases/1.6.txt:927
msgid ""
":class:`~django.views.generic.base.RedirectView` now has a `pattern_name` "
"attribute which allows it to choose the target by reversing the URL."
msgstr ""

# cf81cd44db254ca2a5a9f2c374947766
#: ../../../../1.9/docs/releases/1.6.txt:930
msgid ""
"In Django 1.4 and 1.5, a blank string was unintentionally not considered to "
"be a valid password. This meant "
":meth:`~django.contrib.auth.models.User.set_password()` would save a blank "
"password as an unusable password like "
":meth:`~django.contrib.auth.models.User.set_unusable_password()` does, and "
"thus :meth:`~django.contrib.auth.models.User.check_password()` always "
"returned ``False`` for blank passwords. This has been corrected in this "
"release: blank passwords are now valid."
msgstr ""

# 114d0ec35e2848099d2b1a3c5062c25c
#: ../../../../1.9/docs/releases/1.6.txt:939
msgid ""
"The admin :attr:`~django.contrib.admin.ModelAdmin.changelist_view` "
"previously accepted a ``pop`` GET parameter to signify it was to be "
"displayed in a popup. This parameter has been renamed to ``_popup`` to be "
"consistent with the rest of the admin views. You should update your custom "
"templates if they use the previous parameter name."
msgstr ""

# 435b50b2e2014e94802dec91a42274b2
#: ../../../../1.9/docs/releases/1.6.txt:945
msgid ""
":meth:`~django.core.validators.validate_email` now accepts email addresses "
"with ``localhost`` as the domain."
msgstr ""

# 8481ee2d25ed45f08654f57dea35e193
#: ../../../../1.9/docs/releases/1.6.txt:948
msgid ""
"The :djadminopt:`--keep-pot` option was added to :djadmin:`makemessages` to "
"prevent django from deleting the temporary .pot file it generates before "
"creating the .po file."
msgstr ""

# 2392234c0eb54409abe1603aabf43da5
#: ../../../../1.9/docs/releases/1.6.txt:952
msgid ""
"The undocumented ``django.core.servers.basehttp.WSGIServerException`` has "
"been removed. Use ``socket.error`` provided by the standard library instead."
" This change was also released in Django 1.5.5."
msgstr ""

# 78d4097f835f42ccad17dfba09ee2cd3
#: ../../../../1.9/docs/releases/1.6.txt:956
msgid ""
"The signature of "
":meth:`django.views.generic.base.RedirectView.get_redirect_url` has changed "
"and now accepts positional arguments as well (``*args, **kwargs``). Any "
"unnamed captured group will now be passed to ``get_redirect_url()`` which "
"may result in a ``TypeError`` if you don't update the signature of your "
"custom method."
msgstr ""

# 1cae42c4fedd4a41a002b3ddd6d3e394
#: ../../../../1.9/docs/releases/1.6.txt:965
msgid "Features deprecated in 1.6"
msgstr ""

# 36b0b24b33b54b63838c50d1ee024086
#: ../../../../1.9/docs/releases/1.6.txt:968
msgid "Transaction management APIs"
msgstr ""

# d048425eb12643d7ae3d64db712f8c44
#: ../../../../1.9/docs/releases/1.6.txt:970
msgid ""
"Transaction management was completely overhauled in Django 1.6, and the "
"current APIs are deprecated:"
msgstr ""

# 19abfc5952a34de9aa31efc359370d6e
#: ../../../../1.9/docs/releases/1.6.txt:973
msgid "``django.middleware.transaction.TransactionMiddleware``"
msgstr ""

# e4b6b43e346d4a649f3f5b120c8bc52a
#: ../../../../1.9/docs/releases/1.6.txt:974
msgid "``django.db.transaction.autocommit``"
msgstr ""

# a5dc32b49380487485cc442204aa6627
#: ../../../../1.9/docs/releases/1.6.txt:975
msgid "``django.db.transaction.commit_on_success``"
msgstr ""

# 43cd39137f08499a847d9c3bf5ff19f8
#: ../../../../1.9/docs/releases/1.6.txt:976
msgid "``django.db.transaction.commit_manually``"
msgstr ""

# baa28a0c15db462897949a54212c5034
# 1147073225e841288d66f1c912ff2092
#: ../../../../1.9/docs/releases/1.6.txt:977
#: ../../../../1.9/docs/releases/1.8.txt:1742
msgid "the ``TRANSACTIONS_MANAGED`` setting"
msgstr "le réglage ``TRANSACTIONS_MANAGED``"

# de69943cf1f541e995c5375b874ec05c
#: ../../../../1.9/docs/releases/1.6.txt:980
msgid "``django.contrib.comments``"
msgstr ""

# a2cd1e981f904b2489b155792c6efadf
#: ../../../../1.9/docs/releases/1.6.txt:982
msgid ""
"Django's comment framework has been deprecated and is no longer supported. "
"It will be available in Django 1.6 and 1.7, and removed in Django 1.8. Most "
"users will be better served with a custom solution, or a hosted product like"
" Disqus__."
msgstr ""

# 0d1d078c4b1546b5a4feab1849b53d67
#: ../../../../1.9/docs/releases/1.6.txt:986
msgid ""
"The code formerly known as ``django.contrib.comments`` is `still available "
"in an external repository`__."
msgstr "Le code anciennement connu sous le nom ``django.contrib.comments`` est toujours disponible dans un répertoire externe__."

# 47fea1ce3b73452c891fb318f4d713e1
#: ../../../../1.9/docs/releases/1.6.txt:993
msgid "Support for PostgreSQL versions older than 8.4"
msgstr ""

# 7abe1e57143b46ffb7af4abac0f73186
#: ../../../../1.9/docs/releases/1.6.txt:995
msgid ""
"The end of upstream support periods was reached in December 2011 for "
"PostgreSQL 8.2 and in February 2013 for 8.3. As a consequence, Django 1.6 "
"sets 8.4 as the minimum PostgreSQL version it officially supports."
msgstr ""

# f7099ed5e30e40dfbca306a221fe2082
#: ../../../../1.9/docs/releases/1.6.txt:999
msgid ""
"You're strongly encouraged to use the most recent version of PostgreSQL "
"available, because of performance improvements and to take advantage of the "
"native streaming replication available in PostgreSQL 9.x."
msgstr ""

# 2e3e061f11fb40849da84a61106dd107
#: ../../../../1.9/docs/releases/1.6.txt:1004
msgid "Changes to :ttag:`cycle` and :ttag:`firstof`"
msgstr ""

# f394e4ad0fe74ae49002894241dc1d25
#: ../../../../1.9/docs/releases/1.6.txt:1006
msgid ""
"The template system generally escapes all variables to avoid XSS attacks. "
"However, due to an accident of history, the :ttag:`cycle` and "
":ttag:`firstof` tags render their arguments as-is."
msgstr ""

# f69d9503f6934e26af3b954c6c213517
#: ../../../../1.9/docs/releases/1.6.txt:1010
msgid ""
"Django 1.6 starts a process to correct this inconsistency. The ``future`` "
"template library provides alternate implementations of :ttag:`cycle` and "
":ttag:`firstof` that autoescape their inputs. If you're using these tags, "
"you're encouraged to include the following line at the top of your templates"
" to enable the new behavior::"
msgstr ""

# e3323ac91c87418798a8935780723f7d
#: ../../../../1.9/docs/releases/1.6.txt:1022
msgid ""
"The tags implementing the old behavior have been deprecated, and in Django "
"1.8, the old behavior will be replaced with the new behavior. To ensure "
"compatibility with future versions of Django, existing templates should be "
"modified to use the ``future`` versions."
msgstr ""

# 211b51b276924a449f56d6b26dc374d9
#: ../../../../1.9/docs/releases/1.6.txt:1027
msgid ""
"If necessary, you can temporarily disable auto-escaping with "
":func:`~django.utils.safestring.mark_safe` or :ttag:`{% autoescape off %} "
"<autoescape>`."
msgstr ""

# 4d4e488838fa42baa383ef4eea4271bf
#: ../../../../1.9/docs/releases/1.6.txt:1032
msgid "``CACHE_MIDDLEWARE_ANONYMOUS_ONLY`` setting"
msgstr ""

# 9df3abe06c34464195c9bd4841393d65
#: ../../../../1.9/docs/releases/1.6.txt:1034
msgid ""
"``CacheMiddleware`` and ``UpdateCacheMiddleware`` used to provide a way to "
"cache requests only if they weren't made by a logged-in user. This mechanism"
" was largely ineffective because the middleware correctly takes into account"
" the ``Vary: Cookie`` HTTP header, and this header is being set on a variety"
" of occasions, such as:"
msgstr ""

# 3973124a5ff04e589e58fb5552d1b820
#: ../../../../1.9/docs/releases/1.6.txt:1040
msgid "accessing the session, or"
msgstr ""

# 28c089ea47254d61a221e93bd8e624a6
#: ../../../../1.9/docs/releases/1.6.txt:1041
msgid "using CSRF protection, which is turned on by default, or"
msgstr ""

# 3a322ec583534333a4e7ec97c7cc4422
#: ../../../../1.9/docs/releases/1.6.txt:1042
msgid ""
"using a client-side library which sets cookies, like `Google Analytics`__."
msgstr ""

# 520b0fd3db8b4e88beb4dd3cf9ae7c47
#: ../../../../1.9/docs/releases/1.6.txt:1044
msgid ""
"This makes the cache effectively work on a per-session basis regardless of "
"the ``CACHE_MIDDLEWARE_ANONYMOUS_ONLY`` setting."
msgstr ""

# 924eb54bfc8140a98846b5eaa57df816
#: ../../../../1.9/docs/releases/1.6.txt:1050
msgid "``SEND_BROKEN_LINK_EMAILS`` setting"
msgstr ""

# d10cac8d7c7d47468a265153e1e1b91d
#: ../../../../1.9/docs/releases/1.6.txt:1052
msgid ""
":class:`~django.middleware.common.CommonMiddleware` used to provide basic "
"reporting of broken links by email when ``SEND_BROKEN_LINK_EMAILS`` is set "
"to ``True``."
msgstr ""

# f57f055e457f417ca0bbfe1b76957286
#: ../../../../1.9/docs/releases/1.6.txt:1056
msgid ""
"Because of intractable ordering problems between "
":class:`~django.middleware.common.CommonMiddleware` and "
":class:`~django.middleware.locale.LocaleMiddleware`, this feature was split "
"out into a new middleware: "
":class:`~django.middleware.common.BrokenLinkEmailsMiddleware`."
msgstr ""

# c771659817dc461c965834ccc0b1ccc2
#: ../../../../1.9/docs/releases/1.6.txt:1062
msgid ""
"If you're relying on this feature, you should add "
"``'django.middleware.common.BrokenLinkEmailsMiddleware'`` to your "
":setting:`MIDDLEWARE_CLASSES` setting and remove ``SEND_BROKEN_LINK_EMAILS``"
" from your settings."
msgstr ""

# 19829b00578347208c92d3c5b7f6550a
#: ../../../../1.9/docs/releases/1.6.txt:1068
msgid "``_has_changed`` method on widgets"
msgstr ""

# 69dd74e481c7474a877ae5b33edf1248
#: ../../../../1.9/docs/releases/1.6.txt:1070
msgid ""
"If you defined your own form widgets and defined the ``_has_changed`` method"
" on a widget, you should now define this method on the form field itself."
msgstr ""

# bdec451cbf7a44ee83e589e60de39148
#: ../../../../1.9/docs/releases/1.6.txt:1074
msgid "``module_name`` model _meta attribute"
msgstr ""

# 0692aa1d0c3e487fadeddc8d1728ddff
#: ../../../../1.9/docs/releases/1.6.txt:1076
msgid ""
"``Model._meta.module_name`` was renamed to ``model_name``. Despite being a "
"private API, it will go through a regular deprecation path."
msgstr ""

# 84fb6eaaaee042f28d7ce0bee70539a2
#: ../../../../1.9/docs/releases/1.6.txt:1080
msgid "``get_(add|change|delete)_permission`` model _meta methods"
msgstr ""

# 1ee58bd044d54a10bc90cbf71f375912
#: ../../../../1.9/docs/releases/1.6.txt:1082
msgid ""
"``Model._meta.get_(add|change|delete)_permission`` methods were deprecated. "
"Even if they were not part of the public API they'll also go through a "
"regular deprecation path. You can replace them with "
"``django.contrib.auth.get_permission_codename('action', Model._meta)`` where"
" ``'action'`` is ``'add'``, ``'change'``, or ``'delete'``."
msgstr ""

# 569cb2229f5c424bb55d5ddddb63d8f6
#: ../../../../1.9/docs/releases/1.6.txt:1089
msgid "``get_query_set`` and similar methods renamed to ``get_queryset``"
msgstr ""

# 7dc2c4f2744b4d16a30be4305c90f52b
#: ../../../../1.9/docs/releases/1.6.txt:1091
msgid ""
"Methods that return a ``QuerySet`` such as ``Manager.get_query_set`` or "
"``ModelAdmin.queryset`` have been renamed to ``get_queryset``."
msgstr ""

# 47d8356fb3ea44539c1845bf72be3d53
#: ../../../../1.9/docs/releases/1.6.txt:1094
msgid ""
"If you are writing a library that implements, for example, a "
"``Manager.get_query_set`` method, and you need to support old Django "
"versions, you should rename the method and conditionally add an alias with "
"the old name::"
msgstr ""

# 234646e485f344099b277dc3b40fbf38
#: ../../../../1.9/docs/releases/1.6.txt:1108
msgid ""
"If you are writing a library that needs to call the ``get_queryset`` method "
"and must support old Django versions, you should write::"
msgstr ""

# aea4faf3ce8e4146b24f471d3986a383
#: ../../../../1.9/docs/releases/1.6.txt:1116
msgid ""
"In the general case of a custom manager that both implements its own "
"``get_queryset`` method and calls that method, and needs to work with older "
"Django versions, and libraries that have not been updated yet, it is useful "
"to define a ``get_queryset_compat`` method as below and use it internally to"
" your manager::"
msgstr ""

# 113c618dead640d2b0477b7231a5c6a5
#: ../../../../1.9/docs/releases/1.6.txt:1137
msgid ""
"This helps to minimize the changes that are needed, but also works correctly"
" in the case of subclasses (such as ``RelatedManagers`` from Django 1.5) "
"which might override either ``get_query_set`` or ``get_queryset``."
msgstr ""

# e93eb217c5164321b1c90657a7fb0b31
#: ../../../../1.9/docs/releases/1.6.txt:1143
msgid "``shortcut`` view and URLconf"
msgstr ""

# cb1001079da544fdb70002fc227bef4b
#: ../../../../1.9/docs/releases/1.6.txt:1145
msgid ""
"The ``shortcut`` view was moved from ``django.views.defaults`` to "
"``django.contrib.contenttypes.views`` shortly after the 1.0 release, but the"
" old location was never deprecated. This oversight was corrected in Django "
"1.6 and you should now use the new location."
msgstr ""

# bd591c128bb14653a8813ad6df24e58d
#: ../../../../1.9/docs/releases/1.6.txt:1150
msgid ""
"The URLconf ``django.conf.urls.shortcut`` was also deprecated. If you're "
"including it in an URLconf, simply replace::"
msgstr ""

# 6190dfab16d8466eb9a71bd0924940eb
#: ../../../../1.9/docs/releases/1.6.txt:1155
msgid "with::"
msgstr ""

# 931c9043609a43d8bfffb96cdb7a3c88
#: ../../../../1.9/docs/releases/1.6.txt:1160
msgid "``ModelForm`` without ``fields`` or ``exclude``"
msgstr ""

# 9052e0752dae4979a64c2f636cca4b05
#: ../../../../1.9/docs/releases/1.6.txt:1162
msgid ""
"Previously, if you wanted a :class:`~django.forms.ModelForm` to use all "
"fields on the model, you could simply omit the ``Meta.fields`` attribute, "
"and all fields would be used."
msgstr ""

# 07651212ec2043a891062dc5bb8f8f8a
#: ../../../../1.9/docs/releases/1.6.txt:1166
msgid ""
"This can lead to security problems where fields are added to the model and, "
"unintentionally, automatically become editable by end users. In some cases, "
"particular with boolean fields, it is possible for this problem to be "
"completely invisible. This is a form of `Mass assignment vulnerability "
"<https://en.wikipedia.org/wiki/Mass_assignment_vulnerability>`_."
msgstr ""

# 8f991fea885d49ea80053ecd5b020d69
#: ../../../../1.9/docs/releases/1.6.txt:1172
msgid ""
"For this reason, this behavior is deprecated, and using the ``Meta.exclude``"
" option is strongly discouraged. Instead, all fields that are intended for "
"inclusion in the form should be listed explicitly in the ``fields`` "
"attribute."
msgstr ""

# 57705f890eed43f69b93ec98ac4e4c8c
#: ../../../../1.9/docs/releases/1.6.txt:1176
msgid ""
"If this security concern really does not apply in your case, there is a "
"shortcut to explicitly indicate that all fields should be used - use the "
"special value ``\"__all__\"`` for the fields attribute::"
msgstr ""

# de655bc75600494db3251e77dd664a2d
#: ../../../../1.9/docs/releases/1.6.txt:1185
msgid ""
"If you have custom ``ModelForms`` that only need to be used in the admin, "
"there is another option. The admin has its own methods for defining fields "
"(``fieldsets`` etc.), and so adding a list of fields to the ``ModelForm`` is"
" redundant. Instead, simply omit the ``Meta`` inner class of the "
"``ModelForm``, or omit the ``Meta.model`` attribute. Since the "
"``ModelAdmin`` subclass knows which model it is for, it can add the "
"necessary attributes to derive a functioning ``ModelForm``. This behavior "
"also works for earlier Django versions."
msgstr ""

# d5909af4b21648349025282166b048a1
#: ../../../../1.9/docs/releases/1.6.txt:1195
msgid "``UpdateView`` and ``CreateView`` without explicit fields"
msgstr ""

# 338d74da5fdb4fa499e1f4e57b4f2599
#: ../../../../1.9/docs/releases/1.6.txt:1197
msgid ""
"The generic views :class:`~django.views.generic.edit.CreateView` and "
":class:`~django.views.generic.edit.UpdateView`, and anything else derived "
"from :class:`~django.views.generic.edit.ModelFormMixin`, are vulnerable to "
"the security problem described in the section above, because they can "
"automatically create a ``ModelForm`` that uses all fields for a model."
msgstr ""

# c5a2c5e729ab4359bf08de0929c7bb40
#: ../../../../1.9/docs/releases/1.6.txt:1203
msgid ""
"For this reason, if you use these views for editing models, you must also "
"supply the ``fields`` attribute (new in Django 1.6), which is a list of "
"model fields and works in the same way as the "
":class:`~django.forms.ModelForm` ``Meta.fields`` attribute. Alternatively, "
"you can set the ``form_class`` attribute to a ``ModelForm`` that explicitly "
"defines the fields to be used. Defining an ``UpdateView`` or ``CreateView`` "
"subclass to be used with a model but without an explicit list of fields is "
"deprecated."
msgstr ""

# 821c5632bdd84a1d99c67c735a9adab6
#: ../../../../1.9/docs/releases/1.6.txt:1214
msgid ""
"Munging of help text of model form fields for ``ManyToManyField`` fields"
msgstr ""

# 412b0684479143abac2d9512381b3bd6
#: ../../../../1.9/docs/releases/1.6.txt:1216
msgid ""
"All special handling of the ``help_text`` attribute of ``ManyToManyField`` "
"model fields performed by standard model or model form fields as described "
"in :ref:`m2m-help_text` above is deprecated and will be removed in Django "
"1.8."
msgstr ""

# d01a1446b2ab45a9b0e462780a57195a
#: ../../../../1.9/docs/releases/1.6.txt:1220
msgid ""
"Help text of these fields will need to be handled either by applications, "
"custom form fields or widgets, just like happens with the rest of the model "
"field types."
msgstr ""

# 7c41cbc324cb48b98e87b5b3d06d2c92
#: ../../../../1.9/docs/releases/1.6.1.txt:3
msgid "Django 1.6.1 release notes"
msgstr ""

# 67c35ca8ffd74a1ca72112ea54ff92ae
#: ../../../../1.9/docs/releases/1.6.1.txt:5
msgid "*December 12, 2013*"
msgstr "*12 décembre 2013*"

# 91f913e894f646cebb34df167dc5b676
#: ../../../../1.9/docs/releases/1.6.1.txt:7
msgid ""
"This is Django 1.6.1, a bugfix release for Django 1.6. In addition to the "
"bug fixes listed below, translations submitted since the 1.6 release are "
"also included."
msgstr ""

# 4ff193d5d9fd45888d27ea16459a3702
#: ../../../../1.9/docs/releases/1.6.1.txt:12
msgid "Bug fixes"
msgstr "Corrections de bugs."

# a1980820c02040d5b764a41c805c5b39
#: ../../../../1.9/docs/releases/1.6.1.txt:14
msgid ""
"Fixed ``BCryptSHA256PasswordHasher`` with py-bcrypt and Python 3 (#21398)."
msgstr ""

# 6f2a396d267040ccb59ac82b7b3d59e1
#: ../../../../1.9/docs/releases/1.6.1.txt:15
msgid ""
"Fixed a regression that prevented a ``ForeignKey`` with a hidden reverse "
"manager (``related_name`` ending with '+') from being used as a lookup for "
"``prefetch_related`` (#21410)."
msgstr ""

# 91777ba45ede4160aa6b6858492f9f59
#: ../../../../1.9/docs/releases/1.6.1.txt:18
msgid ""
"Fixed :meth:`Queryset.datetimes<django.db.models.query.QuerySet.datetimes>` "
"raising ``AttributeError`` in some situations (#21432)."
msgstr ""

# 46432c20787949cfb22ee312acdb863e
#: ../../../../1.9/docs/releases/1.6.1.txt:23
msgid ""
"Fixed a regression that prevented editable ``GenericRelation`` subclasses "
"from working in ``ModelForms`` (#21428)."
msgstr ""

# b41c7d2ccbbe42f1a75427f6088ee5a8
#: ../../../../1.9/docs/releases/1.6.1.txt:25
msgid ""
"Added missing ``to_python`` method for ``ModelMultipleChoiceField`` which is"
" required in Django 1.6 to properly detect changes from initial values "
"(#21568)."
msgstr ""

# c3278bc3a3dc452eb81f45535882c221
#: ../../../../1.9/docs/releases/1.6.1.txt:28
msgid ""
"Fixed ``django.contrib.humanize`` translations where the unicode sequence "
"for the non-breaking space was returned verbatim (#21415)."
msgstr ""

# e97fd4be8e5944738b0404bcc78ea733
#: ../../../../1.9/docs/releases/1.6.1.txt:30
msgid ""
"Fixed :djadmin:`loaddata` error when fixture file name contained any dots "
"not related to file extensions (#21457) or when fixture path was relative "
"but located in a subdirectory (#21551)."
msgstr ""

# b787585bf33f48a889753713ac9eb19d
#: ../../../../1.9/docs/releases/1.6.1.txt:33
msgid ""
"Fixed display of inline instances in formsets when parent has 0 for primary "
"key (#21472)."
msgstr ""

# 9fc206bde8504009bcc3b16bf1773b0f
#: ../../../../1.9/docs/releases/1.6.1.txt:35
msgid ""
"Fixed a regression where custom querysets for foreign keys were overwritten "
"if ``ModelAdmin`` had ordering set (#21405)."
msgstr ""

# f73de7e32c114180affd8ae0b6613e44
#: ../../../../1.9/docs/releases/1.6.1.txt:37
msgid ""
"Removed mention of a feature in the ``--locale``/``-l`` option of the "
"``makemessages`` and ``compilemessages`` commands that never worked as "
"promised: Support of multiple locale names separated by commas. It's still "
"possible to specify multiple locales in one run by using the option multiple"
" times (#21488, #17181)."
msgstr ""

# 1c48fbbbf9a142b98e1b4d51b4bc87ef
#: ../../../../1.9/docs/releases/1.6.1.txt:42
msgid ""
"Fixed a regression that unnecessarily triggered settings configuration when "
"importing ``get_wsgi_application`` (#21486)."
msgstr ""

# 6c43ab3a31b84efe8589646dcf909be1
#: ../../../../1.9/docs/releases/1.6.1.txt:44
msgid ""
"Fixed test client ``logout()`` method when using the cookie-based session "
"backend (#21448)."
msgstr ""

# 7c48216801d74bb5bdde1259b4d3f996
#: ../../../../1.9/docs/releases/1.6.1.txt:46
msgid ""
"Fixed a crash when a ``GeometryField`` uses a non-geometric widget (#21496)."
msgstr ""

# 6f7fdb9b83de4f25b3120f587282364a
#: ../../../../1.9/docs/releases/1.6.1.txt:47
msgid ""
"Fixed password hash upgrade when changing the iteration count (#21535)."
msgstr ""

# 806ffc64ca334fe4952f061ac5b8f949
#: ../../../../1.9/docs/releases/1.6.1.txt:48
msgid ""
"Fixed a bug in the debug view when the URLconf only contains one element "
"(#21530)."
msgstr ""

# 95e3996515be4785b006d14ea917222d
#: ../../../../1.9/docs/releases/1.6.1.txt:50
msgid ""
"Re-added missing search result count and reset link in changelist admin view"
" (#21510)."
msgstr ""

# f303535be1274b0a9a65201e9822041d
#: ../../../../1.9/docs/releases/1.6.1.txt:52
msgid ""
"The current language is no longer saved to the session by "
"``LocaleMiddleware`` on every response, but rather only after a logout "
"(#21473)."
msgstr ""

# f74bb6ee3acb41e495a0a57947b2a38b
#: ../../../../1.9/docs/releases/1.6.1.txt:54
msgid ""
"Fixed a crash when executing ``runserver`` on non-English systems and when "
"the formatted date in its output contained non-ASCII characters (#21358)."
msgstr ""

# b13a9ccfe30b4086877fcc99ebdb2061
#: ../../../../1.9/docs/releases/1.6.1.txt:56
msgid ""
"Fixed a crash in the debug view after an exception occurred on Python ≥ 3.3 "
"(#21443)."
msgstr ""

# 00ac351e182b4299a26fa2ff0c6eddae
#: ../../../../1.9/docs/releases/1.6.1.txt:58
msgid ""
"Fixed a crash in :class:`~django.db.models.ImageField` on some platforms "
"(Homebrew and RHEL6 reported) (#21355)."
msgstr ""

# ad56f0a82de94510a1566063d7f742d2
#: ../../../../1.9/docs/releases/1.6.1.txt:60
msgid ""
"Fixed a regression when using generic relations in "
"``ModelAdmin.list_filter`` (#21431)."
msgstr ""

# 7f6208ff26754c619915afe7d9bc12b3
#: ../../../../1.9/docs/releases/1.6.10.txt:3
msgid "Django 1.6.10 release notes"
msgstr ""

# 20b2102540b0416a971ebe07525a2f73
#: ../../../../1.9/docs/releases/1.6.10.txt:7
msgid "Django 1.6.10 fixes several security issues in 1.6.9."
msgstr ""

# 1ffb49164f64437cba65bea3d51cdb40
# f20df736241f4594a57b8008cc3567f3
#: ../../../../1.9/docs/releases/1.6.10.txt:63
#: ../../../../1.9/docs/releases/1.7.3.txt:63
msgid "Database denial-of-service with ``ModelMultipleChoiceField``"
msgstr ""

# 9ca6aabebde04f758721d0a05fe747c0
# 17e920d4a0d74a72b1c9c7e46d630c3d
#: ../../../../1.9/docs/releases/1.6.10.txt:65
#: ../../../../1.9/docs/releases/1.7.3.txt:65
msgid ""
"Given a form that uses ``ModelMultipleChoiceField`` and "
"``show_hidden_initial=True`` (not a documented API), it was possible for a "
"user to cause an unreasonable number of SQL queries by submitting duplicate "
"values for the field's data. The validation logic in "
"``ModelMultipleChoiceField`` now deduplicates submitted values to address "
"this issue."
msgstr ""

# b58bee60eaf2484488c10002a20ffece
#: ../../../../1.9/docs/releases/1.6.11.txt:3
msgid "Django 1.6.11 release notes"
msgstr ""

# 0d91c7f4aa8e4edea450bbdb081c5411
#: ../../../../1.9/docs/releases/1.6.11.txt:7
msgid "Django 1.6.11 fixes two security issues in 1.6.10."
msgstr ""

# 76b9b6802aa245a890fe49f075f0c42b
# 931aae79f4db4e32a686a3c16fbdb169
#: ../../../../1.9/docs/releases/1.6.11.txt:10
#: ../../../../1.9/docs/releases/1.7.7.txt:10
msgid "Denial-of-service possibility with ``strip_tags()``"
msgstr ""

# 668f63489acd419a87eacd1c3f4d181a
# 1bab5bb2c2964f66916ca024a5032fb2
#: ../../../../1.9/docs/releases/1.6.11.txt:12
#: ../../../../1.9/docs/releases/1.7.7.txt:12
msgid ""
"Last year :func:`~django.utils.html.strip_tags`  was changed to work "
"iteratively. The problem is that the size of the input it's processing can "
"increase on each iteration which results in an infinite loop in "
"``strip_tags()``. This issue only affects versions of Python that haven't "
"received  `a bugfix in HTMLParser <https://bugs.python.org/issue20288>`_; "
"namely Python < 2.7.7 and 3.3.5. Some operating system vendors have also "
"backported the fix for the Python bug into their packages of earlier "
"versions."
msgstr ""

# d8180183e4774ffe8c111ea4858d5486
# c10aa9fd1f774f739567f78e3cbb76ba
#: ../../../../1.9/docs/releases/1.6.11.txt:20
#: ../../../../1.9/docs/releases/1.7.7.txt:20
msgid ""
"To remedy this issue, ``strip_tags()`` will now return the original input if"
" it detects the length of the string it's processing increases. Remember "
"that absolutely NO guarantee is provided about the results of "
"``strip_tags()`` being HTML safe. So NEVER mark safe the result of a "
"``strip_tags()`` call without escaping it first, for example with "
":func:`~django.utils.html.escape`."
msgstr ""

# 33ffe8f82d43432d8577ae6710e3faae
#: ../../../../1.9/docs/releases/1.6.2.txt:3
msgid "Django 1.6.2 release notes"
msgstr ""

# 866f413a22f04439a6cc1eb82e2d648d
#: ../../../../1.9/docs/releases/1.6.2.txt:5
msgid "*February 6, 2014*"
msgstr ""

# 3675c405ec5b430aaf6aec1e22831f31
#: ../../../../1.9/docs/releases/1.6.2.txt:7
msgid ""
"This is Django 1.6.2, a bugfix release for Django 1.6. Django 1.6.2 fixes "
"several bugs in 1.6.1:"
msgstr ""

# 6805ce46eba84223b21391976ff0dd09
#: ../../../../1.9/docs/releases/1.6.2.txt:10
msgid ""
"Prevented the base geometry object of a prepared geometry to be garbage "
"collected, which could lead to crash Django (:ticket:`21662`)."
msgstr ""

# 09f06738ba0f4f22bb00d96b9b60f8e9
#: ../../../../1.9/docs/releases/1.6.2.txt:14
msgid ""
"Fixed a crash when executing the :djadmin:`changepassword` command when the "
"user object representation contained non-ASCII characters (:ticket:`21627`)."
msgstr ""

# 45a0fccb7592485e8b301eb398e6525c
#: ../../../../1.9/docs/releases/1.6.2.txt:18
msgid ""
"The :djadmin:`collectstatic` command will raise an error rather than default"
" to using the current working directory if :setting:`STATIC_ROOT` is not "
"set. Combined with the ``--clear`` option, the previous behavior could wipe "
"anything below the current working directory (:ticket:`21581`)."
msgstr ""

# f13ae72381c84727bf573af76535ef75
#: ../../../../1.9/docs/releases/1.6.2.txt:24
msgid "Fixed mail encoding on Python 3.3.3+ (:ticket:`21093`)."
msgstr ""

# e09eb94cc5f348ea8cfd21a557e6a2a4
#: ../../../../1.9/docs/releases/1.6.2.txt:27
msgid ""
"Fixed an issue where when ``settings.DATABASES['default']['AUTOCOMMIT'] = "
"False``, the connection wasn't in autocommit mode but Django pretended it "
"was."
msgstr ""

# 5ccb89f284ac4697872e32f076028da9
#: ../../../../1.9/docs/releases/1.6.2.txt:31
msgid ""
"Fixed a regression in multiple-table inheritance ``exclude()`` queries "
"(:ticket:`21787`)."
msgstr ""

# 06644dd94d864fe7aed7cec9ae8dbd5f
#: ../../../../1.9/docs/releases/1.6.2.txt:34
msgid ""
"Added missing items to ``django.utils.timezone.__all__`` (:ticket:`21880`)."
msgstr ""

# 3d52abb8ab4d4772b4e395a80915ce02
#: ../../../../1.9/docs/releases/1.6.2.txt:37
msgid ""
"Fixed a field misalignment issue with ``select_related()`` and model "
"inheritance (:ticket:`21413`)."
msgstr ""

# f139d7d9a84842718f50b71befb06e5d
#: ../../../../1.9/docs/releases/1.6.2.txt:41
msgid "Fixed join promotion for negated ``AND`` conditions (:ticket:`21748`)."
msgstr ""

# cd981b2d955e4e7bb9a3a3a1f56942f6
#: ../../../../1.9/docs/releases/1.6.2.txt:44
msgid ""
"Oracle database introspection now works with boolean and float fields "
"(:ticket:`19884`)."
msgstr ""

# 4241728f323c4e21b3db7d27b2500a4e
#: ../../../../1.9/docs/releases/1.6.2.txt:47
msgid ""
"Fixed an issue where lazy objects weren't actually marked as safe when "
"passed through :func:`~django.utils.safestring.mark_safe` and could end up "
"being double-escaped (:ticket:`21882`)."
msgstr ""

# f0750103b36d483c9c29174c742d8e4b
#: ../../../../1.9/docs/releases/1.6.2.txt:51
msgid ""
"Additionally, Django's vendored version of six, :mod:`django.utils.six` has "
"been upgraded to the latest release (1.5.2)."
msgstr ""

# c4d8c6f38be648d997dcb60ebc274cb0
#: ../../../../1.9/docs/releases/1.6.3.txt:3
msgid "Django 1.6.3 release notes"
msgstr ""

# 3c469e0191174d709a513da604c5a4d7
#: ../../../../1.9/docs/releases/1.6.3.txt:7
msgid ""
"Django 1.6.3 fixes several bugs in 1.6.2, including three security issues, "
"and makes one backwards-incompatible change:"
msgstr ""

# 8e2553db6d1b4ca5a1ce8374a60e22e9
# 0e6e92941a9a4bb985569c1e451b7b65
#: ../../../../1.9/docs/releases/1.6.3.txt:112
#: ../../../../1.9/docs/releases/1.7.txt:1257
msgid "``select_for_update()`` requires a transaction"
msgstr "``select_for_update()`` exige une transaction"

# de6bef0770c74b5ab8ce26cd5a78d51a
# aba39a3436f249c4a3a4b71402f57031
#: ../../../../1.9/docs/releases/1.6.3.txt:114
#: ../../../../1.9/docs/releases/1.7.txt:1259
msgid ""
"Historically, queries that use "
":meth:`~django.db.models.query.QuerySet.select_for_update()` could be "
"executed in autocommit mode, outside of a transaction. Before Django 1.6, "
"Django's automatic transactions mode allowed this to be used to lock records"
" until the next write operation. Django 1.6 introduced database-level "
"autocommit; since then, execution in such a context voids the effect of "
"``select_for_update()``. It is, therefore, assumed now to be an error and "
"raises an exception."
msgstr "Historiquement, les requêtes utilisant :meth:`~django.db.models.query.QuerySet.select_for_update()` pouvaient être exécutées en mode autocommit, en dehors d'une transaction. Avant Django 1.6, le mode de transaction automatique de Django permettait cela afin de verrouiller les éléments jusqu'à l'opération d'écriture suivante. Django 1.6 introduit l'autocommit au niveau de la base de données; depuis lors, l'exécution dans un tel contexte annule l'effet de ``select_for_update()``. Il est donc supposé maintenant être une erreur et lève une exception."

# de88ba66a68b4912869e60b023ca5919
#: ../../../../1.9/docs/releases/1.6.3.txt:123
msgid ""
"This change was made because such errors can be caused by including an app "
"which expects global transactions (e.g. :setting:`ATOMIC_REQUESTS <DATABASE-"
"ATOMIC_REQUESTS>` set to ``True``), or Django's old autocommit behavior, in "
"a project which runs without them; and further, such errors may manifest as "
"data-corruption bugs."
msgstr ""

# 1ee5cc04c6fc40a8b41ae3bf9cd44ef7
# 0c8e5ab4d34f40df9a37f9cc74d7c182
#: ../../../../1.9/docs/releases/1.6.3.txt:129
#: ../../../../1.9/docs/releases/1.7.txt:1275
msgid ""
"This change may cause test failures if you use ``select_for_update()`` in a "
"test class which is a subclass of :class:`~django.test.TransactionTestCase` "
"rather than :class:`~django.test.TestCase`."
msgstr "Ce changement peut entraîner des échecs de test si vous utilisez ``select_for_update()`` dans une classe de test qui est une sous-classe de :class:`~django.test.TransactionTestCase` au lieu de :class:`~django.test.TestCase`."

# 8204c703b08b48b3baa540f3ee77f81e
#: ../../../../1.9/docs/releases/1.6.3.txt:137
msgid ""
"Content retrieved from the GeoIP library is now properly decoded from its "
"default ``iso-8859-1`` encoding (:ticket:`21996`)."
msgstr ""

# 4df2d70c59dd4119abce5b93995a2f27
#: ../../../../1.9/docs/releases/1.6.3.txt:141
msgid ""
"Fixed ``AttributeError`` when using "
":meth:`~django.db.models.query.QuerySet.bulk_create` with ``ForeignObject`` "
"(:ticket:`21566`)."
msgstr ""

# e9cf8a8e73634a35bb6c89eef026b072
#: ../../../../1.9/docs/releases/1.6.3.txt:145
msgid ""
"Fixed crash of ``QuerySet``\\s that use ``F() + timedelta()`` when their "
"query was compiled more once (:ticket:`21643`)."
msgstr ""

# 5ec00af7c2184088ab55b6a7757b4a76
#: ../../../../1.9/docs/releases/1.6.3.txt:149
msgid ""
"Prevented custom ``widget`` class attribute of "
":class:`~django.forms.IntegerField` subclasses from being overwritten by the"
" code in their ``__init__`` method (:ticket:`22245`)."
msgstr ""

# 90a430868c234ae691604ad340b9e108
# 1436b555eb24477dbdabf8ce48f69e54
#: ../../../../1.9/docs/releases/1.6.3.txt:154
#: ../../../../1.9/docs/releases/1.7.txt:923
msgid ""
"Improved :func:`~django.utils.html.strip_tags` accuracy (but it still cannot"
" guarantee an HTML-safe result, as stated in the documentation)."
msgstr "Amélioration de l'exactitude de :func:`~django.utils.html.strip_tags` (mais elle ne peut toujours pas garantir un résultat HTML sécurisé, comme indiqué dans la documentation)."

# bd1cef31b9e64dad99c678a976822a7c
#: ../../../../1.9/docs/releases/1.6.3.txt:157
msgid ""
"Fixed a regression in the :mod:`django.contrib.gis` SQL compiler for non-"
"concrete fields (:ticket:`22250`)."
msgstr ""

# ee2d71644c7940c69c96d47da5f8acbb
#: ../../../../1.9/docs/releases/1.6.3.txt:160
msgid ""
"Fixed :attr:`ModelAdmin.preserve_filters "
"<django.contrib.admin.ModelAdmin.preserve_filters>` when running a site with"
" a URL prefix (:ticket:`21795`)."
msgstr ""

# 4b0cf536529b43fda1bf8e1218e6ff3b
#: ../../../../1.9/docs/releases/1.6.3.txt:164
msgid ""
"Fixed a crash in the ``find_command`` management utility when the ``PATH`` "
"environment variable wasn't set (:ticket:`22256`)."
msgstr ""

# 1075584887e4402eaa5b7f8958d94c16
#: ../../../../1.9/docs/releases/1.6.3.txt:168
msgid "Fixed :djadmin:`changepassword` on Windows (:ticket:`22364`)."
msgstr ""

# 6b2785e1f1b64b43bef8ac6ff1b36ce8
#: ../../../../1.9/docs/releases/1.6.3.txt:171
msgid "Avoided shadowing deadlock exceptions on MySQL (:ticket:`22291`)."
msgstr ""

# 63fb34040a1f40258848f5487b35ebd5
#: ../../../../1.9/docs/releases/1.6.3.txt:174
msgid "Wrapped database exceptions in ``_set_autocommit`` (:ticket:`22321`)."
msgstr ""

# a277eb2e94104aa08a6800b24ddff527
#: ../../../../1.9/docs/releases/1.6.3.txt:177
msgid ""
"Fixed atomicity when closing a database connection or when the database "
"server disconnects (:ticket:`21239` and :ticket:`21202`)"
msgstr ""

# 144dd7dc84ae403994fabb88fde52c6d
#: ../../../../1.9/docs/releases/1.6.3.txt:180
msgid ""
"Fixed regression in ``prefetch_related`` that caused the related objects "
"query to include an unnecessary join (:ticket:`21760`)."
msgstr ""

# 71ac3a49b4a641cfa3ed3aed4dda9d25
#: ../../../../1.9/docs/releases/1.6.3.txt:184
msgid ""
"Additionally, Django's vendored version of six, :mod:`django.utils.six` has "
"been upgraded to the latest release (1.6.1)."
msgstr ""

# ae744e6cadb94e7fb5daed1c76611d7f
#: ../../../../1.9/docs/releases/1.6.4.txt:3
msgid "Django 1.6.4 release notes"
msgstr ""

# a1c5fa2ef8a04b7e89bb82212726fc25
#: ../../../../1.9/docs/releases/1.6.4.txt:7
msgid "Django 1.6.4 fixes several bugs in 1.6.3."
msgstr ""

# 3815f022905b499b8698838cde963f3b
#: ../../../../1.9/docs/releases/1.6.4.txt:12
msgid ""
"Added backwards compatibility support for the :mod:`django.contrib.messages`"
" cookie format of Django 1.4 and earlier to facilitate upgrading to 1.6 from"
" 1.4 (:ticket:`22426`)."
msgstr ""

# bc83595e70c448bcbc42b68826fd93c4
#: ../../../../1.9/docs/releases/1.6.4.txt:20
msgid ""
"Fixed the ``object_id`` of the ``LogEntry`` that's created after a user "
"password change in the admin (:ticket:`22515`)."
msgstr ""

# 599d187998784a7aba1488baab39ed26
#: ../../../../1.9/docs/releases/1.6.5.txt:3
msgid "Django 1.6.5 release notes"
msgstr ""

# f2d0eb2b8ef34c9db2bea93b170b3d93
#: ../../../../1.9/docs/releases/1.6.5.txt:7
msgid "Django 1.6.5 fixes two security issues and several bugs in 1.6.4."
msgstr ""

# 01a1d65c757b4890866ee7a3c5203aeb
#: ../../../../1.9/docs/releases/1.6.5.txt:10
msgid ""
"Issue: Caches may incorrectly be allowed to store and serve private data"
msgstr ""

# 2f5569a37ca3493eb5e5b59d65f9c453
#: ../../../../1.9/docs/releases/1.6.5.txt:32
msgid "Issue: Malformed redirect URLs from user input not correctly validated"
msgstr ""

# 90eb1a140c434bc0bdb057b1586c6413
#: ../../../../1.9/docs/releases/1.6.5.txt:52
msgid ""
"Made the ``year_lookup_bounds_for_datetime_field`` Oracle backend method "
"Python 3 compatible (:ticket:`22551`)."
msgstr ""

# 37c9b24de62a46aaa13d1ce8d1b6178f
#: ../../../../1.9/docs/releases/1.6.5.txt:55
msgid ""
"Fixed ``pgettext_lazy`` crash when receiving bytestring content on Python 2 "
"(:ticket:`22565`)."
msgstr ""

# 4a80cf247f774999aa4760efa7865f8c
#: ../../../../1.9/docs/releases/1.6.5.txt:58
msgid ""
"Fixed the SQL generated when filtering by a negated ``Q`` object that "
"contains a ``F`` object. (:ticket:`22429`)."
msgstr ""

# 2a7961ce6f874d9ab8bcbe1efd6b60eb
#: ../../../../1.9/docs/releases/1.6.5.txt:61
msgid ""
"Avoided overwriting data fetched by ``select_related()`` in certain cases "
"which could cause minor performance regressions (:ticket:`22508`)."
msgstr ""

# 3ada52d03a03498d9307b3460672ff97
#: ../../../../1.9/docs/releases/1.6.6.txt:3
msgid "Django 1.6.6 release notes"
msgstr ""

# 8dbc68016b524b8cba86af465bf385a7
#: ../../../../1.9/docs/releases/1.6.6.txt:7
msgid "Django 1.6.6 fixes several security issues and bugs in 1.6.5."
msgstr ""

# 103b48a3c5564adeac9b85562864a399
#: ../../../../1.9/docs/releases/1.6.6.txt:54
msgid ""
"In older versions of Django it was possible to reveal any field's data by "
"modifying the \"popup\" and \"to_field\" parameters of the query string on "
"an admin change form page. For example, requesting a URL like "
"``/admin/auth/user/?_popup=1&t=password`` and viewing the page's HTML "
"allowed viewing the password hash of each user. While the admin requires "
"users to have permissions to view the change form pages in the first place, "
"this could leak data if you rely on users having access to view only certain"
" fields on a model."
msgstr ""

# b5a63a2706a84a0292e7d03d8488886c
#: ../../../../1.9/docs/releases/1.6.6.txt:69
msgid ""
"Corrected email and URL validation to reject a trailing dash "
"(:ticket:`22579`)."
msgstr ""

# 3cec2759cdd349389192bbd72d655fe6
#: ../../../../1.9/docs/releases/1.6.6.txt:72
msgid "Prevented indexes on PostgreSQL virtual fields (:ticket:`22514`)."
msgstr ""

# 8e9edad0dc03416b8bb255901771c304
#: ../../../../1.9/docs/releases/1.6.6.txt:74
msgid ""
"Prevented edge case where values of FK fields could be initialized with a "
"wrong value when an inline model formset is created for a relationship "
"defined to point to a field other than the PK (:ticket:`13794`)."
msgstr ""

# b26d78661ec04c8c8e933dbc79d4b5ef
#: ../../../../1.9/docs/releases/1.6.6.txt:78
msgid ""
"Restored ``pre_delete``  signals for ``GenericRelation`` cascade deletion "
"(:ticket:`22998`)."
msgstr ""

# a0192a21757a475d8ef84fd94ae28b96
#: ../../../../1.9/docs/releases/1.6.6.txt:81
msgid ""
"Fixed transaction handling when specifying non-default database in "
"``createcachetable`` and ``flush`` (:ticket:`23089`)."
msgstr ""

# 8aca4f76ff724e5484d748e2410ced3d
#: ../../../../1.9/docs/releases/1.6.6.txt:84
msgid ""
"Fixed the \"ORA-01843: not a valid month\" errors when using Unicode with "
"older versions of Oracle server (:ticket:`20292`)."
msgstr ""

# c967fb38263d459495bf637749764ef3
#: ../../../../1.9/docs/releases/1.6.6.txt:87
msgid ""
"Restored bug fix for sending unicode email with Python 2.6.5 and below "
"(:ticket:`19107`)."
msgstr ""

# abc956bd86a04641add34133277bd1d8
#: ../../../../1.9/docs/releases/1.6.6.txt:90
msgid ""
"Prevented ``UnicodeDecodeError`` in ``runserver`` with non-UTF-8 and non-"
"English locale (:ticket:`23265`)."
msgstr ""

# 0916247995554f2482cbae36809f619b
#: ../../../../1.9/docs/releases/1.6.6.txt:93
msgid ""
"Fixed JavaScript errors while editing multi-geometry objects in the "
"OpenLayers widget (:ticket:`23137`, :ticket:`23293`)."
msgstr ""

# 5ecd58bd42be413da93d5a914509c935
#: ../../../../1.9/docs/releases/1.6.6.txt:96
msgid ""
"Prevented a crash on Python 3 with query strings containing unencoded non-"
"ASCII characters (:ticket:`22996`)."
msgstr ""

# e51a6be16f2249a2b5b9f23a2396750c
#: ../../../../1.9/docs/releases/1.6.7.txt:3
msgid "Django 1.6.7 release notes"
msgstr ""

# 4795f9f79c2d4584a1a4f6a8d2eef408
#: ../../../../1.9/docs/releases/1.6.7.txt:7
msgid ""
"Django 1.6.7 fixes several bugs in 1.6.6, including a regression related to "
"a security fix in that release."
msgstr ""

# fb39806e99e746898500393abfe3c35a
#: ../../../../1.9/docs/releases/1.6.7.txt:13
msgid ""
"Allowed inherited and m2m fields to be referenced in the admin "
"(:ticket:`23329`)."
msgstr ""

# d8a658ff62a342af8f3b64249903d21f
#: ../../../../1.9/docs/releases/1.6.7.txt:15
msgid ""
"Fixed a crash when using ``QuerySet.defer()`` with ``select_related()`` "
"(:ticket:`23370`)."
msgstr ""

# 97f101fae3af4f87bc8507b4fded55b2
#: ../../../../1.9/docs/releases/1.6.8.txt:3
msgid "Django 1.6.8 release notes"
msgstr ""

# a440bb740fe147f8a4c1733afca4cdb7
#: ../../../../1.9/docs/releases/1.6.8.txt:7
msgid "Django 1.6.8 fixes a couple regressions in the 1.6.6 security release."
msgstr ""

# 21e24301f57043329e5f507f56a00d4e
#: ../../../../1.9/docs/releases/1.6.9.txt:3
msgid "Django 1.6.9 release notes"
msgstr ""

# c57f5a159bab475f84862bfba49fadc9
#: ../../../../1.9/docs/releases/1.6.9.txt:7
msgid "Django 1.6.9 fixes a regression in the 1.6.6 security release."
msgstr ""

# ff2592a012334d6bb09eaca54b349627
#: ../../../../1.9/docs/releases/1.7.txt:3
msgid "Django 1.7 release notes"
msgstr "Notes de publication de Django 1.7"

# c0fb19c2bb1a476d82c2cefcbd24bd09
#: ../../../../1.9/docs/releases/1.7.txt:7
msgid "Welcome to Django 1.7!"
msgstr "Bienvenue dans Django 1.7 !"

# 888151e3b2684a249f1c0bd9633259b2
#: ../../../../1.9/docs/releases/1.7.txt:9
msgid ""
"These release notes cover the `new features`_, as well as some `backwards "
"incompatible changes`_ you'll want to be aware of when upgrading from Django"
" 1.6 or older versions. We've `begun the deprecation process for some "
"features`_, and some features have reached the end of their deprecation "
"process and `have been removed`_."
msgstr ""

# f303b8734d484ad2bba0d2272daf1d1e
#: ../../../../1.9/docs/releases/1.7.txt:23
msgid ""
"Django 1.7 requires Python 2.7, 3.2, 3.3, or 3.4. We **highly recommend** "
"and only officially support the latest release of each series."
msgstr ""

# d9fcd6117cd041908c24048cd0a99035
#: ../../../../1.9/docs/releases/1.7.txt:26
msgid ""
"The Django 1.6 series is the last to support Python 2.6. Django 1.7 is the "
"first release to support Python 3.4."
msgstr ""

# 13145953af9347de9684add88e0c8337
#: ../../../../1.9/docs/releases/1.7.txt:29
msgid ""
"This change should affect only a small number of Django users, as most "
"operating-system vendors today are shipping Python 2.7 or newer as their "
"default version. If you're still using Python 2.6, however, you'll need to "
"stick to Django 1.6 until you can upgrade your Python version. Per :doc:`our"
" support policy </internals/release-process>`, Django 1.6 will continue to "
"receive security support until the release of Django 1.8."
msgstr "Ce changement devrait affecter seulement un petit nombre d'utilisateurs de Django, puisque, aujourd'hui, la plupart des fournisseurs de système d'exploitation livrent Python 2.7 ou plus récent comme version par défaut. Cependant, si vous utilisez encore Python 2.6, vous aurez besoin de rester à Django 1.6 jusqu'à ce que vous puissiez mettre à jour votre version de Python. Selon :doc:`notre politique de support </internals/release-process>`, Django 1.6 continuera d'être supporté au niveau sécurité jusqu'à la sortie de Django 1.8."

# ff7aebe0f4db40e0b6591a966611b08f
#: ../../../../1.9/docs/releases/1.7.txt:37
msgid "What's new in Django 1.7"
msgstr "Quoi de neuf dans Django 1.7"

# b5fd5023e2704b7ca06699b70604452f
#: ../../../../1.9/docs/releases/1.7.txt:40
msgid "Schema migrations"
msgstr "Migrations de schéma"

# d07d1aa9820848f8875414ce643f5297
#: ../../../../1.9/docs/releases/1.7.txt:42
msgid ""
"Django now has built-in support for schema migrations. It allows models to "
"be updated, changed, and deleted by creating migration files that represent "
"the model changes and which can be run on any development, staging or "
"production database."
msgstr "Django a maintenant un support intégré des migrations de schéma. Il permet aux modèles d'être mis à jour, modifiés et supprimés par la création de fichiers de migration qui représentent les changements du modèle et qui peuvent être exécutés sur toute base de données de développement, de pré-production ou de production."

# 6fcb15af2c9845f59fac3f27ff2124f8
#: ../../../../1.9/docs/releases/1.7.txt:47
msgid ""
"Migrations are covered in :doc:`their own "
"documentation</topics/migrations>`, but a few of the key features are:"
msgstr "Les migrations sont couvertes dans :doc:`leur propre documentation </topics/migrations>`, mais quelques-unes des fonctionalités clés sont :"

# 755f23a9ab914e78971b4b7a98d6f72f
#: ../../../../1.9/docs/releases/1.7.txt:50
msgid ""
"``syncdb`` has been deprecated and replaced by ``migrate``. Don't worry - "
"calls to ``syncdb`` will still work as before."
msgstr "``syncdb`` a été dépréciée et remplacée par ``migrate``. Ne vous inquiétez pas -- les appels à ``syncdb`` fonctionneront toujours comme avant."

# 05ced2b2388042d5b5f29ae3137bed06
#: ../../../../1.9/docs/releases/1.7.txt:53
msgid ""
"A new ``makemigrations`` command provides an easy way to autodetect changes "
"to your models and make migrations for them."
msgstr "Une nouvelle commande ``makemigrations`` fournit un moyen facile de détecter automatiquement les modifications de vos modèles et d'effectuer des migrations pour ceux-ci."

# acc983e659b0423baa74e8cae29bd2bb
#: ../../../../1.9/docs/releases/1.7.txt:56
msgid ""
"``django.db.models.signals.pre_syncdb`` and "
"``django.db.models.signals.post_syncdb`` have been deprecated, to be "
"replaced by :data:`~django.db.models.signals.pre_migrate` and "
":data:`~django.db.models.signals.post_migrate` respectively. These new "
"signals have slightly different arguments. Check the documentation for "
"details."
msgstr ""

# a011f9cb32684b51b8604017ddab9e59
#: ../../../../1.9/docs/releases/1.7.txt:63
msgid ""
"The ``allow_syncdb`` method on database routers is now called "
"``allow_migrate``, but still performs the same function. Routers with "
"``allow_syncdb`` methods will still work, but that method name is deprecated"
" and you should change it as soon as possible (nothing more than renaming is"
" required)."
msgstr "La méthode ``allow_syncdb`` des routeurs de base de données est désormais appelé ``allow_migrate``, mais effectue toujours la même fonction. Les routeurs avec des méthodes ``allow_syncdb`` fonctionneront toujours, mais ce nom de méthode est obsolète et vous devriez en changer dès que possible (rien de plus que le renommage est nécessaire)."

# ede95899e3244a43aca7644e3545c2f7
#: ../../../../1.9/docs/releases/1.7.txt:68
msgid ""
"``initial_data`` fixtures are no longer loaded for apps with migrations; if "
"you want to load initial data for an app, we suggest you create a migration "
"for your application and define a "
":class:`~django.db.migrations.operations.RunPython` or "
":class:`~django.db.migrations.operations.RunSQL` operation in the "
"``operations`` section of the migration."
msgstr ""

# 64b0318ed02e462bba6d5ef1188dee2d
#: ../../../../1.9/docs/releases/1.7.txt:73
msgid ""
"Test rollback behavior is different for apps with migrations; in particular,"
" Django will no longer emulate rollbacks on non-transactional databases or "
"inside ``TransactionTestCase`` :ref:`unless specifically requested <test-"
"case-serialized-rollback>`."
msgstr "Le comportement de restauration du test est différent pour les applications avec des migrations; en particulier, Django n'émulera plus les restaurations pour les bases de données non transactionnelles ou à l'intérieur de ``TransactionTestCase`` :ref:`sauf demande expresse <test-case-serialized-rollback>`."

# e5b718c1ccc64ab699b6dbe559141254
#: ../../../../1.9/docs/releases/1.7.txt:78
msgid ""
"It is not advised to have apps without migrations depend on (have a "
":ref:`ForeignKey <ref-foreignkey>` or :ref:`ManyToManyField <ref-"
"manytomany>` to) apps with migrations."
msgstr ""

# b518e47db8b8484f811091dcfe0d4b1e
#: ../../../../1.9/docs/releases/1.7.txt:82
msgid ""
"If you are upgrading from South, see our :ref:`upgrading-from-south` "
"documentation, and third-party app authors should read the `South 1.0 "
"release notes <http://south.readthedocs.org/en/latest/releasenotes/1.0.html"
"#library-migration-path>`_ for details on how to support South and Django "
"migrations simultaneously."
msgstr "Si vous mettez à jour depuis South, voir notre documentation de :ref:`mise à jour de South`, et les auteurs d'applications tierces doivent lire les `notes de publication de South 1.0 <http://south.readthedocs.org/en/latest/releasenotes/1.0.html#library-migration-path>`_ pour plus de détails sur la façon de supporter les migrations South et Django simultanément."

# 5ef52a32201a46658883315be2526510
#: ../../../../1.9/docs/releases/1.7.txt:90
msgid "App-loading refactor"
msgstr "Réusinage du chargement des applications"

# 3a7edf8277af489fb6eaaabe9fba4227
#: ../../../../1.9/docs/releases/1.7.txt:92
msgid ""
"Historically, Django applications were tightly linked to models. A singleton"
" known as the \"app cache\" dealt with both installed applications and "
"models. The models module was used as an identifier for applications in many"
" APIs."
msgstr "Historiquement, les applications Django étaient étroitement liés aux modèles. Un singleton connu comme le \"app cache\" gérait à la fois les applications et les modèles installés. Le module de modèles était utilisé comme un identificateur pour les applications dans de nombreuses API."

# 89d90a81783a47149e76f54d7dbc6c25
#: ../../../../1.9/docs/releases/1.7.txt:96
msgid ""
"As the concept of :doc:`Django applications </ref/applications>` matured, "
"this code showed some shortcomings. It has been refactored into an \"app "
"registry\" where models modules no longer have a central role and where it's"
" possible to attach configuration data to applications."
msgstr "Étant donné que le concept d':doc:`applications Django </ref/applications>` mûrit, ce code a montré certaines lacunes. Il a été remanié en un \"app registry\" où les modules de modèles n'ont plus un rôle central et où il est possible de joindre des données de configuration aux applications."

# 5267bf77635a48ae9169d780280c419f
#: ../../../../1.9/docs/releases/1.7.txt:101
msgid "Improvements thus far include:"
msgstr "Les améliorations comprennent à ce jour :"

# e2b159dbc6b2459aa8f1fb185d24be61
#: ../../../../1.9/docs/releases/1.7.txt:103
msgid ""
"Applications can run code at startup, before Django does anything else, with"
" the :meth:`~django.apps.AppConfig.ready` method of their configuration."
msgstr "Les applications peuvent exécuter du code au démarrage, avant que Django ne fasse quoi que ce soit d'autre, avec la méthode :meth:`~django.apps.AppConfig.ready` de leur configuration."

# 824b3bb1ecad43d2ba2fea1cbb138e59
#: ../../../../1.9/docs/releases/1.7.txt:106
msgid ""
"Application labels are assigned correctly to models even when they're "
"defined outside of ``models.py``. You don't have to set "
":attr:`~django.db.models.Options.app_label` explicitly any more."
msgstr "Les étiquettes d'application sont correctement affectées à des modèles, même quand ils sont définis en dehors de ``models.py``. Vous n'avez plus besoin de régler explicitement :attr:`~django.db.models.Options.app_label`."

# eb81f330ee0b4abaa46f81c27cc7e237
#: ../../../../1.9/docs/releases/1.7.txt:110
msgid ""
"It is possible to omit ``models.py`` entirely if an application doesn't have"
" any models."
msgstr "Il est possible d'omettre ``models.py`` entièrement si une application ne possède pas de modèles."

# 9d401f58f90449e99159d97ce3c32f53
#: ../../../../1.9/docs/releases/1.7.txt:113
msgid ""
"Applications can be relabeled with the :attr:`~django.apps.AppConfig.label` "
"attribute of application configurations, to work around label conflicts."
msgstr "Les applications peuvent être rebaptisées avec l'attribut :attr:`~django.apps.AppConfig.label` des configurations d'application, afin de contourner des conflits de nommage d'étiquettes."

# e7d85d3bbe7f40d782de33e5655dd188
#: ../../../../1.9/docs/releases/1.7.txt:116
msgid ""
"The name of applications can be customized in the admin with the "
":attr:`~django.apps.AppConfig.verbose_name` of application configurations."
msgstr "Le nom des applications peut être personnalisé dans l'interface d'administration avec l'attribut :attr:`~django.apps.AppConfig.verbose_name` des configurations d'application."

# 14ffe87254234f6e8aae36403719555d
#: ../../../../1.9/docs/releases/1.7.txt:119
msgid ""
"The admin automatically calls :func:`~django.contrib.admin.autodiscover()` "
"when Django starts. You can consequently remove this line from your URLconf."
msgstr "L'interface d'administration appelle automatiquement :func:`~django.contrib.admin.autodiscover()` au lancement de Django. Vous pouvez donc supprimer cette ligne de votre URLconf."

# c395e84a51a94d22a4c868dc90732d20
#: ../../../../1.9/docs/releases/1.7.txt:123
msgid ""
"Django imports all application configurations and models as soon as it "
"starts, through a deterministic and straightforward process. This should "
"make it easier to diagnose import issues such as import loops."
msgstr "Django importe toutes les configurations d'application et les modèles dès qu'il se lance, au travers d'un processus déterministe et simple. Cela devrait rendre plus facile de diagnostiquer des problèmes d'importation tels que des boucles d'importation."

# 55254af76a194a70ae293215758ff4fd
#: ../../../../1.9/docs/releases/1.7.txt:128
msgid "New method on Field subclasses"
msgstr "Nouvelle méthode sur les sous-classes de Field"

# 6e9b63c3afcd4ddc918873fb65f7844c
#: ../../../../1.9/docs/releases/1.7.txt:130
msgid ""
"To help power both schema migrations and to enable easier addition of "
"composite keys in future releases of Django, the "
":class:`~django.db.models.Field` API now has a new required method: "
"``deconstruct()``."
msgstr "Pour aider à motoriser à la fois les migrations de schéma et permettre l'ajout plus simple de clés composites dans les futures versions de Django, l'API de :class:`~django.db.models.Field` a maintenant une nouvelle méthode obligatoire : ``deconstruct()``."

# d5f98eadb38d4994baea5166aed6d4a8
#: ../../../../1.9/docs/releases/1.7.txt:135
msgid "This method takes no arguments, and returns a tuple of four items:"
msgstr "Cette méthode ne prend aucun argument, et retourne un tuple de quatre éléments :"

# 648722ec25bb4233972c12ed55ca7457
#: ../../../../1.9/docs/releases/1.7.txt:137
msgid ""
"``name``: The field's attribute name on its parent model, or None if it is "
"not part of a model"
msgstr "``name`` : Le nom d'attribut du champ sur son modèle parent, ou None s'il ne fait pas partie d'un modèle"

# 9cf124eb8b674d81867ab3ea96e30fad
#: ../../../../1.9/docs/releases/1.7.txt:138
msgid ""
"``path``: A dotted, Python path to the class of this field, including the "
"class name."
msgstr "``path`` : Un chemin Python à syntaxe pointée vers la classe de ce champ, y compris le nom de la classe."

# b2ccf69ca60345db9000029f7883d64f
#: ../../../../1.9/docs/releases/1.7.txt:139
msgid "``args``: Positional arguments, as a list"
msgstr "``args`` : arguments positionnels, en tant que liste"

# 6570a1368b41458db93474aab98543d1
#: ../../../../1.9/docs/releases/1.7.txt:140
msgid "``kwargs``: Keyword arguments, as a dict"
msgstr "``kwargs`` : arguments nommés, en tant que dict"

# 75d5410e47d94e64beab7e6005bb30cf
#: ../../../../1.9/docs/releases/1.7.txt:142
msgid ""
"These four values allow any field to be serialized into a file, as well as "
"allowing the field to be copied safely, both essential parts of these new "
"features."
msgstr "Ces quatre valeurs permettent à n'importe quel champ d'être sérialisé dans un fichier, ainsi que d'être copié en toute sécurité, deux parties essentielles de ces nouvelles fonctionnalités."

# 4b32826e7ac14dd2b003e73ebc5b5756
#: ../../../../1.9/docs/releases/1.7.txt:145
msgid ""
"This change should not affect you unless you write custom Field subclasses; "
"if you do, you may need to reimplement the ``deconstruct()`` method if your "
"subclass changes the method signature of ``__init__`` in any way. If your "
"field just inherits from a built-in Django field and doesn't override "
"``__init__``, no changes are necessary."
msgstr "Ce changement ne devrait pas vous affecter à moins que vous n'écriviez des sous-classes personnalisées de Field; si c'est le cas, vous devrez peut-être ré-implémenter la méthode ``deconstruct()`` si votre sous-classe modifie la signature de la méthode ``__init__`` d'une manière ou d'une autre. Si votre champ hérite juste d'un champ intégré dans Django et n'étend pas ``__init__``, aucune modification n'est nécessaire."

# 04059cd23bc94d92ae4dec87f4580e5e
#: ../../../../1.9/docs/releases/1.7.txt:151
msgid ""
"If you do need to override ``deconstruct()``, a good place to start is the "
"built-in Django fields (``django/db/models/fields/__init__.py``) as several "
"fields, including ``DecimalField`` and ``DateField``, override it and show "
"how to call the method on the superclass and simply add or remove extra "
"arguments."
msgstr "Si vous avez besoin d'étendre ``deconstruct()``, un bon endroit pour commencer sont les champs intégrés dans Django (``django/db/models/fields/__init__.py``) car plusieurs champs, y compris ``DecimalField`` et ``DateField``, l'étendent et montrent comment appeler la méthode sur la classe mère et simplement ajouter ou supprimer des arguments supplémentaires."

# afd749e651b34c718b7bf77235b6d7eb
#: ../../../../1.9/docs/releases/1.7.txt:156
msgid ""
"This also means that all arguments to fields must themselves be "
"serializable; to see what we consider serializable, and to find out how to "
"make your own classes serializable, read the :ref:`migration serialization "
"documentation <migration-serializing>`."
msgstr "Cela signifie également que tous les arguments de champs doivent eux-mêmes être sérialisable; pour voir ce que nous considérons comme sérialisable, et trouver comment rendre vos propres classes sérialisables, consultez la :ref:`documentation de sérialisation de la migration <migration-serializing>`."

# 98a8298f049840bf94901b6c12c850d8
#: ../../../../1.9/docs/releases/1.7.txt:162
msgid "Calling custom ``QuerySet`` methods from the ``Manager``"
msgstr "Appel personnalisé de méthodes ``QuerySet`` depuis le ``Manager``"

# 7fbf8295935f4a8ba8137955e518de29
#: ../../../../1.9/docs/releases/1.7.txt:164
msgid ""
"Historically, the recommended way to make reusable model queries was to "
"create methods on a custom ``Manager`` class. The problem with this approach"
" was that after the first method call, you'd get back a ``QuerySet`` "
"instance and couldn't call additional custom manager methods."
msgstr "Historiquement, la méthode recommandée pour réaliser des requêtes de modèles réutilisables était de créer des méthodes sur une classe ``Manager`` personnalisée. Le problème avec cette approche est qu'après le premier appel de méthode, vous obtenez une instance de ``QuerySet`` et ne pouvez pas appeler de méthodes supplémentaires du gestionnaire personnalisé."

# a26c0b38ba594ba080e637af07a43c2f
#: ../../../../1.9/docs/releases/1.7.txt:169
msgid ""
"Though not documented, it was common to work around this issue by creating a"
" custom ``QuerySet`` so that custom methods could be chained; but the "
"solution had a number of drawbacks:"
msgstr "Bien que n'étant pas documentée, il était courant de contourner ce problème en créant une ``QuerySet`` personnalisée afin que les méthodes personnalisées puissent être chaînées; mais la solution avait un certain nombre d'inconvénients :"

# 97efb70b821543428402935615b6a6c1
#: ../../../../1.9/docs/releases/1.7.txt:173
msgid ""
"The custom ``QuerySet`` and its custom methods were lost after the first "
"call to ``values()`` or ``values_list()``."
msgstr "La ``QuerySet`` personnalisée et ses méthodes sur mesure étaient perdues après le premier appel à ``values()`` ou ``values_list()``."

# 41e4f9bda22a47fbb27fa69065e379fe
#: ../../../../1.9/docs/releases/1.7.txt:176
msgid ""
"Writing a custom ``Manager`` was still necessary to return the custom "
"``QuerySet`` class and all methods that were desired on the ``Manager`` had "
"to be proxied to the ``QuerySet``. The whole process went against the DRY "
"principle."
msgstr "La rédaction d'un ``Manager`` sur mesure était encore nécessaire afin de retourner la classe ``QuerySet`` personnalisée et toutes les méthodes souhaitées sur le `` Manager`` devaient être redirigées vers la ``QuerySet``. L'ensemble du processus était contraire au principe DRY."

# d90e55ff6903454ab8565b34d47b6caa
#: ../../../../1.9/docs/releases/1.7.txt:181
msgid ""
"The :meth:`QuerySet.as_manager() "
"<django.db.models.query.QuerySet.as_manager>` class method can now directly "
":ref:`create Manager with QuerySet methods <create-manager-with-queryset-"
"methods>`::"
msgstr "La méthode de classe :meth:`QuerySet.as_manager() <django.db.models.query.QuerySet.as_manager>` peut désormais directement :ref:`créer un Manager avec des méthodes de QuerySet <create-manager-with-queryset-methods>` ::"

# 3e89a3aaff2a48adb194a5a6037d550b
#: ../../../../1.9/docs/releases/1.7.txt:200
msgid "Using a custom manager when traversing reverse relations"
msgstr "Utilisation d'un gestionnaire personnalisé lors de la traversée des relations inverses"

# 84dddf78b4e74c5ead846cb9ef76460c
#: ../../../../1.9/docs/releases/1.7.txt:202
msgid ""
"It is now possible to :ref:`specify a custom manager <using-custom-reverse-"
"manager>` when traversing a reverse relationship::"
msgstr "Il est maintenant possible de :ref:`spécifier un gestionnaire personnalisé <using-custom-reverse-manager>` lors de la traversée d'une relation inverse ::"

# f549a852ecac4f4fa3633a8c08f1bd63
#: ../../../../1.9/docs/releases/1.7.txt:218
msgid "New system check framework"
msgstr "Nouvelle infrastructure de vérification système"

# 254423c5c4e941ac8cfe1c5d8a4521e9
#: ../../../../1.9/docs/releases/1.7.txt:220
msgid ""
"We've added a new :doc:`System check framework </ref/checks>` for detecting "
"common problems (like invalid models) and providing hints for resolving "
"those problems. The framework is extensible so you can add your own checks "
"for your own apps and libraries."
msgstr "Nous avons ajouté une nouvelle :doc:`infrastructure de contrôle du système </ref/checks>` pour détecter les problèmes communs (comme les modèles non valides) et de fournir des conseils pour la résolution de ces problèmes. L’infrastructure est extensible de sorte que vous pouvez ajouter vos propres contrôles pour vos propres applications et bibliothèques."

# 910b833c506948dc8011525d49c8edc8
#: ../../../../1.9/docs/releases/1.7.txt:225
msgid ""
"To perform system checks, you use the :djadmin:`check` management command. "
"This command replaces the older ``validate`` management command."
msgstr ""

# e101853a7ded4646bd8959bdce05ae3a
#: ../../../../1.9/docs/releases/1.7.txt:229
msgid "New ``Prefetch`` object for advanced ``prefetch_related`` operations."
msgstr "Nouvel objet ``Prefetch`` pour les opérations ``prefetch_related`` avancées."

# ae9ab04d41684024ad9a961054a846f0
#: ../../../../1.9/docs/releases/1.7.txt:231
msgid ""
"The new :class:`~django.db.models.Prefetch` object allows customizing "
"prefetch operations."
msgstr "Le nouvel objet :class:`~django.db.models.Prefetch` permet de personnaliser les opérations de préchargement."

# 4de821bc786047ed814498ce23137cbd
#: ../../../../1.9/docs/releases/1.7.txt:234
msgid ""
"You can specify the ``QuerySet`` used to traverse a given relation or "
"customize the storage location of prefetch results."
msgstr "Vous pouvez spécifier la ``QuerySet`` utilisée pour traverser une relation donnée ou personnaliser l'emplacement de stockage des résultats préchargés."

# 7103eb2a7a4243d7891515495fa72268
#: ../../../../1.9/docs/releases/1.7.txt:237
msgid ""
"This enables things like filtering prefetched relations, calling "
":meth:`~django.db.models.query.QuerySet.select_related()` from a prefetched "
"relation, or prefetching the same relation multiple times with different "
"querysets. See :meth:`~django.db.models.query.QuerySet.prefetch_related()` "
"for more details."
msgstr "Cela permet des choses comme le filtrage de relations préchargées, en appelant :meth:`~django.db.models.query.QuerySet.select_related()` à partir d'une relation préchargée, ou le préchargement de la même relation plusieurs fois avec différentes querysets. Voir :meth:`~django.db.models.query.QuerySet.prefetch_related()` pour plus de détails."

# f20e9466a4a34071bc90f3027ae91d4b
#: ../../../../1.9/docs/releases/1.7.txt:244
msgid "Admin shortcuts support time zones"
msgstr "Les raccourcis de l'interface d'administration supporte les fuseaux horaires"

# 2450c7c981c748e888d8471fa02b18a4
#: ../../../../1.9/docs/releases/1.7.txt:246
msgid ""
"The \"today\" and \"now\" shortcuts next to date and time input widgets in "
"the admin are now operating in the :ref:`current time zone <default-current-"
"time-zone>`. Previously, they used the browser time zone, which could result"
" in saving the wrong value when it didn't match the current time zone on the"
" server."
msgstr "Les raccourcis \"today\" et \"now\" à côté des composants de saisie de la date et de l'heure dans l'interface d'administration, opèrent désormais dans le :ref:`fuseau horaire courant <default-current-time-zone>`. Auparavant, ils utilisaient le fuseau horaire du navigateur, ce qui pouvait entraîner la saisie de valeurs erronées quand il ne correspondait pas au fuseau horaire courant du serveur."

# b89af89e5f63495a801edd8878c1ecb0
#: ../../../../1.9/docs/releases/1.7.txt:252
msgid ""
"In addition, the widgets now display a help message when the browser and "
"server time zone are different, to clarify how the value inserted in the "
"field will be interpreted."
msgstr "En outre, les composants affichent désormais un message d'aide lorsque le fuseau horaire du navigateur et du serveur diffèrent, afin de préciser comment la valeur insérée dans le champ sera interprétée."

# 14f3a71c7bbc464cba2f7c098a2c7c6b
#: ../../../../1.9/docs/releases/1.7.txt:257
msgid "Using database cursors as context managers"
msgstr "Utilisation de curseurs de base de données en tant que gestionnaires de contexte"

# f40b8fdba482427ebfc12ea34a995c7d
#: ../../../../1.9/docs/releases/1.7.txt:259
msgid ""
"Prior to Python 2.7, database cursors could be used as a context manager. "
"The specific backend's cursor defined the behavior of the context manager. "
"The behavior of magic method lookups was changed with Python 2.7 and cursors"
" were no longer usable as context managers."
msgstr "Avant Python 2.7, les curseurs de base de données pouvaient être utilisés en tant que gestionnaire de contexte. Le curseur spécifique au moteur défini le comportement du gestionnaire de contexte. Le comportement des recherches de méthode magique a été modifié avec Python 2.7 et les curseurs ne sont plus utilisables en tant que gestionnaire de contexte."

# 27392862a687411c8c10cc09c744c595
#: ../../../../1.9/docs/releases/1.7.txt:264
msgid ""
"Django 1.7 allows a cursor to be used as a context manager. That is, the "
"following can be used::"
msgstr "Django 1.7 permet qu'un curseur soit utilisé comme gestionnaire de contexte. Autrement dit, ce qui suit peut être utilisé ::"

# 6225d9d00fd94c93a583628a1da90312
#: ../../../../1.9/docs/releases/1.7.txt:270
msgid "instead of::"
msgstr "au lieu de ::"

# f62fd7069bad4030ab19be36cd0415b0
#: ../../../../1.9/docs/releases/1.7.txt:279
msgid "Custom lookups"
msgstr "Expressions de recherche personnalisées"

# e24c3e7da0584263ace7cc55aba79afe
#: ../../../../1.9/docs/releases/1.7.txt:281
msgid ""
"It is now possible to write custom lookups and transforms for the ORM. "
"Custom lookups work just like Django's built-in lookups (e.g. ``lte``, "
"``icontains``) while transforms are a new concept."
msgstr ""

# 98adb3a9d1cd4cc78b9baf4bc86d04ec
#: ../../../../1.9/docs/releases/1.7.txt:285
msgid ""
"The :class:`django.db.models.Lookup` class provides a way to add lookup "
"operators for model fields. As an example it is possible to add ``day_lte`` "
"operator for ``DateFields``."
msgstr "La classe :class:`django.db.models.Lookup` fournit un moyen d'ajouter des opérateurs de recherches pour les champs du modèle. A titre d'exemple il est possible d'ajouter l'opérateur ``day_lte`` pour les ``DateFields``."

# aad57104b76a44448f1649d65f297d4f
#: ../../../../1.9/docs/releases/1.7.txt:289
msgid ""
"The :class:`django.db.models.Transform` class allows transformations of "
"database values prior to the final lookup. For example it is possible to "
"write a ``year`` transform that extracts year from the field's value. "
"Transforms allow for chaining. After the ``year`` transform has been added "
"to ``DateField`` it is possible to filter on the transformed value, for "
"example ``qs.filter(author__birthdate__year__lte=1981)``."
msgstr "La classe :class:`django.db.models.Transform` permet la transformation des valeurs de base de données avant la conversion finale. Par exemple, il est possible d'écrire une transformation ``year`` qui extrait l'année de la valeur du champ. Les transformations permettent le chaînage. Après que la transformation ``year`` ait été ajoutée à ``DateField`` il est possible de filtrer sur la valeur transformée, par exemple ``qs.filter(author__birthdate__year__lte=1981)``."

# 240ae70c2ad4477cbff197992c13b54e
#: ../../../../1.9/docs/releases/1.7.txt:296
msgid ""
"For more information about both custom lookups and transforms refer to the "
":doc:`custom lookups </howto/custom-lookups>` documentation."
msgstr "Pour plus d'informations sur à la fois les expressions de recherches et les transformations personnalisées reportez-vous à la documentation sur les :doc:`recherches personnalisées </howto/custom-lookups>`."

# db9e36dbce2e4f53a49ee8641b66526e
#: ../../../../1.9/docs/releases/1.7.txt:300
msgid "Improvements to ``Form`` error handling"
msgstr "Améliorations apportées à la gestion d'erreur dans ``Form``"

# 402de3c786414b7ea0142e753f800383
#: ../../../../1.9/docs/releases/1.7.txt:303
msgid "``Form.add_error()``"
msgstr "``Form.add_error()``"

# 44ded850d8c04534856c3412e9d3b512
#: ../../../../1.9/docs/releases/1.7.txt:305
msgid "Previously there were two main patterns for handling errors in forms:"
msgstr "Auparavant, il y avait deux principaux modèles de gestion des erreurs dans les formulaires :"

# 5bd526900a1e4f21b6eb10503c350098
#: ../../../../1.9/docs/releases/1.7.txt:307
msgid ""
"Raising a :exc:`~django.core.exceptions.ValidationError` from within certain"
" functions (e.g. ``Field.clean()``, ``Form.clean_<fieldname>()``, or "
"``Form.clean()`` for non-field errors.)"
msgstr "Lever une :exc:`~django.core.exceptions.ValidationError` à partir de certaines fonctions (e.g. ``Field.clean()``, ``Form.clean_<fieldname>()``, ou ``Form.clean()`` pour les erreurs n'ayant pas attrait aux champs)"

# 995eaaf43ad74868ae678ff32612cb63
#: ../../../../1.9/docs/releases/1.7.txt:311
msgid ""
"Fiddling with ``Form._errors`` when targeting a specific field in "
"``Form.clean()`` or adding errors from outside of a \"clean\" method (e.g. "
"directly from a view)."
msgstr "Manipuler ``Form._errors`` en ciblant un champ spécifique dans ``Form.clean()`` ou en ajoutant des erreurs via une méthode \"clean\" externe (e.g.i, directement depuis une vue)."

# 9da8b0134c7f471b96fd8dfc553cdfe6
#: ../../../../1.9/docs/releases/1.7.txt:315
msgid ""
"Using the former pattern was straightforward since the form can guess from "
"the context (i.e. which method raised the exception) where the errors belong"
" and automatically process them. This remains the canonical way of adding "
"errors when possible. However the latter was fiddly and error-prone, since "
"the burden of handling edge cases fell on the user."
msgstr "L'utilisation de la première pratique était simple et directe puisque le formulaire peut deviner à partir du contexte (i.e. quelle méthode a soulevé l'exception) d'où proviennent les erreurs et les traiter automatiquement. Cela reste la manière canonique d'ajouter des erreurs lorsque possible. Cependant, la dernière était fastidieuse et source d'erreurs, car l'essentiel du traitement des effets de bord incombait à l'utilisateur."

# 744ea66ec8e848389a0da0562464c226
#: ../../../../1.9/docs/releases/1.7.txt:321
msgid ""
"The new :meth:`~django.forms.Form.add_error()` method allows adding errors "
"to specific form fields from anywhere without having to worry about the "
"details such as creating instances of ``django.forms.utils.ErrorList`` or "
"dealing with ``Form.cleaned_data``. This new API replaces manipulating "
"``Form._errors`` which now becomes a private API."
msgstr "La nouvelle méthode :meth:`~django.forms.Form.add_error()` permet d'ajouter des erreurs à des champs de formulaire spécifiques de n'importe où, sans avoir à se soucier des détails; tels que la création d'instances de ``django.forms.utils.ErrorList`` ou le traitement de ``Form.cleaned_data``. Cette nouvelle API remplace la manipulation de ``Form._errors`` qui devient désormais une API privée."

# 07262d73396a44a9a07d6ac75aa91caf
#: ../../../../1.9/docs/releases/1.7.txt:327
msgid ""
"See :ref:`validating-fields-with-clean` for an example using "
"``Form.add_error()``."
msgstr "Voir la :ref:`validating-fields-with-clean` pour un exemple utilisant ``Form.add_error()``."

# b116ece46488492288a81a5eb97b26bd
#: ../../../../1.9/docs/releases/1.7.txt:331
msgid "Error metadata"
msgstr "Métadonnées d'erreur"

# 20553494976d418fb30888fa773ac3c9
#: ../../../../1.9/docs/releases/1.7.txt:333
msgid ""
"The :exc:`~django.core.exceptions.ValidationError` constructor accepts "
"metadata such as error ``code`` or ``params`` which are then available for "
"interpolating into the error message (see :ref:`raising-validation-error` "
"for more details); however, before Django 1.7 those metadata were discarded "
"as soon as the errors were added to :attr:`Form.errors "
"<django.forms.Form.errors>`."
msgstr "Le constructeur de :exc:`~django.core.exceptions.ValidationError` accepte des métadonnées telles que le ``code`` d'erreur ou ``params`` qui sont alors disponibles pour être interpolés dans le message d'erreur (voir :ref:`raising-validation-error` pour plus de détails); toutefois, avant Django 1.7 ces métadonnées étaient rejetées au moment où les erreurs étaient ajoutées à :attr:`Form.errors <django.forms.Form.errors>`."

# 2826ae91b4b5487cbf0795426797f990
#: ../../../../1.9/docs/releases/1.7.txt:339
msgid ""
":attr:`Form.errors <django.forms.Form.errors>` and "
"``django.forms.utils.ErrorList`` now store the ``ValidationError`` instances"
" so these metadata can be retrieved at any time through the new "
":meth:`Form.errors.as_data <django.forms.Form.errors.as_data()>` method."
msgstr ":attr:`Form.errors <django.forms.Form.errors>` et ``django.forms.utils.ErrorList`` stockent maintenant les instances de ``ValidationError``, donc ces métadonnées peuvent être récupérées à tout moment grâce à la nouvelle méthode :meth:`Form.errors.as_data <django.forms.Form.errors.as_data()>`."

# 8ac51513182f42648e96f63d960ac217
#: ../../../../1.9/docs/releases/1.7.txt:344
msgid ""
"The retrieved ``ValidationError`` instances can then be identified thanks to"
" their error ``code`` which enables things like rewriting the error's "
"message or writing custom logic in a view when a given error is present. It "
"can also be used to serialize the errors in a custom format such as XML."
msgstr "Les instances de ``ValidationError`` récupérées peuvent alors être identifiées grâce à leur ``code`` d'erreur qui permet des choses telle que la réécriture du message d'erreur ou l'écriture d'une logique personnalisée dans une vue lorsqu'une erreur donnée est présente. Elle peut également être utilisée pour sérialiser les erreurs dans un format personnalisé tel que XML."

# ce7451d6faee4c748678056e7abfc06c
#: ../../../../1.9/docs/releases/1.7.txt:349
msgid ""
"The new :meth:`Form.errors.as_json() <django.forms.Form.errors.as_json()>` "
"method is a convenience method which returns error messages along with error"
" codes serialized as JSON. ``as_json()`` uses ``as_data()`` and gives an "
"idea of how the new system could be extended."
msgstr "La nouvelle méthode :meth:`Form.errors.as_json() <django.forms.Form.errors.as_json()>` est une méthode pratique qui renvoie les messages d'erreur ainsi que les codes d'erreur sérialisés en JSON. ``as_json()`` utilise ``as_data()`` et donne une idée de la manière dont le nouveau système pourrait être étendu."

# 627a0ac1489647d791478e02cde3f227
#: ../../../../1.9/docs/releases/1.7.txt:355
msgid "Error containers and backward compatibility"
msgstr "Conteneurs d'erreur et rétro-compatibilité"

# f99c61a5366e4bc4b0c2cf331dfef296
#: ../../../../1.9/docs/releases/1.7.txt:357
msgid ""
"Heavy changes to the various error containers were necessary in order to "
"support the features above, specifically :attr:`Form.errors "
"<django.forms.Form.errors>`, ``django.forms.utils.ErrorList``, and the "
"internal storages of :exc:`~django.core.exceptions.ValidationError`. These "
"containers which used to store error strings now store ``ValidationError`` "
"instances and public APIs have been adapted to make this as transparent as "
"possible, but if you've been using private APIs, some of the changes are "
"backwards incompatible; see :ref:`validation-error-constructor-and-internal-"
"storage` for more details."
msgstr "Des changements profonds au niveau des différents conteneurs d'erreur furent nécessaires afin de supporter les caractéristiques ci-dessus, à savoir :attr `Form.errors <django.forms.Form.errors>`, ``Django.forms.utils.ErrorList``, et les stockages interne de :exc:`~django.core.exceptions.ValidationError`. Ces conteneurs auparavant utilisés pour stocker des chaînes d'erreur stockent désormais des instances de ``ValidationError`` et les API publiques ont été adaptées pour rendre cela aussi transparent que possible, mais si vous avez utilisé les API privées, certains des changements ne sont pas rétro-compatibles; voir :ref:`validation-error-constructor-and-internal-storage` pour plus de détails."

# e4b0e367a4cc4fe0bdec46bb9327a776
# 35664ee8793f4659a084592359d67c2a
# b36dd1444da9489186b03ae68c6f40e8
# 59c4949a878943828a7dc0474dc40ba2
#: ../../../../1.9/docs/releases/1.7.txt:371
#: ../../../../1.9/docs/releases/1.8.txt:145
#: ../../../../1.9/docs/releases/1.8.txt:1028
#: ../../../../1.9/docs/releases/1.9.txt:150
msgid ":mod:`django.contrib.admin`"
msgstr ":mod:`django.contrib.admin`"

# 3b2fa0d58e4a41338bf2512fe7caa8be
#: ../../../../1.9/docs/releases/1.7.txt:373
msgid ""
"You can now implement :attr:`~django.contrib.admin.AdminSite.site_header`, "
":attr:`~django.contrib.admin.AdminSite.site_title`, and "
":attr:`~django.contrib.admin.AdminSite.index_title` attributes on a custom "
":class:`~django.contrib.admin.AdminSite` in order to easily change the admin"
" site's page title and header text. No more needing to override templates!"
msgstr "Vous pouvez maintenant implémenter les attributs :attr:`~django.contrib.admin.AdminSite.site_header`, :attr:`~django.contrib.admin.AdminSite.site_title` et :attr:`~django.contrib.admin.AdminSite.index_title`  sur un :class:`~django.contrib.admin.AdminSite` personnalisé afin de changer facilement le titre et le texte d'en-tête de page du site d'administration. Plus besoin d'étendre les gabarits !"

# c24e84a0c0b942c6abd4b9f5f1f24859
#: ../../../../1.9/docs/releases/1.7.txt:379
msgid ""
"Buttons in :mod:`django.contrib.admin` now use the ``border-radius`` CSS "
"property for rounded corners rather than GIF background images."
msgstr "Les boutons dans :mod:`django.contrib.admin` utilise maintenant la propriété CSS ``border-radius`` pour les coins arrondis plutôt que des images de fond GIF."

# 51182112b2a24032aed312c5265bc6bd
#: ../../../../1.9/docs/releases/1.7.txt:382
msgid ""
"Some admin templates now have ``app-<app_name>`` and ``model-<model_name>`` "
"classes in their ``<body>`` tag to allow customizing the CSS per app or per "
"model."
msgstr "Certains gabarits de l'interface d'administration ont maintenant les classes ``app-<app_name>`` and ``model-<model_name>`` dans leur balise ``<body>`` pour permettre la personnalisation de la CSS par application ou par modèle."

# 1a3a9ba7b89c4887a775315440654ddb
#: ../../../../1.9/docs/releases/1.7.txt:386
msgid ""
"The admin changelist cells now have a ``field-<field_name>`` class in the "
"HTML to enable style customizations."
msgstr "Les cellules de la liste d'objets pour modification de l'interface d'administration ont maintenant une classe ``field-<field_name>`` dans le code HTML pour permettre les personnalisations stylistiques."

# b96f92ed8c614ec5b522ce6fa4c1e3b9
#: ../../../../1.9/docs/releases/1.7.txt:389
msgid ""
"The admin's search fields can now be customized per-request thanks to the "
"new :meth:`django.contrib.admin.ModelAdmin.get_search_fields` method."
msgstr "Les champs de recherche de l'interface d'administration peuvent désormais être personnalisés par requête grâce à la nouvelle méthode :meth:`django.contrib.admin.ModelAdmin.get_search_fields`."

# 3df69ce8e53e49829177334d9e503e68
#: ../../../../1.9/docs/releases/1.7.txt:392
msgid ""
"The :meth:`ModelAdmin.get_fields() "
"<django.contrib.admin.ModelAdmin.get_fields>` method may be overridden to "
"customize the value of :attr:`ModelAdmin.fields "
"<django.contrib.admin.ModelAdmin.fields>`."
msgstr "La méthode :meth:`ModelAdmin.get_fields() <django.contrib.admin.ModelAdmin.get_fields>` peut être étendue pour personnaliser la valeur de :attr:`ModelAdmin.fields <django.contrib.admin.ModelAdmin.fields>`."

# bf149920c86c4501a3f50baae2c90409
#: ../../../../1.9/docs/releases/1.7.txt:397
msgid ""
"In addition to the existing ``admin.site.register`` syntax, you can use the "
"new :func:`~django.contrib.admin.register` decorator to register a "
":class:`~django.contrib.admin.ModelAdmin`."
msgstr "En plus de la syntaxe ``admin.site.register`` existante, vous pouvez utiliser le nouveau décorateur :func:`~django.contrib.admin.register` pour enregistrer un :class:`~django.contrib.admin.ModelAdmin`."

# 2e0c7c603ad7421b9282a0c08bec8c4e
#: ../../../../1.9/docs/releases/1.7.txt:401
msgid ""
"You may specify :meth:`ModelAdmin.list_display_links "
"<django.contrib.admin.ModelAdmin.list_display_links>` ``= None`` to disable "
"links on the change list page grid."
msgstr "Vous pouvez spécifier :meth:`ModelAdmin.list_display_links <django.contrib.admin.ModelAdmin.list_display_links>` ``= None`` pour désactiver les liens sur la grille de la page de liste des objets pour modification."

# 40c1e2b45c1f4ad89a999d9011ca4056
#: ../../../../1.9/docs/releases/1.7.txt:405
msgid ""
"You may now specify :attr:`ModelAdmin.view_on_site "
"<django.contrib.admin.ModelAdmin.view_on_site>` to control whether or not to"
" display the \"View on site\" link."
msgstr "Vous pouvez maintenant spécifier :attr:`ModelAdmin.view_on_site <django.contrib.admin.ModelAdmin.view_on_site>` pour contrôler l'affichage ou non du lien \"Voir sur le site\"."

# ea3c25e72afa4f52815af2aa94e7fe04
#: ../../../../1.9/docs/releases/1.7.txt:409
msgid ""
"You can specify a descending ordering for a :attr:`ModelAdmin.list_display "
"<django.contrib.admin.ModelAdmin.list_display>` value by prefixing the "
"``admin_order_field`` value with a hyphen."
msgstr "Vous pouvez spécifier un ordre décroissant pour une valeur de :attr:`ModelAdmin.list_display <django.contrib.admin.ModelAdmin.list_display>` en faisant précéder la valeur de ``admin_order_field`` avec un tiret."

# 7b08033ad68642af831ff741dd98c03e
#: ../../../../1.9/docs/releases/1.7.txt:413
msgid ""
"The :meth:`ModelAdmin.get_changeform_initial_data() "
"<django.contrib.admin.ModelAdmin.get_changeform_initial_data>` method may be"
" overridden to define custom behavior for setting initial change form data."
msgstr "La méthode :meth:`ModelAdmin.get_changeform_initial_data() <django.contrib.admin.ModelAdmin.get_changeform_initial_data>` peut être étendue pour définir un comportement personnalisé afin de configurer les données initiales du formulaire de modification."

# a77b1d72b8994d38bda596e466c49a52
# bedd4b31fe69468da9eca8d9a4b527ec
# 07c8a39a048d471388e1a3c522df77c0
#: ../../../../1.9/docs/releases/1.7.txt:418
#: ../../../../1.9/docs/releases/1.8.txt:195
#: ../../../../1.9/docs/releases/1.9.txt:194
msgid ":mod:`django.contrib.auth`"
msgstr ":mod:`django.contrib.auth`"

# 33ebf18c3acf40aca89a1b6c756d9641
#: ../../../../1.9/docs/releases/1.7.txt:420
msgid ""
"Any ``**kwargs`` passed to "
":meth:`~django.contrib.auth.models.User.email_user()` are passed to the "
"underlying :meth:`~django.core.mail.send_mail()` call."
msgstr "Tous ``**kwargs`` passés à :meth:`~django.contrib.auth.models.User.email_user()` sont transmis lors de l'appel sous-jacent à :meth:`~django.core.mail.send_mail()`."

# 42c7fd726ab4466c89a097e09ac8bf81
#: ../../../../1.9/docs/releases/1.7.txt:424
msgid ""
"The :func:`~django.contrib.auth.decorators.permission_required` decorator "
"can take a list of permissions as well as a single permission."
msgstr "Le décorateur :func:`~django.contrib.auth.decorators.permission_required` peut tout aussi bien prendre une liste d'autorisations qu'une seule autorisation."

# eee7c90d938f461c8ec7d0ae8e69650c
#: ../../../../1.9/docs/releases/1.7.txt:427
msgid ""
"You can override the new :meth:`AuthenticationForm.confirm_login_allowed() "
"<django.contrib.auth.forms.AuthenticationForm.confirm_login_allowed>` method"
" to more easily customize the login policy."
msgstr "Vous pouvez étendre la nouvelle méthode :meth:`AuthenticationForm.confirm_login_allowed() <django.contrib.auth.forms.AuthenticationForm.confirm_login_allowed>` afin de personnaliser plus facilement la politique d'ouverture de session."

# cfe3330ff85d47bb96148a89c69f4d8c
#: ../../../../1.9/docs/releases/1.7.txt:431
msgid ""
":func:`django.contrib.auth.views.password_reset` takes an optional "
"``html_email_template_name`` parameter used to send a multipart HTML email "
"for password resets."
msgstr ":func:`django.contrib.auth.views.password_reset` prend un paramètre ``html_email_template_name`` facultatif utilisé pour envoyer un e-mail HTML en plusieurs parties pour les réinitialisations du mot de passe."

# aa433a9bc68b40a687813427a7707a54
#: ../../../../1.9/docs/releases/1.7.txt:435
msgid ""
"The :meth:`AbstractBaseUser.get_session_auth_hash() "
"<django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash>` method "
"was added and if your :setting:`AUTH_USER_MODEL` inherits from "
":class:`~django.contrib.auth.models.AbstractBaseUser`, changing a user's "
"password now invalidates old sessions if the "
":class:`~django.contrib.auth.middleware.SessionAuthenticationMiddleware` is "
"enabled. See :ref:`session-invalidation-on-password-change` for more details"
" including upgrade considerations when enabling this new middleware."
msgstr "La méthode :meth:`AbstractBaseUser.get_session_auth_hash() <django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash>` a été ajoutée et si votre :setting:`AUTH_USER_MODEL` hérite de :class:`~django.contrib.auth.models.AbstractBaseUser`, changer le mot de passe d'un utilisateur invalide maintenant les anciennes sessions si le :class:`~django.contrib.auth.middleware.SessionAuthenticationMiddleware` est activé. Voir :ref:`session-invalidation-on-password-change`  pour plus de détails, y compris les considérations de mise à niveau lors de l'activation de ce nouveau middleware."

# 075d31c343734fd8a92d3672b0433973
#: ../../../../1.9/docs/releases/1.7.txt:445
msgid "``django.contrib.formtools``"
msgstr ""

# df585a6b1809425aae17da20b2de46d8
#: ../../../../1.9/docs/releases/1.7.txt:447
msgid ""
"Calls to :meth:`WizardView.done() <formtools.wizard.views.WizardView.done>` "
"now include a ``form_dict`` to allow easier access to forms by their step "
"name."
msgstr ""

# 20e6d5793c17404e8c73660858eff65b
# 6594136a80e74689a2abed7673826860
# c61defef7fd3451eb30044e3f85b8feb
# 1f8f9b3196944670a42617f2328ab965
#: ../../../../1.9/docs/releases/1.7.txt:452
#: ../../../../1.9/docs/releases/1.8.txt:220
#: ../../../../1.9/docs/releases/1.8.txt:895
#: ../../../../1.9/docs/releases/1.9.txt:229
msgid ":mod:`django.contrib.gis`"
msgstr ":mod:`django.contrib.gis`"

# 7887875f873349d4983debb2f7daa2aa
#: ../../../../1.9/docs/releases/1.7.txt:454
msgid ""
"The default OpenLayers library version included in widgets has been updated "
"from 2.11 to 2.13."
msgstr "La version de la bibliothèque OpenLayers par défaut inclus dans les composants a été mise à jour, passant de la 2.11 à 2.13."

# e126e1e8c016406b996d3d07fc8a5ec3
#: ../../../../1.9/docs/releases/1.7.txt:457
msgid ""
"Prepared geometries now also support the ``crosses``, ``disjoint``, "
"``overlaps``, ``touches`` and ``within`` predicates, if GEOS 3.3 or later is"
" installed."
msgstr "Les géométries préparées supportent maintenant les prédicats ``crosses``, ``disjoint``, ``overlaps``, ``touches`` et ``within``, si GEOS 3.3 ou ultérieur est installé."

# d6bb4ae5cd2e445695f63f5708faf64b
#: ../../../../1.9/docs/releases/1.7.txt:462
msgid ":mod:`django.contrib.messages`"
msgstr ":mod:`django.contrib.messages`"

# 2ffcd5b827ae4a1faeb93561076ef5c1
#: ../../../../1.9/docs/releases/1.7.txt:464
msgid ""
"The backends for :mod:`django.contrib.messages` that use cookies, will now "
"follow the :setting:`SESSION_COOKIE_SECURE` and "
":setting:`SESSION_COOKIE_HTTPONLY` settings."
msgstr "Les moteurs de :mod:`django.contrib.messages` qui utilisent des cookies respectent maintenant  les réglages :setting:`SESSION_COOKIE_SECURE` et :setting:`SESSION_COOKIE_HTTPONLY`."

# 1fe97075a7a94ebeaad8fe011d96ff62
#: ../../../../1.9/docs/releases/1.7.txt:468
msgid ""
"The :ref:`messages context processor <message-displaying>` now adds a "
"dictionary of default levels under the name ``DEFAULT_MESSAGE_LEVELS``."
msgstr "Le :ref: `processeur de contexte des messages <message-displaying>` ajoute maintenant un dictionnaire des niveaux par défaut sous le nom de ``DEFAULT_MESSAGE_LEVELS``."

# 940975a1f5a9417896594e328bcfbce7
#: ../../../../1.9/docs/releases/1.7.txt:471
msgid ""
":class:`~django.contrib.messages.storage.base.Message` objects now have a "
"``level_tag`` attribute that contains the string representation of the "
"message level."
msgstr "Les objets :class:`~django.contrib.messages.storage.base.Message` ont maintenant un attribut ``level_tag`` qui contient la représentation textuelle du niveau de message."

# ba6c210b63f7480ba0fb2ddd4bcf6e45
#: ../../../../1.9/docs/releases/1.7.txt:476
msgid ":mod:`django.contrib.redirects`"
msgstr ":mod:`django.contrib.redirects`"

# f82071ef90d4448f9f65ce771d51c324
#: ../../../../1.9/docs/releases/1.7.txt:478
msgid ""
":class:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware` has"
" two new attributes "
"(:attr:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware.response_gone_class`"
" and "
":attr:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware.response_redirect_class`)"
" that specify the types of :class:`~django.http.HttpResponse` instances the "
"middleware returns."
msgstr ":class:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware` a deux nouveaux attributs (:attr:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware.response_gone_class` et :attr:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware.response_redirect_class`) qui spécifient les types d'instances :class:`~django.http.HttpResponse` retournées par le middleware."

# f06b334959f142f29a8966d746f34d3c
# 1a67d1d1a03244cbbe2c294772dd4b84
# c1235191d0b1432cbf3afcbb8a5f0d6f
#: ../../../../1.9/docs/releases/1.7.txt:487
#: ../../../../1.9/docs/releases/1.8.txt:246
#: ../../../../1.9/docs/releases/1.9.txt:272
msgid ":mod:`django.contrib.sessions`"
msgstr ":mod:`django.contrib.sessions`"

# 17dc3b3e92b448818275002d8bd3e947
#: ../../../../1.9/docs/releases/1.7.txt:489
msgid ""
"The ``\"django.contrib.sessions.backends.cached_db\"`` session backend now "
"respects :setting:`SESSION_CACHE_ALIAS`. In previous versions, it always "
"used the `default` cache."
msgstr "Le moteur de session ``\"django.contrib.sessions.backends.cached_db\"`` respecte maintenant :setting:`SESSION_CACHE_ALIAS`. Dans les versions précédentes, il utilisait toujours le cache `default`."

# 589a150fe62746b4add4a6808466d0d4
# e2380a486edc4a5cafa885f0d8c22e8e
#: ../../../../1.9/docs/releases/1.7.txt:494
#: ../../../../1.9/docs/releases/1.8.txt:252
msgid ":mod:`django.contrib.sitemaps`"
msgstr ":mod:`django.contrib.sitemaps`"

# 983094669b81407d8d45468b96fa223a
#: ../../../../1.9/docs/releases/1.7.txt:496
msgid ""
"The :mod:`sitemap framework<django.contrib.sitemaps>` now makes use of "
":attr:`~django.contrib.sitemaps.Sitemap.lastmod` to set a ``Last-Modified`` "
"header in the response. This makes it possible for the "
":class:`~django.middleware.http.ConditionalGetMiddleware` to handle "
"conditional ``GET`` requests for sitemaps which set ``lastmod``."
msgstr "L':mod: `infrastructure de plan du site <django.contrib.sitemaps>` utilise maintenant :attr:`~django.contrib.sitemaps.Sitemap.lastmod` pour définir un en-tête ``Last-Modified`` dans la réponse. Cela permet au :class:`~django.middleware.http.ConditionalGetMiddleware` de gérer des requêtes ``GET`` conditionnelles pour les plans de site qui définissent ``lastmod``."

# f687328a4c4148478683b32a6b47362b
# 79702e2c051b45f09b3ef04675e0f882
# af47a2066eb0434d80705335fa16efe0
#: ../../../../1.9/docs/releases/1.7.txt:503
#: ../../../../1.9/docs/releases/1.8.txt:258
#: ../../../../1.9/docs/releases/1.9.txt:280
msgid ":mod:`django.contrib.sites`"
msgstr ":mod:`django.contrib.sites`"

# d006e45fface4b9f9db6b621e40eedae
#: ../../../../1.9/docs/releases/1.7.txt:505
msgid ""
"The new :class:`django.contrib.sites.middleware.CurrentSiteMiddleware` "
"allows setting the current site on each request."
msgstr "Le nouveau :class:`django.contrib.sites.middleware.CurrentSiteMiddleware` permet de définir le site courant pour chaque requête."

# 01409c3d263e41fa86397c30caa78194
#: ../../../../1.9/docs/releases/1.7.txt:509
msgid ":mod:`django.contrib.staticfiles`"
msgstr ":mod:`django.contrib.staticfiles`"

# e2db0632ce92452683e10bef969968c0
#: ../../../../1.9/docs/releases/1.7.txt:511
msgid ""
"The :ref:`static files storage classes <staticfiles-storages>` may be "
"subclassed to override the permissions that collected static files and "
"directories receive by setting the "
":attr:`~django.core.files.storage.FileSystemStorage.file_permissions_mode` "
"and "
":attr:`~django.core.files.storage.FileSystemStorage.directory_permissions_mode`"
" parameters. See :djadmin:`collectstatic` for example usage."
msgstr "Les :ref:`classes de stockage de fichiers statiques <staticfiles-storages>` peuvent être sous-classées pour remplacer les autorisations que les fichiers statiques et répertoires collectés reçoivent en réglant les paramètres :attr:`~django.core.files.storage.FileSystemStorage.file_permissions_mode` et :attr:`~django.core.files.storage.FileSystemStorage.directory_permissions_mode` . Voir :djadmin:`collectstatic` pour un exemple d'utilisation."

# f23eaf983923452481fcb9cb298075df
#: ../../../../1.9/docs/releases/1.7.txt:518
msgid ""
"The :class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` "
"backend gets a sibling class called "
":class:`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage` that"
" doesn't use the cache system at all but instead a JSON file called "
"``staticfiles.json`` for storing the mapping between the original file name "
"(e.g. ``css/styles.css``) and the hashed file name (e.g. "
"``css/styles.55e7cbb9ba48.css``). The ``staticfiles.json`` file is created "
"when running the :djadmin:`collectstatic` management command and should be a"
" less expensive alternative for remote storages such as Amazon S3."
msgstr ""

# 67b897ec46c74518a3edc20c5e4f0974
#: ../../../../1.9/docs/releases/1.7.txt:528
msgid ""
"See the "
":class:`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage` docs"
" for more information."
msgstr "Voir la documentation de :class:`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage` pour plus d'informations."

# 859b3f9fa522472fa54e187ba03b0d3e
#: ../../../../1.9/docs/releases/1.7.txt:531
msgid ""
":djadmin:`findstatic` now accepts verbosity flag level 2, meaning it will "
"show the relative paths of the directories it searched. See "
":djadmin:`findstatic` for example output."
msgstr ":djadmin:`findstatic` accepte maintenant une verbosité de niveau 2, ce qui signifie qu'elle affichera les chemins relatifs des répertoires qu'elle a recherché. Voir :djadmin:`findstatic` par un exemple de sortie."

# b2513b7a225c4c8782805be11d983059
# ffc7661e7c7444bd8d21ebed80facae0
#: ../../../../1.9/docs/releases/1.7.txt:536
#: ../../../../1.9/docs/releases/1.9.txt:289
msgid ":mod:`django.contrib.syndication`"
msgstr ":mod:`django.contrib.syndication`"

# 93b4d57fd79e4024917132f5e4170414
#: ../../../../1.9/docs/releases/1.7.txt:538
msgid ""
"The :class:`~django.utils.feedgenerator.Atom1Feed` syndication feed's "
"``updated`` element now utilizes ``updateddate`` instead of ``pubdate``, "
"allowing the ``published`` element to be included in the feed (which relies "
"on ``pubdate``)."
msgstr "L'élément ``updated`` du flux de syndication :class:`~django.utils.feedgenerator.Atom1Feed` utilise maintenant ``updateddate`` au lieu de ``pubdate``, permettant à l'élément ``published`` d'être inclut dans le flux (qui repose sur ``pubdate``)."

# ac2257be1cc24155a6e1c005d68df1f5
# d4e7b60c1bfa45d98332d8702500ae4d
# bb8ec3b3af5d4810a97287b2cac3bf61
#: ../../../../1.9/docs/releases/1.7.txt:544
#: ../../../../1.9/docs/releases/1.8.txt:270
#: ../../../../1.9/docs/releases/1.9.txt:296
msgid "Cache"
msgstr "Cache"

# fa68fc90daab415b8810df5e29fe0ba2
#: ../../../../1.9/docs/releases/1.7.txt:546
msgid ""
"Access to caches configured in :setting:`CACHES` is now available via "
":data:`django.core.cache.caches`. This dict-like object provides a different"
" instance per thread. It supersedes ``django.core.cache.get_cache()`` which "
"is now deprecated."
msgstr ""

# d0fdc3cc731744f5a0afb0685d98295f
#: ../../../../1.9/docs/releases/1.7.txt:551
msgid ""
"If you instantiate cache backends directly, be aware that they aren't "
"thread-safe any more, as :data:`django.core.cache.caches` now yields "
"different instances per thread."
msgstr "Si vous instanciez un moteur de cache directement, soyez conscients qu'ils ne sont plus thread-safe, puisque :data:`django.core.cache.caches` génère maintenant différentes instances par thread."

# 235d0df28b3b40f4bf57ad57e53f289d
#: ../../../../1.9/docs/releases/1.7.txt:555
msgid ""
"Defining the :setting:`TIMEOUT <CACHES-TIMEOUT>` argument of the "
":setting:`CACHES` setting as ``None`` will set the cache keys as \"non-"
"expiring\" by default. Previously, it was only possible to pass "
"``timeout=None`` to the cache backend's ``set()`` method."
msgstr "Définir l'argument :setting:`TIMEOUT <CACHES-TIMEOUT>` du réglage :setting:`CACHES` à ``None`` définiera les clés du cache comme \"n'expirant pas\" par défaut. Auparavant, il était seulement possible de passer ``timeout = None`` à la méthode ``set()`` des moteurs de cache."

# 71f1974e174e43d5a80db28259580437
#: ../../../../1.9/docs/releases/1.7.txt:561
msgid "Cross Site Request Forgery"
msgstr "Cross Site Request Forgery"

# b421bbf5a0694237b7d02eedce76b80b
#: ../../../../1.9/docs/releases/1.7.txt:563
msgid ""
"The :setting:`CSRF_COOKIE_AGE` setting facilitates the use of session-based "
"CSRF cookies."
msgstr "Le réglage :setting:`CSRF_COOKIE_AGE` facilite l'utilisation des cookies de session CSRF."

# e81ffbfe6b034e83886445d9b8d046ad
# da7c8e79e8f54eae922fb2d01f62a68a
#: ../../../../1.9/docs/releases/1.7.txt:567
#: ../../../../1.9/docs/releases/1.8.txt:300
msgid "Email"
msgstr "Email"

# 9d7a9eede33f4e4a8a97fe5b0b9c01f9
#: ../../../../1.9/docs/releases/1.7.txt:569
msgid ""
":func:`~django.core.mail.send_mail` now accepts an ``html_message`` "
"parameter for sending a multipart ``text/plain`` and ``text/html`` email."
msgstr ":func:`~django.core.mail.send_mail` accepte désormais un paramètre ``html_message`` pour envoyer un courriel ``text/plain`` et ``text/html`` en plusieurs parties."

# edb6e9db2d514bc6a6afe8a6083e3fc6
#: ../../../../1.9/docs/releases/1.7.txt:571
msgid ""
"The SMTP :class:`~django.core.mail.backends.smtp.EmailBackend` now accepts a"
" ``timeout`` parameter."
msgstr ""

# 849a9187d47548f8b1066ae3930838c7
# be4630bed9194ca9a707f37274ef30c6
# 95d040541a4048a7855d8121a0f26528
#: ../../../../1.9/docs/releases/1.7.txt:575
#: ../../../../1.9/docs/releases/1.8.txt:316
#: ../../../../1.9/docs/releases/1.9.txt:326
msgid "File Storage"
msgstr "Stockage de fichier"

# f61dc0610c184f0db61ffe6177ddc25d
#: ../../../../1.9/docs/releases/1.7.txt:577
msgid ""
"File locking on Windows previously depended on the PyWin32 package; if it "
"wasn't installed, file locking failed silently. That dependency has been "
"removed, and file locking is now implemented natively on both Windows and "
"Unix."
msgstr "Le verrouillage de fichier sur Windows dépendait précédemment du paquet PyWin32; s'il n'était pas été installé, le verrouillage de fichier échouait en silence. Cette dépendance a été supprimée, et le verrouillage de fichier est désormais implémenté nativement à la fois sur Windows et Unix."

# da119ce24eee4017a39c03452f3ff9ff
#: ../../../../1.9/docs/releases/1.7.txt:583
msgid "File Uploads"
msgstr "Téléversement de fichiers"

# 2456c52ce96e4deb84a7bdefd8b6d72e
#: ../../../../1.9/docs/releases/1.7.txt:585
msgid ""
"The new :attr:`UploadedFile.content_type_extra "
"<django.core.files.uploadedfile.UploadedFile.content_type_extra>` attribute "
"contains extra parameters passed to the ``content-type`` header on a file "
"upload."
msgstr "Le nouvel attribut :attr:`UploadedFile.content_type_extra <django.core.files.uploadedfile.UploadedFile.content_type_extra>` contient les paramètres supplémentaires passés à l'en-tête ``content-type`` lors d'un téléversement de fichier."

# 0d0c757361b74c44bcea485f29aa0527
#: ../../../../1.9/docs/releases/1.7.txt:590
msgid ""
"The new :setting:`FILE_UPLOAD_DIRECTORY_PERMISSIONS` setting controls the "
"file system permissions of directories created during file upload, like "
":setting:`FILE_UPLOAD_PERMISSIONS` does for the files themselves."
msgstr "Le nouveau réglage :setting:`FILE_UPLOAD_DIRECTORY_PERMISSIONS` contrôle les autorisations du système de fichiers pour les répertoires créés lors de téléversements de fichiers, tout comme :setting:`FILE_UPLOAD_PERMISSIONS` le fait pour les fichiers."

# 2c5dba45b8c1456e88a378367562d0af
#: ../../../../1.9/docs/releases/1.7.txt:594
msgid ""
"The :attr:`FileField.upload_to <django.db.models.FileField.upload_to>` "
"attribute is now optional. If it is omitted or given ``None`` or an empty "
"string, a subdirectory won't be used for storing the uploaded files."
msgstr "L'attribut :attr:`FileField.upload_to <django.db.models.FileField.upload_to>` est maintenant facultatif. S'il est omis ou définie à ``None`` ou une chaîne vide, un sous-répertoire ne sera pas utilisé pour stocker les fichiers téléversés."

# 6533c0a2f4904217945bee1c8074cb18
#: ../../../../1.9/docs/releases/1.7.txt:598
msgid ""
"Uploaded files are now explicitly closed before the response is delivered to"
" the client. Partially uploaded files are also closed as long as they are "
"named ``file`` in the upload handler."
msgstr "Les fichiers téléversés sont désormais explicitement fermés avant que la réponse soit livrée au client. Les fichiers partiellement téléversés sont également fermés tant qu'ils sont nommés ``file`` dans le gestionnaire de téléversement."

# 28ea773af27144b0befb5947cd367132
#: ../../../../1.9/docs/releases/1.7.txt:602
msgid ""
":meth:`Storage.get_available_name() "
"<django.core.files.storage.Storage.get_available_name>` now appends an "
"underscore plus a random 7 character alphanumeric string (e.g. "
"``\"_x3a1gho\"``), rather than iterating through an underscore followed by a"
" number (e.g. ``\"_1\"``, ``\"_2\"``, etc.) to prevent a denial-of-service "
"attack. This change was also made in the 1.6.6, 1.5.9, and 1.4.14 security "
"releases."
msgstr ":meth:`Storage.get_available_name() <django.core.files.storage.Storage.get_available_name>` ajoute maintenant un trait de soulignement en plus d'une chaîne alphanumérique de 7 caractères aléatoire (e.g. ``\"_x3a1gho\"``), plutôt que d'itérer sur un trait de soulignement suivi d'un nombre (e.g. ``\"_1\"``, ``\"_2\"``, etc.) pour éviter une attaque par déni de service. Ce changement a également été effectué dans les versions de sécurité 1.6.6, 1.5.9 et 1.4.14."

# 13dde217ba8a445ca07215e3e0b9048f
# f302e79e3e4944688af2bd9ba3b198f6
# 6bb38ada041e420db2decf42ee71b32f
#: ../../../../1.9/docs/releases/1.7.txt:610
#: ../../../../1.9/docs/releases/1.8.txt:329
#: ../../../../1.9/docs/releases/1.9.txt:336
msgid "Forms"
msgstr "Formulaires"

# 98d40cc591224959aae24383c8b62ad6
#: ../../../../1.9/docs/releases/1.7.txt:612
msgid ""
"The ``<label>`` and ``<input>`` tags rendered by "
":class:`~django.forms.RadioSelect` and "
":class:`~django.forms.CheckboxSelectMultiple` when looping over the radio "
"buttons or checkboxes now include ``for`` and ``id`` attributes, "
"respectively. Each radio button or checkbox includes an ``id_for_label`` "
"attribute to output the element's ID."
msgstr "Les balises ``<label>`` et ``<input>`` rendues par :class:`~django.forms.RadioSelect` et :class:`~django.forms.CheckboxSelectMultiple` lors de l'itération sur les boutons radio ou les cases à cocher incluent maintenant les attributs ``for`` et ``id``, respectivement. Chaque bouton radio ou case à cocher inclut un attribut ``id_for_label`` produisant l'ID de l'élément."

# 09ceb0376cf64ac28e257f547a1a5bb6
#: ../../../../1.9/docs/releases/1.7.txt:619
msgid ""
"The ``<textarea>`` tags rendered by :class:`~django.forms.Textarea` now "
"include a ``maxlength`` attribute if the "
":class:`~django.db.models.TextField` model field has a ``max_length``."
msgstr "Les balises ``<textarea>`` rendues par :class:`~django.forms.Textarea` incluent maintenant un attribut ``maxlength`` si le champ de modèle :class:`~django.db.models.TextField` possède un ``max_length``."

# 92cc470f975a4e74a6eaabd339caf66d
#: ../../../../1.9/docs/releases/1.7.txt:623
msgid ""
":attr:`Field.choices<django.db.models.Field.choices>` now allows you to "
"customize the \"empty choice\" label by including a tuple with an empty "
"string or ``None`` for the key and the custom label as the value. The "
"default blank option ``\"----------\"`` will be omitted in this case."
msgstr ":attr:`Field.choices <django.db.models.Field.choices>` permet désormais de personnaliser l'étiquette \"empty choice\" en incluant un tuple avec une chaîne vide ou ``None`` pour la clé et l'étiquette personnalisée en tant que valeur. L'option vide par défaut ``\"----------\"`` sera omise dans ce cas."

# b89688a2401c4f949bc6d5b731e58def
#: ../../../../1.9/docs/releases/1.7.txt:628
msgid ""
":class:`~django.forms.MultiValueField` allows optional subfields by setting "
"the ``require_all_fields`` argument to ``False``. The ``required`` attribute"
" for each individual field will be respected, and a new ``incomplete`` "
"validation error will be raised when any required fields are empty."
msgstr ":class:`~django.forms.MultiValueField` autorisent les sous-champs facultatifs en réglant l'argument ``require_all_fields`` à ``False``. L'attribut ``required`` pour chaque champ individuel sera respecté, et une nouvelle erreur de validation ``incomplete`` sera déclenchée lorsqu'un champ requis est vide."

# f1d092bd011b45e8a2569b1f0bfede91
#: ../../../../1.9/docs/releases/1.7.txt:633
msgid ""
"The :meth:`~django.forms.Form.clean` method on a form no longer needs to "
"return ``self.cleaned_data``. If it does return a changed dictionary then "
"that will still be used."
msgstr "La méthode :meth:`~django.forms.Form.clean` d'un formulaire n'a plus besoin de retourner ``self.cleaned_data``. Si elle retourne un dictionnaire modifié alors il sera utilisé."

# abea82a001a3405da5ffa7551abee89b
#: ../../../../1.9/docs/releases/1.7.txt:637
msgid ""
"After a temporary regression in Django 1.6, it's now possible again to make "
":class:`~django.forms.TypedChoiceField` ``coerce`` method return an "
"arbitrary value."
msgstr "Après une régression temporaire dans Django 1.6, il est maintenant de nouveau possible de faire en sorte que la méthode ``coerce`` de :class:`~django.forms.TypedChoiceField` retourne une valeur arbitraire."

# 1d69abdb89e74fca86e82ae327582f03
#: ../../../../1.9/docs/releases/1.7.txt:641
msgid ""
":attr:`SelectDateWidget.months <django.forms.SelectDateWidget.months>` can "
"be used to customize the wording of the months displayed in the select "
"widget."
msgstr ""

# 81e392a5e7a840a7b7fee968f71257eb
#: ../../../../1.9/docs/releases/1.7.txt:645
msgid ""
"The ``min_num`` and ``validate_min`` parameters were added to "
":func:`~django.forms.formsets.formset_factory` to allow validating a minimum"
" number of submitted forms."
msgstr "Les paramètres ``min_num`` et ``validate_min`` ont été ajoutées à :func:`~django.forms.formsets.formset_factory` pour permettre la validation d'un nombre minimum de formulaires soumis."

# 2368cbd6f2cc407fbd0f837a13d0910d
#: ../../../../1.9/docs/releases/1.7.txt:649
msgid ""
"The metaclasses used by ``Form`` and ``ModelForm`` have been reworked to "
"support more inheritance scenarios. The previous limitation that prevented "
"inheriting from both ``Form`` and ``ModelForm`` simultaneously have been "
"removed as long as ``ModelForm`` appears first in the MRO."
msgstr "Les métaclasses utilisées par ``Form`` et ``ModelForm`` ont été retravaillées pour gérer plusieurs scénarios d'héritage. La limitation précédente qui empêchait d'hériter simultanément de deux ``Form`` et ``ModelForm`` a été supprimée tant que ``ModelForm`` apparaît en premier dans la MRO."

# 0e638d89afec45b5ba12314c041fb8c6
#: ../../../../1.9/docs/releases/1.7.txt:654
msgid ""
"It's now possible to remove a field from a ``Form`` when subclassing by "
"setting the name to ``None``."
msgstr "Il est maintenant possible de supprimer un champ d'un ``Form`` lors d'un sous-classement en définissant son nom à ``None``."

# 7478bef09a4e45dbb8c868b1123336ed
#: ../../../../1.9/docs/releases/1.7.txt:657
msgid ""
"It's now possible to customize the error messages for ``ModelForm``’s "
"``unique``, ``unique_for_date``, and ``unique_together`` constraints. In "
"order to support ``unique_together`` or any other ``NON_FIELD_ERROR``, "
"``ModelForm`` now looks for the ``NON_FIELD_ERROR`` key in the "
"``error_messages`` dictionary of the ``ModelForm``’s inner ``Meta`` class. "
"See :ref:`considerations regarding model's error_messages <considerations-"
"regarding-model-errormessages>` for more details."
msgstr "Il est maintenant possible de personnaliser les messages d'erreur pour les contraintes  ``unique``, ``unique_for_date``, et ``unique_together`` de ``ModelForm``. Afin de supporter ``unique_together`` ou tout autre ``NON_FIELD_ERROR``, ``ModelForm`` regarde maintenant la clé ``NON_FIELD_ERROR`` dans le dictionnaire ``error_messages`` de la classe ``Meta`` interne à ``ModelForm``. Voir les :ref:`considérations concernant le error_messages du modèle <considerations-regarding-model-errormessages>` pour plus de détails."

# 1183fd5cbddb43ae9cd1726a93dd913a
#: ../../../../1.9/docs/releases/1.7.txt:668
msgid ""
"The "
":attr:`django.middleware.locale.LocaleMiddleware.response_redirect_class` "
"attribute allows you to customize the redirects issued by the middleware."
msgstr "L'attribut :attr:`django.middleware.locale.LocaleMiddleware.response_redirect_class` vous permet de personnaliser les redirections émises par le middleware."

# ab3efb31f9a34bbd8ce413613e8e15da
#: ../../../../1.9/docs/releases/1.7.txt:671
msgid ""
"The :class:`~django.middleware.locale.LocaleMiddleware` now stores the "
"user's selected language with the session key ``_language``. This should "
"only be accessed using the "
":data:`~django.utils.translation.LANGUAGE_SESSION_KEY` constant. Previously "
"it was stored with the key ``django_language`` and the "
"``LANGUAGE_SESSION_KEY`` constant did not exist, but keys reserved for "
"Django should start with an underscore. For backwards compatibility "
"``django_language`` is still read from in 1.7. Sessions will be migrated to "
"the new key as they are written."
msgstr "Le :class:`~django.middleware.locale.LocaleMiddleware` stocke désormais la langue choisie par l'utilisateur avec la clé de session ``_language``. Elle ne devrait être uniquement accessible qu'à l'aide de la constante :data:`~django.utils.translation.LANGUAGE_SESSION_KEY`. Auparavant, elle était stockée avec la clé ``django_language`` et la constante ``LANGUAGE_SESSION_KEY`` n'existait pas, mais les clés réservées par Django doivent commencer par un trait de soulignement. Par souci de rétro-compatibilité, ``django_language`` est toujours lue dans la 1.7. Les sessions seront migrés vers la nouvelle clé au fur et à mesure de leur écriture."

# fd5f599d83a548d58a918e9bcc325756
#: ../../../../1.9/docs/releases/1.7.txt:680
msgid ""
"The :ttag:`blocktrans` tag now supports a ``trimmed`` option. This option "
"will remove newline characters from the beginning and the end of the content"
" of the ``{% blocktrans %}`` tag, replace any whitespace at the beginning "
"and end of a line and merge all lines into one using a space character to "
"separate them. This is quite useful for indenting the content of a ``{% "
"blocktrans %}`` tag without having the indentation characters end up in the "
"corresponding entry in the PO file, which makes the translation process "
"easier."
msgstr "La balise :ttag:`blocktrans` supporte maintenant une option ``trimmed``. Cette option supprimera les caractères de nouvelle ligne au début et à la fin du contenu de la balise ``{%blocktrans%}``, remplacera les espaces blancs au début et à la fin d'une ligne et fusionnera toutes les lignes en une seule via l'utilisation d'un espace pour les séparer. Ceci est très utile pour l'indentation du contenu d'une balise ``{% blocktrans%}`` sans avoir les caractères d'indentation qui se retrouvent dans l'entrée correspondante du fichier PO, rendant le processus de traduction plus facile."

# 2e8a7ee4b4af4ccd8e38b9cc9cd4af84
#: ../../../../1.9/docs/releases/1.7.txt:689
msgid ""
"When you run :djadmin:`makemessages` from the root directory of your "
"project, any extracted strings will now be automatically distributed to the "
"proper app or project message file. See :ref:`how-to-create-language-files` "
"for details."
msgstr "Lorsque vous exécutez :djadmin:`makemessages` à partir du répertoire racine de votre projet, toutes les chaînes extraites seront maintenant distribuées automatiquement au fichier de message de l'application ou du projet. Voir :ref:`how-to-create-language-files`  pour plus de détails."

# 90a216ba56d24957930630864aeadacc
#: ../../../../1.9/docs/releases/1.7.txt:694
msgid ""
"The :djadmin:`makemessages` command now always adds the ``--previous`` "
"command line flag to the ``msgmerge`` command, keeping previously translated"
" strings in po files for fuzzy strings."
msgstr "La commande :djadmin:`makemessages` ajoute maintenant toujours le drapeau de ligne de commande ``--previous`` à la commande ``msgmerge``, gardant les chaînes déjà traduites dans les fichiers po pour les chaînes floues."

# a8325e0409644560b3ac10c7d5c0741d
#: ../../../../1.9/docs/releases/1.7.txt:698
msgid ""
"The following settings to adjust the language cookie options were "
"introduced: :setting:`LANGUAGE_COOKIE_AGE`, "
":setting:`LANGUAGE_COOKIE_DOMAIN` and :setting:`LANGUAGE_COOKIE_PATH`."
msgstr "Les paramètres suivants ont été introduits pour régler les options du cookie de langue : :setting:`LANGUAGE_COOKIE_AGE`, :setting:`LANGUAGE_COOKIE_DOMAIN` et :setting:`LANGUAGE_COOKIE_PATH`."

# 492c5bd3ceb647e4affed7279c27e5f0
#: ../../../../1.9/docs/releases/1.7.txt:702
msgid "Added :ref:`format definitions <format-localization>` for Esperanto."
msgstr "Ajout des :ref:`définitions de format <format-localization>` pour l'espéranto."

# c55ea6af8f6f4cafbb93c690edd4868a
# b0a6ed64462647a59e361477258b9c4e
# a9fef337b9194f24b133760ef5b9f403
#: ../../../../1.9/docs/releases/1.7.txt:705
#: ../../../../1.9/docs/releases/1.8.txt:406
#: ../../../../1.9/docs/releases/1.9.txt:414
msgid "Management Commands"
msgstr "Commandes d'administration"

# ad9b63478e744eafa3419b858a85640d
#: ../../../../1.9/docs/releases/1.7.txt:707
msgid ""
"The :djadminopt:`--no-color` option for ``django-admin`` allows you to "
"disable the colorization of management command output."
msgstr ""

# 8443e812ef874fa5aaaa43ff0cc78606
#: ../../../../1.9/docs/releases/1.7.txt:710
msgid ""
"The new :djadminopt:`--natural-foreign` and :djadminopt:`--natural-primary` "
"options for :djadmin:`dumpdata`, and the new ``use_natural_foreign_keys`` "
"and ``use_natural_primary_keys`` arguments for ``serializers.serialize()``, "
"allow the use of natural primary keys when serializing."
msgstr "Les nouvelles options :djadminopt:`--natural-foreign` et :djadminopt:`--natural-primary` pour :djadmin:`dumpdata`, et les nouveaux arguments ``use_natural_foreign_keys`` et ``use_natural_primary_keys`` pour ``serializers.serialize()``, permettent l'utilisation de clés primaires et naturelles lors de la sérialisation."

# 6115c0f1f78c4701991e1304c6652265
#: ../../../../1.9/docs/releases/1.7.txt:715
msgid ""
"It is no longer necessary to provide the cache table name or the "
":djadminopt:`--database` option for the :djadmin:`createcachetable` command."
" Django takes this information from your settings file. If you have "
"configured multiple caches or multiple databases, all cache tables are "
"created."
msgstr "Il n'est plus nécessaire de fournir le nom de la table de cache ou l'option :djadminopt:`--database` pour la commande :djadmin:`createcachetable`. Django prend ces informations de votre fichier de réglages. Si vous avez configuré plusieurs caches ou plusieurs bases de données, toutes les tables de cache sont créées."

# 1b67cd00977f46ab9062adfdada6361e
#: ../../../../1.9/docs/releases/1.7.txt:720
msgid "The :djadmin:`runserver` command received several improvements:"
msgstr "La commande :djadmin:`runserver` a reçu plusieurs améliorations :"

# 810b057908834bdbb6ec5ccce88067d9
#: ../../../../1.9/docs/releases/1.7.txt:722
msgid ""
"On Linux systems, if pyinotify_ is installed, the development server will "
"reload immediately when a file is changed. Previously, it polled the "
"filesystem for changes every second. That caused a small delay before "
"reloads and reduced battery life on laptops."
msgstr "Sur les systèmes Linux, si pyinotify_ est installé, le serveur de développement se rechargera immédiatement lorsqu'un fichier est modifié. Auparavant, il interrogeait le système de fichiers sur les changements, toutes les secondes. Cela causait un léger retard avant le rechargement et réduisait la vie de la batterie sur les ordinateurs portables."

# 1211debabb4b43849759f1e4804d99a6
#: ../../../../1.9/docs/releases/1.7.txt:729
msgid ""
"In addition, the development server automatically reloads when a translation"
" file is updated, i.e. after running :djadmin:`compilemessages`."
msgstr "En outre, le serveur de développement se recharge automatiquement lorsqu'un fichier de traduction est mis à jour, i.e. après l'exécution de :djadmin:`compilemessages`."

# f16334ee96704f2098d31f0fb08384ec
#: ../../../../1.9/docs/releases/1.7.txt:733
msgid ""
"All HTTP requests are logged to the console, including requests for static "
"files or ``favicon.ico`` that used to be filtered out."
msgstr "Toutes les requêtes HTTP sont enregistrées dans la console, y compris les requêtes de fichiers statiques ou celles du ``favicon.ico`` qui étaient habituellement filtrées."

# c081ee1121014e6d84f5ae362933602c
#: ../../../../1.9/docs/releases/1.7.txt:736
msgid ""
"Management commands can now produce syntax colored output under Windows if "
"the ANSICON third-party tool is installed and active."
msgstr "Les commandes de gestion peuvent maintenant produire une syntaxe de sortie colorisée sous Windows, si l'outil tiers ANSICON est installé et actif."

# 5517006e9af24251ac5d8af24d2452c5
#: ../../../../1.9/docs/releases/1.7.txt:739
msgid ""
":djadmin:`collectstatic` command with symlink option is now supported on "
"Windows NT 6 (Windows Vista and newer)."
msgstr "La commande :djadmin:`collectstatic` prend désormais en charge l'option de lien symbolique sur Windows NT 6 (Windows Vista et plus récent)."

# 784119f1cbec425cb94ec6465c336f21
#: ../../../../1.9/docs/releases/1.7.txt:742
msgid ""
"Initial SQL data now works better if the sqlparse_ Python library is "
"installed."
msgstr ""

# fa6b7f19d0714f7b8c71453dbbc45b7d
#: ../../../../1.9/docs/releases/1.7.txt:745
msgid ""
"Note that it's deprecated in favor of the "
":class:`~django.db.migrations.operations.RunSQL` operation of migrations, "
"which benefits from the improved behavior."
msgstr "Notez que cette pratique est déconseillée en faveur de l'opération :class:`~django.db.migrations.operations.RunSQL` des migrations, qui bénéficie du comportement amélioré."

# c3af85ac0454400fb0603fac8b07cf4f
#: ../../../../1.9/docs/releases/1.7.txt:754
msgid ""
"The :meth:`QuerySet.update_or_create() "
"<django.db.models.query.QuerySet.update_or_create>` method was added."
msgstr "La méthode :meth:`QuerySet.update_or_create() <django.db.models.query.QuerySet.update_or_create>` a été ajoutée."

# a14f50fdcefa48d18559783d3342bd80
#: ../../../../1.9/docs/releases/1.7.txt:757
msgid ""
"The new :attr:`~django.db.models.Options.default_permissions` model ``Meta``"
" option allows you to customize (or disable) creation of the default add, "
"change, and delete permissions."
msgstr "La nouvelle option ``Meta`` de modèle :attr:`~django.db.models.Options.default_permissions` vous permet de personnaliser (ou de désactiver) la création des autorisations d'ajout, modification et suppression, par défaut."

# 2f99c40621e54a25b384aed40f5cecb0
#: ../../../../1.9/docs/releases/1.7.txt:761
msgid ""
"Explicit :class:`~django.db.models.OneToOneField` for :ref:`multi-table-"
"inheritance` are now discovered in abstract classes."
msgstr "Les :class:`~django.db.models.OneToOneField` explicites pour l':ref:`multi-table-inheritance` sont maintenant découverts dans les classes abstraites."

# 8218a10cfb0344faaa299a94138c236f
#: ../../../../1.9/docs/releases/1.7.txt:764
msgid ""
"It is now possible to avoid creating a backward relation for "
":class:`~django.db.models.OneToOneField` by setting its "
":attr:`~django.db.models.ForeignKey.related_name` to ``'+'`` or ending it "
"with ``'+'``."
msgstr ""

# 2f1ff9a7fb284f70b4df12d37ec12226
#: ../../../../1.9/docs/releases/1.7.txt:769
msgid ""
":class:`F expressions <django.db.models.F>` support the power operator "
"(``**``)."
msgstr "Les :class:`expressions F <django.db.models.F>` supporte l'opérateur puissance (``**``)."

# fc22f9dccc574c05833ecfa185d86575
#: ../../../../1.9/docs/releases/1.7.txt:772
msgid ""
"The ``remove()`` and ``clear()`` methods of the related managers created by "
"``ForeignKey`` and ``GenericForeignKey`` now accept the ``bulk`` keyword "
"argument to control whether or not to perform operations in bulk (i.e. using"
" ``QuerySet.update()``). Defaults to ``True``."
msgstr "Les méthodes ``remove()`` et ``clean()`` des gestionnaires connexes créés par ``ForeignKey`` et ``GenericForeignKey`` acceptent maintenant l'argument mot-clef ``bulk`` pour contrôler l'utilisation ou non des opérations en vrac (i.e. en utilisant ``QuerySet.update()``). Par défaut, ``True``."

# 59511a66f6f9455db4fe367ee2aedd39
#: ../../../../1.9/docs/releases/1.7.txt:777
msgid ""
"It is now possible to use ``None`` as a query value for the :lookup:`iexact`"
" lookup."
msgstr "Il est maintenant possible d'utiliser ``None`` comme valeur de requête pour la recherche :lookup:`iexact`."

# 281a350a4f21469b85791f7036f091d6
#: ../../../../1.9/docs/releases/1.7.txt:780
msgid ""
"It is now possible to pass a callable as value for the attribute "
":attr:`~django.db.models.ForeignKey.limit_choices_to` when defining a "
"``ForeignKey`` or ``ManyToManyField``."
msgstr "Il est maintenant possible de passer un appelable comme valeur de l'attribut :attr:`~django.db.models.ForeignKey.limit_choices_to` lors de la définition d'un ``ForeignKey`` ou d'un ``ManyToManyField``."

# 7af0425592ec4d49a6c3c8563bf688ed
#: ../../../../1.9/docs/releases/1.7.txt:784
msgid ""
"Calling :meth:`only() <django.db.models.query.QuerySet.only>` and "
":meth:`defer() <django.db.models.query.QuerySet.defer>` on the result of "
":meth:`QuerySet.values() <django.db.models.query.QuerySet.values>` now "
"raises an error (before that, it would either result in a database error or "
"incorrect data)."
msgstr "L'appel à :meth:`only() <django.db.models.query.QuerySet.only>` et :meth:`defer() <django.db.models.query.QuerySet.defer>` sur le résultat de :meth:`QuerySet.values() <django.db.models.query.QuerySet.values>` lève maintenant une erreur (avant cela, il résultait soit en une erreur de base de données ou des données incorrectes)."

# 42ab93eadc114650b4c72d0b822cf723
#: ../../../../1.9/docs/releases/1.7.txt:790
msgid ""
"You can use a single list for "
":attr:`~django.db.models.Options.index_together` (rather than a list of "
"lists) when specifying a single set of fields."
msgstr "Vous pouvez utiliser une seule liste pour :attr:`~django.db.models.Options.index_together` (plutôt qu'une liste de listes) lors de la spécification d'un seul ensemble de champs."

# 58bb59cb84704d62912f4eb8bfc00c85
#: ../../../../1.9/docs/releases/1.7.txt:793
msgid ""
"Custom intermediate models having more than one foreign key to any of the "
"models participating in a many-to-many relationship are now permitted, "
"provided you explicitly specify which foreign keys should be used by setting"
" the new :attr:`ManyToManyField.through_fields "
"<django.db.models.ManyToManyField.through_fields>` argument."
msgstr "Les modèles personnalisés intermédiaires ayant plus d'une clé étrangère vers l'un des modèles participant à une relation multiple sont maintenant autorisés, à condition que vous spécifiez explicitement quelles clés étrangères doivent être utilisées en configurant le nouvel argument :attr:`ManyToManyField.through_fields <django.db.models.ManyToManyField.through_fields>`."

# 1d343c83902240fe98611185afb49ae5
#: ../../../../1.9/docs/releases/1.7.txt:799
msgid ""
"Assigning a model instance to a non-relation field will now throw an error. "
"Previously this used to work if the field accepted integers as input as it "
"took the primary key."
msgstr "L''assignation d'une instance de modèle à un champ non-relationnel lèvera maintenant une erreur. Auparavant, cela fonctionnait si le champ jouant le rôle de clé primaire acceptait les entiers en entrée."

# 2ef533e3d3a3498a8ef449398a7107e2
#: ../../../../1.9/docs/releases/1.7.txt:803
msgid ""
"Integer fields are now validated against database backend specific min and "
"max values based on their :meth:`internal_type "
"<django.db.models.Field.get_internal_type>`. Previously model field "
"validation didn't prevent values out of their associated column data type "
"range from being saved resulting in an integrity error."
msgstr "Les champs d'entiers sont maintenant validés avec les valeurs max et min spécifiques au moteur de base de données en fonction de leur :meth:`internal_type <django.db.models.Field.get_internal_type>`. Auparavant, la validation de champ de modèle n’empêchait pas les valeurs qui sortait de leur gamme de valeurs, relatives au type de colonne, d'être enregistrées; résultant alors en une erreur d'intégrité."

# 87d68505b68c44ef8400f649d70c0fb3
#: ../../../../1.9/docs/releases/1.7.txt:808
msgid ""
"It is now possible to explicitly "
":meth:`~django.db.models.query.QuerySet.order_by` a relation ``_id`` field "
"by using its attribute name."
msgstr "Il est maintenant possible d'utiliser :meth:`~django.db.models.query.QuerySet.order_by` de façon explicite avec un champ de relation ``_id`` en utilisant son nom d'attribut."

# e3b8057dbfba40e0aab0d1ef03da21a0
#: ../../../../1.9/docs/releases/1.7.txt:814
msgid ""
"The ``enter`` argument was added to the "
":data:`~django.test.signals.setting_changed` signal."
msgstr "L'argument ``enter`` a été ajouté au signal :data:`~django.test.signals.setting_changed`."

# b2c82e6a685e4fda98faf645e1867c2c
#: ../../../../1.9/docs/releases/1.7.txt:817
msgid ""
"The model signals can be now be connected to using a ``str`` of the "
"``'app_label.ModelName'`` form – just like related fields – to lazily "
"reference their senders."
msgstr "Les signaux de modèle peuvent maintenant être connectés à l'aide d'un ``str`` au format ``'app_label.ModelName'`` -- tout comme les champs connexes -- pour référencer de manière paresseuse leurs émetteurs."

# d10752ff21e6490a915d92ffb16557ce
#: ../../../../1.9/docs/releases/1.7.txt:824
msgid ""
"The :meth:`Context.push() <django.template.Context.push>` method now returns"
" a context manager which automatically calls :meth:`pop() "
"<django.template.Context.pop>` upon exiting the ``with`` statement. "
"Additionally, :meth:`push() <django.template.Context.push>` now accepts "
"parameters that are passed to the ``dict`` constructor used to build the new"
" context level."
msgstr "La méthode :meth:`Context.push() <django.template.Context.push>` retourne maintenant un gestionnaire de contexte qui appelle automatiquement :meth:`pop() <django.template.Context.pop>` à la sortie de la déclaration ``with``. En outre, :meth:`push() <django.template.Context.push>` accepte désormais des paramètres qui sont passés au ``dict`` du constructeur qui est utilisé pour construire le nouveau niveau de contexte."

# 2e314f7604294b1d9228c10fcabbed3b
#: ../../../../1.9/docs/releases/1.7.txt:831
msgid ""
"The new :meth:`Context.flatten() <django.template.Context.flatten>` method "
"returns a ``Context``'s stack as one flat dictionary."
msgstr "La nouvelle méthode :meth:`Context.flatten() <django.template.Context.flatten>` retourne une pile de ``Context`` sous la forme d'un dictionnaire unique à plat."

# afd057b45e6a45d9b30b66b57442b9a2
#: ../../../../1.9/docs/releases/1.7.txt:834
msgid ""
"``Context`` objects can now be compared for equality (internally, this uses "
":meth:`Context.flatten() <django.template.Context.flatten>` so the internal "
"structure of each ``Context``'s stack doesn't matter as long as their "
"flattened version is identical)."
msgstr "Les objets ``Context`` peuvent désormais être comparés pour l'égalité (en interne, cela utilise :meth:`Context.flatten() <django.template.Context.flatten>` de sorte que la structure interne de chaque pile de ``Context`` n'a pas d'importance tant que leur version aplatie est identique)."

# b171f78013184c6e80354436917bb8e2
#: ../../../../1.9/docs/releases/1.7.txt:839
msgid ""
"The :ttag:`widthratio` template tag now accepts an ``\"as\"`` parameter to "
"capture the result in a variable."
msgstr "La balise de gabarit :ttag:`widthratio` accepte maintenant un paramère ``\"as\"`` pour capturer le résultat dans une variable."

# 20d40601462d443593f2363cc854b1da
#: ../../../../1.9/docs/releases/1.7.txt:842
msgid ""
"The :ttag:`include` template tag will now also accept anything with a "
"``render()`` method (such as a ``Template``) as an argument. String "
"arguments will be looked up using "
":func:`~django.template.loader.get_template` as always."
msgstr "La balise de gabarit :ttag:`include` acceptera aussi désormais toute chose avec une méthode ``render()`` (comme un ``Template``) comme argument. Les arguments sous forme de chaînes seront, comme toujours, recherchés à l'aide de :func:`~django.template.loader.get_template`."

# 3ee7c3b31c12479abcfc5f4fbe3f4c33
#: ../../../../1.9/docs/releases/1.7.txt:847
msgid "It is now possible to :ttag:`include` templates recursively."
msgstr "Il est maintenant possible d'inclure les gabarits récursivement avec :ttag:`include`."

# 92e63124182d44aeb86ee7baa9c61163
#: ../../../../1.9/docs/releases/1.7.txt:849
msgid ""
"Template objects now have an origin attribute set when ``TEMPLATE_DEBUG`` is"
" ``True``. This allows template origins to be inspected and logged outside "
"of the ``django.template`` infrastructure."
msgstr ""

# b1cebfd3878d4ed1acf22ebe9b156a0f
#: ../../../../1.9/docs/releases/1.7.txt:853
msgid ""
"``TypeError`` exceptions are no longer silenced when raised during the "
"rendering of a template."
msgstr "Les exceptions ``TypeError`` ne sont plus réduites au silence lorsqu'elles sont levées au cours du rendu d'un gabarit."

# 0a541f908a3f49beafe3473f421efcb5
#: ../../../../1.9/docs/releases/1.7.txt:856
msgid ""
"The following functions now accept a ``dirs`` parameter which is a list or "
"tuple to override ``TEMPLATE_DIRS``:"
msgstr ""

# 6dba4813cca041249750ab592649b6a8
# a072f269a67c41bcb0a071afc56a0824
#: ../../../../1.9/docs/releases/1.7.txt:859
#: ../../../../1.9/docs/releases/1.8.txt:1593
msgid ":func:`django.template.loader.get_template()`"
msgstr ":func:`django.template.loader.get_template()`"

# 0115c6cfcd4f472e991087c908700fbe
# 7f041ca4cb794c799696c653949184f8
#: ../../../../1.9/docs/releases/1.7.txt:860
#: ../../../../1.9/docs/releases/1.8.txt:1594
msgid ":func:`django.template.loader.select_template()`"
msgstr ":func:`django.template.loader.select_template()`"

# 5b659e47a106435d85ca6781366c82ef
# 79238b9d1b3345a09fce9a7b8631ce16
#: ../../../../1.9/docs/releases/1.7.txt:861
#: ../../../../1.9/docs/releases/1.8.txt:1595
msgid ":func:`django.shortcuts.render()`"
msgstr ":func:`django.shortcuts.render()`"

# 89bec7a202114fb6be89b44256ee9f9d
# e9b310738b81434ea2b17b948a7a23c3
# fc0422115a0a4548af12ddcd898085d2
#: ../../../../1.9/docs/releases/1.7.txt:862
#: ../../../../1.9/docs/releases/1.8.txt:1563
#: ../../../../1.9/docs/releases/1.8.txt:1596
msgid "``django.shortcuts.render_to_response()``"
msgstr "``django.shortcuts.render_to_response()``"

# 931466978ee5480fa9723a895e3b8fb8
#: ../../../../1.9/docs/releases/1.7.txt:864
msgid ""
"The :tfilter:`time` filter now accepts timezone-related :ref:`format "
"specifiers <date-and-time-formatting-specifiers>` ``'e'``, ``'O'`` , ``'T'``"
" and ``'Z'`` and is able to digest :ref:`time-zone-aware "
"<naive_vs_aware_datetimes>` ``datetime`` instances performing the expected "
"rendering."
msgstr ""

# 3a58b419c3404571b94c2312c57c83c4
#: ../../../../1.9/docs/releases/1.7.txt:870
msgid ""
"The :ttag:`cache` tag will now try to use the cache called "
"\"template_fragments\" if it exists and fall back to using the default cache"
" otherwise. It also now accepts an optional ``using`` keyword argument to "
"control which cache it uses."
msgstr ""

# c701e59811024ce5ab836e0792ed3c57
#: ../../../../1.9/docs/releases/1.7.txt:875
msgid ""
"The new :tfilter:`truncatechars_html` filter truncates a string to be no "
"longer than the specified number of characters, taking HTML into account."
msgstr ""

# 6896c473893e42f3845120ba9586f1d6
# f1b7af976fad41bfa427b9bfd794686c
# 684db01dc92440899b801f097de95c66
#: ../../../../1.9/docs/releases/1.7.txt:879
#: ../../../../1.9/docs/releases/1.8.txt:579
#: ../../../../1.9/docs/releases/1.9.txt:551
msgid "Requests and Responses"
msgstr "Requêtes et réponses"

# e205ee035e094c3aa6a7c5172c0b73c3
#: ../../../../1.9/docs/releases/1.7.txt:881
msgid ""
"The new :attr:`HttpRequest.scheme <django.http.HttpRequest.scheme>` "
"attribute specifies the scheme of the request (``http`` or ``https`` "
"normally)."
msgstr ""

# 7d5c3ffd5dfc486991d9a63da8f00572
#: ../../../../1.9/docs/releases/1.7.txt:885
msgid ""
"The shortcut :func:`redirect() <django.shortcuts.redirect>` now supports "
"relative URLs."
msgstr ""

# a1c7469f56de4f39a7e2a6cbd13bb2ef
#: ../../../../1.9/docs/releases/1.7.txt:888
msgid ""
"The new :class:`~django.http.JsonResponse` subclass of "
":class:`~django.http.HttpResponse` helps easily create JSON-encoded "
"responses."
msgstr ""

# 3c6e2221b3dc4bb482f998b41939c9a7
# 203a2e22e2d44d3ca58ac3eaa21caf79
# 7c4f313748044aa59bc2e228df1e9dd8
#: ../../../../1.9/docs/releases/1.7.txt:892
#: ../../../../1.9/docs/releases/1.8.txt:626
#: ../../../../1.9/docs/releases/1.9.txt:639
msgid "Tests"
msgstr "Tests"

# e9f34809f18d42c5bef9cecd140014f5
#: ../../../../1.9/docs/releases/1.7.txt:894
msgid ""
":class:`~django.test.runner.DiscoverRunner` has two new attributes, "
":attr:`~django.test.runner.DiscoverRunner.test_suite` and "
":attr:`~django.test.runner.DiscoverRunner.test_runner`, which facilitate "
"overriding the way tests are collected and run."
msgstr ""

# 5b62af28560c4e979bd92844a3e3d07f
#: ../../../../1.9/docs/releases/1.7.txt:899
msgid ""
"The ``fetch_redirect_response`` argument was added to "
":meth:`~django.test.SimpleTestCase.assertRedirects`. Since the test client "
"can't fetch externals URLs, this allows you to use ``assertRedirects`` with "
"redirects that aren't part of your Django app."
msgstr ""

# ed90464079b34d378e319977194fb74f
#: ../../../../1.9/docs/releases/1.7.txt:904
msgid ""
"Correct handling of scheme when making comparisons in "
":meth:`~django.test.SimpleTestCase.assertRedirects`."
msgstr ""

# b996fb5bad8a4cd4b736248f0c1f34a0
#: ../../../../1.9/docs/releases/1.7.txt:907
msgid ""
"The ``secure`` argument was added to all the request methods of "
":class:`~django.test.Client`. If ``True``, the request will be made through "
"HTTPS."
msgstr ""

# e27d86887c3a4fe0be2b8d5efbc04ab7
#: ../../../../1.9/docs/releases/1.7.txt:911
msgid ""
":meth:`~django.test.TransactionTestCase.assertNumQueries` now prints out the"
" list of executed queries if the assertion fails."
msgstr ""

# 5181100b308642459670874e164dff1b
#: ../../../../1.9/docs/releases/1.7.txt:914
msgid ""
"The ``WSGIRequest`` instance generated by the test handler is now attached "
"to the :attr:`django.test.Response.wsgi_request` attribute."
msgstr ""

# b691282c7b2d43d99da3608f16cfb0bf
#: ../../../../1.9/docs/releases/1.7.txt:917
msgid ""
"The database settings for testing have been collected into a dictionary "
"named :setting:`TEST <DATABASE-TEST>`."
msgstr ""

# ba16c754a92748898d5f208e6f3b05c2
#: ../../../../1.9/docs/releases/1.7.txt:921
msgid "Utilities"
msgstr "Utilitaires"

# f23b1cbdb0834f9086e27c5c1a9d1dba
# 676f4fe54782465196ff1527b957c25c
# 6aa7b3e9b8f140388d8c57164cbe9678
#: ../../../../1.9/docs/releases/1.7.txt:927
#: ../../../../1.9/docs/releases/1.8.txt:661
#: ../../../../1.9/docs/releases/1.9.txt:662
msgid "Validators"
msgstr "Validateurs"

# 7642e98eb4ce48e78db7b732a800cbcb
#: ../../../../1.9/docs/releases/1.7.txt:929
msgid ""
":class:`~django.core.validators.RegexValidator` now accepts the optional "
":attr:`~django.core.validators.RegexValidator.flags` and Boolean "
":attr:`~django.core.validators.RegexValidator.inverse_match` arguments. The "
":attr:`~django.core.validators.RegexValidator.inverse_match` attribute "
"determines if the :exc:`~django.core.exceptions.ValidationError` should be "
"raised when the regular expression pattern matches (``True``) or does not "
"match (``False``, by default) the provided ``value``. The "
":attr:`~django.core.validators.RegexValidator.flags` attribute sets the "
"flags used when compiling a regular expression string."
msgstr ""

# bccec9907be54cb1bf31e4306df2e990
#: ../../../../1.9/docs/releases/1.7.txt:939
msgid ""
":class:`~django.core.validators.URLValidator` now accepts an optional "
"``schemes`` argument which allows customization of the accepted URI schemes "
"(instead of the defaults ``http(s)`` and ``ftp(s)``)."
msgstr ""

# 8ec2821fa13344cdb353f96533f8a844
#: ../../../../1.9/docs/releases/1.7.txt:943
msgid ""
":func:`~django.core.validators.validate_email` now accepts addresses with "
"IPv6 literals, like ``example@[2001:db8::1]``, as specified in RFC 5321."
msgstr ""

# 0b214b2bda28488e883bcab8021b614e
#: ../../../../1.9/docs/releases/1.7.txt:947
msgid "Backwards incompatible changes in 1.7"
msgstr ""

# ede9e5503b7c4cd19830299a0fc81cb5
#: ../../../../1.9/docs/releases/1.7.txt:951
msgid ""
"In addition to the changes outlined in this section, be sure to review the "
":ref:`deprecation plan <deprecation-removed-in-1.7>` for any features that "
"have been removed. If you haven't updated your code within the deprecation "
"timeline for a given feature, its removal may appear as a backwards "
"incompatible change."
msgstr ""

# 19bcf1da81434711993277969c8253e9
#: ../../../../1.9/docs/releases/1.7.txt:958
msgid "``allow_syncdb`` / ``allow_migrate``"
msgstr ""

# 0b6786f6b9b64b93866d41ea144b37bb
#: ../../../../1.9/docs/releases/1.7.txt:960
msgid ""
"While Django will still look at ``allow_syncdb`` methods even though they "
"should be renamed to ``allow_migrate``, there is a subtle difference in "
"which models get passed to these methods."
msgstr ""

# 77847b0b098749c79efeb9c09539d27a
#: ../../../../1.9/docs/releases/1.7.txt:964
msgid ""
"For apps with migrations, ``allow_migrate`` will now get passed "
":ref:`historical models <historical-models>`, which are special versioned "
"models without custom attributes, methods or managers. Make sure your "
"``allow_migrate`` methods are only referring to fields or other items in "
"``model._meta``."
msgstr ""

# 2b4568c0bb574c25aa8dee9ad4b61c63
#: ../../../../1.9/docs/releases/1.7.txt:970
msgid "initial_data"
msgstr "initial_data"

# 8702b5c334cc4f5893e64be9cea04bb4
#: ../../../../1.9/docs/releases/1.7.txt:972
msgid ""
"Apps with migrations will not load ``initial_data`` fixtures when they have "
"finished migrating. Apps without migrations will continue to load these "
"fixtures during the phase of ``migrate`` which emulates the old ``syncdb`` "
"behavior, but any new apps will not have this support."
msgstr ""

# 7c429ffc5b6e484aa110a90464e4af67
#: ../../../../1.9/docs/releases/1.7.txt:977
msgid ""
"Instead, you are encouraged to load initial data in migrations if you need "
"it (using the ``RunPython`` operation and your model classes); this has the "
"added advantage that your initial data will not need updating every time you"
" change the schema."
msgstr ""

# bb8a3c814d8347488103c1b30c1ab5cf
#: ../../../../1.9/docs/releases/1.7.txt:982
msgid ""
"Additionally, like the rest of Django's old ``syncdb`` code, "
"``initial_data`` has been started down the deprecation path and will be "
"removed in Django 1.9."
msgstr ""

# ecc694f229bc4631a7db3ad9f91212d3
#: ../../../../1.9/docs/releases/1.7.txt:986
msgid "deconstruct() and serializability"
msgstr ""

# bcb443a575fb4d33867d52a79790f010
#: ../../../../1.9/docs/releases/1.7.txt:988
msgid ""
"Django now requires all Field classes and all of their constructor arguments"
" to be serializable. If you modify the constructor signature in your custom "
"Field in any way, you'll need to implement a deconstruct() method; we've "
"expanded the custom field documentation with :ref:`instructions on "
"implementing this method <custom-field-deconstruct-method>`."
msgstr ""

# c4a5dc4c118a436f94194fa97784c1e0
#: ../../../../1.9/docs/releases/1.7.txt:994
msgid ""
"The requirement for all field arguments to be :ref:`serializable <migration-"
"serializing>` means that any custom class instances being passed into Field "
"constructors - things like custom Storage subclasses, for instance - need to"
" have a :ref:`deconstruct method defined on them as well <custom-"
"deconstruct-method>`, though Django provides a handy class decorator that "
"will work for most applications."
msgstr ""

# 5149e0a89d424a5ab44135d67dd7ffd4
#: ../../../../1.9/docs/releases/1.7.txt:1002
msgid "App-loading changes"
msgstr ""

# 2e995d28dc4e41d787b35dbbd62573c5
#: ../../../../1.9/docs/releases/1.7.txt:1005
msgid "Start-up sequence"
msgstr ""

# fc5e5f3467eb47fc882c586b46a449c5
#: ../../../../1.9/docs/releases/1.7.txt:1007
msgid ""
"Django 1.7 loads application configurations and models as soon as it starts."
" While this behavior is more straightforward and is believed to be more "
"robust, regressions cannot be ruled out. See :ref:`applications-"
"troubleshooting` for solutions to some problems you may encounter."
msgstr ""

# 31bda67ffb6149589fc274176aba5dd7
#: ../../../../1.9/docs/releases/1.7.txt:1013
msgid "Standalone scripts"
msgstr "Scripts autonomes"

# 6fedaa92af4a4efbaa3dd3dd495467cc
#: ../../../../1.9/docs/releases/1.7.txt:1015
msgid ""
"If you're using Django in a plain Python script — rather than a management "
"command — and you rely on the :envvar:`DJANGO_SETTINGS_MODULE` environment "
"variable, you must now explicitly initialize Django at the beginning of your"
" script with::"
msgstr ""

# a08e271a2860423ca6c030222a7a3ac5
#: ../../../../1.9/docs/releases/1.7.txt:1023
msgid "Otherwise, you will hit an ``AppRegistryNotReady`` exception."
msgstr ""

# 36b6fd0dd4e04fffb7c49b95e765af21
#: ../../../../1.9/docs/releases/1.7.txt:1026
msgid "WSGI scripts"
msgstr "Les scripts WSGI"

# 6f0c8d2690d0431daaa23c84c9ea3e89
#: ../../../../1.9/docs/releases/1.7.txt:1028
msgid ""
"Until Django 1.3, the recommended way to create a WSGI application was::"
msgstr ""

# 810c3d65944e4368af8e34115c3b3efe
#: ../../../../1.9/docs/releases/1.7.txt:1033
msgid "In Django 1.4, support for WSGI was improved and the API changed to::"
msgstr ""

# 012f1312d8a6425ea3e056f56ebb75e9
#: ../../../../1.9/docs/releases/1.7.txt:1038
msgid ""
"If you're still using the former style in your WSGI script, you need to "
"upgrade to the latter, or you will hit an ``AppRegistryNotReady`` exception."
msgstr ""

# d1f02c10c9224aa5a1a3aa43dc475222
#: ../../../../1.9/docs/releases/1.7.txt:1042
msgid "App registry consistency"
msgstr ""

# d8167fbabb1c4813bff26d366cb2c6dc
#: ../../../../1.9/docs/releases/1.7.txt:1044
msgid ""
"It is no longer possible to have multiple installed applications with the "
"same label. In previous versions of Django, this didn't always work "
"correctly, but didn't crash outright either."
msgstr ""

# 8aebc10ffb804963aae9c15543196a33
#: ../../../../1.9/docs/releases/1.7.txt:1048
msgid ""
"If you have two apps with the same label, you should create an "
":class:`~django.apps.AppConfig` for one of them and override its "
":class:`~django.apps.AppConfig.label` there. You should then adjust your "
"code wherever it references this application or its models with the old "
"label."
msgstr ""

# 5babf0c68f8a4b4d8b0b3841991503ea
#: ../../../../1.9/docs/releases/1.7.txt:1053
msgid ""
"It isn't possible to import the same model twice through different paths any"
" more. As of Django 1.6, this may happen only if you're manually putting a "
"directory and a subdirectory on :envvar:`PYTHONPATH`. Refer to the section "
"on the new project layout in the :doc:`1.4 release notes </releases/1.4>` "
"for migration instructions."
msgstr ""

# 92862c396e574d5698abf159d1d11726
#: ../../../../1.9/docs/releases/1.7.txt:1059
msgid "You should make sure that:"
msgstr "Vous devez vous assurez de :"

# 80faec57e754482a882da4765321877a
#: ../../../../1.9/docs/releases/1.7.txt:1061
msgid ""
"All models are defined in applications that are listed in "
":setting:`INSTALLED_APPS` or have an explicit "
":attr:`~django.db.models.Options.app_label`."
msgstr ""

# 4e0ca7f1fbfd4760a7a8951af29d70f2
#: ../../../../1.9/docs/releases/1.7.txt:1065
msgid ""
"Models aren't imported as a side-effect of loading their application. "
"Specifically, you shouldn't import models in the root module of an "
"application nor in the module that define its configuration class."
msgstr ""

# 448c67b3e837463e82cd2ba9538102c4
#: ../../../../1.9/docs/releases/1.7.txt:1069
msgid ""
"Django will enforce these requirements as of version 1.9, after a "
"deprecation period."
msgstr ""

# 509ccab003bd4c29ad8931f0eeb429b9
#: ../../../../1.9/docs/releases/1.7.txt:1073
msgid "Subclassing AppCommand"
msgstr ""

# a4152c5c42e0440ba0b3bc23affc7712
#: ../../../../1.9/docs/releases/1.7.txt:1075
msgid ""
"Subclasses of :class:`~django.core.management.AppCommand` must now implement"
" a :meth:`~django.core.management.AppCommand.handle_app_config` method "
"instead of ``handle_app()``. This method receives an "
":class:`~django.apps.AppConfig` instance instead of a models module."
msgstr ""

# 1ceec7bc4473430bb5de5733cbaa663f
#: ../../../../1.9/docs/releases/1.7.txt:1081
msgid "Introspecting applications"
msgstr ""

# 49b59885210c48a08c0c146678983877
#: ../../../../1.9/docs/releases/1.7.txt:1083
msgid ""
"Since :setting:`INSTALLED_APPS` now supports application configuration "
"classes in addition to application modules, you should review code that "
"accesses this setting directly and use the app registry "
"(:attr:`django.apps.apps`) instead."
msgstr ""

# 64934c2b14e04c018abe4692836f0fbf
#: ../../../../1.9/docs/releases/1.7.txt:1087
msgid ""
"The app registry has preserved some features of the old app cache. Even "
"though the app cache was a private API, obsolete methods and arguments will "
"be removed through a standard deprecation path, with the exception of the "
"following changes that take effect immediately:"
msgstr ""

# 9cf33cdfb7d54b408dd2aa4d2eab89ca
#: ../../../../1.9/docs/releases/1.7.txt:1092
msgid ""
"``get_model`` raises :exc:`LookupError` instead of returning ``None`` when "
"no model is found."
msgstr ""

# 12f71303dad74ddf8d5bc772c2f6dd52
#: ../../../../1.9/docs/releases/1.7.txt:1095
msgid ""
"The ``only_installed`` argument of ``get_model`` and ``get_models`` no "
"longer exists, nor does the ``seed_cache`` argument of ``get_model``."
msgstr ""

# 7efa59cfa3a14e1ab7c9c086f547327a
#: ../../../../1.9/docs/releases/1.7.txt:1099
msgid "Management commands and order of :setting:`INSTALLED_APPS`"
msgstr ""

# bdc5514bf8ea432aa24960067ef70d24
#: ../../../../1.9/docs/releases/1.7.txt:1101
msgid ""
"When several applications provide management commands with the same name, "
"Django loads the command from the application that comes first in "
":setting:`INSTALLED_APPS`. Previous versions loaded the command from the "
"application that came last."
msgstr ""

# 3bd963c9ceda44da8d204be2deb3d94f
#: ../../../../1.9/docs/releases/1.7.txt:1106
msgid ""
"This brings discovery of management commands in line with other parts of "
"Django that rely on the order of :setting:`INSTALLED_APPS`, such as static "
"files, templates, and translations."
msgstr ""

# 6e3ea57d1bf24b1d86fd0a350f11b415
#: ../../../../1.9/docs/releases/1.7.txt:1113
msgid "``ValidationError`` constructor and internal storage"
msgstr ""

# 1b6e888990644186b14e0d864bc05ab3
#: ../../../../1.9/docs/releases/1.7.txt:1115
msgid ""
"The behavior of the ``ValidationError`` constructor has changed when it "
"receives a container of errors as an argument (e.g. a ``list`` or an "
"``ErrorList``):"
msgstr ""

# d51d7d3fbeb94b768c704db520ef2d84
#: ../../../../1.9/docs/releases/1.7.txt:1119
msgid ""
"It converts any strings it finds to instances of ``ValidationError`` before "
"adding them to its internal storage."
msgstr ""

# ae30cc66267546cc99660b6ef7001295
#: ../../../../1.9/docs/releases/1.7.txt:1122
msgid ""
"It doesn't store the given container but rather copies its content to its "
"own internal storage; previously the container itself was added to the "
"``ValidationError`` instance and used as internal storage."
msgstr ""

# 56bc60f1770949098334b9924bf1a825
#: ../../../../1.9/docs/releases/1.7.txt:1126
msgid ""
"This means that if you access the ``ValidationError`` internal storages, "
"such as ``error_list``; ``error_dict``; or the return value of "
"``update_error_dict()`` you may find instances of ``ValidationError`` where "
"you would have previously found strings."
msgstr ""

# 8330fb91b7d94613912fc4e501197c20
#: ../../../../1.9/docs/releases/1.7.txt:1131
msgid ""
"Also if you directly assigned the return value of ``update_error_dict()`` to"
" ``Form._errors`` you may inadvertently add `list` instances where "
"``ErrorList`` instances are expected. This is a problem because unlike a "
"simple `list`, an ``ErrorList`` knows how to handle instances of "
"``ValidationError``."
msgstr ""

# 8f0192a5154041a7a1d2fa9b9430d738
#: ../../../../1.9/docs/releases/1.7.txt:1137
msgid ""
"Most use-cases that warranted using these private APIs are now covered by "
"the newly introduced :meth:`Form.add_error() "
"<django.forms.Form.add_error()>` method::"
msgstr ""

# 8ae163e397b14e18a4215961a20b6f41
#: ../../../../1.9/docs/releases/1.7.txt:1153
msgid ""
"If you need both Django <= 1.6 and 1.7 compatibility you can't use "
":meth:`Form.add_error() <django.forms.Form.add_error()>` since it wasn't "
"available before Django 1.7, but you can use the following workaround to "
"convert any ``list`` into ``ErrorList``::"
msgstr ""

# 2c4ff9ea616a4ffa8cddcee9b0100094
#: ../../../../1.9/docs/releases/1.7.txt:1170
msgid "Behavior of ``LocMemCache`` regarding pickle errors"
msgstr ""

# 38ff86118ee848a19503113c98125aeb
#: ../../../../1.9/docs/releases/1.7.txt:1172
msgid ""
"An inconsistency existed in previous versions of Django regarding how pickle"
" errors are handled by different cache backends. "
"``django.core.cache.backends.locmem.LocMemCache`` used to fail silently when"
" such an error occurs, which is inconsistent with other backends and leads "
"to cache-specific errors. This has been fixed in Django 1.7, see "
":ticket:`21200` for more details."
msgstr ""

# b67a38ffb682448b8b394691b4fe3719
#: ../../../../1.9/docs/releases/1.7.txt:1180
msgid "Cache keys are now generated from the request's absolute URL"
msgstr ""

# 105fdda92d804dcbbb23e12474ad6986
#: ../../../../1.9/docs/releases/1.7.txt:1182
msgid ""
"Previous versions of Django generated cache keys using a request's path and "
"query string but not the scheme or host. If a Django application was serving"
" multiple subdomains or domains, cache keys could collide. In Django 1.7, "
"cache keys vary by the absolute URL of the request including scheme, host, "
"path, and query string. For example, the URL portion of a cache key is now "
"generated from ``https://www.example.com/path/to/?key=val`` rather than "
"``/path/to/?key=val``. The cache keys generated by Django 1.7 will be "
"different from the keys generated by older versions of Django. After "
"upgrading to Django 1.7, the first request to any previously cached URL will"
" be a cache miss."
msgstr ""

# 581b040ac23a4728ba52dc77d572d5a7
#: ../../../../1.9/docs/releases/1.7.txt:1193
msgid "Passing ``None`` to ``Manager.db_manager()``"
msgstr ""

# 2854512681194eb9a7f1f9dda2050647
#: ../../../../1.9/docs/releases/1.7.txt:1195
msgid ""
"In previous versions of Django, it was possible to use "
"``db_manager(using=None)`` on a model manager instance to obtain a manager "
"instance using default routing behavior, overriding any manually specified "
"database routing. In Django 1.7, a value of ``None`` passed to db_manager "
"will produce a router that *retains* any manually assigned database routing "
"-- the manager will *not* be reset. This was necessary to resolve an "
"inconsistency in the way routing information cascaded over joins. See "
":ticket:`13724` for more details."
msgstr ""

# 5bbf23d99b9c4ccfbd241ab0da1dc6c5
#: ../../../../1.9/docs/releases/1.7.txt:1205
msgid "pytz may be required"
msgstr "pytz peut être requis"

# 70a2ff6c4a2948ca9b2dfa04658cb47e
#: ../../../../1.9/docs/releases/1.7.txt:1207
msgid ""
"If your project handles datetimes before 1970 or after 2037 and Django "
"raises a :exc:`ValueError` when encountering them, you will have to install "
"pytz_. You may be affected by this problem if you use Django's time zone-"
"related date formats or :mod:`django.contrib.syndication`."
msgstr ""

# 92ecb16f1a2f450f90b6a0091df0ea14
#: ../../../../1.9/docs/releases/1.7.txt:1215
msgid "``remove()`` and ``clear()`` methods of related managers"
msgstr ""

# d4c409ca730b44fd96fc5eefa3b90714
#: ../../../../1.9/docs/releases/1.7.txt:1217
msgid ""
"The ``remove()`` and ``clear()`` methods of the related managers created by "
"``ForeignKey``, ``GenericForeignKey``, and ``ManyToManyField`` suffered from"
" a number of issues. Some operations ran multiple data modifying queries "
"without wrapping them in a transaction, and some operations didn't respect "
"default filtering when it was present (i.e. when the default manager on the "
"related model implemented a custom ``get_queryset()``)."
msgstr ""

# 74cc7bf406d14516918a9e0b6ce61331
#: ../../../../1.9/docs/releases/1.7.txt:1224
msgid "Fixing the issues introduced some backward incompatible changes:"
msgstr ""

# ddf355ab828a4a85a4a1f545c2b638f7
#: ../../../../1.9/docs/releases/1.7.txt:1226
msgid ""
"The default implementation of ``remove()`` for ``ForeignKey`` related "
"managers changed from a series of ``Model.save()`` calls to a single "
"``QuerySet.update()`` call. The change means that ``pre_save`` and "
"``post_save`` signals aren't sent anymore. You can use the ``bulk=False`` "
"keyword argument to revert to the previous behavior."
msgstr ""

# 12b7cb7ed9314756a78ee8c011ff639b
#: ../../../../1.9/docs/releases/1.7.txt:1232
msgid ""
"The ``remove()`` and ``clear()`` methods for ``GenericForeignKey`` related "
"managers now perform bulk delete. The ``Model.delete()`` method isn't called"
" on each instance anymore. You can use the ``bulk=False`` keyword argument "
"to revert to the previous behavior."
msgstr ""

# b8da42b00f1046a39787586e12bd0b65
#: ../../../../1.9/docs/releases/1.7.txt:1237
msgid ""
"The ``remove()`` and ``clear()`` methods for ``ManyToManyField`` related "
"managers perform nested queries when filtering is involved, which may or may"
" not be an issue depending on your database and your data itself. See "
":ref:`this note <nested-queries-performance>` for more details."
msgstr ""

# 593c05fb978141988f6edd66e97e67d5
#: ../../../../1.9/docs/releases/1.7.txt:1243
msgid "Admin login redirection strategy"
msgstr ""

# 46dc25b89ac14adcb83bc88332215a92
#: ../../../../1.9/docs/releases/1.7.txt:1245
msgid ""
"Historically, the Django admin site passed the request from an unauthorized "
"or unauthenticated user directly to the login view, without HTTP "
"redirection. In Django 1.7, this behavior changed to conform to a more "
"traditional workflow where any unauthorized request to an admin page will be"
" redirected (by HTTP status code 302) to the login page, with the ``next`` "
"parameter set to the referring path. The user will be redirected there after"
" a successful login."
msgstr ""

# f4450be04bdb490f85732f2f5ca4929e
#: ../../../../1.9/docs/releases/1.7.txt:1252
msgid ""
"Note also that the admin login form has been updated to not contain the "
"``this_is_the_login_form`` field (now unused) and the ``ValidationError`` "
"code has been set to the more regular ``invalid_login`` key."
msgstr ""

# d19f8b1d8c7744fca4eff70d19f9f8bb
#: ../../../../1.9/docs/releases/1.7.txt:1268
msgid ""
"This change was made because such errors can be caused by including an app "
"which expects global transactions (e.g. :setting:`ATOMIC_REQUESTS <DATABASE-"
"ATOMIC_REQUESTS>` set to ``True``), or Django's old autocommit behavior, in "
"a project which runs without them; and further, such errors may manifest as "
"data-corruption bugs. It was also made in Django 1.6.3."
msgstr ""

# cff65b3d10b743b6a57ba05935f7328c
#: ../../../../1.9/docs/releases/1.7.txt:1281
msgid "Contrib middleware removed from default :setting:`MIDDLEWARE_CLASSES`"
msgstr ""

# 1148ec0518c148018acf18e8cf66e47e
#: ../../../../1.9/docs/releases/1.7.txt:1283
msgid ""
"The :ref:`app-loading refactor <app-loading-refactor-17-release-note>` "
"deprecated using models from apps which are not part of the "
":setting:`INSTALLED_APPS` setting. This exposed an incompatibility between "
"the default :setting:`INSTALLED_APPS` and :setting:`MIDDLEWARE_CLASSES` in "
"the global defaults (``django.conf.global_settings``). To bring these "
"settings in sync and prevent deprecation warnings when doing things like "
"testing reusable apps with minimal settings, "
":class:`~django.contrib.sessions.middleware.SessionMiddleware`, "
":class:`~django.contrib.auth.middleware.AuthenticationMiddleware`, and "
":class:`~django.contrib.messages.middleware.MessageMiddleware` were removed "
"from the defaults. These classes will still be included in the default "
"settings generated by :djadmin:`startproject`. Most projects will not be "
"affected by this change but if you were not previously declaring the "
":setting:`MIDDLEWARE_CLASSES` in your project settings and relying on the "
"global default you should ensure that the new defaults are in line with your"
" project's needs. You should also check for any code that accesses "
"``django.conf.global_settings.MIDDLEWARE_CLASSES`` directly."
msgstr ""

# 7c91ba36f52148a496306cd147fce44a
#: ../../../../1.9/docs/releases/1.7.txt:1304
msgid ""
"The :meth:`django.core.files.uploadhandler.FileUploadHandler.new_file()` "
"method is now passed an additional ``content_type_extra`` parameter. If you "
"have a custom :class:`~django.core.files.uploadhandler.FileUploadHandler` "
"that implements ``new_file()``, be sure it accepts this new parameter."
msgstr ""

# cc613170ae5e40d7ab465aeb5b1dc83d
#: ../../../../1.9/docs/releases/1.7.txt:1309
msgid ""
":class:`ModelFormSet<django.forms.models.BaseModelFormSet>`\\s no longer "
"delete instances when ``save(commit=False)`` is called. See "
":attr:`~django.forms.formsets.BaseFormSet.can_delete` for instructions on "
"how to manually delete objects from deleted forms."
msgstr ""

# 24d72314c31345288382b5dd57ac4070
#: ../../../../1.9/docs/releases/1.7.txt:1314
msgid ""
"Loading empty fixtures emits a ``RuntimeWarning`` rather than raising "
":class:`~django.core.management.CommandError`."
msgstr ""

# 5e6fd3e84caa40fda3ea8cb349ec5a8e
#: ../../../../1.9/docs/releases/1.7.txt:1317
msgid ""
":func:`django.contrib.staticfiles.views.serve` will now raise an "
":exc:`~django.http.Http404` exception instead of "
":exc:`~django.core.exceptions.ImproperlyConfigured` when :setting:`DEBUG` is"
" ``False``. This change removes the need to conditionally add the view to "
"your root URLconf, which in turn makes it safe to reverse by name. It also "
"removes the ability for visitors to generate spurious HTTP 500 errors by "
"requesting static files that don't exist or haven't been collected yet."
msgstr ""

# 4456e52680fc4d22895a22bd9e5e27f9
#: ../../../../1.9/docs/releases/1.7.txt:1325
msgid ""
"The :meth:`django.db.models.Model.__eq__` method is now defined in a way "
"where instances of a proxy model and its base model are considered equal "
"when primary keys match. Previously only instances of exact same class were "
"considered equal on primary key match."
msgstr ""

# ab1e204954b8446eae760dae4fafcc1a
#: ../../../../1.9/docs/releases/1.7.txt:1330
msgid ""
"The :meth:`django.db.models.Model.__eq__` method has changed such that two "
"``Model`` instances without primary key values won't be considered equal "
"(unless they are the same instance)."
msgstr ""

# 79fa868a2cfb4c14b2faf69d9628ba7a
#: ../../../../1.9/docs/releases/1.7.txt:1334
msgid ""
"The :meth:`django.db.models.Model.__hash__` method will now raise "
"``TypeError`` when called on an instance without a primary key value. This "
"is done to avoid mutable ``__hash__`` values in containers."
msgstr ""

# aba80bc430cf4bcc8c2a5ed46cee9400
#: ../../../../1.9/docs/releases/1.7.txt:1338
msgid ""
":class:`~django.db.models.AutoField` columns in SQLite databases will now be"
" created using the ``AUTOINCREMENT`` option, which guarantees monotonic "
"increments. This will cause primary key numbering behavior to change on "
"SQLite, becoming consistent with most other SQL databases. This will only "
"apply to newly created tables. If you have a database created with an older "
"version of Django, you will need to migrate it to take advantage of this "
"feature. For example, you could do the following:"
msgstr ""

# 46d072e01dfb44c082f6bca0ba18c819
#: ../../../../1.9/docs/releases/1.7.txt:1346
msgid "Use :djadmin:`dumpdata` to save your data."
msgstr ""

# 606f4c001155486e9aa179a9cf45602f
#: ../../../../1.9/docs/releases/1.7.txt:1347
msgid "Rename the existing database file (keep it as a backup)."
msgstr ""

# dfc9e083d12547c9b3c745ca23bf0fee
#: ../../../../1.9/docs/releases/1.7.txt:1348
msgid "Run :djadmin:`migrate` to create the updated schema."
msgstr ""

# 68fcedda4e8d4a9e83f676a26f1451cc
#: ../../../../1.9/docs/releases/1.7.txt:1349
msgid "Use :djadmin:`loaddata` to import the fixtures you exported in (1)."
msgstr ""

# 62ac5d1882b94be19d5978a6c0b4096e
#: ../../../../1.9/docs/releases/1.7.txt:1351
msgid ""
"``django.contrib.auth.models.AbstractUser`` no longer defines a "
":meth:`~django.db.models.Model.get_absolute_url()` method. The old "
"definition returned  ``\"/users/%s/\" % urlquote(self.username)`` which was "
"arbitrary since applications may or may not define such a url in "
"``urlpatterns``. Define a ``get_absolute_url()`` method on your own custom "
"user object or use :setting:`ABSOLUTE_URL_OVERRIDES` if you want a URL for "
"your user."
msgstr ""

# f1e22e0c7dd8453c945ecf72ed84a724
#: ../../../../1.9/docs/releases/1.7.txt:1358
msgid ""
"The static asset-serving functionality of the "
":class:`django.test.LiveServerTestCase` class has been simplified: Now it's "
"only able to serve content already present in :setting:`STATIC_ROOT` when "
"tests are run. The ability to transparently serve all the static assets "
"(similarly to what one gets with :setting:`DEBUG = True <DEBUG>` at "
"development-time) has been moved to a new class that lives in the "
"``staticfiles`` application (the one actually in charge of such feature): "
":class:`django.contrib.staticfiles.testing.StaticLiveServerTestCase`. In "
"other words, ``LiveServerTestCase`` itself is less powerful but at the same "
"time has less magic."
msgstr ""

# 739adfd256164082b5361bada3e9b4cc
#: ../../../../1.9/docs/releases/1.7.txt:1369
msgid ""
"Rationale behind this is removal of dependency of non-contrib code on "
"contrib applications."
msgstr ""

# 303c9fd70445454890b112716eb2fbc3
#: ../../../../1.9/docs/releases/1.7.txt:1372
msgid ""
"The old cache URI syntax (e.g. ``\"locmem://\"``) is no longer supported. It"
" still worked, even though it was not documented or officially supported. If"
" you're still using it, please update to the current :setting:`CACHES` "
"syntax."
msgstr ""

# 0e8a3a4c97ef4ceabe8c2d6ede9bc0c4
#: ../../../../1.9/docs/releases/1.7.txt:1376
msgid ""
"The default ordering of ``Form`` fields in case of inheritance has changed "
"to follow normal Python MRO. Fields are now discovered by iterating through "
"the MRO in reverse with the topmost class coming last. This only affects you"
" if you relied on the default field ordering while having fields defined on "
"both the current class *and* on a parent ``Form``."
msgstr ""

# 8211e7b8597440b68e88b81c398d4dde
#: ../../../../1.9/docs/releases/1.7.txt:1382
msgid ""
"The ``required`` argument of :class:`~django.forms.SelectDateWidget` has "
"been removed. This widget now respects the form field's ``is_required`` "
"attribute like other widgets."
msgstr ""

# ce280784581d4f80a5be18a6afbe4c2b
#: ../../../../1.9/docs/releases/1.7.txt:1387
msgid ""
"``Widget.is_hidden`` is now a read-only property, getting its value by "
"introspecting the presence of ``input_type == 'hidden'``."
msgstr ""

# f0b1b5b2cc4b4ae8be7ee145309aa2c6
#: ../../../../1.9/docs/releases/1.7.txt:1390
msgid ""
":meth:`~django.db.models.query.QuerySet.select_related` now chains in the "
"same way as other similar calls like ``prefetch_related``. That is, "
"``select_related('foo', 'bar')`` is equivalent to "
"``select_related('foo').select_related('bar')``. Previously the latter would"
" have been equivalent to ``select_related('bar')``."
msgstr ""

# 32ea63eda75d47e486ba78796be4a9b6
#: ../../../../1.9/docs/releases/1.7.txt:1396
msgid "GeoDjango dropped support for GEOS < 3.1."
msgstr "GeoDjango supprime le support pour GEOS < 3.1."

# 77c248dcb86e4be8806d853a1693d446
#: ../../../../1.9/docs/releases/1.7.txt:1398
msgid ""
"The ``init_connection_state`` method of database backends now executes in "
"autocommit mode (unless you set :setting:`AUTOCOMMIT <DATABASE-AUTOCOMMIT>` "
"to ``False``). If you maintain a custom database backend, you should check "
"that method."
msgstr ""

# 299796bc80784feaa49ed3c63287019c
#: ../../../../1.9/docs/releases/1.7.txt:1403
msgid ""
"The ``django.db.backends.BaseDatabaseFeatures.allows_primary_key_0`` "
"attribute has been renamed to ``allows_auto_pk_0`` to better describe it. "
"It's ``True`` for all database backends included with Django except MySQL "
"which does allow primary keys with value 0. It only forbids *autoincrement* "
"primary keys with value 0."
msgstr ""

# 864b8de9bbed4891b3ec38335b393b89
#: ../../../../1.9/docs/releases/1.7.txt:1409
msgid ""
"Shadowing model fields defined in a parent model has been forbidden as this "
"creates ambiguity in the expected model behavior. In addition, clashing "
"fields in the model inheritance hierarchy result in a system check error. "
"For example, if you use multi-inheritance, you need to define custom primary"
" key fields on parent models, otherwise the default ``id`` fields will "
"clash. See :ref:`model-multiple-inheritance-topic` for details."
msgstr ""

# 5448491a51e843c9b6190c8143926d5e
#: ../../../../1.9/docs/releases/1.7.txt:1416
msgid ""
"``django.utils.translation.parse_accept_lang_header()`` now returns "
"lowercase locales, instead of the case as it was provided. As locales should"
" be treated case-insensitive this allows us to speed up locale detection."
msgstr ""

# 37fa50548f21493e820ad2303e4cb162
#: ../../../../1.9/docs/releases/1.7.txt:1420
msgid ""
"``django.utils.translation.get_language_from_path()`` and "
"``django.utils.translation.trans_real.get_supported_language_variant()`` now"
" no longer have a ``supported`` argument."
msgstr ""

# df6f29fddaef4731bd9e748c0cce1ba2
#: ../../../../1.9/docs/releases/1.7.txt:1424
msgid ""
"The ``shortcut`` view in ``django.contrib.contenttypes.views`` now supports "
"protocol-relative URLs (e.g. ``//example.com``)."
msgstr ""

# 00c22104997543dd8ee4cd53f61b6bac
#: ../../../../1.9/docs/releases/1.7.txt:1427
msgid ""
":class:`~django.contrib.contenttypes.fields.GenericRelation` now supports an"
" optional ``related_query_name`` argument. Setting ``related_query_name`` "
"adds a relation from the related object back to the content type for "
"filtering, ordering and other query operations."
msgstr ""

# cb7cf5a256db425cb163c2d88dcc91e1
#: ../../../../1.9/docs/releases/1.7.txt:1432
msgid ""
"When running tests on PostgreSQL, the :setting:`USER` will need read access "
"to the built-in ``postgres`` database. This is in lieu of the previous "
"behavior of connecting to the actual non-test database."
msgstr ""

# 9ac195b7a9174aa2ae8849b02d074922
#: ../../../../1.9/docs/releases/1.7.txt:1436
msgid ""
"As part of the :doc:`System check framework </ref/checks>`, :ref:`fields, "
"models, and model managers <field-checking>` all implement a ``check()`` "
"method that is registered with the check framework. If you have an existing "
"method called ``check()`` on one of these objects, you will need to rename "
"it."
msgstr ""

# 1ac8966bb3194ebb96fa06d774b5c5b9
#: ../../../../1.9/docs/releases/1.7.txt:1441
msgid ""
"As noted above in the \"Cache\" section of \"Minor Features\", defining the "
":setting:`TIMEOUT <CACHES-TIMEOUT>` argument of the :setting:`CACHES` "
"setting as ``None`` will set the cache keys as \"non-expiring\". Previously,"
" with the memcache backend, a :setting:`TIMEOUT <CACHES-TIMEOUT>` of ``0`` "
"would set non-expiring keys, but this was inconsistent with the set-and-"
"expire (i.e. no caching) behavior of ``set(\"key\", \"value\", timeout=0)``."
" If you want non-expiring keys, please update your settings to use ``None`` "
"instead of ``0`` as the latter now designates set-and-expire in the settings"
" as well."
msgstr ""

# 452374a5123d4168bff9475115ca263f
#: ../../../../1.9/docs/releases/1.7.txt:1451
msgid ""
"The ``sql*`` management commands now respect the ``allow_migrate()`` method "
"of :setting:`DATABASE_ROUTERS`. If you have models synced to non-default "
"databases, use the :djadminopt:`--database` flag to get SQL for those models"
" (previously they would always be included in the output)."
msgstr "Les commandes d'administration ``sql*`` respectent dorénavant la méthode ``allow_migrate()`` de :setting:`DATABASE_ROUTERS`. Si certains de vos modèles sont synchronisés vers des bases de données autres que celle par défaut, utilisez l'option :djadminopt:`--database` pour obtenir le code SQL de ces modèles (précédemment, ils figuraient toujours dans le résultat produit)."

# b5cf46646db94847bff3e1985b346c2b
#: ../../../../1.9/docs/releases/1.7.txt:1456
msgid ""
"Decoding the query string from URLs now falls back to the ISO-8859-1 "
"encoding when the input is not valid UTF-8."
msgstr ""

# 2e5c40d94cf04a4589d08cc0fa590fc8
#: ../../../../1.9/docs/releases/1.7.txt:1459
msgid ""
"With the addition of the "
":class:`~django.contrib.auth.middleware.SessionAuthenticationMiddleware` to "
"the default project template (pre-1.7.2 only), a database must be created "
"before accessing a page using :djadmin:`runserver`."
msgstr ""

# 38f855ba087140dc866c462d91fdc42d
#: ../../../../1.9/docs/releases/1.7.txt:1464
msgid ""
"The addition of the ``schemes`` argument to ``URLValidator`` will appear as "
"a backwards-incompatible change if you were previously using a custom "
"regular expression to validate schemes. Any scheme not listed in ``schemes``"
" will fail validation, even if the regular expression matches the given URL."
msgstr ""

# 6b322bacd0734ce7b544e181bed25cbd
#: ../../../../1.9/docs/releases/1.7.txt:1472
msgid "Features deprecated in 1.7"
msgstr "Fonctionnalités déconseillées dans 1.7"

# 2d449ff93a194cf79cc53a1c1ab70b9f
#: ../../../../1.9/docs/releases/1.7.txt:1475
msgid "``django.core.cache.get_cache``"
msgstr "``django.core.cache.get_cache``"

# 393bf29b6ed7464e822dda8f229f30bf
#: ../../../../1.9/docs/releases/1.7.txt:1477
msgid ""
"``django.core.cache.get_cache`` has been supplanted by "
":data:`django.core.cache.caches`."
msgstr ""

# 3c848e9003994323b296ab1d116b17aa
#: ../../../../1.9/docs/releases/1.7.txt:1481
msgid "``django.utils.dictconfig``/``django.utils.importlib``"
msgstr "``django.utils.dictconfig``/``django.utils.importlib``"

# e5c1c7dc09704e168ec35fa97ff28fe2
#: ../../../../1.9/docs/releases/1.7.txt:1483
msgid ""
"``django.utils.dictconfig`` and ``django.utils.importlib`` were copies of "
"respectively :mod:`logging.config` and :mod:`importlib` provided for Python "
"versions prior to 2.7. They have been deprecated."
msgstr ""

# 2af9d2b47cef4a8c9a8a1a68bd3a2420
#: ../../../../1.9/docs/releases/1.7.txt:1488
msgid "``django.utils.module_loading.import_by_path``"
msgstr "``django.utils.module_loading.import_by_path``"

# 7d3e7c36ee5e417b8fd9f7342526e65b
#: ../../../../1.9/docs/releases/1.7.txt:1490
msgid ""
"The current ``django.utils.module_loading.import_by_path`` function catches "
"``AttributeError``, ``ImportError``, and ``ValueError`` exceptions, and re-"
"raises :exc:`~django.core.exceptions.ImproperlyConfigured`. Such exception "
"masking makes it needlessly hard to diagnose circular import problems, "
"because it makes it look like the problem comes from inside Django. It has "
"been deprecated in favor of "
":meth:`~django.utils.module_loading.import_string`."
msgstr ""

# d6edb2f125ab4c848f4845a4a1678e20
#: ../../../../1.9/docs/releases/1.7.txt:1499
msgid "``django.utils.tzinfo``"
msgstr "``django.utils.tzinfo``"

# 599b68f43e064ec78360124df5a41849
#: ../../../../1.9/docs/releases/1.7.txt:1501
msgid ""
"``django.utils.tzinfo`` provided two :class:`~datetime.tzinfo` subclasses, "
"``LocalTimezone`` and ``FixedOffset``. They've been deprecated in favor of "
"more correct alternatives provided by :mod:`django.utils.timezone`, "
":func:`django.utils.timezone.get_default_timezone` and "
":func:`django.utils.timezone.get_fixed_timezone`."
msgstr ""

# baa837994ac14eccbbbac253a56564e7
#: ../../../../1.9/docs/releases/1.7.txt:1508
msgid "``django.utils.unittest``"
msgstr "``django.utils.unittest``"

# 76d0b29a8eef416cbb34cda9dcda7736
#: ../../../../1.9/docs/releases/1.7.txt:1510
msgid ""
"``django.utils.unittest`` provided uniform access to the ``unittest2`` "
"library on all Python versions. Since ``unittest2`` became the standard "
"library's :mod:`unittest` module in Python 2.7, and Django 1.7 drops support"
" for older Python versions, this module isn't useful anymore. It has been "
"deprecated. Use :mod:`unittest` instead."
msgstr ""

# a7f06a51ce6f4d958581b26eac5b0700
#: ../../../../1.9/docs/releases/1.7.txt:1517
msgid "``django.utils.datastructures.SortedDict``"
msgstr "``django.utils.datastructures.SortedDict``"

# f55e0e4aca9c49e0b845d7ec1e2091d5
#: ../../../../1.9/docs/releases/1.7.txt:1519
msgid ""
"As :class:`~collections.OrderedDict` was added to the standard library in "
"Python 2.7, ``SortedDict`` is no longer needed and has been deprecated."
msgstr ""

# 8b6f64ed2c56447ea0862ddc76412b84
#: ../../../../1.9/docs/releases/1.7.txt:1522
msgid ""
"The two additional, deprecated methods provided by ``SortedDict`` "
"(``insert()`` and ``value_for_index()``) have been removed. If you relied on"
" these methods to alter structures like form fields, you should now treat "
"these ``OrderedDict``\\s as immutable objects and override them to change "
"their content."
msgstr ""

# 6793ba48943c49659de1116594560f39
#: ../../../../1.9/docs/releases/1.7.txt:1527
msgid ""
"For example, you might want to override ``MyFormClass.base_fields`` "
"(although this attribute isn't considered a public API) to change the "
"ordering of fields for all ``MyFormClass`` instances; or similarly, you "
"could override ``self.fields`` from inside ``MyFormClass.__init__()``, to "
"change the fields for a particular form instance. For example (from Django "
"itself)::"
msgstr ""

# 68c6e4f337c142a4bdddf86195a4c92a
#: ../../../../1.9/docs/releases/1.7.txt:1539
msgid "Custom SQL location for models package"
msgstr ""

# 6677f21028e546c59bf887a9aff97676
#: ../../../../1.9/docs/releases/1.7.txt:1541
msgid ""
"Previously, if models were organized in a package (``myapp/models/``) rather"
" than simply ``myapp/models.py``, Django would look for initial SQL data in "
"``myapp/models/sql/``. This bug has been fixed so that Django will search "
"``myapp/sql/`` as documented. After this issue was fixed, migrations were "
"added which deprecates initial SQL data. Thus, while this change still "
"exists, the deprecation is irrelevant as the entire feature will be removed "
"in Django 1.9."
msgstr ""

# e9cc7b6c4ce74d168805fe27ba7ae04c
#: ../../../../1.9/docs/releases/1.7.txt:1550
msgid "Reorganization of ``django.contrib.sites``"
msgstr "Réorganisation de ``django.contrib.sites``"

# e37d2a65c166443fa9bb7af7514ad8ad
#: ../../../../1.9/docs/releases/1.7.txt:1552
msgid ""
"``django.contrib.sites`` provides reduced functionality when it isn't in "
":setting:`INSTALLED_APPS`. The app-loading refactor adds some constraints in"
" that situation. As a consequence, two objects were moved, and the old "
"locations are deprecated:"
msgstr ""

# 653ec66d07f34c3691a77be5addabc79
#: ../../../../1.9/docs/releases/1.7.txt:1557
msgid ""
":class:`~django.contrib.sites.requests.RequestSite` now lives in "
"``django.contrib.sites.requests``."
msgstr ""

# 694677378b4c4532aa58f8c14ca0f566
#: ../../../../1.9/docs/releases/1.7.txt:1559
msgid ""
":func:`~django.contrib.sites.shortcuts.get_current_site` now lives in "
"``django.contrib.sites.shortcuts``."
msgstr ""

# 30ae9ed3fc0340d5842da746b6df5444
#: ../../../../1.9/docs/releases/1.7.txt:1563
msgid "``declared_fieldsets`` attribute on ``ModelAdmin``"
msgstr "l'attribut ``declared_fieldsets`` dans ``ModelAdmin``"

# 70f05ea3bc1a4675a9de83d348c96249
#: ../../../../1.9/docs/releases/1.7.txt:1565
msgid ""
"``ModelAdmin.declared_fieldsets`` has been deprecated. Despite being a "
"private API, it will go through a regular deprecation path. This attribute "
"was mostly used by methods that bypassed ``ModelAdmin.get_fieldsets()`` but "
"this was considered a bug and has been addressed."
msgstr ""

# f817a3f538cf45089e5920385d6bb5b9
#: ../../../../1.9/docs/releases/1.7.txt:1571
msgid "Reorganization of ``django.contrib.contenttypes``"
msgstr "Réorganisation de ``django.contrib.contenttypes``"

# 5bd7c49ffad7489abc2a7981ba44b8ea
#: ../../../../1.9/docs/releases/1.7.txt:1573
msgid ""
"Since ``django.contrib.contenttypes.generic`` defined both admin and model "
"related objects, an import of this module could trigger unexpected side "
"effects. As a consequence, its contents were split into "
":mod:`~django.contrib.contenttypes` submodules and the "
"``django.contrib.contenttypes.generic`` module is deprecated:"
msgstr ""

# 1634cde6af834f13975cbd3df2039559
#: ../../../../1.9/docs/releases/1.7.txt:1578
msgid ""
":class:`~django.contrib.contenttypes.fields.GenericForeignKey` and "
":class:`~django.contrib.contenttypes.fields.GenericRelation` now live in "
":mod:`~django.contrib.contenttypes.fields`."
msgstr ""

# 7a2178be85a64d15828dd64c4d83a78c
#: ../../../../1.9/docs/releases/1.7.txt:1581
msgid ""
":class:`~django.contrib.contenttypes.forms.BaseGenericInlineFormSet` and "
":func:`~django.contrib.contenttypes.forms.generic_inlineformset_factory` now"
" live in :mod:`~django.contrib.contenttypes.forms`."
msgstr ""

# 87e90f3412154bd9bb7bc560881a0fa1
#: ../../../../1.9/docs/releases/1.7.txt:1584
msgid ""
":class:`~django.contrib.contenttypes.admin.GenericInlineModelAdmin`, "
":class:`~django.contrib.contenttypes.admin.GenericStackedInline` and "
":class:`~django.contrib.contenttypes.admin.GenericTabularInline` now live in"
" :mod:`~django.contrib.contenttypes.admin`."
msgstr ""

# fbd44536004843da89ae5050329a3004
#: ../../../../1.9/docs/releases/1.7.txt:1590
msgid "``syncdb``"
msgstr "``syncdb``"

# e27bd86fba414c04932be715c63ea6b7
#: ../../../../1.9/docs/releases/1.7.txt:1592
msgid ""
"The ``syncdb`` command has been deprecated in favor of the new "
":djadmin:`migrate` command. ``migrate`` takes the same arguments as "
"``syncdb`` used to plus a few more, so it's safe to just change the name "
"you're calling and nothing else."
msgstr ""

# fd19e4f94d304baba4b7ff88fb3e4328
#: ../../../../1.9/docs/releases/1.7.txt:1597
msgid "``util`` modules renamed to ``utils``"
msgstr "les modules ``util`` renommés en ``utils``"

# 5619433ab0b240ed8d911f77f06c866e
#: ../../../../1.9/docs/releases/1.7.txt:1599
msgid ""
"The following instances of ``util.py`` in the Django codebase have been "
"renamed to ``utils.py`` in an effort to unify all util and utils references:"
msgstr ""

# 5bb5efdf1fa24a67b17c9e5ea87c7ed2
# ee24e233e98949578274d000f4acffbf
#: ../../../../1.9/docs/releases/1.7.txt:1602
#: ../../../../1.9/docs/releases/1.9.txt:1434
msgid "``django.contrib.admin.util``"
msgstr "``django.contrib.admin.util``"

# 93133287aca14344a320af346f3bf246
# 4fc23f2505f54d59bf538eda8bd779cf
#: ../../../../1.9/docs/releases/1.7.txt:1603
#: ../../../../1.9/docs/releases/1.9.txt:1435
msgid "``django.contrib.gis.db.backends.util``"
msgstr "``django.contrib.gis.db.backends.util``"

# a9d9ded679ae4fe2a831207f83e81011
# 6156324191cf48c8a283df60af084ab5
#: ../../../../1.9/docs/releases/1.7.txt:1604
#: ../../../../1.9/docs/releases/1.9.txt:1436
msgid "``django.db.backends.util``"
msgstr "``django.db.backends.util``"

# 23cee1e6f1bb49188defa61050542a24
# 3ba33a30481344b290e7206caf226d1b
#: ../../../../1.9/docs/releases/1.7.txt:1605
#: ../../../../1.9/docs/releases/1.9.txt:1437
msgid "``django.forms.util``"
msgstr "``django.forms.util``"

# d2a69ea0dc514b4da7abf815031858a8
#: ../../../../1.9/docs/releases/1.7.txt:1608
msgid "``get_formsets`` method on ``ModelAdmin``"
msgstr "la méthode ``get_formsets`` dans ``ModelAdmin``"

# 86265c44ad184a019c124e30a245ce03
#: ../../../../1.9/docs/releases/1.7.txt:1610
msgid ""
"``ModelAdmin.get_formsets`` has been deprecated in favor of the new "
":meth:`~django.contrib.admin.ModelAdmin.get_formsets_with_inlines`, in order"
" to better handle the case of selectively showing inlines on a "
"``ModelAdmin``."
msgstr ""

# 97c9a03b931444e8978b66ad76bf2e41
#: ../../../../1.9/docs/releases/1.7.txt:1617
msgid ""
"The ``django.db.models.IPAddressField`` and ``django.forms.IPAddressField`` "
"fields have been deprecated in favor of "
":class:`django.db.models.GenericIPAddressField` and "
":class:`django.forms.GenericIPAddressField`."
msgstr ""

# a6ba4ecad8894a68a6064fa9649de30a
#: ../../../../1.9/docs/releases/1.7.txt:1623
msgid "``BaseMemcachedCache._get_memcache_timeout`` method"
msgstr ""

# 32b30e76de474d3899ab050fb4887b8c
#: ../../../../1.9/docs/releases/1.7.txt:1625
msgid ""
"The ``BaseMemcachedCache._get_memcache_timeout()`` method has been renamed "
"to ``get_backend_timeout()``. Despite being a private API, it will go "
"through the normal deprecation."
msgstr ""

# bfb9ea8e08074bbdb94ca35b7047ee52
#: ../../../../1.9/docs/releases/1.7.txt:1630
msgid "Natural key serialization options"
msgstr ""

# 2d736f223ce54398a97ffa1ef6c39423
#: ../../../../1.9/docs/releases/1.7.txt:1632
msgid ""
"The ``--natural`` and ``-n`` options for :djadmin:`dumpdata` have been "
"deprecated. Use :djadminopt:`--natural-foreign` instead."
msgstr ""

# f654943c24ca4f66a5c187b24724d969
#: ../../../../1.9/docs/releases/1.7.txt:1635
msgid ""
"Similarly, the ``use_natural_keys`` argument for ``serializers.serialize()``"
" has been deprecated. Use ``use_natural_foreign_keys`` instead."
msgstr ""

# f0fec7fc165a4e729555b768bd5642d8
#: ../../../../1.9/docs/releases/1.7.txt:1639
msgid "Merging of ``POST`` and ``GET`` arguments into ``WSGIRequest.REQUEST``"
msgstr ""

# 15cb5d041def4c3c9013dd8c73e889d6
#: ../../../../1.9/docs/releases/1.7.txt:1641
msgid ""
"It was already strongly suggested that you use ``GET`` and ``POST`` instead "
"of ``REQUEST``, because the former are more explicit. The property "
"``REQUEST`` is deprecated and will be removed in Django 1.9."
msgstr ""

# 26e03d99cfc6417e9a44bf7970f64b62
#: ../../../../1.9/docs/releases/1.7.txt:1646
msgid "``django.utils.datastructures.MergeDict`` class"
msgstr "la classe ``django.utils.datastructures.MergeDict``"

# 79520af7efc14744a5bf90e4da88cf71
#: ../../../../1.9/docs/releases/1.7.txt:1648
msgid ""
"``MergeDict`` exists primarily to support merging ``POST`` and ``GET`` "
"arguments into a ``REQUEST`` property on ``WSGIRequest``. To merge "
"dictionaries, use ``dict.update()`` instead. The class ``MergeDict`` is "
"deprecated and will be removed in Django 1.9."
msgstr ""

# fb1fb8591b224bb6adb7e3192be56d3f
#: ../../../../1.9/docs/releases/1.7.txt:1654
msgid "Language codes ``zh-cn``, ``zh-tw`` and ``fy-nl``"
msgstr "Codes de langue ``zh-cn``, ``zh-tw`` et ``fy-nl``"

# 4e2563cdb36d4dcea80ba4f813298f1b
#: ../../../../1.9/docs/releases/1.7.txt:1656
msgid ""
"The currently used language codes for Simplified Chinese ``zh-cn``, "
"Traditional Chinese ``zh-tw`` and (Western) Frysian ``fy-nl`` are deprecated"
" and should be replaced by the language codes ``zh-hans``, ``zh-hant`` and "
"``fy`` respectively. If you use these language codes, you should rename the "
"locale directories and update your settings to reflect these changes. The "
"deprecated language codes will be removed in Django 1.9."
msgstr ""

# f94f1d20f6544c47924c1b6b06b48871
#: ../../../../1.9/docs/releases/1.7.txt:1664
msgid "``django.utils.functional.memoize`` function"
msgstr "fonction ``django.utils.functional.memoize``"

# 510e86494d1d4c528b4de8d071c3be0b
#: ../../../../1.9/docs/releases/1.7.txt:1666
msgid ""
"The function ``memoize`` is deprecated and should be replaced by the "
"``functools.lru_cache`` decorator (available from Python 3.2 onwards)."
msgstr ""

# 987d4e8b714d4aa6b1d9423f794a2b62
#: ../../../../1.9/docs/releases/1.7.txt:1669
msgid ""
"Django ships a backport of this decorator for older Python versions and it's"
" available at ``django.utils.lru_cache.lru_cache``. The deprecated function "
"will be removed in Django 1.9."
msgstr ""

# 1450852404934235943918ed843ef226
#: ../../../../1.9/docs/releases/1.7.txt:1674
msgid "Geo Sitemaps"
msgstr ""

# e626b56ff06c4a45998fca77df14fce4
#: ../../../../1.9/docs/releases/1.7.txt:1676
msgid ""
"Google has retired support for the Geo Sitemaps format. Hence Django support"
" for Geo Sitemaps is deprecated and will be removed in Django 1.8."
msgstr ""

# d34db48bdc5542258ac9fe3219b0ed7c
#: ../../../../1.9/docs/releases/1.7.txt:1680
msgid "Passing callable arguments to queryset methods"
msgstr ""

# 855ab8aff89f40c4aec884cf434c28b2
#: ../../../../1.9/docs/releases/1.7.txt:1682
msgid ""
"Callable arguments for querysets were an undocumented feature that was "
"unreliable. It's been deprecated and will be removed in Django 1.9."
msgstr ""

# 92006ff109d142f2957bdda1f9ad30e3
#: ../../../../1.9/docs/releases/1.7.txt:1685
msgid ""
"Callable arguments were evaluated when a queryset was constructed rather "
"than when it was evaluated, thus this feature didn't offer any benefit "
"compared to evaluating arguments before passing them to queryset and created"
" confusion that the arguments may have been evaluated at query time."
msgstr ""

# afb2e4a9515f480f9b2d0460b4c85c52
#: ../../../../1.9/docs/releases/1.7.txt:1691
msgid "``ADMIN_FOR`` setting"
msgstr "le réglage ``ADMIN_FOR``"

# 17805e578ee147cc9f0470833cca271d
#: ../../../../1.9/docs/releases/1.7.txt:1693
msgid ""
"The ``ADMIN_FOR`` feature, part of the admindocs, has been removed. You can "
"remove the setting from your configuration at your convenience."
msgstr ""

# ff013a9812f94673b50542557adefaed
#: ../../../../1.9/docs/releases/1.7.txt:1697
msgid "``SplitDateTimeWidget`` with ``DateTimeField``"
msgstr "``SplitDateTimeWidget`` avec ``DateTimeField``"

# 0b24f070e8aa4021aba4b91aa870ca3f
#: ../../../../1.9/docs/releases/1.7.txt:1699
msgid ""
"``SplitDateTimeWidget`` support in :class:`~django.forms.DateTimeField` is "
"deprecated, use ``SplitDateTimeWidget`` with "
":class:`~django.forms.SplitDateTimeField` instead."
msgstr ""

# 03f67d684dae4c19845f685e829b1863
#: ../../../../1.9/docs/releases/1.7.txt:1704
msgid "``validate``"
msgstr "``validate``"

# ab950731402d4538b11542288dd33278
#: ../../../../1.9/docs/releases/1.7.txt:1706
msgid ""
"The ``validate`` management command is deprecated in favor of the "
":djadmin:`check` command."
msgstr ""

# cfe077c34d8f42ecbfb277df9bc6fb1f
#: ../../../../1.9/docs/releases/1.7.txt:1710
msgid "``django.core.management.BaseCommand``"
msgstr "``django.core.management.BaseCommand``"

# fe38aced4ebe4dd0b5a55658bb98d896
#: ../../../../1.9/docs/releases/1.7.txt:1712
msgid ""
"``requires_model_validation`` is deprecated in favor of a new "
"``requires_system_checks`` flag. If the latter flag is missing, then the "
"value of the former flag is used. Defining both ``requires_system_checks`` "
"and ``requires_model_validation`` results in an error."
msgstr ""

# 012de58f16af4c80903eb0767b723ebf
#: ../../../../1.9/docs/releases/1.7.txt:1717
msgid "The ``check()`` method has replaced the old ``validate()`` method."
msgstr "La méthode ``check()`` a remplacé l'ancienne méthode ``validate()``."

# 4408f5916e8c46bcbfbae093e0108741
#: ../../../../1.9/docs/releases/1.7.txt:1720
msgid "``ModelAdmin`` validators"
msgstr ""

# bc7cbe08dd5c4b53842e84ea86babdd5
#: ../../../../1.9/docs/releases/1.7.txt:1722
msgid ""
"The ``ModelAdmin.validator_class`` and ``default_validator_class`` "
"attributes are deprecated in favor of the new ``checks_class`` attribute."
msgstr ""

# bf7dfad38e9243df8e762a7e6042940d
#: ../../../../1.9/docs/releases/1.7.txt:1725
msgid ""
"The ``ModelAdmin.validate()`` method is deprecated in favor of "
"``ModelAdmin.check()``."
msgstr ""

# 74f9c4a64681421392c8089d6ac8549d
#: ../../../../1.9/docs/releases/1.7.txt:1728
msgid "The ``django.contrib.admin.validation`` module is deprecated."
msgstr ""

# f72ef3317afa42f8a05af6336b2252c6
#: ../../../../1.9/docs/releases/1.7.txt:1731
msgid "``django.db.backends.DatabaseValidation.validate_field``"
msgstr "``django.db.backends.DatabaseValidation.validate_field``"

# 3c74e5e0622543459f79659a285bc98d
#: ../../../../1.9/docs/releases/1.7.txt:1733
msgid ""
"This method is deprecated in favor of a new ``check_field`` method. The "
"functionality required by ``check_field()`` is the same as that provided by "
"``validate_field()``, but the output format is different. Third-party "
"database backends needing this functionality should provide an "
"implementation of ``check_field()``."
msgstr ""

# d82fe6048d554a85af640f39ecac8712
#: ../../../../1.9/docs/releases/1.7.txt:1740
msgid "Loading ``ssi`` and ``url`` template tags from ``future`` library"
msgstr ""

# f0e7a5ce30b74b22adf759c1f6a8b591
#: ../../../../1.9/docs/releases/1.7.txt:1742
msgid ""
"Django 1.3 introduced ``{% load ssi from future %}`` and ``{% load url from "
"future %}`` syntax for forward compatibility of the :ttag:`ssi` and "
":ttag:`url` template tags. This syntax is now deprecated and will be removed"
" in Django 1.9. You can simply remove the ``{% load ... from future %}`` "
"tags."
msgstr ""

# 9a689f4329e64ca393fc93ee5817a62a
#: ../../../../1.9/docs/releases/1.7.txt:1749
msgid "``django.utils.text.javascript_quote``"
msgstr "``django.utils.text.javascript_quote``"

# b460572851774909afdb8c581fb93ca2
#: ../../../../1.9/docs/releases/1.7.txt:1751
msgid ""
"``javascript_quote()`` was an undocumented function present in "
"``django.utils.text``. It was used internally in the "
":ref:`javascript_catalog view <javascript_catalog-view>` whose "
"implementation was changed to make use of ``json.dumps()`` instead. If you "
"were relying on this function to provide safe output from untrusted strings,"
" you should use ``django.utils.html.escapejs`` or the :tfilter:`escapejs` "
"template filter. If all you need is to generate valid JavaScript strings, "
"you can simply use ``json.dumps()``."
msgstr ""

# b372e95eae174eababa5739a4062ad4e
#: ../../../../1.9/docs/releases/1.7.txt:1761
msgid "``fix_ampersands`` utils method and template filter"
msgstr ""

# 5af26d356b5e4677ad2e54b2de6ebe36
#: ../../../../1.9/docs/releases/1.7.txt:1763
msgid ""
"The ``django.utils.html.fix_ampersands`` method and the ``fix_ampersands`` "
"template filter are deprecated, as the escaping of ampersands is already "
"taken care of by Django's standard HTML escaping features. Combining this "
"with ``fix_ampersands`` would either result in double escaping, or, if the "
"output is assumed to be safe, a risk of introducing XSS vulnerabilities. "
"Along with ``fix_ampersands``, ``django.utils.html.clean_html`` is "
"deprecated, an undocumented function that calls ``fix_ampersands``. As this "
"is an accelerated deprecation, ``fix_ampersands`` and ``clean_html`` will be"
" removed in Django 1.8."
msgstr ""

# 999e27f00b874bca81efaa79379a1888
#: ../../../../1.9/docs/releases/1.7.txt:1774
msgid "Reorganization of database test settings"
msgstr ""

# 9e015e34ef4d48028e219469f84060a5
#: ../../../../1.9/docs/releases/1.7.txt:1776
msgid ""
"All database settings with a ``TEST_`` prefix have been deprecated in favor "
"of entries in a :setting:`TEST <DATABASE-TEST>` dictionary in the database "
"settings. The old settings will be supported until Django 1.9. For backwards"
" compatibility with older versions of Django, you can define both versions "
"of the settings as long as they match."
msgstr ""

# cd853b3ae54142059665db28e6156a15
#: ../../../../1.9/docs/releases/1.7.txt:1783
msgid "FastCGI support"
msgstr "Support de FastCGI"

# 93d1476722d04beab47fad9b8dcfcef3
#: ../../../../1.9/docs/releases/1.7.txt:1785
msgid ""
"FastCGI support via the ``runfcgi`` management command will be removed in "
"Django 1.9. Please deploy your project using WSGI."
msgstr ""

# 659b34a78bbe4a438e22dab07877962b
#: ../../../../1.9/docs/releases/1.7.txt:1789
msgid "Moved objects in ``contrib.sites``"
msgstr ""

# 4e1da84021a04f3a99f904635d6edc61
#: ../../../../1.9/docs/releases/1.7.txt:1791
msgid ""
"Following the app-loading refactor, two objects in "
"``django.contrib.sites.models`` needed to be moved because they must be "
"available without importing ``django.contrib.sites.models`` when "
"``django.contrib.sites`` isn't installed. Import ``RequestSite`` from "
"``django.contrib.sites.requests`` and ``get_current_site()`` from "
"``django.contrib.sites.shortcuts``. The old import locations will work until"
" Django 1.9."
msgstr ""

# 34686b785a46483f88b7e8f48f7ad71a
#: ../../../../1.9/docs/releases/1.7.txt:1800
msgid "``django.forms.forms.get_declared_fields()``"
msgstr ""

# 7d87714e53294172a4c2687a07490134
#: ../../../../1.9/docs/releases/1.7.txt:1802
msgid ""
"Django no longer uses this functional internally. Even though it's a private"
" API, it'll go through the normal deprecation cycle."
msgstr ""

# e580434be37b4820b06f2539a24c5891
#: ../../../../1.9/docs/releases/1.7.txt:1806
msgid "Private Query Lookup APIs"
msgstr ""

# 89d14c72c70248cb8873a0b116346135
#: ../../../../1.9/docs/releases/1.7.txt:1808
msgid ""
"Private APIs ``django.db.models.sql.where.WhereNode.make_atom()`` and "
"``django.db.models.sql.where.Constraint`` are deprecated in favor of the new"
" :doc:`custom lookups API </ref/models/lookups>`."
msgstr ""

# 58523d487f304c7299814befdfe19ba9
#: ../../../../1.9/docs/releases/1.7.txt:1815
msgid "Features removed in 1.7"
msgstr "Features removed in 1.7"

# b91abe2b580d4f18bb6c30bb09fc1238
#: ../../../../1.9/docs/releases/1.7.txt:1817
msgid ""
"These features have reached the end of their :ref:`deprecation cycle "
"<deprecation-removed-in-1.7>` and so have been removed in Django 1.7 (please"
" see the :ref:`deprecation timeline <deprecation-removed-in-1.7>` for more "
"details):"
msgstr ""

# a39919ca7c0243368cd200ef00cf1232
#: ../../../../1.9/docs/releases/1.7.txt:1823
msgid "``django.utils.simplejson`` is removed."
msgstr "``django.utils.simplejson`` est supprimé."

# 004c2251c594410d87d16f52dbe8e165
#: ../../../../1.9/docs/releases/1.7.txt:1825
msgid "``django.utils.itercompat.product`` is removed."
msgstr "``django.utils.itercompat.product`` est supprimé."

# e6a82ecbe3f840659df4fd613a235014
#: ../../../../1.9/docs/releases/1.7.txt:1827
msgid ""
"INSTALLED_APPS and TEMPLATE_DIRS are no longer corrected from a plain string"
" into a tuple."
msgstr ""

# 44d24361e2c74a658584d43b87c889df
#: ../../../../1.9/docs/releases/1.7.txt:1830
msgid ""
":class:`~django.http.HttpResponse`, "
":class:`~django.template.response.SimpleTemplateResponse`, "
":class:`~django.template.response.TemplateResponse`, "
"``render_to_response()``, :func:`~django.contrib.sitemaps.views.index`, and "
":func:`~django.contrib.sitemaps.views.sitemap` no longer take a ``mimetype``"
" argument"
msgstr ""

# eff7f306229a48b8a449deb653c9f020
#: ../../../../1.9/docs/releases/1.7.txt:1837
msgid ""
":class:`~django.http.HttpResponse` immediately consumes its content if it's "
"an iterator."
msgstr ""

# a64d45f3429845de8006d3c3d610331e
#: ../../../../1.9/docs/releases/1.7.txt:1840
msgid ""
"The ``AUTH_PROFILE_MODULE`` setting, and the ``get_profile()`` method on the"
" User model are removed."
msgstr ""

# 0036c49ad97e405dbe82abfd78cc248b
#: ../../../../1.9/docs/releases/1.7.txt:1843
msgid "The ``cleanup`` management command is removed."
msgstr "La commande de management ``cleanup`` est supprimée."

# 792979a10976430c9183926981511bfc
#: ../../../../1.9/docs/releases/1.7.txt:1845
msgid "The ``daily_cleanup.py`` script is removed."
msgstr "Le script ``daily_cleanup.py`` est supprimé."

# 1228c7f6ef3b47d2be7f1dd3a1c40cdb
#: ../../../../1.9/docs/releases/1.7.txt:1847
msgid ""
":meth:`~django.db.models.query.QuerySet.select_related` no longer has a "
"``depth`` keyword argument."
msgstr ""

# 5bd6dceed28a47559e8badcfe5157c26
#: ../../../../1.9/docs/releases/1.7.txt:1850
msgid ""
"The ``get_warnings_state()``/``restore_warnings_state()`` functions from "
":mod:`django.test.utils` and the ``save_warnings_state()``/ "
"``restore_warnings_state()`` :ref:`django.test.*TestCase <django-testcase-"
"subclasses>` are removed."
msgstr ""

# 10c69784603d4a3ea8c04b95b2c32df6
#: ../../../../1.9/docs/releases/1.7.txt:1855
msgid ""
"The ``check_for_test_cookie`` method in "
":class:`~django.contrib.auth.forms.AuthenticationForm` is removed."
msgstr ""

# d696ecc61817415db6ab4c8b4d4dc843
#: ../../../../1.9/docs/releases/1.7.txt:1858
msgid ""
"The version of :func:`django.contrib.auth.views.password_reset_confirm` that"
" supports base36 encoded user IDs "
"(``django.contrib.auth.views.password_reset_confirm_uidb36``) is removed."
msgstr ""

# 7fd45d383f3c4019a441ebac441e7694
#: ../../../../1.9/docs/releases/1.7.txt:1862
msgid "The ``django.utils.encoding.StrAndUnicode`` mix-in is removed."
msgstr ""

# c6c30be500ba4182bdfc00d8b38c40a5
#: ../../../../1.9/docs/releases/1.7.1.txt:3
msgid "Django 1.7.1 release notes"
msgstr "Notes de publication de Django 1.7.1"

# 8be55266126e4e44b47fb618946ef0e8
#: ../../../../1.9/docs/releases/1.7.1.txt:7
msgid "Django 1.7.1 fixes several bugs in 1.7."
msgstr "Django 1.7.1 corrige plusieurs bogues de la 1.7."

# c2294202fbf44d6ab4bab09cf39d9138
#: ../../../../1.9/docs/releases/1.7.1.txt:15
msgid ""
"Added a more helpful error message if you try to migrate an app without "
"first creating the ``contenttypes`` table (:ticket:`22411`)."
msgstr ""

# ed6101b0fdc54b07987a740e55343977
#: ../../../../1.9/docs/releases/1.7.1.txt:18
msgid ""
"Modified migrations dependency algorithm to avoid possible infinite "
"recursion."
msgstr ""

# c358a7d899f7480592fc8766fa0807bb
#: ../../../../1.9/docs/releases/1.7.1.txt:20
msgid ""
"Fixed a ``UnicodeDecodeError`` when the ``flush`` error message contained "
"Unicode characters (:ticket:`22882`)."
msgstr "Correction d'une ``UnicodeDecodeError`` lorsque le message d'erreur ``flush`` contenait des caractères Unicode (:ticket:`22882`)."

# 7c50d8eb1a254cebbf2da1c6fe747dee
#: ../../../../1.9/docs/releases/1.7.1.txt:23
msgid ""
"Reinstated missing ``CHECK`` SQL clauses which were omitted on some backends"
" when not using migrations (:ticket:`23416`)."
msgstr "Réintroduction des clauses SQL ``CHECK`` manquantes qui étaient omises sur certains moteurs lors de la non utilisation des migrations (:ticket:`23416`)."

# 4edd4adf538e4b5c97d46ab215d9e823
#: ../../../../1.9/docs/releases/1.7.1.txt:26
msgid ""
"Fixed serialization of ``type`` objects in migrations (:ticket:`22951`)."
msgstr ""

# 7896da76b00d41a4b5d38362fcb81ed4
#: ../../../../1.9/docs/releases/1.7.1.txt:30
msgid ""
"The ``@deconstructible`` decorator now fails with a ``ValueError`` if the "
"decorated object cannot automatically be imported (:ticket:`23418`)."
msgstr ""

# 9a85706b04d949e4a519dd0e5599c6b9
#: ../../../../1.9/docs/releases/1.7.1.txt:33
msgid ""
"Fixed a typo in an ``inlineformset_factory()`` error message that caused a "
"crash (:ticket:`23451`)."
msgstr ""

# 9be9a1040df941048f156760317a3270
#: ../../../../1.9/docs/releases/1.7.1.txt:36
msgid ""
"Restored the ability to use :setting:`ABSOLUTE_URL_OVERRIDES` with the "
"``'auth.User'`` model (:ticket:`11775`). As a side effect, the setting now "
"adds a ``get_absolute_url()`` method to any model that appears in "
"``ABSOLUTE_URL_OVERRIDES`` but doesn't define ``get_absolute_url()``."
msgstr ""

# a0bbdcaf8c9f4e6ebcfc7b21a7f8c55c
#: ../../../../1.9/docs/releases/1.7.1.txt:41
msgid ""
"Avoided masking some `ImportError` exceptions during application loading "
"(:ticket:`22920`)."
msgstr ""

# 9680f246a3b341bfbf4e678a4a107c4f
#: ../../../../1.9/docs/releases/1.7.1.txt:44
msgid ""
"Empty ``index_together`` or ``unique_together`` model options no longer "
"results in infinite migrations (:ticket:`23452`)."
msgstr ""

# 84a1a1da77da41d49f5e11540e60cff9
#: ../../../../1.9/docs/releases/1.7.1.txt:47
msgid ""
"Fixed crash in ``contrib.sitemaps`` if ``lastmod`` returned a ``date`` "
"rather than a ``datetime`` (:ticket:`23403`)."
msgstr ""

# ae2691ee8f33452e93d684c951847f70
#: ../../../../1.9/docs/releases/1.7.1.txt:50
msgid ""
"Allowed migrations to work with ``app_label``\\s that have the same last "
"part (e.g. ``django.contrib.auth`` and ``vendor.auth``) (:ticket:`23483`)."
msgstr ""

# fe87320205aa467d9e092655d74b26ec
#: ../../../../1.9/docs/releases/1.7.1.txt:53
msgid "Restored the ability to deepcopy ``F`` objects (:ticket:`23492`)."
msgstr ""

# f1f6b9e1158441b595f79d61e034755b
#: ../../../../1.9/docs/releases/1.7.1.txt:55
msgid ""
"Formats for Welsh (``cy``) and several Chinese locales (``zh_CN``, "
"``zh_Hans``, ``zh_Hant`` and ``zh_TW``) have been added. Formats for "
"Macedonian have been fixed (trailing dot removed, :ticket:`23532`)."
msgstr ""

# b6db7ca69faa4a0999c3d8f3833ec70d
#: ../../../../1.9/docs/releases/1.7.1.txt:59
msgid ""
"Added quoting of constraint names in the SQL generated by migrations to "
"prevent crash with uppercase characters in the name (:ticket:`23065`)."
msgstr ""

# ef78fb6031234d21a874db071601a188
#: ../../../../1.9/docs/releases/1.7.1.txt:62
msgid ""
"Fixed renaming of models with a self-referential many-to-many field "
"(``ManyToManyField('self')``) (:ticket:`23503`)."
msgstr ""

# 02709f8fe03744a693647e450ecdc392
#: ../../../../1.9/docs/releases/1.7.1.txt:65
msgid ""
"Added the :meth:`~django.contrib.admin.InlineModelAdmin.get_extra()`, "
":meth:`~django.contrib.admin.InlineModelAdmin.get_max_num()`, and "
":meth:`~django.contrib.admin.InlineModelAdmin.get_min_num()` hooks to "
":class:`~django.contrib.contenttypes.admin.GenericInlineModelAdmin` "
"(:ticket:`23539`)."
msgstr ""

# 556d35aeac6a4caa92eb81740d404268
#: ../../../../1.9/docs/releases/1.7.1.txt:71
msgid ""
"Made ``migrations.RunSQL`` no longer require percent sign escaping. This is "
"now consistent with ``cursor.execute()`` (:ticket:`23426`)."
msgstr ""

# bbbce948a3ee45d5a577c0c82f8d1d6a
#: ../../../../1.9/docs/releases/1.7.1.txt:74
msgid ""
"Made the :setting:`SERIALIZE <TEST_SERIALIZE>` entry in the :setting:`TEST "
"<DATABASE-TEST>` dictionary usable (:ticket:`23421`)."
msgstr ""

# 3c7575dde0de484d843e7fd768bb38e0
#: ../../../../1.9/docs/releases/1.7.1.txt:77
msgid ""
"Fixed bug in migrations that prevented foreign key constraints to unmanaged "
"models with a custom primary key (:ticket:`23415`)."
msgstr ""

# 7ab018809d5746dc866af8eb01f568f4
#: ../../../../1.9/docs/releases/1.7.1.txt:80
msgid ""
"Added ``SchemaEditor`` for MySQL GIS backend so that spatial indexes will be"
" created for apps with migrations (:ticket:`23538`)."
msgstr ""

# fe981a6e037646eea2b01599c5e59239
#: ../../../../1.9/docs/releases/1.7.1.txt:83
msgid ""
"Added ``SchemaEditor`` for Oracle GIS backend so that spatial metadata and "
"indexes will be created for apps with migrations (:ticket:`23537`)."
msgstr ""

# d9e21d720ce94d5bb078f82544e64a62
#: ../../../../1.9/docs/releases/1.7.1.txt:86
msgid ""
"Coerced the ``related_name`` model field option to unicode during migration "
"generation to generate migrations that work with both Python 2 and 3 "
"(:ticket:`23455`)."
msgstr ""

# 86784b0957314327b8c34a5d842e64bb
#: ../../../../1.9/docs/releases/1.7.1.txt:90
msgid ""
"Fixed ``MigrationWriter`` to handle builtin types without imports "
"(:ticket:`23560`)."
msgstr ""

# 978e113d0ece4e71b8e2b04e03c7e334
#: ../../../../1.9/docs/releases/1.7.1.txt:93
msgid "Fixed ``deepcopy`` on ``ErrorList`` (:ticket:`23594`)."
msgstr ""

# 43df941e1f0e4c55a2f41751ba8e32b3
#: ../../../../1.9/docs/releases/1.7.1.txt:95
msgid ""
"Made the :mod:`~django.contrib.admindocs` view to browse view details check "
"if the view specified in the URL exists in the URLconf. Previously it was "
"possible to import arbitrary packages from the Python path. This was not "
"considered a security issue because ``admindocs`` is only accessible to "
"staff users (:ticket:`23601`)."
msgstr ""

# 9f6c7272998d4ce695c4ae5141138837
#: ../../../../1.9/docs/releases/1.7.1.txt:101
msgid ""
"Fixed ``UnicodeDecodeError`` crash in ``AdminEmailHandler`` with non-ASCII "
"characters in the request (:ticket:`23593`)."
msgstr ""

# 994b8d35d9704685a8b9075b1e60611c
#: ../../../../1.9/docs/releases/1.7.1.txt:104
msgid ""
"Fixed missing ``get_or_create`` and ``update_or_create`` on related managers"
" causing ``IntegrityError`` (:ticket:`23611`)."
msgstr ""

# 9be40915bcd641a88b363dc09d49e7d4
#: ../../../../1.9/docs/releases/1.7.1.txt:107
msgid ""
"Made :func:`~django.utils.http.urlsafe_base64_decode` return the proper type"
" (byte string) on Python 3 (:ticket:`23333`)."
msgstr ""

# 7f8c56604c854cfd943aa4ca90263761
#: ../../../../1.9/docs/releases/1.7.1.txt:110
msgid ""
":djadmin:`makemigrations` can now serialize timezone-aware values "
"(:ticket:`23365`)."
msgstr ""

# 8d6a1b643f344bda835497ce68d21196
#: ../../../../1.9/docs/releases/1.7.1.txt:113
msgid ""
"Added a prompt to the migrations questioner when removing the null "
"constraint from a field to prevent an IntegrityError on existing NULL rows "
"(:ticket:`23609`)."
msgstr ""

# 56c3348021db4374b6f045832f0e0410
#: ../../../../1.9/docs/releases/1.7.1.txt:117
msgid ""
"Fixed generic relations in ``ModelAdmin.list_filter`` (:ticket:`23616`)."
msgstr ""

# a43fea811d24407e8e7ba2cb974959f9
#: ../../../../1.9/docs/releases/1.7.1.txt:119
msgid ""
"Restored RFC compliance for the SMTP backend on Python 3 (:ticket:`23063`)."
msgstr ""

# 1f72d4a52d96476c8365b05719f95c32
#: ../../../../1.9/docs/releases/1.7.1.txt:121
msgid ""
"Fixed a crash while parsing cookies containing invalid content "
"(:ticket:`23638`)."
msgstr ""

# 16a183591be64426ac7f47d36643fb7b
#: ../../../../1.9/docs/releases/1.7.1.txt:124
msgid ""
"The system check framework now raises error **models.E020** when the class "
"method ``Model.check()`` is unreachable (:ticket:`23615`)."
msgstr ""

# a243d1f59667464197311908d0133885
#: ../../../../1.9/docs/releases/1.7.1.txt:127
msgid ""
"Made the Oracle test database creation drop the test user in the event of an"
" unclean exit of a previous test run (:ticket:`23649`)."
msgstr ""

# f656d0d693ba4016b0611dba876340f6
#: ../../../../1.9/docs/releases/1.7.1.txt:130
msgid ""
"Fixed :djadmin:`makemigrations` to detect changes to :attr:`Meta.db_table "
"<django.db.models.Options.db_table>` (:ticket:`23629`)."
msgstr ""

# 72bbf62310a3430993005b1db398d43c
#: ../../../../1.9/docs/releases/1.7.1.txt:133
msgid ""
"Fixed a regression when feeding the Django test client with an empty data "
"string (:ticket:`21740`)."
msgstr ""

# 8573278d537c4b87826f603e44b9ce45
#: ../../../../1.9/docs/releases/1.7.1.txt:136
msgid ""
"Fixed a regression in :djadmin:`makemessages` where static files were "
"unexpectedly ignored (:ticket:`23583`)."
msgstr ""

# ae39aed160d34f8aab0556136ec1b599
#: ../../../../1.9/docs/releases/1.7.10.txt:3
msgid "Django 1.7.10 release notes"
msgstr ""

# 7fb9baf67a174dfca8a5a811bf0b914f
#: ../../../../1.9/docs/releases/1.7.10.txt:7
msgid "Django 1.7.10 fixes a security issue in 1.7.9."
msgstr ""

# 963ff85012af419f8cce154a4e642447
#: ../../../../1.9/docs/releases/1.7.11.txt:3
msgid "Django 1.7.11 release notes"
msgstr ""

# 9467d4b442ec4d138e6aa175af63a7a7
# 069c4edd54fa4f09b77838bee0b193a6
#: ../../../../1.9/docs/releases/1.7.11.txt:5
#: ../../../../1.9/docs/releases/1.8.7.txt:5
msgid "*November 24, 2015*"
msgstr ""

# bb43bf16f8b747a9ace0835f6a897554
#: ../../../../1.9/docs/releases/1.7.11.txt:7
msgid "Django 1.7.11 fixes a security issue and a data loss bug in 1.7.10."
msgstr ""

# 6ddd7bfe5d0748eb9ed8e7b5ab5fe131
# 439ba6af76144d9b903f6aa56395d11e
#: ../../../../1.9/docs/releases/1.7.11.txt:10
#: ../../../../1.9/docs/releases/1.8.7.txt:13
msgid "Fixed settings leak possibility in ``date`` template filter"
msgstr ""

# 0181be0763134461b1a582d17a41648e
# 21594b095b454dd187898b869b6e9f65
#: ../../../../1.9/docs/releases/1.7.11.txt:12
#: ../../../../1.9/docs/releases/1.8.7.txt:15
msgid ""
"If an application allows users to specify an unvalidated format for dates "
"and passes this format to the :tfilter:`date` filter, e.g. ``{{ "
"last_updated|date:user_date_format }}``, then a malicious user could obtain "
"any secret in the application's settings by specifying a settings key "
"instead of a date format. e.g. ``\"SECRET_KEY\"`` instead of ``\"j/m/Y\"``."
msgstr ""

# 7a44303debe84765959a40e8eccafdb4
# b6d35a46e0f9462a86b45342e16604c3
#: ../../../../1.9/docs/releases/1.7.11.txt:18
#: ../../../../1.9/docs/releases/1.8.7.txt:21
msgid ""
"To remedy this, the underlying function used by the ``date`` template "
"filter, ``django.utils.formats.get_format()``, now only allows accessing the"
" date/time formatting settings."
msgstr ""

# d00550f226984b23a5996316e5100fb7
# 503ff06106ea4e6cb1ca491b36a3182d
#: ../../../../1.9/docs/releases/1.7.11.txt:25
#: ../../../../1.9/docs/releases/1.8.7.txt:41
msgid ""
"Fixed a data loss possibility with :class:`~django.db.models.Prefetch` if "
"``to_attr`` is set to a ``ManyToManyField`` (:ticket:`25693`)."
msgstr ""

# 68c98392ec124e9b8cd8932f9198a43a
#: ../../../../1.9/docs/releases/1.7.2.txt:3
msgid "Django 1.7.2 release notes"
msgstr "Notes de publication de Django 1.7.2"

# a687573eb80f4aa78a5b45dfc201ad8f
#: ../../../../1.9/docs/releases/1.7.2.txt:7
msgid "Django 1.7.2 fixes several bugs in 1.7.1."
msgstr "Django 1.7.2 corrige plusieurs bogues de la 1.7.1."

# 0d9e5ccafcc546e784c87be150953203
#: ../../../../1.9/docs/releases/1.7.2.txt:15
msgid ""
"Fixed migration's renaming of auto-created many-to-many tables when changing"
" :attr:`Meta.db_table <django.db.models.Options.db_table>` "
"(:ticket:`23630`)."
msgstr ""

# da567747d5084bc482ae85cb96b96c6b
#: ../../../../1.9/docs/releases/1.7.2.txt:18
msgid ""
"Fixed a migration crash when adding an explicit ``id`` field to a model on "
"SQLite (:ticket:`23702`)."
msgstr ""

# 5289aae8e9ad4262ba2ef0348c8b9178
#: ../../../../1.9/docs/releases/1.7.2.txt:21
msgid ""
"Added a warning for duplicate models when a module is reloaded. Previously a"
" ``RuntimeError`` was raised every time two models clashed in the app "
"registry. (:ticket:`23621`)."
msgstr ""

# c51d58ed937a4f7d8c446e5eefb87e5f
#: ../../../../1.9/docs/releases/1.7.2.txt:25
msgid ""
"Prevented :djadmin:`flush` from loading initial data for migrated apps "
"(:ticket:`23699`)."
msgstr ""

# d3ff013aabdd4cc0a5d9814a07c24768
#: ../../../../1.9/docs/releases/1.7.2.txt:28
msgid ""
"Fixed a :djadmin:`makemessages` regression in 1.7.1 when "
":setting:`STATIC_ROOT` has the default ``None`` value (:ticket:`23717`)."
msgstr ""

# 15120731b9124f96826577a81cca0caf
#: ../../../../1.9/docs/releases/1.7.2.txt:31
msgid "Added GeoDjango compatibility with mysqlclient database driver."
msgstr "Ajout de la compatibilité GeoDjango avec le pilote de la base de données mysqlclient."

# 92f18b61219c4b45a33d6f46f2a5d9ba
#: ../../../../1.9/docs/releases/1.7.2.txt:33
msgid ""
"Fixed MySQL 5.6+ crash with ``GeometryField``\\s in migrations "
"(:ticket:`23719`)."
msgstr "Résolve le plantage de MySQL 5.6+ avec ``GeometryField``\\s dans les migrations (:ticket:`23719`)."

# 485ba9a05e3345fa99ba1f920534e41f
#: ../../../../1.9/docs/releases/1.7.2.txt:36
msgid ""
"Fixed a migration crash when removing a field that is referenced in "
"``AlterIndexTogether`` or ``AlterUniqueTogether`` (:ticket:`23614`)."
msgstr ""

# 6e66f21049044765b2a254df19a93a8d
#: ../../../../1.9/docs/releases/1.7.2.txt:39
msgid "Updated the first day of the week in the Ukrainian locale to Monday."
msgstr ""

# 106d2e272af24db0a670908274dd9477
#: ../../../../1.9/docs/releases/1.7.2.txt:41
msgid ""
"Added support for transactional spatial metadata initialization on "
"SpatiaLite 4.1+ (:ticket:`23152`)."
msgstr ""

# 15c126723b574c2faa07bdb46e48d5a9
#: ../../../../1.9/docs/releases/1.7.2.txt:44
msgid ""
"Fixed a migration crash that prevented changing a nullable field with a "
"default to non-nullable with the same default (:ticket:`23738`)."
msgstr ""

# c21344177e6c469fabef18e45ff29e13
#: ../../../../1.9/docs/releases/1.7.2.txt:47
msgid ""
"Fixed a migration crash when adding ``GeometryField``\\s with ``blank=True``"
" on PostGIS (:ticket:`23731`)."
msgstr ""

# f7919dedbe344ca4ba905d16a0dedd8d
#: ../../../../1.9/docs/releases/1.7.2.txt:50
msgid ""
"Allowed usage of ``DateTimeField()`` as ``Transform.output_field`` "
"(:ticket:`23420`)."
msgstr ""

# 822cbb53a57b49708d39b61dff3cf267
#: ../../../../1.9/docs/releases/1.7.2.txt:53
msgid ""
"Fixed a migration serializing bug involving ``float(\"nan\")`` and "
"``float(\"inf\")`` (:ticket:`23770`)."
msgstr ""

# a3b04ab93b5e4a54ba3008276859fa2d
#: ../../../../1.9/docs/releases/1.7.2.txt:56
msgid ""
"Fixed a regression where custom form fields having a ``queryset`` attribute "
"but no ``limit_choices_to`` could not be used in a "
":class:`~django.forms.ModelForm` (:ticket:`23795`)."
msgstr ""

# 5f8346d44e1e4af1adcc11ce3afa88ba
#: ../../../../1.9/docs/releases/1.7.2.txt:60
msgid ""
"Fixed a custom field type validation error with MySQL backend when "
"``db_type`` returned ``None`` (:ticket:`23761`)."
msgstr ""

# 32c42e3695cf4600b8c07d3ffcb81b57
#: ../../../../1.9/docs/releases/1.7.2.txt:63
msgid ""
"Fixed a migration crash when a field is renamed that is part of an "
"``index_together`` (:ticket:`23859`)."
msgstr ""

# c7bbd7b03603411f9e9f0eac0565b11a
#: ../../../../1.9/docs/releases/1.7.2.txt:66
msgid ""
"Fixed :djadmin:`squashmigrations` to respect the ``--no-optimize`` parameter"
" (:ticket:`23799`)."
msgstr ""

# ebd071b894f2479abec28257516b0cc1
#: ../../../../1.9/docs/releases/1.7.2.txt:69
msgid ""
"Made :class:`~django.db.migrations.operations.RenameModel` reversible "
"(:ticket:`22248`)"
msgstr ""

# 452e6658b534403ea64ee4e72817bbeb
#: ../../../../1.9/docs/releases/1.7.2.txt:72
msgid ""
"Avoided unnecessary rollbacks of migrations from other apps when migrating "
"backwards (:ticket:`23410`)."
msgstr ""

# 7e30f3d3d4dc4df78434c7b0b3449d36
#: ../../../../1.9/docs/releases/1.7.2.txt:75
msgid ""
"Fixed a rare query error when using deeply nested subqueries "
"(:ticket:`23605`)."
msgstr ""

# f8f17a1472094876a56e249877b1d054
#: ../../../../1.9/docs/releases/1.7.2.txt:78
msgid ""
"Fixed a crash in migrations when deleting a field that is part of a "
"``index/unique_together`` constraint (:ticket:`23794`)."
msgstr ""

# 3ba0b3cfe63d417d814f3b94bf74067f
#: ../../../../1.9/docs/releases/1.7.2.txt:81
msgid ""
"Fixed ``django.core.files.File.__repr__()`` when the file's ``name`` "
"contains Unicode characters (:ticket:`23888`)."
msgstr ""

# a3cca600206043048f7a1825d2844452
#: ../../../../1.9/docs/releases/1.7.2.txt:84
msgid ""
"Added missing context to the admin's ``delete_selected`` view that prevented"
" custom site header, etc. from appearing (:ticket:`23898`)."
msgstr ""

# ff08e7cfa6dc490aac10232af5f2ebfb
#: ../../../../1.9/docs/releases/1.7.2.txt:90
msgid ""
"Fixed an infinite loop bug for certain cyclic migration dependencies, and "
"made the error message for cyclic dependencies much more helpful."
msgstr ""

# 40bbe9f0d0b9440aa8029c06cc3ac9eb
#: ../../../../1.9/docs/releases/1.7.2.txt:93
msgid ""
"Added missing ``index_together`` handling for SQLite (:ticket:`23880`)."
msgstr ""

# b9a349cc4e9c400dadc286aab51cde4f
#: ../../../../1.9/docs/releases/1.7.2.txt:95
msgid ""
"Fixed a crash when ``RunSQL`` SQL content was collected by the schema "
"editor, typically when using ``sqlmigrate`` (:ticket:`23909`)."
msgstr ""

# 29c0910ff82c4080b8748744b17c6a22
#: ../../../../1.9/docs/releases/1.7.2.txt:98
msgid ""
"Fixed a regression in ``contrib.admin`` add/change views which caused some "
"``ModelAdmin`` methods to receive the incorrect ``obj`` value "
"(:ticket:`23934`)."
msgstr ""

# f1597e337ee149fca216704a3dc58705
#: ../../../../1.9/docs/releases/1.7.2.txt:102
msgid ""
"Fixed ``runserver`` crash when socket error message contained Unicode "
"characters (:ticket:`23946`)."
msgstr ""

# a0fb37e05f56422ba73f307f618b0e5b
#: ../../../../1.9/docs/releases/1.7.2.txt:105
msgid ""
"Fixed serialization of ``type`` when adding a ``deconstruct()`` method "
"(:ticket:`23950`)."
msgstr ""

# 16ec66f883ad4716a237ff7c29d1cdee
#: ../../../../1.9/docs/releases/1.7.2.txt:108
msgid ""
"Prevented the "
":class:`~django.contrib.auth.middleware.SessionAuthenticationMiddleware` "
"from setting a ``\"Vary: Cookie\"`` header on all responses "
"(:ticket:`23939`)."
msgstr ""

# f2ce3c2f6d0c43b68bd90f7d4c2f0a62
#: ../../../../1.9/docs/releases/1.7.2.txt:112
msgid ""
"Fixed a crash when adding ``blank=True`` to ``TextField()`` on MySQL "
"(:ticket:`23920`)."
msgstr ""

# 5c645ecf21824538b0b74c19b7632c61
#: ../../../../1.9/docs/releases/1.7.2.txt:115
msgid ""
"Fixed index creation by the migration infrastructure, particularly when "
"dealing with PostgreSQL specific ``{text|varchar}_pattern_ops`` indexes "
"(:ticket:`23954`)."
msgstr ""

# a51b23ea63234f969f0dfeaf85fd9ab2
#: ../../../../1.9/docs/releases/1.7.2.txt:119
msgid ""
"Fixed bug in ``makemigrations`` that created broken migration files when "
"dealing with multiple table inheritance and inheriting from more than one "
"model (:ticket:`23956`)."
msgstr ""

# 024d365ad65c4202bdee7b8baf7ed07a
#: ../../../../1.9/docs/releases/1.7.2.txt:123
msgid ""
"Fixed a crash when a ``MultiValueField`` has invalid data (:ticket:`23674`)."
msgstr ""

# c50a5c20b13c4958b82f4d59a16b4d16
#: ../../../../1.9/docs/releases/1.7.2.txt:125
msgid ""
"Fixed a crash in the admin when using \"Save as new\" and also deleting a "
"related inline (:ticket:`23857`)."
msgstr ""

# c8e6237989c246e5b342e1305c25d8f0
#: ../../../../1.9/docs/releases/1.7.2.txt:128
msgid ""
"Always converted ``related_name`` to text (unicode), since that is required "
"on Python 3 for interpolation. Removed conversion of ``related_name`` to "
"text in migration deconstruction (:ticket:`23455` and :ticket:`23982`)."
msgstr ""

# d9fd28e5e6c94458a00a86cdacc2ee1d
#: ../../../../1.9/docs/releases/1.7.2.txt:132
msgid ""
"Enlarged the sizes of tablespaces which are created by default for testing "
"on Oracle (the main tablespace was increased from 200M to 300M and the "
"temporary tablespace from 100M to 150M). This was required to accommodate "
"growth in Django's own test suite (:ticket:`23969`)."
msgstr ""

# 021f4206a1324121a5811d049e9b59a0
#: ../../../../1.9/docs/releases/1.7.2.txt:137
msgid "Fixed ``timesince`` filter translations in Korean (:ticket:`23989`)."
msgstr ""

# 67f59d02e2014e84ae51da0b991c58ea
#: ../../../../1.9/docs/releases/1.7.2.txt:139
msgid ""
"Fixed the SQLite ``SchemaEditor`` to properly add defaults in the absence of"
" a user specified ``default``. For example, a ``CharField`` with "
"``blank=True`` didn't set existing rows to an empty string which resulted in"
" a crash when adding the ``NOT NULL`` constraint (:ticket:`23987`)."
msgstr ""

# 5159130b87944bddbd5b03055cf87a3a
#: ../../../../1.9/docs/releases/1.7.2.txt:144
msgid ""
"``makemigrations`` no longer prompts for a default value when adding "
"``TextField()`` or ``CharField()`` without a ``default`` (:ticket:`23405`)."
msgstr ""

# a26665c8ab574e4498111e67b1246154
#: ../../../../1.9/docs/releases/1.7.2.txt:147
msgid ""
"Fixed a migration crash when adding ``order_with_respect_to`` to a table "
"with existing rows (:ticket:`23983`)."
msgstr ""

# 75928a59be9543228a25f6274838b9e8
#: ../../../../1.9/docs/releases/1.7.2.txt:150
msgid ""
"Restored the ``pre_migrate`` signal if all apps have migrations "
"(:ticket:`23975`)."
msgstr ""

# 2a347ad4b8554f92a446f9a37aa5ace9
#: ../../../../1.9/docs/releases/1.7.2.txt:153
msgid ""
"Made admin system checks run for custom ``AdminSite``\\s (:ticket:`23497`)."
msgstr ""

# c3075911c24140b3801a4066b0c1473b
#: ../../../../1.9/docs/releases/1.7.2.txt:155
msgid ""
"Ensured the app registry is fully populated when unpickling models. When an "
"external script (like a queueing infrastructure) reloads pickled models, it "
"could crash with an ``AppRegistryNotReady`` exception (:ticket:`24007`)."
msgstr ""

# 6266165d58184471924dde7fd05b2ada
#: ../../../../1.9/docs/releases/1.7.2.txt:159
msgid ""
"Added quoting to field indexes in the SQL generated by migrations to prevent"
" a crash when the index name requires it (:ticket:`#24015`)."
msgstr ""

# 36e5c9a67bbc496ba70bf215de7fe1fe
#: ../../../../1.9/docs/releases/1.7.2.txt:162
msgid ""
"Added ``datetime.time`` support to migrations questioner (:ticket:`23998`)."
msgstr ""

# 402626ac387a4143aacc720d1f07e82d
#: ../../../../1.9/docs/releases/1.7.2.txt:164
msgid "Fixed admindocs crash on apps installed as eggs (:ticket:`23525`)."
msgstr ""

# ce3e7ad798f34d5e88ccd6b2232eec11
#: ../../../../1.9/docs/releases/1.7.2.txt:166
msgid ""
"Changed migrations autodetector to generate an ``AlterModelOptions`` "
"operation instead of ``DeleteModel`` and ``CreateModel`` operations when "
"changing ``Meta.managed``. This prevents data loss when changing ``managed``"
" from ``False`` to ``True`` and vice versa (:ticket:`24037`)."
msgstr ""

# 669c61b407df4db5a58433b1cafb791a
#: ../../../../1.9/docs/releases/1.7.2.txt:171
msgid ""
"Enabled the ``sqlsequencereset`` command on apps with migrations "
"(:ticket:`24054`)."
msgstr ""

# 55589a98e1da4ebfb59c5ec90cd0d35d
#: ../../../../1.9/docs/releases/1.7.2.txt:174
msgid "Added tablespace SQL to apps with migrations (:ticket:`24051`)."
msgstr ""

# 41d814059665473282574b4c5c4ab92f
#: ../../../../1.9/docs/releases/1.7.2.txt:176
msgid ""
"Corrected ``contrib.sites`` default site creation in a multiple database "
"setup (:ticket:`24000`)."
msgstr ""

# 6e0729affb97405bb1ed8c5d0403ec46
#: ../../../../1.9/docs/releases/1.7.2.txt:179
msgid ""
"Restored support for objects that aren't :class:`str` or :class:`bytes` in "
":func:`~django.utils.safestring.mark_for_escaping` on Python 3."
msgstr ""

# ebb71d8173bb4417a3e371a50de6f766
#: ../../../../1.9/docs/releases/1.7.2.txt:182
msgid ""
"Supported strings escaped by third-party libraries with the ``__html__`` "
"convention in the template engine (:ticket:`23831`)."
msgstr ""

# ebc72b1c870a4b45b5863c8f2215dabb
#: ../../../../1.9/docs/releases/1.7.2.txt:185
msgid ""
"Prevented extraneous ``DROP DEFAULT`` SQL in migrations (:ticket:`23581`)."
msgstr ""

# b8331113f5f341449e5d88fe89bc8ecb
#: ../../../../1.9/docs/releases/1.7.2.txt:187
msgid ""
"Restored the ability to use more than five levels of subqueries "
"(:ticket:`23758`)."
msgstr ""

# 386244ca7dbf48538d2035ce1688ee89
#: ../../../../1.9/docs/releases/1.7.2.txt:190
msgid ""
"Fixed crash when ``ValidationError`` is initialized with a "
"``ValidationError`` that is initialized with a dictionary (:ticket:`24008`)."
msgstr ""

# e70a7ae3b15b463395c27a596ca7aa4a
#: ../../../../1.9/docs/releases/1.7.2.txt:193
msgid ""
"Prevented a crash on apps without migrations when running ``migrate --list``"
" (:ticket:`23366`)."
msgstr ""

# f597ac58b1d442d39bb4e46a09688627
#: ../../../../1.9/docs/releases/1.7.3.txt:3
msgid "Django 1.7.3 release notes"
msgstr ""

# e8598d03529b41bc9f7dc24a9a649928
#: ../../../../1.9/docs/releases/1.7.3.txt:7
msgid "Django 1.7.3 fixes several security issues and bugs in 1.7.2."
msgstr ""

# 484092b132db4ed59c1684738d77456b
#: ../../../../1.9/docs/releases/1.7.3.txt:74
msgid ""
"The default iteration count for the PBKDF2 password hasher has been "
"increased by 25%. This part of the normal major release process was "
"inadvertently omitted in 1.7. This backwards compatible change will not "
"affect users who have subclassed "
"``django.contrib.auth.hashers.PBKDF2PasswordHasher`` to change the default "
"value."
msgstr ""

# ccd440830bcf4768adf97fd4d44a45f6
#: ../../../../1.9/docs/releases/1.7.3.txt:81
msgid ""
"Fixed a crash in the CSRF middleware when handling non-ASCII referer header "
"(:ticket:`23815`)."
msgstr ""

# 81dca77773bf47049c5696c8153a799c
#: ../../../../1.9/docs/releases/1.7.3.txt:84
msgid ""
"Fixed a crash in the ``django.contrib.auth.redirect_to_login`` view when "
"passing a :func:`~django.core.urlresolvers.reverse_lazy` result on Python 3 "
"(:ticket:`24097`)."
msgstr ""

# 3f1e5c586cc04bd79718f40c74a45fca
#: ../../../../1.9/docs/releases/1.7.3.txt:88
msgid "Added correct formats for Greek (``el``) (:ticket:`23967`)."
msgstr ""

# 38c9429c5ac7419485f5373a82284bca
#: ../../../../1.9/docs/releases/1.7.3.txt:90
msgid ""
"Fixed a migration crash when unapplying a migration where multiple "
"operations interact with the same model (:ticket:`24110`)."
msgstr ""

# 110f6f347e224d0a8399527b56b4a677
#: ../../../../1.9/docs/releases/1.7.4.txt:3
msgid "Django 1.7.4 release notes"
msgstr ""

# ab6c3164855d4e2ab1090f8695c4ac18
#: ../../../../1.9/docs/releases/1.7.4.txt:7
msgid "Django 1.7.4 fixes several bugs in 1.7.3."
msgstr ""

# 969a85f7ca70483fbd79d02bd281a103
#: ../../../../1.9/docs/releases/1.7.4.txt:12
msgid ""
"Fixed a migration crash when unapplying ``contrib.contenttypes``’s or "
"``contrib.auth``’s first migration (:ticket:`24075`)."
msgstr ""

# abf9ca7614cd416f8bf20436d0cb4529
#: ../../../../1.9/docs/releases/1.7.4.txt:15
msgid ""
"Made the migration's ``RenameModel`` operation rename ``ManyToManyField`` "
"tables (:ticket:`24135`)."
msgstr ""

# f8a038bcd4c64ba281bf0543e8797405
#: ../../../../1.9/docs/releases/1.7.4.txt:18
msgid ""
"Fixed a migration crash on MySQL when migrating from a ``OneToOneField`` to "
"a ``ForeignKey`` (:ticket:`24163`)."
msgstr ""

# 599aa333ad4541f1ba2c2ef1b5e30241
#: ../../../../1.9/docs/releases/1.7.4.txt:21
msgid ""
"Prevented the ``static.serve`` view from producing ``ResourceWarning``\\s in"
" certain circumstances (security fix regression, :ticket:`24193`)."
msgstr ""

# b0c4792408324ab19949f7891393ea05
#: ../../../../1.9/docs/releases/1.7.4.txt:24
msgid ""
"Fixed schema check for ManyToManyField to look for internal type instead of "
"checking class instance, so you can write custom m2m-like fields with the "
"same behavior. (:ticket:`24104`)."
msgstr ""

# c8aaa0a4e70b4b898e74cd26e696e561
#: ../../../../1.9/docs/releases/1.7.5.txt:3
msgid "Django 1.7.5 release notes"
msgstr ""

# 3ab6ccd2bdd64855bcc77158b9b3603f
#: ../../../../1.9/docs/releases/1.7.5.txt:5
msgid "*February 25, 2015*"
msgstr ""

# 92492ae741584ed0913e9620979cc6e0
#: ../../../../1.9/docs/releases/1.7.5.txt:7
msgid "Django 1.7.5 fixes several bugs in 1.7.4."
msgstr ""

# 75f137d21a8f45d8bfd22c114564f95e
#: ../../../../1.9/docs/releases/1.7.5.txt:12
msgid ""
"Reverted a fix that prevented a migration crash when unapplying "
"``contrib.contenttypes``’s or ``contrib.auth``’s first migration "
"(:ticket:`24075`) due to severe impact on the test performance "
"(:ticket:`24251`) and problems in multi-database setups (:ticket:`24298`)."
msgstr ""

# fc84f0a4093845ffa41eb3cecc83e4ca
#: ../../../../1.9/docs/releases/1.7.5.txt:17
msgid ""
"Fixed a regression that prevented custom fields inheriting from "
"``ManyToManyField`` from being recognized in migrations (:ticket:`24236`)."
msgstr ""

# 191027bb851e4add9866efffba1ddb14
#: ../../../../1.9/docs/releases/1.7.5.txt:20
msgid ""
"Fixed crash in ``contrib.sites`` migrations when a default database isn't "
"used (:ticket:`24332`)."
msgstr ""

# a5b14f4d731c40e78a1506e62fe4302d
#: ../../../../1.9/docs/releases/1.7.5.txt:23
msgid ""
"Added the ability to set the isolation level on PostgreSQL with psycopg2 ≥ "
"2.4.2 (:ticket:`24318`). It was advertised as a new feature in Django 1.6 "
"but it didn't work in practice."
msgstr ""

# 20842c7382eb4eb090e124aae38ce0c0
#: ../../../../1.9/docs/releases/1.7.5.txt:27
msgid "Formats for the Azerbaijani locale (``az``) have been added."
msgstr ""

# 038abe24641a485188dad770b73921b3
#: ../../../../1.9/docs/releases/1.7.6.txt:3
msgid "Django 1.7.6 release notes"
msgstr ""

# 0636f95734314e4b976df1fafdcd121d
#: ../../../../1.9/docs/releases/1.7.6.txt:5
msgid "*March 9, 2015*"
msgstr ""

# 21b52a703ae4491dad08b740cc16141f
#: ../../../../1.9/docs/releases/1.7.6.txt:7
msgid "Django 1.7.6 fixes a security issue and several bugs in 1.7.5."
msgstr ""

# b7631b43cc1d46adbe378264dfc8d4a2
#: ../../../../1.9/docs/releases/1.7.6.txt:10
msgid ""
"Mitigated an XSS attack via properties in ``ModelAdmin.readonly_fields``"
msgstr ""

# 7f67f7f2bb414ba6888fed51a9fae2da
#: ../../../../1.9/docs/releases/1.7.6.txt:12
msgid ""
"The :attr:`ModelAdmin.readonly_fields "
"<django.contrib.admin.ModelAdmin.readonly_fields>` attribute in the Django "
"admin allows displaying model fields and model attributes. While the former "
"were correctly escaped, the latter were not. Thus untrusted content could be"
" injected into the admin, presenting an exploitation vector for XSS attacks."
msgstr ""

# 066bffce39ad464281d5ecdbc0c6ac56
#: ../../../../1.9/docs/releases/1.7.6.txt:18
msgid ""
"In this vulnerability, every model attribute used in ``readonly_fields`` "
"that is not an actual model field (e.g. a :class:`property`) will **fail to "
"be escaped** even if that attribute is not marked as safe. In this release, "
"autoescaping is now correctly applied."
msgstr ""

# a75446ed4acf4560bc2a2c6398922e7f
#: ../../../../1.9/docs/releases/1.7.6.txt:26
msgid ""
"Fixed crash when coercing ``ManyRelatedManager`` to a string "
"(:ticket:`24352`)."
msgstr ""

# ca1fae26890a4f1f8ac8a05691dead0d
#: ../../../../1.9/docs/releases/1.7.6.txt:29
msgid ""
"Fixed a bug that prevented migrations from adding a foreign key constraint "
"when converting an existing field to a foreign key (:ticket:`24447`)."
msgstr ""

# d7a760201c3d42ea90bb13263bc1f1c8
#: ../../../../1.9/docs/releases/1.7.7.txt:3
msgid "Django 1.7.7 release notes"
msgstr ""

# 9ec6bf36d63245a0b6e7df4bc1e90a37
#: ../../../../1.9/docs/releases/1.7.7.txt:7
msgid "Django 1.7.7 fixes several bugs and security issues in 1.7.6."
msgstr ""

# e7a683079f9b4bd68bdeab42425ed045
#: ../../../../1.9/docs/releases/1.7.7.txt:48
msgid ""
"Fixed renaming of classes in migrations where renaming a subclass would "
"cause incorrect state to be recorded for objects that referenced the "
"superclass (:ticket:`24354`)."
msgstr ""

# 130ca67106a744fe96d5ad9ba0926ab6
#: ../../../../1.9/docs/releases/1.7.7.txt:52
msgid ""
"Stopped writing migration files in dry run mode when merging migration "
"conflicts. When ``makemigrations --merge`` is called with ``verbosity=3`` "
"the migration file is written to ``stdout`` (:ticket:`24427`)."
msgstr ""

# 75d75a70e86248a7b4561a3340690b52
#: ../../../../1.9/docs/releases/1.7.8.txt:3
msgid "Django 1.7.8 release notes"
msgstr ""

# 1af6db3f02cd4de8b42dce0eeb0826b9
# 4d7a686ef6a44f8bba593a4347d4b013
#: ../../../../1.9/docs/releases/1.7.8.txt:5
#: ../../../../1.9/docs/releases/1.8.1.txt:5
msgid "*May 1, 2015*"
msgstr ""

# f04265fc6ab946388b4b2add0cc7cecc
#: ../../../../1.9/docs/releases/1.7.8.txt:7
msgid "Django 1.7.8 fixes:"
msgstr ""

# c6e4e80e58b3441ab89a59ee5ce73a3a
#: ../../../../1.9/docs/releases/1.7.8.txt:9
msgid ""
"Database introspection with SQLite 3.8.9 (released April 8, 2015) "
"(:ticket:`24637`)."
msgstr ""

# 54aea67c11174cbd8811e7c6ba46545c
#: ../../../../1.9/docs/releases/1.7.8.txt:12
msgid "A database table name quoting regression in 1.7.2 (:ticket:`24605`)."
msgstr ""

# 047004fbe81f41b78c82b44293994e46
#: ../../../../1.9/docs/releases/1.7.8.txt:14
msgid ""
"The loss of ``null``/``not null`` column properties during field alteration "
"of MySQL databases (:ticket:`24595`)."
msgstr ""

# cb600a6306d4424a908602693bd83681
#: ../../../../1.9/docs/releases/1.7.9.txt:3
msgid "Django 1.7.9 release notes"
msgstr ""

# 258e17d6cd7b4442b1d0bc9ec35e4b4f
#: ../../../../1.9/docs/releases/1.7.9.txt:7
msgid "Django 1.7.9 fixes several security issues and bugs in 1.7.8."
msgstr ""

# dcdf16ed55d3413491f99437d0b8a5ad
# c3f6b382571244cc97a545bfe5dcef23
#: ../../../../1.9/docs/releases/1.7.9.txt:46
#: ../../../../1.9/docs/releases/1.8.3.txt:51
msgid ""
":func:`~django.core.validators.validate_ipv4_address`, "
":func:`~django.core.validators.validate_slug`, and "
":class:`~django.core.validators.URLValidator` are also affected, however, as"
" of Django 1.6 the ``GenericIPAddresseField``, ``IPAddressField``, "
"``SlugField``, and ``URLField`` form fields which use these validators all "
"strip the input, so the possibility of newlines entering your data only "
"exists if you are using these validators outside of the form fields."
msgstr ""

# ddc8f7f52cd949f1ac26cedfe2a998f5
# 6ab4cb925fb7462682790161f1a85b29
#: ../../../../1.9/docs/releases/1.7.9.txt:61
#: ../../../../1.9/docs/releases/1.8.3.txt:90
msgid ""
"Prevented the loss of ``null``/``not null`` column properties during field "
"renaming of MySQL databases (:ticket:`24817`)."
msgstr ""

# c96ea181cf9d456e8b9c5d47042b0619
# bf426f35d2db4186baaff75122ebed7c
#: ../../../../1.9/docs/releases/1.7.9.txt:64
#: ../../../../1.9/docs/releases/1.8.3.txt:124
msgid ""
"Fixed ``SimpleTestCase.assertRaisesMessage()`` on Python 2.7.10 "
"(:ticket:`24903`)."
msgstr ""

# f79567ca7e964cfdbc3f11771ac3b0b1
#: ../../../../1.9/docs/releases/1.8.txt:3
msgid "Django 1.8 release notes"
msgstr "Notes de publication de Django 1.8"

# e61a344934fd42528c77f2bc07dc9c6d
#: ../../../../1.9/docs/releases/1.8.txt:5
msgid "*April 1, 2015*"
msgstr "*1er avril 2015*"

# 2092df85874a41c39af769e13a888f0b
#: ../../../../1.9/docs/releases/1.8.txt:7
msgid "Welcome to Django 1.8!"
msgstr "Bienvenue dans Django 1.8 !"

# 95565044c9f9426d9cd00b6b3a02767b
#: ../../../../1.9/docs/releases/1.8.txt:9
msgid ""
"These release notes cover the `new features`_, as well as some `backwards "
"incompatible changes`_ you'll want to be aware of when upgrading from Django"
" 1.7 or older versions. We've also `begun the deprecation process for some "
"features`_, and some features have reached the end of their deprecation "
"process and `have been removed`_."
msgstr "Ces notes de publications couvrent les `nouvelles fonctionnalités`_, ainsi que certaines `modifications non rétro-compatibles` dont vous voudrez être au courant lors la mise à jour depuis Django 1.7 ou des versions plus anciennes. Nous avons également commencé `le processus d'obsolescence de certaines fonctionnalités`_, et certaines fonctionnalités ont atteint la fin de leur processus d'obsolescence et `ont été supprimées`_."

# 5b4a7c10d9dc4da886c3af65e455c984
#: ../../../../1.9/docs/releases/1.8.txt:15
msgid ""
"Django 1.8 has been designated as Django's second :term:`long-term support "
"release`. It will receive security updates for at least three years after "
"its release. Support for the previous LTS, Django 1.4, will end 6 months "
"from the release date of Django 1.8."
msgstr "Django 1.8 a été désigné comme la deuxième :term:`version prise en charge à long terme` (LTS) de Django. Elle recevra des mises à jour de sécurité pour au moins 3 ans après sa publication initiale. La prise en charge de la version LTS précédente, Django 1.4, se terminera 6 mois après la date de publication de Django 1.8."

# aa040a51f64f419bbb67ebb44d1cd25d
#: ../../../../1.9/docs/releases/1.8.txt:28
msgid ""
"Django 1.8 requires Python 2.7, 3.2, 3.3, 3.4, or 3.5. We **highly "
"recommend** and only officially support the latest release of each series."
msgstr "Django 1.8 requiert Python 2.7, 3.2, 3.3, 3.4 ou 3.5. Nous **recommandons vivement** et nous ne prenons officiellement en charge que la dernière publication de chaque série."

# b3d7061c845045f496d9921611706ddd
#: ../../../../1.9/docs/releases/1.8.txt:31
msgid "Django 1.8 is the first release to support Python 3.5."
msgstr "Django 1.8 est la première version à prendre en charge Python 3.5."

# b03ae804da8649bda84f777a1718e428
#: ../../../../1.9/docs/releases/1.8.txt:33
msgid ""
"Due to the end of upstream support for Python 3.2 in February 2016, we won't"
" test Django 1.8.x on Python 3.2 after the end of 2016."
msgstr ""

# 0362117a8d094d3684e80b4dc1c41bdc
#: ../../../../1.9/docs/releases/1.8.txt:37
msgid "What's new in Django 1.8"
msgstr "Quoi de neuf dans Django 1.8"

# 069e38dba4644337a236b6e2a4d8ddff
#: ../../../../1.9/docs/releases/1.8.txt:40
msgid "``Model._meta`` API"
msgstr "L'API ``Model._meta``"

# f2cd27ab27ca48dd8c098b03239f560d
#: ../../../../1.9/docs/releases/1.8.txt:42
msgid ""
"Django now has a formalized API for :doc:`Model._meta </ref/models/meta>`, "
"providing an officially supported way to :ref:`retrieve fields <model-meta-"
"field-api>` and filter fields based on their :ref:`attributes <model-field-"
"attributes>`."
msgstr "Django contient dorénavant une API formalisée pour :doc:`Model._meta </ref/models/meta>`, fournissant une manière officiellement prise en charge d':ref:`accéder aux définitions de champs <model-meta-field-api>` et de filtrer les champs sur la base de leurs :ref:`attributs <model-field-attributes>`."

# aebb473d15534a20b2b4da824da3b71b
#: ../../../../1.9/docs/releases/1.8.txt:47
msgid ""
"The ``Model._meta`` object has been part of Django since the days of "
"pre-0.96 \"Magic Removal\" -- it just wasn't an official, stable API. In "
"recognition of this, we've endeavored to maintain backwards-compatibility "
"with the old API endpoint where possible. However, API endpoints that aren't"
" part of the new official API have been deprecated and will eventually be "
"removed. A :ref:`guide to migrating from the old API to the new API "
"<migrating-old-meta-api>` has been provided."
msgstr ""

# d45518c3372d4c56a6187bc7fbda264a
#: ../../../../1.9/docs/releases/1.8.txt:56
msgid "Multiple template engines"
msgstr ""

# c00bef7c2e8a4b2fbd2a060c598c0ead
#: ../../../../1.9/docs/releases/1.8.txt:58
msgid ""
"Django 1.8 defines a stable API for integrating template backends. It "
"includes built-in support for the Django template language and for "
":class:`~django.template.backends.jinja2.Jinja2`. It supports rendering "
"templates with multiple engines within the same project. Learn more about "
"the new features in the :doc:`topic guide </topics/templates>` and check the"
" :doc:`upgrade instructions </ref/templates/upgrading>` for details."
msgstr ""

# d115cafefb654edca1b3e327dad71d25
#: ../../../../1.9/docs/releases/1.8.txt:66
msgid "Security enhancements"
msgstr ""

# 32caa325c85a4194a10f066984a521b1
#: ../../../../1.9/docs/releases/1.8.txt:68
msgid ""
"Several features of the django-secure_ third-party library have been "
"integrated into Django. "
":class:`django.middleware.security.SecurityMiddleware` provides several "
"security enhancements to the request/response cycle. The new "
":djadminopt:`--deploy` option of the :djadmin:`check` command allows you to "
"check your production settings file for ways to increase the security of "
"your site."
msgstr ""

# 84d39055328d4e3da8934d007616d70e
#: ../../../../1.9/docs/releases/1.8.txt:78
msgid "New PostgreSQL specific functionality"
msgstr ""

# f80b700b057246c0b3acef1d28e53e0d
#: ../../../../1.9/docs/releases/1.8.txt:80
msgid ""
"Django now has a module with extensions for PostgreSQL specific features, "
"such as :class:`~django.contrib.postgres.fields.ArrayField`, "
":class:`~django.contrib.postgres.fields.HStoreField`, :ref:`range-fields`, "
"and :lookup:`unaccent` lookup. A full breakdown of the features is available"
" :doc:`in the documentation </ref/contrib/postgres/index>`."
msgstr ""

# 6e848c9e7d204f57869e10926a8c656b
#: ../../../../1.9/docs/releases/1.8.txt:87
msgid "New data types"
msgstr ""

# 82d63382f46045b68b0b795f47122e63
#: ../../../../1.9/docs/releases/1.8.txt:89
msgid ""
"Django now has a :class:`~django.db.models.UUIDField` for storing "
"universally unique identifiers. It is stored as the native ``uuid`` data "
"type on PostgreSQL and as a fixed length character field on other backends. "
"There is a corresponding :class:`form field <django.forms.UUIDField>`."
msgstr ""

# df90d8f509be42f383e48412fb7d95ed
#: ../../../../1.9/docs/releases/1.8.txt:94
msgid ""
"Django now has a :class:`~django.db.models.DurationField` for storing "
"periods of time - modeled in Python by :class:`~python:datetime.timedelta`. "
"It is stored in the native ``interval`` data type on PostgreSQL, as a "
"``INTERVAL DAY(9) TO SECOND(6)`` on Oracle, and as a ``bigint`` of "
"microseconds on other backends. Date and time related arithmetic has also "
"been improved on all backends. There is a corresponding :class:`form field "
"<django.forms.DurationField>`."
msgstr ""

# b98f2d8b165f43ffbe46afa2948c010f
#: ../../../../1.9/docs/releases/1.8.txt:103
msgid "Query Expressions, Conditional Expressions, and Database Functions"
msgstr ""

# 52cba280f49a46f791ef8ed4d0e73316
#: ../../../../1.9/docs/releases/1.8.txt:105
msgid ""
":doc:`Query Expressions </ref/models/expressions>` allow you to create, "
"customize, and compose complex SQL expressions. This has enabled annotate to"
" accept expressions other than aggregates. Aggregates are now able to "
"reference multiple fields, as well as perform arithmetic, similar to ``F()``"
" objects. :meth:`~django.db.models.query.QuerySet.order_by` has also gained "
"the ability to accept expressions."
msgstr ""

# 3ac7f2ef4a164cc3ae7e713d66a9ad29
#: ../../../../1.9/docs/releases/1.8.txt:112
msgid ""
":doc:`Conditional Expressions </ref/models/conditional-expressions>` allow "
"you to use :keyword:`if` ... :keyword:`elif` ... :keyword:`else` logic "
"within queries."
msgstr ""

# 4cf5976266f049089002fd96ab09f89b
#: ../../../../1.9/docs/releases/1.8.txt:116
msgid ""
"A collection of :doc:`database functions </ref/models/database-functions>` "
"is also included with functionality such as "
":class:`~django.db.models.functions.Coalesce`, "
":class:`~django.db.models.functions.Concat`, and "
":class:`~django.db.models.functions.Substr`."
msgstr ""

# b9d4cd179905485a928ed18bfa261066
#: ../../../../1.9/docs/releases/1.8.txt:123
msgid "``TestCase`` data setup"
msgstr ""

# 7b252b7b58ca442b80fe4fa4ea4cdb87
#: ../../../../1.9/docs/releases/1.8.txt:125
msgid ""
":class:`~django.test.TestCase` has been refactored to allow for data "
"initialization at the class level using transactions and savepoints. "
"Database backends which do not support transactions, like MySQL with the "
"MyISAM storage engine, will still be able to run these tests but won't "
"benefit from the improvements. Tests are now run within two nested "
":func:`~django.db.transaction.atomic()` blocks: one for the whole class and "
"one for each test."
msgstr ""

# cd33a8717fc440f2a71a72bc44db96aa
#: ../../../../1.9/docs/releases/1.8.txt:133
msgid ""
"The class method :meth:`TestCase.setUpTestData() "
"<django.test.TestCase.setUpTestData>` adds the ability to setup test data at"
" the class level. Using this technique can speed up the tests as compared to"
" using ``setUp()``."
msgstr ""

# 9ec3752537c54008823ed3615856d307
#: ../../../../1.9/docs/releases/1.8.txt:138
msgid ""
"Fixture loading within ``TestCase`` is now performed once for the whole "
"``TestCase``."
msgstr ""

# 158ad2e2aa2b4b1498c6c14753d517f7
#: ../../../../1.9/docs/releases/1.8.txt:147
msgid ""
":class:`~django.contrib.admin.ModelAdmin` now has a "
":meth:`~django.contrib.admin.ModelAdmin.has_module_permission` method to "
"allow limiting access to the module on the admin index page."
msgstr ""

# 1f8fe7648a344ba1bde783bdb2dbad1c
#: ../../../../1.9/docs/releases/1.8.txt:151
msgid ""
":class:`~django.contrib.admin.InlineModelAdmin` now has an attribute "
":attr:`~django.contrib.admin.InlineModelAdmin.show_change_link` that "
"supports showing a link to an inline object's change form."
msgstr ""

# 895ddd08c65341709dc1dcc18ba13ae7
#: ../../../../1.9/docs/releases/1.8.txt:155
msgid ""
"Use the new ``django.contrib.admin.RelatedOnlyFieldListFilter`` in "
":attr:`ModelAdmin.list_filter <django.contrib.admin.ModelAdmin.list_filter>`"
" to limit the ``list_filter`` choices to foreign objects which are attached "
"to those from the ``ModelAdmin``."
msgstr ""

# 266d67421e6a43d195122f2975253f38
#: ../../../../1.9/docs/releases/1.8.txt:160
msgid ""
"The :meth:`ModelAdmin.delete_view() "
"<django.contrib.admin.ModelAdmin.delete_view>` displays a summary of objects"
" to be deleted on the deletion confirmation page."
msgstr ""

# 325b11fbcde6465f9f8ee1025f8625ce
#: ../../../../1.9/docs/releases/1.8.txt:164
msgid ""
"The jQuery library embedded in the admin has been upgraded to version "
"1.11.2."
msgstr ""

# 2f1fc6d9493a4d8b861702326c3a1a1d
#: ../../../../1.9/docs/releases/1.8.txt:166
msgid ""
"You can now specify :attr:`AdminSite.site_url "
"<django.contrib.admin.AdminSite.site_url>` in order to display a link to the"
" front-end site."
msgstr ""

# c4d5df8adbf44e8a8a833b65450d8a03
#: ../../../../1.9/docs/releases/1.8.txt:170
msgid ""
"You can now specify :attr:`ModelAdmin.show_full_result_count "
"<django.contrib.admin.ModelAdmin.show_full_result_count>` to control whether"
" or not the full count of objects should be displayed on a filtered admin "
"page."
msgstr ""

# bd9c30ab7061446cb862efa4a3569628
#: ../../../../1.9/docs/releases/1.8.txt:174
msgid ""
"The ``AdminSite.password_change()`` method now has an ``extra_context`` "
"parameter."
msgstr ""

# 7dc858434f1a4a87ae28b725782962fc
#: ../../../../1.9/docs/releases/1.8.txt:177
msgid ""
"You can now control who may login to the admin site by overriding only "
":meth:`AdminSite.has_permission() "
"<django.contrib.admin.AdminSite.has_permission>` and "
":attr:`AdminSite.login_form <django.contrib.admin.AdminSite.login_form>`. "
"The ``base.html`` template has a new block ``usertools`` which contains the "
"user-specific header. A new context variable ``has_permission``, which gets "
"its value from :meth:`~django.contrib.admin.AdminSite.has_permission`, "
"indicates whether the user may access the site."
msgstr ""

# d6bc7c68743b4fd5906783809d1f5e5e
#: ../../../../1.9/docs/releases/1.8.txt:186
msgid ""
"Foreign key dropdowns now have buttons for changing or deleting related "
"objects using a popup."
msgstr ""

# 062d01226f4e4598ac5cf35e9d542fd7
# fc4c16aca5f04505bf5cd9a1eeb15b70
#: ../../../../1.9/docs/releases/1.8.txt:190
#: ../../../../1.9/docs/releases/1.9.txt:188
msgid ":mod:`django.contrib.admindocs`"
msgstr ":mod:`django.contrib.admindocs`"

# c1104d06bb764c7e991a8f363b191e56
#: ../../../../1.9/docs/releases/1.8.txt:192
msgid "reStructuredText is now parsed in model docstrings."
msgstr ""

# 6d565703df5f4c82ab3ed208efe7fe22
#: ../../../../1.9/docs/releases/1.8.txt:197
msgid ""
"Authorization backends can now raise "
":class:`~django.core.exceptions.PermissionDenied` in "
":meth:`~django.contrib.auth.models.User.has_perm` and "
":meth:`~django.contrib.auth.models.User.has_module_perms` to short-circuit "
"permission checking."
msgstr ""

# ab92aeadc3ca41c08d5444c48bbeb2b2
#: ../../../../1.9/docs/releases/1.8.txt:202
msgid ""
":class:`~django.contrib.auth.forms.PasswordResetForm` now has a method "
":meth:`~django.contrib.auth.forms.PasswordResetForm.send_email` that can be "
"overridden to customize the mail to be sent."
msgstr ""

# 2dc2aedf203f42099a6c690ce74e1706
#: ../../../../1.9/docs/releases/1.8.txt:206
msgid ""
"The ``max_length`` of :attr:`Permission.name "
"<django.contrib.auth.models.Permission.name>` has been increased from 50 to "
"255 characters. Please run the database migration."
msgstr ""

# da820456cec74b2f9c234079f95a3288
#: ../../../../1.9/docs/releases/1.8.txt:210
msgid ""
":attr:`~django.contrib.auth.models.CustomUser.USERNAME_FIELD` and "
":attr:`~django.contrib.auth.models.CustomUser.REQUIRED_FIELDS` now supports "
":class:`~django.db.models.ForeignKey`\\s."
msgstr ""

# 033f95a2f4fb43e484ca2d8e307177a0
#: ../../../../1.9/docs/releases/1.8.txt:214
msgid ""
"The default iteration count for the PBKDF2 password hasher has been "
"increased by 33%. This backwards compatible change will not affect users who"
" have subclassed ``django.contrib.auth.hashers.PBKDF2PasswordHasher`` to "
"change the default value."
msgstr ""

# 1b006da9a6594830b3b7de07926abd91
#: ../../../../1.9/docs/releases/1.8.txt:222
msgid ""
"A new :doc:`GeoJSON serializer </ref/contrib/gis/serializers>` is now "
"available."
msgstr ""

# b1989c110b244cab8aab1b9a31d9732b
#: ../../../../1.9/docs/releases/1.8.txt:225
msgid ""
"It is now allowed to include a subquery as a geographic lookup argument, for"
" example "
"``City.objects.filter(point__within=Country.objects.filter(continent='Africa').values('mpoly'))``."
msgstr ""

# 53b569b1f6904e8d999f74735c24d907
#: ../../../../1.9/docs/releases/1.8.txt:228
msgid ""
"The Spatialite backend now supports ``Collect`` and ``Extent`` aggregates "
"when the database version is 3.0 or later."
msgstr ""

# 6c95fc803c6e459b9c7ab3f2a86796b5
#: ../../../../1.9/docs/releases/1.8.txt:231
msgid ""
"The PostGIS 2 ``CREATE EXTENSION postgis`` and the Spatialite ``SELECT "
"InitSpatialMetaData`` initialization commands are now automatically run by "
":djadmin:`migrate`."
msgstr ""

# 2dafd87e0d3d4a54a3c3e7dcfee7045f
#: ../../../../1.9/docs/releases/1.8.txt:235
msgid ""
"The GDAL interface now supports retrieving properties of :ref:`raster "
"(image) data file <raster-data-source-objects>`."
msgstr ""

# 93c8bd72b9d4422e8dc50e91be7d294c
#: ../../../../1.9/docs/releases/1.8.txt:238
msgid ""
"Compatibility shims for ``SpatialRefSys`` and ``GeometryColumns`` changed in"
" Django 1.2 have been removed."
msgstr ""

# 7962f656a12b4758845e2c068c6bc403
#: ../../../../1.9/docs/releases/1.8.txt:241
msgid ""
"All GDAL-related exceptions are now raised with ``GDALException``. The "
"former ``OGRException`` has been kept for backwards compatibility but should"
" not be used any longer."
msgstr ""

# 288731737a104faea630dda4d53daa93
#: ../../../../1.9/docs/releases/1.8.txt:248
msgid ""
"Session cookie is now deleted after "
":meth:`~django.contrib.sessions.backends.base.SessionBase.flush()` is "
"called."
msgstr ""

# 9ed5252def364329b49995e26450aaac
#: ../../../../1.9/docs/releases/1.8.txt:254
msgid ""
"The new :attr:`Sitemap.i18n <django.contrib.sitemaps.Sitemap.i18n>` "
"attribute allows you to generate a sitemap based on the :setting:`LANGUAGES`"
" setting."
msgstr ""

# 1ce201df84024e35a6866a4dd12f85e0
#: ../../../../1.9/docs/releases/1.8.txt:260
msgid ""
":func:`~django.contrib.sites.shortcuts.get_current_site` will now lookup the"
" current site based on :meth:`request.get_host() "
"<django.http.HttpRequest.get_host>` if the :setting:`SITE_ID` setting is not"
" defined."
msgstr ""

# 11b1a99ce1a040bc9715fc64833ce3b2
#: ../../../../1.9/docs/releases/1.8.txt:265
msgid ""
"The default :class:`~django.contrib.sites.models.Site` created when running "
"``migrate`` now respects the :setting:`SITE_ID` setting (instead of always "
"using ``pk=1``)."
msgstr ""

# 53636124e90c417d9161347ce8a6fc33
#: ../../../../1.9/docs/releases/1.8.txt:272
msgid ""
"The ``incr()`` method of the "
"``django.core.cache.backends.locmem.LocMemCache`` backend is now thread-"
"safe."
msgstr ""

# aa7b0b74be7e4dd8ab23513ac0b401a5
#: ../../../../1.9/docs/releases/1.8.txt:276
msgid "Cryptography"
msgstr "Cryptographie"

# 69e8cf70fa0e417fa51e8fae086f25a1
#: ../../../../1.9/docs/releases/1.8.txt:278
msgid ""
"The ``max_age`` parameter of the "
":meth:`django.core.signing.TimestampSigner.unsign` method now also accepts a"
" :py:class:`datetime.timedelta` object."
msgstr "Le paramètre ``max_age`` de la méthode :meth:`django.core.signing.TimestampSigner.unsign` accepte maintenant aussi un objet :py:class:`datetime.timedelta`."

# d0ecc477f1b84bbfb4ea6902bcbba4fb
# 1c1385e3cf4c463392a30ce2a293de70
#: ../../../../1.9/docs/releases/1.8.txt:283
#: ../../../../1.9/docs/releases/1.9.txt:319
msgid "Database backends"
msgstr "Moteurs de base de données"

# 8e3129cee9954893bbe42bd83ee221fb
#: ../../../../1.9/docs/releases/1.8.txt:285
msgid ""
"The MySQL backend no longer strips microseconds from ``datetime`` values as "
"MySQL 5.6.4 and up supports fractional seconds depending on the declaration "
"of the datetime field (when ``DATETIME`` includes fractional precision "
"greater than 0). New datetime database columns created with Django 1.8 and "
"MySQL 5.6.4 and up will support microseconds. See the :ref:`MySQL database "
"notes <mysql-fractional-seconds>` for more details."
msgstr ""

# 03bcf01a01df4fbc8564837fd171d41f
#: ../../../../1.9/docs/releases/1.8.txt:292
msgid ""
"The MySQL backend no longer creates explicit indexes for foreign keys when "
"using the InnoDB storage engine, as MySQL already creates them "
"automatically."
msgstr ""

# c3086312bd414b9686e068e9a8139563
#: ../../../../1.9/docs/releases/1.8.txt:295
msgid ""
"The Oracle backend no longer defines the ``connection_persists_old_columns``"
" feature as ``True``. Instead, Oracle will now include a cache busting "
"clause when getting the description of a table."
msgstr ""

# 6206d96a77f7412dab4ca9b29730899c
#: ../../../../1.9/docs/releases/1.8.txt:302
msgid ""
":ref:`Email backends <topic-email-backends>` now support the context manager"
" protocol for opening and closing connections."
msgstr ""

# 3b1cc4f88eac4c46830f69e3c995bbde
#: ../../../../1.9/docs/releases/1.8.txt:305
msgid ""
"The SMTP email backend now supports ``keyfile`` and ``certfile`` "
"authentication with the :setting:`EMAIL_SSL_CERTFILE` and "
":setting:`EMAIL_SSL_KEYFILE` settings."
msgstr ""

# 59db42084fa747c1b16d7be4246464f6
#: ../../../../1.9/docs/releases/1.8.txt:309
msgid ""
"The SMTP :class:`~django.core.mail.backends.smtp.EmailBackend` now supports "
"setting the ``timeout`` parameter with the :setting:`EMAIL_TIMEOUT` setting."
msgstr ""

# d59205130d18436ca01e166928e0c401
#: ../../../../1.9/docs/releases/1.8.txt:312
msgid ""
":class:`~django.core.mail.EmailMessage` and ``EmailMultiAlternatives`` now "
"support the ``reply_to`` parameter."
msgstr ""

# eeb82426e8b6414085a71d2962e6ae1c
#: ../../../../1.9/docs/releases/1.8.txt:318
msgid ""
":meth:`Storage.get_available_name() "
"<django.core.files.storage.Storage.get_available_name>` and "
":meth:`Storage.save() <django.core.files.storage.Storage.save>` now take a "
"``max_length`` argument to implement storage-level maximum filename length "
"constraints. Filenames exceeding this argument will get truncated. This "
"prevents a database error when appending a unique suffix to a long filename "
"that already exists on the storage. See the :ref:`deprecation note <storage-"
"max-length-update>` about adding this argument to your custom storage "
"classes."
msgstr ""

# 60aca31ebdf749f196706265089770a1
#: ../../../../1.9/docs/releases/1.8.txt:331
msgid ""
"Form widgets now render attributes with a value of ``True`` or ``False`` as "
"HTML5 boolean attributes."
msgstr ""

# d7245d175538405d9c57a4e8462f5d97
#: ../../../../1.9/docs/releases/1.8.txt:334
msgid ""
"The new :meth:`~django.forms.Form.has_error()` method allows checking if a "
"specific error has happened."
msgstr ""

# 1890e55c8e6d452ab243591aab6a172d
#: ../../../../1.9/docs/releases/1.8.txt:337
msgid ""
"If :attr:`~django.forms.Form.required_css_class` is defined on a form, then "
"the ``<label>`` tags for required fields will have this class present in its"
" attributes."
msgstr ""

# b0d4c56d1ccf44d58994bf1cb4c30ef4
#: ../../../../1.9/docs/releases/1.8.txt:341
msgid ""
"The rendering of non-field errors in unordered lists (``<ul>``) now includes"
" ``nonfield`` in its list of classes to distinguish them from field-specific"
" errors."
msgstr ""

# c02e3787c86b4524bc13dc9c86fcc7aa
#: ../../../../1.9/docs/releases/1.8.txt:345
msgid ""
":class:`~django.forms.Field` now accepts a "
":attr:`~django.forms.Field.label_suffix` argument, which will override the "
"form's :attr:`~django.forms.Form.label_suffix`. This enables customizing the"
" suffix on a per-field basis — previously it wasn't possible to override a "
"form's :attr:`~django.forms.Form.label_suffix` while using  shortcuts such "
"as ``{{ form.as_p }}`` in templates."
msgstr ""

# c682c4f1a85c4e09af256415479dd05d
#: ../../../../1.9/docs/releases/1.8.txt:352
msgid ""
":class:`~django.forms.SelectDateWidget` now accepts an "
":attr:`~django.forms.SelectDateWidget.empty_label` argument, which will "
"override the top list choice label when :class:`~django.forms.DateField` is "
"not required."
msgstr ""

# 200c8bf24ac74c0cb75c8931e7e62a25
#: ../../../../1.9/docs/releases/1.8.txt:357
msgid ""
"After an :class:`~django.forms.ImageField` has been cleaned and validated, "
"the ``UploadedFile`` object will have an additional ``image`` attribute "
"containing the Pillow ``Image`` instance used to check if the file was a "
"valid image. It will also update ``UploadedFile.content_type`` with the "
"image's content type as determined by Pillow."
msgstr ""

# d60b8d4e785544c59c106a9e8dc63231
#: ../../../../1.9/docs/releases/1.8.txt:363
msgid ""
"You can now pass a callable that returns an iterable of choices when "
"instantiating a :class:`~django.forms.ChoiceField`."
msgstr ""

# bba31a180c6f40d2b34289f87e4c008f
# 025fb05d24b2450b91836f30b6a69323
#: ../../../../1.9/docs/releases/1.8.txt:367
#: ../../../../1.9/docs/releases/1.9.txt:368
msgid "Generic Views"
msgstr "Vues génériques"

# 1583a1760aed46408dc5c2d2b5a48a5e
#: ../../../../1.9/docs/releases/1.8.txt:369
msgid ""
"Generic views that use "
":class:`~django.views.generic.list.MultipleObjectMixin` may now specify the "
"ordering applied to the "
":attr:`~django.views.generic.list.MultipleObjectMixin.queryset` by setting "
":attr:`~django.views.generic.list.MultipleObjectMixin.ordering` or "
"overriding "
":meth:`~django.views.generic.list.MultipleObjectMixin.get_ordering()`."
msgstr ""

# ab139264274b49ac83f7d742be732e51
#: ../../../../1.9/docs/releases/1.8.txt:375
msgid ""
"The new :attr:`SingleObjectMixin.query_pk_and_slug "
"<django.views.generic.detail.SingleObjectMixin.query_pk_and_slug>` attribute"
" allows changing the behavior of "
":meth:`~django.views.generic.detail.SingleObjectMixin.get_object()` so that "
"it'll perform its lookup using both the primary key and the slug."
msgstr ""

# 11480a04121c41eca9798e7ad0bc272e
#: ../../../../1.9/docs/releases/1.8.txt:381
msgid ""
"The :meth:`~django.views.generic.edit.FormMixin.get_form()` method doesn't "
"require a ``form_class`` to be provided anymore. If not provided "
"``form_class`` defaults to "
":meth:`~django.views.generic.edit.FormMixin.get_form_class()`."
msgstr ""

# df236461be3840b38a06251c30d328ee
#: ../../../../1.9/docs/releases/1.8.txt:385
msgid ""
"Placeholders in :attr:`ModelFormMixin.success_url "
"<django.views.generic.edit.ModelFormMixin.success_url>` now support the "
"Python :py:meth:`str.format()` syntax. The legacy ``%(<foo>)s`` syntax is "
"still supported but will be removed in Django 1.10."
msgstr ""

# d2ba9883f39b418e96cd1bb0e1c03f9a
#: ../../../../1.9/docs/releases/1.8.txt:393
msgid ""
":setting:`FORMAT_MODULE_PATH` can now be a list of strings representing "
"module paths. This allows importing several format modules from different "
"reusable apps. It also allows overriding those custom formats in your main "
"Django project."
msgstr ""

# 621faab7590440168d7625572262278e
#: ../../../../1.9/docs/releases/1.8.txt:401
msgid ""
"The :class:`django.utils.log.AdminEmailHandler` class now has a "
":meth:`~django.utils.log.AdminEmailHandler.send_mail` method to make it more"
" subclass friendly."
msgstr ""

# 7c5a318360044357894c0f4dbd2940d2
#: ../../../../1.9/docs/releases/1.8.txt:408
msgid ""
"Database connections are now always closed after a management command called"
" from the command line has finished doing its job."
msgstr ""

# a6d8032c035d4bd69d50ba913266a702
#: ../../../../1.9/docs/releases/1.8.txt:411
msgid ""
"Commands from alternate package formats like eggs are now also discovered."
msgstr ""

# d17c40a0a99b4aab93f43e095665b622
#: ../../../../1.9/docs/releases/1.8.txt:413
msgid ""
":djadmin:`dumpdata` now has the option :djadminopt:`--output` which allows "
"specifying the file to which the serialized data is written."
msgstr ""

# ef02c868abbc4ab7a4a110e7bd4e4e75
#: ../../../../1.9/docs/releases/1.8.txt:416
msgid ""
":djadmin:`makemessages` and :djadmin:`compilemessages` now have the option "
":djadminopt:`--exclude` which allows exclusion of specific locales from "
"processing."
msgstr ""

# a656c6ce8ccc4898a857cae940b5fc3f
#: ../../../../1.9/docs/releases/1.8.txt:420
msgid ""
":djadmin:`compilemessages` now has a ``--use-fuzzy`` or ``-f`` option which "
"includes fuzzy translations into compiled files."
msgstr ""

# dc4cd327edd149878e75efa2b57032de
#: ../../../../1.9/docs/releases/1.8.txt:423
msgid ""
"The :djadminopt:`--ignorenonexistent` option of the :djadmin:`loaddata` "
"management command now ignores data for models that no longer exist."
msgstr ""

# 7f741cfe620a4a95b22c5739a5867695
#: ../../../../1.9/docs/releases/1.8.txt:426
msgid ":djadmin:`runserver` now uses daemon threads for faster reloading."
msgstr ""

# 787d8bdabd2b4bf9ade4de6abbfdc777
#: ../../../../1.9/docs/releases/1.8.txt:428
msgid ""
":djadmin:`inspectdb` now outputs ``Meta.unique_together``. It is also able "
"to introspect :class:`~django.db.models.AutoField` for MySQL and PostgreSQL "
"databases."
msgstr ""

# 6480ed269d3c42a69847b18ae02a2f13
#: ../../../../1.9/docs/releases/1.8.txt:432
msgid ""
"When calling management commands from code through :ref:`call_command <call-"
"command>` and passing options, the option name can match the command line "
"option name (without the initial dashes) or the final option destination "
"variable name, but in either case, the resulting option received by the "
"command is now always the ``dest`` name specified in the command option "
"definition (as long as the command uses the new :py:mod:`argparse` module)."
msgstr ""

# 676bda65b3a74d639de79914d6d3f772
#: ../../../../1.9/docs/releases/1.8.txt:439
msgid ""
"The :djadmin:`dbshell` command now supports MySQL's optional SSL certificate"
" authority setting (``--ssl-ca``)."
msgstr ""

# 361befd1e8ce45b89ad7e042caa55cfe
#: ../../../../1.9/docs/releases/1.8.txt:442
msgid ""
"The :djadminopt:`--name` option for :djadmin:`makemigrations` allows you to "
"to give the migration(s) a custom name instead of a generated one."
msgstr ""

# 6e24450eb66e4254bf2b59642f116182
#: ../../../../1.9/docs/releases/1.8.txt:445
msgid ""
"The :djadmin:`loaddata` command now prevents repeated fixture loading. If "
":setting:`FIXTURE_DIRS` contains duplicates or a default fixture directory "
"path (``app_name/fixtures``), an exception is raised."
msgstr ""

# 6d3166eb07fe42e191064b6e51fad250
#: ../../../../1.9/docs/releases/1.8.txt:449
msgid ""
":djadmin:`makemigrations` now supports an :djadminopt:`--exit` option to "
"exit with an error code if no migrations are created."
msgstr ""

# 975a63372ef64cb08b52b3cc02a3f912
#: ../../../../1.9/docs/releases/1.8.txt:452
msgid ""
"The new :djadmin:`showmigrations` command allows listing all migrations and "
"their dependencies in a project."
msgstr ""

# 64deaf3362eb44a9952a990054122563
#: ../../../../1.9/docs/releases/1.8.txt:456
msgid "Middleware"
msgstr "Intergiciels (« middleware »)"

# 66a03f870d41448b98ca7daff4c2e42b
#: ../../../../1.9/docs/releases/1.8.txt:458
msgid ""
"The :attr:`CommonMiddleware.response_redirect_class "
"<django.middleware.common.CommonMiddleware.response_redirect_class>` "
"attribute allows you to customize the redirects issued by the middleware."
msgstr ""

# 0d1383e3523d490183075f46731869c5
#: ../../../../1.9/docs/releases/1.8.txt:462
msgid ""
"A debug message will be logged to the ``django.request`` logger when a "
"middleware raises a :exc:`~django.core.exceptions.MiddlewareNotUsed` "
"exception in :setting:`DEBUG` mode."
msgstr ""

# 1fc7ca4ed8ef4abe8ea0abd881fa5b90
# b26013bf1a9b45858458a43f4a946714
#: ../../../../1.9/docs/releases/1.8.txt:467
#: ../../../../1.9/docs/releases/1.9.txt:447
msgid "Migrations"
msgstr "Migrations"

# b4d1d6711dce4770a7dd2a47688dc219
#: ../../../../1.9/docs/releases/1.8.txt:469
msgid ""
"The :class:`~django.db.migrations.operations.RunSQL` operation can now "
"handle parameters passed to the SQL statements."
msgstr ""

# baca54ef7eab4de783c3eb729839bde7
#: ../../../../1.9/docs/releases/1.8.txt:472
msgid ""
"It is now possible to have migrations (most probably :ref:`data migrations "
"<data-migrations>`) for applications without models."
msgstr ""

# 90fed35db9874dc5964d62b027bb6271
#: ../../../../1.9/docs/releases/1.8.txt:475
msgid ""
"Migrations can now :ref:`serialize model managers <using-managers-in-"
"migrations>` as part of the model state."
msgstr ""

# 7cb7ddd04e0f43dba9a6f94abbaadd77
#: ../../../../1.9/docs/releases/1.8.txt:478
msgid ""
"A :ref:`generic mechanism to handle the deprecation of model fields "
"<migrations-removing-model-fields>` was added."
msgstr ""

# cdab1532cdbc4d418aa661c5ea115a96
#: ../../../../1.9/docs/releases/1.8.txt:481
msgid ""
"The :meth:`RunPython.noop() "
"<django.db.migrations.operations.RunPython.noop>` and :attr:`RunSQL.noop "
"<django.db.migrations.operations.RunSQL.noop>` class method/attribute were "
"added to ease in making ``RunPython`` and ``RunSQL`` operations reversible."
msgstr ""

# 722cef5be40549d6a2320d528ac319c1
#: ../../../../1.9/docs/releases/1.8.txt:486
msgid ""
"The migration operations :class:`~django.db.migrations.operations.RunPython`"
" and :class:`~django.db.migrations.operations.RunSQL` now call the "
":meth:`allow_migrate` method of database routers. The router can use the "
"newly introduced ``app_label`` and ``hints`` arguments to make a routing "
"decision. To take advantage of this feature you need to update the router to"
" the new ``allow_migrate`` signature, see the :ref:`deprecation section "
"<deprecated-signature-of-allow-migrate>` for more details."
msgstr ""

# 15c5f3c538a74afcad3d5720b238fbcf
#: ../../../../1.9/docs/releases/1.8.txt:497
msgid ""
"Django now logs at most 9000 queries in ``connections.queries``, in order to"
" prevent excessive memory usage in long-running processes in debug mode."
msgstr ""

# 5feea1cdc8124a1fa5bd65d9c769d32d
#: ../../../../1.9/docs/releases/1.8.txt:500
msgid ""
"There is now a model ``Meta`` option to define a :attr:`default related name"
" <django.db.models.Options.default_related_name>` for all relational fields "
"of a model."
msgstr ""

# 02a37a01bb9b40cfb876099c6af6ee27
#: ../../../../1.9/docs/releases/1.8.txt:504
msgid ""
"Pickling models and querysets across different versions of Django isn't "
"officially supported (it may work, but there's no guarantee). An extra "
"variable that specifies the current Django version is now added to the "
"pickled state of models and querysets, and Django raises a "
"``RuntimeWarning`` when these objects are unpickled in a different version "
"than the one in which they were pickled."
msgstr ""

# afd141291ca74b898de4b72579234070
#: ../../../../1.9/docs/releases/1.8.txt:511
msgid ""
"Added :meth:`Model.from_db() <django.db.models.Model.from_db()>` which "
"Django uses whenever objects are loaded using the ORM. The method allows "
"customizing model loading behavior."
msgstr ""

# 1dce37ad457744cc9752f9acd4afce67
#: ../../../../1.9/docs/releases/1.8.txt:515
msgid ""
"``extra(select={...})`` now allows you to escape a literal ``%s`` sequence "
"using ``%%s``."
msgstr ""

# cf80912e46b54c5398f1c95927fa18a2
#: ../../../../1.9/docs/releases/1.8.txt:518
msgid ""
":doc:`Custom Lookups</howto/custom-lookups>` can now be registered using a "
"decorator pattern."
msgstr ""

# 16f5a360c3b5427d8a91a9e100f89cb2
#: ../../../../1.9/docs/releases/1.8.txt:521
msgid ""
"The new :attr:`Transform.bilateral <django.db.models.Transform.bilateral>` "
"attribute allows creating bilateral transformations. These transformations "
"are applied to both ``lhs`` and ``rhs`` when used in a lookup expression, "
"providing opportunities for more sophisticated lookups."
msgstr ""

# a5a766fcc561492d94ce6b8084ab6185
#: ../../../../1.9/docs/releases/1.8.txt:526
msgid ""
"SQL special characters (\\, %, _) are now escaped properly when a pattern "
"lookup (e.g. ``contains``, ``startswith``, etc.) is used with an ``F()`` "
"expression as the right-hand side. In those cases, the escaping is performed"
" by the database, which can lead to somewhat complex queries involving "
"nested ``REPLACE`` function calls."
msgstr ""

# 02d1249ec2e34f4ba6ee755cfcbc0ea8
#: ../../../../1.9/docs/releases/1.8.txt:532
msgid ""
"You can now refresh model instances by using :meth:`Model.refresh_from_db() "
"<django.db.models.Model.refresh_from_db>`."
msgstr ""

# 5f474b4e79694ea6bcd60c8fb3c29020
#: ../../../../1.9/docs/releases/1.8.txt:535
msgid ""
"You can now get the set of deferred fields for a model using "
":meth:`Model.get_deferred_fields() "
"<django.db.models.Model.get_deferred_fields>`."
msgstr ""

# c05a14cd2592487eb3b341693b37d0cb
#: ../../../../1.9/docs/releases/1.8.txt:538
msgid ""
"Model field ``default``’s are now used when primary key field's are set to "
"``None``."
msgstr ""

# 27a40fb213274350958fb232557b9963
#: ../../../../1.9/docs/releases/1.8.txt:544
msgid ""
"Exceptions from the ``(receiver, exception)`` tuples returned by "
":meth:`Signal.send_robust() <django.dispatch.Signal.send_robust>` now have "
"their traceback attached as a ``__traceback__`` attribute."
msgstr ""

# 9199599157bf4b0e9b67d927d10597a5
#: ../../../../1.9/docs/releases/1.8.txt:548
msgid ""
"The ``environ`` argument, which contains the WSGI environment structure from"
" the request, was added to the :data:`~django.core.signals.request_started` "
"signal."
msgstr ""

# 764ba81d521543e08f7394bee0cac485
#: ../../../../1.9/docs/releases/1.8.txt:552
msgid ""
"You can now import the :func:`~django.test.signals.setting_changed` signal "
"from ``django.core.signals`` to avoid loading ``django.test`` in non-test "
"situations. Django no longer does so itself."
msgstr ""

# 0f8c5522783e477fa9bc98f7114b9812
#: ../../../../1.9/docs/releases/1.8.txt:557
msgid "System Check Framework"
msgstr ""

# b7368176cb7b47df99ead70100c88eaf
#: ../../../../1.9/docs/releases/1.8.txt:559
msgid ":attr:`~django.core.checks.register` can now be used as a function."
msgstr ""

# 5da5218b64074bd3aa7e6dd34c28d97b
#: ../../../../1.9/docs/releases/1.8.txt:564
msgid ""
":tfilter:`urlize` now supports domain-only links that include characters "
"after the top-level domain (e.g. ``djangoproject.com/`` and "
"``djangoproject.com/download/``)."
msgstr ""

# 0987346fe9d142bfb60d1e11ce43763e
#: ../../../../1.9/docs/releases/1.8.txt:568
msgid ""
":tfilter:`urlize` doesn't treat exclamation marks at the end of a domain or "
"its query string as part of the URL (the URL in e.g. ``'djangoproject.com!``"
" is ``djangoproject.com``)"
msgstr ""

# 82d2faa0d4b54ccf8ffa5932c4a3151e
#: ../../../../1.9/docs/releases/1.8.txt:572
msgid ""
"Added a :class:`locmem.Loader <django.template.loaders.locmem.Loader>` class"
" that loads Django templates from a Python dictionary."
msgstr ""

# 99f6c932daa045ef90cb568687cfdfa3
#: ../../../../1.9/docs/releases/1.8.txt:575
msgid ""
"The :ttag:`now` tag can now store its output in a context variable with the "
"usual syntax: ``{% now 'j n Y' as varname %}``."
msgstr ""

# fd887d59098c4eb887af1d55d0991c80
#: ../../../../1.9/docs/releases/1.8.txt:581
msgid "``WSGIRequest`` now respects paths starting with ``//``."
msgstr ""

# d5cc21b7a947433592438494f1e4cd1e
#: ../../../../1.9/docs/releases/1.8.txt:583
msgid ""
"The :meth:`HttpRequest.build_absolute_uri() "
"<django.http.HttpRequest.build_absolute_uri>` method now handles paths "
"starting with ``//`` correctly."
msgstr ""

# 0c73bd2757c245998184325141e02780
#: ../../../../1.9/docs/releases/1.8.txt:587
msgid ""
"If :setting:`DEBUG` is ``True`` and a request raises a "
":exc:`~django.core.exceptions.SuspiciousOperation`, the response will be "
"rendered with a detailed error page."
msgstr ""

# cafd7175250b441a95265d94c943f66c
#: ../../../../1.9/docs/releases/1.8.txt:591
msgid ""
"The ``query_string`` argument of :class:`~django.http.QueryDict` is now "
"optional, defaulting to ``None``, so a blank ``QueryDict`` can now be "
"instantiated with ``QueryDict()`` instead of ``QueryDict(None)`` or "
"``QueryDict('')``."
msgstr ""

# 64415d7dadd04b90b27cb6876e6ae46e
#: ../../../../1.9/docs/releases/1.8.txt:596
msgid ""
"The ``GET`` and ``POST`` attributes of an :class:`~django.http.HttpRequest` "
"object are now :class:`~django.http.QueryDict`\\s rather than dictionaries, "
"and the ``FILES`` attribute is now a ``MultiValueDict``. This brings this "
"class into line with the documentation and with ``WSGIRequest``."
msgstr ""

# 255da81be26e4e0892074416cbfb36eb
#: ../../../../1.9/docs/releases/1.8.txt:602
msgid ""
"The :attr:`HttpResponse.charset <django.http.HttpResponse.charset>` "
"attribute was added."
msgstr ""

# 2ae87f53e8044fdd92d5f6eaba0cec7d
#: ../../../../1.9/docs/releases/1.8.txt:605
msgid ""
"``WSGIRequestHandler`` now follows RFC in converting URI to IRI, using "
"``uri_to_iri()``."
msgstr ""

# ca6add64129b470c86f02f2eb2c70355
#: ../../../../1.9/docs/releases/1.8.txt:608
msgid ""
"The :meth:`HttpRequest.get_full_path() "
"<django.http.HttpRequest.get_full_path>` method now escapes unsafe "
"characters from the path portion of a Uniform Resource Identifier (URI) "
"properly."
msgstr ""

# eb2dd4fedf364e269400b523231d70a6
#: ../../../../1.9/docs/releases/1.8.txt:612
msgid ""
":class:`~django.http.HttpResponse` now implements a few additional methods "
"like :meth:`~django.http.HttpResponse.getvalue` so that instances can be "
"used as stream objects."
msgstr ""

# df30e130b5844c658f671c4c9b048441
#: ../../../../1.9/docs/releases/1.8.txt:616
msgid ""
"The new :meth:`HttpResponse.setdefault() "
"<django.http.HttpResponse.setdefault>` method allows setting a header unless"
" it has already been set."
msgstr ""

# 248b224204054e6c9c77cb1e22f8e9e5
#: ../../../../1.9/docs/releases/1.8.txt:620
msgid ""
"You can use the new :class:`~django.http.FileResponse` to stream files."
msgstr ""

# c0032f2fb59e48ceb0f49ce498680199
#: ../../../../1.9/docs/releases/1.8.txt:622
msgid ""
"The :func:`~django.views.decorators.http.condition` decorator for "
"conditional view processing now supports the ``If-unmodified-since`` header."
msgstr ""

# 540e1cf098c641d3a2818befb3526498
#: ../../../../1.9/docs/releases/1.8.txt:628
msgid ""
"The :class:`RequestFactory.trace() <django.test.RequestFactory>` and "
":class:`Client.trace() <django.test.Client.trace>` methods were implemented,"
" allowing you to create ``TRACE`` requests in your tests."
msgstr ""

# f5f6e106175249b198662252e4903ed3
#: ../../../../1.9/docs/releases/1.8.txt:632
msgid ""
"The ``count`` argument was added to "
":meth:`~django.test.SimpleTestCase.assertTemplateUsed`. This allows you to "
"assert that a template was rendered a specific number of times."
msgstr ""

# 1c57fa54eaec45bb9587b87660c3f6e5
#: ../../../../1.9/docs/releases/1.8.txt:636
msgid ""
"The new :meth:`~django.test.SimpleTestCase.assertJSONNotEqual` assertion "
"allows you to test that two JSON fragments are not equal."
msgstr ""

# 4c71f2b6e950402b8fb921417114072e
#: ../../../../1.9/docs/releases/1.8.txt:639
msgid ""
"Added options to the :djadmin:`test` command to preserve the test database "
"(:djadminopt:`--keepdb`), to run the test cases in reverse order "
"(:djadminopt:`--reverse`), and to enable SQL logging for failing tests "
"(:djadminopt:`--debug-sql`)."
msgstr ""

# 346a953d0065433095b6c03bd4243db5
#: ../../../../1.9/docs/releases/1.8.txt:644
msgid ""
"Added the :attr:`~django.test.Response.resolver_match` attribute to test "
"client responses."
msgstr ""

# 5bf848d6cc9e413db98c26a90623ce19
#: ../../../../1.9/docs/releases/1.8.txt:647
msgid ""
"Added several settings that allow customization of test tablespace "
"parameters for Oracle: :setting:`DATAFILE`, :setting:`DATAFILE_TMP`, "
":setting:`DATAFILE_MAXSIZE` and :setting:`DATAFILE_TMP_MAXSIZE`."
msgstr ""

# 60c1893d4a774685aa6cc5341f73c6dd
#: ../../../../1.9/docs/releases/1.8.txt:651
msgid ""
"The :func:`~django.test.override_settings` decorator can now affect the "
"master router in :setting:`DATABASE_ROUTERS`."
msgstr ""

# 61c6880acaf24064a39182727622be0a
#: ../../../../1.9/docs/releases/1.8.txt:654
msgid "Added test client support for file uploads with file-like objects."
msgstr ""

# 110081583678427586997aeb451b447c
#: ../../../../1.9/docs/releases/1.8.txt:656
msgid ""
"A shared cache is now used when testing with a SQLite in-memory database "
"when using Python 3.4+ and SQLite 3.7.13+. This allows sharing the database "
"between threads."
msgstr ""

# a67bb98fbb5842fc88391ced901d0d4a
#: ../../../../1.9/docs/releases/1.8.txt:663
msgid ""
":class:`~django.core.validators.URLValidator` now supports IPv6 addresses, "
"unicode domains, and URLs containing authentication data."
msgstr ""

# 854922367d3e4b299378c121d32774bd
#: ../../../../1.9/docs/releases/1.8.txt:667
msgid "Backwards incompatible changes in 1.8"
msgstr ""

# 4b85c24868be438cacf623860a984ee5
#: ../../../../1.9/docs/releases/1.8.txt:671
msgid ""
"In addition to the changes outlined in this section, be sure to review the "
":ref:`deprecation plan <deprecation-removed-in-1.8>` for any features that "
"have been removed. If you haven't updated your code within the deprecation "
"timeline for a given feature, its removal may appear as a backwards "
"incompatible change."
msgstr ""

# d6b04704722240b3bbcebdec8c8834be
#: ../../../../1.9/docs/releases/1.8.txt:678
msgid "Related object operations are run in a transaction"
msgstr ""

# 5556f55b288b4095802cba6394c65d05
#: ../../../../1.9/docs/releases/1.8.txt:680
msgid ""
"Some operations on related objects such as "
":meth:`~django.db.models.fields.related.RelatedManager.add()` or "
":ref:`direct assignment<direct-assignment>` ran multiple data modifying "
"queries without wrapping them in transactions. To reduce the risk of data "
"corruption, all data modifying methods that affect multiple related objects "
"(i.e. ``add()``, ``remove()``, ``clear()``, and :ref:`direct assignment "
"<direct-assignment>`) now perform their data modifying queries from within a"
" transaction, provided your database supports transactions."
msgstr ""

# 0f8a5305b36e4a0493a5610a2cc3152d
#: ../../../../1.9/docs/releases/1.8.txt:689
msgid ""
"This has one backwards incompatible side effect, signal handlers triggered "
"from these methods are now executed within the method's transaction and any "
"exception in a signal handler will prevent the whole operation."
msgstr ""

# be9cf03b761d424b840f2b8fe8de1529
#: ../../../../1.9/docs/releases/1.8.txt:696
msgid "Assigning unsaved objects to relations raises an error"
msgstr ""

# b7a17b4a79d64fba9ebf1282f3425c95
#: ../../../../1.9/docs/releases/1.8.txt:700
msgid ""
"To more easily allow in-memory usage of models, this change was reverted in "
"Django 1.8.4 and replaced with a check during ``model.save()``. For "
"example::"
msgstr ""

# 299df57615b249678ff6a9eee72e44ef
#: ../../../../1.9/docs/releases/1.8.txt:710
msgid ""
"A similar check on assignment to reverse one-to-one relations was removed in"
" Django 1.8.5."
msgstr ""

# 0686bc976722465caa660c62a5fc322f
#: ../../../../1.9/docs/releases/1.8.txt:713
msgid ""
"Assigning unsaved objects to a :class:`~django.db.models.ForeignKey`, "
":class:`~django.contrib.contenttypes.fields.GenericForeignKey`, and "
":class:`~django.db.models.OneToOneField` now raises a :exc:`ValueError`."
msgstr ""

# a13bb6ac091b47c9b070019cd94fbb8f
#: ../../../../1.9/docs/releases/1.8.txt:717
msgid ""
"Previously, the assignment of an unsaved object would be silently ignored. "
"For example::"
msgstr ""

# 6f49badc64864fb5a6cfed0d9c681a16
#: ../../../../1.9/docs/releases/1.8.txt:729
msgid "Now, an error will be raised to prevent data loss::"
msgstr ""

# cf171f3cd52842ada21b46e427fcadd8
#: ../../../../1.9/docs/releases/1.8.txt:736
msgid ""
"If you require allowing the assignment of unsaved instances (the old "
"behavior) and aren't concerned about the data loss possibility (e.g. you "
"never save the objects to the database), you can disable this check by using"
" the ``ForeignKey.allow_unsaved_instance_assignment`` attribute. (This "
"attribute was removed in 1.8.4 as it's no longer relevant.)"
msgstr ""

# 913f65e4df694684909e9491794f1250
#: ../../../../1.9/docs/releases/1.8.txt:743
msgid "Management commands that only accept positional arguments"
msgstr ""

# 066e484be5b94e4fbb345e448baed674
#: ../../../../1.9/docs/releases/1.8.txt:745
msgid ""
"If you have written a custom management command that only accepts positional"
" arguments and you didn't specify the "
":attr:`~django.core.management.BaseCommand.args` command variable, you might"
" get an error like ``Error: unrecognized arguments: ...``, as variable "
"parsing is now based on :py:mod:`argparse` which doesn't implicitly accept "
"positional arguments. You can make your command backwards compatible by "
"simply setting the :attr:`~django.core.management.BaseCommand.args` class "
"variable. However, if you don't have to keep compatibility with older Django"
" versions, it's better to implement the new "
":meth:`~django.core.management.BaseCommand.add_arguments` method as "
"described in :doc:`/howto/custom-management-commands`."
msgstr ""

# 502952464b994eb88eddf7c85e9ffaf5
#: ../../../../1.9/docs/releases/1.8.txt:757
msgid "Custom test management command arguments through test runner"
msgstr ""

# b19e999874c34e879029859e39d60d9c
#: ../../../../1.9/docs/releases/1.8.txt:759
msgid ""
"The method to add custom arguments to the `test` management command through "
"the test runner has changed. Previously, you could provide an `option_list` "
"class variable on the test runner to add more arguments (à la "
":py:mod:`optparse`). Now to implement the same behavior, you have to create "
"an ``add_arguments(cls, parser)`` class method on the test runner and call "
"``parser.add_argument`` to add any custom arguments, as parser is now an "
":py:class:`argparse.ArgumentParser` instance."
msgstr ""

# 4769497217484521b54c1c4ee17fc37d
#: ../../../../1.9/docs/releases/1.8.txt:768
msgid ""
"Model check ensures auto-generated column names are within limits specified "
"by database"
msgstr ""

# 68bd627f4b724158ae0bd7ec7798e461
#: ../../../../1.9/docs/releases/1.8.txt:770
msgid ""
"A field name that's longer than the column name length supported by a "
"database can create problems. For example, with MySQL you'll get an "
"exception trying to create the column, and with PostgreSQL the column name "
"is truncated by the database (you may see a warning in the PostgreSQL logs)."
msgstr ""

# dddb3bfa3a6a41d48ebfdcce0cf3e3ca
#: ../../../../1.9/docs/releases/1.8.txt:775
msgid ""
"A model check has been introduced to better alert users to this scenario "
"before the actual creation of database tables."
msgstr ""

# 3ee391be09c749d0b75cef74556c702b
#: ../../../../1.9/docs/releases/1.8.txt:778
msgid ""
"If you have an existing model where this check seems to be a false positive,"
" for example on PostgreSQL where the name was already being truncated, "
"simply use :attr:`~django.db.models.Field.db_column` to specify the name "
"that's being used."
msgstr ""

# eda2efc873ef4a99b1cac6627c8d8ee1
#: ../../../../1.9/docs/releases/1.8.txt:783
msgid ""
"The check also applies to the columns generated in an implicit "
"``ManyToManyField.through`` model. If you run into an issue there, use "
":attr:`~django.db.models.ManyToManyField.through` to create an explicit "
"model and then specify :attr:`~django.db.models.Field.db_column` on its "
"column(s) as needed."
msgstr ""

# 7bb25a1470dc4a8e9307d8de1d854ca8
#: ../../../../1.9/docs/releases/1.8.txt:790
msgid "Query relation lookups now check object types"
msgstr ""

# 5f43b2ca5b4f4ac6b39fb404d884fba1
#: ../../../../1.9/docs/releases/1.8.txt:792
msgid ""
"Querying for model lookups now checks if the object passed is of correct "
"type and raises a :exc:`ValueError` if not. Previously, Django didn't care "
"if the object was of correct type; it just used the object's related field "
"attribute (e.g. ``id``) for the lookup. Now, an error is raised to prevent "
"incorrect lookups::"
msgstr ""

# 6a379755b1044847a8172fc818983d9b
#: ../../../../1.9/docs/releases/1.8.txt:805
msgid "``select_related()`` now checks given fields"
msgstr ""

# f1e01b08162645b08aad2197af3e6b70
#: ../../../../1.9/docs/releases/1.8.txt:807
msgid ""
"``select_related()`` now validates that the given fields actually exist. "
"Previously, nonexistent fields were silently ignored. Now, an error is "
"raised::"
msgstr ""

# b230cefd8002401a950da695b31a2398
#: ../../../../1.9/docs/releases/1.8.txt:815
msgid "The validation also makes sure that the given field is relational::"
msgstr ""

# c2bb6de3db5d440d9859fa0f45d89411
#: ../../../../1.9/docs/releases/1.8.txt:823
msgid "Default ``EmailField.max_length`` increased to 254"
msgstr ""

# 39d3d74651794db39bddb822a67b523e
#: ../../../../1.9/docs/releases/1.8.txt:825
msgid ""
"The old default 75 character ``max_length`` was not capable of storing all "
"possible RFC3696/5321-compliant email addresses. In order to store all "
"possible valid email addresses, the ``max_length`` has been increased to 254"
" characters. You will need to generate and apply database migrations for "
"your affected models (or add ``max_length=75`` if you wish to keep the "
"length on your current fields). A migration for "
":attr:`django.contrib.auth.models.User.email` is included."
msgstr ""

# 42b36c89cc8b42bcaa1b97fb7e1c5b58
#: ../../../../1.9/docs/releases/1.8.txt:834
msgid "Support for PostgreSQL versions older than 9.0"
msgstr ""

# 10bb28dd0ee94e2fb0a369b5c6f1901b
#: ../../../../1.9/docs/releases/1.8.txt:836
msgid ""
"The end of upstream support periods was reached in July 2014 for PostgreSQL "
"8.4. As a consequence, Django 1.8 sets 9.0 as the minimum PostgreSQL version"
" it officially supports."
msgstr ""

# df1cc23454e841e7af27eb8317ffe879
#: ../../../../1.9/docs/releases/1.8.txt:840
msgid ""
"This also includes dropping support for PostGIS 1.3 and 1.4 as these "
"versions are not supported on versions of PostgreSQL later than 8.4."
msgstr ""

# 40daa1f63ef5490ca349d898a023e068
#: ../../../../1.9/docs/releases/1.8.txt:843
msgid ""
"Django also now requires the use of Psycopg2 version 2.4.5 or higher (or "
"2.5+ if you want to use :mod:`django.contrib.postgres`)."
msgstr ""

# fea302f42ddd464fbb9437fd086d8b37
#: ../../../../1.9/docs/releases/1.8.txt:847
msgid "Support for MySQL versions older than 5.5"
msgstr ""

# da2d77a1ad9f488fb9f6f1c0ca954d42
#: ../../../../1.9/docs/releases/1.8.txt:849
msgid ""
"The end of upstream support periods was reached in January 2012 for MySQL "
"5.0 and December 2013 for MySQL 5.1. As a consequence, Django 1.8 sets 5.5 "
"as the minimum MySQL version it officially supports."
msgstr ""

# a85a611da4b94944a073b30d923f1156
#: ../../../../1.9/docs/releases/1.8.txt:854
msgid "Support for Oracle versions older than 11.1"
msgstr ""

# 00202c43fc074ce49b854fc81fddbf64
#: ../../../../1.9/docs/releases/1.8.txt:856
msgid ""
"The end of upstream support periods was reached in July 2010 for Oracle 9.2,"
" January 2012 for Oracle 10.1, and July 2013 for Oracle 10.2. As a "
"consequence, Django 1.8 sets 11.1 as the minimum Oracle version it "
"officially supports."
msgstr ""

# 822f2828bc304201990af5ebe9e00265
#: ../../../../1.9/docs/releases/1.8.txt:861
msgid "Specific privileges used instead of roles for tests on Oracle"
msgstr ""

# 40aefd6eb8a548179c81218b85c8d070
#: ../../../../1.9/docs/releases/1.8.txt:863
msgid ""
"Earlier versions of Django granted the CONNECT and RESOURCE roles to the "
"test user on Oracle. These roles have been deprecated, so Django 1.8 uses "
"the specific underlying privileges instead. This changes the privileges "
"required of the main user for running tests (unless the project is "
"configured to avoid creating a test user). The exact privileges required now"
" are detailed in :ref:`Oracle notes <oracle-notes>`."
msgstr ""

# 5cb6dff07eb14c46a22134149102afdb
#: ../../../../1.9/docs/releases/1.8.txt:871
msgid "``AbstractUser.last_login`` allows null values"
msgstr ""

# 724304c7dba049f0b0fcad54138e918e
#: ../../../../1.9/docs/releases/1.8.txt:873
msgid ""
"The :attr:`AbstractUser.last_login "
"<django.contrib.auth.models.User.last_login>` field now allows null values. "
"Previously, it defaulted to the time when the user was created which was "
"misleading if the user never logged in. If you are using the default user "
"(:class:`django.contrib.auth.models.User`), run the database migration "
"included in ``contrib.auth``."
msgstr ""

# 74dee7817979497188b4a5920b5ac9cf
#: ../../../../1.9/docs/releases/1.8.txt:879
msgid ""
"If you are using a custom user model that inherits from ``AbstractUser``, "
"you'll need to run :djadmin:`makemigrations` and generate a migration for "
"your app that contains that model. Also, if wish to set ``last_login`` to "
"``NULL`` for users who haven't logged in, you can run this query::"
msgstr ""

# 8cf200d024e24d42a303e39ed4c30956
#: ../../../../1.9/docs/releases/1.8.txt:897
msgid "Support for GEOS 3.1 and GDAL 1.6 has been dropped."
msgstr ""

# 7c7ae76fead9445eae376ac7ae8e3dd0
#: ../../../../1.9/docs/releases/1.8.txt:899
msgid "Support for SpatiaLite < 2.4 has been dropped."
msgstr ""

# 517d88b76d7e4de3b97a44a05c88a45f
#: ../../../../1.9/docs/releases/1.8.txt:901
msgid ""
"GIS-specific lookups have been refactored to use the "
":class:`django.db.models.Lookup` API."
msgstr ""

# 612639a32e1d4d8fb34ada5c7b319f04
#: ../../../../1.9/docs/releases/1.8.txt:904
msgid ""
"The default ``str`` representation of "
":class:`~django.contrib.gis.geos.GEOSGeometry` objects has been changed from"
" WKT to EWKT format (including the SRID). As this representation is used in "
"the serialization framework, that means that ``dumpdata`` output will now "
"contain the SRID value of geometry objects."
msgstr ""

# 616e786382ce461f8be1fab74bc929d6
#: ../../../../1.9/docs/releases/1.8.txt:911
msgid ""
"Priority of context processors for ``TemplateResponse`` brought in line with"
" ``render``"
msgstr ""

# 2f7f14f3402d4502b824e066afba8858
#: ../../../../1.9/docs/releases/1.8.txt:913
msgid ""
"The :class:`~django.template.response.TemplateResponse` constructor is "
"designed to be a drop-in replacement for the "
":func:`~django.shortcuts.render` function. However, it had a slight "
"incompatibility, in that for ``TemplateResponse``, context data from the "
"passed in context dictionary could be shadowed by context data returned from"
" context processors, whereas for ``render`` it was the other way around. "
"This was a bug, and the behavior of ``render`` is more appropriate, since it"
" allows the globally defined context processors to be overridden locally in "
"the view. If you were relying on the fact context data in a "
"``TemplateResponse`` could be overridden using a context processor, you will"
" need to change your code."
msgstr ""

# b8f4cf9c174c4a81a8627e59221f18e8
#: ../../../../1.9/docs/releases/1.8.txt:925
msgid "Overriding ``setUpClass`` / ``tearDownClass`` in test cases"
msgstr ""

# 9bac856f307643ab9392943cd8835c87
#: ../../../../1.9/docs/releases/1.8.txt:927
msgid ""
"The decorators :func:`~django.test.override_settings` and "
":func:`~django.test.modify_settings` now act at the class level when used as"
" class decorators. As a consequence, when overriding ``setUpClass()`` or "
"``tearDownClass()``, the ``super`` implementation should always be called."
msgstr ""

# 952049549b0e428d81436c8c86cd7135
#: ../../../../1.9/docs/releases/1.8.txt:933
msgid "Removal of ``django.contrib.formtools``"
msgstr ""

# bffd4d3ea4ed4d7aa084550fe7bd773e
#: ../../../../1.9/docs/releases/1.8.txt:935
msgid ""
"The formtools contrib app has been moved to a separate package and the "
"relevant documentation pages have been updated or removed."
msgstr ""

# a58fa50c167d4d8fa66edbf7754a5d0e
#: ../../../../1.9/docs/releases/1.8.txt:938
msgid "The new package is available `on GitHub`_ and on PyPI."
msgstr ""

# 1617ddce60bf4d9483f23bcedd823527
#: ../../../../1.9/docs/releases/1.8.txt:943
msgid "Database connection reloading between tests"
msgstr ""

# 63747b3c7e654b429edeb38f345dc2f3
#: ../../../../1.9/docs/releases/1.8.txt:945
msgid ""
"Django previously closed database connections between each test within a "
"``TestCase``. This is no longer the case as Django now wraps the whole "
"``TestCase`` within a transaction. If some of your tests relied on the old "
"behavior, you should have them inherit from ``TransactionTestCase`` instead."
msgstr ""

# b4028415e39642c89e9ff2b8cd90fff3
#: ../../../../1.9/docs/releases/1.8.txt:951
msgid "Cleanup of the ``django.template`` namespace"
msgstr ""

# a7828fe4ce564dfb9d8b6e9e8bd6aa66
#: ../../../../1.9/docs/releases/1.8.txt:953
msgid ""
"If you've been relying on private APIs exposed in the ``django.template`` "
"module, you may have to import them from ``django.template.base`` instead."
msgstr ""

# c7c43cc81f58403f9ae3c45264e6873c
#: ../../../../1.9/docs/releases/1.8.txt:956
msgid ""
"Also private APIs ``django.template.base.compile_string()``, "
"``django.template.loader.find_template()``, and "
"``django.template.loader.get_template_from_string()`` were removed."
msgstr ""

# 229a34802d784944ae28542cb5552491
#: ../../../../1.9/docs/releases/1.8.txt:961
msgid "``model`` attribute on private model relations"
msgstr ""

# 6078371481a6440bbe54984885d9f681
#: ../../../../1.9/docs/releases/1.8.txt:963
msgid ""
"In earlier versions of Django, on a model with a reverse foreign key "
"relationship (for example), ``model._meta.get_all_related_objects()`` "
"returned the relationship as a ``django.db.models.related.RelatedObject`` "
"with the ``model`` attribute set to the source of the relationship. Now, "
"this method returns the relationship as "
"``django.db.models.fields.related.ManyToOneRel`` (private API "
"``RelatedObject`` has been removed), and the ``model`` attribute is set to "
"the target of the relationship instead of the source. The source model is "
"accessible on the ``related_model`` attribute instead."
msgstr ""

# 64438717a5fd42c19e47f1a00e2f0d6f
#: ../../../../1.9/docs/releases/1.8.txt:972
msgid "Consider this example from the tutorial in Django 1.8::"
msgstr ""

# d2f6715637464e4d9e158a37c4a197a6
#: ../../../../1.9/docs/releases/1.8.txt:982
msgid "and compare it to the behavior on older versions::"
msgstr ""

# 31d8aebfde2246e986d463ad6e75906e
#: ../../../../1.9/docs/releases/1.8.txt:989
msgid ""
"To access the source model, you can use a pattern like this to write code "
"that will work with both Django 1.8 and older versions::"
msgstr ""

# b45b9a63847f4ee3bd99f53cc244a102
#: ../../../../1.9/docs/releases/1.8.txt:995
msgid ""
"Also note that ``get_all_related_objects()`` is deprecated in 1.8. See the "
":ref:`upgrade guide <migrating-old-meta-api>` for the new API."
msgstr ""

# b6fd437cb39f42f185a3121ea6183a31
# 4c8eddcd4b004a69ba49f922a564f911
#: ../../../../1.9/docs/releases/1.8.txt:999
#: ../../../../1.9/docs/releases/1.9.txt:685
msgid "Database backend API"
msgstr "API de moteur de base de données"

# 246cadc6d6114b47b3c7ea2c7e12b968
#: ../../../../1.9/docs/releases/1.8.txt:1001
msgid ""
"The following changes to the database backend API are documented to assist "
"those writing third-party backends in updating their code:"
msgstr ""

# 90274d105ac148e4a3a3d96e0c4745e1
#: ../../../../1.9/docs/releases/1.8.txt:1004
msgid ""
"``BaseDatabaseXXX`` classes have been moved to ``django.db.backends.base``. "
"Please import them from the new locations::"
msgstr ""

# d3ceaa58a7b6453498c6f9b0a5a5366d
#: ../../../../1.9/docs/releases/1.8.txt:1017
msgid ""
"The ``data_types``, ``data_types_suffix``, and "
"``data_type_check_constraints`` attributes have moved from the "
"``DatabaseCreation`` class to ``DatabaseWrapper``."
msgstr ""

# 1c8f973cacd048fe82ebff16d609e21b
#: ../../../../1.9/docs/releases/1.8.txt:1021
msgid ""
"The ``SQLCompiler.as_sql()`` method now takes a ``subquery`` parameter "
"(:ticket:`24164`)."
msgstr ""

# e27a6b881b2e44d3a3f5af6ab17bc3b0
#: ../../../../1.9/docs/releases/1.8.txt:1024
msgid ""
"The ``BaseDatabaseOperations.date_interval_sql()`` method now only takes a "
"``timedelta`` parameter."
msgstr ""

# 613bc7d6fa4349e69d55ceff06f059e0
#: ../../../../1.9/docs/releases/1.8.txt:1030
msgid ""
"``AdminSite`` no longer takes an ``app_name`` argument and its ``app_name`` "
"attribute has been removed. The application name is always ``admin`` (as "
"opposed to the instance name which you can still customize using "
"``AdminSite(name=\"...\")``."
msgstr ""

# 843db3d7049247e8b053b8f0a7e3032a
#: ../../../../1.9/docs/releases/1.8.txt:1035
msgid ""
"The ``ModelAdmin.get_object()`` method (private API) now takes a third "
"argument named ``from_field`` in order to specify which field should match "
"the provided ``object_id``."
msgstr ""

# 784869029cfb43c0ab553e26a42ba5cf
#: ../../../../1.9/docs/releases/1.8.txt:1039
msgid ""
"The :meth:`ModelAdmin.response_delete() "
"<django.contrib.admin.ModelAdmin.response_delete>` method now takes a second"
" argument named ``obj_id`` which is the serialized identifier used to "
"retrieve the object before deletion."
msgstr ""

# 1f96bddc091d4772b7c77fccc3a19262
#: ../../../../1.9/docs/releases/1.8.txt:1045
msgid ""
"Default autoescaping of functions in ``django.template.defaultfilters``"
msgstr ""

# 1dde429f77d64ada86f7e9208c8bf9b3
#: ../../../../1.9/docs/releases/1.8.txt:1047
msgid ""
"In order to make built-in template filters that output HTML \"safe by "
"default\" when calling them in Python code, the following functions in "
"``django.template.defaultfilters`` have been changed to automatically escape"
" their input value:"
msgstr ""

# 8fa6c9219d7d4442a4ce5f216b59ab9c
#: ../../../../1.9/docs/releases/1.8.txt:1052
msgid "``join``"
msgstr ""

# 6cd8facac7be4712ba6e751f36476c0a
#: ../../../../1.9/docs/releases/1.8.txt:1053
msgid "``linebreaksbr``"
msgstr ""

# 0284d89895be41269981a0d6312f6e5d
#: ../../../../1.9/docs/releases/1.8.txt:1054
msgid "``linebreaks_filter``"
msgstr ""

# 21190238f1e249ec8056561396b08918
#: ../../../../1.9/docs/releases/1.8.txt:1055
msgid "``linenumbers``"
msgstr ""

# 4968a9744a824f82a327cbfe3bfa78ff
#: ../../../../1.9/docs/releases/1.8.txt:1056
msgid "``unordered_list``"
msgstr ""

# 0dbb24872e9445ab846100890d67a715
#: ../../../../1.9/docs/releases/1.8.txt:1057
msgid "``urlize``"
msgstr ""

# cd50e0ed767f43b996ac7740cdad37af
#: ../../../../1.9/docs/releases/1.8.txt:1058
msgid "``urlizetrunc``"
msgstr ""

# a156fae9e3ee4e08a4ffb8098201875e
#: ../../../../1.9/docs/releases/1.8.txt:1060
msgid ""
"You can revert to the old behavior by specifying ``autoescape=False`` if you"
" are passing trusted content. This change doesn't have any effect when using"
" the corresponding filters in templates."
msgstr ""

# bb36343257a94c39a0f395d52bba5f56
#: ../../../../1.9/docs/releases/1.8.txt:1067
msgid "``connections.queries`` is now a read-only attribute."
msgstr ""

# df8b496821b04d368767f216465d96c0
#: ../../../../1.9/docs/releases/1.8.txt:1069
msgid ""
"Database connections are considered equal only if they're the same object. "
"They aren't hashable any more."
msgstr ""

# 347d7cf2169c49c9b91b976db456ef66
#: ../../../../1.9/docs/releases/1.8.txt:1072
msgid ""
":class:`~django.middleware.gzip.GZipMiddleware` used to disable compression "
"for some content types when the request is from Internet Explorer, in order "
"to work around a bug in IE6 and earlier. This behavior could affect "
"performance on IE7 and later. It was removed."
msgstr ""

# c60654c7d3094a3b9db0b40b69d9cfee
#: ../../../../1.9/docs/releases/1.8.txt:1077
msgid ""
"``URLField.to_python`` no longer adds a trailing slash to pathless URLs."
msgstr ""

# b476d602e1134a6ea5288eff5e89624d
#: ../../../../1.9/docs/releases/1.8.txt:1079
msgid ""
"The :tfilter:`length` template filter now returns ``0`` for an undefined "
"variable, rather than an empty string."
msgstr ""

# aec676d195684e6692650a059c7cf120
#: ../../../../1.9/docs/releases/1.8.txt:1082
msgid ""
"``ForeignKey.default_error_message['invalid']`` has been changed from "
"``'%(model)s instance with pk %(pk)r does not exist.'`` to ``'%(model)s "
"instance with %(field)s %(value)r does not exist.'`` If you are using this "
"message in your own code, please update the list of interpolated parameters."
" Internally, Django will continue to provide the ``pk`` parameter in "
"``params`` for backwards compatibility."
msgstr ""

# 4bdd3d6e9e774a8da74e2843d19212f4
#: ../../../../1.9/docs/releases/1.8.txt:1089
msgid ""
"``UserCreationForm.errors_messages['duplicate_username']`` is no longer "
"used. If you wish to customize that error message, :ref:`override it on the "
"form <modelforms-overriding-default-fields>` using the ``'unique'`` key in "
"``Meta.errors_messages['username']`` or, if you have a custom form field for"
" ``'username'``, using the the ``'unique'`` key in its "
":attr:`~django.forms.Field.error_messages` argument."
msgstr ""

# c047e198681f42eb8910e6745b174e26
#: ../../../../1.9/docs/releases/1.8.txt:1096
msgid ""
"The block ``usertools`` in the ``base.html`` template of "
":mod:`django.contrib.admin` now requires the ``has_permission`` context "
"variable to be set. If you have any custom admin views that use this "
"template, update them to pass :meth:`AdminSite.has_permission() "
"<django.contrib.admin.AdminSite.has_permission>` as this new variable's "
"value or simply include :meth:`AdminSite.each_context(request) "
"<django.contrib.admin.AdminSite.each_context>` in the context."
msgstr ""

# 165d3a07b7c34a8da3d9b4de23cfc70f
#: ../../../../1.9/docs/releases/1.8.txt:1104
msgid ""
"Internal changes were made to the :class:`~django.forms.ClearableFileInput` "
"widget to allow more customization. The undocumented ``url_markup_template``"
" attribute was removed in favor of ``template_with_initial``."
msgstr ""

# 7dbdc4f4583a43a2ae206ce0ac9f0afb
#: ../../../../1.9/docs/releases/1.8.txt:1108
msgid ""
"For consistency with other major vendors, the ``en_GB`` locale now has "
"Monday as the first day of the week."
msgstr ""

# 421c31c30d3f42f0ad54bba9ba95c528
#: ../../../../1.9/docs/releases/1.8.txt:1111
msgid ""
"Seconds have been removed from any locales that had them in ``TIME_FORMAT``,"
" ``DATETIME_FORMAT``, or ``SHORT_DATETIME_FORMAT``."
msgstr ""

# d7cd6667446a46f189aa12519eef00a3
#: ../../../../1.9/docs/releases/1.8.txt:1114
msgid ""
"The default max size of the Oracle test tablespace has increased from 300M "
"(or 200M, before 1.7.2) to 500M."
msgstr ""

# e62aa1041cc0471c84808411f6003406
#: ../../../../1.9/docs/releases/1.8.txt:1117
msgid ""
":func:`~django.core.urlresolvers.reverse` and "
":func:`~django.core.urlresolvers.reverse_lazy` now return Unicode strings "
"instead of byte strings."
msgstr ""

# da2d131c8e3e4f30a761725f9d05af15
#: ../../../../1.9/docs/releases/1.8.txt:1121
msgid ""
"The ``CacheClass`` shim has been removed from all cache backends. These "
"aliases were provided for backwards compatibility with Django 1.3. If you "
"are still using them, please update your project to use the real class name "
"found in the :setting:`BACKEND <CACHES-BACKEND>` key of the "
":setting:`CACHES` setting."
msgstr ""

# 7c7f722795cd48399dda5c39c1672a37
#: ../../../../1.9/docs/releases/1.8.txt:1127
msgid ""
"By default, :ref:`call_command <call-command>` now always skips the check "
"framework (unless you pass it ``skip_checks=False``)."
msgstr ""

# 4dba31d05c194eb7a4e6e87fc242728a
#: ../../../../1.9/docs/releases/1.8.txt:1130
msgid ""
"When iterating over lines, :class:`~django.core.files.File` now uses "
"`universal newlines`_. The following are recognized as ending a line: the "
"Unix end-of-line convention ``'\\n'``, the Windows convention ``'\\r\\n'``, "
"and the old Macintosh convention ``'\\r'``."
msgstr ""

# 18764344c5064d32ad0364deaa8dd335
#: ../../../../1.9/docs/releases/1.8.txt:1137
msgid ""
"The Memcached cache backends ``MemcachedCache`` and ``PyLibMCCache`` will "
"delete a key if ``set()`` fails. This is necessary to ensure the "
"``cache_db`` session store always fetches the most current session data."
msgstr ""

# 5d4a6cf3fdc64677ba3e504016e12e68
#: ../../../../1.9/docs/releases/1.8.txt:1141
msgid ""
"Private APIs ``override_template_loaders`` and ``override_with_test_loader``"
" in ``django.test.utils`` were removed. Override ``TEMPLATES`` with "
"``override_settings`` instead."
msgstr ""

# 76720c22ff074449b6fb4c88ef2895eb
#: ../../../../1.9/docs/releases/1.8.txt:1145
msgid ""
"Warnings from the MySQL database backend are no longer converted to "
"exceptions when :setting:`DEBUG` is ``True``."
msgstr ""

# af32f9291ddc440089f3b77f458b2fc8
#: ../../../../1.9/docs/releases/1.8.txt:1148
msgid ""
":class:`~django.http.HttpRequest` now has a simplified ``repr`` (e.g. "
"``<WSGIRequest: GET '/somepath/'>``). This won't change the behavior of the "
":class:`~django.views.debug.SafeExceptionReporterFilter` class."
msgstr ""

# 270654ef86ce4bb8b245203ab2118a4a
#: ../../../../1.9/docs/releases/1.8.txt:1152
msgid ""
"Class-based views that use "
":class:`~django.views.generic.edit.ModelFormMixin` will raise an "
":exc:`~django.core.exceptions.ImproperlyConfigured` exception when both the "
"``fields`` and ``form_class`` attributes are specified. Previously, "
"``fields`` was silently ignored."
msgstr ""

# 4e936954473b4ba495ab858d9fe6cf83
#: ../../../../1.9/docs/releases/1.8.txt:1157
msgid ""
"When following redirects, the test client now raises "
":exc:`~django.test.client.RedirectCycleError` if it detects a loop or hits a"
" maximum redirect limit (rather than passing silently)."
msgstr ""

# 97d43209f00d41aea928700a77589d31
#: ../../../../1.9/docs/releases/1.8.txt:1161
msgid ""
"Translatable strings set as the ``default`` parameter of the field are cast "
"to concrete strings later, so the return type of ``Field.get_default()`` is "
"different in some cases. There is no change to default values which are the "
"result of a callable."
msgstr ""

# db5a517afdff4842893be90f9eeafa1d
#: ../../../../1.9/docs/releases/1.8.txt:1166
msgid ""
"``GenericIPAddressField.empty_strings_allowed`` is now ``False``. Database "
"backends that interpret empty strings as null (only Oracle among the "
"backends that Django includes) will no longer convert null values back to an"
" empty string. This is consistent with other backends."
msgstr ""

# d85646a1ee554b918db9b874084a97b5
#: ../../../../1.9/docs/releases/1.8.txt:1171
msgid ""
"When the :attr:`~django.core.management.BaseCommand.leave_locale_alone` "
"attribute is ``False``, translations are now deactivated instead of forcing "
"the \"en-us\" locale. In the case your models contained non-English strings "
"and you counted on English translations to be activated in management "
"commands, this will not happen any longer. It might be that new database "
"migrations are generated (once) after migrating to 1.8."
msgstr ""

# 94175d4b3dfc46fda5aa3ae4844674ce
#: ../../../../1.9/docs/releases/1.8.txt:1178
msgid ""
":func:`django.utils.translation.get_language()` now returns ``None`` instead"
" of :setting:`LANGUAGE_CODE` when translations are temporarily deactivated."
msgstr ""

# 27962d8bdf9a4f1bafb9e3533c0f7e3d
#: ../../../../1.9/docs/releases/1.8.txt:1181
msgid ""
"When a translation doesn't exist for a specific literal, the fallback is now"
" taken from the :setting:`LANGUAGE_CODE` language (instead of from the "
"untranslated ``msgid`` message)."
msgstr ""

# beab3aeed3d642bd938dc6d4972257de
#: ../../../../1.9/docs/releases/1.8.txt:1185
msgid ""
"The ``name`` field of "
":class:`django.contrib.contenttypes.models.ContentType` has been removed by "
"a migration and replaced by a property. That means it's not possible to "
"query or filter a ``ContentType`` by this field any longer."
msgstr ""

# 707095e33e684645aeecbe760b652542
#: ../../../../1.9/docs/releases/1.8.txt:1189
msgid ""
"Be careful if you upgrade to Django 1.8 and skip Django 1.7. If you run "
"``manage.py migrate --fake``, this migration will be skipped and you'll see "
"a ``RuntimeError: Error creating new content types.`` exception because the "
"``name`` column won't be dropped from the database. Use ``migrate.py migrate"
" --fake-initial`` to fake only the initial migration instead."
msgstr ""

# cb42d515a859436c8de61efbed545fed
#: ../../../../1.9/docs/releases/1.8.txt:1195
msgid ""
":djadmin:`migrate` now accepts the :djadminopt:`--fake-initial` option to "
"allow faking initial migrations. In 1.7 initial migrations were always "
"automatically faked if all tables created in an initial migration already "
"existed."
msgstr ""

# 5bfe2e105a1e49ee995c6dd0c21d3700
#: ../../../../1.9/docs/releases/1.8.txt:1200
msgid ""
"An app *without* migrations with a ``ForeignKey`` to an app *with* "
"migrations may now result in a foreign key constraint error when migrating "
"the database or running tests. In Django 1.7, this could fail silently and "
"result in a missing constraint. To resolve the error, add migrations to the "
"app without them."
msgstr ""

# 0d678e6c5be24334a5025581efd6e74b
#: ../../../../1.9/docs/releases/1.8.txt:1209
msgid "Features deprecated in 1.8"
msgstr ""

# 34e914632b324983bb3563746a355a18
#: ../../../../1.9/docs/releases/1.8.txt:1212
msgid "Selected methods in ``django.db.models.options.Options``"
msgstr ""

# 27d21eb012da472d9a915e0701c2a876
#: ../../../../1.9/docs/releases/1.8.txt:1214
msgid ""
"As part of the formalization of the ``Model._meta`` API (from the "
":class:`django.db.models.options.Options` class), a number of methods have "
"been deprecated and will be removed in Django 1.10:"
msgstr ""

# f6376783daec48c2bb2672080dd7892e
#: ../../../../1.9/docs/releases/1.8.txt:1218
msgid "``get_all_field_names()``"
msgstr ""

# 0268a7f9227c4a739b629b31e01a40d4
#: ../../../../1.9/docs/releases/1.8.txt:1219
msgid "``get_all_related_objects()``"
msgstr ""

# 511af35693bb4c7d8bd90c9436e515ed
#: ../../../../1.9/docs/releases/1.8.txt:1220
msgid "``get_all_related_objects_with_model()``"
msgstr ""

# 3ae794b65645414a979c9c72e20b5b5c
#: ../../../../1.9/docs/releases/1.8.txt:1221
msgid "``get_all_related_many_to_many_objects()``"
msgstr ""

# 9505b255d8a94bfdadefe5c8ecf9bd67
#: ../../../../1.9/docs/releases/1.8.txt:1222
msgid "``get_all_related_m2m_objects_with_model()``"
msgstr ""

# 1415e1fb16b745a3a5058e466299ada9
#: ../../../../1.9/docs/releases/1.8.txt:1223
msgid "``get_concrete_fields_with_model()``"
msgstr ""

# ca65aa3d3b7841f59ec0c15da5cc3089
#: ../../../../1.9/docs/releases/1.8.txt:1224
msgid "``get_field_by_name()``"
msgstr ""

# 6abaf9f6e8664c448f89eb4a062212e3
#: ../../../../1.9/docs/releases/1.8.txt:1225
msgid "``get_fields_with_model()``"
msgstr ""

# aceae30a41564f14bc0a905bd896e6ab
#: ../../../../1.9/docs/releases/1.8.txt:1226
msgid "``get_m2m_with_model()``"
msgstr ""

# 8a2f1972df1c4e41b24eb42762f5381f
#: ../../../../1.9/docs/releases/1.8.txt:1228
msgid ""
"A :ref:`migration guide <migrating-old-meta-api>` has been provided to "
"assist in converting your code from the old API to the new, official API."
msgstr ""

# 884cc550300b4fd8b92f8981b4bd2579
#: ../../../../1.9/docs/releases/1.8.txt:1232
msgid ""
"Loading ``cycle`` and ``firstof`` template tags from ``future`` library"
msgstr ""

# 7d4ea1e211084954a53deb340c5ca7dd
#: ../../../../1.9/docs/releases/1.8.txt:1234
msgid ""
"Django 1.6 introduced ``{% load cycle from future %}`` and ``{% load firstof"
" from future %}`` syntax for forward compatibility of the :ttag:`cycle` and "
":ttag:`firstof` template tags. This syntax is now deprecated and will be "
"removed in Django 1.10. You can simply remove the ``{% load ... from future "
"%}`` tags."
msgstr ""

# b71d4766ade14c31a16a01e9a88dfc33
#: ../../../../1.9/docs/releases/1.8.txt:1241
msgid "``django.conf.urls.patterns()``"
msgstr ""

# c6e6fb9f439e4310ad92ecc6bef44618
#: ../../../../1.9/docs/releases/1.8.txt:1243
msgid ""
"In the olden days of Django, it was encouraged to reference views as strings"
" in ``urlpatterns``::"
msgstr ""

# c925f17645ee4761aea4e55b2f40c616
#: ../../../../1.9/docs/releases/1.8.txt:1250
msgid ""
"and Django would magically import ``myapp.views.myview`` internally and turn"
" the string into a real function reference. In order to reduce repetition "
"when referencing many views from the same module, the ``patterns()`` "
"function takes a required initial ``prefix`` argument which is prepended to "
"all views-as-strings in that set of ``urlpatterns``::"
msgstr ""

# de85786fc58948c8b2517e6c2fd90b40
#: ../../../../1.9/docs/releases/1.8.txt:1261
msgid ""
"In the modern era, we have updated the tutorial to instead recommend "
"importing your views module and referencing your view functions (or classes)"
" directly. This has a number of advantages, all deriving from the fact that "
"we are using normal Python in place of \"Django String Magic\": the errors "
"when you mistype a view name are less obscure, IDEs can help with "
"autocompletion of view names, etc."
msgstr ""

# 8d1af288b5034b5aae15a12a57db1eb9
#: ../../../../1.9/docs/releases/1.8.txt:1268
msgid ""
"So these days, the above use of the ``prefix`` arg is much more likely to be"
" written (and is better written) as::"
msgstr ""

# 2a05dd290cf14c9994b12d8395d7b6b0
#: ../../../../1.9/docs/releases/1.8.txt:1278
msgid ""
"Thus ``patterns()`` serves little purpose and is a burden when teaching new "
"users (answering the newbie's question \"why do I need this empty string as "
"the first argument to ``patterns()``?\"). For these reasons, we are "
"deprecating it. Updating your code is as simple as ensuring that "
"``urlpatterns`` is a list of :func:`django.conf.urls.url` instances. For "
"example::"
msgstr ""

# 5a41a4ebc7f24d03840784785f48d88f
#: ../../../../1.9/docs/releases/1.8.txt:1293
msgid "Passing a string as ``view`` to :func:`~django.conf.urls.url`"
msgstr ""

# b1b17ff390e74d05bdba7cc407a53a87
#: ../../../../1.9/docs/releases/1.8.txt:1295
msgid ""
"Related to the previous item, referencing views as strings in the ``url()`` "
"function is deprecated. Pass the callable view as described in the previous "
"section instead."
msgstr ""

# 29894a411e024310bd166a836f57aab7
#: ../../../../1.9/docs/releases/1.8.txt:1300
msgid "Template-related settings"
msgstr ""

# 461fbd4af50f401787a0d6fc96b622fd
#: ../../../../1.9/docs/releases/1.8.txt:1302
msgid ""
"As a consequence of the multiple template engines refactor, several settings"
" are deprecated in favor of :setting:`TEMPLATES`:"
msgstr ""

# 48e1727a168143dfa7f5aef9ea80c9cf
#: ../../../../1.9/docs/releases/1.8.txt:1305
msgid "``ALLOWED_INCLUDE_ROOTS``"
msgstr ""

# 97caa9e56cac4bffa224b06c895260ac
#: ../../../../1.9/docs/releases/1.8.txt:1306
msgid "``TEMPLATE_CONTEXT_PROCESSORS``"
msgstr ""

# db2414930b9740bd8b2920818b101406
#: ../../../../1.9/docs/releases/1.8.txt:1307
msgid "``TEMPLATE_DEBUG``"
msgstr ""

# 3596e3cf6f254dfab404cdeb3053277c
#: ../../../../1.9/docs/releases/1.8.txt:1308
msgid "``TEMPLATE_DIRS``"
msgstr ""

# cfdc8591d07645c1ae8f845460e3c1fd
#: ../../../../1.9/docs/releases/1.8.txt:1309
msgid "``TEMPLATE_LOADERS``"
msgstr ""

# f65faf624ba447fc8fa1fe3f6a70bca0
#: ../../../../1.9/docs/releases/1.8.txt:1310
msgid "``TEMPLATE_STRING_IF_INVALID``"
msgstr ""

# 6c31e0452cde47409a91311042767d43
#: ../../../../1.9/docs/releases/1.8.txt:1313
msgid "``django.core.context_processors``"
msgstr ""

# 44038cc4be5d421c965395b87b9cfd15
#: ../../../../1.9/docs/releases/1.8.txt:1315
msgid ""
"Built-in template context processors have been moved to "
"``django.template.context_processors``."
msgstr ""

# 1dd6edcd7715449b920bebaf350cff0a
#: ../../../../1.9/docs/releases/1.8.txt:1319
msgid "``django.test.SimpleTestCase.urls``"
msgstr ""

# 132c9ffc68a9425ab49414825ad4fe4e
#: ../../../../1.9/docs/releases/1.8.txt:1321
msgid ""
"The attribute :attr:`SimpleTestCase.urls <django.test.SimpleTestCase.urls>` "
"for specifying URLconf configuration in tests has been deprecated and will "
"be removed in Django 1.10. Use :func:`@override_settings(ROOT_URLCONF=...) "
"<django.test.override_settings>` instead."
msgstr ""

# c1b5f9805f0a474bb3317b192a7e5a80
#: ../../../../1.9/docs/releases/1.8.txt:1327
msgid "``prefix`` argument to :func:`~django.conf.urls.i18n.i18n_patterns`"
msgstr ""

# 3326bce951c3430a89f2fedb873768cc
#: ../../../../1.9/docs/releases/1.8.txt:1329
msgid ""
"Related to the previous item, the ``prefix`` argument to "
":func:`django.conf.urls.i18n.i18n_patterns` has been deprecated. Simply pass"
" a list of :func:`django.conf.urls.url` instances instead."
msgstr ""

# fb7cf1c7d455417da4c1df91924448af
#: ../../../../1.9/docs/releases/1.8.txt:1334
msgid ""
"Using an incorrect count of unpacked values in the :ttag:`for` template tag"
msgstr ""

# 4e74971137a447c7895bc82e8d0ed66a
#: ../../../../1.9/docs/releases/1.8.txt:1336
msgid ""
"Using an incorrect count of unpacked values in :ttag:`for` tag will raise an"
" exception rather than fail silently in Django 1.10."
msgstr ""

# 17f2174a19a549bda9e0bacf8295d05e
#: ../../../../1.9/docs/releases/1.8.txt:1340
msgid ""
"Passing a dotted path to :func:`~django.core.urlresolvers.reverse()` and "
":ttag:`url`"
msgstr ""

# 33ea0064f08a486e98c7f864aa66862b
#: ../../../../1.9/docs/releases/1.8.txt:1342
msgid ""
"Reversing URLs by Python path is an expensive operation as it causes the "
"path being reversed to be imported. This behavior has also resulted in a "
"`security issue`_. Use :ref:`named URL patterns <naming-url-patterns>` for "
"reversing instead."
msgstr ""

# 7235ddf3a7d340d48da6cb7be2352839
#: ../../../../1.9/docs/releases/1.8.txt:1347
msgid ""
"If you are using :mod:`django.contrib.sitemaps`, add the ``name`` argument "
"to the ``url`` that references "
":func:`django.contrib.sitemaps.views.sitemap`::"
msgstr ""

# c17dbff046d2466ba69041a26a1be459
#: ../../../../1.9/docs/releases/1.8.txt:1355
msgid ""
"to ensure compatibility when reversing by Python path is removed in Django "
"1.10."
msgstr ""

# d61402d59b974fe2875bfd6eba76b901
#: ../../../../1.9/docs/releases/1.8.txt:1357
msgid ""
"Similarly for GIS sitemaps, add "
"``name='django.contrib.gis.sitemaps.views.kml'`` or "
"``name='django.contrib.gis.sitemaps.views.kmz'``."
msgstr ""

# 3a34272b0a864a7ab832ad538a926664
#: ../../../../1.9/docs/releases/1.8.txt:1363
msgid "Aggregate methods and modules"
msgstr ""

# c1295106348d43bbb80b1a6a861d732e
#: ../../../../1.9/docs/releases/1.8.txt:1365
msgid ""
"The ``django.db.models.sql.aggregates`` and "
"``django.contrib.gis.db.models.sql.aggregates`` modules (both private API), "
"have been deprecated as ``django.db.models.aggregates`` and "
"``django.contrib.gis.db.models.aggregates`` are now also responsible for SQL"
" generation. The old modules will be removed in Django 1.10."
msgstr ""

# e4f85b16349d4dd2aebcf1b22462b504
#: ../../../../1.9/docs/releases/1.8.txt:1371
msgid ""
"If you were using the old modules, see :doc:`Query Expressions "
"</ref/models/expressions>` for instructions on rewriting custom aggregates "
"using the new stable API."
msgstr ""

# c1262353df244caab1a6bcf18c9d6859
#: ../../../../1.9/docs/releases/1.8.txt:1375
msgid ""
"The following methods and properties of ``django.db.models.sql.query.Query``"
" have also been deprecated and the backwards compatibility shims will be "
"removed in Django 1.10:"
msgstr ""

# d28a0112432242bf9fe5c1b143ef7485
#: ../../../../1.9/docs/releases/1.8.txt:1379
msgid "``Query.aggregates``, replaced by ``annotations``."
msgstr ""

# 52a468ab5a75405a86ee06ebf4f6be81
#: ../../../../1.9/docs/releases/1.8.txt:1380
msgid "``Query.aggregate_select``, replaced by ``annotation_select``."
msgstr ""

# fd479147e7d5490b85271c1752287840
#: ../../../../1.9/docs/releases/1.8.txt:1381
msgid "``Query.add_aggregate()``, replaced by ``add_annotation()``."
msgstr ""

# 2a1ef2e0a69a4616aa9c4f7d428edf55
#: ../../../../1.9/docs/releases/1.8.txt:1382
msgid "``Query.set_aggregate_mask()``, replaced by ``set_annotation_mask()``."
msgstr ""

# d224f2e36b234a20a228253164f1a955
#: ../../../../1.9/docs/releases/1.8.txt:1383
msgid ""
"``Query.append_aggregate_mask()``, replaced by ``append_annotation_mask()``."
msgstr ""

# b7fd5c9451394e8396812035c8e46752
#: ../../../../1.9/docs/releases/1.8.txt:1386
msgid "Extending management command arguments through ``Command.option_list``"
msgstr ""

# 161e107dc0df46e99e195d022a3b3a82
#: ../../../../1.9/docs/releases/1.8.txt:1388
msgid ""
"Management commands now use :py:mod:`argparse` instead of :py:mod:`optparse`"
" to parse command-line arguments passed to commands. This also means that "
"the way to add custom arguments to commands has changed: instead of "
"extending the ``option_list`` class list, you should now override the "
":meth:`~django.core.management.BaseCommand.add_arguments` method and add "
"arguments through ``argparse.add_argument()``. See :ref:`this example "
"<custom-commands-options>` for more details."
msgstr ""

# c600292c50dc4c15adc44bc91e2c8015
#: ../../../../1.9/docs/releases/1.8.txt:1397
msgid "``django.core.management.NoArgsCommand``"
msgstr ""

# 9d17bc11a9084a4c961944a498506a13
#: ../../../../1.9/docs/releases/1.8.txt:1399
msgid ""
"The class :class:`~django.core.management.NoArgsCommand` is now deprecated "
"and will be removed in Django 1.10. Use "
":class:`~django.core.management.BaseCommand` instead, which takes no "
"arguments by default."
msgstr ""

# b296c89aefd14a9ebf7ccd93a8075a86
#: ../../../../1.9/docs/releases/1.8.txt:1404
msgid "Listing all migrations in a project"
msgstr ""

# 823dbe2a486a4b6ca35336f3ae8a9d1a
#: ../../../../1.9/docs/releases/1.8.txt:1406
msgid ""
"The ``--list`` option of the :djadmin:`migrate` management command is "
"deprecated and will be removed in Django 1.10. Use :djadmin:`showmigrations`"
" instead."
msgstr ""

# 13cd93fc6cde4730bd23d4516669b9e1
#: ../../../../1.9/docs/releases/1.8.txt:1411
msgid ""
"``cache_choices`` option of ``ModelChoiceField`` and "
"``ModelMultipleChoiceField``"
msgstr ""

# 20c853d91abd403cbd778e8aab1f0ae2
#: ../../../../1.9/docs/releases/1.8.txt:1413
msgid ""
":class:`~django.forms.ModelChoiceField` and "
":class:`~django.forms.ModelMultipleChoiceField` took an undocumented, "
"untested option ``cache_choices``. This cached querysets between multiple "
"renderings of the same ``Form`` object. This option is subject to an "
"accelerated deprecation and will be removed in Django 1.9."
msgstr ""

# ccbcd35b2c344b248580e51c21e7e6bd
#: ../../../../1.9/docs/releases/1.8.txt:1420
msgid "``django.template.resolve_variable()``"
msgstr ""

# 208323e6c686498d8d9c175d8cab4826
#: ../../../../1.9/docs/releases/1.8.txt:1422
msgid ""
"The function has been informally marked as \"Deprecated\" for some time. "
"Replace ``resolve_variable(path, context)`` with "
"``django.template.Variable(path).resolve(context)``."
msgstr ""

# f7aaecc58cde4bcf8b53eb9238f5da0e
#: ../../../../1.9/docs/releases/1.8.txt:1427
msgid "``django.contrib.webdesign``"
msgstr ""

# 97e30f8ac37c4f37b00e9f00bf14f2ca
#: ../../../../1.9/docs/releases/1.8.txt:1429
msgid ""
"It provided the :ttag:`lorem` template tag which is now included in the "
"built-in tags. Simply remove ``'django.contrib.webdesign'`` from "
":setting:`INSTALLED_APPS` and ``{% load webdesign %}`` from your templates."
msgstr ""

# 2dafe594a3554c7c8d487435e37107f2
#: ../../../../1.9/docs/releases/1.8.txt:1434
msgid "``error_message`` argument to ``django.forms.RegexField``"
msgstr ""

# 7f9ccd8539684df2b42a16221dd54311
#: ../../../../1.9/docs/releases/1.8.txt:1436
msgid ""
"It provided backwards compatibility for pre-1.0 code, but its functionality "
"is redundant. Use ``Field.error_messages['invalid']`` instead."
msgstr ""

# b34900c72caa4564adea3fbddb0ea4ce
#: ../../../../1.9/docs/releases/1.8.txt:1440
msgid "Old :tfilter:`unordered_list` syntax"
msgstr ""

# 2303f165008446af93adc75781c3d2cb
#: ../../../../1.9/docs/releases/1.8.txt:1442
msgid ""
"An older (pre-1.0), more restrictive and verbose input format for the "
":tfilter:`unordered_list` template filter has been deprecated::"
msgstr ""

# 0824d57c25d4472297ba02fbfb56330a
#: ../../../../1.9/docs/releases/1.8.txt:1447
msgid "Using the new syntax, this becomes::"
msgstr ""

# ff00599780a84eaaaaa738ab7a75eb79
#: ../../../../1.9/docs/releases/1.8.txt:1452
msgid "``django.forms.Field._has_changed()``"
msgstr ""

# 2cc366b64fc6442781b12e05bfe01cc0
#: ../../../../1.9/docs/releases/1.8.txt:1454
msgid ""
"Rename this method to :meth:`~django.forms.Field.has_changed` by removing "
"the leading underscore. The old name will still work until Django 1.10."
msgstr ""

# 0d5a650a6eea4aa5addea6cf095f17db
#: ../../../../1.9/docs/releases/1.8.txt:1458
msgid "``django.utils.html.remove_tags()`` and ``removetags`` template filter"
msgstr ""

# f33705c9b3b7492ba8b5035d538e4af9
#: ../../../../1.9/docs/releases/1.8.txt:1460
msgid ""
"``django.utils.html.remove_tags()`` as well as the template filter "
"``removetags`` have been deprecated as they cannot guarantee safe output. "
"Their existence is likely to lead to their use in security-sensitive "
"contexts where they are not actually safe."
msgstr ""

# e594d3be020b49648f768f4c1d34920c
#: ../../../../1.9/docs/releases/1.8.txt:1465
msgid ""
"The unused and undocumented ``django.utils.html.strip_entities()`` function "
"has also been deprecated."
msgstr ""

# fa6ec988359e471e924131dcac8059f5
#: ../../../../1.9/docs/releases/1.8.txt:1469
msgid ""
"``is_admin_site`` argument to ``django.contrib.auth.views.password_reset()``"
msgstr ""

# f67717f447a34eb38a2712abf3961c62
#: ../../../../1.9/docs/releases/1.8.txt:1471
msgid "It's a legacy option that should no longer be necessary."
msgstr ""

# 5d9ec13f31704721847a1c322d53671c
#: ../../../../1.9/docs/releases/1.8.txt:1474
msgid "``SubfieldBase``"
msgstr ""

# 893470d0f3314555934026bf109f64d5
#: ../../../../1.9/docs/releases/1.8.txt:1476
msgid ""
"``django.db.models.fields.subclassing.SubfieldBase`` has been deprecated and"
" will be removed in Django 1.10. Historically, it was used to handle fields "
"where type conversion was needed when loading from the database, but it was "
"not used in ``.values()`` calls or in aggregates. It has been replaced with "
":meth:`~django.db.models.Field.from_db_value`. Note that the new approach "
"does not call the :meth:`~django.db.models.Field.to_python` method on "
"assignment as was the case with ``SubfieldBase``."
msgstr ""

# a103ebd9843c498f96bc1389bf01206d
#: ../../../../1.9/docs/releases/1.8.txt:1485
msgid "``django.utils.checksums``"
msgstr ""

# 793f58d6b1fe42be8bcd4d4bee068a72
#: ../../../../1.9/docs/releases/1.8.txt:1487
msgid ""
"The ``django.utils.checksums`` module has been deprecated and will be "
"removed in Django 1.10. The functionality it provided (validating checksum "
"using the Luhn algorithm) was undocumented and not used in Django. The "
"module has been moved to the `django-localflavor`_ package (version 1.1+)."
msgstr ""

# 24ea2cad7c94451e881fdd8f273cc0ff
#: ../../../../1.9/docs/releases/1.8.txt:1495
msgid "``InlineAdminForm.original_content_type_id``"
msgstr ""

# 9b535523a635451a8c49c021ae916993
#: ../../../../1.9/docs/releases/1.8.txt:1497
msgid ""
"The ``original_content_type_id`` attribute on ``InlineAdminForm`` has been "
"deprecated and will be removed in Django 1.10. Historically, it was used to "
"construct the \"view on site\" URL. This URL is now accessible using the "
"``absolute_url`` attribute of the form."
msgstr ""

# 53dc83dc055d41139a5ecd90ddcbf5e7
#: ../../../../1.9/docs/releases/1.8.txt:1503
msgid ""
"``django.views.generic.edit.FormMixin.get_form()``’s ``form_class`` argument"
msgstr ""

# 46757116127c44cbb7f0c8af6a813f0c
#: ../../../../1.9/docs/releases/1.8.txt:1505
msgid ""
"``FormMixin`` subclasses that override the ``get_form()`` method should make"
" sure to provide a default value for the ``form_class`` argument since it's "
"now optional."
msgstr ""

# 3322ce8beb69446fb0380ac695ff2d58
#: ../../../../1.9/docs/releases/1.8.txt:1510
msgid ""
"Rendering templates loaded by :func:`~django.template.loader.get_template()`"
" with a :class:`~django.template.Context`"
msgstr ""

# 5baea6c246f54fc89625dc3d692fe01d
#: ../../../../1.9/docs/releases/1.8.txt:1512
msgid ""
"The return type of :func:`~django.template.loader.get_template()` has "
"changed in Django 1.8: instead of a :class:`django.template.Template`, it "
"returns a ``Template`` instance whose exact type depends on which backend "
"loaded it."
msgstr ""

# 7950c8f55d8240d592a30a914135ff84
#: ../../../../1.9/docs/releases/1.8.txt:1516
msgid ""
"Both classes provide a ``render()`` method, however, the former takes a "
":class:`django.template.Context` as an argument while the latter expects a "
":class:`dict`. This change is enforced through a deprecation path for Django"
" templates."
msgstr ""

# 43fe1880589043f0ad008597bf6d5f20
#: ../../../../1.9/docs/releases/1.8.txt:1521
msgid ""
"Since it's easier to understand with examples, the :ref:`upgrade guide "
"<get_template-upgrade-django-18>` shows how to adapt affected code."
msgstr ""

# 0398f7336d174024b490681a1e5203ff
#: ../../../../1.9/docs/releases/1.8.txt:1524
msgid ""
"All this also applies to :func:`~django.template.loader.select_template()`."
msgstr ""

# 180bb62e5e874f469a8d9ea4a0107b42
#: ../../../../1.9/docs/releases/1.8.txt:1527
msgid ""
":class:`~django.template.Template` and :class:`~django.template.Context` "
"classes in template responses"
msgstr ""

# 9f2d3ed8829d47efaca5ebf9c7401bcf
#: ../../../../1.9/docs/releases/1.8.txt:1529
msgid ""
"Some methods of :class:`~django.template.response.SimpleTemplateResponse` "
"and :class:`~django.template.response.TemplateResponse` accepted "
":class:`django.template.Context` and :class:`django.template.Template` "
"objects as arguments. They should now receive :class:`dict` and backend-"
"dependent template objects respectively."
msgstr ""

# e952f71a7e9c4f58994f5ba34f370e10
#: ../../../../1.9/docs/releases/1.8.txt:1535
msgid ""
"This also applies to the return types if you have subclassed either template"
" response class."
msgstr ""

# e41b1a99057c4ed493f610ff9b0471c4
#: ../../../../1.9/docs/releases/1.8.txt:1538
msgid ""
"Check the :doc:`template response API documentation </ref/template-"
"response>` for details."
msgstr ""

# 202154b796164edfaf022d8f5d1314cd
#: ../../../../1.9/docs/releases/1.8.txt:1542
msgid "``current_app`` argument of template-related APIs"
msgstr ""

# 37634097bead41d493b6fa85cbd80009
#: ../../../../1.9/docs/releases/1.8.txt:1544
msgid ""
"The following functions and classes will no longer accept a ``current_app`` "
"parameter to set an URL namespace in Django 1.10:"
msgstr ""

# 8f9508ee33734283b1bbfb3097f6972e
# dbc4924fdf56416d9c8e04932e1b6cf8
#: ../../../../1.9/docs/releases/1.8.txt:1547
#: ../../../../1.9/docs/releases/1.8.txt:1562
msgid "``django.shortcuts.render()``"
msgstr ""

# 8ee945f7ba7d42de8466b58438af66cb
#: ../../../../1.9/docs/releases/1.8.txt:1548
msgid "``django.template.Context()``"
msgstr ""

# 45c21796f3354e02b3ac28b0d141b61d
#: ../../../../1.9/docs/releases/1.8.txt:1549
msgid "``django.template.RequestContext()``"
msgstr ""

# 5d934843fa0941a48c8d88449be03dcb
#: ../../../../1.9/docs/releases/1.8.txt:1550
msgid "``django.template.response.TemplateResponse()``"
msgstr ""

# 3dad5673943a402aae02a70cc174e560
#: ../../../../1.9/docs/releases/1.8.txt:1552
msgid ""
"Set ``request.current_app`` instead, where ``request`` is the first argument"
" to these functions or classes. If you're using a plain ``Context``, use a "
"``RequestContext`` instead."
msgstr ""

# 5a46d3a66a0d4cbc9eac3321d70ff95b
#: ../../../../1.9/docs/releases/1.8.txt:1557
msgid ""
"``dictionary`` and ``context_instance`` arguments of rendering functions"
msgstr ""

# a8d0cac1107e44a0bf7c09dcbe979f58
#: ../../../../1.9/docs/releases/1.8.txt:1559
msgid ""
"The following functions will no longer accept the ``dictionary`` and "
"``context_instance`` parameters in Django 1.10:"
msgstr ""

# 6077505109264ebda6747740f8df156e
#: ../../../../1.9/docs/releases/1.8.txt:1564
msgid "``django.template.loader.render_to_string()``"
msgstr ""

# 4129fdaa74cc4a299413d5fceda665f9
#: ../../../../1.9/docs/releases/1.8.txt:1566
msgid ""
"Use the ``context`` parameter instead. When ``dictionary`` is passed as a "
"positional argument, which is the most common idiom, no changes are needed."
msgstr ""

# cfbf8742cf5d4bd5b4ed7956f5c49d40
#: ../../../../1.9/docs/releases/1.8.txt:1569
msgid ""
"If you're passing a :class:`~django.template.Context` in "
"``context_instance``, pass a :class:`dict` in the ``context`` parameter "
"instead. If you're passing a :class:`~django.template.RequestContext`, pass "
"the request separately in the ``request`` parameter."
msgstr ""

# 5f380e05d14a48ca903b7121b29f546b
#: ../../../../1.9/docs/releases/1.8.txt:1574
msgid ""
"If you're using ``context_instance=RequestContext(request))`` with "
"``render_to_response()``, use :func:`django.shortcuts.render`, which always "
"makes ``RequestContext`` available, instead. For example::"
msgstr ""

# d704d1ab436c492599ebd2d97775333a
#: ../../../../1.9/docs/releases/1.8.txt:1588
msgid "``dirs`` argument of template-finding functions"
msgstr ""

# 50ce79038b0c43a6bac56b5fc88d5227
#: ../../../../1.9/docs/releases/1.8.txt:1590
msgid ""
"The following functions will no longer accept a ``dirs`` parameter to "
"override ``TEMPLATE_DIRS`` in Django 1.10:"
msgstr ""

# 73634c47759343ec84811528806b38e0
#: ../../../../1.9/docs/releases/1.8.txt:1598
msgid ""
"The parameter didn't work consistently across different template loaders and"
" didn't work for included templates."
msgstr ""

# f7acb82df290475f8bd258343bc2d84c
#: ../../../../1.9/docs/releases/1.8.txt:1602
msgid "``django.template.loader.BaseLoader``"
msgstr ""

# 3ef23ebad81d4177ac5f915b1b362c34
#: ../../../../1.9/docs/releases/1.8.txt:1604
msgid ""
"``django.template.loader.BaseLoader`` was renamed to "
"``django.template.loaders.base.Loader``. If you've written a custom template"
" loader that inherits ``BaseLoader``, you must inherit ``Loader`` instead."
msgstr ""

# a9d273a0b07d458f924bef43e6a73f8a
#: ../../../../1.9/docs/releases/1.8.txt:1609
msgid "``django.test.utils.TestTemplateLoader``"
msgstr ""

# e87f5ae6bf29434c98812d6130690e77
#: ../../../../1.9/docs/releases/1.8.txt:1611
msgid ""
"Private API ``django.test.utils.TestTemplateLoader`` is deprecated in favor "
"of ``django.template.loaders.locmem.Loader`` and will be removed in Django "
"1.9."
msgstr ""

# 7301b43917ec4fb0b43d161dea7c3072
#: ../../../../1.9/docs/releases/1.8.txt:1617
msgid "Support for the ``max_length`` argument on custom ``Storage`` classes"
msgstr ""

# 8192e6abe0984023bd0918bbbfcb29d4
#: ../../../../1.9/docs/releases/1.8.txt:1619
msgid ""
"``Storage`` subclasses should add ``max_length=None`` as a parameter to "
":meth:`~django.core.files.storage.Storage.get_available_name` and/or "
":meth:`~django.core.files.storage.Storage.save` if they override either "
"method. Support for storages that do not accept this argument will be "
"removed in Django 1.10."
msgstr ""

# f5d30f7b56464632ad8308961ee3aa15
#: ../../../../1.9/docs/releases/1.8.txt:1626
msgid "``qn`` replaced by ``compiler``"
msgstr ""

# 4c31de3554b74fca926eb9ab7e9adb4f
#: ../../../../1.9/docs/releases/1.8.txt:1628
msgid ""
"In previous Django versions, various internal ORM methods (mostly ``as_sql``"
" methods) accepted a ``qn`` (for \"quote name\") argument, which was a "
"reference to a function that quoted identifiers for sending to the database."
" In Django 1.8, that argument has been renamed to ``compiler`` and is now a "
"full ``SQLCompiler`` instance. For backwards-compatibility, calling a "
"``SQLCompiler`` instance performs the same name-quoting that the ``qn`` "
"function used to. However, this backwards-compatibility shim is immediately "
"deprecated: you should rename your ``qn`` arguments to ``compiler``, and "
"call ``compiler.quote_name_unless_alias(...)`` where you previously called "
"``qn(...)``."
msgstr ""

# cb81f0c0682f438bb3197472b8d5819a
#: ../../../../1.9/docs/releases/1.8.txt:1640
msgid "Default value of ``RedirectView.permanent``"
msgstr ""

# 60f73a0fccbd49e8963db0ef93ba4dad
#: ../../../../1.9/docs/releases/1.8.txt:1642
msgid ""
"The default value of the :attr:`RedirectView.permanent "
"<django.views.generic.base.RedirectView.permanent>` attribute will change "
"from ``True`` to ``False`` in Django 1.9."
msgstr ""

# f052bfc7c62a476eb701854abebfd9fd
#: ../../../../1.9/docs/releases/1.8.txt:1647
msgid ""
"Using ``AuthenticationMiddleware`` without "
"``SessionAuthenticationMiddleware``"
msgstr ""

# c7ab7231d6ca420483da6f12b3d7f869
#: ../../../../1.9/docs/releases/1.8.txt:1649
msgid ""
":class:`django.contrib.auth.middleware.SessionAuthenticationMiddleware` was "
"added in Django 1.7. In Django 1.7.2, its functionality was moved to "
"``auth.get_user()`` and, for backwards compatibility, enabled only if "
"``'django.contrib.auth.middleware.SessionAuthenticationMiddleware'`` appears"
" in :setting:`MIDDLEWARE_CLASSES`."
msgstr ""

# 844a644bf3a7432c8e128876e31307f9
#: ../../../../1.9/docs/releases/1.8.txt:1655
msgid ""
"In Django 1.10, session verification will be enabled regardless of whether "
"or not ``SessionAuthenticationMiddleware`` is enabled (at which point "
"``SessionAuthenticationMiddleware`` will have no significance). You can add "
"it to your ``MIDDLEWARE_CLASSES`` sometime before then to opt-in. Please "
"read the :ref:`upgrade considerations <session-invalidation-on-password-"
"change>` first."
msgstr ""

# 959cbb686b3143c8875aaa7e5e1a42ba
#: ../../../../1.9/docs/releases/1.8.txt:1662
msgid "``django.contrib.sitemaps.FlatPageSitemap``"
msgstr ""

# ec68402b145847c0a900d58eb319c34b
#: ../../../../1.9/docs/releases/1.8.txt:1664
msgid ""
"``django.contrib.sitemaps.FlatPageSitemap`` has moved to "
"``django.contrib.flatpages.sitemaps.FlatPageSitemap``. The old import "
"location is deprecated and will be removed in Django 1.9."
msgstr ""

# 5e61688d60ef49339cb5347e84e64fbe
#: ../../../../1.9/docs/releases/1.8.txt:1669
msgid "Model ``Field.related``"
msgstr ""

# 5741e2c18b524e549ace11f75f3cae4c
#: ../../../../1.9/docs/releases/1.8.txt:1671
msgid ""
"Private attribute ``django.db.models.Field.related`` is deprecated in favor "
"of ``Field.rel``.  The latter is an instance of "
"``django.db.models.fields.related.ForeignObjectRel`` which replaces "
"``django.db.models.related.RelatedObject``. The ``django.db.models.related``"
" module has been removed and the ``Field.related`` attribute will be removed"
" in Django 1.10."
msgstr ""

# 09d3dbd34f164a8f83ac354189fea93e
#: ../../../../1.9/docs/releases/1.8.txt:1679
msgid "``ssi`` template tag"
msgstr ""

# 0c27f9f4c9204306ac8337cb15359045
#: ../../../../1.9/docs/releases/1.8.txt:1681
msgid ""
"The :ttag:`ssi` template tag allows files to be included in a template by "
"absolute path. This is of limited use in most deployment situations, and the"
" :ttag:`include` tag often makes more sense. This tag is now deprecated and "
"will be removed in Django 1.10."
msgstr ""

# 5809078627d647ffb74988dd30376dac
#: ../../../../1.9/docs/releases/1.8.txt:1687
msgid "``=`` as comparison operator in ``if`` template tag"
msgstr ""

# 7fd98672f5874732a591b87348fcec7f
#: ../../../../1.9/docs/releases/1.8.txt:1689
msgid ""
"Using a single equals sign with the ``{% if %}`` template tag for equality "
"testing was undocumented and untested. It's now deprecated in favor of "
"``==``."
msgstr ""

# 945ceda84b87417296b9499bd833f290
#: ../../../../1.9/docs/releases/1.8.txt:1693
msgid "``%(<foo>)s`` syntax in ``ModelFormMixin.success_url``"
msgstr ""

# 93d820d616a641149472e883c2c71aa3
#: ../../../../1.9/docs/releases/1.8.txt:1695
msgid ""
"The legacy ``%(<foo>)s`` syntax in :attr:`ModelFormMixin.success_url "
"<django.views.generic.edit.ModelFormMixin.success_url>` is deprecated and "
"will be removed in Django 1.10."
msgstr ""

# a56173f9c52e476bbede5b8f11f1ae98
#: ../../../../1.9/docs/releases/1.8.txt:1700
msgid "``GeoQuerySet`` aggregate methods"
msgstr ""

# 9a94c80c888948a9849fab2a8994bc7e
#: ../../../../1.9/docs/releases/1.8.txt:1702
msgid ""
"The ``collect()``, ``extent()``, ``extent3d()``, ``make_line()``, and "
"``unionagg()`` aggregate methods are deprecated and should be replaced by "
"their function-based aggregate equivalents (``Collect``, ``Extent``, "
"``Extent3D``, ``MakeLine``, and ``Union``)."
msgstr ""

# 4881ff9550b74da5aaa3d3e7dd520f42
#: ../../../../1.9/docs/releases/1.8.txt:1710
msgid "Signature of the ``allow_migrate`` router method"
msgstr ""

# efa363f9525e402196e9bc3da73e2974
#: ../../../../1.9/docs/releases/1.8.txt:1712
msgid ""
"The signature of the :meth:`allow_migrate` method of database routers has "
"changed from ``allow_migrate(db, model)`` to ``allow_migrate(db, app_label, "
"model_name=None, **hints)``."
msgstr ""

# 17df08fe19444f2c83393d1ed4b136e3
#: ../../../../1.9/docs/releases/1.8.txt:1716
msgid ""
"When ``model_name`` is set, the value that was previously given through the "
"``model`` positional argument may now be found inside the ``hints`` "
"dictionary under the key ``'model'``."
msgstr ""

# e06abb228b684becbd84efbd02abbdca
#: ../../../../1.9/docs/releases/1.8.txt:1720
msgid ""
"After switching to the new signature the router will also be called by the "
":class:`~django.db.migrations.operations.RunPython` and "
":class:`~django.db.migrations.operations.RunSQL` operations."
msgstr ""

# 34f85d5c8f0c46048bc3b3eaea120a43
#: ../../../../1.9/docs/releases/1.8.txt:1727
msgid "Features removed in 1.8"
msgstr ""

# 122c6638431b44efb5013ce265576450
#: ../../../../1.9/docs/releases/1.8.txt:1729
msgid ""
"These features have reached the end of their deprecation cycle and so have "
"been removed in Django 1.8 (please see the :ref:`deprecation timeline "
"<deprecation-removed-in-1.8>` for more details):"
msgstr ""

# 7c29314d37dd471c965990677512bb02
#: ../../../../1.9/docs/releases/1.8.txt:1733
msgid "``django.contrib.comments`` is removed."
msgstr ""

# 87bb00e2c2a9418181686fddf019629b
#: ../../../../1.9/docs/releases/1.8.txt:1735
msgid "The following transaction management APIs are removed:"
msgstr ""

# 6bba95ec2fcd4653a93ca281c274a088
#: ../../../../1.9/docs/releases/1.8.txt:1737
msgid "``TransactionMiddleware``"
msgstr ""

# f0ae4dc99d864afd9dd4524ce2ee7d04
#: ../../../../1.9/docs/releases/1.8.txt:1738
msgid ""
"the decorators and context managers ``autocommit``, ``commit_on_success``, "
"and ``commit_manually``, defined in ``django.db.transaction``"
msgstr ""

# 5c29f269582142df8a0bb42366c0c14e
#: ../../../../1.9/docs/releases/1.8.txt:1740
msgid ""
"the functions ``commit_unless_managed`` and ``rollback_unless_managed``, "
"also defined in ``django.db.transaction``"
msgstr ""

# 69c1cf53e02e40019835ef78ea926742
#: ../../../../1.9/docs/releases/1.8.txt:1744
msgid ""
"The :ttag:`cycle` and :ttag:`firstof` template tags auto-escape their "
"arguments."
msgstr ""

# 78ca284588c54a85b61e9773199d2702
#: ../../../../1.9/docs/releases/1.8.txt:1747
msgid "The ``SEND_BROKEN_LINK_EMAILS`` setting is removed."
msgstr ""

# 52a03649333b4ec5b6fa2187d56e1411
#: ../../../../1.9/docs/releases/1.8.txt:1749
msgid "``django.middleware.doc.XViewMiddleware`` is removed."
msgstr ""

# d4f0f9d3307640168620a765d9e3644f
#: ../../../../1.9/docs/releases/1.8.txt:1751
msgid "The ``Model._meta.module_name`` alias is removed."
msgstr ""

# fd2efe1678c1494ca7af21c8e527f483
#: ../../../../1.9/docs/releases/1.8.txt:1753
msgid ""
"The backward compatible shims introduced to rename ``get_query_set`` and "
"similar queryset methods are removed. This affects the following classes: "
"``BaseModelAdmin``, ``ChangeList``, ``BaseCommentNode``, "
"``GenericForeignKey``, ``Manager``, ``SingleRelatedObjectDescriptor`` and "
"``ReverseSingleRelatedObjectDescriptor``."
msgstr ""

# 0ad2d1d131f046658eff7c48839cd5fd
#: ../../../../1.9/docs/releases/1.8.txt:1759
msgid ""
"The backward compatible shims introduced to rename the attributes "
"``ChangeList.root_query_set`` and ``ChangeList.query_set`` are removed."
msgstr ""

# 5c1227ca7d4d49438717c8e6bc71cac9
#: ../../../../1.9/docs/releases/1.8.txt:1762
msgid ""
"``django.views.defaults.shortcut`` and ``django.conf.urls.shortcut`` are "
"removed."
msgstr ""

# 957f45278f6f435e86ad88814b432852
#: ../../../../1.9/docs/releases/1.8.txt:1765
msgid "Support for the Python Imaging Library (PIL) module is removed."
msgstr ""

# 6a3292bc95ca4c6aa21e1452cef2da4c
#: ../../../../1.9/docs/releases/1.8.txt:1767
msgid "The following private APIs are removed:"
msgstr ""

# 00ab7cfa40cf417ea6324bb7d6a61864
#: ../../../../1.9/docs/releases/1.8.txt:1769
msgid "``django.db.backend``"
msgstr ""

# d66a2e52f67249ff8179ce7480ab3e76
#: ../../../../1.9/docs/releases/1.8.txt:1770
msgid "``django.db.close_connection()``"
msgstr ""

# 38aac20a0b1a4fe4b9f8528c0c48c2ae
#: ../../../../1.9/docs/releases/1.8.txt:1771
msgid "``django.db.backends.creation.BaseDatabaseCreation.set_autocommit()``"
msgstr ""

# a487daa93be04981bea9c1a4a95a0938
#: ../../../../1.9/docs/releases/1.8.txt:1772
msgid "``django.db.transaction.is_managed()``"
msgstr ""

# 100fb1169214449586ee3400f16598a0
#: ../../../../1.9/docs/releases/1.8.txt:1773
msgid "``django.db.transaction.managed()``"
msgstr ""

# b311135c85114d508af1f802867931c5
#: ../../../../1.9/docs/releases/1.8.txt:1775
msgid "``django.forms.widgets.RadioInput`` is removed."
msgstr ""

# 1f89db2511e54c619638102c4d8cfb58
#: ../../../../1.9/docs/releases/1.8.txt:1777
msgid ""
"The module ``django.test.simple`` and the class "
"``django.test.simple.DjangoTestSuiteRunner`` are removed."
msgstr ""

# c0961124d0ac421484b4f77179e3787f
#: ../../../../1.9/docs/releases/1.8.txt:1780
msgid "The module ``django.test._doctest`` is removed."
msgstr ""

# ff65f7853af84ad0a0bda7d8786a7033
#: ../../../../1.9/docs/releases/1.8.txt:1782
msgid ""
"The ``CACHE_MIDDLEWARE_ANONYMOUS_ONLY`` setting is removed. This change "
"affects both ``django.middleware.cache.CacheMiddleware`` and "
"``django.middleware.cache.UpdateCacheMiddleware`` despite the lack of a "
"deprecation warning in the latter class."
msgstr ""

# a7e344163b214aa6b49fb1252959ef14
#: ../../../../1.9/docs/releases/1.8.txt:1787
msgid ""
"Usage of the hard-coded *Hold down \"Control\", or \"Command\" on a Mac, to "
"select more than one.* string to override or append to user-provided "
"``help_text`` in forms for ``ManyToMany`` model fields is not performed by "
"Django anymore either at the model or forms layer."
msgstr ""

# 25db6d6620054228befd4e33498b4b4f
#: ../../../../1.9/docs/releases/1.8.txt:1792
msgid ""
"The ``Model._meta.get_(add|change|delete)_permission`` methods are removed."
msgstr ""

# bf2dba49ad964d55acac0d972c2cdcec
#: ../../../../1.9/docs/releases/1.8.txt:1794
msgid ""
"The session key ``django_language`` is no longer read for backwards "
"compatibility."
msgstr ""

# f7ccc21a260c4036a41de192e325200e
#: ../../../../1.9/docs/releases/1.8.txt:1797
msgid ""
"Geographic Sitemaps are removed (``django.contrib.gis.sitemaps.views.index``"
" and ``django.contrib.gis.sitemaps.views.sitemap``)."
msgstr ""

# d892e5cf9fb74814a31677393cbf8d87
#: ../../../../1.9/docs/releases/1.8.txt:1801
msgid ""
"``django.utils.html.fix_ampersands``, the ``fix_ampersands`` template "
"filter, and ``django.utils.html.clean_html`` are removed."
msgstr ""

# e0c359d7ad0b439ab0aeb71aff25e0d6
#: ../../../../1.9/docs/releases/1.8.1.txt:3
msgid "Django 1.8.1 release notes"
msgstr ""

# b3efedbaf6e743bd930297497e53a1aa
#: ../../../../1.9/docs/releases/1.8.1.txt:7
msgid ""
"Django 1.8.1 fixes several bugs in 1.8 and includes some optimizations in "
"the migrations framework."
msgstr ""

# 600081a0f82a4500ad48360b90a18850
#: ../../../../1.9/docs/releases/1.8.1.txt:13
msgid ""
"Added support for serializing :class:`~datetime.timedelta` objects in "
"migrations (:ticket:`24566`)."
msgstr ""

# c0fb30281c154b238a0c1b036565d283
#: ../../../../1.9/docs/releases/1.8.1.txt:16
msgid ""
"Restored proper parsing of the :djadmin:`testserver` command's positional "
"arguments (fixture names) (:ticket:`24571`)."
msgstr ""

# ef3343c6cf784895864ffce30df87999
#: ../../../../1.9/docs/releases/1.8.1.txt:19
msgid ""
"Prevented ``TypeError`` in translation functions ``check_for_language()`` "
"and ``get_language_bidi()`` when translations are deactivated "
"(:ticket:`24569`)."
msgstr ""

# fb1c5c11a7d7445d9217bdc2177a7d7a
#: ../../../../1.9/docs/releases/1.8.1.txt:22
msgid ""
"Fixed :djadmin:`squashmigrations` command when using "
":class:`~django.db.migrations.operations.SeparateDatabaseAndState` "
"(:ticket:`24278`)."
msgstr ""

# 722e9c4a098a413085eec9402fffc749
#: ../../../../1.9/docs/releases/1.8.1.txt:26
msgid ""
"Stripped microseconds from ``datetime`` values when using an older version "
"of the MySQLdb DB API driver as it does not support fractional seconds "
"(:ticket:`24584`)."
msgstr ""

# b1d070519042464fae720394319036ac
#: ../../../../1.9/docs/releases/1.8.1.txt:30
msgid ""
"Fixed a migration crash when altering "
":class:`~django.db.models.ManyToManyField`\\s (:ticket:`24513`)."
msgstr ""

# 78de53c6d6ad4bb8bb80285f766725fa
#: ../../../../1.9/docs/releases/1.8.1.txt:33
msgid ""
"Fixed a crash with ``QuerySet.update()`` on foreign keys to one-to-one "
"fields (:ticket:`24578`)."
msgstr ""

# 38b147f32b7b48819544ed619119c3d7
#: ../../../../1.9/docs/releases/1.8.1.txt:36
msgid ""
"Fixed a regression in the model detail view of "
":mod:`~django.contrib.admindocs` when a model has a reverse foreign key "
"relation (:ticket:`24624`)."
msgstr ""

# 00a1f437e158483d92dd6400462abdf0
#: ../../../../1.9/docs/releases/1.8.1.txt:40
msgid ""
"Prevented arbitrary file inclusions in :mod:`~django.contrib.admindocs` "
"(:ticket:`24625`)."
msgstr ""

# 2be4f6d6bad147fa97e4af1e77a0c600
#: ../../../../1.9/docs/releases/1.8.1.txt:43
msgid ""
"Fixed a crash with ``QuerySet.update()`` on foreign keys to instances with "
"``uuid`` primary keys (:ticket:`24611`)."
msgstr ""

# 15024d1f21bb4c09a7577d1a44e722f3
#: ../../../../1.9/docs/releases/1.8.1.txt:46
msgid ""
"Fixed database introspection with SQLite 3.8.9 (released April 8, 2015) "
"(:ticket:`24637`)."
msgstr ""

# 33a67a80fa2041a9b239a1a98561d069
#: ../../../../1.9/docs/releases/1.8.1.txt:49
msgid ""
"Updated ``urlpatterns`` examples generated by :djadmin:`startproject` to "
"remove usage of referencing views by dotted path in "
":func:`~django.conf.urls.url` which is deprecated in Django 1.8 "
"(:ticket:`24635`)."
msgstr ""

# b781dc7b9f674e7a93cea14ce8ae184f
#: ../../../../1.9/docs/releases/1.8.1.txt:54
msgid ""
"Fixed queries where an expression was referenced in ``order_by()``, but "
"wasn't part of the select clause. An example query is "
"``qs.annotate(foo=F('field')).values('pk').order_by('foo'))`` "
"(:ticket:`24615`)."
msgstr ""

# 21ebf315807c4cf7839180ea5e67bb99
#: ../../../../1.9/docs/releases/1.8.1.txt:58
msgid "Fixed a database table name quoting regression (:ticket:`24605`)."
msgstr ""

# 39bb775bd5fa4bd0a48d556c021d2c8f
#: ../../../../1.9/docs/releases/1.8.1.txt:60
msgid ""
"Prevented the loss of ``null``/``not null`` column properties during field "
"alteration of MySQL databases (:ticket:`24595`)."
msgstr ""

# 3f2c8b2577d042c09f2fa7dd01d0f251
#: ../../../../1.9/docs/releases/1.8.1.txt:63
msgid ""
"Fixed JavaScript path of ``contrib.admin``’s related field widget when using"
" alternate static file storages (:ticket:`24655`)."
msgstr ""

# 393339856c844da5a20fa709472fb603
#: ../../../../1.9/docs/releases/1.8.1.txt:66
msgid ""
"Fixed a migration crash when adding new relations to models "
"(:ticket:`24573`)."
msgstr ""

# 36f8441b9e8f487a97927157a23222d0
#: ../../../../1.9/docs/releases/1.8.1.txt:69
msgid ""
"Fixed a migration crash when applying migrations with model managers on "
"Python 3 that were generated on Python 2 (:ticket:`24701`)."
msgstr ""

# 6b942d30f97544d9af46699346d20223
#: ../../../../1.9/docs/releases/1.8.1.txt:72
msgid ""
"Restored the ability to use iterators as queryset filter arguments "
"(:ticket:`24719`)."
msgstr ""

# b5fa1f20502e43d7a52fb0afdce7e96e
#: ../../../../1.9/docs/releases/1.8.1.txt:75
msgid ""
"Fixed a migration crash when renaming the target model of a many-to-many "
"relation (:ticket:`24725`)."
msgstr ""

# 53fa5320f94f4c118ece7c26a01d7d6f
#: ../../../../1.9/docs/releases/1.8.1.txt:78
msgid ""
"Removed flushing of the test database with :djadminopt:`--keepdb`, which "
"prevented apps with data migrations from using the option (:ticket:`24729`)."
msgstr ""

# 87c6c1e2cfdb45fcbce46ffe062b3dd0
#: ../../../../1.9/docs/releases/1.8.1.txt:81
msgid "Fixed ``makemessages`` crash in some locales (:ticket:`23271`)."
msgstr ""

# fcca5587db5446928d9b73a76c97e055
#: ../../../../1.9/docs/releases/1.8.1.txt:83
msgid ""
"Fixed help text positioning of ``contrib.admin`` fields that use the "
"``ModelAdmin.filter_horizontal`` and ``filter_vertical`` options "
"(:ticket:`24676`)."
msgstr ""

# c9dc0fffdd964d00b21e807afd01dda0
#: ../../../../1.9/docs/releases/1.8.1.txt:87
msgid ""
"Fixed `AttributeError: function 'GDALAllRegister' not found` error when "
"initializing ``contrib.gis`` on Windows."
msgstr ""

# eea13b3a895340e291722ad136f4797a
#: ../../../../1.9/docs/releases/1.8.1.txt:91
msgid "Optimizations"
msgstr ""

# b09ca9b63e04493db65cf499e0b4c549
#: ../../../../1.9/docs/releases/1.8.1.txt:93
msgid ""
"Changed ``ModelState`` to deepcopy fields instead of deconstructing and "
"reconstructing (:ticket:`24591`). This speeds up the rendering of model "
"states and reduces memory usage when running :djadmin:`manage.py migrate "
"<migrate>` (although other changes in this release may negate any "
"performance benefits)."
msgstr ""

# 72077315865f4c7ebbc875a0717126f2
#: ../../../../1.9/docs/releases/1.8.2.txt:3
msgid "Django 1.8.2 release notes"
msgstr ""

# 4b550e01f5c840fbae0c9cd12c36dea5
#: ../../../../1.9/docs/releases/1.8.2.txt:5
msgid "*May 20, 2015*"
msgstr ""

# a23c15b2326a420cbb3b9473733d03a2
#: ../../../../1.9/docs/releases/1.8.2.txt:7
msgid "Django 1.8.2 fixes a security issue and several bugs in 1.8.1."
msgstr ""

# f9ad61d00cf64695b5e96f2ec90eb4f8
#: ../../../../1.9/docs/releases/1.8.2.txt:10
msgid "Fixed session flushing in the ``cached_db`` backend"
msgstr ""

# 09a5c17aec8947dd903f4b7aa3a88527
#: ../../../../1.9/docs/releases/1.8.2.txt:12
msgid ""
"A change to ``session.flush()`` in the ``cached_db`` session backend in "
"Django 1.8 mistakenly sets the session key to an empty string rather than "
"``None``. An empty string is treated as a valid session key and the session "
"cookie is set accordingly. Any users with an empty string in their session "
"cookie will use the same session store. ``session.flush()`` is called by "
"``django.contrib.auth.logout()`` and, more seriously, by "
"``django.contrib.auth.login()`` when a user switches accounts. If a user is "
"logged in and logs in again to a different account (without logging out) the"
" session is flushed to avoid reuse. After the session is flushed (and its "
"session key becomes ``''``) the account details are set on the session and "
"the session is saved. Any users with an empty string in their session cookie"
" will now be logged into that account."
msgstr ""

# c9827694012345aeb4be2157afb8c0a0
#: ../../../../1.9/docs/releases/1.8.2.txt:28
msgid "Fixed check for template engine alias uniqueness (:ticket:`24685`)."
msgstr ""

# fb05e752c63c4e35b3b786c6f893022b
#: ../../../../1.9/docs/releases/1.8.2.txt:30
msgid ""
"Fixed crash when reusing the same ``Case`` instance in a query "
"(:ticket:`24752`)."
msgstr ""

# d53cdadfb4d04947a646a29afac0571d
#: ../../../../1.9/docs/releases/1.8.2.txt:33
msgid ""
"Corrected join promotion for ``Case`` expressions. For example, annotating a"
" query with a  ``Case`` expression could unexpectedly filter out results "
"(:ticket:`24766`)."
msgstr ""

# 837eafd0886945f8ac2ad110feccaa9b
#: ../../../../1.9/docs/releases/1.8.2.txt:37
msgid ""
"Fixed negated ``Q`` objects in expressions. Cases like "
"``Case(When(~Q(friends__age__lte=30)))`` tried to generate a subquery which "
"resulted in a crash (:ticket:`24705`)."
msgstr ""

# 45fe59c1939041d780de535abbee543b
#: ../../../../1.9/docs/releases/1.8.2.txt:41
msgid ""
"Fixed incorrect GROUP BY clause generation on MySQL when the query's model "
"has a self-referential foreign key (:ticket:`24748`)."
msgstr ""

# 0ddce23711004a61baf9aa1c7afc4425
#: ../../../../1.9/docs/releases/1.8.2.txt:44
msgid ""
"Implemented ``ForeignKey.get_db_prep_value()`` so that ``ForeignKey``\\s "
"pointing to :class:`~django.db.models.UUIDField` and inheritance on models "
"with ``UUIDField`` primary keys work correctly (:ticket:`24698`, "
":ticket:`24712`)."
msgstr ""

# ab1fb59f37324194b95f8d7a4b3d9270
#: ../../../../1.9/docs/releases/1.8.2.txt:49
msgid "Fixed ``isnull`` lookup for ``HStoreField`` (:ticket:`24751`)."
msgstr ""

# f3a26b003b584c01b881dbf61b9c97f8
#: ../../../../1.9/docs/releases/1.8.2.txt:51
msgid ""
"Fixed a MySQL crash when a migration removes a combined index "
"(unique_together or index_together) containing a foreign key "
"(:ticket:`24757`)."
msgstr ""

# c6f0038a2bfd4cae9f7f9179e606bd0d
#: ../../../../1.9/docs/releases/1.8.2.txt:54
msgid ""
"Fixed session cookie deletion when using :setting:`SESSION_COOKIE_DOMAIN` "
"(:ticket:`24799`)."
msgstr ""

# 7f72ec441fdc4fe7bf8d754e8651ed04
#: ../../../../1.9/docs/releases/1.8.2.txt:57
msgid ""
"On PostgreSQL, when no access is granted for the ``postgres`` database, "
"Django now falls back to the default database when it normally requires a "
"\"no database\" connection (:ticket:`24791`)."
msgstr ""

# d80cc80d47db4cc28259f1aa1cac1440
#: ../../../../1.9/docs/releases/1.8.2.txt:61
msgid ""
"Fixed display of ``contrib.admin``’s ``ForeignKey`` widget when it's used in"
" a row with other fields (:ticket:`24784`)."
msgstr ""

# 140ea0b9a2684243a83d5fb94e08f16b
#: ../../../../1.9/docs/releases/1.8.3.txt:3
msgid "Django 1.8.3 release notes"
msgstr ""

# 095dfc435ea04e5aa61a00952e5625c1
#: ../../../../1.9/docs/releases/1.8.3.txt:7
msgid "Django 1.8.3 fixes several security issues and bugs in 1.8.2."
msgstr ""

# a5496f7a7c9d4baa80b15574dee8aa92
#: ../../../../1.9/docs/releases/1.8.3.txt:9
msgid ""
"Also, ``django.utils.deprecation.RemovedInDjango20Warning`` was renamed to "
"``RemovedInDjango110Warning`` as the version roadmap was revised to 1.9, "
"1.10, 1.11 (LTS), 2.0 (drops Python 2 support). For backwards compatibility,"
" ``RemovedInDjango20Warning`` remains as an importable alias."
msgstr ""

# 0abcb610ff4e4d1a9eb5f95e2ce67c0d
#: ../../../../1.9/docs/releases/1.8.3.txt:64
msgid "Denial-of-service possibility in URL validation"
msgstr ""

# 380b632456114613b62f0bd21cd05ec2
#: ../../../../1.9/docs/releases/1.8.3.txt:66
msgid ""
":class:`~django.core.validators.URLValidator` included a regular expression "
"that was extremely slow to evaluate against certain invalid inputs. This "
"regular expression has been simplified and optimized."
msgstr ""

# ab780d161fc84d968446f2c008caa923
#: ../../../../1.9/docs/releases/1.8.3.txt:73
msgid ""
"Fixed ``BaseRangeField.prepare_value()`` to use each ``base_field``’s "
"``prepare_value()`` method (:ticket:`24841`)."
msgstr ""

# 97b4096b34e7412ea3497f952a5873ac
#: ../../../../1.9/docs/releases/1.8.3.txt:76
msgid ""
"Fixed crash during :djadmin:`makemigrations` if a migrations module either "
"is missing ``__init__.py`` or is a file (:ticket:`24848`)."
msgstr ""

# 1635afb0ac684108b747fc8691ed2913
#: ../../../../1.9/docs/releases/1.8.3.txt:79
msgid ""
"Fixed ``QuerySet.exists()`` returning incorrect results after annotation "
"with ``Count()`` (:ticket:`24835`)."
msgstr ""

# 110d4f8ca5054814b158a0ba290fbc72
#: ../../../../1.9/docs/releases/1.8.3.txt:82
msgid "Corrected ``HStoreField.has_changed()`` (:ticket:`24844`)."
msgstr ""

# 4444f6a5ef06416e9c10cacc50f09033
#: ../../../../1.9/docs/releases/1.8.3.txt:84
msgid ""
"Reverted an optimization to the CSRF template context processor which caused"
" a regression (:ticket:`24836`)."
msgstr ""

# a04df52071cb4ff2b870e81f4be8e800
#: ../../../../1.9/docs/releases/1.8.3.txt:87
msgid ""
"Fixed a regression which caused template context processors to overwrite "
"variables set on a ``RequestContext`` after it's created (:ticket:`24847`)."
msgstr ""

# 85f2553018c347c08d932aa32f4184dc
#: ../../../../1.9/docs/releases/1.8.3.txt:93
msgid ""
"Fixed a crash when using a reverse one-to-one relation in "
"``ModelAdmin.list_display`` (:ticket:`24851`)."
msgstr ""

# a85cad8cdb8142399ba5677200f606e2
#: ../../../../1.9/docs/releases/1.8.3.txt:96
msgid ""
"Fixed quoting of SQL when renaming a field to ``AutoField`` in PostgreSQL "
"(:ticket:`24892`)."
msgstr ""

# 422c6ab07f28445b89c0c051986d8ad0
#: ../../../../1.9/docs/releases/1.8.3.txt:99
msgid ""
"Fixed lack of unique constraint when changing a field from "
"``primary_key=True`` to ``unique=True`` (:ticket:`24893`)."
msgstr ""

# 34b1d4d74a0a4ecda30a6a4b44b4ab0a
#: ../../../../1.9/docs/releases/1.8.3.txt:102
msgid ""
"Fixed queryset pickling when using ``prefetch_related()`` after deleting "
"objects (:ticket:`24831`)."
msgstr ""

# 012a5be951f34046ad4289790e14fb36
#: ../../../../1.9/docs/releases/1.8.3.txt:105
msgid ""
"Allowed using ``choices`` longer than 1 day with ``DurationField`` "
"(:ticket:`24897`)."
msgstr ""

# 46cbabd16ca84a848da2b4bb0344e989
#: ../../../../1.9/docs/releases/1.8.3.txt:108
msgid ""
"Fixed a crash when loading squashed migrations from two apps with a "
"dependency between them, where the dependent app's replaced migrations are "
"partially applied (:ticket:`24895`)."
msgstr ""

# 3653615f7398486eb3ecfe074f7fb28c
#: ../../../../1.9/docs/releases/1.8.3.txt:112
msgid ""
"Fixed recording of applied status for squashed (replacement) migrations "
"(:ticket:`24628`)."
msgstr ""

# d76ed527b58c452a86f02525ad01f4a4
#: ../../../../1.9/docs/releases/1.8.3.txt:115
msgid ""
"Fixed queryset annotations when using ``Case`` expressions with "
"``exclude()`` (:ticket:`24833`)."
msgstr ""

# 0440077ba07c4626bb82a029ecd0f331
#: ../../../../1.9/docs/releases/1.8.3.txt:118
msgid ""
"Corrected join promotion for multiple ``Case`` expressions. Annotating a "
"query with multiple  ``Case`` expressions could unexpectedly filter out "
"results (:ticket:`24924`)."
msgstr ""

# 206ece3873574553822ee1382f70f37c
#: ../../../../1.9/docs/releases/1.8.3.txt:122
msgid "Fixed usage of transforms in subqueries (:ticket:`24744`)."
msgstr ""

# 164d28e0870642b3ba9d974abc299355
#: ../../../../1.9/docs/releases/1.8.3.txt:127
msgid ""
"Provided better backwards compatibility for the ``verbosity`` argument in "
"``optparse`` management commands by casting it to an integer "
"(:ticket:`24769`)."
msgstr ""

# acce840e570540d2a761cbd893684b27
#: ../../../../1.9/docs/releases/1.8.3.txt:131
msgid ""
"Fixed ``prefetch_related()`` on databases other than PostgreSQL for models "
"using UUID primary keys (:ticket:`24912`)."
msgstr ""

# 24e6711ae9554f25a678563c52df16f8
#: ../../../../1.9/docs/releases/1.8.3.txt:134
msgid ""
"Fixed removing ``unique_together`` constraints on MySQL (:ticket:`24972`)."
msgstr ""

# 9cf6c74f288c48688cfb3ddd20a63395
#: ../../../../1.9/docs/releases/1.8.3.txt:136
msgid ""
"Fixed crash when uploading images with MIME types that Pillow doesn't "
"detect, such as bitmap, in ``forms.ImageField`` (:ticket:`24948`)."
msgstr ""

# f5d1b04859474b8e995915616569239f
#: ../../../../1.9/docs/releases/1.8.3.txt:139
msgid ""
"Fixed a regression when deleting a model through the admin that has a "
"``GenericRelation`` with a ``related_query_name`` (:ticket:`24940`)."
msgstr ""

# 502d67165ead4f9690c2918b6030f7f9
#: ../../../../1.9/docs/releases/1.8.3.txt:142
msgid ""
"Reallowed non-ASCII values for ``ForeignKey.related_name`` on Python 3 by "
"fixing the false positive system check (:ticket:`25016`)."
msgstr ""

# 58321916ee28404194d8111d512a5563
#: ../../../../1.9/docs/releases/1.8.3.txt:145
msgid ""
"Fixed inline forms that use a parent object that has a ``UUIDField`` primary"
" key and a child object that has an ``AutoField`` primary key "
"(:ticket:`24958`)."
msgstr ""

# e4f34163905d422286f4b425580fe988
#: ../../../../1.9/docs/releases/1.8.3.txt:149
msgid ""
"Fixed a regression in the ``unordered_list`` template filter on certain "
"inputs (:ticket:`25031`)."
msgstr ""

# 95cfd76f1da24b6689e4fa88aafa8cd0
#: ../../../../1.9/docs/releases/1.8.3.txt:152
msgid ""
"Fixed a regression in ``URLValidator`` that invalidated Punycode TLDs "
"(:ticket:`25059`)."
msgstr ""

# c844035293eb431d87af29ff9067764c
#: ../../../../1.9/docs/releases/1.8.3.txt:155
msgid "Improved `pyinotify` ``runserver`` polling (:ticket:`23882`)."
msgstr ""

# 535132c47be04c8fb11955880a28b2d8
#: ../../../../1.9/docs/releases/1.8.4.txt:3
msgid "Django 1.8.4 release notes"
msgstr ""

# 5a8e92eaa7234723837a80c37b00b77b
#: ../../../../1.9/docs/releases/1.8.4.txt:7
msgid "Django 1.8.4 fixes a security issue and several bugs in 1.8.3."
msgstr ""

# 6b25f458c43c499c902fc23f28dc402f
#: ../../../../1.9/docs/releases/1.8.4.txt:26
msgid ""
"Added the ability to serialize values from the newly added "
":class:`~django.db.models.UUIDField` (:ticket:`25019`)."
msgstr ""

# 7810871731024800bb6895c1ec9851c4
#: ../../../../1.9/docs/releases/1.8.4.txt:29
msgid ""
"Added a system check warning if the old ``TEMPLATE_*`` settings are defined "
"in addition to the new ``TEMPLATES`` setting."
msgstr ""

# a937db12b9654f2d90f829c98048ac94
#: ../../../../1.9/docs/releases/1.8.4.txt:32
msgid ""
"Fixed ``QuerySet.raw()`` so ``InvalidQuery`` is not raised when using the "
"``db_column`` name of a ``ForeignKey`` field with ``primary_key=True`` "
"(:ticket:`12768`)."
msgstr ""

# 128c587a04684e80869d893b675f774b
#: ../../../../1.9/docs/releases/1.8.4.txt:36
msgid ""
"Prevented an exception in ``TestCase.setUpTestData()`` from leaking the "
"transaction (:ticket:`25176`)."
msgstr ""

# 8f53e1b4cacd470691ec2801f4dce49b
#: ../../../../1.9/docs/releases/1.8.4.txt:39
msgid ""
"Fixed ``has_changed()`` method in ``contrib.postgres.forms.HStoreField`` "
"(:ticket:`25215`, :ticket:`25233`)."
msgstr ""

# a02b5167a61f4a98992499b368e4c0fd
#: ../../../../1.9/docs/releases/1.8.4.txt:42
msgid ""
"Fixed the recording of squashed migrations when running the ``migrate`` "
"command (:ticket:`25231`)."
msgstr ""

# 09ab66420b964487989312431e4a9d03
#: ../../../../1.9/docs/releases/1.8.4.txt:45
msgid ""
"Moved the :ref:`unsaved model instance assignment data loss check <unsaved-"
"model-instance-check-18>` to ``Model.save()`` to allow easier usage of in-"
"memory models (:ticket:`25160`)."
msgstr ""

# 3dc3b4f30f074060b50ec4fd22366be9
#: ../../../../1.9/docs/releases/1.8.4.txt:49
msgid ""
"Prevented ``varchar_patterns_ops`` and ``text_patterns_ops`` indexes for "
"``ArrayField`` (:ticket:`25180`)."
msgstr ""

# 20801d6b64994299a09d9e058571422f
#: ../../../../1.9/docs/releases/1.8.5.txt:3
msgid "Django 1.8.5 release notes"
msgstr ""

# fa43ab6a636f4b80aac7e2e9f96ae11a
#: ../../../../1.9/docs/releases/1.8.5.txt:5
msgid "*October 3, 2015*"
msgstr ""

# e74b1d07b3334f7092a30e26199d6fd5
#: ../../../../1.9/docs/releases/1.8.5.txt:7
msgid "Django 1.8.5 fixes several bugs in 1.8.4."
msgstr ""

# e24c570e2b064d5087a2b89820cb22a8
#: ../../../../1.9/docs/releases/1.8.5.txt:12
msgid ""
"Made the development server's autoreload more robust (:ticket:`24704`)."
msgstr ""

# bbb6f082e6bb478d9c3b66f97e188b08
#: ../../../../1.9/docs/releases/1.8.5.txt:14
msgid ""
"Fixed ``AssertionError`` in some delete queries with a model containing a "
"field that is both a foreign and primary key (:ticket:`24951`)."
msgstr ""

# b1d37a6df4e64285bff75dcb57afd9b7
#: ../../../../1.9/docs/releases/1.8.5.txt:17
msgid "Fixed ``AssertionError`` in some complex queries (:ticket:`24525`)."
msgstr ""

# 9e3dd968ae0d4ffdbc733602af0af5c4
#: ../../../../1.9/docs/releases/1.8.5.txt:19
msgid "Fixed a migrations crash with ``GenericForeignKey`` (:ticket:`25040`)."
msgstr ""

# 4e76c53ed8d144d3961b957d13ee665e
#: ../../../../1.9/docs/releases/1.8.5.txt:21
msgid ""
"Made ``translation.override()`` clear the overridden language when a "
"translation isn't initially active (:ticket:`25295`)."
msgstr ""

# fbf5b025f45c422eb08783aff8ede015
#: ../../../../1.9/docs/releases/1.8.5.txt:24
msgid ""
"Fixed crash when using a value in ``ModelAdmin.list_display`` that clashed "
"with a reverse field on the model (:ticket:`25299`)."
msgstr ""

# 1793d699f3e94f27be9ee33ac2ca121c
#: ../../../../1.9/docs/releases/1.8.5.txt:27
msgid ""
"Fixed autocompletion for options of non-``argparse`` management commands "
"(:ticket:`25372`)."
msgstr ""

# de4b27b02e944c3082bf6cbee5eb5bd3
#: ../../../../1.9/docs/releases/1.8.5.txt:30
msgid ""
"Alphabetized ordering of imports in ``from django.db import migrations, "
"models`` statement in newly created migrations (:ticket:`25384`)."
msgstr ""

# 85bb79cda95f4eb38db8cc110b80d677
#: ../../../../1.9/docs/releases/1.8.5.txt:33
msgid ""
"Fixed migrations crash on MySQL when adding a text or a blob field with an "
"unhashable default (:ticket:`25393`)."
msgstr ""

# 8698dfd3312b47ab98c936e303ec4c47
#: ../../../../1.9/docs/releases/1.8.5.txt:36
msgid ""
"Changed ``Count`` queries to execute ``COUNT(*)`` instead of ``COUNT('*')`` "
"as versions of Django before 1.8 did (:ticket:`25377`). This may fix a "
"performance regression on some databases."
msgstr ""

# ba19d17761f045c88495ddb24886df80
#: ../../../../1.9/docs/releases/1.8.5.txt:40
msgid ""
"Fixed custom queryset chaining with ``values()`` and ``values_list()`` "
"(:ticket:`20625`)."
msgstr ""

# b7c7fccd0b2b488aa53557c320dea703
#: ../../../../1.9/docs/releases/1.8.5.txt:43
msgid ""
"Moved the :ref:`unsaved model instance assignment data loss check <unsaved-"
"model-instance-check-18>` on reverse relations to ``Model.save()`` "
"(:ticket:`25160`)."
msgstr ""

# 91601356b43b4e118421835e928ab40b
#: ../../../../1.9/docs/releases/1.8.5.txt:47
msgid ""
"Readded inline foreign keys to form instances when validating model formsets"
" (:ticket:`25431`)."
msgstr ""

# 1864b1351dde4f5fa79679c96e19bdc1
#: ../../../../1.9/docs/releases/1.8.5.txt:50
msgid ""
"Allowed using ORM write methods after disabling autocommit with "
":func:`set_autocommit(False) <django.db.transaction.set_autocommit>` "
"(:ticket:`24921`)."
msgstr ""

# b700ba5d911946b98a2dde963488519d
#: ../../../../1.9/docs/releases/1.8.5.txt:54
msgid ""
"Fixed the ``manage.py test --keepdb`` option on Oracle (:ticket:`25421`)."
msgstr ""

# 5e2d1e61aea84077a9d6a7ab000bc97b
#: ../../../../1.9/docs/releases/1.8.5.txt:56
msgid ""
"Fixed incorrect queries with multiple many-to-many fields on a model with "
"the same 'to' model and with ``related_name`` set to '+' (:ticket:`24505`, "
":ticket:`25486`)."
msgstr ""

# 232a597e491a46e695eff3ecc543eedc
#: ../../../../1.9/docs/releases/1.8.5.txt:60
msgid ""
"Fixed pickling a ``SimpleLazyObject`` wrapping a model (:ticket:`25389`)."
msgstr ""

# 16d20fd546c245469c27ceeb05a477de
#: ../../../../1.9/docs/releases/1.8.6.txt:3
msgid "Django 1.8.6 release notes"
msgstr ""

# 15c46d9f383e430883fb9c922fc061e9
#: ../../../../1.9/docs/releases/1.8.6.txt:5
msgid "*November 4, 2015*"
msgstr ""

# 1c07f56753404aae9e35c4f62bdba6e7
#: ../../../../1.9/docs/releases/1.8.6.txt:7
msgid ""
"Django 1.8.6 adds official support for Python 3.5 and fixes several bugs in "
"1.8.5."
msgstr ""

# 7f30fb80a91f45c3aecdfbf53721e0b2
#: ../../../../1.9/docs/releases/1.8.6.txt:13
msgid ""
"Fixed a regression causing ``ModelChoiceField`` to ignore "
"``prefetch_related()`` on its queryset (:ticket:`25496`)."
msgstr ""

# 8cd369efd0dd475cbd6d974bdae2f6e8
#: ../../../../1.9/docs/releases/1.8.6.txt:16
msgid ""
"Allowed \"mode=memory\" in SQLite test database name if supported "
"(:ticket:`12118`)."
msgstr ""

# bddbfb760d7448e89e88956c8de9e4ad
#: ../../../../1.9/docs/releases/1.8.6.txt:19
msgid ""
"Fixed system check crash on ``ForeignKey`` to abstract model "
"(:ticket:`25503`)."
msgstr ""

# 8937cbcc826b49168d8ece6a165c1978
#: ../../../../1.9/docs/releases/1.8.6.txt:22
msgid ""
"Fixed incorrect queries when you have multiple ``ManyToManyField``\\s on "
"different models that have the same field name, point to the same model, and"
" have their reverse relations disabled (:ticket:`25545`)."
msgstr ""

# 5f53beee00ab4863a3d67e123ec0da3c
#: ../../../../1.9/docs/releases/1.8.6.txt:26
msgid "Allowed filtering over a ``RawSQL`` annotation (:ticket:`25506`)."
msgstr ""

# fa29daf1892d4e75b434fed082d12eb8
#: ../../../../1.9/docs/releases/1.8.6.txt:28
msgid ""
"Made the ``Concat`` database function idempotent on SQLite "
"(:ticket:`25517`)."
msgstr ""

# 1489c52679784787bb7235fba9d1015e
#: ../../../../1.9/docs/releases/1.8.6.txt:30
msgid ""
"Avoided a confusing stack trace when starting :djadmin:`runserver` with an "
"invalid :setting:`INSTALLED_APPS` setting (:ticket:`25510`). This regression"
" appeared in 1.8.5 as a side effect of fixing :ticket:`24704`."
msgstr ""

# 7b617a507820431e98b3346cf25f2558
#: ../../../../1.9/docs/releases/1.8.6.txt:34
msgid ""
"Made deferred models use their proxied model's ``_meta.apps`` for caching "
"and retrieval (:ticket:`25563`). This prevents any models generated in data "
"migrations using ``QuerySet.defer()`` from leaking to test and application "
"code."
msgstr ""

# 6f68a665691849aabbb07357519cc75e
#: ../../../../1.9/docs/releases/1.8.6.txt:39
msgid ""
"Fixed a typo in the name of the `strictly_above` PostGIS lookup "
"(:ticket:`25592`)."
msgstr ""

# 9c8ac61f08ac4cbd8d807a8beffa0552
#: ../../../../1.9/docs/releases/1.8.6.txt:42
msgid ""
"Fixed crash with ``contrib.postgres.forms.SplitArrayField`` and "
"``IntegerField`` on invalid value (:ticket:`25597`)."
msgstr ""

# 6f264553252e4d35927b25d0358da003
#: ../../../../1.9/docs/releases/1.8.6.txt:45
msgid ""
"Added a helpful error message when Django and South migrations exist in the "
"same directory (:ticket:`25618`)."
msgstr ""

# dd5f4daeb63c44b68f675f2abaf8e16d
#: ../../../../1.9/docs/releases/1.8.6.txt:48
msgid ""
"Fixed a regression in ``URLValidator`` that allowed URLs with consecutive "
"dots in the domain section (like ``http://example..com/``) to pass "
"(:ticket:`25620`)."
msgstr ""

# 209396cb24354f099fcee5086e892c41
#: ../../../../1.9/docs/releases/1.8.6.txt:52
msgid ""
"Fixed a crash with ``GenericRelation`` and "
"``BaseModelAdmin.to_field_allowed`` (:ticket:`25622`)."
msgstr ""

# 24a50246762d4a588fdf1623e8ea2686
#: ../../../../1.9/docs/releases/1.8.7.txt:3
msgid "Django 1.8.7 release notes"
msgstr ""

# d63c9d1d2bf842eda8159ba82db08423
#: ../../../../1.9/docs/releases/1.8.7.txt:7
msgid "Django 1.8.7 fixes a security issue and several bugs in 1.8.6."
msgstr ""

# 9b4193d2330045608d23d49926cf5080
#: ../../../../1.9/docs/releases/1.8.7.txt:9
msgid ""
"Additionally, Django's vendored version of six, :mod:`django.utils.six`, has"
" been upgraded to the latest release (1.10.0)."
msgstr ""

# 3d8e0a363236464b8b66d3716b3ef550
#: ../../../../1.9/docs/releases/1.8.7.txt:28
msgid ""
"Fixed a crash of the debug view during the autumn DST change when "
":setting:`USE_TZ` is ``False`` and ``pytz`` is installed."
msgstr ""

# 9bdd3849cd5e4756b5c9ab8ab465ef01
#: ../../../../1.9/docs/releases/1.8.7.txt:31
msgid ""
"Fixed a regression in 1.8.6 that caused database routers without an "
"``allow_migrate()`` method to crash (:ticket:`25686`)."
msgstr ""

# c6a643d3debd446f938357477a0b30e8
#: ../../../../1.9/docs/releases/1.8.7.txt:34
msgid ""
"Fixed a regression in 1.8.6 by restoring the ability to use ``Manager`` "
"objects for the ``queryset`` argument of ``ModelChoiceField`` "
"(:ticket:`25683`)."
msgstr ""

# a508018802a64816bc007fae85d5ea65
#: ../../../../1.9/docs/releases/1.8.7.txt:38
msgid ""
"Fixed a regression in 1.8.6 that caused an application with South migrations"
" in the ``migrations`` directory to fail (:ticket:`25618`)."
msgstr ""

# bbeb6061b27c4bb9b07bb1c428eb4a6f
#: ../../../../1.9/docs/releases/1.8.7.txt:44
msgid ""
"Fixed a regression in 1.8 by making ``gettext()`` once again return UTF-8 "
"bytestrings on Python 2 if the input is a bytestring (:ticket:`25720`)."
msgstr ""

# 69bab777243c4247ab40041ff253663e
#: ../../../../1.9/docs/releases/1.8.7.txt:47
msgid ""
"Fixed serialization of "
":class:`~django.contrib.postgres.fields.DateRangeField` and "
":class:`~django.contrib.postgres.fields.DateTimeRangeField` "
"(:ticket:`24937`)."
msgstr ""

# 78a4f168af14460b8c893ac68fe3595f
#: ../../../../1.9/docs/releases/1.8.7.txt:51
msgid "Fixed the exact lookup of ``ArrayField`` (:ticket:`25666`)."
msgstr ""

# 065dc8d8f6d945baa210c79bf6e02f5b
#: ../../../../1.9/docs/releases/1.8.7.txt:53
msgid ""
"Fixed ``Model.refresh_from_db()`` updating of ``ForeignKey`` fields with "
"``on_delete=models.SET_NULL`` (:ticket:`25715`)."
msgstr ""

# a2c8dd59d3f64efa8326cefa333afd1d
#: ../../../../1.9/docs/releases/1.8.7.txt:56
msgid ""
"Fixed a duplicate query regression in 1.8 on proxied model deletion "
"(:ticket:`25685`)."
msgstr ""

# 6f46cde2b8504f219793380f65cffcc2
#: ../../../../1.9/docs/releases/1.8.7.txt:59
msgid ""
"Fixed ``set_FOO_order()`` crash when the ``ForeignKey`` of a model with "
"``order_with_respect_to`` references a model with a ``OneToOneField`` "
"primary key (:ticket:`25786`)."
msgstr ""

# f8fa885a51ac46ccb8cebbce868ee905
#: ../../../../1.9/docs/releases/1.8.7.txt:63
msgid ""
"Fixed incorrect validation for ``PositiveIntegerField`` and "
"``PositiveSmallIntegerField`` on MySQL resulting in values greater than "
"4294967295 or 65535, respectively, passing validation and being silently "
"truncated by the database (:ticket:`25767`)."
msgstr ""

# eefeb91da9af439d822df6928156e201
#: ../../../../1.9/docs/releases/1.8.8.txt:3
msgid "Django 1.8.8 release notes"
msgstr ""

# 59e941536ad247c4b9bec8da33d535c7
# 13d1044fdac04f80a60c62b0e6ede1cc
#: ../../../../1.9/docs/releases/1.8.8.txt:5
#: ../../../../1.9/docs/releases/1.9.1.txt:5
msgid "*Under development*"
msgstr "*En cours de développement*"

# 6bae0fcac6a44bc2b1ff95fc7cd4a057
#: ../../../../1.9/docs/releases/1.8.8.txt:7
msgid "Django 1.8.8 fixes several bugs in 1.8.7."
msgstr ""

# 203518876a5f42bdb2de73d23c54354f
#: ../../../../1.9/docs/releases/1.8.8.txt:9
msgid ""
"Python 3.2 users, please be advised that we've decided to drop support for "
"Python 3.2 in Django 1.8.x at the end of 2016. We won't break things "
"intentionally after that, but we won't test subsequent releases against "
"Python 3.2 either. Upstream support for Python 3.2 ends February 2016 so we "
"don't find much value in providing security updates for a version of Python "
"that could be insecure. To read more about the decision and to let us know "
"if this will be problematic for you, please read the `django-developers "
"thread <https://groups.google.com/d/topic/django-"
"developers/eMu5UQpUdWs/discussion>`_."
msgstr ""

# 4abc872cb9804d3eaaf2e9be21f2e7a9
#: ../../../../1.9/docs/releases/1.8.8.txt:21
msgid ""
"Fixed incorrect ``unique_together`` field name generation by ``inspectdb`` "
"(:ticket:`25274`)."
msgstr ""

# cf8dce498f18494496093c4f318726e0
#: ../../../../1.9/docs/releases/1.8.8.txt:24
msgid ""
"Corrected ``__len`` query lookup on ``ArrayField`` for empty arrays "
"(:ticket:`25772`)."
msgstr ""

# dee16db96ed84b0fb23e4410f315a90b
#: ../../../../1.9/docs/releases/1.8.8.txt:27
msgid ""
"Restored the ability to use custom formats from ``formats.py`` with "
"``django.utils.formats.get_format()`` and the ``date`` template filter "
"(:ticket:`25812`)."
msgstr ""

# 59368aad78614a0599e7864a30f0fdf4
# 0e6018a254a64e4fa9a796c222f71268
#: ../../../../1.9/docs/releases/1.8.8.txt:31
#: ../../../../1.9/docs/releases/1.9.1.txt:20
msgid ""
"Fixed a state bug when migrating a ``SeparateDatabaseAndState`` operation "
"backwards (:ticket:`25896`)."
msgstr "Correction d'un bogue d'état lors de l'inversion d'une opération de migration ``SeparateDatabaseAndState`` (:ticket:`25896`)."

# 4fe0a747f6334c46b7c303ad2cff4b2f
# a9072467b92d4705b6b72af0d7cbc1ac
#: ../../../../1.9/docs/releases/1.8.8.txt:34
#: ../../../../1.9/docs/releases/1.9.1.txt:26
msgid ""
"Fixed missing ``varchar/text_pattern_ops`` index on ``CharField`` and "
"``TextField`` respectively when using ``AlterField`` on PostgreSQL "
"(:ticket:`25412`)."
msgstr "Correction d'un index ``varchar/text_pattern_ops`` manquant sur les champs ``CharField`` et ``TextField`` lors de l'utilisation de ``AlterField`` avec PostgreSQL (:ticket:`25412`)."

# 911067f439474a398944150d8706b7f7
# cd5b6d535a9c47e0980442c61db6ecc9
#: ../../../../1.9/docs/releases/1.8.8.txt:38
#: ../../../../1.9/docs/releases/1.9.1.txt:44
msgid ""
"Fixed a state bug when using an ``AlterModelManagers`` operation "
"(:ticket:`25852`)."
msgstr "Correction d'un bogue d'état lors de l'utilisation d'une opération ``AlterModelManagers`` (:ticket:`25852`)."

# b1053c577d694615b6a1ebe472c229dc
# af79d1df25694b3dbc5d3f6ba719d35b
#: ../../../../1.9/docs/releases/1.8.8.txt:41
#: ../../../../1.9/docs/releases/1.9.1.txt:54
msgid ""
"Fixed a regression which prevented using a language not in Django's default "
"language list (:setting:`LANGUAGES`) (:ticket:`25915`)."
msgstr "Correction d'une régression qui empêchait l'utilisation d'une langue non présente dans la liste par défaut des langues de Django (:setting:`LANGUAGES`) (:ticket:`25915`)."

# 539ef9bdc67d4951aea6e4c15b605d1d
#: ../../../../1.9/docs/releases/1.8.8.txt:44
msgid ""
"``django.views.decorators.cache.never_cache()`` now sends more persuasive "
"headers (added ``no-cache, no-store, must-revalidate`` to ``Cache-Control``)"
" to better prevent caching (:ticket:`13008`). This fixes a problem where a "
"page refresh in Firefox cleared the selected entries in the admin's "
"``filter_horizontal`` and ``filter_vertical`` widgets, which could result in"
" inadvertent data loss if a user didn't notice that and then submitted the "
"form (:ticket:`22955`)."
msgstr ""

# 741026bb2c9d45d2b53b0f962cbf938d
# 38cd08083f9c4e79af5ab14e61ce5963
#: ../../../../1.9/docs/releases/1.8.8.txt:52
#: ../../../../1.9/docs/releases/1.9.1.txt:71
msgid ""
"Fixed a regression in the admin which ignored line breaks in read-only "
"fields instead of converting them to ``<br>`` (:ticket:`25465`)."
msgstr ""

# 8c4ab7c67c7b4697893f9fc7cec171a1
#: ../../../../1.9/docs/releases/1.9.txt:3
msgid "Django 1.9 release notes"
msgstr "Notes de publication de Django 1.9"

# 1ff66a75110f4ed7994b63b69d7af9f1
#: ../../../../1.9/docs/releases/1.9.txt:5
msgid "*December 1, 2015*"
msgstr "*1er décembre 2015*"

# 002d11445b9a464cb6f19e7cabf9173f
#: ../../../../1.9/docs/releases/1.9.txt:7
msgid "Welcome to Django 1.9!"
msgstr "Bienvenue dans Django 1.9 !"

# 750c5fbeff4e4f5cb0b061f32f150637
#: ../../../../1.9/docs/releases/1.9.txt:9
msgid ""
"These release notes cover the `new features`_, as well as some `backwards "
"incompatible changes`_ you'll want to be aware of when upgrading from Django"
" 1.8 or older versions. We've :ref:`dropped some features<removed-"
"features-1.9>` that have reached the end of their deprecation cycle, and "
"we've `begun the deprecation process for some features`_."
msgstr "Ces notes de publications couvrent les `nouvelles fonctionnalités`_, ainsi que certaines `modifications non rétro-compatibles` dont il faut être au courant lors la mise à jour depuis Django 1.8 ou des versions plus anciennes. Nous avons :ref:`abandonné certaines fonctionnalités<removed-features-1.9>` qui ont atteint la fin de leur cycle d'obsolescence et nous avons commencé `le processus d'obsolescence de certaines fonctionnalités`_."

# f3d7e5f1627240b59396cf9634b74e05
#: ../../../../1.9/docs/releases/1.9.txt:23
msgid ""
"Django 1.9 requires Python 2.7, 3.4, or 3.5. We **highly recommend** and "
"only officially support the latest release of each series."
msgstr "Django 1.9 requiert Python 2.7, 3.4 ou 3.5. Nous **recommandons vivement** et nous ne prenons officiellement en charge que la dernière publication de chaque série."

# cbef2a5d33d74f1191737f3afbd90a87
#: ../../../../1.9/docs/releases/1.9.txt:26
msgid "The Django 1.8 series is the last to support Python 3.2 and 3.3."
msgstr "La série Django 1.8 est la dernière à prendre en charge Python 3.2 et 3.3."

# 27f0c066fb17467481a98713e5ac6d32
#: ../../../../1.9/docs/releases/1.9.txt:29
msgid "What's new in Django 1.9"
msgstr "Quoi de neuf dans Django 1.9"

# 7147eff25c994d2d91444f49cd6e73ed
#: ../../../../1.9/docs/releases/1.9.txt:32
msgid "Performing actions after a transaction commit"
msgstr "Lancement d'actions après le commit d'une transaction"

# 66add7de95404fc5bb48e66a92cc0679
#: ../../../../1.9/docs/releases/1.9.txt:34
msgid ""
"The new :func:`~django.db.transaction.on_commit` hook allows performing "
"actions after a database transaction is successfully committed. This is "
"useful for tasks such as sending notification emails, creating queued tasks,"
" or invalidating caches."
msgstr "Le nouveau point d'entrée :func:`~django.db.transaction.on_commit` permet de lancer des actions après qu'une transaction de base de données a été validée avec succès. C'est utile pour des tâches telles que l'envoi de courriels de notification, la création de tâches à placer dans une file ou pour l'invalidation des caches."

# d95e88b2dc6e4f3eaa9bffe1765a3b14
#: ../../../../1.9/docs/releases/1.9.txt:39
msgid ""
"This functionality from the `django-transaction-hooks`_ package has been "
"integrated into Django."
msgstr "Cette fonctionnalité provenant du paquet `django-transaction-hooks`_ a été intégrée dans Django."

# 2e6b6187ac014859a9fa72f19f0ccfae
#: ../../../../1.9/docs/releases/1.9.txt:45
msgid "Password validation"
msgstr "Validation des mots de passe"

# 3d79d1b5dcfb4da5883aba67820040f1
#: ../../../../1.9/docs/releases/1.9.txt:47
msgid ""
"Django now offers password validation to help prevent the usage of weak "
"passwords by users. The validation is integrated in the included password "
"change and reset forms and is simple to integrate in any other code. "
"Validation is performed by one or more validators, configured in the new "
":setting:`AUTH_PASSWORD_VALIDATORS` setting."
msgstr "Django offre maintenant la validation de mots de passe pour aider à prévenir l'utilisation de mots de passe faibles par les utilisateurs. La validation est intégrée aux formulaires de changement et de réinitialisation des mots de passe et s'intègre facilement dans n'importe quel autre code. La validation est effectuée par un ou plusieurs validateurs, configurés dans le  nouveau réglage :setting:`AUTH_PASSWORD_VALIDATORS`."

# 4010fa56f76145afadb4973a339ac9df
#: ../../../../1.9/docs/releases/1.9.txt:53
msgid ""
"Four validators are included in Django, which can enforce a minimum length, "
"compare the password to the user's attributes like their name, ensure "
"passwords aren't entirely numeric, or check against an included list of "
"common passwords. You can combine multiple validators, and some validators "
"have custom configuration options. For example, you can choose to provide a "
"custom list of common passwords. Each validator provides a help text to "
"explain its requirements to the user."
msgstr "Quatre validateurs sont inclus dans Django ; ceux-ci peuvent imposer une longueur minimale, comparer le mot de passe à des attributs de l'utilisateur tels que leur nom, s'assurer que les mots de passe ne soient pas entièrement numériques, ou comparer avec une liste de mots de passe communs. Vous pouvez combiner plusieurs validateurs, et certains validateurs possèdent des options de configuration propres. Par exemple, vous pouvez choisir de fournir une liste personnalisée de mots de passe communs. Chaque validateur fournit un texte d'aide pour expliquer ses exigences à l'utilisateur."

# 873fa66c31344a34bc320d50d5f77446
#: ../../../../1.9/docs/releases/1.9.txt:61
msgid ""
"By default, no validation is performed and all passwords are accepted, so if"
" you don't set :setting:`AUTH_PASSWORD_VALIDATORS`, you will not see any "
"change. In new projects created with the default :djadmin:`startproject` "
"template, a simple set of validators is enabled. To enable basic validation "
"in the included auth forms for your project, you could set, for example::"
msgstr "Par défaut, aucune validation n'est effectuée et tous les mots de passe sont acceptés. Si vous ne mettez pas de contenu dans :setting:`AUTH_PASSWORD_VALIDATORS`, vous ne verrez aucun changement. Dans les nouveaux projets créés avec le gabarit :djadmin:`startproject` par défaut, un ensemble simple de validateurs est activé. Pour activer la validation de base dans les formulaires d'authentification de Django dans votre projet, vous pouvez définir, par exemple ::"

# e2fa424982c941f69d1f1745cab3d84f
#: ../../../../1.9/docs/releases/1.9.txt:82
msgid "See :ref:`password-validation` for more details."
msgstr "Voir :ref:`password-validation` pour plus de détails."

# 2302a3950c3c48249c9c5c0bccfd8104
#: ../../../../1.9/docs/releases/1.9.txt:85
msgid "Permission mixins for class-based views"
msgstr "Classes mixins de permissions dans les vues fondées sur les classes"

# 3831d65fff10415199c18ecd9d70bacd
#: ../../../../1.9/docs/releases/1.9.txt:87
msgid ""
"Django now ships with the mixins "
":class:`~django.contrib.auth.mixins.AccessMixin`, "
":class:`~django.contrib.auth.mixins.LoginRequiredMixin`, "
":class:`~django.contrib.auth.mixins.PermissionRequiredMixin`, and "
":class:`~django.contrib.auth.mixins.UserPassesTestMixin` to provide the "
"functionality of the ``django.contrib.auth.decorators`` for class-based "
"views. These mixins have been taken from, or are at least inspired by, the "
"`django-braces`_ project."
msgstr "Django est dorénavant livré avec les classes mixins :class:`~django.contrib.auth.mixins.AccessMixin`, :class:`~django.contrib.auth.mixins.LoginRequiredMixin`, :class:`~django.contrib.auth.mixins.PermissionRequiredMixin` et :class:`~django.contrib.auth.mixins.UserPassesTestMixin` pour fournir la fonctionnalité de ``django.contrib.auth.decorators`` pour les vues fondées sur les classes. Ces classes proviennent ou s'inspirent en tout cas du projet `django-braces`_."

# 49af7760691042a69fc9bd704a2ed22d
#: ../../../../1.9/docs/releases/1.9.txt:96
msgid ""
"There are a few differences between Django's and django-braces' "
"implementation, though:"
msgstr "Il y a cependant quelques différences entre l'implémentation de Django et celle de django-braces :"

# 6f4fcdf3be1744cfbf4f299b8e1b4074
#: ../../../../1.9/docs/releases/1.9.txt:99
msgid ""
"The :attr:`~django.contrib.auth.mixins.AccessMixin.raise_exception` "
"attribute can only be ``True`` or ``False``. Custom exceptions or callables "
"are not supported."
msgstr "L'attribut :attr:`~django.contrib.auth.mixins.AccessMixin.raise_exception` ne peut valoir que ``True`` ou ``False``. Les exceptions ou objets exécutables personnalisés ne sont pas pris en charge."

# ee3304de3c524c51a88a75584d4a4eea
#: ../../../../1.9/docs/releases/1.9.txt:103
msgid ""
"The :meth:`~django.contrib.auth.mixins.AccessMixin.handle_no_permission` "
"method does not take a ``request`` argument. The current request is "
"available in ``self.request``."
msgstr "La méthode :meth:`~django.contrib.auth.mixins.AccessMixin.handle_no_permission` n'accepte pas de paramètre ``request``. La requête en cours est disponible dans ``self.request``."

# 5372b193c7d44afe81e26da958cbdacc
#: ../../../../1.9/docs/releases/1.9.txt:107
msgid ""
"The custom ``test_func()`` of "
":class:`~django.contrib.auth.mixins.UserPassesTestMixin` does not take a "
"``user`` argument. The current user is available in ``self.request.user``."
msgstr "La fonction personnalisée ``test_func()`` de :class:`~django.contrib.auth.mixins.UserPassesTestMixin` n'accepte pas de paramètre ``user``. La requête en cours est disponible dans ``self.request.user``."

# 336198f1a225450fab85103d3663cf16
#: ../../../../1.9/docs/releases/1.9.txt:111
msgid ""
"The :attr:`permission_required "
"<django.contrib.auth.mixins.PermissionRequiredMixin>` attribute supports a "
"string (defining one permission) or a list/tuple of strings (defining "
"multiple permissions) that need to be fulfilled to grant access."
msgstr "L'attribut :attr:`permission_required <django.contrib.auth.mixins.PermissionRequiredMixin>` accepte une chaîne (définissant une permission) ou une liste de chaînes (définissant plusieurs permissions) qui doivent être accordées pour autoriser l'accès."

# 0526a1a2ca3e4102bb877c724cb5446f
#: ../../../../1.9/docs/releases/1.9.txt:116
msgid ""
"The new "
":attr:`~django.contrib.auth.mixins.AccessMixin.permission_denied_message` "
"attribute allows passing a message to the ``PermissionDenied`` exception."
msgstr "Le nouvel attribut :attr:`~django.contrib.auth.mixins.AccessMixin.permission_denied_message` permet de transmettre un message à l'exception ``PermissionDenied``."

# d7dd21f5f7514dd6bb7d98c85abbf628
#: ../../../../1.9/docs/releases/1.9.txt:122
msgid "New styling for ``contrib.admin``"
msgstr "Nouveau style pour ``contrib.admin``"

# f79db162e918443f9d3591a83356cf41
#: ../../../../1.9/docs/releases/1.9.txt:124
msgid ""
"The admin sports a modern, flat design with new SVG icons which look perfect"
" on HiDPI screens. It still provides a fully-functional experience to `YUI's"
" A-grade`_ browsers. Older browser may experience varying levels of graceful"
" degradation."
msgstr "L'interface d'administration présente un nouvel aspect moderne et en aplat avec de nouvelles icônes SVG qui s'affichent parfaitement sur des écrans haute densité. Elle garantit toujours une expérience pleinement fonctionnelle avec les navigateurs `de niveau A de YUI`_. Les navigateurs plus anciens peuvent parfois se comporter en mode dégradé acceptable."

# e36afb8783bb4da3a3f8319a8ebb28d4
#: ../../../../1.9/docs/releases/1.9.txt:132
msgid "Running tests in parallel"
msgstr "Lancement des tests en parallèle"

# 169e87ba835a4b5994834fc18b3acf1b
#: ../../../../1.9/docs/releases/1.9.txt:134
msgid ""
"The :djadmin:`test` command now supports a :djadminopt:`--parallel` option "
"to run a project's tests in multiple processes in parallel."
msgstr "La commande :djadmin:`test` contient maintenant une option :djadminopt:`--parallel` pour lancer les tests d'un projet dans plusieurs processus en parallèle."

# 5927bf6b673e4cbf9e6d37ce82960707
#: ../../../../1.9/docs/releases/1.9.txt:137
msgid ""
"Each process gets its own database. You must ensure that different test "
"cases don't access the same resources. For instance, test cases that touch "
"the filesystem should create a temporary directory for their own use."
msgstr "Chaque processus travaille avec sa propre base de données. Vous devez vous assurer que les différents cas de test n'accèdent pas aux mêmes ressources. Par exemple, les cas de test qui touchent au système de fichiers devraient créer un répertoire temporaire pour leur propre usage."

# a4515585a5f0424ab213a78fca9a2fc7
#: ../../../../1.9/docs/releases/1.9.txt:141
msgid ""
"This option is enabled by default for Django's own test suite provided:"
msgstr "Cette option est activée par défaut pour la propre suite de tests de Django pour autant que :"

# 97f565681e714a8296f5f5fb8206b4cd
#: ../../../../1.9/docs/releases/1.9.txt:143
msgid "the OS supports it (all but Windows)"
msgstr "le système d'exploitation le prend en charge (tous sauf Windows)"

# a0a24783ff564f85bfb3ac485b67d758
#: ../../../../1.9/docs/releases/1.9.txt:144
msgid ""
"the database backend supports it (all the built-in backends but Oracle)"
msgstr "le moteur de base de données le prend en charge (tous les moteurs intégrés sauf Oracle)"

# b24e411a3732456e9f7ad7180b20b871
#: ../../../../1.9/docs/releases/1.9.txt:152
msgid "Admin views now have ``model_admin`` or ``admin_site`` attributes."
msgstr "Les vues d'administration possèdent maintenant des attributs ``model_admin`` ou ``admin_site``."

# c341bf23ac6a445997e285dd69e60dc6
#: ../../../../1.9/docs/releases/1.9.txt:154
msgid ""
"The URL of the admin change view has been changed (was at "
"``/admin/<app>/<model>/<pk>/`` by default and is now at "
"``/admin/<app>/<model>/<pk>/change/``). This should not affect your "
"application unless you have hardcoded admin URLs. In that case, replace "
"those links by :ref:`reversing admin URLs <admin-reverse-urls>` instead. "
"Note that the old URL still redirects to the new one for backwards "
"compatibility, but it may be removed in a future version."
msgstr "L'URL de la vue de modification du site d'administration a été modifiée (de ``/admin/<app>/<modèle>/<pk>/`` par défaut à ``/admin/<app>/<modèle>/<pk>/change/``). Cela ne devrait pas affecter votre application sauf si vous avez codé en dur des URL d'administration. Dans ce cas, remplacez ces liens de préférence par la :ref:`résolution inverse des URL d’administration <admin-reverse-urls>`. Notez que l'ancienne URL redirige toujours vers la nouvelle par rétrocompatibilité, mais cela pourrait cesser dans une version future."

# 2ee8f10a1a2449ca9ccf607aaaad01ca
#: ../../../../1.9/docs/releases/1.9.txt:162
msgid ""
":meth:`ModelAdmin.get_list_select_related() "
"<django.contrib.admin.ModelAdmin.get_list_select_related>` was added to "
"allow changing the ``select_related()`` values used in the admin's "
"changelist query based on the request."
msgstr ":meth:`ModelAdmin.get_list_select_related() <django.contrib.admin.ModelAdmin.get_list_select_related>` a été ajoutée pour permettre de modifier les valeurs ``select_related()`` utilisées dans la requête de la liste pour modification du site d'administration en fonction de la requête."

# bb5f2ab7513a479a90346938fbea9b48
#: ../../../../1.9/docs/releases/1.9.txt:167
msgid ""
"The ``available_apps`` context variable, which lists the available "
"applications for the current user, has been added to the "
":meth:`AdminSite.each_context() "
"<django.contrib.admin.AdminSite.each_context>` method."
msgstr "La variable de contexte ``available_apps``, qui contient la liste des applications disponibles pour l'utilisateur actuel, a été ajoutée à la méthode :meth:`AdminSite.each_context() <django.contrib.admin.AdminSite.each_context>`."

# afff1c2db6be4e33bb0a41e183b831ff
#: ../../../../1.9/docs/releases/1.9.txt:172
msgid ""
":attr:`AdminSite.empty_value_display "
"<django.contrib.admin.AdminSite.empty_value_display>` and "
":attr:`ModelAdmin.empty_value_display "
"<django.contrib.admin.ModelAdmin.empty_value_display>` were added to "
"override the display of empty values in admin change list. You can also "
"customize the value for each field."
msgstr ":attr:`AdminSite.empty_value_display <django.contrib.admin.AdminSite.empty_value_display>` et :attr:`ModelAdmin.empty_value_display <django.contrib.admin.ModelAdmin.empty_value_display>` ont été ajoutés pour surcharger l'affichage de valeurs vides dans la liste pour modification du site d'administration. Il est aussi possible de personnaliser la valeur pour chaque champ."

# 8fc4fdae724740caafaeaae3e4cffee6
#: ../../../../1.9/docs/releases/1.9.txt:179
msgid ""
"Added jQuery events :ref:`when an inline form is added or removed <admin-"
"javascript-inline-form-events>` on the change form page."
msgstr "Des événements jQuery ont été ajoutés :ref:`lorsqu'un sous-formulaire est ajouté ou enlevé <admin-javascript-inline-form-events>` sur la page contenant le formulaire de modification."

# 5e8cd2afa5254ba2a55e2e6986077f5f
#: ../../../../1.9/docs/releases/1.9.txt:182
msgid ""
"The time picker widget includes a '6 p.m' option for consistency of having "
"predefined options every 6 hours."
msgstr "Le composant de sélection de l'heure inclut une option « 18:00 » par cohérence avec la présence d'options prédéfinies toutes les 6 heures."

# bf1dfb029e794e4d8e5520bde84ed82d
#: ../../../../1.9/docs/releases/1.9.txt:185
msgid "JavaScript slug generation now supports Romanian characters."
msgstr "La génération de « slugs » en JavaScript prend dorénavant en charge les caractères roumains. "

# 25facd2093174dbdbe8de858dcb1689c
#: ../../../../1.9/docs/releases/1.9.txt:190
msgid ""
"The model section of the ``admindocs`` now also describes methods that take "
"arguments, rather than ignoring them."
msgstr "La section modèles de ``admindocs`` documente dorénavant aussi les méthodes qui acceptent des paramètres, plutôt que de les ignorer."

# 92895340de4a4f888c516ad80474720c
#: ../../../../1.9/docs/releases/1.9.txt:196
msgid ""
"The default iteration count for the PBKDF2 password hasher has been "
"increased by 20%. This backwards compatible change will not affect users who"
" have subclassed ``django.contrib.auth.hashers.PBKDF2PasswordHasher`` to "
"change the default value."
msgstr "Le nombre d'itérations par défaut du hachage des mots de passe PBKDF2 a été augmenté de 20%. Cette modification rétrocompatible n'affecte pas ceux qui ont créé une sous-classe de ``django.contrib.auth.hashers.PBKDF2PasswordHasher`` pour modifier la valeur par défaut."

# 33b797b7efbf47bf83693b0b50c19873
#: ../../../../1.9/docs/releases/1.9.txt:201
msgid ""
"The ``BCryptSHA256PasswordHasher`` will now update passwords if its "
"``rounds`` attribute is changed."
msgstr "La classe ``BCryptSHA256PasswordHasher`` met dorénavant les mots de passe à jour lorsque son attribut ``rounds`` est modifié."

# c5ab199f4a9645a091911bcce5ba5a63
#: ../../../../1.9/docs/releases/1.9.txt:204
msgid ""
"``AbstractBaseUser`` and ``BaseUserManager`` were moved to a new "
"``django.contrib.auth.base_user`` module so that they can be imported "
"without including ``django.contrib.auth`` in :setting:`INSTALLED_APPS` "
"(doing so raised a deprecation warning in older versions and is no longer "
"supported in Django 1.9)."
msgstr "``AbstractBaseUser`` et ``BaseUserManager`` ont été déplacés vers un nouveau module ``django.contrib.auth.base_user`` afin qu'ils puissent être importés sans devoir inclure ``django.contrib.auth`` dans :setting:`INSTALLED_APPS` (ce qui générait une avertissement d'obsolescence dans les anciennes versions et qui n'est plus pris en charge depuis Django 1.9)."

# 7f2d3966f3c6487a8351efb8d67d3e9f
#: ../../../../1.9/docs/releases/1.9.txt:210
msgid ""
"The permission argument of "
":func:`~django.contrib.auth.decorators.permission_required()` accepts all "
"kinds of iterables, not only list and tuples."
msgstr "Le paramètre ``permission`` de :func:`~django.contrib.auth.decorators.permission_required()` accepte toutes les variantes d'éléments itérables, pas seulement les listes et les tuples."

# e11c92fcee3742c5a834c5ccc26d67ef
#: ../../../../1.9/docs/releases/1.9.txt:214
msgid ""
"The new "
":class:`~django.contrib.auth.middleware.PersistentRemoteUserMiddleware` "
"makes it possible to use ``REMOTE_USER`` for setups where the header is only"
" populated on login pages instead of every request in the session."
msgstr "La nouvelle classe :class:`~django.contrib.auth.middleware.PersistentRemoteUserMiddleware` rend possible l'exploitation de ``REMOTE_USER`` dans les configurations où cet en-tête n'est renseigné que sur les pages de connexion et non sur les autres requêtes de la session."

# d50e72a272834d0f8adb850088be5a56
#: ../../../../1.9/docs/releases/1.9.txt:218
msgid ""
"The :func:`~django.contrib.auth.views.password_reset` view accepts an "
"``extra_email_context`` parameter."
msgstr "La vue :func:`~django.contrib.auth.views.password_reset` accepte un paramètre ``extra_email_context``."

# 6f049005c5e54134abb3b68fe000af54
#: ../../../../1.9/docs/releases/1.9.txt:222
msgid ":mod:`django.contrib.contenttypes`"
msgstr ":mod:`django.contrib.contenttypes`"

# 25ed39d875be4edc9915cd26f43fb937
#: ../../../../1.9/docs/releases/1.9.txt:224
msgid ""
"It's now possible to use "
":attr:`~django.db.models.Options.order_with_respect_to` with a "
"``GenericForeignKey``."
msgstr "Il est maintenant possible d'utiliser :attr:`~django.db.models.Options.order_with_respect_to` avec une relation ``GenericForeignKey``."

# 4f940ca947b44dae99078689690ba4da
#: ../../../../1.9/docs/releases/1.9.txt:231
msgid ""
"All ``GeoQuerySet`` methods have been deprecated and replaced by "
":doc:`equivalent database functions </ref/contrib/gis/functions>`. As soon "
"as the legacy methods have been replaced in your code, you should even be "
"able to remove the special ``GeoManager`` from your GIS-enabled classes."
msgstr "Toutes les méthodes ``GeoQuerySet`` ont été rendues obsolètes et remplacées par des :doc:`fonctions de base de données équivalentes </ref/contrib/gis/functions>`. Dès que les anciennes méthodes auront été remplacées dans votre code, il est alors même possible d'enlever le gestionnaire spécial ``GeoManager`` de vos classes de modèles géographiques."

# 3bf85d5edb7d4a6fa43fd4745cf40b43
#: ../../../../1.9/docs/releases/1.9.txt:236
msgid ""
"The GDAL interface now supports instantiating file-based and in-memory "
":ref:`GDALRaster objects <raster-data-source-objects>` from raw data. "
"Setters for raster properties such as projection or pixel values have been "
"added."
msgstr "L'interface GDAL prend désormais en charge l'instanciation d':ref:`objets GDALRaster <raster-data-source-objects>` à base de fichiers et en mémoire à partir de données brutes. Les propriétés matricielles telles que la projection ou les valeurs de pixels peuvent maintenant être modifiées."

# 322ebd0dde7c43efb4068233b0e589ac
#: ../../../../1.9/docs/releases/1.9.txt:241
msgid ""
"For PostGIS users, the new "
":class:`~django.contrib.gis.db.models.RasterField` allows :ref:`storing "
"GDALRaster objects <creating-and-saving-raster-models>`. It supports "
"automatic spatial index creation and reprojection when saving a model. It "
"does not yet support spatial querying."
msgstr "Pour les utilisateurs de PostGIS, le nouveau champ :class:`~django.contrib.gis.db.models.RasterField` permet de :ref:`stocker des objets GDALRaster <creating-and-saving-raster-models>`. Il prend en charge la création automatique d'index spatial et la reprojection lors de l'enregistrement d'un modèle. Il ne supporte pas encore l'interrogation spatiale."

# 15ece4dd4ded47209f82f879675c669a
#: ../../../../1.9/docs/releases/1.9.txt:246
msgid ""
"The new :meth:`GDALRaster.warp() <django.contrib.gis.gdal.GDALRaster.warp>` "
"method allows warping a raster by specifying target raster properties such "
"as origin, width, height, or pixel size (amongst others)."
msgstr "La nouvelle méthode :meth:`GDALRaster.warp() <django.contrib.gis.gdal.GDALRaster.warp>` permet de déformer une structure matricielle en indiquant des propriétés cibles telles que l'origine, la largeur, la hauteur ou la taille de pixel (parmi d'autres)."

# d652860ef3374c0a81889653b1130843
#: ../../../../1.9/docs/releases/1.9.txt:250
msgid ""
"The new :meth:`GDALRaster.transform() "
"<django.contrib.gis.gdal.GDALRaster.transform>` method allows transforming a"
" raster into a different spatial reference system by specifying a target "
"``srid``."
msgstr "La nouvelle méthode :meth:`GDALRaster.transform() <django.contrib.gis.gdal.GDALRaster.transform>` permet de transformer une structure matricielle dans un autre système de référence spatiale en indiquant un code ``srid`` cible."

# 6b51dacaa8d64596905a581c204790e4
#: ../../../../1.9/docs/releases/1.9.txt:255
msgid ""
"The new :class:`~django.contrib.gis.geoip2.GeoIP2` class allows using "
"MaxMind's GeoLite2 databases which includes support for IPv6 addresses."
msgstr "La nouvelle classe :class:`~django.contrib.gis.geoip2.GeoIP2` permet d'exploiter les bases de données GeoLite2 de MaxMind qui incluent la prise en charge des adresses IPv6."

# 1e46d259765f4a698d1d0ec0f5632cd1
#: ../../../../1.9/docs/releases/1.9.txt:259
msgid ":mod:`django.contrib.postgres`"
msgstr ":mod:`django.contrib.postgres`"

# 0743529c9bb4429b93087835eb1d6411
#: ../../../../1.9/docs/releases/1.9.txt:261
msgid ""
"Added support for the :lookup:`rangefield.contained_by` lookup for some "
"built in fields which correspond to the range fields."
msgstr "La prise en charge de l'interrogation :lookup:`rangefield.contained_by` a été ajoutée pour certains champs intégrés qui correspondent aux champs d'intervalle."

# 0e3142daca2144e4bfd5d5b0bea88cc2
#: ../../../../1.9/docs/releases/1.9.txt:264
msgid "Added :class:`~django.contrib.postgres.fields.JSONField`."
msgstr "Le champ :class:`~django.contrib.postgres.fields.JSONField` a été ajouté."

# e7a8527970de4b3c97682f2b63d5c638
#: ../../../../1.9/docs/releases/1.9.txt:266
msgid "Added :doc:`/ref/contrib/postgres/aggregates`."
msgstr "Des :doc:`/ref/contrib/postgres/aggregates` ont été ajoutées."

# 15325aef391448e3bbaa85f2bae1b27b
#: ../../../../1.9/docs/releases/1.9.txt:268
msgid ""
"Added the :class:`~django.contrib.postgres.functions.TransactionNow` "
"database function."
msgstr "La fonction de base de données :class:`~django.contrib.postgres.functions.TransactionNow` a été ajoutée."

# 5a6ffbed5ce645e4b97bb402fb7d145f
#: ../../../../1.9/docs/releases/1.9.txt:274
msgid ""
"The session model and ``SessionStore`` classes for the ``db`` and "
"``cached_db`` backends are refactored to allow a custom database session "
"backend to build upon them. See :ref:`extending-database-backed-session-"
"engines` for more details."
msgstr "Le modèle de session et les classes ``SessionStore`` pour les moteurs ``db`` et ``cached_db`` ont été refactorisés pour permettre de bâtir sur ceux-ci un moteur de session personnalisé fondé sur une base de données. Voir :ref:`extending-database-backed-session-engines` pour plus de détails."

# 4d95a77dcc9a4604adb627ef58c60629
#: ../../../../1.9/docs/releases/1.9.txt:282
msgid ""
":func:`~django.contrib.sites.shortcuts.get_current_site` now handles the "
"case where ``request.get_host()`` returns ``domain:port``, e.g. "
"``example.com:80``. If the lookup fails because the host does not match a "
"record in the database and the host has a port, the port is stripped and the"
" lookup is retried with the domain part only."
msgstr ":func:`~django.contrib.sites.shortcuts.get_current_site` gère maintenant le cas où ``request.get_host()`` renvoie ``domaine:port``, par exemple ``exemple.com:80``. Si la recherche échoue parce que l'hôte ne correspond pas à un enregistrement dans la base de données et que l'hôte dispose d'un port, la recherche est relancée sans le port et uniquement avec la partie du domaine."

# b1feb8978a94463bb5f2bf9fd3fc2c1f
#: ../../../../1.9/docs/releases/1.9.txt:291
msgid ""
"Support for multiple enclosures per feed item has been added. If multiple "
"enclosures are defined on a RSS feed, an exception is raised as RSS feeds, "
"unlike Atom feeds, do not support multiple enclosures per feed item."
msgstr "Plusieurs annexes par élément de flux sont maintenant possibles. Si plusieurs annexes sont définies pour un flux RSS, une exception est produite car les flux RSS, au contraire des flux Atom, ne gèrent pas plusieurs annexes par élément de flux."

# bbdf031ed159421aab2c275ffae1afbb
#: ../../../../1.9/docs/releases/1.9.txt:298
msgid ""
"``django.core.cache.backends.base.BaseCache`` now has a ``get_or_set()`` "
"method."
msgstr "``django.core.cache.backends.base.BaseCache`` possède maintenant une méthode ``get_or_set()``."

# cd2132f34d0f4bda914d444ce685e4ac
#: ../../../../1.9/docs/releases/1.9.txt:301
msgid ""
":func:`django.views.decorators.cache.never_cache` now sends more persuasive "
"headers (added ``no-cache, no-store, must-revalidate`` to ``Cache-Control``)"
" to better prevent caching. This was also added in Django 1.8.8."
msgstr ":func:`django.views.decorators.cache.never_cache` envoie maintenant des en-têtes plus persuasifs (``no-cache, no-store, must-revalidate`` ont été ajoutés à ``Cache-Control``) puor mieux empêcher le cache. Ceci a aussi été ajouté à Django 1.8.8."

# 2caadaeeb6d248fabbe2a8e2ba3ca48a
#: ../../../../1.9/docs/releases/1.9.txt:306
msgid "CSRF"
msgstr "CSRF"

# e8ee2d1720f1440b9641ebbac0ff5c07
#: ../../../../1.9/docs/releases/1.9.txt:308
msgid ""
"The request header's name used for CSRF authentication can be customized "
"with :setting:`CSRF_HEADER_NAME`."
msgstr "Le nom d'en-tête de requête utilisé pour l'authentification CSRF peut être personnalisé avec :setting:`CSRF_HEADER_NAME`."

# 4394dbdbf97f4b69bc42383c59bb060f
#: ../../../../1.9/docs/releases/1.9.txt:311
msgid ""
"The CSRF referer header is now validated against the "
":setting:`CSRF_COOKIE_DOMAIN` setting if set. See :ref:`how-csrf-works` for "
"details."
msgstr "L'en-tête de référant CSRF est maintenant validée en fonction du réglage :setting:`CSRF_COOKIE_DOMAIN` si celui-ci est défini. Voir :ref:`how-csrf-works` pour plus de détails."

# dd1e35b596de4f088a161197798bd7bf
#: ../../../../1.9/docs/releases/1.9.txt:315
msgid ""
"The new :setting:`CSRF_TRUSTED_ORIGINS` setting provides a way to allow "
"cross-origin unsafe requests (e.g. ``POST``) over HTTPS."
msgstr "Le nouveau réglage :setting:`CSRF_TRUSTED_ORIGINS` donne la possibilité d'autoriser des requêtes non sûres (par ex. ``POST``) d'origine croisée sur HTTPS."

# 875d36ec36e74f4aa9383e9706d22143
#: ../../../../1.9/docs/releases/1.9.txt:321
msgid ""
"The PostgreSQL backend (``django.db.backends.postgresql_psycopg2``) is also "
"available as ``django.db.backends.postgresql``. The old name will continue "
"to be available for backwards compatibility."
msgstr "Le moteur PostgreSQL (``django.db.backends.postgresql_psycopg2``) est également disponible en tant que ``django.db.backends.postgresql``. L'ancien nom continuera d'être disponible par rétro-compatibilité."

# 21e41f04b4c04521a87e5c269df9dc97
#: ../../../../1.9/docs/releases/1.9.txt:328
msgid ""
":meth:`Storage.get_valid_name() "
"<django.core.files.storage.Storage.get_valid_name>` is now called when the "
":attr:`~django.db.models.FileField.upload_to` is a callable."
msgstr ":meth:`Storage.get_valid_name() <django.core.files.storage.Storage.get_valid_name>` est dorénavant appelée lorsque :attr:`~django.db.models.FileField.upload_to` est un objet exécutable."

# eabd7f1b08104186ad3033bb05a5b398
#: ../../../../1.9/docs/releases/1.9.txt:332
msgid ""
":class:`~django.core.files.File` now has the ``seekable()`` method when "
"using Python 3."
msgstr ":class:`~django.core.files.File` possède maintenant la méthode ``seekable()`` avec Python 3."

# d5a4441ec9714992b383f59a176b9876
#: ../../../../1.9/docs/releases/1.9.txt:338
msgid ""
":class:`~django.forms.ModelForm` accepts the new ``Meta`` option "
"``field_classes`` to customize the type of the fields. See :ref:`modelforms-"
"overriding-default-fields` for details."
msgstr ":class:`~django.forms.ModelForm` accepte la nouvelle option ``Meta`` ``field_classes`` pour personnaliser les types de champs. Voir :ref:`modelforms-overriding-default-fields` pour plus de détails."

# 5f434584c5b846c4911e3d56715a2a2f
#: ../../../../1.9/docs/releases/1.9.txt:342
msgid ""
"You can now specify the order in which form fields are rendered with the "
":attr:`~django.forms.Form.field_order` attribute, the ``field_order`` "
"constructor argument , or the :meth:`~django.forms.Form.order_fields` "
"method."
msgstr "Vous pouvez maintenant définir l'ordre dans lequel les champs de formulaire sont affichés en vous servant de l'attribut :attr:`~django.forms.Form.field_order`, du paramètre de constructeur ``field_order`` ou de la méthode :meth:`~django.forms.Form.order_fields`."

# 9144138e307547f0a849032ff22351cd
#: ../../../../1.9/docs/releases/1.9.txt:346
msgid ""
"A form prefix can be specified inside a form class, not only when "
"instantiating a form. See :ref:`form-prefix` for details."
msgstr "Un préfixe de formulaire peut être défini dans une classe de formulaire, non seulement lors de l'instanciation du formulaire. Voir :ref:`form-prefix` pour plus de détails."

# 82cd0af31741470887e6be49edd5cc7a
#: ../../../../1.9/docs/releases/1.9.txt:349
msgid ""
"You can now :ref:`specify keyword arguments <custom-formset-form-kwargs>` "
"that you want to pass to the constructor of forms in a formset."
msgstr "Vous pouvez maintenant :ref:`définir des paramètres nommés <custom-formset-form-kwargs>` que vous souhaitez transmettre au constructeur des formulaires dans un jeu de formulaires."

# 55823df0e500419b8787fd0c6b62bc07
#: ../../../../1.9/docs/releases/1.9.txt:352
msgid ""
":class:`~django.forms.SlugField` now accepts an "
":attr:`~django.forms.SlugField.allow_unicode` argument to allow Unicode "
"characters in slugs."
msgstr ":class:`~django.forms.SlugField` accepte dorénavant un paramètre :attr:`~django.forms.SlugField.allow_unicode` pour autoriser les caractères Unicode dans les « slugs »."

# ce6ed8d580d34ea28d697e3c3aa4171e
#: ../../../../1.9/docs/releases/1.9.txt:356
msgid ""
":class:`~django.forms.CharField` now accepts a "
":attr:`~django.forms.CharField.strip` argument to strip input data of "
"leading and trailing whitespace.  As this defaults to ``True`` this is "
"different behavior from previous releases."
msgstr ":class:`~django.forms.CharField` accepte maintenant un paramètre :attr:`~django.forms.CharField.strip` pour épurer les données saisies d'éventuelles espaces initiales ou finales. Comme la valeur par défaut est ``True``, le comportement est donc différent des versions précédentes."

# 1572c8e404b24b5989122f870b87b85a
#: ../../../../1.9/docs/releases/1.9.txt:361
msgid ""
"Form fields now support the :attr:`~django.forms.Field.disabled` argument, "
"allowing the field widget to be displayed disabled by browsers."
msgstr "Les champs de formulaire acceptent maintenant un paramètre :attr:`~django.forms.Field.disabled` ce qui provoque l'affichage d'un composant de champ désactivé dans les navigateurs."

# 5fe413cfbd21400d846c1a0970eec29b
#: ../../../../1.9/docs/releases/1.9.txt:364
msgid ""
"It's now possible to customize bound fields by overriding a field's "
":meth:`~django.forms.Field.get_bound_field()` method."
msgstr "Il est maintenant possible de personnaliser les champs de formulaire liés aux données en surchargeant la méthode :meth:`~django.forms.Field.get_bound_field()`."

# 390c5963c3a94a3a96860562dc120010
#: ../../../../1.9/docs/releases/1.9.txt:370
msgid ""
"Class-based views generated using ``as_view()`` now have ``view_class`` and "
"``view_initkwargs`` attributes."
msgstr "Les vues fondées sur les classes générées par ``as_view()`` possèdent maintenant les attributs ``view_class`` et ``view_initkwargs``."

# 7173ac057c7b487fbfc138258be7a8b1
#: ../../../../1.9/docs/releases/1.9.txt:373
msgid ""
":func:`~django.utils.decorators.method_decorator` can now be used with a "
"list or tuple of decorators. It can also be used to :ref:`decorate classes "
"instead of methods <decorating-class-based-views>`."
msgstr ":func:`~django.utils.decorators.method_decorator` peut maintenant être utilisée avec une liste ou un tuple de décorateurs. On peut aussi l'utiliser pour :ref:`décorer des classes au lieu de méthodes <decorating-class-based-views>`."

# e9d94ff3e8b04863ba886f1a820b23c5
#: ../../../../1.9/docs/releases/1.9.txt:380
msgid ""
"The :func:`django.views.i18n.set_language` view now properly redirects to "
":ref:`translated URLs <url-internationalization>`, when available."
msgstr "La vue :func:`django.views.i18n.set_language` redirige maintenant correctement vers les :ref:`URL traduites <url-internationalization>` lorsqu'elles sont disponibles."

# c82fa3c75e2d49698e1dbc73f387fa6d
#: ../../../../1.9/docs/releases/1.9.txt:383
msgid ""
"The :func:`django.views.i18n.javascript_catalog` view now works correctly if"
" used multiple times with different configurations on the same page."
msgstr "La vue :func:`django.views.i18n.javascript_catalog` fonctionne maintenant correctement quand elle est utilisée plusieurs fois avec différentes configurations sur la même page."

# 66488700b76e4fdab6c9a44523f23d00
#: ../../../../1.9/docs/releases/1.9.txt:386
msgid ""
"The :func:`django.utils.timezone.make_aware` function gained an ``is_dst`` "
"argument to help resolve ambiguous times during DST transitions."
msgstr "La fonction :func:`django.utils.timezone.make_aware` possède un nouveau paramètre ``is_dst`` pour aider à résoudre les heures ambiguës lors des passages heure d'été / heure d'hiver."

# 5a065d336f134109b02761ec8c1135c7
#: ../../../../1.9/docs/releases/1.9.txt:389
msgid ""
"You can now use locale variants supported by gettext. These are usually used"
" for languages which can be written in different scripts, for example Latin "
"and Cyrillic (e.g. ``be@latin``)."
msgstr "Les variantes de langue prises en charge par gettext peuvent maintenant être utilisées. Elles sont généralement utilisées pour des langues qui s'écrivent dans différentes écritures, par exemple latin et cyrillique (comme par ex.  ``be@latin``)."

# ed2fba75c029458eb78ae4b07dd354b0
#: ../../../../1.9/docs/releases/1.9.txt:393
msgid ""
"Added the :func:`django.views.i18n.json_catalog` view to help build a custom"
" client-side i18n library upon Django translations. It returns a JSON object"
" containing a translations catalog, formatting settings, and a plural rule."
msgstr "La vue :func:`django.views.i18n.json_catalog` a été ajoutée pour aider à construire une bibliothèque i18n personnalisée côté client sur la base des traductions Django. Elle renvoie un objet JSON contenant un catalogue de traductions, des réglages de mise en forme et une règle de pluriel."

# 4001d9a2d6e1455e9c7930a536a7d803
#: ../../../../1.9/docs/releases/1.9.txt:397
msgid ""
"Added the ``name_translated`` attribute to the object returned by the "
":ttag:`get_language_info` template tag. Also added a corresponding template "
"filter: :tfilter:`language_name_translated`."
msgstr "L'attribut ``name_translated`` a été ajouté à l'objet renvoyé par la balise de gabarit :ttag:`get_language_info`. Un filtre de gabarit similaire a aussi été ajouté : :tfilter:`language_name_translated`."

# 5a2566a5a4b343cc8657d865576fc7b4
#: ../../../../1.9/docs/releases/1.9.txt:401
msgid ""
"You can now run :djadmin:`compilemessages` from the root directory of your "
"project and it will find all the app message files that were created by "
":djadmin:`makemessages`."
msgstr "Vous pouvez maintenant exécuter :djadmin:`compilemessages` à partir du répertoire racine d'un projet et elle trouvera tous les fichiers de messages qui ont été créés par :djadmin:`makemessages`."

# a1c91621930d4d7396e24c18a5e8beea
#: ../../../../1.9/docs/releases/1.9.txt:405
msgid ""
":djadmin:`makemessages` now calls xgettext once per locale directory rather "
"than once per translatable file. This speeds up localization builds."
msgstr ":djadmin:`makemessages` appelle maintenant xgettext une fois par répertoire de langue au lieu d'une fois par fichier traduisible. Cela accélère la construction des catalogues de traduction."

# 38c408c3d7964989b073013198b2620f
#: ../../../../1.9/docs/releases/1.9.txt:408
msgid ""
":ttag:`blocktrans` supports assigning its output to a variable using "
"``asvar``."
msgstr ":ttag:`blocktrans` permet d'attribuer son résultat à une variable avec ``asvar``."

# 4ffa53c2ae6a4292b121aa0dd399db93
#: ../../../../1.9/docs/releases/1.9.txt:411
msgid ""
"Two new languages are available: Colombian Spanish and Scottish Gaelic."
msgstr "Deux nouvelles langues sont disponibles : l'espagnol colombien et le gaélique écossais."

# 9695714ceb934fe6940dfdfd490648d2
#: ../../../../1.9/docs/releases/1.9.txt:416
msgid ""
"The new :djadmin:`sendtestemail` command lets you send a test email to "
"easily confirm that email sending through Django is working."
msgstr "La nouvelle commande :djadmin:`sendtestemail` permet d'envoyer un courriel de test pour confirmer facilement que l'envoi de courriels au travers de Django fonctionne."

# 3de1cce45c1b4d16b88b1a12fe1691f1
#: ../../../../1.9/docs/releases/1.9.txt:419
msgid ""
"To increase the readability of the SQL code generated by "
":djadmin:`sqlmigrate`, the SQL code generated for each migration operation "
"is preceded by the operation's description."
msgstr "Pour améliorer la lisibilité du code SQL généré par la commande :djadmin:`sqlmigrate`, le code SQL généré pour chaque opération de migration est précédé par la description de l'opération."

# 4ffe7682dd67408d9887238a0f540b3a
#: ../../../../1.9/docs/releases/1.9.txt:423
msgid ""
"The :djadmin:`dumpdata` command output is now deterministically ordered. "
"Moreover, when the ``--output`` option is specified, it also shows a "
"progress bar in the terminal."
msgstr "Le résultat produit par la commande :djadmin:`dumpdata` est maintenant ordonné de manière déterministe. De plus, lorsque l'option ``--output`` est donnée, la commande affiche aussi une barre de progression dans le terminal."

# 129dda80972440fabab5f163fe700aae
#: ../../../../1.9/docs/releases/1.9.txt:427
msgid ""
"The :djadmin:`createcachetable` command now has a ``--dry-run`` flag to "
"print out the SQL rather than execute it."
msgstr "La commande :djadmin:`createcachetable` offre maintenant une option ``--dry-run`` pour afficher le code SQL au lieu de l'exécuter."

# f1eeed430153447a87f91fb2f7d27eed
#: ../../../../1.9/docs/releases/1.9.txt:430
msgid ""
"The :djadmin:`startapp` command creates an ``apps.py`` file. Since it "
"doesn't use ``default_app_config`` (:ref:`a discouraged API <configuring-"
"applications-ref>`), you must specify the app config's path, e.g. "
"``'polls.apps.PollsConfig'``, in :setting:`INSTALLED_APPS` for it to be used"
" (instead of just ``'polls'``)."
msgstr "La commande :djadmin:`startapp` crée un fichier ``apps.py``. Comme celui-ci ne contient pas ``default_app_config`` (une :ref:`API découragée <configuring-applications-ref>`), vous devez indiquer le chemin de la configuration d'application dans :setting:`INSTALLED_APPS`, par exemple ``'polls.apps.PollsConfig'``, pour que la configuration soit utilisée (au lieu d'un simple ``'polls'``)."

# 52cb94f2bb004101874837dfca771682
#: ../../../../1.9/docs/releases/1.9.txt:436
msgid ""
"When using the PostgreSQL backend, the :djadmin:`dbshell` command can "
"connect to the database using the password from your settings file (instead "
"of requiring it to be manually entered)."
msgstr "Avec le moteur PostgreSQL, la commande :djadmin:`dbshell` peut se connecter à la base de données en utilisant le mot de passe provenant du fichier des réglages (au lieu de devoir le saisir manuellement)."

# 35d4c917d7a2408d8051d796c65e9d24
#: ../../../../1.9/docs/releases/1.9.txt:440
msgid ""
"The ``django`` package may be run as a script, i.e. ``python -m django``, "
"which will behave the same as ``django-admin``."
msgstr "Le paquet ``django`` peut être exécuté comme un script, comme par exemple ``python -m django``, ce qui produira le même comportement que ``django-admin``."

# e08ad17abed54ef9a772ba732ca560fe
#: ../../../../1.9/docs/releases/1.9.txt:443
msgid ""
"Management commands that have the ``--noinput`` option now also take ``--no-"
"input`` as an alias for that option."
msgstr "Les commandes d'administration possédant l'option ``--noinput`` acceptent maintenant également ``--no-input`` comme alias de cette option. "

# 3d0a8d75ad174613a871fdf80ac7eeda
#: ../../../../1.9/docs/releases/1.9.txt:449
msgid ""
"Initial migrations are now marked with an :attr:`initial = True "
"<django.db.migrations.Migration.initial>` class attribute which allows "
":djadminopt:`migrate --fake-initial <--fake-initial>` to more easily detect "
"initial migrations."
msgstr "Les migrations initiales sont maintenant marquées avec un attribut de classe :attr:`initial = True <django.db.migrations.Migration.initial>` qui permet à :djadminopt:`migrate --fake-initial <--fake-initial>` de détecter plus facilement les migrations initiales."

# b682c86063314a05a13baa545f792e48
#: ../../../../1.9/docs/releases/1.9.txt:454
msgid ""
"Added support for serialization of ``functools.partial`` and ``LazyObject`` "
"instances."
msgstr "La prise en charge de la sérialisation d'instances ``functools.partial`` et ``LazyObject`` a été ajoutée."

# 5e87c72047e64a0aa5842dfce74c7bb3
#: ../../../../1.9/docs/releases/1.9.txt:457
msgid ""
"When supplying ``None`` as a value in :setting:`MIGRATION_MODULES`, Django "
"will consider the app an app without migrations."
msgstr "Lorsqu'on indique la valeur ``None`` pour un élément dans :setting:`MIGRATION_MODULES`, Django considère que cette application ne possède pas de migration."

# c7269c000873442385de5f588255e58c
#: ../../../../1.9/docs/releases/1.9.txt:460
msgid ""
"When applying migrations, the \"Rendering model states\" step that's "
"displayed when running migrate with verbosity 2 or higher now computes only "
"the states for the migrations that have already been applied. The model "
"states for migrations being applied are generated on demand, drastically "
"reducing the amount of required memory."
msgstr "Lors de l'application des migrations, l'étape « rendu des états de modèles » qui apparaît lors de l'exécution des migrations avec une verbosité de 2 ou plus élevée calcule maintenant uniquement les états des migrations qui ont déjà été appliquées. Les états de modèles des migrations en cours d'application sont générés à la demande, ce qui réduit drastiquement la quantité de mémoire nécessaire."

# 1e6186ab1a204a4898439f2d921ac4bb
#: ../../../../1.9/docs/releases/1.9.txt:466
msgid ""
"However, this improvement is not available when unapplying migrations and "
"therefore still requires the precomputation and storage of the intermediate "
"migration states."
msgstr "Cependant, cette amélioration n'est pas disponible lors de l'inversion des migrations et, dans ce cas, il est toujours nécessaire de précalculer et de stocker les états des migrations intermédiaires."

# 9fe84a1553894988878492e74955a8a8
#: ../../../../1.9/docs/releases/1.9.txt:470
msgid ""
"This improvement also requires that Django no longer supports mixed "
"migration plans. Mixed plans consist of a list of migrations where some are "
"being applied and others are being unapplied. This was never officially "
"supported and never had a public API that supports this behavior."
msgstr "Cette amélioration est aussi la cause de la non prise en charge par Django des plans de migration mixtes. Ces plans mixtes consistent en une liste de migrations où certaines doivent être appliquées et d'autres inversées. Cela n'a jamais été officiellement pris en charge et il n'existait pas d'API publique qui s'appuyait sur ce comportement."

# 760de10e350e4dd18b4c30e9f7eac7e4
#: ../../../../1.9/docs/releases/1.9.txt:475
msgid ""
"The :djadmin:`squashmigrations` command now supports specifying the starting"
" migration from which migrations will be squashed."
msgstr "La commande :djadmin:`squashmigrations` accepte dorénavant la possibilité d'indiquer la migration de départ à partir de laquelle les migrations sont fusionnées."

# 38b48b25a2e94d1faee77bd04a6d1c7a
#: ../../../../1.9/docs/releases/1.9.txt:481
msgid ""
":meth:`QuerySet.bulk_create() <django.db.models.query.QuerySet.bulk_create>`"
" now works on proxy models."
msgstr ":meth:`QuerySet.bulk_create() <django.db.models.query.QuerySet.bulk_create>` fonctionne maintenant aussi pour des modèles mandataires."

# 01f6a5a02c494ab0a72a7ab7a5cacc9a
#: ../../../../1.9/docs/releases/1.9.txt:484
msgid ""
"Database configuration gained a :setting:`TIME_ZONE <DATABASE-TIME_ZONE>` "
"option for interacting with databases that store datetimes in local time and"
" don't support time zones when :setting:`USE_TZ` is ``True``."
msgstr "La configuration des bases de données contient une nouvelle option :setting:`TIME_ZONE <DATABASE-TIME_ZONE>` pour interagir avec les bases de données qui stockent les dates/heures en heure locale et qui ne prennent pas en charge les fuseaux horaires lorsque :setting:`USE_TZ` vaut ``True``."

# fd60828aded54c97be5d76aee2a959c6
#: ../../../../1.9/docs/releases/1.9.txt:488
msgid ""
"Added the :meth:`RelatedManager.set() "
"<django.db.models.fields.related.RelatedManager.set()>` method to the "
"related managers created by ``ForeignKey``, ``GenericForeignKey``, and "
"``ManyToManyField``."
msgstr "La méthode :meth:`RelatedManager.set() <django.db.models.fields.related.RelatedManager.set()>` a été ajoutée aux gestionnaires de relations créés par les champs ``ForeignKey``, ``GenericForeignKey`` et ``ManyToManyField``."

# f0cc71c4c2a14efeb1de50fd6ee2cfde
#: ../../../../1.9/docs/releases/1.9.txt:493
msgid ""
"The :meth:`~django.db.models.fields.related.RelatedManager.add` method on a "
"reverse foreign key now has a ``bulk`` parameter to allow executing one "
"query regardless of the number of objects being added rather than one query "
"per object."
msgstr "La méthode :meth:`~django.db.models.fields.related.RelatedManager.add` du côté opposé d'une clé étrangère possède maintenant un paramètre ``bulk`` pour permettre l'exécution d'une seule requête quel que soit le nombre d'objets à ajouter, au lieu d'exiger une requête par objet."

# 0038fa291b894d32b716184c4f666ded
#: ../../../../1.9/docs/releases/1.9.txt:498
msgid ""
"Added the ``keep_parents`` parameter to :meth:`Model.delete() "
"<django.db.models.Model.delete>` to allow deleting only a child's data in a "
"model that uses multi-table inheritance."
msgstr "Le paramètre ``keep_parents`` a été ajouté à :meth:`Model.delete() <django.db.models.Model.delete>` pour permettre de ne supprimer que les données « enfant » d'un modèle qui hérite d'autres tables."

# 1fa604b7b20e4f61990483e037562b95
#: ../../../../1.9/docs/releases/1.9.txt:502
msgid ""
":meth:`Model.delete() <django.db.models.Model.delete>` and "
":meth:`QuerySet.delete() <django.db.models.query.QuerySet.delete>` return "
"the number of objects deleted."
msgstr ":meth:`Model.delete() <django.db.models.Model.delete>` et :meth:`QuerySet.delete() <django.db.models.query.QuerySet.delete>` renvoient le nombre d'objets supprimés."

# 56d96273fb29480ebb931c27f7219d1f
#: ../../../../1.9/docs/releases/1.9.txt:506
msgid ""
"Added a system check to prevent defining both ``Meta.ordering`` and "
"``order_with_respect_to`` on the same model."
msgstr "Un contrôle système a été ajouté pour empêcher de définir à la fois ``Meta.ordering`` et ``order_with_respect_to`` pour le même modèle."

# 3f44caf251f14c039725329329ccfad6
#: ../../../../1.9/docs/releases/1.9.txt:509
msgid ""
":lookup:`Date and time <year>` lookups can be chained with other lookups "
"(such as :lookup:`exact`, :lookup:`gt`, :lookup:`lt`, etc.). For example: "
"``Entry.objects.filter(pub_date__month__gt=6)``."
msgstr "Les interrogations de :lookup:`date et d'heure <year>` peuvent être suivies d'autres interrogations (comme :lookup:`exact`, :lookup:`gt`, :lookup:`lt`, etc.). Par exemple, ``Entry.objects.filter(pub_date__month__gt=6)``."

# 8e33561eb54c437791a9efee41881afe
#: ../../../../1.9/docs/releases/1.9.txt:513
msgid ""
"Time lookups (hour, minute, second) are now supported by "
":class:`~django.db.models.TimeField` for all database backends. Support for "
"backends other than SQLite was added but undocumented in Django 1.7."
msgstr "Les interrogations d'heure (heure, minute, seconde) sont maintenant prises en charge par :class:`~django.db.models.TimeField` pour tous les moteurs de base de données. Sauf pour SQLite, ces interrogations étaient déjà disponibles depuis Django 1.7, mais non documentées."

# ad3458bd08db4324b0fce936ae96207d
#: ../../../../1.9/docs/releases/1.9.txt:517
msgid ""
"You can specify the ``output_field`` parameter of the "
":class:`~django.db.models.Avg` aggregate in order to aggregate over non-"
"numeric columns, such as ``DurationField``."
msgstr "Le paramètre ``output_field`` a été ajouté pour permettre l'agrégation :class:`~django.db.models.Avg` sur des colonnes non numériques, comme par exemple ``DurationField``."

# f2042bf2f0e849c3b9b6350c9850f1b3
#: ../../../../1.9/docs/releases/1.9.txt:521
msgid ""
"Added the :lookup:`date` lookup to :class:`~django.db.models.DateTimeField` "
"to allow querying the field by only the date portion."
msgstr "L'interrogation :lookup:`date` a été ajoutée à :class:`~django.db.models.DateTimeField` pour permettre d'interroger le champ par la seule portion de date."

# a1a3319ba22042c095f9f2b0c7317a32
#: ../../../../1.9/docs/releases/1.9.txt:524
msgid ""
"Added the :class:`~django.db.models.functions.Greatest` and "
":class:`~django.db.models.functions.Least` database functions."
msgstr "Les fonctions de base de données :class:`~django.db.models.functions.Greatest` et :class:`~django.db.models.functions.Least` ont été ajoutées."

# 62c4c8cd8ee04b1ea024847c908793da
#: ../../../../1.9/docs/releases/1.9.txt:527
msgid ""
"Added the :class:`~django.db.models.functions.Now` database function, which "
"returns the current date and time."
msgstr "La fonction de base de données :class:`~django.db.models.functions.Now` a été ajoutée ; celle-ci renvoie la date et l'heure courantes."

# 40b22c9ee7c245899337bfc578612a89
#: ../../../../1.9/docs/releases/1.9.txt:530
msgid ""
":class:`~django.db.models.Transform` is now a subclass of :ref:`Func() "
"<func-expressions>` which allows ``Transform``\\s to be used on the right "
"hand side of an expression, just like regular ``Func``\\s. This allows "
"registering some database functions like "
":class:`~django.db.models.functions.Length`, "
":class:`~django.db.models.functions.Lower`, and "
":class:`~django.db.models.functions.Upper` as transforms."
msgstr ":class:`~django.db.models.Transform` est dorénavant une sous-classe de :ref:`Func() <func-expressions>`, ce qui permet aux objets ``Transform`` d'être utilisés dans la partie droite d'une expression, comme pour les objets ``Func`` normaux. Cela permet d'inscrire certaines fonctions de base de données comme :class:`~django.db.models.functions.Length`, :class:`~django.db.models.functions.Lower` et :class:`~django.db.models.functions.Upper` en tant que transformations."

# f2102fe202944777964d5f7beaeb6618
#: ../../../../1.9/docs/releases/1.9.txt:538
msgid ""
":class:`~django.db.models.SlugField` now accepts an "
":attr:`~django.db.models.SlugField.allow_unicode` argument to allow Unicode "
"characters in slugs."
msgstr ":class:`~django.db.models.SlugField` accepte dorénavant un paramètre :attr:`~django.db.models.SlugField.allow_unicode` pour autoriser les caractères Unicode dans les « slugs »."

# f2e7234805034c9c9fc3e13b69140c64
#: ../../../../1.9/docs/releases/1.9.txt:542
msgid "Added support for referencing annotations in ``QuerySet.distinct()``."
msgstr "Il est maintenant possible de référencer les annotations dans ``QuerySet.distinct()``."

# 61c1090b7a1f4b4a8b9c296f524344e6
#: ../../../../1.9/docs/releases/1.9.txt:544
msgid ""
"``connection.queries`` shows queries with substituted parameters on SQLite."
msgstr "Avec SQLite, ``connection.queries`` affiche les requêtes avec les paramètres substitués."

# 6b525e74bbaf4b4a9c6c4f76035b74dd
#: ../../../../1.9/docs/releases/1.9.txt:546
msgid ""
":doc:`Query expressions </ref/models/expressions>` can now be used when "
"creating new model instances using ``save()``, ``create()``, and "
"``bulk_create()``."
msgstr "Les :doc:`expressions de requête </ref/models/expressions>` peuvent maintenant être utilisées lors de la création de nouvelles instances de modèles avec ``save()``, ``create()`` et ``bulk_create()``."

# 1c58c7e1be6548f7a3163841793b842c
#: ../../../../1.9/docs/releases/1.9.txt:553
msgid ""
"Unless :attr:`HttpResponse.reason_phrase "
"<django.http.HttpResponse.reason_phrase>` is explicitly set, it now is "
"determined by the current value of :attr:`HttpResponse.status_code "
"<django.http.HttpResponse.status_code>`. Modifying the value of "
"``status_code`` outside of the constructor will also modify the value of "
"``reason_phrase``."
msgstr "Tant que :attr:`HttpResponse.reason_phrase <django.http.HttpResponse.reason_phrase>` n'est pas explicitement défini, sa valeur est maintenant déterminée par la valeur actuelle de :attr:`HttpResponse.status_code <django.http.HttpResponse.status_code>`. La modification de  ``status_code`` en dehors du constructeur modifie également la valeur de ``reason_phrase``."

# 637fb690e8254b7888c3bbda03ab0379
#: ../../../../1.9/docs/releases/1.9.txt:560
msgid "The debug view now shows details of chained exceptions on Python 3."
msgstr "La vue de débogage affiche maintenant les détails de la chaîne des exceptions avec Python 3."

# 6a23c28e4bf941d4bac5b61e84a2b3eb
#: ../../../../1.9/docs/releases/1.9.txt:562
msgid ""
"The default 40x error views now accept a second positional parameter, the "
"exception that triggered the view."
msgstr "Les vues d'erreur 40x par défaut acceptent maintenant un second paramètre positionnel, l'exception qui a déclenché l'erreur."

# 6209c566ed314872a37b2c706c2290f7
#: ../../../../1.9/docs/releases/1.9.txt:565
msgid ""
"View error handlers now support "
":class:`~django.template.response.TemplateResponse`, commonly used with "
"class-based views."
msgstr "Les gestionnaires des vues d'erreur prennent maintenant en charge :class:`~django.template.response.TemplateResponse`, qui sont couramment utilisées avec les vues fondées sur les classes."

# fc4dcc73cf0e424cac2afd428a17d679
#: ../../../../1.9/docs/releases/1.9.txt:569
msgid ""
"Exceptions raised by the ``render()`` method are now passed to the "
"``process_exception()`` method of each middleware."
msgstr "Les exceptions générées par la méthode ``render()`` sont maintenant aussi transmises à la méthode ``process_exception()`` de chaque intergiciel."

# 2bb6634da0b7472fa227fba7b9b1138b
#: ../../../../1.9/docs/releases/1.9.txt:572
msgid ""
"Request middleware can now set :attr:`HttpRequest.urlconf "
"<django.http.HttpRequest.urlconf>` to ``None`` to revert any changes made by"
" previous middleware and return to using the :setting:`ROOT_URLCONF`."
msgstr "Les intergiciels de requête peuvent maintenant définir :attr:`HttpRequest.urlconf <django.http.HttpRequest.urlconf>` à ``None`` pour annuler tout changement effectué par un intergiciel précédent et revenir à la valeur :setting:`ROOT_URLCONF` de départ."

# 06f1c5ccb0c74f1c9911a2e6767aa8ff
#: ../../../../1.9/docs/releases/1.9.txt:576
msgid ""
"The :setting:`DISALLOWED_USER_AGENTS` check in "
":class:`~django.middleware.common.CommonMiddleware` now raises a "
":class:`~django.core.exceptions.PermissionDenied` exception as opposed to "
"returning an :class:`~django.http.HttpResponseForbidden` so that "
":data:`~django.conf.urls.handler403` is invoked."
msgstr "Le contrôle :setting:`DISALLOWED_USER_AGENTS` dans :class:`~django.middleware.common.CommonMiddleware` génère maintenant une exception :class:`~django.core.exceptions.PermissionDenied`  au lieu de :class:`~django.http.HttpResponseForbidden` afin que la vue :data:`~django.conf.urls.handler403` soit appelée."

# 8b3e6b1388aa4ac489bc6d42beff354b
#: ../../../../1.9/docs/releases/1.9.txt:582
msgid ""
"Added :meth:`HttpRequest.get_port() <django.http.HttpRequest.get_port>` to "
"fetch the originating port of the request."
msgstr ":meth:`HttpRequest.get_port() <django.http.HttpRequest.get_port>` a été ajoutée pour récupérer le port d'origine de la requête."

# 6afd92eba5af4f75a724c00b7d5194a4
#: ../../../../1.9/docs/releases/1.9.txt:585
msgid ""
"Added the ``json_dumps_params`` parameter to "
":class:`~django.http.JsonResponse` to allow passing keyword arguments to the"
" ``json.dumps()`` call used to generate the response."
msgstr "Le paramètre ``json_dumps_params`` a été ajouté à :class:`~django.http.JsonResponse` pour permettre la transmission de paramètres nommés à l'appel ``json.dumps()`` utilisé pour produire la réponse."

# 5bd65e76728e4154872403a3a2f67bec
#: ../../../../1.9/docs/releases/1.9.txt:589
msgid ""
"The :class:`~django.middleware.common.BrokenLinkEmailsMiddleware` now "
"ignores 404s when the referer is equal to the requested URL. To circumvent "
"the empty referer check already implemented, some Web bots set the referer "
"to the requested URL."
msgstr "L'intergiciel :class:`~django.middleware.common.BrokenLinkEmailsMiddleware` ignore dorénavant les erreurs 404 lorsque le référant est égal à l'URL demandée. Pour contourner le contrôle du référant vide déjà implémenté, certains robots Web définissent le référant à la même valeur que l'URL demandée."

# 327f6932cc5844cfaf5a29298e3a23b0
#: ../../../../1.9/docs/releases/1.9.txt:597
msgid ""
"Template tags created with the :meth:`~django.template.Library.simple_tag` "
"helper can now store results in a template variable by using the ``as`` "
"argument."
msgstr "Les balises de gabarit créés avec l'utilitaire :meth:`~django.template.Library.simple_tag` peuvent maintenant stocker leur résultat dans une variable de gabarit en utilisant le paramètre ``as``."

# 26954ea9313745e28f1ade8333dc9387
#: ../../../../1.9/docs/releases/1.9.txt:601
msgid ""
"Added a :meth:`Context.setdefault() <django.template.Context.setdefault>` "
"method."
msgstr "La méthode :meth:`Context.setdefault() <django.template.Context.setdefault>` a été ajoutée."

# ae5e109984d24f74b19c01649b5e5314
#: ../../../../1.9/docs/releases/1.9.txt:604
msgid ""
"The :ref:`django.template <django-template-logger>` logger was added and "
"includes the following messages:"
msgstr "Le journaliseur :ref:`django.template <django-template-logger>` a été ajouté et reçoit les messages suivants :"

# 86cfa87d35af450f911897e9c0fe83a4
#: ../../../../1.9/docs/releases/1.9.txt:607
msgid "A ``DEBUG`` level message for missing context variables."
msgstr "Un message de niveau ``DEBUG`` pour les variables de contexte manquantes."

# 39d72770d38e4bfd8109cd0684774874
#: ../../../../1.9/docs/releases/1.9.txt:609
msgid ""
"A ``WARNING`` level message for uncaught exceptions raised during the "
"rendering of an ``{% include %}`` when debug mode is off (helpful since ``{%"
" include %}`` silences the exception and returns an empty string)."
msgstr "Un message de niveau ``WARNING`` pour les exceptions non interceptées générées pendant le rendu d'une balise ``{% include %}`` lorsque le mode débogage est désactivé (utile car ``{% include %}`` réduit au silence l'exception et renvoie une chaîne vide)."

# 0b2971fb3e314068899bcfa0ad16bbe3
#: ../../../../1.9/docs/releases/1.9.txt:614
msgid ""
"The :ttag:`firstof` template tag supports storing the output in a variable "
"using 'as'."
msgstr "La balise de gabarit :ttag:`firstof` permet de stocker son résultat dans une variable avec ``as``."

# 1c35fa4cdc2c4f5d81972e8591d0c70e
#: ../../../../1.9/docs/releases/1.9.txt:617
msgid ""
":meth:`Context.update() <django.template.Context.update>` can now be used as"
" a context manager."
msgstr ":meth:`Context.update() <django.template.Context.update>` peut maintenant être utilisée comme gestionnaire de contexte."

# 9a127baa2ee249b7a10670402f9cb51a
#: ../../../../1.9/docs/releases/1.9.txt:620
msgid "Django template loaders can now extend templates recursively."
msgstr "Les chargeurs de gabarit de Django peuvent maintenant étendre des gabarits de manière récursive."

# 6df1fbdc231544e99c2ec5f5626cd220
#: ../../../../1.9/docs/releases/1.9.txt:622
msgid ""
"The debug page template postmortem now include output from each engine that "
"is installed."
msgstr "Le gabarit « postmortem » de la page de débogage inclut dorénavant un résultat pour chaque moteur de gabarit installé."

# 6d58d93b2f824854af0c50dfc732bd6e
#: ../../../../1.9/docs/releases/1.9.txt:625
msgid ""
":ref:`Debug page integration <template-debug-integration>` for custom "
"template engines was added."
msgstr "L':ref:`intégration de la page de débogage <template-debug-integration>` pour les moteurs de gabarit personnalisés a été ajoutée."

# 95aa5fee98fb443ea87f749d5c2cf783
#: ../../../../1.9/docs/releases/1.9.txt:628
msgid ""
"The :class:`~django.template.backends.django.DjangoTemplates` backend gained"
" the ability to register libraries and builtins explicitly through the "
"template :setting:`OPTIONS <TEMPLATES-OPTIONS>`."
msgstr "Il est maintenant possible d'inscrire explicitement des bibliothèques et des éléments intégrés pour le moteur :class:`~django.template.backends.django.DjangoTemplates` au moyen du réglage de gabarit :setting:`OPTIONS <TEMPLATES-OPTIONS>`."

# 3d282031ab4340f19be09726355188ab
#: ../../../../1.9/docs/releases/1.9.txt:632
msgid ""
"The ``timesince`` and ``timeuntil`` filters were improved to deal with leap "
"years when given large time spans."
msgstr "Les filtres ``timesince`` et ``timeuntil`` ont été améliorés pour tenir compte des années bissextiles pour de grands intervalles de temps."

# 8e191782572c4a0cbd22aff306bf9bd5
#: ../../../../1.9/docs/releases/1.9.txt:635
msgid ""
"The ``include`` tag now caches parsed templates objects during template "
"rendering, speeding up reuse in places such as for loops."
msgstr "La balise ``include`` met dorénavant en cache les objets gabarits analysés durant le processus de rendu des gabarits, accélérant la réutilisation dans des endroits comme les boucles ``for``."

# e076c129170f4fc69284c93f8f40cd11
#: ../../../../1.9/docs/releases/1.9.txt:641
msgid ""
"Added the :meth:`json() <django.test.Response.json>` method to test client "
"responses to give access to the response body as JSON."
msgstr "La méthode :meth:`json() <django.test.Response.json>` a été ajoutée aux réponses du client de test pour donner accès au corps de la réponse en format JSON."

# a07e7f9c6c5c432fb704b8c87e818f6d
#: ../../../../1.9/docs/releases/1.9.txt:644
msgid ""
"Added the :meth:`~django.test.Client.force_login()` method to the test "
"client. Use this method to simulate the effect of a user logging into the "
"site while skipping the authentication and verification steps of "
":meth:`~django.test.Client.login()`."
msgstr "La méthode :meth:`~django.test.Client.force_login()` a été ajoutée au client de test. Utilisez cette méthode pour simuler l'effet d'un utilisateur se connectant au site tout en évitant de passer par les étapes d'authentification et de vérification de :meth:`~django.test.Client.login()`."

# 4d9c30185fe3451caac69e834b37647c
#: ../../../../1.9/docs/releases/1.9.txt:652
msgid ""
"Regular expression lookaround assertions are now allowed in URL patterns."
msgstr "Les assertions de type « lookaround » sont maintenant autorisées dans les expressions régulières des motifs d'URL."

# 3ec63f41448c447faf1e6a449cd17424
#: ../../../../1.9/docs/releases/1.9.txt:654
msgid ""
"The application namespace can now be set using an ``app_name`` attribute on "
"the included module or object. It can also be set by passing a 2-tuple of "
"(<list of patterns>, <application namespace>) as the first argument to "
":func:`~django.conf.urls.include`."
msgstr "L'espace de noms d'application peut maintenant être défini à l'aide d'un attribut ``app_name`` sur le module ou l'objet inclus. Il peut également être défini en passant un tuple binaire (<liste de motifs>, <espace de nom d'application>) comme premier paramètre de :func:`~django.conf.urls.include`."

# 3ca1526fd43746df9f5ee05fc2bd5a4b
#: ../../../../1.9/docs/releases/1.9.txt:659
msgid "System checks have been added for common URL pattern mistakes."
msgstr "Des contrôles système ont été ajoutés pour les erreurs courantes dans les motifs d'URL."

# 4e451189150245e18b331c162d04db9c
#: ../../../../1.9/docs/releases/1.9.txt:664
msgid ""
"Added :func:`django.core.validators.int_list_validator` to generate "
"validators of strings containing integers separated with a custom character."
msgstr ":func:`django.core.validators.int_list_validator` a été ajouté pour générer des validateurs de chaînes contenant des nombres entiers séparés par un caractère personnalisé."

# b3728491598b46caae2c2d5164709677
#: ../../../../1.9/docs/releases/1.9.txt:667
msgid ""
":class:`~django.core.validators.EmailValidator` now limits the length of "
"domain name labels to 63 characters per :rfc:`1034`."
msgstr ":class:`~django.core.validators.EmailValidator` limite dorénavant la longueur des parties de noms de domaine à 63 caractères, en accord avec la :rfc:`1034`."

# 4c4b73a0a85d4944ad88a4820d115fdc
#: ../../../../1.9/docs/releases/1.9.txt:670
msgid ""
"Added :func:`~django.core.validators.validate_unicode_slug` to validate "
"slugs that may contain Unicode characters."
msgstr ":func:`~django.core.validators.validate_unicode_slug` a été ajouté pour valider des « slugs » pouvant contenir des caractères Unicode."

# 75656d882c3d45f7a2c2ff45691d18d0
#: ../../../../1.9/docs/releases/1.9.txt:674
msgid "Backwards incompatible changes in 1.9"
msgstr "Changements incompatibles avec les anciennes versions dans Django 1.9"

# 3ae674ddc0384bfda4d8dbd5b1f58f46
#: ../../../../1.9/docs/releases/1.9.txt:678
msgid ""
"In addition to the changes outlined in this section, be sure to review the "
":ref:`removed-features-1.9` for the features that have reached the end of "
"their deprecation cycle and therefore been removed. If you haven't updated "
"your code within the deprecation timeline for a given feature, its removal "
"may appear as a backwards incompatible change."
msgstr "En plus des modifications détaillées dans cette section, prenez soin de parcourir les :ref:`removed-features-1.9` énumérant les fonctionnalités ayant terminé leur cycle d'obsolescence et qui ont donc été supprimées. Si vous n'avez pas mis à jour votre code dans le temps imparti par la période d'obsolescence d'une certaine fonctionnalité, sa suppression pourrait apparaître comme un changement incompatible avec les anciennes versions."

# 5bc008af0cfb4c6e9fa42f872f4b94f1
#: ../../../../1.9/docs/releases/1.9.txt:687
msgid ""
"A couple of new tests rely on the ability of the backend to introspect "
"column defaults (returning the result as ``Field.default``). You can set the"
" ``can_introspect_default`` database feature to ``False`` if your backend "
"doesn't implement this. You may want to review the implementation on the "
"backends that Django includes for reference (:ticket:`24245`)."
msgstr "Quelques nouveaux tests reposent sur la capacité du moteur d'examiner les valeurs par défaut des colonnes (renvoyant le résultat dans ``Field.default``). Vous pouvez définir la fonctionnalité de base de données ``can_introspect_default`` à ``False`` si votre moteur ne permet pas cette introspection. Vous pouvez passer en revue la mise en œuvre sur les moteurs inclus dans Django pour référence (:ticket:`24245`)."

# 42b9b6511c574527901b34dc293af301
#: ../../../../1.9/docs/releases/1.9.txt:693
msgid ""
"Registering a global adapter or converter at the level of the DB-API module "
"to handle time zone information of :class:`~datetime.datetime` values passed"
" as query parameters or returned as query results on databases that don't "
"support time zones is discouraged. It can conflict with other libraries."
msgstr "Il est déconseillé d'enregistrer un adaptateur ou un convertisseur global au niveau du module DB-API pour gérer les informations de fuseau horaire des valeurs :class:`~datetime.datetime` passées comme paramètres de requête ou renvoyés comme résultats de requêtes avec des bases de données qui ne prennent pas en charge les fuseaux horaires. Cela peut engendrer des conflits avec d'autres bibliothèques."

# 3c9bd5d4b83941f4bcbaeca0d611867c
#: ../../../../1.9/docs/releases/1.9.txt:698
msgid ""
"The recommended way to add a time zone to :class:`~datetime.datetime` values"
" fetched from the database is to register a converter for ``DateTimeField`` "
"in ``DatabaseOperations.get_db_converters()``."
msgstr "La méthode recommandée pour ajouter un fuseau horaire aux valeurs :class:`~datetime.datetime` obtenues de la base de données est d'inscrire un convertisseur pour les champs ``DateTimeField`` dans ``DatabaseOperations.get_db_converters()``."

# 08b5515ec3894457ad4e6dba61d36614
#: ../../../../1.9/docs/releases/1.9.txt:702
msgid ""
"The ``needs_datetime_string_cast`` database feature was removed. Database "
"backends that set it must register a converter instead, as explained above."
msgstr "La fonctionnalité de base de données ``needs_datetime_string_cast`` a été supprimée. Les moteurs de base de données qui la définissent doivent inscrire un convertisseur à la place, comme expliqué ci-dessus."

# 22b0abf68ca94c1789521b4e42227ac6
#: ../../../../1.9/docs/releases/1.9.txt:705
msgid ""
"The ``DatabaseOperations.value_to_db_<type>()`` methods were renamed to "
"``adapt_<type>field_value()`` to mirror the ``convert_<type>field_value()`` "
"methods."
msgstr "Les méthodes ``DatabaseOperations.value_to_db_<type>()`` ont été renommées en ``adapt_<type>field_value()`` par cohérence avec les méthodes ``convert_<type>field_value()``."

# 66d4a534fe9647bfa34019d5fca39083
#: ../../../../1.9/docs/releases/1.9.txt:709
msgid ""
"To use the new ``date`` lookup, third-party database backends may need to "
"implement the ``DatabaseOperations.datetime_cast_date_sql()`` method."
msgstr "Pour utiliser la nouvelle interrogation ``date``, les moteurs de base de données tiers pourraient devoir implémenter la méthode ``DatabaseOperations.datetime_cast_date_sql()``."

# 53a3098ef2e8422ca9ec81c100b6e0bc
#: ../../../../1.9/docs/releases/1.9.txt:712
msgid ""
"The ``DatabaseOperations.time_extract_sql()`` method was added. It calls the"
" existing ``date_extract_sql()`` method. This method is overridden by the "
"SQLite backend to add time lookups (hour, minute, second) to "
":class:`~django.db.models.TimeField`, and may be needed by third-party "
"database backends."
msgstr "La méthode ``DatabaseOperations.time_extract_sql()`` a été ajoutée. Elle appelle la méthode existante ``date_extract_sql()``. Cette méthode est surchargée par le moteur SQLite pour ajouter les interrogations horaires (heure, minute, seconde) aux champs :class:`~django.db.models.TimeField`. Certains moteurs de base de données tiers pourraient avoir à faire de même."

# 007d40e32e1b4b06992ed5b4208189a0
#: ../../../../1.9/docs/releases/1.9.txt:718
msgid ""
"The ``DatabaseOperations.datetime_cast_sql()`` method (not to be confused "
"with ``DatabaseOperations.datetime_cast_date_sql()`` mentioned above) has "
"been removed. This method served to format dates on Oracle long before 1.0, "
"but hasn't been overridden by any core backend in years and hasn't been "
"called anywhere in Django's code or tests."
msgstr "La méthode ``DatabaseOperations.datetime_cast_sql()`` (à ne pas confondre avec ``DatabaseOperations.datetime_cast_date_sql()`` citée ci-dessus) a été supprimée. Cette méthode étaient utilisée pour mettre en forme les dates avec Oracle bien avant la version 1.0, mais n'a pas été surchargée par d'autres moteurs intégrés durant des années, et n'a pas non plus été appelée depuis d'autres endroits du code ou des tests de Django."

# 3d4a218f85d840d6b83978b06768a61b
#: ../../../../1.9/docs/releases/1.9.txt:724
msgid ""
"In order to support test parallelization, you must implement the "
"``DatabaseCreation._clone_test_db()`` method and set "
"``DatabaseFeatures.can_clone_databases = True``. You may have to adjust "
"``DatabaseCreation.get_test_db_clone_settings()``."
msgstr "Afin de prendre en charge la parallélisation des tests, il faut implémenter la méthode ``DatabaseCreation._clone_test_db()`` et définir ``DatabaseFeatures.can_clone_databases = True``. Il peut être nécessaire d'ajuster ``DatabaseCreation.get_test_db_clone_settings()``."

# 09108f763c094269a1ae003346156e45
#: ../../../../1.9/docs/releases/1.9.txt:730
msgid "Default settings that were tuples are now lists"
msgstr "Les réglages par défaut qui étaient des tuples sont maintenant des listes"

# 8409053ffdda4c75ab01a068337fccc4
#: ../../../../1.9/docs/releases/1.9.txt:732
msgid ""
"The default settings in ``django.conf.global_settings`` were a combination "
"of lists and tuples. All settings that were formerly tuples are now lists."
msgstr "Les réglages par défaut dans ``django.conf.global_settings`` comportaient aussi bien des listes que des tuples. Tous les réglages qui étaient précédemment des tuples sont maintenant des listes."

# b7ce40854ffe49ebb84ac1705f1a21f3
#: ../../../../1.9/docs/releases/1.9.txt:736
msgid "``is_usable`` attribute on template loaders is removed"
msgstr "L'attribut ``is_usable`` des chargeurs de gabarit a été supprimé"

# a1f15b7c935b48fea74c417a4808bbc7
#: ../../../../1.9/docs/releases/1.9.txt:738
msgid ""
"Django template loaders previously required an ``is_usable`` attribute to be"
" defined. If a loader was configured in the template settings and this "
"attribute was ``False``, the loader would be silently ignored. In practice, "
"this was only used by the egg loader to detect if setuptools was installed. "
"The ``is_usable`` attribute is now removed and the egg loader instead fails "
"at runtime if setuptools is not installed."
msgstr "Les chargeurs de gabarit de Django exigeanient auparavant la présence d'un attribut ``is_usable``. Si un chargeur était configuré dans le réglage des gabarits et que cet attribut valait ``False``, le chargeur était ignoré en silence. En pratique, ce n'était utilisé que par le chargeur « egg » pour détecter si setuptools était installé. Cet attribut ``is_usable`` est maintenant supprimé et le chargeur « egg » échoue au moment de l'exécution si setuptools n'est pas installé."

# afa51d2fecf842a08b129d1e8330644a
#: ../../../../1.9/docs/releases/1.9.txt:746
msgid "Related set direct assignment"
msgstr "Attribution directe d'un ensemble d'objets liés"

# 77a296528298474d934a0f93f377dbbb
#: ../../../../1.9/docs/releases/1.9.txt:748
msgid ""
":ref:`Direct assignment <direct-assignment>` of related objects in the ORM "
"used to perform a ``clear()`` followed by a call to ``add()``. This caused "
"needlessly large data changes and prevented using the "
":data:`~django.db.models.signals.m2m_changed` signal to track individual "
"changes in many-to-many relations."
msgstr "L':ref:`attribution directe <direct-assignment>` d'objets liés dans l'ORM effectuait un effacement ``clear()`` suivi d'un ajout par ``add()``. Cela provoquait inutilement la modification de gros volumes de données et empêchait d'utiliser le signal :data:`~django.db.models.signals.m2m_changed` pour faire le suivi de modifications isolées dans les relations plusieurs-à-plusieurs."

# 7d826000f63c436badb757c17bae6e8d
#: ../../../../1.9/docs/releases/1.9.txt:754
msgid ""
"Direct assignment now relies on the the new "
":meth:`~django.db.models.fields.related.RelatedManager.set` method on "
"related managers which by default only processes changes between the "
"existing related set and the one that's newly assigned. The previous "
"behavior can be restored by replacing direct assignment by a call to "
"``set()`` with the keyword argument ``clear=True``."
msgstr "L'attribution directe s'appuie maintenant sur la nouvelle méthode :meth:`~django.db.models.fields.related.RelatedManager.set` des gestionnaires de relations qui, par défaut, ne traitent que les modifications entre l'ensemble actuel des relations et le nouvel ensemble. Le comportement précédent peut être restauré en remplaçant l'attribution directe par un appel à ``set()`` et en indiquant le paramètre nommé ``clear=True``."

# 653b0c4c4ae94128a29228515a120363
#: ../../../../1.9/docs/releases/1.9.txt:761
msgid ""
"``ModelForm``, and therefore ``ModelAdmin``, internally rely on direct "
"assignment for many-to-many relations and as a consequence now use the new "
"behavior."
msgstr "``ModelForm``, et donc aussi ``ModelAdmin``, se basent en interne sur l'attribution directe pour les relations plusieurs-à-plusieurs et par conséquent utilisent maintenant le nouveau comportement."

# 35ecdc1d75424a5289a14b8392931cd1
#: ../../../../1.9/docs/releases/1.9.txt:766
msgid "Filesystem-based template loaders catch more specific exceptions"
msgstr ""

# cefd0b5d52cf48b9af452ed47ffeb74e
#: ../../../../1.9/docs/releases/1.9.txt:768
msgid ""
"When using the :class:`filesystem.Loader "
"<django.template.loaders.filesystem.Loader>` or "
":class:`app_directories.Loader "
"<django.template.loaders.app_directories.Loader>` template loaders, earlier "
"versions of Django raised a :exc:`~django.template.TemplateDoesNotExist` "
"error if a template source existed but was unreadable. This could happen "
"under many circumstances, such as if Django didn't have permissions to open "
"the file, or if the template source was a directory. Now, Django only "
"silences the exception if the template source does not exist. All other "
"situations result in the original ``IOError`` being raised."
msgstr ""

# e8ba984e06244b538bfeb418b95e16d6
#: ../../../../1.9/docs/releases/1.9.txt:779
msgid "HTTP redirects no longer forced to absolute URIs"
msgstr ""

# 734d51760cec4e4bb4da54c681618f78
#: ../../../../1.9/docs/releases/1.9.txt:781
msgid ""
"Relative redirects are no longer converted to absolute URIs. :rfc:`2616` "
"required the ``Location`` header in redirect responses to be an absolute "
"URI, but it has been superseded by :rfc:`7231` which allows relative URIs in"
" ``Location``, recognizing the actual practice of user agents, almost all of"
" which support them."
msgstr ""

# a1138b38197f423e8e583052c3effac4
#: ../../../../1.9/docs/releases/1.9.txt:787
msgid ""
"Consequently, the expected URLs passed to ``assertRedirects`` should "
"generally no longer include the scheme and domain part of the URLs. For "
"example, ``self.assertRedirects(response, 'http://testserver/some-url/')`` "
"should be replaced by ``self.assertRedirects(response, '/some-url/')`` "
"(unless the redirection specifically contained an absolute URL, of course)."
msgstr ""

# d320c502886841798a2804d84476b08c
#: ../../../../1.9/docs/releases/1.9.txt:794
msgid "Dropped support for PostgreSQL 9.0"
msgstr ""

# 78e397d852c24f5a82ac001b0198d718
#: ../../../../1.9/docs/releases/1.9.txt:796
msgid ""
"Upstream support for PostgreSQL 9.0 ended in September 2015. As a "
"consequence, Django 1.9 sets 9.1 as the minimum PostgreSQL version it "
"officially supports."
msgstr ""

# ac0f5c3122fe4aeb9e8faa75faf81265
#: ../../../../1.9/docs/releases/1.9.txt:800
msgid "Dropped support for Oracle 11.1"
msgstr ""

# 1a5b6c5f9bdb42b5804e9950e8a3d633
#: ../../../../1.9/docs/releases/1.9.txt:802
msgid ""
"Upstream support for Oracle 11.1 ended in August 2015. As a consequence, "
"Django 1.9 sets 11.2 as the minimum Oracle version it officially supports."
msgstr ""

# 5df5aac0da214ffaaa6e1ac7cb6c7b88
#: ../../../../1.9/docs/releases/1.9.txt:806
msgid "Bulk behavior of ``add()`` method of related managers"
msgstr ""

# b66e33f569254ffbb790bf0055a31c7c
#: ../../../../1.9/docs/releases/1.9.txt:808
msgid ""
"To improve performance, the ``add()`` methods of the related managers "
"created by ``ForeignKey`` and ``GenericForeignKey`` changed from a series of"
" ``Model.save()`` calls to a single ``QuerySet.update()`` call. The change "
"means that ``pre_save`` and ``post_save`` signals aren't sent anymore. You "
"can use the ``bulk=False`` keyword argument to revert to the previous "
"behavior."
msgstr ""

# d2a49e95b58f4606adb4a50cb0962fc5
#: ../../../../1.9/docs/releases/1.9.txt:815
msgid "Template ``LoaderOrigin`` and ``StringOrigin`` are removed"
msgstr ""

# bd78f586ed9741aca036e7c207f165f9
#: ../../../../1.9/docs/releases/1.9.txt:817
msgid ""
"In previous versions of Django, when a template engine was initialized with "
"debug as ``True``, an instance of ``django.template.loader.LoaderOrigin`` or"
" ``django.template.base.StringOrigin`` was set as the origin attribute on "
"the template object. These classes have been combined into "
":class:`~django.template.base.Origin` and is now always set regardless of "
"the engine debug setting. For a minimal level of backwards compatibility, "
"the old class names will be kept as aliases to the new ``Origin`` class "
"until Django 2.0."
msgstr ""

# ca16d0db5dd944bc9633fb86b358d63f
#: ../../../../1.9/docs/releases/1.9.txt:829
msgid "Changes to the default logging configuration"
msgstr ""

# 80dd9b5a26e546b586aa156d5ea7e049
#: ../../../../1.9/docs/releases/1.9.txt:831
msgid ""
"To make it easier to write custom logging configurations, Django's default "
"logging configuration no longer defines 'django.request' and "
"'django.security' loggers. Instead, it defines a single 'django' logger, "
"filtered at the ``INFO`` level, with two handlers:"
msgstr ""

# 46e410d534a1414186363dd9f96cb70e
#: ../../../../1.9/docs/releases/1.9.txt:836
msgid ""
"'console': filtered at the ``INFO`` level and only active if ``DEBUG=True``."
msgstr ""

# 2b4dfd9b30f54f8a8e35e6eb4aeac56a
#: ../../../../1.9/docs/releases/1.9.txt:837
msgid ""
"'mail_admins': filtered at the ``ERROR`` level and only active if "
"``DEBUG=False``."
msgstr ""

# 9c4b6dd5830d4b52967f2895af35fd29
#: ../../../../1.9/docs/releases/1.9.txt:840
msgid ""
"If you aren't overriding Django's default logging, you should see minimal "
"changes in behavior, but you might see some new logging to the ``runserver``"
" console, for example."
msgstr ""

# 52855082191849008bb00f753b8d525e
#: ../../../../1.9/docs/releases/1.9.txt:844
msgid ""
"If you are overriding Django's default logging, you should check to see how "
"your configuration merges with the new defaults."
msgstr ""

# 705a4b6a69f5496c873058cab2733289
#: ../../../../1.9/docs/releases/1.9.txt:848
msgid "``HttpRequest`` details in error reporting"
msgstr ""

# 14345b5104c64624a307750477455282
#: ../../../../1.9/docs/releases/1.9.txt:850
msgid ""
"It was redundant to display the full details of the "
":class:`~django.http.HttpRequest` each time it appeared as a stack frame "
"variable in the HTML version of the debug page and error email. Thus, the "
"HTTP request will now display the same standard representation as other "
"variables (``repr(request)``). As a result, the "
"``ExceptionReporterFilter.get_request_repr()`` method and the undocumented "
"``django.http.build_request_repr()`` function were removed."
msgstr ""

# f4cbba2ae520415aa308feaaedecc10b
#: ../../../../1.9/docs/releases/1.9.txt:858
msgid ""
"The contents of the text version of the email were modified to provide a "
"traceback of the same structure as in the case of AJAX requests. The "
"traceback details are rendered by the "
"``ExceptionReporter.get_traceback_text()`` method."
msgstr ""

# 6ab4683f519f476e803158659f8b9809
#: ../../../../1.9/docs/releases/1.9.txt:863
msgid ""
"Removal of time zone aware global adapters and converters for datetimes"
msgstr ""

# b6126b826e764028a667ca44291026bf
#: ../../../../1.9/docs/releases/1.9.txt:865
msgid ""
"Django no longer registers global adapters and converters for managing time "
"zone information on :class:`~datetime.datetime` values sent to the database "
"as query parameters or read from the database in query results. This change "
"affects projects that meet all the following conditions:"
msgstr ""

# 3b607885a584400db1fe370634aa17f8
#: ../../../../1.9/docs/releases/1.9.txt:870
msgid "The :setting:`USE_TZ` setting is ``True``."
msgstr ""

# 58022595b1ed45dcafb9d9ef647a29c1
#: ../../../../1.9/docs/releases/1.9.txt:871
msgid ""
"The database is SQLite, MySQL, Oracle, or a third-party database that "
"doesn't support time zones. In doubt, you can check the value of "
"``connection.features.supports_timezones``."
msgstr ""

# 270f057392a34e14a826f43a0d1c7d59
#: ../../../../1.9/docs/releases/1.9.txt:874
msgid ""
"The code queries the database outside of the ORM, typically with "
"``cursor.execute(sql, params)``."
msgstr ""

# 8cd072e0f35841fbae200f7f3636eb80
#: ../../../../1.9/docs/releases/1.9.txt:877
msgid ""
"If you're passing aware :class:`~datetime.datetime` parameters to such "
"queries, you should turn them into naive datetimes in UTC::"
msgstr ""

# 1f1f9b07c7da476ca315208e28f17926
#: ../../../../1.9/docs/releases/1.9.txt:883
msgid ""
"If you fail to do so, the conversion will be performed as in earlier "
"versions (with a deprecation warning) up until Django 1.11. Django 2.0 won't"
" perform any conversion, which may result in data corruption."
msgstr ""

# c01b1beec9f2407e91d36ebf3dbb0423
#: ../../../../1.9/docs/releases/1.9.txt:887
msgid ""
"If you're reading :class:`~datetime.datetime` values from the results, they "
"will be naive instead of aware. You can compensate as follows::"
msgstr ""

# 4e897d2e8fa148339cdc6a38923b3403
#: ../../../../1.9/docs/releases/1.9.txt:893
msgid ""
"You don't need any of this if you're querying the database through the ORM, "
"even if you're using :meth:`raw() <django.db.models.query.QuerySet.raw>` "
"queries. The ORM takes care of managing time zone information."
msgstr ""

# 468e5c370bb64e15923c1e8d63afb4fe
#: ../../../../1.9/docs/releases/1.9.txt:898
msgid "Template tag modules are imported when templates are configured"
msgstr ""

# 0878049162634b7e8ae6b355c1a10e3c
#: ../../../../1.9/docs/releases/1.9.txt:900
msgid ""
"The :class:`~django.template.backends.django.DjangoTemplates` backend now "
"performs discovery on installed template tag modules when instantiated. This"
" update enables libraries to be provided explicitly via the ``'libraries'`` "
"key of :setting:`OPTIONS <TEMPLATES-OPTIONS>` when defining a "
":class:`~django.template.backends.django.DjangoTemplates` backend. Import or"
" syntax errors in template tag modules now fail early at instantiation time "
"rather than when a template with a :ttag:`{% load %}<load>` tag is first "
"compiled."
msgstr ""

# af8176a7717248aeaab3dac147c8759c
#: ../../../../1.9/docs/releases/1.9.txt:910
msgid "``django.template.base.add_to_builtins()`` is removed"
msgstr ""

# 5a91c8df08054f49aecf2a281b1c874e
#: ../../../../1.9/docs/releases/1.9.txt:912
msgid ""
"Although it was a private API, projects commonly used ``add_to_builtins()`` "
"to make template tags and filters available without using the :ttag:`{% load"
" %}<load>` tag. This API has been formalized. Projects should now define "
"built-in libraries via the ``'builtins'`` key of :setting:`OPTIONS "
"<TEMPLATES-OPTIONS>` when defining a "
":class:`~django.template.backends.django.DjangoTemplates` backend."
msgstr ""

# b44a562172614d62b5a57dc181e18c99
#: ../../../../1.9/docs/releases/1.9.txt:922
msgid "``simple_tag`` now wraps tag output in ``conditional_escape``"
msgstr ""

# a79f61cc48134919ab5609d8fb257823
#: ../../../../1.9/docs/releases/1.9.txt:924
msgid ""
"In general, template tags do not autoescape their contents, and this "
"behavior is :ref:`documented <tags-auto-escaping>`. For tags like "
":class:`~django.template.Library.inclusion_tag`, this is not a problem "
"because the included template will perform autoescaping. For "
":class:`~django.template.Library.assignment_tag`, the output will be escaped"
" when it is used as a variable in the template."
msgstr ""

# d915a9dd8cce49a097040db701a6ae79
#: ../../../../1.9/docs/releases/1.9.txt:931
msgid ""
"For the intended use cases of :class:`~django.template.Library.simple_tag`, "
"however, it is very easy to end up with incorrect HTML and possibly an XSS "
"exploit. For example::"
msgstr ""

# 9eba03d5f4b04c0792bc80fa7dd8116a
#: ../../../../1.9/docs/releases/1.9.txt:939
msgid ""
"In older versions of Django, this will be an XSS issue because "
"``user.first_name`` is not escaped."
msgstr ""

# 043c3f418ff745aab63d8c0903e749cb
#: ../../../../1.9/docs/releases/1.9.txt:942
msgid ""
"In Django 1.9, this is fixed: if the template context has "
"``autoescape=True`` set (the default), then ``simple_tag`` will wrap the "
"output of the tag function with "
":func:`~django.utils.html.conditional_escape`."
msgstr ""

# c9eeda4a61d9431088b06dfc7ba402e5
#: ../../../../1.9/docs/releases/1.9.txt:946
msgid ""
"To fix your ``simple_tag``\\s, it is best to apply the following practices:"
msgstr ""

# 77d87e60b5ac4f91919a83813d662c75
#: ../../../../1.9/docs/releases/1.9.txt:948
msgid ""
"Any code that generates HTML should use either the template system or "
":func:`~django.utils.html.format_html`."
msgstr ""

# 7d1fef9e5d3a41ea87d734f51c6a05b8
#: ../../../../1.9/docs/releases/1.9.txt:951
msgid ""
"If the output of a ``simple_tag`` needs escaping, use "
":func:`~django.utils.html.escape` or "
":func:`~django.utils.html.conditional_escape`."
msgstr ""

# f0c2122899f84c169c0ce3018fc4b004
#: ../../../../1.9/docs/releases/1.9.txt:955
msgid ""
"If you are absolutely certain that you are outputting HTML from a trusted "
"source (e.g. a CMS field that stores HTML entered by admins), you can mark "
"it as such using :func:`~django.utils.safestring.mark_safe`."
msgstr ""

# 0e8fb2b1ff1d4156920dd007d25e07ad
#: ../../../../1.9/docs/releases/1.9.txt:959
msgid ""
"Tags that follow these rules will be correct and safe whether they are run "
"on Django 1.9+ or earlier."
msgstr ""

# 9eecfc4f8e8446ae9c55de216e501123
#: ../../../../1.9/docs/releases/1.9.txt:963
msgid "``Paginator.page_range``"
msgstr ""

# 3b4d13f90d164988b1958ec4a608808b
#: ../../../../1.9/docs/releases/1.9.txt:965
msgid ""
":attr:`Paginator.page_range <django.core.paginator.Paginator.page_range>` is"
" now an iterator instead of a list."
msgstr ""

# cbc7c67acce4444c994c0bd7be154f83
#: ../../../../1.9/docs/releases/1.9.txt:968
msgid ""
"In versions of Django previous to 1.8, ``Paginator.page_range`` returned a "
"``list`` in Python 2 and a ``range`` in Python 3. Django 1.8 consistently "
"returned a list, but an iterator is more efficient."
msgstr ""

# 81520caf9c2745dc833a6b2ae778d699
#: ../../../../1.9/docs/releases/1.9.txt:972
msgid ""
"Existing code that depends on ``list`` specific features, such as indexing, "
"can be ported by converting the iterator into a ``list`` using ``list()``."
msgstr ""

# f3e79d6ac1e64006968b1ff3f20fa9de
#: ../../../../1.9/docs/releases/1.9.txt:976
msgid "Implicit ``QuerySet`` ``__in`` lookup removed"
msgstr ""

# f253f4c2df994d959b9011e4640fd169
#: ../../../../1.9/docs/releases/1.9.txt:978
msgid "In earlier versions, queries such as::"
msgstr ""

# ad618a75a9834cbc90374bac3d9a2aab
#: ../../../../1.9/docs/releases/1.9.txt:982
msgid "would implicitly convert to::"
msgstr ""

# d0ae8654558149518c602d4435df6903
#: ../../../../1.9/docs/releases/1.9.txt:986
msgid "resulting in SQL like ``\"related_id IN (SELECT id FROM ...)\"``."
msgstr ""

# 85855b02dc78407288b939a9c9180b86
#: ../../../../1.9/docs/releases/1.9.txt:988
msgid ""
"This implicit ``__in`` no longer happens so the \"IN\" SQL is now \"=\", and"
" if the subquery returns multiple results, at least some databases will "
"throw an error."
msgstr ""

# 1a08585d453c41d7a89cb91fdd76dac3
#: ../../../../1.9/docs/releases/1.9.txt:994
msgid "``contrib.admin`` browser support"
msgstr ""

# 4ca3558b908743d38a3cab2dcf0823db
#: ../../../../1.9/docs/releases/1.9.txt:996
msgid ""
"The admin no longer supports Internet Explorer 8 and below, as these "
"browsers have reached end-of-life."
msgstr ""

# 34e84269038d49fe849e51fca8a12ccb
#: ../../../../1.9/docs/releases/1.9.txt:999
msgid ""
"CSS and images to support Internet Explorer 6 and 7 have been removed. PNG "
"and GIF icons have been replaced with SVG icons, which are not supported by "
"Internet Explorer 8 and earlier."
msgstr ""

# 4a85fa6809aa4615969a0c7c503dbd7f
#: ../../../../1.9/docs/releases/1.9.txt:1003
msgid ""
"The jQuery library embedded in the admin has been upgraded from version "
"1.11.2 to 2.1.4. jQuery 2.x has the same API as jQuery 1.x, but does not "
"support Internet Explorer 6, 7, or 8, allowing for better performance and a "
"smaller file size. If you need to support IE8 and must also use the latest "
"version of Django, you can override the admin's copy of jQuery with your own"
" by creating a Django application with this structure::"
msgstr ""

# 543b6c6278544e979b08087540ebdb6a
#: ../../../../1.9/docs/releases/1.9.txt:1017
msgid "``SyntaxError`` when installing Django setuptools 5.5.x"
msgstr ""

# fb5173f84dfd428887926404889b6653
#: ../../../../1.9/docs/releases/1.9.txt:1019
msgid "When installing Django 1.9+ with setuptools 5.5.x, you'll see::"
msgstr ""

# b81123c8031e40efb5191b7b992f781c
#: ../../../../1.9/docs/releases/1.9.txt:1033
msgid ""
"It's safe to ignore these errors (Django will still install just fine), but "
"you can avoid them by upgrading setuptools to a more recent version. If "
"you're using pip, you can upgrade pip using ``pip install -U pip`` which "
"will also upgrade setuptools."
msgstr ""

# feda67c4f45747faa968c89eb18c15a2
#: ../../../../1.9/docs/releases/1.9.txt:1041
msgid ""
"The jQuery static files in ``contrib.admin`` have been moved into a "
"``vendor/jquery`` subdirectory."
msgstr ""

# ea9df3a9f915443288e85a1dbcd65378
#: ../../../../1.9/docs/releases/1.9.txt:1044
msgid ""
"The text displayed for null columns in the admin changelist ``list_display``"
" cells has changed from ``(None)`` (or its translated equivalent) to ``-`` "
"(a dash)."
msgstr ""

# e5fba7eab0f2451fa646ff7d5c97b476
#: ../../../../1.9/docs/releases/1.9.txt:1048
msgid ""
"``django.http.responses.REASON_PHRASES`` and "
"``django.core.handlers.wsgi.STATUS_CODE_TEXT`` have been removed. Use "
"Python's stdlib instead: :data:`http.client.responses` for Python 3 and "
"`httplib.responses`_ for Python 2."
msgstr ""

# 9b38eb4a550842a5a0c1ce90cfa47eb6
#: ../../../../1.9/docs/releases/1.9.txt:1055
msgid "``ValuesQuerySet`` and ``ValuesListQuerySet`` have been removed."
msgstr ""

# fe23dfe5be534579b753c083c4de7615
#: ../../../../1.9/docs/releases/1.9.txt:1057
msgid ""
"The ``admin/base.html`` template no longer sets "
"``window.__admin_media_prefix__`` or ``window.__admin_utc_offset__``. Image "
"references in JavaScript that used that value to construct absolute URLs "
"have been moved to CSS for easier customization. The UTC offset is stored on"
" a data attribute of the ``<body>`` tag."
msgstr ""

# 8c4c3ec0ef1146319aa26728de9136cd
#: ../../../../1.9/docs/releases/1.9.txt:1063
msgid ""
"``CommaSeparatedIntegerField`` validation has been refined to forbid values "
"like ``','``, ``',1'``, and ``'1,,2'``."
msgstr ""

# 8fec6d11e0dc4fed9c76a7416e6f568c
#: ../../../../1.9/docs/releases/1.9.txt:1066
msgid ""
"Form initialization was moved from the :meth:`ProcessFormView.get() "
"<django.views.generic.edit.ProcessFormView.get>` method to the new "
":meth:`FormMixin.get_context_data() "
"<django.views.generic.edit.FormMixin.get_context_data>` method. This may be "
"backwards incompatible if you have overridden the ``get_context_data()`` "
"method without calling ``super()``."
msgstr ""

# d1494e8228624eb2ae1a463201eb5f83
#: ../../../../1.9/docs/releases/1.9.txt:1073
msgid "Support for PostGIS 1.5 has been dropped."
msgstr "La prise en charge de PostGIS 1.5 a été abandonnée."

# 62302b6b758146049490019b9ad07e7b
#: ../../../../1.9/docs/releases/1.9.txt:1075
msgid ""
"The ``django.contrib.sites.models.Site.domain`` field was changed to be "
":attr:`~django.db.models.Field.unique`."
msgstr "Le champ ``django.contrib.sites.models.Site.domain`` a été défini comme :attr:`~django.db.models.Field.unique`."

# 3256b615f92b4b1db34495e4e4225e98
#: ../../../../1.9/docs/releases/1.9.txt:1078
msgid ""
"In order to enforce test isolation, database queries are not allowed by "
"default in :class:`~django.test.SimpleTestCase` tests anymore. You can "
"disable this behavior by setting the "
":attr:`~django.test.SimpleTestCase.allow_database_queries` class attribute "
"to ``True`` on your test class."
msgstr ""

# 2845dce181a24fdb9be3975ed62c1401
#: ../../../../1.9/docs/releases/1.9.txt:1084
msgid ""
":attr:`ResolverMatch.app_name "
"<django.core.urlresolvers.ResolverMatch.app_name>` was changed to contain "
"the full namespace path in the case of nested namespaces. For consistency "
"with :attr:`ResolverMatch.namespace "
"<django.core.urlresolvers.ResolverMatch.namespace>`, the empty value is now "
"an empty string instead of ``None``."
msgstr ""

# fcc4c56d024542548219f0abb7ae1558
#: ../../../../1.9/docs/releases/1.9.txt:1091
msgid "For security hardening, session keys must be at least 8 characters."
msgstr ""

# f8c804e173e64f06b12f35e4cd5eb4bd
#: ../../../../1.9/docs/releases/1.9.txt:1093
msgid ""
"Private function ``django.utils.functional.total_ordering()`` has been "
"removed. It contained a workaround for a ``functools.total_ordering()`` bug "
"in Python versions older than 2.7.3."
msgstr ""

# a40055dffb024a979b4f4c54b625d1c8
#: ../../../../1.9/docs/releases/1.9.txt:1097
msgid ""
"XML serialization (either through :djadmin:`dumpdata` or the syndication "
"framework) used to output any characters it received. Now if the content to "
"be serialized contains any control characters not allowed in the XML 1.0 "
"standard, the serialization will fail with a :exc:`ValueError`."
msgstr ""

# f10ea576b10d406da71a7777fbbfcffe
#: ../../../../1.9/docs/releases/1.9.txt:1102
msgid ""
":class:`~django.forms.CharField` now strips input of leading and trailing "
"whitespace by default. This can be disabled by setting the new "
":attr:`~django.forms.CharField.strip` argument to ``False``."
msgstr ""

# 6bf6350ba5e248528aa5627d402f0673
#: ../../../../1.9/docs/releases/1.9.txt:1106
msgid ""
"Template text that is translated and uses two or more consecutive percent "
"signs, e.g. ``\"%%\"``, may have a new `msgid` after ``makemessages`` is run"
" (most likely the translation will be marked fuzzy). The new ``msgid`` will "
"be marked ``\"#, python-format\"``."
msgstr ""

# 849e15051c7a4b069aed40eb6a2bd45a
#: ../../../../1.9/docs/releases/1.9.txt:1111
msgid ""
"If neither :attr:`request.current_app <django.http.HttpRequest.current_app>`"
" nor :class:`Context.current_app <django.template.Context>` are set, the "
":ttag:`url` template tag will now use the namespace of the current request. "
"Set ``request.current_app`` to ``None`` if you don't want to use a namespace"
" hint."
msgstr ""

# 4cfe9c54436b4886a7628e6b54d4bf16
#: ../../../../1.9/docs/releases/1.9.txt:1117
msgid ""
"The :setting:`SILENCED_SYSTEM_CHECKS` setting now silences messages of all "
"levels. Previously, messages of ``ERROR`` level or higher were printed to "
"the console."
msgstr ""

# d679fd9849704cdda09ed24346ffe212
#: ../../../../1.9/docs/releases/1.9.txt:1121
msgid ""
"The ``FlatPage.enable_comments`` field is removed from the ``FlatPageAdmin``"
" as it's unused by the application. If your project or a third-party app "
"makes use of it, :ref:`create a custom ModelAdmin <flatpages-admin>` to add "
"it back."
msgstr ""

# c3e6bc8e81244ad58a7a8b5d24baa161
#: ../../../../1.9/docs/releases/1.9.txt:1125
msgid ""
"The return value of "
":meth:`~django.test.runner.DiscoverRunner.setup_databases` and the first "
"argument of :meth:`~django.test.runner.DiscoverRunner.teardown_databases` "
"changed. They used to be ``(old_names, mirrors)`` tuples. Now they're just "
"the first item, ``old_names``."
msgstr ""

# d9d9ef8ccc4941e09cd30ee5da5ce5a1
#: ../../../../1.9/docs/releases/1.9.txt:1131
msgid ""
"By default :class:`~django.test.LiveServerTestCase` attempts to find an "
"available port in the 8081-8179 range instead of just trying port 8081."
msgstr ""

# aa0711d138094c3bb2efa357dfe1cce8
#: ../../../../1.9/docs/releases/1.9.txt:1134
msgid ""
"The system checks for :class:`~django.contrib.admin.ModelAdmin` now check "
"instances rather than classes."
msgstr "Les contrôles système pour :class:`~django.contrib.admin.ModelAdmin` vérifient maintenant les instances plutôt que les classes."

# e6bcd5e48c7148259cfd260dd3da8290
#: ../../../../1.9/docs/releases/1.9.txt:1137
msgid ""
"The private API to apply mixed migration plans has been dropped for "
"performance reasons. Mixed plans consist of a list of migrations where some "
"are being applied and others are being unapplied."
msgstr ""

# 04073e069f934f31a4d215e3612d520c
#: ../../../../1.9/docs/releases/1.9.txt:1141
msgid ""
"The related model object descriptor classes in "
"``django.db.models.fields.related`` (private API) are moved from the "
"``related`` module to ``related_descriptors`` and renamed as follows:"
msgstr ""

# 9ca1a3dc46fb47f89e7741b1b4269fdc
#: ../../../../1.9/docs/releases/1.9.txt:1145
msgid ""
"``ReverseSingleRelatedObjectDescriptor`` is ``ForwardManyToOneDescriptor``"
msgstr ""

# 98532f7171a145009267afa04e73cfd0
#: ../../../../1.9/docs/releases/1.9.txt:1146
msgid "``SingleRelatedObjectDescriptor`` is ``ReverseOneToOneDescriptor``"
msgstr ""

# e64c6a9d950e4bf6a9190c5d24a47d97
#: ../../../../1.9/docs/releases/1.9.txt:1147
msgid "``ForeignRelatedObjectsDescriptor`` is ``ReverseManyToOneDescriptor``"
msgstr ""

# 15e254b638b34883b69d2a9cbd7d7ad2
#: ../../../../1.9/docs/releases/1.9.txt:1148
msgid "``ManyRelatedObjectsDescriptor`` is ``ManyToManyDescriptor``"
msgstr ""

# 0debccf42c51491f8b1952036ed0d480
#: ../../../../1.9/docs/releases/1.9.txt:1153
msgid "Features deprecated in 1.9"
msgstr "Fonctionnalités rendues obsolètes dans Django 1.9"

# 2e339e2285a04d5fadf765c2de725969
#: ../../../../1.9/docs/releases/1.9.txt:1156
msgid "``assignment_tag()``"
msgstr "``assignment_tag()``"

# 4a72668c265e4a168bd159b180da09ec
#: ../../../../1.9/docs/releases/1.9.txt:1158
msgid ""
"Django 1.4 added the ``assignment_tag`` helper to ease the creation of "
"template tags that store results in a template variable. The "
":meth:`~django.template.Library.simple_tag` helper has gained this same "
"ability, making the ``assignment_tag`` obsolete. Tags that use "
"``assignment_tag`` should be updated to use ``simple_tag``."
msgstr ""

# dab2908a6f484b31a1e160840d894ddb
#: ../../../../1.9/docs/releases/1.9.txt:1165
msgid "``{% cycle %}`` syntax with comma-separated arguments"
msgstr ""

# d87197db52b04d098620cc777d5cb1b3
#: ../../../../1.9/docs/releases/1.9.txt:1167
msgid ""
"The :ttag:`cycle` tag supports an inferior old syntax from previous Django "
"versions:"
msgstr ""

# a92cf74f0e5845b7abe1b8bf493e9afa
#: ../../../../1.9/docs/releases/1.9.txt:1174
msgid ""
"Its parsing caused bugs with the current syntax, so support for the old "
"syntax will be removed in Django 1.10 following an accelerated deprecation."
msgstr ""

# 3f5d93c19ed54d649e63a39d845e437c
#: ../../../../1.9/docs/releases/1.9.txt:1178
msgid "``ForeignKey`` and ``OneToOneField`` ``on_delete`` argument"
msgstr ""

# a5ae8d78e08448df993aca3f8739a1aa
#: ../../../../1.9/docs/releases/1.9.txt:1180
msgid ""
"In order to increase awareness about cascading model deletion, the "
"``on_delete`` argument of ``ForeignKey`` and ``OneToOneField`` will be "
"required in Django 2.0."
msgstr ""

# f379e87919e344d58b0bb1f7cf222d7f
#: ../../../../1.9/docs/releases/1.9.txt:1184
msgid ""
"Update models and existing migrations to explicitly set the argument. Since "
"the default is ``models.CASCADE``, add ``on_delete=models.CASCADE`` to all "
"``ForeignKey`` and ``OneToOneField``\\s that don't use a different option. "
"You can also pass it as the second positional argument if you don't care "
"about compatibility with older versions of Django."
msgstr ""

# 456b081abc5b4c8b97f7e53a9cd0b8a7
#: ../../../../1.9/docs/releases/1.9.txt:1191
msgid "``Field.rel`` changes"
msgstr ""

# da221319ea0b4cb6b581db28cca9e4c1
#: ../../../../1.9/docs/releases/1.9.txt:1193
msgid ""
"``Field.rel`` and its methods and attributes have changed to match the "
"related fields API. The ``Field.rel`` attribute is renamed to "
"``remote_field`` and many of its methods and attributes are either changed "
"or renamed."
msgstr ""

# 546b290b40e74c9d833dfd2ede4ccad0
#: ../../../../1.9/docs/releases/1.9.txt:1197
msgid ""
"The aim of these changes is to provide a documented API for relation fields."
msgstr ""

# 53fa179ebd9f49e59de855f827ec027a
#: ../../../../1.9/docs/releases/1.9.txt:1200
msgid "``GeoManager`` and ``GeoQuerySet`` custom methods"
msgstr ""

# 812d3961d9014db48c22559b8288814a
#: ../../../../1.9/docs/releases/1.9.txt:1202
msgid ""
"All custom ``GeoQuerySet`` methods (``area()``, ``distance()``, ``gml()``, "
"...) have been replaced by equivalent geographic expressions in annotations "
"(see in new features). Hence the need to set a custom ``GeoManager`` to GIS-"
"enabled models is now obsolete. As soon as your code doesn't call any of the"
" deprecated methods, you can simply remove the ``objects = GeoManager()`` "
"lines from your models."
msgstr ""

# 924f0c3206d94af59710360af86d02ed
#: ../../../../1.9/docs/releases/1.9.txt:1210
msgid "Template loader APIs have changed"
msgstr ""

# 8cbd5ca2750c4f18873cf4576a4e5a49
#: ../../../../1.9/docs/releases/1.9.txt:1212
msgid ""
"Django template loaders have been updated to allow recursive template "
"extending. This change necessitated a new template loader API. The old "
"``load_template()`` and ``load_template_sources()`` methods are now "
"deprecated. Details about the new API can be found :ref:`in the template "
"loader documentation <custom-template-loaders>`."
msgstr ""

# 7c7475aeb7cc4dd1be8e5b5a2bd6e203
#: ../../../../1.9/docs/releases/1.9.txt:1219
msgid ""
"Passing a 3-tuple or an ``app_name`` to :func:`~django.conf.urls.include()`"
msgstr ""

# 08a46756c9204c0ca188a2441a6f8d9c
#: ../../../../1.9/docs/releases/1.9.txt:1221
msgid ""
"The instance namespace part of passing a tuple as an argument to "
"``include()`` has been replaced by passing the ``namespace`` argument to "
"``include()``. For example::"
msgstr ""

# 587860159a9b4ebb891252bdb74388ca
#: ../../../../1.9/docs/releases/1.9.txt:1243
msgid ""
"The ``app_name`` argument to ``include()`` has been replaced by passing a "
"2-tuple (as above), or passing an object or module with an ``app_name`` "
"attribute (as below). If the ``app_name`` is set in this new way, the "
"``namespace`` argument is no longer required. It will default to the value "
"of ``app_name``. For example, the URL patterns in the tutorial are changed "
"from:"
msgstr ""

# ae9ae991178d475fafb2d02ec5cb8e68
#: ../../../../1.9/docs/releases/1.9.txt:1257
msgid "to:"
msgstr ""

# fe97c9105141441baa2e0481ff3deefb
#: ../../../../1.9/docs/releases/1.9.txt:1273
msgid ""
"This change also means that the old way of including an ``AdminSite`` "
"instance is deprecated. Instead, pass ``admin.site.urls`` directly to "
":func:`~django.conf.urls.url()`:"
msgstr ""

# d903929434964bbdbd66e1fd12c8e067
#: ../../../../1.9/docs/releases/1.9.txt:1288
msgid "URL application namespace required if setting an instance namespace"
msgstr ""

# bce738ab06974f3c8a77025062462f54
#: ../../../../1.9/docs/releases/1.9.txt:1290
msgid ""
"In the past, an instance namespace without an application namespace would "
"serve the same purpose as the application namespace, but it was impossible "
"to reverse the patterns if there was an application namespace with the same "
"name. Includes that specify an instance namespace require that the included "
"URLconf sets an application namespace."
msgstr ""

# a802dafd0680488abaf47c5cac9fc08b
#: ../../../../1.9/docs/releases/1.9.txt:1297
msgid "``current_app`` parameter to ``contrib.auth`` views"
msgstr ""

# 140f10157690450386662ea2bddb1b9b
#: ../../../../1.9/docs/releases/1.9.txt:1299
msgid ""
"All views in ``django.contrib.auth.views`` have the following structure::"
msgstr ""

# e62ed7a7be94490f946091dce18d8251
#: ../../../../1.9/docs/releases/1.9.txt:1310
msgid ""
"As of Django 1.8, ``current_app`` is set on the ``request`` object. For "
"consistency, these views will require the caller to set ``current_app`` on "
"the ``request`` instead of passing it in a separate argument."
msgstr ""

# c1bc270ca222492caab6332ab8b5f20d
#: ../../../../1.9/docs/releases/1.9.txt:1315
msgid "``django.contrib.gis.geoip``"
msgstr ""

# a65da7fbcbdd4175bb3cbbe327469a80
#: ../../../../1.9/docs/releases/1.9.txt:1317
msgid ""
"The :mod:`django.contrib.gis.geoip2` module supersedes "
"``django.contrib.gis.geoip``. The new module provides a similar API except "
"that it doesn't provide the legacy GeoIP-Python API compatibility methods."
msgstr ""

# ddcc8cc41c194a248178a55aa20d0f19
#: ../../../../1.9/docs/releases/1.9.txt:1324
msgid ""
"The ``weak`` argument to ``django.dispatch.signals.Signal.disconnect()`` has"
" been deprecated as it has no effect."
msgstr ""

# fcaf04a95de24ee6bbe1d8a700777591
#: ../../../../1.9/docs/releases/1.9.txt:1327
msgid ""
"The ``check_aggregate_support()`` method of "
"``django.db.backends.base.BaseDatabaseOperations`` has been deprecated and "
"will be removed in Django 2.0. The more general "
"``check_expression_support()`` should be used instead."
msgstr ""

# e76a63fa21d84c049744961c6b01c36f
#: ../../../../1.9/docs/releases/1.9.txt:1332
msgid ""
"``django.forms.extras`` is deprecated. You can find "
":class:`~django.forms.SelectDateWidget` in ``django.forms.widgets`` (or "
"simply ``django.forms``) instead."
msgstr ""

# 8a1379ba135640f5863463a9e2edca9d
#: ../../../../1.9/docs/releases/1.9.txt:1336
msgid ""
"Private API ``django.db.models.fields.add_lazy_relation()`` is deprecated."
msgstr ""

# 0a85b8c6cef341c19445c57bc0b3ae11
#: ../../../../1.9/docs/releases/1.9.txt:1338
msgid ""
"The ``django.contrib.auth.tests.utils.skipIfCustomUser()`` decorator is "
"deprecated. With the test discovery changes in Django 1.6, the tests for "
"``django.contrib`` apps are no longer run as part of the user's project. "
"Therefore, the ``@skipIfCustomUser`` decorator is no longer needed to "
"decorate tests in ``django.contrib.auth``."
msgstr ""

# 83ed1399dd8f4a8e9d0ca3a16c85da2b
#: ../../../../1.9/docs/releases/1.9.txt:1344
msgid ""
"If you customized some :ref:`error handlers <error-views>`, the view "
"signatures with only one request parameter are deprecated. The views should "
"now also accept a second ``exception`` positional parameter."
msgstr ""

# 94e25cb1253442b2be620e4e73710fa2
#: ../../../../1.9/docs/releases/1.9.txt:1348
msgid ""
"The ``django.utils.feedgenerator.Atom1Feed.mime_type`` and "
"``django.utils.feedgenerator.RssFeed.mime_type`` attributes are deprecated "
"in favor of ``content_type``."
msgstr ""

# 08b7e0c516224d429bc8ab08229e6146
#: ../../../../1.9/docs/releases/1.9.txt:1352
msgid ""
":class:`~django.core.signing.Signer` now issues a warning if an invalid "
"separator is used. This will become an exception in Django 1.10."
msgstr ""

# 197e3beaf0a543229919f3d3cd5ab8af
#: ../../../../1.9/docs/releases/1.9.txt:1355
msgid ""
"``django.db.models.Field._get_val_from_obj()`` is deprecated in favor of "
"``Field.value_from_object()``."
msgstr ""

# 5af3d203c851437eb652726dbe99d21c
#: ../../../../1.9/docs/releases/1.9.txt:1358
msgid ""
"``django.template.loaders.eggs.Loader`` is deprecated as distributing "
"applications as eggs is not recommended."
msgstr ""

# 02892bfe4afe476f85eaded218fab4ff
#: ../../../../1.9/docs/releases/1.9.txt:1361
msgid ""
"The ``callable_obj`` keyword argument to "
"``SimpleTestCase.assertRaisesMessage()`` is deprecated. Pass the callable as"
" a positional argument instead."
msgstr ""

# 694bd9c3b60544d2aa737257a23596fd
#: ../../../../1.9/docs/releases/1.9.txt:1365
msgid ""
"The ``allow_tags`` attribute on methods of ``ModelAdmin`` has been "
"deprecated. Use :func:`~django.utils.html.format_html`, "
":func:`~django.utils.html.format_html_join`, or "
":func:`~django.utils.safestring.mark_safe` when constructing the method's "
"return value instead."
msgstr ""

# 1dfedaad97104c108144120315b2b28d
#: ../../../../1.9/docs/releases/1.9.txt:1371
msgid ""
"The ``enclosure`` keyword argument to ``SyndicationFeed.add_item()`` is "
"deprecated. Use the new ``enclosures`` argument which accepts a list of "
"``Enclosure`` objects instead of a single one."
msgstr ""

# e3093a0feb8a4ab992dd8e6d4efedbbc
#: ../../../../1.9/docs/releases/1.9.txt:1375
msgid ""
"The ``django.template.loader.LoaderOrigin`` and "
"``django.template.base.StringOrigin`` aliases for "
"``django.template.base.Origin`` are deprecated."
msgstr ""

# 69534ef2f2c64859bf7d1e8817793a7b
#: ../../../../1.9/docs/releases/1.9.txt:1382
msgid "Features removed in 1.9"
msgstr ""

# c1e4f2aa49e5426a91dee83950f68704
#: ../../../../1.9/docs/releases/1.9.txt:1384
msgid ""
"These features have reached the end of their deprecation cycle and so have "
"been removed in Django 1.9 (please see the :ref:`deprecation timeline "
"<deprecation-removed-in-1.9>` for more details):"
msgstr ""

# 0ade42224327409d9b894a447257b859
#: ../../../../1.9/docs/releases/1.9.txt:1388
msgid "``django.utils.dictconfig`` is removed."
msgstr ""

# 2ed20dde9e24404c81f544f21b5381b8
#: ../../../../1.9/docs/releases/1.9.txt:1390
msgid "``django.utils.importlib`` is removed."
msgstr ""

# f434eef9d87440cf8e34453618cc249d
#: ../../../../1.9/docs/releases/1.9.txt:1392
msgid "``django.utils.tzinfo`` is removed."
msgstr ""

# 9330df56ed794e458bafeebbf4c28c18
#: ../../../../1.9/docs/releases/1.9.txt:1394
msgid "``django.utils.unittest`` is removed."
msgstr ""

# a0380d638d5549acbdb1bc2bfda6dbed
#: ../../../../1.9/docs/releases/1.9.txt:1396
msgid "The ``syncdb`` command is removed."
msgstr ""

# d97983d794d549d6836efb5a5a3e2c0f
#: ../../../../1.9/docs/releases/1.9.txt:1398
msgid ""
"``django.db.models.signals.pre_syncdb`` and "
"``django.db.models.signals.post_syncdb`` is removed."
msgstr ""

# 424b094504e54ac68127e3f97755ba9d
#: ../../../../1.9/docs/releases/1.9.txt:1401
msgid "Support for ``allow_syncdb`` on database routers is removed."
msgstr ""

# 4da241ac7f6f4c6d96914488dc388bd4
#: ../../../../1.9/docs/releases/1.9.txt:1403
msgid ""
"Automatic syncing of apps without migrations is removed. Migrations are "
"compulsory for all apps unless you pass the :djadminopt:`--run-syncdb` "
"option to ``migrate``."
msgstr ""

# 46a15e67bd15484d99ad37344017f2a0
#: ../../../../1.9/docs/releases/1.9.txt:1407
msgid ""
"The SQL management commands for apps without migrations, ``sql``, "
"``sqlall``, ``sqlclear``, ``sqldropindexes``, and ``sqlindexes``, are "
"removed."
msgstr ""

# 3b72a426f47e473397be191aa4f43c78
#: ../../../../1.9/docs/releases/1.9.txt:1410
msgid ""
"Support for automatic loading of ``initial_data`` fixtures and initial SQL "
"data is removed."
msgstr ""

# b3b90071b0bd4d9392713d95912dd2a0
#: ../../../../1.9/docs/releases/1.9.txt:1413
msgid ""
"All models need to be defined inside an installed application or declare an "
"explicit :attr:`~django.db.models.Options.app_label`. Furthermore, it isn't "
"possible to import them before their application is loaded. In particular, "
"it isn't possible to import models inside the root package of an "
"application."
msgstr ""

# c43822a0373a4e829eab24d9975b1118
#: ../../../../1.9/docs/releases/1.9.txt:1418
msgid ""
"The model and form ``IPAddressField`` is removed. A stub field remains for "
"compatibility with historical migrations."
msgstr ""

# 18033a44cd594b3bb08e71f93578d7cf
#: ../../../../1.9/docs/releases/1.9.txt:1421
msgid "``AppCommand.handle_app()`` is no longer supported."
msgstr ""

# 523ac1ae31c94097bf6f071af69617f9
#: ../../../../1.9/docs/releases/1.9.txt:1423
msgid ""
"``RequestSite`` and ``get_current_site()`` are no longer importable from "
"``django.contrib.sites.models``."
msgstr ""

# 3f52579d833b49a09f8de3ace733b5f5
#: ../../../../1.9/docs/releases/1.9.txt:1426
msgid "FastCGI support via the ``runfcgi`` management command is removed."
msgstr ""

# 3f3bc2908b324e39b4fb1f8be313c652
#: ../../../../1.9/docs/releases/1.9.txt:1428
msgid "``django.utils.datastructures.SortedDict`` is removed."
msgstr ""

# 199d16a79fcb430ebb630b0beb33aa81
#: ../../../../1.9/docs/releases/1.9.txt:1430
msgid "``ModelAdmin.declared_fieldsets`` is removed."
msgstr ""

# 3d093182dbb5463eaeb9fe3171d9f855
#: ../../../../1.9/docs/releases/1.9.txt:1432
msgid ""
"The ``util`` modules that provided backwards compatibility are removed:"
msgstr ""

# a358736d695547b3b84493e20da378c4
#: ../../../../1.9/docs/releases/1.9.txt:1439
msgid "``ModelAdmin.get_formsets`` is removed."
msgstr ""

# 0092ebf14ff748bd9734cb7cdb69ba4c
#: ../../../../1.9/docs/releases/1.9.txt:1441
msgid ""
"The backward compatible shims introduced to rename the "
"``BaseMemcachedCache._get_memcache_timeout()`` method to "
"``get_backend_timeout()`` is removed."
msgstr ""

# 48ee66e5ce984096bd8a2fffd4dd1ba5
#: ../../../../1.9/docs/releases/1.9.txt:1445
msgid ""
"The ``--natural`` and ``-n`` options for :djadmin:`dumpdata` are removed."
msgstr ""

# 3361736ca4164a158cafda52c47bfb63
#: ../../../../1.9/docs/releases/1.9.txt:1447
msgid ""
"The ``use_natural_keys`` argument for ``serializers.serialize()`` is "
"removed."
msgstr ""

# 813790946bfb4e19802e49ba93cebdb8
#: ../../../../1.9/docs/releases/1.9.txt:1449
msgid "Private API ``django.forms.forms.get_declared_fields()`` is removed."
msgstr ""

# ae3c9bbd62ed402e8828ba20fd1e25fe
#: ../../../../1.9/docs/releases/1.9.txt:1451
msgid ""
"The ability to use a ``SplitDateTimeWidget`` with ``DateTimeField`` is "
"removed."
msgstr ""

# 2837be16785341b7bfe1672eda63f868
#: ../../../../1.9/docs/releases/1.9.txt:1454
msgid "The ``WSGIRequest.REQUEST`` property is removed."
msgstr ""

# 5dff3b305338471b92f1c647d070fa2d
#: ../../../../1.9/docs/releases/1.9.txt:1456
msgid "The class ``django.utils.datastructures.MergeDict`` is removed."
msgstr ""

# 75b4a2bc53e9487a8f793700cda0e5a4
#: ../../../../1.9/docs/releases/1.9.txt:1458
msgid "The ``zh-cn`` and ``zh-tw`` language codes are removed."
msgstr ""

# 83731060369e44118a269c9574ae2ef3
#: ../../../../1.9/docs/releases/1.9.txt:1460
msgid "The internal ``django.utils.functional.memoize()`` is removed."
msgstr ""

# 97d96f6c0ba94b229df47d3dde950935
#: ../../../../1.9/docs/releases/1.9.txt:1462
msgid "``django.core.cache.get_cache`` is removed."
msgstr ""

# 9a1ebf30a7944856b4392be93e29e6f7
#: ../../../../1.9/docs/releases/1.9.txt:1464
msgid "``django.db.models.loading`` is removed."
msgstr "``django.db.models.loading`` a été supprimé."

# 41dacd7982a84032a8388a552a380339
#: ../../../../1.9/docs/releases/1.9.txt:1466
msgid "Passing callable arguments to querysets is no longer possible."
msgstr ""

# 26e0fd39a8714d04918b4c5216a66ab6
#: ../../../../1.9/docs/releases/1.9.txt:1468
msgid ""
"``BaseCommand.requires_model_validation`` is removed in favor of "
"``requires_system_checks``. Admin validators is replaced by admin checks."
msgstr ""

# cbf0abe8635e437dbd31c2df040a514b
#: ../../../../1.9/docs/releases/1.9.txt:1471
msgid ""
"The ``ModelAdmin.validator_class`` and ``default_validator_class`` "
"attributes are removed."
msgstr ""

# 2b73643fd85845868f9f9cbd94652089
#: ../../../../1.9/docs/releases/1.9.txt:1474
msgid "``ModelAdmin.validate()`` is removed."
msgstr ""

# 020b12d661da44bb88450ddae396c228
#: ../../../../1.9/docs/releases/1.9.txt:1476
msgid ""
"``django.db.backends.DatabaseValidation.validate_field`` is removed in favor"
" of the ``check_field`` method."
msgstr ""

# 24725e23a0d74681931a5428c617de70
#: ../../../../1.9/docs/releases/1.9.txt:1479
msgid "The ``validate`` management command is removed."
msgstr ""

# 72490bdf80aa462d9538b97631bcbb59
#: ../../../../1.9/docs/releases/1.9.txt:1481
msgid ""
"``django.utils.module_loading.import_by_path`` is removed in favor of "
"``django.utils.module_loading.import_string``."
msgstr ""

# f684f222965d48ff985804d78d38151e
#: ../../../../1.9/docs/releases/1.9.txt:1484
msgid ""
"``ssi`` and ``url`` template tags are removed from the ``future`` template "
"tag library."
msgstr ""

# 7033972a42c741e5b87093831a70342b
#: ../../../../1.9/docs/releases/1.9.txt:1487
msgid "``django.utils.text.javascript_quote()`` is removed."
msgstr ""

# 9868d25764844f64b379b725938bcff5
#: ../../../../1.9/docs/releases/1.9.txt:1489
msgid ""
"Database test settings as independent entries in the database settings, "
"prefixed by ``TEST_``, are no longer supported."
msgstr ""

# d7b791730aa047669f14ac591ec7d70e
#: ../../../../1.9/docs/releases/1.9.txt:1492
msgid ""
"The `cache_choices` option to :class:`~django.forms.ModelChoiceField` and "
":class:`~django.forms.ModelMultipleChoiceField` is removed."
msgstr ""

# 0ae9fdd1eb9e4a319e2b0a51b42e6d5a
#: ../../../../1.9/docs/releases/1.9.txt:1495
msgid ""
"The default value of the :attr:`RedirectView.permanent "
"<django.views.generic.base.RedirectView.permanent>` attribute has changed "
"from ``True`` to ``False``."
msgstr ""

# fffd99628efb41bc960cead5d7d97c85
#: ../../../../1.9/docs/releases/1.9.txt:1499
msgid ""
"``django.contrib.sitemaps.FlatPageSitemap`` is removed in favor of "
"``django.contrib.flatpages.sitemaps.FlatPageSitemap``."
msgstr ""

# cd8010a9c210487ebb93fde1cbcd1405
#: ../../../../1.9/docs/releases/1.9.txt:1502
msgid "Private API ``django.test.utils.TestTemplateLoader`` is removed."
msgstr "L'API privée ``django.test.utils.TestTemplateLoader`` a été supprimée."

# 178fc776299b456d958fd7cd55586c34
#: ../../../../1.9/docs/releases/1.9.txt:1504
msgid "The ``django.contrib.contenttypes.generic`` module is removed."
msgstr "Le module ``django.contrib.contenttypes.generic`` a été supprimé."

# 1c23e5633e0643669283add7ddca68c0
#: ../../../../1.9/docs/releases/1.9.1.txt:3
msgid "Django 1.9.1 release notes"
msgstr "Notes de publication de Django 1.9.1"

# cdb21eca230c43e498b4228afda61233
#: ../../../../1.9/docs/releases/1.9.1.txt:7
msgid "Django 1.9.1 fixes several bugs in 1.9."
msgstr "Django 1.9.1 corrige plusieurs bogues de la version 1.9."

# b8a90ff7af2249f1a87f94752f8ffbcd
#: ../../../../1.9/docs/releases/1.9.1.txt:12
msgid ""
"Fixed ``BaseCache.get_or_set()`` with the ``DummyCache`` backend "
"(:ticket:`25840`)."
msgstr "Correction de ``BaseCache.get_or_set()`` avec le moteur ``DummyCache`` (:ticket:`25840`)."

# 37fbc4d7df78408a98b47be1bd9eedba
#: ../../../../1.9/docs/releases/1.9.1.txt:15
msgid ""
"Fixed a regression in ``FormMixin`` causing forms to be validated twice "
"(:ticket:`25548`)."
msgstr "Correction d'une régression dans ``FormMixin`` provoquant une double validation des formulaires (:ticket:`25548`)."

# bd4c957e84504574b8898dbd2e91c7b2
#: ../../../../1.9/docs/releases/1.9.1.txt:18
msgid ""
"Fixed a system check crash with nested ``ArrayField``\\s (:ticket:`25867`)."
msgstr "Correction du plantage d'un contrôle système avec des champs ``ArrayField`` imbriqués (:ticket:`25867`)."

# 2430fd1294e342c88f1be0447fae069b
#: ../../../../1.9/docs/releases/1.9.1.txt:23
msgid ""
"Fixed a regression in ``CommonMiddleware`` causing ``If-None-Match`` checks "
"to always return HTTP 200 (:ticket:`25900`)."
msgstr "Correction d'une régression dans ``CommonMiddleware`` faisant que les contrôles ``If-None-Match`` renvoyaient toujours une réponse HTTP 200 (:ticket:`25900`)."

# af19a5450b354ba7a5e11ba1afbc85ab
#: ../../../../1.9/docs/releases/1.9.1.txt:30
msgid ""
"Fixed admin's delete confirmation page's summary counts of related objects "
"(:ticket:`25883`)."
msgstr ""

# 2d6a5cada063420b8302a2c17df55397
#: ../../../../1.9/docs/releases/1.9.1.txt:33
msgid ""
"Added ``from __future__ import unicode_literals`` to the default ``apps.py``"
" created by ``startapp`` on Python 2 (:ticket:`25909`). Add this line to "
"your own ``apps.py`` files created using Django 1.9 if you want your "
"migrations to work on both Python 2 and Python 3."
msgstr ""

# 9666236a3f0c442686824229928f8b50
#: ../../../../1.9/docs/releases/1.9.1.txt:38
msgid ""
"Prevented ``QuerySet.delete()`` from crashing on MySQL when querying across "
"relations (:ticket`25882`)."
msgstr ""

# f0d167ff33724c119fcfa9338ee35380
#: ../../../../1.9/docs/releases/1.9.1.txt:41
msgid ""
"Fixed evaluation of zero-length slices of ``QuerySet.values()`` "
"(:ticket:`25894`)."
msgstr ""

# ab8acb709e7e491cad0e45d33c442af3
#: ../../../../1.9/docs/releases/1.9.1.txt:47
msgid ""
"Fixed ``TypedChoiceField`` change detection with nullable fields "
"(:ticket:`25942`)."
msgstr ""

# acb4882491c4451d956809ed535d491e
#: ../../../../1.9/docs/releases/1.9.1.txt:50
msgid ""
"Fixed incorrect timezone warnings in custom admin templates that don't have "
"a ``data-admin-utc-offset`` attribute in the ``body`` tag. "
"(:ticket:`25845`)."
msgstr ""

# 2c6764e134f843b1aa89f90281053964
#: ../../../../1.9/docs/releases/1.9.1.txt:57
msgid ""
"Avoided hiding some exceptions, like an invalid ``INSTALLED_APPS`` setting, "
"behind ``AppRegistryNotReady`` when starting ``runserver`` "
"(:ticket:`25510`). This regression appeared in 1.8.5 as a side effect of "
"fixing :ticket:`24704` and by mistake the fix wasn't applied to the "
"``stable/1.9.x`` branch."
msgstr ""

# eaeaafe0f00e4142a18f16a7414a629b
#: ../../../../1.9/docs/releases/1.9.1.txt:62
msgid ""
"Fixed ``migrate --fake-initial`` detection of many-to-many tables "
"(:ticket:`25922`)."
msgstr ""

# 4ea469e8fece492cb958a02b6d7e9478
#: ../../../../1.9/docs/releases/1.9.1.txt:65
msgid ""
"Restored the functionality of the admin's ``list_editable`` add and change "
"buttons (:ticket:`25903`)."
msgstr ""

# cc9cbd69d22e433689fd183f327f4127
#: ../../../../1.9/docs/releases/1.9.1.txt:68
msgid "Fixed ``isnull`` query lookup for ``ForeignObject`` (:ticket:`25972`)."
msgstr ""

# d2211f96adb24e9ba8a3c479d7d346cb
#: ../../../../1.9/docs/releases/index.txt:3
msgid "Release notes"
msgstr "Notes de version"

# 735b045b58bc4c0eaf4bda1f6e729dd4
#: ../../../../1.9/docs/releases/index.txt:5
msgid ""
"Release notes for the official Django releases. Each release note will tell "
"you what's new in each version, and will also describe any backwards-"
"incompatible changes made in that version."
msgstr ""

# a7a989732e8e4d408b0212a687ebaecd
#: ../../../../1.9/docs/releases/index.txt:9
msgid ""
"For those :doc:`upgrading to a new version of Django</howto/upgrade-"
"version>`, you will need to check all the backwards-incompatible changes and"
" :doc:`deprecated features</internals/deprecation>` for each 'final' release"
" from the one after your current Django version, up to and including the new"
" version."
msgstr ""

# 6c09bd12db1547e2a92364afe05a4397
#: ../../../../1.9/docs/releases/index.txt:16
msgid "Final releases"
msgstr "Version finale"

# d3449cade3dd4f9db7b83460626b62b2
#: ../../../../1.9/docs/releases/index.txt:18
msgid ""
"Below are release notes through Django |version| and its patch releases. "
"Newer versions of the documentation contain the release notes for any later "
"releases."
msgstr ""

# 1f28725b3040499fbc0afcff48efceb3
#: ../../../../1.9/docs/releases/index.txt:24
msgid "1.9 release"
msgstr ""

# dbb30a65b3454d518d3802c44bca7a4f
#: ../../../../1.9/docs/releases/index.txt:32
msgid "1.8 release"
msgstr ""

# 1aaffc11d94e4fe99f0ea19b49b840f9
#: ../../../../1.9/docs/releases/index.txt:47
msgid "1.7 release"
msgstr "Version 1.7"

# c90534a6264f46f58a086f0d7a958a7a
#: ../../../../1.9/docs/releases/index.txt:65
msgid "1.6 release"
msgstr "Version 1.6"

# 84ba8b66569b40299538752e7236e84b
#: ../../../../1.9/docs/releases/index.txt:83
msgid "1.5 release"
msgstr "Version 1.5"

# c0a0e7ca1b0946caab8acc8c5822cacb
#: ../../../../1.9/docs/releases/index.txt:102
msgid "1.4 release"
msgstr "Version 1.4"

# cd95467a2a0f43abb4e928fbe91e8416
#: ../../../../1.9/docs/releases/index.txt:131
msgid "1.3 release"
msgstr "Version 1.3"

# 74095ed8ddf0475ba8df7253aaabc274
#: ../../../../1.9/docs/releases/index.txt:145
msgid "1.2 release"
msgstr "Version 1.2"

# 5d11605dfb254dbb8f2d25fe1ec989c4
#: ../../../../1.9/docs/releases/index.txt:159
msgid "1.1 release"
msgstr "Version 1.1"

# 3663651ddbed474680de0e476552f943
#: ../../../../1.9/docs/releases/index.txt:169
msgid "1.0 release"
msgstr "Version 1.0"

# 720aa3b0566049d488710517a8b43462
#: ../../../../1.9/docs/releases/index.txt:178
msgid "Pre-1.0 releases"
msgstr "Versions précédant la 1.0"

# ae3cbbcd60a948afbed9113804da883c
#: ../../../../1.9/docs/releases/index.txt:186
msgid "Security releases"
msgstr "Versions de sécurité"

# 5d1c215f2f8042f99461ecfa4bd552c9
#: ../../../../1.9/docs/releases/index.txt:188
msgid ""
"Whenever a security issue is disclosed via :doc:`Django's security policies "
"</internals/security>`, appropriate release notes are now added to all "
"affected release series."
msgstr ""

# 875ebe6ffe424736b002a071a17907ad
#: ../../../../1.9/docs/releases/index.txt:192
msgid ""
"Additionally, :doc:`an archive of disclosed security issues "
"</releases/security>` is maintained."
msgstr ""

# 21936b9b86fc4c09a69fe6fe9ff72ce0
#: ../../../../1.9/docs/releases/security.txt:5
msgid "Archive of security issues"
msgstr "Archive des issues de sécurité"

# 7bfa01707da442e9ac534bd3706a81e1
#: ../../../../1.9/docs/releases/security.txt:7
msgid ""
"Django's development team is strongly committed to responsible reporting and"
" disclosure of security-related issues, as outlined in :doc:`Django's "
"security policies </internals/security>`."
msgstr ""

# 1b391bebcb0140d9bcbd1e4f22f6653c
#: ../../../../1.9/docs/releases/security.txt:11
msgid ""
"As part of that commitment, we maintain the following historical list of "
"issues which have been fixed and disclosed. For each issue, the list below "
"includes the date, a brief description, the `CVE identifier "
"<https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures>`_ if "
"applicable, a list of affected versions, a link to the full disclosure and "
"links to the appropriate patch(es)."
msgstr ""

# fed91816a5374a0088b24aebd4349622
#: ../../../../1.9/docs/releases/security.txt:18
msgid "Some important caveats apply to this information:"
msgstr "Quelques mises en garde importantes applicables à ces informations "

# b155ee0231b24a1d8f99e1f84ed9c64d
#: ../../../../1.9/docs/releases/security.txt:20
msgid ""
"Lists of affected versions include only those versions of Django which had "
"stable, security-supported releases at the time of disclosure. This means "
"older versions (whose security support had expired) and versions which were "
"in pre-release (alpha/beta/RC) states at the time of disclosure may have "
"been affected, but are not listed."
msgstr ""

# b1409c56c53044c091d391eadff9ff65
#: ../../../../1.9/docs/releases/security.txt:27
msgid ""
"The Django project has on occasion issued security advisories, pointing out "
"potential security problems which can arise from improper configuration or "
"from other issues outside of Django itself. Some of these advisories have "
"received CVEs; when that is the case, they are listed here, but as they have"
" no accompanying patches or releases, only the description, disclosure and "
"CVE will be listed."
msgstr ""

# 48444a096fe940a8a1fee9ccd12e3e17
#: ../../../../1.9/docs/releases/security.txt:36
msgid "Issues prior to Django's security process"
msgstr ""

# 42bc67950f3243e085b936e7729d1363
#: ../../../../1.9/docs/releases/security.txt:38
msgid ""
"Some security issues were handled before Django had a formalized security "
"process in use. For these, new releases may not have been issued at the time"
" and CVEs may not have been assigned."
msgstr ""

# b63927d1df494ae9b88ac28bad03143e
#: ../../../../1.9/docs/releases/security.txt:43
msgid "August 16, 2006 - CVE-2007-0404"
msgstr "16 aout 2006 - CVE-2007-0404"

# fe5e5a9483ad438483434a4bf9e3a80b
#: ../../../../1.9/docs/releases/security.txt:45
msgid ""
"`CVE-2007-0404 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2007-0404&cid=3>`_: "
"Filename validation issue in translation framework. `Full description "
"<https://www.djangoproject.com/weblog/2006/aug/16/compilemessages/>`__"
msgstr ""

# 6f4091ad36be482fb65ceb6c55b4ac82
# d6587dcb593d4a75829d1db7613114e5
# c1bb6d2408a04ba99ebac93416d2842b
# fe2cbf8c9e024cbcaf004a14aacddbeb
# ca9573b0ff2d41b1b562bc304a64d162
# 17357cc9a8b549fbad9f950c28eb33dc
# c54020615be14c66861251982d85f01e
# 1a942d5490b14d4285321897c57f39dd
# 70505f29516f423daf6743bfd069cc36
# 00d3e249ba1749c2bb01e0d21a12bff8
# e7b25c2c76f3402fabc230f8ac7fb360
# af948c0eac804542bc65c8e29704e37f
# 00e23138d3e04dc897edd21d044ada3d
# 02772a047207453d8494530a338397e7
# f6d73bfca47545c29b21395516853a8a
# 7703f345bbb843b59ef7f859b6d6306d
# dd77c7a184eb40808bb68451069b0e3f
# 05d611ace371458cac3c3e101045fb37
# e87bd807a0d344aab96ec78ec2b7a7e5
# ad84d189a0f945d88f100694a8baa509
# 7d0eb8e383e24f818851988d49f55f52
# cb27163555a14bedb3274a7dbd2e0a4c
# a92da04661aa40f38896d9843cbc7157
# d57d442d7b5342bba7e185c4d5c5f04a
# 38a4b3c191b44ae6ba96e5b06e8ee5c2
# 16f3b3563cf248e3819879dbc6264349
# db49070136494ba295a01feb455a3853
# f8c1e16e8d1a46aa9437a61841b032c8
# fe6afad6404f4197b3eb888b192f28c1
# 88912a0953fe45e9b6a25ff68208348d
# fe7c9f5716a4444f9bbe943d0caf426a
# ba5a8c68f5024d83a2234262165b698b
# cfb2560ba40844aea9c4b37ba5072cb9
# c647e7926739476c9696d5ca0db5ab44
# 5f1ee6174080478ca0f0c2ac8b7b5fee
# d9b319e3c52c47d6b267338dbcd1efa4
# b2621dd131fd4766b1a3a50970901560
# f56d167cedf145e6b39555633baa1133
# 705e34fb71fc4accafc16a9855f683c1
# 3fb73cd4218147598e8df4f5b38fbf18
# 7e6721a9f7a9410aa2f129dd018e013e
# a10b758bbfc4426a9836ae46cb095e28
# c18d261d4bcc40018e2b7ba6fb2c4b5c
# d0dad806d2474dfab0ce679210ef2b50
# 615d71bed2ea4b8f8488d10ac993f597
# e573b3e0132b42bfbcd92a2d893f6232
# f6b5af1e41cb4bea927f2f0af67aedea
# 3a06d0a510284ae999f9fffa73c20f9c
# 8efb892d1e004ba4b2a11c4992587bd3
# 29ba842a53c34bd1a93b52ff38915000
# 160d0d6ffdbb4eeb8592c142c68ce2ea
# be7006f6c24c4a67a76f9ab305f41d0d
# 0906e01796ed4c5e9538e26b7d55c314
# 5093187037fa466ba8456c48fe2b2c20
#: ../../../../1.9/docs/releases/security.txt:48
#: ../../../../1.9/docs/releases/security.txt:60
#: ../../../../1.9/docs/releases/security.txt:76
#: ../../../../1.9/docs/releases/security.txt:88
#: ../../../../1.9/docs/releases/security.txt:100
#: ../../../../1.9/docs/releases/security.txt:112
#: ../../../../1.9/docs/releases/security.txt:123
#: ../../../../1.9/docs/releases/security.txt:134
#: ../../../../1.9/docs/releases/security.txt:144
#: ../../../../1.9/docs/releases/security.txt:155
#: ../../../../1.9/docs/releases/security.txt:166
#: ../../../../1.9/docs/releases/security.txt:177
#: ../../../../1.9/docs/releases/security.txt:188
#: ../../../../1.9/docs/releases/security.txt:199
#: ../../../../1.9/docs/releases/security.txt:210
#: ../../../../1.9/docs/releases/security.txt:221
#: ../../../../1.9/docs/releases/security.txt:232
#: ../../../../1.9/docs/releases/security.txt:243
#: ../../../../1.9/docs/releases/security.txt:256
#: ../../../../1.9/docs/releases/security.txt:267
#: ../../../../1.9/docs/releases/security.txt:278
#: ../../../../1.9/docs/releases/security.txt:289
#: ../../../../1.9/docs/releases/security.txt:300
#: ../../../../1.9/docs/releases/security.txt:311
#: ../../../../1.9/docs/releases/security.txt:322
#: ../../../../1.9/docs/releases/security.txt:333
#: ../../../../1.9/docs/releases/security.txt:344
#: ../../../../1.9/docs/releases/security.txt:355
#: ../../../../1.9/docs/releases/security.txt:366
#: ../../../../1.9/docs/releases/security.txt:376
#: ../../../../1.9/docs/releases/security.txt:387
#: ../../../../1.9/docs/releases/security.txt:398
#: ../../../../1.9/docs/releases/security.txt:409
#: ../../../../1.9/docs/releases/security.txt:422
#: ../../../../1.9/docs/releases/security.txt:435
#: ../../../../1.9/docs/releases/security.txt:448
#: ../../../../1.9/docs/releases/security.txt:461
#: ../../../../1.9/docs/releases/security.txt:474
#: ../../../../1.9/docs/releases/security.txt:487
#: ../../../../1.9/docs/releases/security.txt:500
#: ../../../../1.9/docs/releases/security.txt:513
#: ../../../../1.9/docs/releases/security.txt:528
#: ../../../../1.9/docs/releases/security.txt:540
#: ../../../../1.9/docs/releases/security.txt:554
#: ../../../../1.9/docs/releases/security.txt:568
#: ../../../../1.9/docs/releases/security.txt:581
#: ../../../../1.9/docs/releases/security.txt:594
#: ../../../../1.9/docs/releases/security.txt:608
#: ../../../../1.9/docs/releases/security.txt:623
#: ../../../../1.9/docs/releases/security.txt:635
#: ../../../../1.9/docs/releases/security.txt:649
#: ../../../../1.9/docs/releases/security.txt:663
#: ../../../../1.9/docs/releases/security.txt:677
#: ../../../../1.9/docs/releases/security.txt:691
msgid "Versions affected"
msgstr "Versions affectées"

# cbf421d6b09a4fffa57d46c85af9db5f
#: ../../../../1.9/docs/releases/security.txt:50
msgid ""
"Django 0.90 `(patch) <https://github.com/django/django/commit/518d406e53>`__"
msgstr "Django 0.90 `(correctif) <https://github.com/django/django/commit/518d406e53>`__"

# ad4e3b21d1a647c787ddbbb71286b2c0
#: ../../../../1.9/docs/releases/security.txt:51
msgid ""
"Django 0.91 `(patch) <https://github.com/django/django/commit/518d406e53>`__"
msgstr "Django 0.91 `(correctif) <https://github.com/django/django/commit/518d406e53>`__"

# e9e9465cd7b04e7eb72f7fdbca4e2ff9
#: ../../../../1.9/docs/releases/security.txt:52
msgid ""
"Django 0.95 `(patch) <https://github.com/django/django/commit/a132d411c6>`__"
" (released January 21 2007)"
msgstr "Django 0.95 `(correctif) <https://github.com/django/django/commit/a132d411c6>`__ (released January 21 2007)"

# b5d60fc40d1045ae988054441c27f1f6
#: ../../../../1.9/docs/releases/security.txt:55
msgid "January 21, 2007 - CVE-2007-0405"
msgstr "21 janvier 2007 - CVE-2007-0405"

# ee4c9c9aedf545788e90904bc3606718
#: ../../../../1.9/docs/releases/security.txt:57
msgid ""
"`CVE-2007-0405 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2007-0405&cid=3>`_: "
"Apparent \"caching\" of authenticated user. `Full description "
"<https://www.djangoproject.com/weblog/2007/jan/21/0951/>`__"
msgstr ""

# ed3bc9b5ab67484a8b9e0756f7d6eb91
#: ../../../../1.9/docs/releases/security.txt:62
msgid ""
"Django 0.95 `(patch) <https://github.com/django/django/commit/e89f0a6558>`__"
msgstr "Django 0.95 `(correctif) <https://github.com/django/django/commit/e89f0a6558>`__"

# daf0664d51824dbfbb2c72f87e7870c7
#: ../../../../1.9/docs/releases/security.txt:65
msgid "Issues under Django's security process"
msgstr "Issues relevant du processus de sécurité de Django"

# 74d08058fe334f4aab6b0b11c506cbcf
#: ../../../../1.9/docs/releases/security.txt:67
msgid ""
"All other security issues have been handled under versions of Django's "
"security process. These are listed below."
msgstr "Toutes les autres issues ont été traités dans le cadre du processus de sécurité de Django. Elles sont listées ci-dessous."

# 2f0ef108812e461487f776579470b8fb
#: ../../../../1.9/docs/releases/security.txt:71
msgid "October 26, 2007 - CVE-2007-5712"
msgstr "26 octobre 2007 - CVE-2007-5712"

# ace4ee09e74e4c36ac3e9bedaa345690
#: ../../../../1.9/docs/releases/security.txt:73
msgid ""
"`CVE-2007-5712 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2007-5712&cid=3>`_: "
"Denial-of-service via arbitrarily-large ``Accept-Language`` header. `Full "
"description <https://www.djangoproject.com/weblog/2007/oct/26/security-"
"fix/>`__"
msgstr ""

# 7c2fcb01bfcf4e5c93c7b85d32401684
#: ../../../../1.9/docs/releases/security.txt:78
msgid ""
"Django 0.91 `(patch) "
"<https://github.com/django/django/commit/8bc36e726c9e8c75c681d3ad232df8e882aaac81>`__"
msgstr "Django 0.91 `(correctif) <https://github.com/django/django/commit/8bc36e726c9e8c75c681d3ad232df8e882aaac81>`__"

# 1c0b5b1283134b72bd30f9b0579a44b5
#: ../../../../1.9/docs/releases/security.txt:79
msgid ""
"Django 0.95 `(patch) "
"<https://github.com/django/django/commit/412ed22502e11c50dbfee854627594f0e7e2c234>`__"
msgstr "Django 0.95 `(correctif) <https://github.com/django/django/commit/412ed22502e11c50dbfee854627594f0e7e2c234>`__"

# 4619da3427674f0593f8fd855a2d5b9c
#: ../../../../1.9/docs/releases/security.txt:80
msgid ""
"Django 0.96 `(patch) "
"<https://github.com/django/django/commit/7dd2dd08a79e388732ce00e2b5514f15bd6d0f6f>`__"
msgstr "Django 0.96 `(correctif) <https://github.com/django/django/commit/7dd2dd08a79e388732ce00e2b5514f15bd6d0f6f>`__"

# e930be410af44665ba06cf90f831f7c1
#: ../../../../1.9/docs/releases/security.txt:83
msgid "May 14, 2008 - CVE-2008-2302"
msgstr "14 mai 2008 - CVE-2008-2302"

# 8cc1f70b2cfc45679936ce14d65b5446
#: ../../../../1.9/docs/releases/security.txt:85
msgid ""
"`CVE-2008-2302 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2008-2302&cid=3>`_: "
"XSS via admin login redirect. `Full description "
"<https://www.djangoproject.com/weblog/2008/may/14/security/>`__"
msgstr ""

# 5cf2808e8a78419296dd753ac15962ad
#: ../../../../1.9/docs/releases/security.txt:90
msgid ""
"Django 0.91 `(patch) <https://github.com/django/django/commit/50ce7fb57d>`__"
msgstr "Django 0.91 `(correctif) <https://github.com/django/django/commit/50ce7fb57d>`__"

# 56179621d58b4088a29dd084a01658b2
#: ../../../../1.9/docs/releases/security.txt:91
msgid ""
"Django 0.95 `(patch) <https://github.com/django/django/commit/50ce7fb57d>`__"
msgstr "Django 0.95 `(correctif) <https://github.com/django/django/commit/50ce7fb57d>`__"

# 4986e077c78746f5b4c5dafd9291b623
#: ../../../../1.9/docs/releases/security.txt:92
msgid ""
"Django 0.96 `(patch) <https://github.com/django/django/commit/7791e5c050>`__"
msgstr "Django 0.96 `(correctif) <https://github.com/django/django/commit/7791e5c050>`__"

# 483518f6899a422086d285e0300185df
#: ../../../../1.9/docs/releases/security.txt:95
msgid "September 2, 2008 - CVE-2008-3909"
msgstr "2 septembre 2008 - CVE-2008-3909"

# b3909a3cd2964cb4ac2b66be8ca5671e
#: ../../../../1.9/docs/releases/security.txt:97
msgid ""
"`CVE-2008-3909 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2008-3909&cid=3>`_: "
"CSRF via preservation of POST data during admin login. `Full description "
"<https://www.djangoproject.com/weblog/2008/sep/02/security/>`__"
msgstr ""

# c8c9b8455e3d4ae69dfe1ad4d936af16
#: ../../../../1.9/docs/releases/security.txt:102
msgid ""
"Django 0.91 `(patch) "
"<https://github.com/django/django/commit/44debfeaa4473bd28872c735dd3d9afde6886752>`__"
msgstr "Django 0.91 `(correctif) <https://github.com/django/django/commit/44debfeaa4473bd28872c735dd3d9afde6886752>`__"

# f7a48107a08745798787939788fbc9c4
#: ../../../../1.9/docs/releases/security.txt:103
msgid ""
"Django 0.95 `(patch) "
"<https://github.com/django/django/commit/aee48854a164382c655acb9f18b3c06c3d238e81>`__"
msgstr "Django 0.95 `(correctif) <https://github.com/django/django/commit/aee48854a164382c655acb9f18b3c06c3d238e81>`__"

# cdf9f196e74a4c91866f5e48c0a9dc4d
#: ../../../../1.9/docs/releases/security.txt:104
msgid ""
"Django 0.96 `(patch) "
"<https://github.com/django/django/commit/7e0972bded362bc4b851c109df2c8a6548481a8e>`__"
msgstr "Django 0.96 `(correctif) <https://github.com/django/django/commit/7e0972bded362bc4b851c109df2c8a6548481a8e>`__"

# a8a64b3feda745e98fe575634e1573f2
#: ../../../../1.9/docs/releases/security.txt:107
msgid "July 28, 2009 - CVE-2009-2659"
msgstr "28 juillet 2009 - CVE-2009-2659"

# a5819a19f5094706b96d76134a416924
#: ../../../../1.9/docs/releases/security.txt:109
msgid ""
"`CVE-2009-2659 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2009-2659&cid=3>`_: "
"Directory-traversal in development server media handler. `Full description "
"<https://www.djangoproject.com/weblog/2009/jul/28/security/>`__"
msgstr ""

# 895f73bcf95a4bf9bf07ee563ccbd675
#: ../../../../1.9/docs/releases/security.txt:114
msgid ""
"Django 0.96 `(patch) <https://github.com/django/django/commit/da85d76fd6>`__"
msgstr "Django 0.96 `(correctif) <https://github.com/django/django/commit/da85d76fd6>`__"

# 5cda6944bf6a408eac3b8d7c6510a689
#: ../../../../1.9/docs/releases/security.txt:115
msgid ""
"Django 1.0 `(patch) <https://github.com/django/django/commit/df7f917b7f>`__"
msgstr "Django 1.0 `(correctif) <https://github.com/django/django/commit/df7f917b7f>`__"

# d3b944a699f94071ae7d12919195051e
#: ../../../../1.9/docs/releases/security.txt:118
msgid "October 9, 2009 - CVE-2009-3965"
msgstr "9 octobre 2009 - CVE-2009-3965"

# 7265ab7f5c4242a9a24966f0dd64e764
#: ../../../../1.9/docs/releases/security.txt:120
msgid ""
"`CVE-2009-3965 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2009-3695&cid=3>`_: "
"Denial-of-service via pathological regular expression performance. `Full "
"description <https://www.djangoproject.com/weblog/2009/oct/09/security/>`__"
msgstr ""

# c54e0f294783431eb27b65f16a6098eb
#: ../../../../1.9/docs/releases/security.txt:125
msgid ""
"Django 1.0 `(patch) <https://github.com/django/django/commit/594a28a904>`__"
msgstr "Django 1.0 `(correctif) <https://github.com/django/django/commit/594a28a904>`__"

# 7d9618913d894002b10985f83dd5af90
#: ../../../../1.9/docs/releases/security.txt:126
msgid ""
"Django 1.1 `(patch) <https://github.com/django/django/commit/e3e992e18b>`__"
msgstr "Django 1.1 `(correctif) <https://github.com/django/django/commit/e3e992e18b>`__"

# b4d45f0a6757497a8f0f68a7796ea98f
#: ../../../../1.9/docs/releases/security.txt:129
msgid "September 8, 2010 - CVE-2010-3082"
msgstr "8 septembre 2010 - CVE-2010-3082"

# 52dcd6c76e1041099ae194e223b22b6f
#: ../../../../1.9/docs/releases/security.txt:131
msgid ""
"`CVE-2010-3082 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-3082&cid=3>`_: "
"XSS via trusting unsafe cookie value. `Full description "
"<https://www.djangoproject.com/weblog/2010/sep/08/security-release/>`__"
msgstr ""

# abc63a2dc79c4d7bab3b9af387a2e57c
#: ../../../../1.9/docs/releases/security.txt:136
msgid ""
"Django 1.2 `(patch) <https://github.com/django/django/commit/7f84657b6b>`__"
msgstr "Django 1.2 `(correctif) <https://github.com/django/django/commit/7f84657b6b>`__"

# e99111b8fadc4185aa2cf7db6f3b9613
#: ../../../../1.9/docs/releases/security.txt:139
msgid "December 22, 2010 - CVE-2010-4534"
msgstr "22 décembre 2010 - CVE-2010-4534"

# 636ee3ff07f64b36840904f1e54324ad
#: ../../../../1.9/docs/releases/security.txt:141
msgid ""
"`CVE-2010-4534 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-4534&cid=3>`_: "
"Information leakage in administrative interface. `Full description "
"<https://www.djangoproject.com/weblog/2010/dec/22/security/>`__"
msgstr ""

# ad38a96fade944fab40f6e9a5fb81d9d
#: ../../../../1.9/docs/releases/security.txt:146
msgid ""
"Django 1.1 `(patch) <https://github.com/django/django/commit/17084839fd>`__"
msgstr "Django 1.1 `(correctif) <https://github.com/django/django/commit/17084839fd>`__"

# 6049ff66a8f043fdba019640e1f07cb9
#: ../../../../1.9/docs/releases/security.txt:147
msgid ""
"Django 1.2 `(patch) <https://github.com/django/django/commit/85207a245b>`__"
msgstr "Django 1.2 `(correctif) <https://github.com/django/django/commit/85207a245b>`__"

# 20d3ce92043c4ae1ad5bcaeca39ee77c
#: ../../../../1.9/docs/releases/security.txt:150
msgid "December 22, 2010 - CVE-2010-4535"
msgstr "22 décembre 2010 - CVE-2010-4535"

# 7926f564b608459d84245e43835c4579
#: ../../../../1.9/docs/releases/security.txt:152
msgid ""
"`CVE-2010-4535 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-4535&cid=2>`_: "
"Denial-of-service in password-reset mechanism. `Full description "
"<https://www.djangoproject.com/weblog/2010/dec/22/security/>`__"
msgstr ""

# 9a50ce055c8a4a73a68f478322a9e5fa
#: ../../../../1.9/docs/releases/security.txt:157
msgid ""
"Django 1.1 `(patch) <https://github.com/django/django/commit/7f8dd9cbac>`__"
msgstr "Django 1.1 `(correctif) <https://github.com/django/django/commit/7f8dd9cbac>`__"

# 802651586c594192974c7ed4870e1098
#: ../../../../1.9/docs/releases/security.txt:158
msgid ""
"Django 1.2 `(patch) <https://github.com/django/django/commit/d5d8942a16>`__"
msgstr "Django 1.2 `(correctif) <https://github.com/django/django/commit/d5d8942a16>`__"

# 7d5bcb24fc2c4a29be086f8ebf8aea68
#: ../../../../1.9/docs/releases/security.txt:161
msgid "February 8, 2011 - CVE-2011-0696"
msgstr "8 février 2011 - CVE-2011-0696"

# b75d261324de4172b98584ea089ca3f9
#: ../../../../1.9/docs/releases/security.txt:163
msgid ""
"`CVE-2011-0696 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-0696&cid=2>`_: "
"CSRF via forged HTTP headers. `Full description "
"<https://www.djangoproject.com/weblog/2011/feb/08/security/>`__"
msgstr ""

# d70e5d9736254f90be9e0d414e983455
#: ../../../../1.9/docs/releases/security.txt:168
msgid ""
"Django 1.1 `(patch) <https://github.com/django/django/commit/408c5c873c>`__"
msgstr "Django 1.1 `(correctif) <https://github.com/django/django/commit/408c5c873c>`__"

# c281d8f3d72c4b4d90fdd705a32c3184
#: ../../../../1.9/docs/releases/security.txt:169
msgid ""
"Django 1.2 `(patch) <https://github.com/django/django/commit/818e70344e>`__"
msgstr "Django 1.2 `(correctif) <https://github.com/django/django/commit/818e70344e>`__"

# cc48419470b74dea8357e8ec3e0e042b
#: ../../../../1.9/docs/releases/security.txt:172
msgid "February 8, 2011 - CVE-2011-0697"
msgstr "8 février 2011 - CVE-2011-0697"

# 99f977e304a94fa2b9fd2dd8d0e1e68c
#: ../../../../1.9/docs/releases/security.txt:174
msgid ""
"`CVE-2011-0697 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-0697&cid=2>`_: "
"XSS via unsanitized names of uploaded files. `Full description "
"<https://www.djangoproject.com/weblog/2011/feb/08/security/>`__"
msgstr ""

# 62cd8142c2b3415f9d3bd0fcc3c903e8
#: ../../../../1.9/docs/releases/security.txt:179
msgid ""
"Django 1.1 `(patch) <https://github.com/django/django/commit/1966786d2d>`__"
msgstr "Django 1.1 `(correctif) <https://github.com/django/django/commit/1966786d2d>`__"

# 0abbcbee674349dea09bb8677008faef
#: ../../../../1.9/docs/releases/security.txt:180
msgid ""
"Django 1.2 `(patch) <https://github.com/django/django/commit/1f814a9547>`__"
msgstr "Django 1.2 `(correctif) <https://github.com/django/django/commit/1f814a9547>`__"

# 3c3cacf4a62443b6938099a2e2155209
#: ../../../../1.9/docs/releases/security.txt:183
msgid "February 8, 2011 - CVE-2011-0698"
msgstr "8 février 2011 - CVE-2011-0698"

# d69e5030fb6e4729a8e39e7ee6f30841
#: ../../../../1.9/docs/releases/security.txt:185
msgid ""
"`CVE-2011-0698 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-0698&cid=2>`_: "
"Directory-traversal on Windows via incorrect path-separator handling. `Full "
"description <https://www.djangoproject.com/weblog/2011/feb/08/security/>`__"
msgstr ""

# 6a8808548d2b480483546881679ce56f
#: ../../../../1.9/docs/releases/security.txt:190
msgid ""
"Django 1.1 `(patch) <https://github.com/django/django/commit/570a32a047>`__"
msgstr "Django 1.1 `(correctif) <https://github.com/django/django/commit/570a32a047>`__"

# f629d65fcb4842fe8cf0f5b7d070a802
#: ../../../../1.9/docs/releases/security.txt:191
msgid ""
"Django 1.2 `(patch) <https://github.com/django/django/commit/194566480b>`__"
msgstr "Django 1.2 `(correctif) <https://github.com/django/django/commit/194566480b>`__"

# 8f67dc8eee9940f49293d426a6bcc419
#: ../../../../1.9/docs/releases/security.txt:194
msgid "September 9, 2011 - CVE-2011-4136"
msgstr "9 septembre 2011 - CVE-2011-4136"

# 0b17a941cd884fc2aa158dd874484669
#: ../../../../1.9/docs/releases/security.txt:196
msgid ""
"`CVE-2011-4136 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-4136&cid=2>`_: "
"Session manipulation when using memory-cache-backed session. `Full "
"description <https://www.djangoproject.com/weblog/2011/sep/09/security-"
"releases-issued/>`__"
msgstr ""

# 922d59612f364d82b3c74968f616c3de
#: ../../../../1.9/docs/releases/security.txt:201
msgid ""
"Django 1.2 `(patch) <https://github.com/django/django/commit/ac7c3a110f>`__"
msgstr "Django 1.2 `(correctif) <https://github.com/django/django/commit/ac7c3a110f>`__"

# 5eb47f5dab2042c6bc2a410d09af0df0
#: ../../../../1.9/docs/releases/security.txt:202
msgid ""
"Django 1.3 `(patch) <https://github.com/django/django/commit/fbe2eead2f>`__"
msgstr "Django 1.3 `(correctif) <https://github.com/django/django/commit/fbe2eead2f>`__"

# 0db567cb09584ade8811c760b71a2fea
#: ../../../../1.9/docs/releases/security.txt:205
msgid "September 9, 2011 - CVE-2011-4137"
msgstr "9 septembre 2011 - CVE-2011-4137"

# 423746cc979440d49821121f9f2b0a75
#: ../../../../1.9/docs/releases/security.txt:207
msgid ""
"`CVE-2011-4137 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-4137&cid=2>`_: "
"Denial-of-service via via ``URLField.verify_exists``. `Full description "
"<https://www.djangoproject.com/weblog/2011/sep/09/security-releases-"
"issued/>`__"
msgstr ""

# b8da46552bb343bfae3e9f90a67676b8
#: ../../../../1.9/docs/releases/security.txt:212
msgid ""
"Django 1.2 `(patch) <https://github.com/django/django/commit/7268f8af86>`__"
msgstr "Django 1.2 `(correctif) <https://github.com/django/django/commit/7268f8af86>`__"

# 700835684dac487a92c14f09c58d8ac3
#: ../../../../1.9/docs/releases/security.txt:213
msgid ""
"Django 1.3 `(patch) <https://github.com/django/django/commit/1a76dbefdf>`__"
msgstr "Django 1.3 `(correctif) <https://github.com/django/django/commit/1a76dbefdf>`__"

# 4b8ae99e75e34884bf024c22f81c974d
#: ../../../../1.9/docs/releases/security.txt:216
msgid "September 9, 2011 - CVE-2011-4138"
msgstr "9 septembre 2011 - CVE-2011-4138"

# e9fd4781674d4d13941fb310309e5396
#: ../../../../1.9/docs/releases/security.txt:218
msgid ""
"`CVE-2011-4138 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-4138&cid=2>`_: "
"Information leakage/arbitrary request issuance via "
"``URLField.verify_exists``. `Full description "
"<https://www.djangoproject.com/weblog/2011/sep/09/security-releases-"
"issued/>`__"
msgstr ""

# b913816eac6f4bda8ec3ee501cab8d59
#: ../../../../1.9/docs/releases/security.txt:223
msgid ""
"Django 1.2: `(patch) <https://github.com/django/django/commit/7268f8af86>`__"
msgstr "Django 1.2: `(correctif) <https://github.com/django/django/commit/7268f8af86>`__"

# 87f567483b5140b5a845813136952e22
#: ../../../../1.9/docs/releases/security.txt:224
msgid ""
"Django 1.3: `(patch) <https://github.com/django/django/commit/1a76dbefdf>`__"
msgstr "Django 1.3: `(correctif) <https://github.com/django/django/commit/1a76dbefdf>`__"

# 66fa0162491b4893ac41181d0394f629
#: ../../../../1.9/docs/releases/security.txt:227
msgid "September 9, 2011 - CVE-2011-4139"
msgstr "9 septembre 2011 - CVE-2011-4139"

# 0ca208859e3d4675a6f4786df5cf0009
#: ../../../../1.9/docs/releases/security.txt:229
msgid ""
"`CVE-2011-4139 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-4139&cid=2>`_: "
"``Host`` header cache poisoning. `Full description "
"<https://www.djangoproject.com/weblog/2011/sep/09/security-releases-"
"issued/>`__"
msgstr ""

# d958559042b6455197faf7496569dbfe
#: ../../../../1.9/docs/releases/security.txt:234
msgid ""
"Django 1.2 `(patch) <https://github.com/django/django/commit/c613af4d64>`__"
msgstr "Django 1.2 `(correctif) <https://github.com/django/django/commit/c613af4d64>`__"

# 1426eddd2a924441b7e93d0e59f4346d
#: ../../../../1.9/docs/releases/security.txt:235
msgid ""
"Django 1.3 `(patch) <https://github.com/django/django/commit/2f7fadc38e>`__"
msgstr "Django 1.3 `(correctif) <https://github.com/django/django/commit/2f7fadc38e>`__"

# adc39c18e64c4f70b9fa44a8bf02913e
#: ../../../../1.9/docs/releases/security.txt:238
msgid "September 9, 2011 - CVE-2011-4140"
msgstr "9 septembre 2011 - CVE-2011-4140"

# d9a3c619ba464fd293e60c449e760b9b
#: ../../../../1.9/docs/releases/security.txt:240
msgid ""
"`CVE-2011-4140 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-4140&cid=2>`_: "
"Potential CSRF via ``Host`` header.  `Full description "
"<https://www.djangoproject.com/weblog/2011/sep/09/security-releases-"
"issued/>`__"
msgstr ""

# e8cce4dc6447412bb590e9d04dc54b36
#: ../../../../1.9/docs/releases/security.txt:245
msgid "This notification was an advisory only, so no patches were issued."
msgstr ""

# 203aff15047e4e53876c97685165c1b5
#: ../../../../1.9/docs/releases/security.txt:247
msgid "Django 1.2"
msgstr "Django 1.2"

# 265cb9053e054348882dde5935663cc7
#: ../../../../1.9/docs/releases/security.txt:248
msgid "Django 1.3"
msgstr "Django 1.3"

# 6f9f7d5fcf5a42718e5affc8aded4c88
#: ../../../../1.9/docs/releases/security.txt:251
msgid "July 30, 2012 - CVE-2012-3442"
msgstr "30 juillet 2012 - CVE-2012-3442"

# d3fc538a6ef8467babd406e0a1de282c
#: ../../../../1.9/docs/releases/security.txt:253
msgid ""
"`CVE-2012-3442 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-3442&cid=2>`_: "
"XSS via failure to validate redirect scheme. `Full description "
"<https://www.djangoproject.com/weblog/2012/jul/30/security-releases-"
"issued/>`__"
msgstr ""

# 48473e57982d454a94ad20df51cc86f1
#: ../../../../1.9/docs/releases/security.txt:258
msgid ""
"Django 1.3: `(patch) "
"<https://github.com/django/django/commit/4dea4883e6c50d75f215a6b9bcbd95273f57c72d>`__"
msgstr "Django 1.3: `(correctif) <https://github.com/django/django/commit/4dea4883e6c50d75f215a6b9bcbd95273f57c72d>`__"

# 09278d6b900548edbb15353e60c01f6f
#: ../../../../1.9/docs/releases/security.txt:259
msgid ""
"Django 1.4: `(patch) "
"<https://github.com/django/django/commit/e34685034b60be1112160e76091e5aee60149fa1>`__"
msgstr "Django 1.4: `(correctif) <https://github.com/django/django/commit/e34685034b60be1112160e76091e5aee60149fa1>`__"

# 60a3342fb5fa4c7795f33dd482c5a87b
#: ../../../../1.9/docs/releases/security.txt:262
msgid "July 30, 2012 - CVE-2012-3443"
msgstr "30 juillet 2012 - CVE-2012-3443"

# 874d285e37a94a9ab8f9ec443f2c6809
#: ../../../../1.9/docs/releases/security.txt:264
msgid ""
"`CVE-2012-3443 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-3443&cid=2>`_: "
"Denial-of-service via compressed image files. `Full description "
"<https://www.djangoproject.com/weblog/2012/jul/30/security-releases-"
"issued/>`__"
msgstr ""

# 44c782d2250242f88bba066df9950ca6
#: ../../../../1.9/docs/releases/security.txt:269
msgid ""
"Django 1.3: `(patch) "
"<https://github.com/django/django/commit/b2eb4787a0fff9c9993b78be5c698e85108f3446>`__"
msgstr "Django 1.3: `(correctif) <https://github.com/django/django/commit/b2eb4787a0fff9c9993b78be5c698e85108f3446>`__"

# b9c6ae8053f44d85ac4b8833d845d041
#: ../../../../1.9/docs/releases/security.txt:270
msgid ""
"Django 1.4: `(patch) "
"<https://github.com/django/django/commit/c14f325c4eef628bc7bfd8873c3a72aeb0219141>`__"
msgstr "Django 1.4: `(correctif) <https://github.com/django/django/commit/c14f325c4eef628bc7bfd8873c3a72aeb0219141>`__"

# f31cf28f65144cac98029550c0b52f7b
#: ../../../../1.9/docs/releases/security.txt:273
msgid "July 30, 2012 - CVE-2012-3444"
msgstr "30 juillet 2012 - CVE-2012-3444"

# c486d39a49f84afc947f38b964ae7eba
#: ../../../../1.9/docs/releases/security.txt:275
msgid ""
"`CVE-2012-3444 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-3444&cid=2>`_: "
"Denial-of-service via large image files. `Full description "
"<https://www.djangoproject.com/weblog/2012/jul/30/security-releases-"
"issued/>`__"
msgstr ""

# 9d396f29d88d4d54a10785099e698e1f
#: ../../../../1.9/docs/releases/security.txt:280
msgid ""
"Django 1.3 `(patch) "
"<https://github.com/django/django/commit/9ca0ff6268eeff92d0d0ac2c315d4b6a8e229155>`__"
msgstr "Django 1.3 `(correctif) <https://github.com/django/django/commit/9ca0ff6268eeff92d0d0ac2c315d4b6a8e229155>`__"

# d8edda48285b4b26a9ebf5c03d0a72d0
#: ../../../../1.9/docs/releases/security.txt:281
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/da33d67181b53fe6cc737ac1220153814a1509f6>`__"
msgstr "Django 1.4 `(correctif) <https://github.com/django/django/commit/da33d67181b53fe6cc737ac1220153814a1509f6>`__"

# a9dd2fd1250d48828b74dd9000a4237f
#: ../../../../1.9/docs/releases/security.txt:284
msgid "October 17, 2012 - CVE-2012-4520"
msgstr "17 octobre 2012 - CVE-2012-4520"

# cb2d905b9e1e4e67b6b508c65a7a75eb
#: ../../../../1.9/docs/releases/security.txt:286
msgid ""
"`CVE-2012-4520 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-4520&cid=2>`_: "
"``Host`` header poisoning. `Full description "
"<https://www.djangoproject.com/weblog/2012/oct/17/security/>`__"
msgstr ""

# 4aa72ced4c4f48ec9aa75653489f96b8
#: ../../../../1.9/docs/releases/security.txt:291
msgid ""
"Django 1.3 `(patch) "
"<https://github.com/django/django/commit/b45c377f8f488955e0c7069cad3f3dd21910b071>`__"
msgstr "Django 1.3 `(correctif) <https://github.com/django/django/commit/b45c377f8f488955e0c7069cad3f3dd21910b071>`__"

# 8029ecc3b1224613ae98a22a70da6557
#: ../../../../1.9/docs/releases/security.txt:292
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/92d3430f12171f16f566c9050c40feefb830a4a3>`__"
msgstr "Django 1.4 `(correctif) <https://github.com/django/django/commit/92d3430f12171f16f566c9050c40feefb830a4a3>`__"

# ada7d3a3b36e45b5b14db8ab9c0f970b
#: ../../../../1.9/docs/releases/security.txt:295
msgid "December 10, 2012 - No CVE 1"
msgstr "10 décembre 2012 - Pas de CVE 1"

# f8d9f1cd23154800ac6d04db75868cc1
#: ../../../../1.9/docs/releases/security.txt:297
msgid ""
"Additional hardening of ``Host`` header handling. `Full description "
"<https://www.djangoproject.com/weblog/2012/dec/10/security/>`__"
msgstr ""

# 1d7a0498e2c74147adb99a7c181dbf9c
#: ../../../../1.9/docs/releases/security.txt:302
msgid ""
"Django 1.3 `(patch) "
"<https://github.com/django/django/commit/2da4ace0bc1bc1d79bf43b368cb857f6f0cd6b1b>`__"
msgstr "Django 1.3 `(correctif) <https://github.com/django/django/commit/2da4ace0bc1bc1d79bf43b368cb857f6f0cd6b1b>`__"

# a39ce9c3b8304cbc8081f522cf43af81
#: ../../../../1.9/docs/releases/security.txt:303
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/319627c184e71ae267d6b7f000e293168c7b6e09>`__"
msgstr "Django 1.4 `(correctif) <https://github.com/django/django/commit/319627c184e71ae267d6b7f000e293168c7b6e09>`__"

# 8751019711a04dc8a5b3bca67c647d7f
#: ../../../../1.9/docs/releases/security.txt:306
msgid "December 10, 2012 - No CVE 2"
msgstr "10 Décembre 2012 - Pas de CVE 2"

# 6ff653b807d2423799f6a6d7744898dc
#: ../../../../1.9/docs/releases/security.txt:308
msgid ""
"Additional hardening of redirect validation. `Full description "
"<https://www.djangoproject.com/weblog/2012/dec/10/security/>`__"
msgstr ""

# b94f78ecb27f4cdd9a2e2e780f485432
#: ../../../../1.9/docs/releases/security.txt:313
msgid ""
"Django 1.3: `(patch) "
"<https://github.com/django/django/commit/1515eb46daa0897ba5ad5f0a2db8969255f1b343>`__"
msgstr "Django 1.3: `(correctif) <https://github.com/django/django/commit/1515eb46daa0897ba5ad5f0a2db8969255f1b343>`__"

# adfc8711493f46e7805b23bd80649a23
#: ../../../../1.9/docs/releases/security.txt:314
msgid ""
"Django 1.4: `(patch) "
"<https://github.com/django/django/commit/b2ae0a63aeec741f1e51bac9a95a27fd635f9652>`__"
msgstr "Django 1.4: `(correctif) <https://github.com/django/django/commit/b2ae0a63aeec741f1e51bac9a95a27fd635f9652>`__"

# 7564a19327534c2596b5123109a04432
#: ../../../../1.9/docs/releases/security.txt:317
msgid "February 19, 2013 - No CVE"
msgstr "19 février 2013 - Pas de CVE"

# 456823a7eeca4e94bf3e279a92f83eb5
#: ../../../../1.9/docs/releases/security.txt:319
msgid ""
"Additional hardening of ``Host`` header handling. `Full description "
"<https://www.djangoproject.com/weblog/2013/feb/19/security/>`__"
msgstr ""

# 9cfa8573456a4cc9899229c505c0b976
#: ../../../../1.9/docs/releases/security.txt:324
msgid ""
"Django 1.3 `(patch) "
"<https://github.com/django/django/commit/27cd872e6e36a81d0bb6f5b8765a1705fecfc253>`__"
msgstr "Django 1.3 `(correctif) <https://github.com/django/django/commit/27cd872e6e36a81d0bb6f5b8765a1705fecfc253>`__"

# 55621892a6b44f3e82aa79d016a86632
#: ../../../../1.9/docs/releases/security.txt:325
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/9936fdb11d0bbf0bd242f259bfb97bbf849d16f8>`__"
msgstr "Django 1.4 `(correctif) <https://github.com/django/django/commit/9936fdb11d0bbf0bd242f259bfb97bbf849d16f8>`__"

# 985b2bcb1f544b18a8bc11fba49d9256
#: ../../../../1.9/docs/releases/security.txt:328
msgid "February 19, 2013 - CVE-2013-1664/1665"
msgstr "19 février 2013 - CVE-2013-1664/1665"

# 3b4980ff57774b23936b50d81bfaad7b
#: ../../../../1.9/docs/releases/security.txt:330
msgid ""
"`CVE-2013-1664 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-1664&cid=2>`_ and"
" `CVE-2013-1665 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-1665&cid=2>`_: "
"Entity-based attacks against Python XML libraries. `Full description "
"<https://www.djangoproject.com/weblog/2013/feb/19/security/>`__"
msgstr ""

# 5bc87945f77e4aff82c5dc5e3177e83a
#: ../../../../1.9/docs/releases/security.txt:335
msgid ""
"Django 1.3 `(patch) "
"<https://github.com/django/django/commit/d19a27066b2247102e65412aa66917aff0091112>`__"
msgstr "Django 1.3 `(correctif) <https://github.com/django/django/commit/d19a27066b2247102e65412aa66917aff0091112>`__"

# 81050d06a93a4d96b4d096cbe3910d16
#: ../../../../1.9/docs/releases/security.txt:336
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/1c60d07ba23e0350351c278ad28d0bd5aa410b40>`__"
msgstr "Django 1.4 `(correctif) <https://github.com/django/django/commit/1c60d07ba23e0350351c278ad28d0bd5aa410b40>`__"

# 6cca2bc7d5454e6cbd21bb24d1829ea2
#: ../../../../1.9/docs/releases/security.txt:339
msgid "February 19, 2013 - CVE-2013-0305"
msgstr "19 février 2013 - CVE-2013-0305"

# a1337924080948d3bae21e9544c5b021
#: ../../../../1.9/docs/releases/security.txt:341
msgid ""
"`CVE-2013-0305 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-0305&cid=2>`_: "
"Information leakage via admin history log.  `Full description "
"<https://www.djangoproject.com/weblog/2013/feb/19/security/>`__"
msgstr ""

# 20c6185e689a4374b44179149d16ffa9
#: ../../../../1.9/docs/releases/security.txt:346
msgid ""
"Django 1.3 `(patch) "
"<https://github.com/django/django/commit/d3a45e10c8ac8268899999129daa27652ec0da35>`__"
msgstr "Django 1.3 `(correctif) <https://github.com/django/django/commit/d3a45e10c8ac8268899999129daa27652ec0da35>`__"

# 89d1aeea516b4cdcac778a2f65a6add1
#: ../../../../1.9/docs/releases/security.txt:347
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/0e7861aec73702f7933ce2a93056f7983939f0d6>`__"
msgstr "Django 1.4 `(correctif) <https://github.com/django/django/commit/0e7861aec73702f7933ce2a93056f7983939f0d6>`__"

# 2d19b8a967e44a0eb783f20a91d97c1e
#: ../../../../1.9/docs/releases/security.txt:350
msgid "February 19, 2013 - CVE-2013-0306"
msgstr "19 février 2013 - CVE-2013-0306"

# 72de5bd2577747ec8340819b8474466b
#: ../../../../1.9/docs/releases/security.txt:352
msgid ""
"`CVE-2013-0306 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-0306&cid=2>`_: "
"Denial-of-service via formset ``max_num`` bypass. `Full description "
"<https://www.djangoproject.com/weblog/2013/feb/19/security/>`__"
msgstr ""

# 10c781973f554d8baddacedb11883012
#: ../../../../1.9/docs/releases/security.txt:357
msgid ""
"Django 1.3 `(patch) "
"<https://github.com/django/django/commit/d7094bbce8cb838f3b40f504f198c098ff1cf727>`__"
msgstr "Django 1.3 `(correctif) <https://github.com/django/django/commit/d7094bbce8cb838f3b40f504f198c098ff1cf727>`__"

# 7d0d2804bcf84578810d8c79dcd20393
#: ../../../../1.9/docs/releases/security.txt:358
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/0cc350a896f70ace18280410eb616a9197d862b0>`__"
msgstr "Django 1.4 `(correctif) <https://github.com/django/django/commit/0cc350a896f70ace18280410eb616a9197d862b0>`__"

# 2b60b805dada47588ba7aace7fc54cbd
#: ../../../../1.9/docs/releases/security.txt:361
msgid "August 13, 2013 - CVE-2013-4249"
msgstr ""

# 37d21afcab9842398bb05744bea5931c
#: ../../../../1.9/docs/releases/security.txt:363
msgid ""
"`CVE-2013-4249 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-4249&cid=2>`_: "
"XSS via admin trusting ``URLField`` values. `Full description "
"<https://www.djangoproject.com/weblog/2013/aug/13/security-releases-"
"issued/>`__"
msgstr ""

# 3b8a0c82e230411f957df2a6fa63cc8a
#: ../../../../1.9/docs/releases/security.txt:368
msgid ""
"Django 1.5 `(patch) "
"<https://github.com/django/django/commit/90363e388c61874add3f3557ee654a996ec75d78>`__"
msgstr "Django 1.5 `(correctif) <https://github.com/django/django/commit/90363e388c61874add3f3557ee654a996ec75d78>`__"

# d7cf2338a83f4cd69716c420b1d2e9c0
#: ../../../../1.9/docs/releases/security.txt:371
msgid "August 13, 2013 - CVE-2013-6044"
msgstr ""

# ae552d3a148e4c75b03fc066a327ee2f
#: ../../../../1.9/docs/releases/security.txt:373
msgid ""
"`CVE-2013-6044 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-6044&cid=2>`_: "
"Possible XSS via unvalidated URL redirect schemes. `Full description "
"<https://www.djangoproject.com/weblog/2013/aug/13/security-releases-"
"issued/>`__"
msgstr ""

# 3bdc87e42a664ca69fed228d5cf42bd0
#: ../../../../1.9/docs/releases/security.txt:378
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/ec67af0bd609c412b76eaa4cc89968a2a8e5ad6a>`__"
msgstr "Django 1.4 `(correctif) <https://github.com/django/django/commit/ec67af0bd609c412b76eaa4cc89968a2a8e5ad6a>`__"

# 1d8f52f425b6444aa145ca94a6afc396
#: ../../../../1.9/docs/releases/security.txt:379
msgid ""
"Django 1.5 `(patch) "
"<https://github.com/django/django/commit/1a274ccd6bc1afbdac80344c9b6e5810c1162b5f>`__"
msgstr "Django 1.5 `(correctif) <https://github.com/django/django/commit/1a274ccd6bc1afbdac80344c9b6e5810c1162b5f>`__"

# 26814a0e73f44b80a46adb28e9e367e0
#: ../../../../1.9/docs/releases/security.txt:382
msgid "September 10, 2013 - CVE-2013-4315"
msgstr "10 septembre 2013 - CVE-2013-4315"

# c90bc1997e584708a7b33f23cf15e5be
#: ../../../../1.9/docs/releases/security.txt:384
msgid ""
"`CVE-2013-4315 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-4315&cid=2>`_ "
"Directory-traversal via ``ssi`` template tag. `Full description "
"<https://www.djangoproject.com/weblog/2013/sep/10/security-releases-"
"issued/>`__"
msgstr ""

# aa7dd9e4ec634bec830392b8a7ca991f
#: ../../../../1.9/docs/releases/security.txt:389
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/87d2750b39f6f2d54b7047225521a44dcd37e896>`__"
msgstr "Django 1.4 `(correctif) <https://github.com/django/django/commit/87d2750b39f6f2d54b7047225521a44dcd37e896>`__"

# 0defcef244b84ee098dc2b7e1809bef8
#: ../../../../1.9/docs/releases/security.txt:390
msgid ""
"Django 1.5 `(patch) "
"<https://github.com/django/django/commit/988b61c550d798f9a66d17ee0511fb7a9a7f33ca>`__"
msgstr "Django 1.5 `(correctif) <https://github.com/django/django/commit/988b61c550d798f9a66d17ee0511fb7a9a7f33ca>`__"

# e5021b92b99b49f4be6856c6340868cf
#: ../../../../1.9/docs/releases/security.txt:393
msgid "September 14, 2013 - CVE-2013-1443"
msgstr "14 septembre 2013 - CVE-2013-1443"

# 00d00cd5aa3a471b9b1dadecf2cddec0
#: ../../../../1.9/docs/releases/security.txt:395
msgid ""
"CVE-2013-1443: Denial-of-service via large passwords. `Full description "
"<https://www.djangoproject.com/weblog/2013/sep/15/security/>`__"
msgstr "CVE-2013-1443: Déni de service via les mots de passe. `Description complète <https://www.djangoproject.com/weblog/2013/sep/15/security/>`__"

# 48e5ac561762428587bb8a101d5917ad
#: ../../../../1.9/docs/releases/security.txt:400
msgid ""
"Django 1.4 `(patch "
"<https://github.com/django/django/commit/3f3d887a6844ec2db743fee64c9e53e04d39a368>`__"
" and `Python compatibility fix) "
"<https://github.com/django/django/commit/6903d1690a92aa040adfb0c8eb37cf62e4206714>`__"
msgstr ""

# f215e0521d3f49c4bb4782578373d28a
#: ../../../../1.9/docs/releases/security.txt:401
msgid ""
"Django 1.5 `(patch) "
"<https://github.com/django/django/commit/22b74fa09d7ccbc8c52270d648a0da7f3f0fa2bc>`__"
msgstr "Django 1.5 `(correctif) <https://github.com/django/django/commit/22b74fa09d7ccbc8c52270d648a0da7f3f0fa2bc>`__"

# bd25f9599d724fb383d289fd232efe83
#: ../../../../1.9/docs/releases/security.txt:404
msgid "April 21, 2014 - CVE-2014-0472"
msgstr "21 avril 2014 - CVE-2014-0472"

# 4051cbcd1f6140dba0d89a738ba39b24
#: ../../../../1.9/docs/releases/security.txt:406
msgid ""
"`CVE-2014-0472 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0472&cid=2>`_: "
"Unexpected code execution using ``reverse()``. `Full description "
"<https://www.djangoproject.com/weblog/2014/apr/21/security/>`__"
msgstr ""

# ccfc2ecb5d344e6d85c0b55aa180670e
#: ../../../../1.9/docs/releases/security.txt:411
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/c1a8c420fe4b27fb2caf5e46d23b5712fc0ac535>`__"
msgstr "Django 1.4 `(correctif) <https://github.com/django/django/commit/c1a8c420fe4b27fb2caf5e46d23b5712fc0ac535>`__"

# 817f76f14bdf46c4aaa571afa467d9cc
#: ../../../../1.9/docs/releases/security.txt:412
msgid ""
"Django 1.5 `(patch) "
"<https://github.com/django/django/commit/2a5bcb69f42b84464b24b5c835dca6467b6aa7f1>`__"
msgstr "Django 1.5 `(correctif) <https://github.com/django/django/commit/2a5bcb69f42b84464b24b5c835dca6467b6aa7f1>`__"

# b421ff4c14f24701841a0b7d60f90231
#: ../../../../1.9/docs/releases/security.txt:413
msgid ""
"Django 1.6 `(patch) "
"<https://github.com/django/django/commit/4352a50871e239ebcdf64eee6f0b88e714015c1b>`__"
msgstr "Django 1.6 `(correctif) <https://github.com/django/django/commit/4352a50871e239ebcdf64eee6f0b88e714015c1b>`__"

# d6e8bd20ed374154b409610d4098300e
#: ../../../../1.9/docs/releases/security.txt:414
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/546740544d7f69254a67b06a3fc7fa0c43512958>`__"
msgstr "Django 1.7 `(correctif) <https://github.com/django/django/commit/546740544d7f69254a67b06a3fc7fa0c43512958>`__"

# 0bce1b23fc4e4b55b7e01681d1807f64
#: ../../../../1.9/docs/releases/security.txt:417
msgid "April 21, 2014 - CVE-2014-0473"
msgstr "21 avril 2014 - CVE-2014-0473"

# 32d975901693453b97f0c4719556ddc6
#: ../../../../1.9/docs/releases/security.txt:419
msgid ""
"`CVE-2014-0473 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0473&cid=2>`_: "
"Caching of anonymous pages could reveal CSRF token. `Full description "
"<https://www.djangoproject.com/weblog/2014/apr/21/security/>`__"
msgstr ""

# 88732db473f747a5833d3f77181fc9ed
#: ../../../../1.9/docs/releases/security.txt:424
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/1170f285ddd6a94a65f911a27788ba49ca08c0b0>`__"
msgstr "Django 1.4 `(correctif) <https://github.com/django/django/commit/1170f285ddd6a94a65f911a27788ba49ca08c0b0>`__"

# 368a5fb3e462424b8174101b4f8b47e5
#: ../../../../1.9/docs/releases/security.txt:425
msgid ""
"Django 1.5 `(patch) "
"<https://github.com/django/django/commit/6872f42757d7ef6a97e0b6ec5db4d2615d8a2bd8>`__"
msgstr "Django 1.5 `(correctif) <https://github.com/django/django/commit/6872f42757d7ef6a97e0b6ec5db4d2615d8a2bd8>`__"

# 29d7630abf8243478fa701fb6cff71ba
#: ../../../../1.9/docs/releases/security.txt:426
msgid ""
"Django 1.6 `(patch) "
"<https://github.com/django/django/commit/d63e20942f3024f24cb8cd85a49461ba8a9b6736>`__"
msgstr "Django 1.6 `(correctif) <https://github.com/django/django/commit/d63e20942f3024f24cb8cd85a49461ba8a9b6736>`__"

# 30f4834bc12f4bdf821d87f497da31cf
#: ../../../../1.9/docs/releases/security.txt:427
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/380545bf85cbf17fc698d136815b7691f8d023ca>`__"
msgstr "Django 1.7 `(correctif) <https://github.com/django/django/commit/380545bf85cbf17fc698d136815b7691f8d023ca>`__"

# 41b570ff9954447888dd8b27738130ec
#: ../../../../1.9/docs/releases/security.txt:430
msgid "April 21, 2014 - CVE-2014-0474"
msgstr "21 avril 2014 - CVE-2014-0474"

# 9a2d6d686ea1474581f88cb6c6271541
#: ../../../../1.9/docs/releases/security.txt:432
msgid ""
"`CVE-2014-0474 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0474&cid=2>`_: "
"MySQL typecasting causes unexpected query results. `Full description "
"<https://www.djangoproject.com/weblog/2014/apr/21/security/>`__"
msgstr ""

# da07062ed9e64e6a91402a14a77bd75e
#: ../../../../1.9/docs/releases/security.txt:437
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/aa80f498de6d687e613860933ac58433ab71ea4b>`__"
msgstr "Django 1.4 `(correctif) <https://github.com/django/django/commit/aa80f498de6d687e613860933ac58433ab71ea4b>`__"

# 1194c84af2ad4cf0babe88a5e4d1826a
#: ../../../../1.9/docs/releases/security.txt:438
msgid ""
"Django 1.5 `(patch) "
"<https://github.com/django/django/commit/985434fb1d6bf2335bf96c6ebf91c3674f1f399f>`__"
msgstr "Django 1.5 `(correctif) <https://github.com/django/django/commit/985434fb1d6bf2335bf96c6ebf91c3674f1f399f>`__"

# b89582f1b2be487cb23d2c0c92d9d307
#: ../../../../1.9/docs/releases/security.txt:439
msgid ""
"Django 1.6 `(patch) "
"<https://github.com/django/django/commit/5f0829a27e85d89ad8c433f5c6a7a7d17c9e9292>`__"
msgstr "Django 1.6 `(correctif) <https://github.com/django/django/commit/5f0829a27e85d89ad8c433f5c6a7a7d17c9e9292>`__"

# 472a8e2fe6ed4e1f80220ca1210b2224
#: ../../../../1.9/docs/releases/security.txt:440
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/34526c2f56b863c2103655a0893ac801667e86ea>`__"
msgstr "Django 1.7 `(correctif) <https://github.com/django/django/commit/34526c2f56b863c2103655a0893ac801667e86ea>`__"

# 5d10d6f1985e43778d9c4c715908a0e4
#: ../../../../1.9/docs/releases/security.txt:443
msgid "May 18, 2014 - CVE-2014-1418"
msgstr "18 mai 2014 - CVE-2014-1418"

# 77b10f03dcc94a05aa0fb9cd2b858d05
#: ../../../../1.9/docs/releases/security.txt:445
msgid ""
"`CVE-2014-1418 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-1418&cid=2>`_: "
"Caches may be allowed to store and serve private data. `Full description "
"<https://www.djangoproject.com/weblog/2014/may/14/security-releases-"
"issued/>`__"
msgstr ""

# 431fd473798a48ad9daae625801f2bce
#: ../../../../1.9/docs/releases/security.txt:450
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/28e23306aa53bbbb8fb87db85f99d970b051026c>`__"
msgstr "Django 1.4 `(correctif) <https://github.com/django/django/commit/28e23306aa53bbbb8fb87db85f99d970b051026c>`__"

# b571b946f0804e5fa2753a593055046a
#: ../../../../1.9/docs/releases/security.txt:451
msgid ""
"Django 1.5 `(patch) "
"<https://github.com/django/django/commit/4001ec8698f577b973c5a540801d8a0bbea1205b>`__"
msgstr "Django 1.5 `(correctif) <https://github.com/django/django/commit/4001ec8698f577b973c5a540801d8a0bbea1205b>`__"

# 9ecec39a44e84f01bd8942031d56d932
#: ../../../../1.9/docs/releases/security.txt:452
msgid ""
"Django 1.6 `(patch) "
"<https://github.com/django/django/commit/1abcf3a808b35abae5d425ed4d44cb6e886dc769>`__"
msgstr "Django 1.6 `(correctif) <https://github.com/django/django/commit/1abcf3a808b35abae5d425ed4d44cb6e886dc769>`__"

# 92eb96ea44674633bd34d6de7d0183c5
#: ../../../../1.9/docs/releases/security.txt:453
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/7fef18ba9e5a8b47bc24b5bb259c8bf3d3879f2a>`__"
msgstr "Django 1.7 `(correctif) <https://github.com/django/django/commit/7fef18ba9e5a8b47bc24b5bb259c8bf3d3879f2a>`__"

# 980d0ffca2cd4b6aa27f3a6baae577ef
#: ../../../../1.9/docs/releases/security.txt:456
msgid "May 18, 2014 - CVE-2014-3730"
msgstr "18 mai 2014 - CVE-2014-3730"

# abdbfabd405b439ab9fbf0f99793a208
#: ../../../../1.9/docs/releases/security.txt:458
msgid ""
"`CVE-2014-3730 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-3730&cid=2>`_: "
"Malformed URLs from user input incorrectly validated. `Full description "
"<https://www.djangoproject.com/weblog/2014/may/14/security-releases-"
"issued/>`__"
msgstr ""

# 342f9c125cc74608b924dfd79bc431ea
#: ../../../../1.9/docs/releases/security.txt:463
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/7feb54bbae3f637ab3c4dd4831d4385964f574df>`__"
msgstr "Django 1.4 `(correctif) <https://github.com/django/django/commit/7feb54bbae3f637ab3c4dd4831d4385964f574df>`__"

# 35c1506cf0f54fdeb2f4bbf0d3be92e1
#: ../../../../1.9/docs/releases/security.txt:464
msgid ""
"Django 1.5 `(patch) "
"<https://github.com/django/django/commit/ad32c218850ad40972dcef57beb460f8c979dd6d>`__"
msgstr "Django 1.5 `(correctif) <https://github.com/django/django/commit/ad32c218850ad40972dcef57beb460f8c979dd6d>`__"

# 6cfa2e3a361c4d628dec74568d5de121
#: ../../../../1.9/docs/releases/security.txt:465
msgid ""
"Django 1.6 `(patch) "
"<https://github.com/django/django/commit/601107524523bca02376a0ddc1a06c6fdb8f22f3>`__"
msgstr "Django 1.6 `(correctif) <https://github.com/django/django/commit/601107524523bca02376a0ddc1a06c6fdb8f22f3>`__"

# 30e371136e3b4fd5b166fea752192152
#: ../../../../1.9/docs/releases/security.txt:466
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/e7b0cace455c2da24492660636bfd48c45a19cdf>`__"
msgstr "Django 1.7 `(correctif) <https://github.com/django/django/commit/e7b0cace455c2da24492660636bfd48c45a19cdf>`__"

# e164e8661c1842bfb49265b3d2821526
#: ../../../../1.9/docs/releases/security.txt:469
msgid "August 20, 2014 - CVE-2014-0480"
msgstr "20 aout 2014 - CVE-2014-0480"

# 72853121e07743ae8c1505f3f38c3dd7
#: ../../../../1.9/docs/releases/security.txt:471
msgid ""
"`CVE-2014-0480 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0480&cid=2>`_: "
"reverse() can generate URLs pointing to other hosts. `Full description "
"<https://www.djangoproject.com/weblog/2014/aug/20/security/>`__"
msgstr ""

# 4cdf1188d414423f991aced97541220b
#: ../../../../1.9/docs/releases/security.txt:476
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/c2fe73133b62a1d9e8f7a6b43966570b14618d7e>`__"
msgstr "Django 1.4 `(correctif) <https://github.com/django/django/commit/c2fe73133b62a1d9e8f7a6b43966570b14618d7e>`__"

# 94f4819215274a39bad93365a14060d3
#: ../../../../1.9/docs/releases/security.txt:477
msgid ""
"Django 1.5 `(patch) "
"<https://github.com/django/django/commit/45ac9d4fb087d21902469fc22643f5201d41a0cd>`__"
msgstr "Django 1.5 `(correctif) <https://github.com/django/django/commit/45ac9d4fb087d21902469fc22643f5201d41a0cd>`__"

# 72cc1371d4e1429ab9bed12dc01b7b4d
#: ../../../../1.9/docs/releases/security.txt:478
msgid ""
"Django 1.6 `(patch) "
"<https://github.com/django/django/commit/da051da8df5e69944745072611351d4cfc6435d5>`__"
msgstr "Django 1.6 `(correctif) <https://github.com/django/django/commit/da051da8df5e69944745072611351d4cfc6435d5>`__"

# 4d9093bc0af9403e86f56778fcf7c45c
#: ../../../../1.9/docs/releases/security.txt:479
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/bf650a2ee78c6d1f4544a875dcc777cf27fe93e9>`__"
msgstr "Django 1.7 `(correctif) <https://github.com/django/django/commit/bf650a2ee78c6d1f4544a875dcc777cf27fe93e9>`__"

# 13cbe92db3044bff9123f9f0f436cc08
#: ../../../../1.9/docs/releases/security.txt:482
msgid "August 20, 2014 - CVE-2014-0481"
msgstr "20 aout 2014 - CVE-2014-0481"

# 2b14a9232a9848228435f131f342b72d
#: ../../../../1.9/docs/releases/security.txt:484
msgid ""
"`CVE-2014-0481 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0481&cid=2>`_: "
"File upload denial of service. `Full description "
"<https://www.djangoproject.com/weblog/2014/aug/20/security/>`__"
msgstr ""

# 13e1655da07b48aea60ad9a76c2e5c4e
#: ../../../../1.9/docs/releases/security.txt:489
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/30042d475bf084c6723c6217a21598d9247a9c41>`__"
msgstr "Django 1.4 `(correctif) <https://github.com/django/django/commit/30042d475bf084c6723c6217a21598d9247a9c41>`__"

# ee32044cf8ed44c48f06701ac0153250
#: ../../../../1.9/docs/releases/security.txt:490
msgid ""
"Django 1.5 `(patch) "
"<https://github.com/django/django/commit/26cd48e166ac4d84317c8ee6d63ac52a87e8da99>`__"
msgstr "Django 1.5 `(correctif) <https://github.com/django/django/commit/26cd48e166ac4d84317c8ee6d63ac52a87e8da99>`__"

# ab67480a646b4876acb4aca49eb15038
#: ../../../../1.9/docs/releases/security.txt:491
msgid ""
"Django 1.6 `(patch) "
"<https://github.com/django/django/commit/dd0c3f4ee1a30c1a1e6055061c6ba6e58c6b54d1>`__"
msgstr "Django 1.6 `(correctif) <https://github.com/django/django/commit/dd0c3f4ee1a30c1a1e6055061c6ba6e58c6b54d1>`__"

# 1af7090a7e2a4b938262d3347700395f
#: ../../../../1.9/docs/releases/security.txt:492
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/3123f8452cf49071be9110e277eea60ba0032216>`__"
msgstr "Django 1.7 `(correctif) <https://github.com/django/django/commit/3123f8452cf49071be9110e277eea60ba0032216>`__"

# 167f9d7b8cc84420b31f92140c0bf8d9
#: ../../../../1.9/docs/releases/security.txt:495
msgid "August 20, 2014 - CVE-2014-0482"
msgstr "20 aout 2014 - CVE-2014-0482"

# 8907142f970a44b7b73f9129cefde518
#: ../../../../1.9/docs/releases/security.txt:497
msgid ""
"`CVE-2014-0482 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0482&cid=2>`_: "
"RemoteUserMiddleware session hijacking. `Full description "
"<https://www.djangoproject.com/weblog/2014/aug/20/security/>`__"
msgstr ""

# 7330ff1e5f544050bd562ce1e4c141cf
#: ../../../../1.9/docs/releases/security.txt:502
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/c9e3b9949cd55f090591fbdc4a114fcb8368b6d9>`__"
msgstr "Django 1.4 `(correctif) <https://github.com/django/django/commit/c9e3b9949cd55f090591fbdc4a114fcb8368b6d9>`__"

# 465c3f6cd19149a597d4b1f0034a9b3f
#: ../../../../1.9/docs/releases/security.txt:503
msgid ""
"Django 1.5 `(patch) "
"<https://github.com/django/django/commit/dd68f319b365f6cb38c5a6c106faf4f6142d7d88>`__"
msgstr "Django 1.5 `(correctif) <https://github.com/django/django/commit/dd68f319b365f6cb38c5a6c106faf4f6142d7d88>`__"

# 968d957217044f5f9fec4053404aa36d
#: ../../../../1.9/docs/releases/security.txt:504
msgid ""
"Django 1.6 `(patch) "
"<https://github.com/django/django/commit/0268b855f9eab3377f2821164ef3e66037789e09>`__"
msgstr "Django 1.6 `(correctif) <https://github.com/django/django/commit/0268b855f9eab3377f2821164ef3e66037789e09>`__"

# 3660cac127d44aec8cecb07e8888eb76
#: ../../../../1.9/docs/releases/security.txt:505
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/1a45d059c70385fcd6f4a3955f3b4e4cc96d0150>`__"
msgstr "Django 1.7 `(correctif) <https://github.com/django/django/commit/1a45d059c70385fcd6f4a3955f3b4e4cc96d0150>`__"

# efe9493ff3124f719c97ebb1de35c942
#: ../../../../1.9/docs/releases/security.txt:508
msgid "August 20, 2014 - CVE-2014-0483"
msgstr "20 aout 2014 - CVE-2014-0483"

# a63e408d3db8449d93488ea6f4b84fd2
#: ../../../../1.9/docs/releases/security.txt:510
msgid ""
"`CVE-2014-0483 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0483&cid=2>`_: "
"Data leakage via querystring manipulation in admin. `Full description "
"<https://www.djangoproject.com/weblog/2014/aug/20/security/>`__"
msgstr ""

# 8aa824cb5dc648b0a4a1a6d95ea1b1dc
#: ../../../../1.9/docs/releases/security.txt:515
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/027bd348642007617518379f8b02546abacaa6e0>`__"
msgstr "Django 1.4 `(correctif) <https://github.com/django/django/commit/027bd348642007617518379f8b02546abacaa6e0>`__"

# 608f1d1b79f1410fb7d72128d897d525
#: ../../../../1.9/docs/releases/security.txt:516
msgid ""
"Django 1.5 `(patch) "
"<https://github.com/django/django/commit/2a446c896e7c814661fb9c4f212b071b2a7fa446>`__"
msgstr "Django 1.5 `(correctif) <https://github.com/django/django/commit/2a446c896e7c814661fb9c4f212b071b2a7fa446>`__"

# 2a027f98fb1c43288de5d1ad7490e47a
#: ../../../../1.9/docs/releases/security.txt:517
msgid ""
"Django 1.6 `(patch) "
"<https://github.com/django/django/commit/f7c494f2506250b8cb5923714360a3642ed63e0f>`__"
msgstr "Django 1.6 `(correctif) <https://github.com/django/django/commit/f7c494f2506250b8cb5923714360a3642ed63e0f>`__"

# 81941d54109e4e21b8b67871c4858333
#: ../../../../1.9/docs/releases/security.txt:518
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/2b31342cdf14fc20e07c43d258f1e7334ad664a6>`__"
msgstr "Django 1.7 `(correctif) <https://github.com/django/django/commit/2b31342cdf14fc20e07c43d258f1e7334ad664a6>`__"

# cfd3e8eeb63440578325671773b2817f
#: ../../../../1.9/docs/releases/security.txt:521
msgid "January 13, 2015 - CVE-2015-0219"
msgstr ""

# a34137d8825b422fa66d25387a6b6ac3
#: ../../../../1.9/docs/releases/security.txt:523
msgid ""
"`CVE-2015-0219 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-0219&cid=2>`_: "
"WSGI header spoofing via underscore/dash conflation. `Full description "
"<https://www.djangoproject.com/weblog/2015/jan/13/security/>`__"
msgstr ""

# b0443e7251a745f8a25566de35437fbf
#: ../../../../1.9/docs/releases/security.txt:530
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/4f6fffc1dc429f1ad428ecf8e6620739e8837450>`__"
msgstr ""

# 437d8bc91e6b41ea87dcf3aa05895ede
#: ../../../../1.9/docs/releases/security.txt:531
msgid ""
"Django 1.6 `(patch) "
"<https://github.com/django/django/commit/d7597b31d5c03106eeba4be14a33b32a5e25f4ee>`__"
msgstr ""

# c3b2bd685a2e468f9840e46636630095
#: ../../../../1.9/docs/releases/security.txt:532
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/41b4bc73ee0da7b2e09f4af47fc1fd21144c710f>`__"
msgstr ""

# 727fdf397959464090300d8b4fc59b66
#: ../../../../1.9/docs/releases/security.txt:535
msgid "January 13, 2015 - CVE-2015-0220"
msgstr ""

# 76a786be8bb5490b8ff948b4bcc1b461
#: ../../../../1.9/docs/releases/security.txt:537
msgid ""
"`CVE-2015-0220 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-0220&cid=2>`_: "
"Mitigated possible XSS attack via user-supplied redirect URLs. `Full "
"description <https://www.djangoproject.com/weblog/2015/jan/13/security/>`__"
msgstr ""

# 71f59b3baca44797a21c634b052d9df2
#: ../../../../1.9/docs/releases/security.txt:542
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/4c241f1b710da6419d9dca160e80b23b82db7758>`__"
msgstr ""

# dd8ef44504914a4ca571223a60af46e3
#: ../../../../1.9/docs/releases/security.txt:543
msgid ""
"Django 1.6 `(patch) "
"<https://github.com/django/django/commit/72e0b033662faa11bb7f516f18a132728aa0ae28>`__"
msgstr ""

# aa8a4d7ee0c34be4a12c916b64b56dae
#: ../../../../1.9/docs/releases/security.txt:544
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/de67dedc771ad2edec15c1d00c083a1a084e1e89>`__"
msgstr ""

# 5cf4f98eef2d4604bf0d6f08222858f0
#: ../../../../1.9/docs/releases/security.txt:547
msgid "January 13, 2015 - CVE-2015-0221"
msgstr ""

# 3741eea80b79443aaadda0ea1592f891
#: ../../../../1.9/docs/releases/security.txt:549
msgid ""
"`CVE-2015-0221 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-0221&cid=2>`_: "
"Denial-of-service attack against ``django.views.static.serve()``. `Full "
"description <https://www.djangoproject.com/weblog/2015/jan/13/security/>`__"
msgstr ""

# e5b8490546e84b24bb46a68f5b9b99e2
#: ../../../../1.9/docs/releases/security.txt:556
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/d020da6646c5142bc092247d218a3d1ce3e993f7>`__"
msgstr ""

# 2c4e4fafacd04851bd697714c4dfd199
#: ../../../../1.9/docs/releases/security.txt:557
msgid ""
"Django 1.6 `(patch) "
"<https://github.com/django/django/commit/553779c4055e8742cc832ed525b9ee34b174934f>`__"
msgstr ""

# 6554c3419d76439a9d7ae66b22b83138
#: ../../../../1.9/docs/releases/security.txt:558
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/818e59a3f0fbadf6c447754d202d88df025f8f2a>`__"
msgstr ""

# 81f8ca0150094b25a402ed6eedac9402
#: ../../../../1.9/docs/releases/security.txt:561
msgid "January 13, 2015 - CVE-2015-0222"
msgstr ""

# 8a1b5d9ab3224e88a251cf927e664d21
#: ../../../../1.9/docs/releases/security.txt:563
msgid ""
"`CVE-2015-0222 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-0222&cid=2>`_: "
"Database denial-of-service with ``ModelMultipleChoiceField``. `Full "
"description <https://www.djangoproject.com/weblog/2015/jan/13/security/>`__"
msgstr ""

# 9c73bccda16e4c2d848c8aac2158074f
#: ../../../../1.9/docs/releases/security.txt:570
msgid ""
"Django 1.6 `(patch) "
"<https://github.com/django/django/commit/d7a06ee7e571b6dad07c0f5b519b1db02e2a476c>`__"
msgstr ""

# f4c0035085124dc7bff6bc5cf4daf556
#: ../../../../1.9/docs/releases/security.txt:571
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/bcfb47780ce7caecb409a9e9c1c314266e41d392>`__"
msgstr ""

# 2021fe2e023c4ceb87312813aaf0337e
#: ../../../../1.9/docs/releases/security.txt:574
msgid "March 9, 2015 - CVE-2015-2241"
msgstr ""

# 94a3130e37bc492b81cf3a72af80e955
#: ../../../../1.9/docs/releases/security.txt:576
msgid ""
"`CVE-2015-2241 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-2241&cid=2>`_: "
"XSS attack via properties in ``ModelAdmin.readonly_fields``. `Full "
"description <https://www.djangoproject.com/weblog/2015/mar/09/security-"
"releases/>`__"
msgstr ""

# 0cb1da60e5724670b932e2c2d9d3e9f1
#: ../../../../1.9/docs/releases/security.txt:583
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/d16e4e1d6f95e6f46bff53cc4fd0ab398b8e5059>`__"
msgstr ""

# a5f1e9931ed94f9091c4d6f0268e8684
#: ../../../../1.9/docs/releases/security.txt:584
msgid ""
"Django 1.8 `(patch) "
"<https://github.com/django/django/commit/2654e1b93923bac55f12b4e66c5e39b16695ace5>`_"
msgstr ""

# e9e8e54c2e9a4e839da07db5f3be3310
#: ../../../../1.9/docs/releases/security.txt:587
msgid "March 18, 2015 - CVE-2015-2316"
msgstr ""

# 2d52102faa8a4118b55d0d083d09e50b
#: ../../../../1.9/docs/releases/security.txt:589
msgid ""
"`CVE-2015-2316 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-2316&cid=2>`_: "
"Denial-of-service possibility with ``strip_tags()``. `Full description "
"<https://www.djangoproject.com/weblog/2015/mar/18/security-releases/>`__"
msgstr ""

# 84f2ff32febd41f98313ad7b6d982f5a
#: ../../../../1.9/docs/releases/security.txt:596
msgid ""
"Django 1.6 `(patch) "
"<https://github.com/django/django/commit/b6b3cb9899214a23ebb0f4ebf0e0b300b0ee524f>`__"
msgstr ""

# 50cbdf8e1b1f4ab2a8c4c16cf8a88627
#: ../../../../1.9/docs/releases/security.txt:597
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/e63363f8e075fa8d66326ad6a1cc3391cc95cd97>`__"
msgstr ""

# 269beb78a7fa4b8ebaaa50ef778e9162
#: ../../../../1.9/docs/releases/security.txt:598
msgid ""
"Django 1.8 `(patch) "
"<https://github.com/django/django/commit/5447709a571cd5d95971f1d5d21d4a7edcf85bbd>`__"
msgstr ""

# a551e3f44bbb440b8a45fe2721cd98fe
#: ../../../../1.9/docs/releases/security.txt:601
msgid "March 18, 2015 - CVE-2015-2317"
msgstr ""

# ae16337deb3b4b2c9856a9c8aa6368f0
#: ../../../../1.9/docs/releases/security.txt:603
msgid ""
"`CVE-2015-2317 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-2317&cid=2>`_: "
"Mitigated possible XSS attack via user-supplied redirect URLs. `Full "
"description <https://www.djangoproject.com/weblog/2015/mar/18/security-"
"releases/>`__"
msgstr ""

# 139bcbbd3c7e4572ba566e9030448c60
#: ../../../../1.9/docs/releases/security.txt:610
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/2342693b31f740a422abf7267c53b4e7bc487c1b>`__"
msgstr ""

# d9c27bc01a3146b986c1beac1c982fe4
#: ../../../../1.9/docs/releases/security.txt:611
msgid ""
"Django 1.6 `(patch) "
"<https://github.com/django/django/commit/5510f070711540aaa8d3707776cd77494e688ef9>`__"
msgstr ""

# 4b10c9a67ecd4588a8af5774a5f4c768
#: ../../../../1.9/docs/releases/security.txt:612
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/2a4113dbd532ce952308992633d802dc169a75f1>`__"
msgstr ""

# 000b67eede954649a47311653af8f68f
#: ../../../../1.9/docs/releases/security.txt:613
msgid ""
"Django 1.8 `(patch) "
"<https://github.com/django/django/commit/770427c2896a078925abfca2317486b284d22f04>`__"
msgstr ""

# bf69d296436b45e6b141abdbea69baca
#: ../../../../1.9/docs/releases/security.txt:616
msgid "May 20, 2015 - CVE-2015-3982"
msgstr ""

# 61fdd207a6734093872d147bae67f2b5
#: ../../../../1.9/docs/releases/security.txt:618
msgid ""
"`CVE-2015-3982 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-3982&cid=2>`_: "
"Fixed session flushing in the cached_db backend. `Full description "
"<https://www.djangoproject.com/weblog/2015/may/20/security-release/>`__"
msgstr ""

# 790deeaa48974e5dbd216a0d13a5bd23
#: ../../../../1.9/docs/releases/security.txt:625
msgid ""
"Django 1.8 `(patch) "
"<https://github.com/django/django/commit/31cb25adecba930bdeee4556709f5a1c42d88fd6>`__"
msgstr ""

# d7d18e31590f4b5f95e0efd24bdae4eb
#: ../../../../1.9/docs/releases/security.txt:628
msgid "July 8, 2015 - CVE-2015-5143"
msgstr ""

# 3065a164c0a44df0a4a22f051c314dc4
#: ../../../../1.9/docs/releases/security.txt:630
msgid ""
"`CVE-2015-5143 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-5143&cid=2>`_: "
"Denial-of-service possibility by filling session store. `Full description "
"<https://www.djangoproject.com/weblog/2015/jul/08/security-releases/>`__"
msgstr ""

# 7459f21bba494f67a8c5f89092efd412
#: ../../../../1.9/docs/releases/security.txt:637
msgid ""
"Django 1.8 `(patch) "
"<https://github.com/django/django/commit/66d12d1ababa8f062857ee5eb43276493720bf16>`__"
msgstr ""

# 7240ea61e73a455b91790f63b925e37a
#: ../../../../1.9/docs/releases/security.txt:638
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/1828f4341ec53a8684112d24031b767eba557663>`__"
msgstr ""

# b47a52ac59b84f278ab92b575d170025
#: ../../../../1.9/docs/releases/security.txt:639
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/2e47f3e401c29bc2ba5ab794d483cb0820855fb9>`__"
msgstr ""

# 74e30ca3cd464a5694c47413ec4591b6
#: ../../../../1.9/docs/releases/security.txt:642
msgid "July 8, 2015 - CVE-2015-5144"
msgstr ""

# a3d5cdcd4d68487a855946ec6327f44a
#: ../../../../1.9/docs/releases/security.txt:644
msgid ""
"`CVE-2015-5144 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-5144&cid=2>`_: "
"Header injection possibility since validators accept newlines in input. "
"`Full description <https://www.djangoproject.com/weblog/2015/jul/08"
"/security-releases/>`__"
msgstr ""

# 1cc36e4010984f998f6c99718bd9cb76
#: ../../../../1.9/docs/releases/security.txt:651
msgid ""
"Django 1.8 `(patch) "
"<https://github.com/django/django/commit/574dd5e0b0fbb877ae5827b1603d298edc9bb2a0>`__"
msgstr ""

# 5cbe2a8bd0bc483da712464fc70bbe0a
#: ../../../../1.9/docs/releases/security.txt:652
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/ae49b4d994656bc037513dcd064cb9ce5bb85649>`__"
msgstr ""

# 727ca0e25b3a48cfa523161b698d6e01
#: ../../../../1.9/docs/releases/security.txt:653
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/1ba1cdce7d58e6740fe51955d945b56ae51d072a>`__"
msgstr ""

# b9ac172ad50c44b3b2cf4af4935a3ea2
#: ../../../../1.9/docs/releases/security.txt:656
msgid "July 8, 2015 - CVE-2015-5145"
msgstr ""

# 9d0ca40dec8846dab3f6803def299784
#: ../../../../1.9/docs/releases/security.txt:658
msgid ""
"`CVE-2015-5145 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-5145&cid=2>`_: "
"Denial-of-service possibility in URL validation. `Full description "
"<https://www.djangoproject.com/weblog/2015/jul/08/security-releases/>`__"
msgstr ""

# c6dbaeb6ba1b495ab6311f1d7e1f815d
#: ../../../../1.9/docs/releases/security.txt:665
msgid ""
"Django 1.8 `(patch) "
"<https://github.com/django/django/commit/8f9a4d3a2bc42f14bb437defd30c7315adbff22c>`__"
msgstr ""

# fb99f1596650423897ddd28bd3f85cb9
#: ../../../../1.9/docs/releases/security.txt:668
msgid "August 18, 2015 - CVE-2015-5963/CVE-2015-5964"
msgstr ""

# cdc42c530aeb4ac2afda9463bd6fe8d9
#: ../../../../1.9/docs/releases/security.txt:670
msgid ""
"`CVE-2015-5963 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-5963&cid=2>`_ and"
" `CVE-2015-5964 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-5964&cid=2>`_: "
"Denial-of-service possibility in ``logout()`` view by filling session store."
" `Full description <https://www.djangoproject.com/weblog/2015/aug/18"
"/security-releases/>`__"
msgstr ""

# 4f80ef1ad87b41f7811472bfd3ae1f46
#: ../../../../1.9/docs/releases/security.txt:679
msgid ""
"Django 1.8 `(patch) "
"<https://github.com/django/django/commit/2eb86b01d7b59be06076f6179a454d0fd0afaff6>`__"
msgstr ""

# 38f6c8f6e1304f309aaa857ecfa40dce
#: ../../../../1.9/docs/releases/security.txt:680
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/2f5485346ee6f84b4e52068c04e043092daf55f7>`__"
msgstr ""

# 780bb16bbc354da69050b9dc78c06d35
#: ../../../../1.9/docs/releases/security.txt:681
msgid ""
"Django 1.4 `(patch) "
"<https://github.com/django/django/commit/575f59f9bc7c59a5e41a081d1f5f55fc859c5012>`__"
msgstr ""

# a0f1737080a84b819e0ce04a61f4f5db
#: ../../../../1.9/docs/releases/security.txt:684
msgid "November 24, 2015 - CVE-2015-8213"
msgstr ""

# d8de1861418f44f4b186a16519b91e63
#: ../../../../1.9/docs/releases/security.txt:686
msgid ""
"`CVE-2015-8213 "
"<https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-8213&cid=2>`_: "
"Settings leak possibility in ``date`` template filter. `Full description "
"<https://www.djangoproject.com/weblog/2015/nov/24/security-releases-"
"issued/>`__"
msgstr ""

# 99c474e78907420f83b605faaa5cb350
#: ../../../../1.9/docs/releases/security.txt:693
msgid ""
"Django 1.8 `(patch) "
"<https://github.com/django/django/commit/9f83fc2f66f5a0bac7c291aec55df66050bb6991>`__"
msgstr ""

# 8f39ebde7c31466f9805996bf13ec410
#: ../../../../1.9/docs/releases/security.txt:694
msgid ""
"Django 1.7 `(patch) "
"<https://github.com/django/django/commit/8a01c6b53169ee079cb21ac5919fdafcc8c5e172>`__"
msgstr ""
