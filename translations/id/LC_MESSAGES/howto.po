# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# 
# Translators:
# Bagus Aji Santoso <baguzzzaji@gmail.com>, 2015
# Fery Setiawan <gembelweb@gmail.com>, 2015-2016
# oon arfiandwi <oon.arfiandwi@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: django-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-03-05 19:12-0600\n"
"PO-Revision-Date: 2016-06-17 01:33+0000\n"
"Last-Translator: Fery Setiawan <gembelweb@gmail.com>\n"
"Language-Team: Indonesian (http://www.transifex.com/django/django-docs/language/id/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: id\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../../../sources/1.9/docs/howto/auth-remote-user.txt:3
msgid "Authentication using ``REMOTE_USER``"
msgstr "Otentikasi menggunakan ``REMOTE_USER``"

#: ../../../../sources/1.9/docs/howto/auth-remote-user.txt:5
msgid ""
"This document describes how to make use of external authentication sources "
"(where the Web server sets the ``REMOTE_USER`` environment variable) in your"
" Django applications.  This type of authentication solution is typically "
"seen on intranet sites, with single sign-on solutions such as IIS and "
"Integrated Windows Authentication or Apache and `mod_authnz_ldap`_, `CAS`_, "
"`Cosign`_, `WebAuth`_, `mod_auth_sspi`_, etc."
msgstr "Dokumen ini menjelaskan bagaimana memanfaatkan sumber otentikasi eksternal (di mana server Web menetapkan variabel environment ``REMOTE_USER``) dalam aplikasi Django Anda. Jenis solusi otentikasi biasanya terlihat di situs intranet, dengan solusi single sign-on seperti IIS dan Integrated Windows Authentication atau Apache dan `mod_authnz_ldap`_, `CAS`_, `Cosign`_,` WebAuth`_, `mod_auth_sspi `_, dll"

#: ../../../../sources/1.9/docs/howto/auth-remote-user.txt:18
msgid ""
"When the Web server takes care of authentication it typically sets the "
"``REMOTE_USER`` environment variable for use in the underlying application."
"  In Django, ``REMOTE_USER`` is made available in the :attr:`request.META "
"<django.http.HttpRequest.META>` attribute.  Django can be configured to make"
" use of the ``REMOTE_USER`` value using the ``RemoteUserMiddleware`` or "
"``PersistentRemoteUserMiddleware``, and "
":class:`~django.contrib.auth.backends.RemoteUserBackend` classes found in "
":mod:`django.contrib.auth`."
msgstr "Ketika peladen Jaringan mengurus pembuktian keaslian dia khususnya menyetel variabel lingkungan ``REMOTE_USER`` untuk digunakan dalam aplikasi pokok. Dalam Django, ``REMOTE_USER`` adalah dibuat tersedia dalam atribut :attr:`request.META <django.http.HttpRequest.META>`. Django dapat dikonfigurasikan untuk  memanfaatkan nilai  ``REMOTE_USER`` menggunakan ``RemoteUserMiddleware`` atau``PersistentRemoteUserMiddleware``, dan kelas :class:`~django.contrib.auth.backends.RemoteUserBackend` ditemukan dalam :mod:`django.contrib.auth`."

#: ../../../../sources/1.9/docs/howto/auth-remote-user.txt:28
msgid "Configuration"
msgstr "Pengaturan"

#: ../../../../sources/1.9/docs/howto/auth-remote-user.txt:30
msgid ""
"First, you must add the "
":class:`django.contrib.auth.middleware.RemoteUserMiddleware` to the "
":setting:`MIDDLEWARE_CLASSES` setting **after** the "
":class:`django.contrib.auth.middleware.AuthenticationMiddleware`::"
msgstr "Pertama, Anda harus menambahkan kelas :class:`django.contrib.auth.middleware.RemoteUserMiddleware` ke pengaturan :setting:`MIDDLEWARE_CLASSES` **setelah** :class:`django.contrib.auth.middleware.AuthenticationMiddleware`::"

#: ../../../../sources/1.9/docs/howto/auth-remote-user.txt:42
msgid ""
"Next, you must replace the "
":class:`~django.contrib.auth.backends.ModelBackend` with "
":class:`~django.contrib.auth.backends.RemoteUserBackend` in the "
":setting:`AUTHENTICATION_BACKENDS` setting::"
msgstr "Selanjutnya, anda harus mengganti :class:`~django.contrib.auth.backends.ModelBackend` dengan :class:`~django.contrib.auth.backends.RemoteUserBackend` di pengaturan :setting:`AUTHENTICATION_BACKENDS` ::"

#: ../../../../sources/1.9/docs/howto/auth-remote-user.txt:50
msgid ""
"With this setup, ``RemoteUserMiddleware`` will detect the username in "
"``request.META['REMOTE_USER']`` and will authenticate and auto-login that "
"user using the :class:`~django.contrib.auth.backends.RemoteUserBackend`."
msgstr "Dengan pengaturan ini, ``RemoteUserMiddleware`` akan mengenali nama pengguna di ``request.META['REMOTE_USER']`` dan akan mengecek keasliannya dan masuk-otomatis bagi pengguna menggunakan :class:`~django.contrib.auth.backends.RemoteUserBackend`."

#: ../../../../sources/1.9/docs/howto/auth-remote-user.txt:54
msgid ""
"Be aware that this particular setup disables authentication with the default"
" ``ModelBackend``. This means that if the ``REMOTE_USER`` value is not set "
"then the user is unable to log in, even using Django's admin interface. "
"Adding ``'django.contrib.auth.backends.ModelBackend'`` to the "
"``AUTHENTICATION_BACKENDS`` list will use ``ModelBackend`` as a fallback if "
"``REMOTE_USER`` is absent, which will solve these issues."
msgstr "Waspada bahwa setelan khusus ini meniadakan pembuktian keaslian dengan awal ``ModelBackend``. Ini berarti bahwa jika nilai ``REMOTE_USER`` tidak disetel kemudian pengguna tidak dapat masuk, bahkan menggunakan antarmuka admin Django. Menambahkan ``'django.contrib.auth.backends.ModelBackend'`` pada daftar ``AUTHENTICATION_BACKENDS`` akan menggunakan ``ModelBackend`` sebagai alternatif jika ``REMOTE_USER`` tidak hadir, yang akan menyelesaikan masalah ini."

#: ../../../../sources/1.9/docs/howto/auth-remote-user.txt:61
msgid ""
"Django's user management, such as the views in ``contrib.admin`` and the "
":djadmin:`createsuperuser` management command, doesn't integrate with remote"
" users. These interfaces work with users stored in the database regardless "
"of ``AUTHENTICATION_BACKENDS``."
msgstr "Pengelola pengguna Django, seperti tampilan dalam perintah pengelola ``contrib.admin`` dan the :djadmin:`createsuperuser`, tidak dipadukan dengan pengguna kendali jauh. Antarmuka ini bekerja dengan pengguna disimpan dalam basisdata tanpa memperhatikan ``AUTHENTICATION_BACKENDS``."

#: ../../../../sources/1.9/docs/howto/auth-remote-user.txt:67
msgid ""
"Since the ``RemoteUserBackend`` inherits from ``ModelBackend``, you will "
"still have all of the same permissions checking that is implemented in "
"``ModelBackend``."
msgstr "Sejak ``RemoteUserBackend`` warisan dari ``ModelBackend``, anda akan masih mempunyai semua pemeriksaan perizinan sama yang diterapkan dalam ``ModelBackend``."

#: ../../../../sources/1.9/docs/howto/auth-remote-user.txt:71
msgid ""
"If your authentication mechanism uses a custom HTTP header and not "
"``REMOTE_USER``, you can subclass ``RemoteUserMiddleware`` and set the "
"``header`` attribute to the desired ``request.META`` key.  For example::"
msgstr "Jika mekanisme pembuktian keaslian anda menggunakan kepala HTTP penyesuaian dan bukan ``REMOTE_USER``, anda dapat men subkelas kan ``RemoteUserMiddleware`` dan menyetel atribut ``header`` ke kunci ``request.META`` yang diinginkan. Sebagai contoh::"

#: ../../../../sources/1.9/docs/howto/auth-remote-user.txt:82
msgid ""
"Be very careful if using a ``RemoteUserMiddleware`` subclass with a custom "
"HTTP header. You must be sure that your front-end web server always sets or "
"strips that header based on the appropriate authentication checks, never "
"permitting an end-user to submit a fake (or \"spoofed\") header value. Since"
" the HTTP headers ``X-Auth-User`` and ``X-Auth_User`` (for example) both "
"normalize to the ``HTTP_X_AUTH_USER`` key in ``request.META``, you must also"
" check that your web server doesn't allow a spoofed header using underscores"
" in place of dashes."
msgstr "Sangat berhati-hatilah jika menggunakan subkelas ``RemoteUserMiddleware`` dengan kepala HTTP penyesuaian. Anda harus pastikan bahwa peladen jaringan paling depan anda selalu disetel atau memotong kepala itu berdasarkan pada pemeriksaan pembuktian keaslian yang sesuai, jangan pernah mengizinkan pengguna-akhir mengajukan nilai kepala tiruan (atau \"palse\"). Sejak kepala HTTP ``X-Auth-User`` dan ``X-Auth_User`` (sebagai contoh) keduanya menormalkan ke kunci ``HTTP_X_AUTH_USER`` dalam ``request.META``, anda harus juga memeriksa bahwa peladen jaringan anda tidak mengizinkan kepala palsu menggunakan garis bawah di tempat atau strip."

#: ../../../../sources/1.9/docs/howto/auth-remote-user.txt:91
msgid ""
"This warning doesn't apply to ``RemoteUserMiddleware`` in its default "
"configuration with ``header = 'REMOTE_USER'``, since a key that doesn't "
"start with ``HTTP_`` in ``request.META`` can only be set by your WSGI "
"server, not directly from an HTTP request header."
msgstr "Peringatan ini tidak berlaku pada ``RemoteUserMiddleware`` dalam konfigurasi awalnya dengan ``header = 'REMOTE_USER'``, sejak sebuah kunci tidak dimulai dengan ``HTTP_`` dalam ``request.META`` dapat hanya disetel dengan peladen WSGI anda, bukan secara langsung dari kepala meminta HTTP."

#: ../../../../sources/1.9/docs/howto/auth-remote-user.txt:96
msgid ""
"If you need more control, you can create your own authentication backend "
"that inherits from :class:`~django.contrib.auth.backends.RemoteUserBackend` "
"and override one or more of its attributes and methods."
msgstr "Jika anda butuh lebih kendali, anda dapat membuat backend pembuktian keaslian sendiri yang mewarisi dari :class:`~django.contrib.auth.backends.RemoteUserBackend` dan mengesampingkan satu atau lebih atribut dan caranya."

#: ../../../../sources/1.9/docs/howto/auth-remote-user.txt:103
msgid "Using ``REMOTE_USER`` on login pages only"
msgstr "Menggunakan ``REMOTE_USER`` hanya pada halaman masuk"

#: ../../../../sources/1.9/docs/howto/auth-remote-user.txt:107
msgid ""
"The ``RemoteUserMiddleware`` authentication middleware assumes that the HTTP"
" request header ``REMOTE_USER`` is present with all authenticated requests. "
"That might be expected and practical when Basic HTTP Auth with ``htpasswd`` "
"or other simple mechanisms are used, but with Negotiate (GSSAPI/Kerberos) or"
" other resource intensive authentication methods, the authentication in the "
"front-end HTTP server is usually only set up for one or a few login URLs, "
"and after successful authentication, the application is supposed to maintain"
" the authenticated session itself."
msgstr "Pembuktian keaslian middleware ``RemoteUserMiddleware`` menganggap bahwa kepala permintaan HTTP ``REMOTE_USER`` mewakili dengan semua permintaan dibuktikan keaslian. Itu mungkin diharapkan dan secara praktiknya ketika Pembuktian Keaslian HTTP Dasar dengan ``htpasswd`` atau mekanisme sederhana lainnya digunakan, tetapi dengan Negotiate (GSSAPI/Kerberos) atau cara pembuktian keaslian intensif sumber daya lainnya, pembuktian keaslian dalam peladen HTTP depan biasanya hanya disetel untuk satu atau sedikit URL masuk, dan setelah berhasil dibuktikan keasliannya, aplikasi seharusnya menjaga sesi dibuktikan keasliannya sendiri."

#: ../../../../sources/1.9/docs/howto/auth-remote-user.txt:116
msgid ""
":class:`~django.contrib.auth.middleware.PersistentRemoteUserMiddleware` "
"provides support for this use case. It will maintain the authenticated "
"session until explicit logout by the user. The class can be used as a drop-"
"in replacement of "
":class:`~django.contrib.auth.middleware.RemoteUserMiddleware` in the "
"documentation above."
msgstr ":class:`~django.contrib.auth.middleware.PersistentRemoteUserMiddleware` menyediakan dukungan untuk penggunaan kasus ini. Dia akan menjaga sesi dibuktikan keasliannya sampai keluar oleh pengguna. Kelas dapat digunakan sebagai pengganti dari :class:`~django.contrib.auth.middleware.RemoteUserMiddleware` dalam dokumentasi diatas."

#: ../../../../sources/1.9/docs/howto/custom-file-storage.txt:3
msgid "Writing a custom storage system"
msgstr "Menulis sistem penyimpanan disesuaikan"

#: ../../../../sources/1.9/docs/howto/custom-file-storage.txt:7
msgid ""
"If you need to provide custom file storage -- a common example is storing "
"files on some remote system -- you can do so by defining a custom storage "
"class. You'll need to follow these steps:"
msgstr "Jika anda butuh untuk menyediakan penyimpanan berkas disesuaikan -- contoh umum adalah menyimpan berkas di beberapa sistem terpencil -- anda dapat melakukannya dengan menentukan kelas penyimpanan disesuaikan. Anda akan butuh mengikuti langkah-langkah ini:"

#: ../../../../sources/1.9/docs/howto/custom-file-storage.txt:11
msgid ""
"Your custom storage system must be a subclass of "
"``django.core.files.storage.Storage``::"
msgstr "Sistem penyimpanan disesuaikan anda harus subkelas dari ``django.core.files.storage.Storage``::"

#: ../../../../sources/1.9/docs/howto/custom-file-storage.txt:19
msgid ""
"Django must be able to instantiate your storage system without any "
"arguments. This means that any settings should be taken from "
"``django.conf.settings``::"
msgstr "Django harus dapat memberikan contoh sistem penyimanan disesuaikan anda tanpa argumen apapun. Ini berarti bahwa setiap pengaturan harus diambil dari  ``django.conf.settings``::"

#: ../../../../sources/1.9/docs/howto/custom-file-storage.txt:31
msgid ""
"Your storage class must implement the :meth:`_open()` and :meth:`_save()` "
"methods, along with any other methods appropriate to your storage class. See"
" below for more on these methods."
msgstr "Kelas penyimpanan anda harus menerapkan cara :meth:`_open()` dan :meth:`_save()` , bersama dengan cara lainnya sesuai pada kelas penyimpanan anda. Lihat dibawah untuk lebih pada cara ini."

#: ../../../../sources/1.9/docs/howto/custom-file-storage.txt:35
msgid ""
"In addition, if your class provides local file storage, it must override the"
" ``path()`` method."
msgstr "Sebagai tambahan, jika kelas anda menyediakan penyimpanan berkas lokal, itu harus mengesampingkan cara ``path()``."

#: ../../../../sources/1.9/docs/howto/custom-file-storage.txt:38
msgid ""
"Your storage class must be :ref:`deconstructible <custom-deconstruct-"
"method>` so it can be serialized when it's used on a field in a migration. "
"As long as your field has arguments that are themselves :ref:`serializable "
"<migration-serializing>`, you can use the "
"``django.utils.deconstruct.deconstructible`` class decorator for this "
"(that's what Django uses on FileSystemStorage)."
msgstr "Kelas penyimpanan anda harus :ref:`deconstructible <custom-deconstruct-method>` sehingga dia dapat di serialkan ketika digunakan pada bidang dalam sebuah perpindahan. Selama bidang anda mempunyai argumen yang mereka sendiri :ref:`serializable <migration-serializing>`, anda dapat menggunakan kelas decorator untuk ini (itu mengapa Django digunakan pada FileSystemStorage)."

#: ../../../../sources/1.9/docs/howto/custom-file-storage.txt:45
msgid ""
"By default, the following methods raise `NotImplementedError` and will "
"typically have to be overridden:"
msgstr "Secara awal, cara ini menimbulkan `NotImplementedError` dan akan secara khusus harus dikesampingkan:"

#: ../../../../sources/1.9/docs/howto/custom-file-storage.txt:48
msgid ":meth:`Storage.delete`"
msgstr ":meth:`Storage.delete`"

#: ../../../../sources/1.9/docs/howto/custom-file-storage.txt:49
msgid ":meth:`Storage.exists`"
msgstr ":meth:`Storage.exists`"

#: ../../../../sources/1.9/docs/howto/custom-file-storage.txt:50
msgid ":meth:`Storage.listdir`"
msgstr ":meth:`Storage.listdir`"

#: ../../../../sources/1.9/docs/howto/custom-file-storage.txt:51
msgid ":meth:`Storage.size`"
msgstr ":meth:`Storage.size`"

#: ../../../../sources/1.9/docs/howto/custom-file-storage.txt:52
msgid ":meth:`Storage.url`"
msgstr ":meth:`Storage.url`"

#: ../../../../sources/1.9/docs/howto/custom-file-storage.txt:54
msgid ""
"Note however that not all these methods are required and may be deliberately"
" omitted. As it happens, it is possible to leave each method unimplemented "
"and still have a working Storage."
msgstr "Catat bagaimanapun bahwa tidak semua cara ini dibutuhkan dan mungkin sengaja dihilangkan. Ketika itu terjadi, itu memungkinkan meninggalkan setiap cara tidak diterapkan dan masih dapat Penyimpanan bekerja."

#: ../../../../sources/1.9/docs/howto/custom-file-storage.txt:58
msgid ""
"By way of example, if listing the contents of certain storage backends turns"
" out to be expensive, you might decide not to implement `Storage.listdir`."
msgstr "Sebagai contoh, jika daftar isi dari backend penyimpanan tertentu berubah menjadi mahal, anda mungkin memutuskan tidak menerapkan `Storage.listdir`."

#: ../../../../sources/1.9/docs/howto/custom-file-storage.txt:61
msgid ""
"Another example would be a backend that only handles writing to files. In "
"this case, you would not need to implement any of the above methods."
msgstr "Cara lain akan menjadi backend yang ahnya menangani penulisan ke berkas. Dalam kasus ini, anda tidak akan butuh menerapkan apapun cara diatas."

#: ../../../../sources/1.9/docs/howto/custom-file-storage.txt:64
msgid ""
"Ultimately, which of these methods are implemented is up to you. Leaving "
"some methods unimplemented will result in a partial (possibly broken) "
"interface."
msgstr "Akhirnya, cara mana yang anda terapkan terserah anda. Meninggalkan beberapa cara tidak diterapkan akan menghasilkan antarmuka sebagian (kemungkinan rusak)."

#: ../../../../sources/1.9/docs/howto/custom-file-storage.txt:67
msgid ""
"You'll also usually want to use hooks specifically designed for custom "
"storage objects. These are:"
msgstr "Anda akan juga ingin menggunakan penghubung khususnya dirancang untuk obyek penyimpanan disesuaikan. Ini adalah:"

#: ../../../../sources/1.9/docs/howto/custom-file-storage.txt:72
msgid "**Required**."
msgstr "**Wajib**."

#: ../../../../sources/1.9/docs/howto/custom-file-storage.txt:74
msgid ""
"Called by ``Storage.open()``, this is the actual mechanism the storage class"
" uses to open the file. This must return a ``File`` object, though in most "
"cases, you'll want to return some subclass here that implements logic "
"specific to the backend storage system."
msgstr "Dipanggil oleh ``Storage.open()``, ini adalah mekanisme sesungguhnya kelas penyimpanan digunakan untuk membuka berkas. Ini harus mengembalikan sebuah obyek ``File``, meskipun dalam kebanyakan kasus, anda ingin mengembalikan beberapa subkelas disini yang menerapkan logika spesifik ke sistem penyimpanan belakang."

#: ../../../../sources/1.9/docs/howto/custom-file-storage.txt:81
msgid ""
"Called by ``Storage.save()``. The ``name`` will already have gone through "
"``get_valid_name()`` and ``get_available_name()``, and the ``content`` will "
"be a ``File`` object itself."
msgstr "Dipanggil oleh ``Storage.save()``, ``name`` sudah telah melalui ``get_valid_name()`` dan ``get_available_name()``, dan ``content`` akan menjadi obyek ``File`` itu sendiri."

#: ../../../../sources/1.9/docs/howto/custom-file-storage.txt:85
msgid ""
"Should return the actual name of name of the file saved (usually the "
"``name`` passed in, but if the storage needs to change the file name return "
"the new name instead)."
msgstr "Harus mengembalikan nama sebenarnya dari nama dari berkas tersimpan (biasanya ``name`` disahkan, tetapi jika penyimpanan butuh merubah nama berkas mengembalikan nama baru sebagai gantinya). "

#: ../../../../sources/1.9/docs/howto/custom-file-storage.txt:91
msgid ""
"Returns a filename suitable for use with the underlying storage system. The "
"``name`` argument passed to this method is either the original filename sent"
" to the server or, if ``upload_to`` is a callable, the filename returned by "
"that method after any path information is removed. Override this to "
"customize how non-standard characters are converted to safe filenames."
msgstr "Mengembalikan sebuah nama berkas yang cocok untuk digunakan dengan sistem penyimpanan pokok. Argumen ``name`` dilewati ke cara ini antara berkas nama asli dikirim ke peladen atau, jika ``upload_to`` adalah dapat dipanggil, nama berkas dikembalikan oleh cara tersebut setelah informasi jalur dipindahkan. Kesampingkan ini untuk menyesuaiakan bagaimana karakter bukan-standar dirubah ke nama berkas aman."

#: ../../../../sources/1.9/docs/howto/custom-file-storage.txt:99
msgid ""
"In older versions, this method was not called when ``upload_to`` was a "
"callable."
msgstr "Di versi lebih lama, cara ini tidak dipanggil ketika ``upload_to`` dapat dipanggil."

#: ../../../../sources/1.9/docs/howto/custom-file-storage.txt:102
msgid ""
"The code provided on ``Storage`` retains only alpha-numeric characters, "
"periods and underscores from the original filename, removing everything "
"else."
msgstr "Kode disediakan di ``Storage`` hanya mempertahankan karakter alpanumerik, titik dan garis bawah dari nama berkas asli, memindahkan semua yang lainnya."

#: ../../../../sources/1.9/docs/howto/custom-file-storage.txt:107
msgid ""
"Returns a filename that is available in the storage mechanism, possibly "
"taking the provided filename into account. The ``name`` argument passed to "
"this method will have already cleaned to a filename valid for the storage "
"system, according to the ``get_valid_name()`` method described above."
msgstr "Mengembalikan nama berkas yang tersedia di mekanisme penyimpanan, barangkali mengambil nama berkas tersedia ke dalam akun. argumen ``name`` dilewati ke cara ini akan sudah dibersihkan ke nama berkas sah untuk sistem penyimpanan, menurut cara ``get_valid_name()`` digambarkan diatas."

#: ../../../../sources/1.9/docs/howto/custom-file-storage.txt:112
msgid ""
"The length of the filename will not exceed ``max_length``, if provided. If a"
" free unique filename cannot be found, a :exc:`SuspiciousFileOperation "
"<django.core.exceptions.SuspiciousOperation>` exception is raised."
msgstr "Panjang dari nama berkas tidak melebihi ``max_length``, jika disediakan. Jika nama berkas unik bebas tidak dapat ditemukan, sebuah pengecualian :exc:`SuspiciousFileOperation <django.core.exceptions.SuspiciousOperation>` muncul."

#: ../../../../sources/1.9/docs/howto/custom-file-storage.txt:116
msgid ""
"If a file with ``name`` already exists, an underscore plus a random 7 "
"character alphanumeric string is appended to the filename before the "
"extension."
msgstr "Jika sebuah berkas dengan ``name`` sudah ada, garis bawah ditambah 7 karakter acak alpanumerik string akan ditambahkan ke nama berkas sebelum tambahan."

#: ../../../../sources/1.9/docs/howto/custom-file-storage.txt:121
msgid "The ``max_length`` argument was added."
msgstr "Argumen ``max_length`` telah ditambahkan."

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:3
msgid "Custom Lookups"
msgstr "Penyesuaian Pencarian"

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:7
msgid ""
"Django offers a wide variety of :ref:`built-in lookups <field-lookups>` for "
"filtering (for example, ``exact`` and ``icontains``). This documentation "
"explains how to write custom lookups and how to alter the working of "
"existing lookups. For the API references of lookups, see the "
":doc:`/ref/models/lookups`."
msgstr "Django menawarkan beragam luas dari :ref:`built-in lookups <field-lookups>` untuk penyaringan (sebagai contoh, ``exact`` dan ``icontains``). Dokumentasi ini menjelaskan bagaimana menulis penyesuaian pencarian dan bagaimana mengubah pekerjaan dari pencarian yang ada. Untuk acuan API dari pencarian, lihat :doc:`/ref/models/lookups`."

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:13
msgid "A simple lookup example"
msgstr "Sebuah contoh pencarian sederhana"

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:15
msgid ""
"Let's start with a simple custom lookup. We will write a custom lookup "
"``ne`` which works opposite to ``exact``. "
"``Author.objects.filter(name__ne='Jack')`` will translate to the SQL::"
msgstr "Mari kita mulai dengan sebuah penyesuaian pencarian sederhana. Kami akan menulis penyesuaian pencarian ``ne`` yang bekerja berlawawan ke ``exact``. ``Author.objects.filter(name__ne='Jack')`` akan dirubah ke SQL::"

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:21
msgid ""
"This SQL is backend independent, so we don't need to worry about different "
"databases."
msgstr "Backend SQL berdisi sendiri, sehingga kita tidak perlu khawatir tentang basisdata berbeda."

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:24
msgid ""
"There are two steps to making this work. Firstly we need to implement the "
"lookup, then we need to tell Django about it. The implementation is quite "
"straightforward::"
msgstr "Terdapat dua langkah untuk membuat ini bekerja. Pertama kami butuh menerapkan pencarian, kemudian kami butuh mengatakan Django tentang ini. Penerapannya sangat mudah::"

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:39
msgid ""
"To register the ``NotEqual`` lookup we will just need to call "
"``register_lookup`` on the field class we want the lookup to be available. "
"In this case, the lookup makes sense on all ``Field`` subclasses, so we "
"register it with ``Field`` directly::"
msgstr "Untuk mendaftar pencarian ``NotEqual`` kami akan butuh memanggil ``register_lookup`` pada kelas bidang kami ingin pencarian menjadi tersedia. Dalam kasus ini, pencarian dapat dimengerti pada semua subkelas ``Field``, jadi kami mendaftarkannya dengan ``Field`` secara langsung:"

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:47
msgid "Lookup registration can also be done using a decorator pattern::"
msgstr "Pendaftaran pencarian dapat juga dikerjakan menggunakan corak decorator::"

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:57
msgid "The ability to use the decorator pattern was added."
msgstr "Kemampuan untuk menggunakan coran decorator telah ditambahkan."

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:59
msgid ""
"We can now use ``foo__ne`` for any field ``foo``. You will need to ensure "
"that this registration happens before you try to create any querysets using "
"it. You could place the implementation in a ``models.py`` file, or register "
"the lookup in the ``ready()`` method of an ``AppConfig``."
msgstr "Kami sekarang dapat menggunakan ``foo__ne`` untuk setiap bidang ``foo``. Anda akan butuh memastikan bahwa pendaftaran ini terjadi sebelum anda mencoba membuat kumpulan permintaan menggunakannya. Anda dapat menempatkan penerapan dalam sebuah berkas ``models.py``, atau mendaftarkan pencarian dalam cara ``ready()`` dari sebuah ``AppConfig``."

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:64
msgid ""
"Taking a closer look at the implementation, the first required attribute is "
"``lookup_name``. This allows the ORM to understand how to interpret "
"``name__ne`` and use ``NotEqual`` to generate the SQL. By convention, these "
"names are always lowercase strings containing only letters, but the only "
"hard requirement is that it must not contain the string ``__``."
msgstr "Melihat lebih dekat pada penerapan, atribut dibutuhkan pertama adalah ``lookup_name``. Ini mengizinkan ORM untuk memahami bagaimana mengartikan ``name__ne`` dan menggunakan ``NotEqual`` utnuk membangkitkan SQL. Berdasarkan pemufakatan, nama-nama ini selalu deretan karakter huruf kecil mengandung hanya huruf, tetapi persyaratan mutlak adalah bahwa itu harus mengandung deretan karakter ``__``."

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:70
msgid ""
"We then need to define the ``as_sql`` method. This takes a ``SQLCompiler`` "
"object, called ``compiler``,  and the active database connection. "
"``SQLCompiler`` objects are not documented, but the only thing we need to "
"know about them is that they have a ``compile()`` method which returns a "
"tuple containing a SQL string, and the parameters to be interpolated into "
"that string. In most cases, you don't need to use it directly and can pass "
"it on to ``process_lhs()`` and ``process_rhs()``."
msgstr "Kami kemudian butuh menentukan cara ``as_sql``. Ini mengambil obyek ``SQLCompiler``, dipanggil ``compiler``, dan hubungan basisdata aktif. Obyek ``SQLCompiler`` tidak didokumentasikan, tetapi hal yang kita butuhkan untuk mengetahui tentang mereka adalah mereka mempunyai sebuah cara ``compile()`` yang mengembalikan tuple mengandung deretan karakter SQL, dan parameter untuk disisipkan kedalam deretan karakter. Dalam kebanyakan kasus, anda tidak butuh menggunakannya secara langsung dan lewatinya ke ``process_lhs()`` and ``process_rhs()``."

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:78
msgid ""
"A ``Lookup`` works against two values, ``lhs`` and ``rhs``, standing for "
"left-hand side and right-hand side. The left-hand side is usually a field "
"reference, but it can be anything implementing the :ref:`query expression "
"API <query-expression>`. The right-hand is the value given by the user. In "
"the example ``Author.objects.filter(name__ne='Jack')``, the left-hand side "
"is a reference to the ``name`` field of the ``Author`` model, and ``'Jack'``"
" is the right-hand side."
msgstr "Sebuah ``Lookup`` bekerja terhadap dua nilai, ``lhs`` dan ``rhs``, kepanjangan dari left-hand side dan right-hand side. Left-hand side biasanya acuan bidang, tetapi dia dapat menjadi apapun menerapkan :ref:`query expression API <query-expression>`. Right-hand adalah nilai diberikan oleh pengguna. Dalam contoh ``Author.objects.filter(name__ne='Jack')``, the left-hand side adalah sebauh acuan pada bidang ``name`` dari model ``Author``, dan ``'Jack'`` adalah the right-hand side."

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:86
msgid ""
"We call ``process_lhs`` and ``process_rhs`` to convert them into the values "
"we need for SQL using the ``compiler`` object described before. These "
"methods return tuples containing some SQL and the parameters to be "
"interpolated into that SQL, just as we need to return from our ``as_sql`` "
"method. In the above example, ``process_lhs`` returns "
"``('\"author\".\"name\"', [])`` and ``process_rhs`` returns ``('\"%s\"', "
"['Jack'])``. In this example there were no parameters for the left hand "
"side, but this would depend on the object we have, so we still need to "
"include them in the parameters we return."
msgstr "Kami memanggil ``process_lhs`` dan ``process_rhs`` untuk merubah mereka kedalam nilai-nilai kami butuh untuk SQL menggunakan obyek ``compiler`` digambarkan sebelumnya. Cara ini mengembalikan tuple mengandung beberapa SQL dan parameter untuk ditambahkan kedaam SQL itu, seperti yang kita perlu untuk mengembalikan cara ``as_sql`` kami. Dalam contoh diatas, ``process_lhs`` mengembalikan ``('\"author\".\"name\"', [])`` dan ``process_rhs`` mengembalikan ``('\"%s\"', ['Jack'])``. Dalam contoh ini tidak ada parameter untuk left hand side, tetapi ini akan tergantung pada obyek kita punya, jadi jami masih butuh menyertakan merekan dalam parameter kami kembalikan."

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:95
msgid ""
"Finally we combine the parts into a SQL expression with ``<>``, and supply "
"all the parameters for the query. We then return a tuple containing the "
"generated SQL string and the parameters."
msgstr "Akhirnya kami memadukan bagian kedalam sebuah pernyataan SQL dengan ``<>``, dan memasok semua parameter untuk permintaan. Kami lalu mengembalikan sebuah tuple mengandung deretan karakter SQL dan parameter yang dibangkitkan."

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:100
msgid "A simple transformer example"
msgstr "Contoh perubahan sederhana"

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:102
msgid ""
"The custom lookup above is great, but in some cases you may want to be able "
"to chain lookups together. For example, let's suppose we are building an "
"application where we want to make use of the ``abs()`` operator. We have an "
"``Experiment`` model which records a start value, end value, and the change "
"(start - end). We would like to find all experiments where the change was "
"equal to a certain amount (``Experiment.objects.filter(change__abs=27)``), "
"or where it did not exceed a certain amount "
"(``Experiment.objects.filter(change__abs__lt=27)``)."
msgstr "Penyesuaian pencarian diatas adalah hebat, tetapi dalam beberapa kasus anda mungkin ingin dapat merangkai pencarian bersama-sama. Sebagai contoh, mari kita misalnya kami sedang membangun sebuah aplikasi dimana kami ingin membuat penggunaan dari operator ``abs()``. Kami mempunyai sebuah model ``Experiment`` yang merekam sebuah nilai awal, nilai akhir, dan perubahan (awal - akhir). Kami akan suka menemukan semua percobaan dimana perubahan setara pada bilangan tertentu (``Experiment.objects.filter(change__abs=27)``), atau dimana itu tidak melebihi bilangan tertentu (``Experiment.objects.filter(change__abs__lt=27)``)."

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:112
msgid ""
"This example is somewhat contrived, but it nicely demonstrates the range of "
"functionality which is possible in a database backend independent manner, "
"and without duplicating functionality already in Django."
msgstr "Contoh ini agak dibikin, tetapi dia menunjukkan jangkauan fungsionalitas yang memungkinkan dalam cara backend basisdata berdisi sendiri, tanpa menggandakan fungsionalitas yang sudah ada di Django."

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:116
msgid ""
"We will start by writing a ``AbsoluteValue`` transformer. This will use the "
"SQL function ``ABS()`` to transform the value before comparison::"
msgstr "Kami akan mulai dengan menulis sebuah pengubah ``AbsoluteValue``. Ini akan menggunakan fungsi SQL ``ABS()`` untuk merubah nilai sebelum dibandingkan::"

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:125
msgid "Next, let's register it for ``IntegerField``::"
msgstr "Selanjutnya, mari kita daftarkan sebagai ``IntegerField``::"

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:130
msgid ""
"We can now run the queries we had before. "
"``Experiment.objects.filter(change__abs=27)`` will generate the following "
"SQL::"
msgstr "Kami dapat sekarang menjalankan permintaan kami punyai sebelumnya. ``Experiment.objects.filter(change__abs=27)`` akan membangkitkan SQL berikut::"

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:135
msgid ""
"By using ``Transform`` instead of ``Lookup`` it means we are able to chain "
"further lookups afterwards. So "
"``Experiment.objects.filter(change__abs__lt=27)`` will generate the "
"following SQL::"
msgstr "Dengan menggunakan ``Transform`` dari pada ``Lookup`` itu berarti kami dapat merangkai pencarian lebih lanjut setelahnya. Jadi ``Experiment.objects.filter(change__abs__lt=27)`` akan membangkitkan SQL berikut::"

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:142
msgid ""
"Note that in case there is no other lookup specified, Django interprets "
"``change__abs=27`` as ``change__abs__exact=27``."
msgstr "Catat bahwa dalam kasus terdapat tidak ada pencarian lain yang ditentukan, Django menterjemahkan ``change__abs=27`` sebagai ``change__abs__exact=27``."

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:145
msgid ""
"When looking for which lookups are allowable after the ``Transform`` has "
"been applied, Django uses the ``output_field`` attribute. We didn't need to "
"specify this here as it didn't change, but supposing we were applying "
"``AbsoluteValue`` to some field which represents a more complex type (for "
"example a point relative to an origin, or a complex number) then we may have"
" wanted to specify that the transform returns a ``FloatField`` type for "
"further lookups. This can be done by adding an ``output_field`` attribute to"
" the transform::"
msgstr "Ketika mencari pencarian mana yang diizinkan setelah ``Transform`` diberlakukan, Django menggunakan atribut ``output_field``. Kami tidak butuh menentukan ini disini jika itu tidak berubah, tetapi seharusnya kami memberlakukan ``AbsoluteValue`` pada beberapa bidang yang mewakili jenis lebih rumit (sebagai contoh sebuah titik relatif ke yang asli, atau angka rumit) kemudian kami mungkin ingin menentukan bahwa perubahan mengembalikan jenis ``FloatField`` untuk pencarian lebih lanjut. Ini dapat dikerjakan dengan menambahkan sebuah atribut ``output_field`` untuk perubahan::"

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:163
msgid ""
"This ensures that further lookups like ``abs__lte`` behave as they would for"
" a ``FloatField``."
msgstr "Ini memastikan bahwa pencarian lebih lanjut seperti ``abs__lte`` berperilaku seperti mereka lakukan untuk ``FloatField``."

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:167
msgid "Writing an efficient ``abs__lt`` lookup"
msgstr "Menulis sebuah pencarian ``abs__lt`` efisien"

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:169
msgid ""
"When using the above written ``abs`` lookup, the SQL produced will not use "
"indexes efficiently in some cases. In particular, when we use "
"``change__abs__lt=27``, this is equivalent to ``change__gt=-27`` AND "
"``change__lt=27``. (For the ``lte`` case we could use the SQL ``BETWEEN``)."
msgstr "Ketika menggunakan penulisan diatas pencarian ``abs``, keluaran SQL tidak menggunakan indeks secara efisien dalam beberapa kasus. Khususnya, ketika kami menggunakan ``change__abs__lt=27``, ini setara pada ``change__gt=-27`` AND ``change__lt=27``. (Untuk kasus ``lte`` kami akan menggunakan SQL ``BETWEEN``)."

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:174
msgid ""
"So we would like ``Experiment.objects.filter(change__abs__lt=27)`` to "
"generate the following SQL::"
msgstr "Jadi kami akan ``Experiment.objects.filter(change__abs__lt=27)`` untuk membangkitkan SQL berikut::"

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:179
msgid "The implementation is::"
msgstr "Peneprapannya adalah::"

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:194
msgid ""
"There are a couple of notable things going on. First, "
"``AbsoluteValueLessThan`` isn't calling ``process_lhs()``. Instead it skips "
"the transformation of the ``lhs`` done by ``AbsoluteValue`` and uses the "
"original ``lhs``. That is, we want to get ``\"experiments\".\"change\"`` not"
" ``ABS(\"experiments\".\"change\")``. Referring directly to ``self.lhs.lhs``"
" is safe as ``AbsoluteValueLessThan`` can be accessed only from the "
"``AbsoluteValue`` lookup, that is the ``lhs`` is always an instance of "
"``AbsoluteValue``."
msgstr "Terdapat sepasang hal penting sedang terjadi. Pertama, ``AbsoluteValueLessThan`` tidak memanggil ``process_lhs()``. Malahan dia melewati perubahan dari ``lhs`` dikerjakan oleh ``AbsoluteValue`` dan menggunakan ``lhs`` asli. Yaitu, kami ingin mendapatkan ``\"experiments\".\"change\"`` bukan ``ABS(\"experiments\".\"change\")``. Mengacu secara langsung pada ``self.lhs.lhs`` adalah aman ``AbsoluteValueLessThan`` dapat diakses hanya dari pencarian ``AbsoluteValue``, yaitu ``lhs`` selalu sebuah instance dari ``AbsoluteValue``."

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:202
msgid ""
"Notice also that  as both sides are used multiple times in the query the "
"params need to contain ``lhs_params`` and ``rhs_params`` multiple times."
msgstr "Perhaikan juga bahwa kedua sisi menggunakan banyak waktu dalam permintaan parameter butuh untuk dikandung ``lhs_params`` dan ``rhs_params`` banyak waktu."

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:205
msgid ""
"The final query does the inversion (``27`` to ``-27``) directly in the "
"database. The reason for doing this is that if the ``self.rhs`` is something"
" else than a plain integer value (for example an ``F()`` reference) we can't"
" do the transformations in Python."
msgstr "Permintaan akhir melakukan pembalikan (``27`` ke ``-27``) secara langsung di basisdata. Alasan untuk melakukan ini adalah bahwa jika ``self.rhs`` sesuatu lain daripada nilai integer polos (sebagai contoh sebuah acuan ``F()``) kami tidak dapat melakukan perubahan dalam Python."

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:211
msgid ""
"In fact, most lookups with ``__abs`` could be implemented as range queries "
"like this, and on most database backends it is likely to be more sensible to"
" do so as you can make use of the indexes. However with PostgreSQL you may "
"want to add an index on ``abs(change)`` which would allow these queries to "
"be very efficient."
msgstr "Faktanya, kebanyakan pencarian dengan ``__abs`` dapat diterapkan sebagai jangkauan permintaan seperti ini, dan pada kebanyakan backend basisdata sepertinya lebih bijaksana untuk dilakukan sehingga anda dapat membuat penggunaan indeks. Bagaimanapun dengan PostgreSQL anda mungkin ingin menambahkan indeks pada ``abs(change)`` yang akan mengizinkan permintaan ini menjadi lebih efisien."

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:218
msgid "A bilateral transformer example"
msgstr "Sebuah contoh perubahan timbal balik"

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:220
msgid ""
"The ``AbsoluteValue`` example we discussed previously is a transformation "
"which applies to the left-hand side of the lookup. There may be some cases "
"where you want the transformation to be applied to both the left-hand side "
"and the right-hand side. For instance, if you want to filter a queryset "
"based on the equality of the left and right-hand side insensitively to some "
"SQL function."
msgstr "Contoh ``AbsoluteValue`` kami obrolkan sebelumnya adalah sebuah perubahan yang berlaku pada left-hand side dari pencarian. Mungkin disana beberapa kasus dimana anda ingin perubahan diberlakukan pada kedua left-hand side and the right-hand side. Sebagai contoh, jika anda ingin menyaring kumpulan permintaan berdasarkan pada persamaan left and right-hand side kebal pada beberapa fungsi SQL."

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:226
msgid ""
"Let's examine the simple example of case-insensitive transformation here. "
"This transformation isn't very useful in practice as Django already comes "
"with a bunch of built-in case-insensitive lookups, but it will be a nice "
"demonstration of bilateral transformations in a database-agnostic way."
msgstr "Mari kita ujikan contoh sederhana dari perubahan kasus tidak peka disini. Perubahan ini tidak sangat berguna dalam praktiknya ketika Django sudah datang dengan seikat pencarian siap pakai tidak peka, tetapi dia akan menjadi pertunjukan bagus dari perubahan timbal balik dalam sebuah cara basisdata-agnostik."

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:231
msgid ""
"We define an ``UpperCase`` transformer which uses the SQL function "
"``UPPER()`` to transform the values before comparison. We define "
":attr:`bilateral = True <django.db.models.Transform.bilateral>` to indicate "
"that this transformation should apply to both ``lhs`` and ``rhs``::"
msgstr "Kami menentukan sebuab perubahan `UpperCase`` yang menggunakan fungsi SQL ``UPPER()`` untuk merubah nilai sebelum dibandingkan. Kami menentukan :attr:`bilateral = True <django.db.models.Transform.bilateral>` untuk mengindikasikan bahwa perubahan ini harus berlaku pada kedua ``lhs`` and ``rhs``::"

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:243
msgid "Next, let's register it::"
msgstr "Selanjutnya, mari kita mendaftarkannya::"

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:249
msgid ""
"Now, the queryset ``Author.objects.filter(name__upper=\"doe\")`` will "
"generate a case insensitive query like this::"
msgstr "Sekarang, kumpulan permintaan ``Author.objects.filter(name__upper=\"doe\")`` akan membangkitkan sebuah permintaan kasus tidak peka seperti ini::"

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:255
msgid "Writing alternative implementations for existing lookups"
msgstr "Menulis penerapan cara lain untuk pencarian yang ada"

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:257
msgid ""
"Sometimes different database vendors require different SQL for the same "
"operation. For this example we will rewrite a custom implementation for "
"MySQL for the NotEqual operator. Instead of ``<>`` we will be using ``!=`` "
"operator. (Note that in reality almost all databases support both, including"
" all the official databases supported by Django)."
msgstr "Terkadang penjaja basisdata berbeda membutuhkan SQL berbeda untuk pekerjaan yang sama. Untuk contoh ini kami akan menulis kembali sebuah penyesuaian penerapan untuk MySQL untuk penghubung NotEqual. Dari pada ``<>`` kami akan menggunakan penghubung ``!=``. (Catat bahwa dalam kenyataan hampir semua basisdata mendukung keduanya, termasuk semua basisdata resmi didukung oleh Django)."

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:263
msgid ""
"We can change the behavior on a specific backend by creating a subclass of "
"``NotEqual`` with a ``as_mysql`` method::"
msgstr "Kami dapat merubah kebiasaan pada backend spesifik dengan membuat subkelas dari ``NotEqual`` dengan sebuah cara ``as_mysql``::"

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:275
msgid ""
"We can then register it with ``Field``. It takes the place of the original "
"``NotEqual`` class as it has the same ``lookup_name``."
msgstr "Kami dapat mendaftarkannya dengan ``Field``. Dia memakan tempat dari kelas ``NotEqual`` asli seperti dia mempunyai ``lookup_name`` sama."

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:278
msgid ""
"When compiling a query, Django first looks for ``as_%s % connection.vendor``"
" methods, and then falls back to ``as_sql``. The vendor names for the in-"
"built backends are ``sqlite``, ``postgresql``, ``oracle`` and ``mysql``."
msgstr "Ketika menyusun sebuah permintaan, Django pertama mencari cara ``as_%s % connection.vendor``, dan kemudian kembali ke ``as_sql``. Nama penjaja untuk membangun backend adalah ``sqlite``, ``postgresql``, ``oracle`` dan ``mysql``."

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:283
msgid "How Django determines the lookups and transforms which are used"
msgstr "Bagaimana Django menentuka pencarian dan merubah yang sedang digunakan"

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:285
msgid ""
"In some cases you may wish to dynamically change which ``Transform`` or "
"``Lookup`` is returned based on the name passed in, rather than fixing it. "
"As an example, you could have a field which stores coordinates or an "
"arbitrary dimension, and wish to allow a syntax like "
"``.filter(coords__x7=4)`` to return the objects where the 7th coordinate has"
" value 4. In order to do this, you would override ``get_lookup`` with "
"something like::"
msgstr "Dalam beberapa kasus anda mungkin berharap untuk secara dinamis merubah ``Transform`` atau ``Lookup`` dikembalikan berdasarkan pada nama dilewatkan, daripada memperbaikinya. Sebagai sebuah contoh, anda dapat mempunyai sebuah bidang yang menyimpan kordinat atau dimensi berubah-ubah dan berharap untuk mengizinkan sebuah sintaksis seperti ``.filter(coords__x7=4)`` untuk mengembalikan obyek dimana kordinat 7 mempunyai nilai 4. Untuk melakukan ini, anda akan mengesampingkan ``get_lookup`` dengan sesuatu seperti::"

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:303
msgid ""
"You would then define ``get_coordinate_lookup`` appropriately to return a "
"``Lookup`` subclass which handles the relevant value of ``dimension``."
msgstr "Anda kemudian akan menentukan ``get_coordinate_lookup`` dengan benar untuk mengembalikan sebuah subkelas ``Lookup`` yang menangani nilai yang terkait dari ``dimension``."

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:306
msgid ""
"There is a similarly named method called ``get_transform()``. "
"``get_lookup()`` should always return a ``Lookup`` subclass, and "
"``get_transform()`` a ``Transform`` subclass. It is important to remember "
"that ``Transform`` objects can be further filtered on, and ``Lookup`` "
"objects cannot."
msgstr "Ada cara yang dinamai mirip dipanggil ``get_transform()``. ``get_lookup()`` harus selalu mengembalikan sebuah subkelas ``Lookup``, dan ``Lookup`` sebuah subkelas ``Transform``. Itu sangat penting diingat bahwa obyek ``Transform`` dapat lebih jauh disaring, dan obyek ``Lookup`` tidak dapat."

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:311
msgid ""
"When filtering, if there is only one lookup name remaining to be resolved, "
"we will look for a ``Lookup``. If there are multiple names, it will look for"
" a ``Transform``. In the situation where there is only one name and a "
"``Lookup`` is not found, we look for a ``Transform`` and then the ``exact`` "
"lookup on that ``Transform``. All call sequences always end with a "
"``Lookup``. To clarify:"
msgstr "Ketika menyaring, jika hanya ada satu nama pencarian tersisa untuk diselesaikan, kami akan mencari sebuah ``Lookup``. Jika ada banyak nama, dia akan mencari sebuah ``Transform``. Dalam keadaan dimana hanya ada satu nama dan sebuah ``Lookup`` tidak ditemukan, kami mencari sebuah ``Transform`` dan kemudian pencarian ``exact`` pada ``Transform`` tersebut. Semua panggilan selalu berurutan diakhiri dengan sebuah ``Lookup``. Untuk menjelaskan:"

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:317
msgid ""
"``.filter(myfield__mylookup)`` will call ``myfield.get_lookup('mylookup')``."
msgstr "``.filter(myfield__mylookup)`` akan memanggil ``myfield.get_lookup('mylookup')``."

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:318
msgid ""
"``.filter(myfield__mytransform__mylookup)`` will call "
"``myfield.get_transform('mytransform')``, and then "
"``mytransform.get_lookup('mylookup')``."
msgstr "``.filter(myfield__mytransform__mylookup)`` akan memanggil ``myfield.get_transform('mytransform')``, dan lalu ``mytransform.get_lookup('mylookup')``."

#: ../../../../sources/1.9/docs/howto/custom-lookups.txt:321
msgid ""
"``.filter(myfield__mytransform)`` will first call "
"``myfield.get_lookup('mytransform')``, which will fail, so it will fall back"
" to calling ``myfield.get_transform('mytransform')`` and then "
"``mytransform.get_lookup('exact')``."
msgstr "``.filter(myfield__mytransform)`` akan memanggil pertama ``myfield.get_lookup('mytransform')``, yang akan gagal, sehingga dia akan gagal kembali memanggil ``myfield.get_transform('mytransform')`` dan kemudian ``mytransform.get_lookup('exact')``."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:3
msgid "Writing custom ``django-admin`` commands"
msgstr "Menulis perintah ``django-admin`` penyesuaian"

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:7
msgid ""
"Applications can register their own actions with ``manage.py``. For example,"
" you might want to add a ``manage.py`` action for a Django app that you're "
"distributing. In this document, we will be building a custom ``closepoll`` "
"command for the ``polls`` application from the "
":doc:`tutorial</intro/tutorial01>`."
msgstr "Aplikasi dapat mendaftarkan tindakan mereka sendiri dengan ``manage.py``. Sebagai contoh, anda mungkin ingin menambahkan sebuah tindakan ``manage.py`` untuk sebuah aplikasi Django yang anda sedang sebarkan. Dalam dokumen ini, kami akan membangun sebuah penyesuaian perintah ``closepoll`` untuk aplikasi ``polls`` dari :doc:`tutorial</intro/tutorial01>`."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:13
msgid ""
"To do this, just add a ``management/commands`` directory to the application."
" Django will register a ``manage.py`` command for each Python module in that"
" directory whose name doesn't begin with an underscore. For example::"
msgstr "Untuk melakukan ini, tambahkan direktori ``management/commands`` ke aplikasi. Django akan mendaftarkan sebuah perintah ``manage.py`` untuk setiap modul Python dalam direktori tersebut yang namanya tidak dimulai dengan garis bawah. Sebagai contoh::"

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:29
msgid ""
"On Python 2, be sure to include ``__init__.py`` files in both the "
"``management`` and ``management/commands`` directories as done above or your"
" command will not be detected."
msgstr "Pada Python 2, pastika menyertakan berkas ``__init__.py`` dalam kedua direktori ``management`` dan ``management/commands`` seperti yang dilakukan diatas atau perintah anda tidak akan ditemukan."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:33
msgid ""
"In this example, the ``closepoll`` command will be made available to any "
"project that includes the ``polls`` application in "
":setting:`INSTALLED_APPS`."
msgstr "Dalam contoh ini, perintah ``closepoll`` akan dibuat tersedia pada setiap proyek yang menyertakan aplikasi ``polls`` dalam :setting:`INSTALLED_APPS`."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:36
msgid ""
"The ``_private.py`` module will not be available as a management command."
msgstr "Modul ``_private.py`` tidak akan tersedia sebagai perintah pengelolaan."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:38
msgid ""
"The ``closepoll.py`` module has only one requirement -- it must define a "
"class ``Command`` that extends :class:`BaseCommand` or one of its "
":ref:`subclasses<ref-basecommand-subclasses>`."
msgstr "Modul ``closepoll.py`` mempunyai hanya satu persyaratan -- itu harus ditentukan sebuah kelas ``Command`` yang memperpanjang :class:`BaseCommand` atau satu dari :ref:`subclasses<ref-basecommand-subclasses>` nya."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:42
msgid "Standalone scripts"
msgstr "Tulisan berdiri sendiri"

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:44
msgid ""
"Custom management commands are especially useful for running standalone "
"scripts or for scripts that are periodically executed from the UNIX crontab "
"or from Windows scheduled tasks control panel."
msgstr "Penyesuaian pengelolaan perintah adalah khususnya berguna untuk menjalankan tulisan berdiri sendiri atau untuk tulisan yang secara berkala dijalankan dari panel kendali UNIX crontab atau Windows  scheduled tasks."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:48
msgid ""
"To implement the command, edit ``polls/management/commands/closepoll.py`` to"
" look like this::"
msgstr "Untuk menerapkan perintah, sunting ``polls/management/commands/closepoll.py`` untuk kelihatan seperti ini::"

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:74
msgid ""
"Before Django 1.8, management commands were based on the :py:mod:`optparse` "
"module, and positional arguments were passed in ``*args`` while optional "
"arguments were passed in ``**options``. Now that management commands use "
":py:mod:`argparse` for argument parsing, all arguments are passed in "
"``**options`` by default, unless you name your positional arguments to "
"``args`` (compatibility mode). You are encouraged to exclusively use "
"``**options`` for new commands."
msgstr "Sebelum Django 1.8, pengelolaan perintah berdasarkan pada modul :py:mod:`optparse`, dan penempatan argumen dilewati dalam ``*args`` selama argumen pilihan dilewati dalam ``**options``. Sekarang pengelolaan perintah tersebut menggunakan :py:mod:`argparse` untuk menguraikan argumen, semua argumen dilewati dalam ``**options`` secara awal, meskipun nama anda penempatan argumen anda pada ``args`` (suasana kesesuaian). Anda dianjurkan secara eksklusif menggunakan ``**options`` untuk perintah baru."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:85
msgid ""
"When you are using management commands and wish to provide console output, "
"you should write to ``self.stdout`` and ``self.stderr``, instead of printing"
" to ``stdout`` and ``stderr`` directly. By using these proxies, it becomes "
"much easier to test your custom command. Note also that you don't need to "
"end messages with a newline character, it will be added automatically, "
"unless you specify the ``ending`` parameter::"
msgstr "Ketika anda menggunakan pengelolaan perintah dan berharap untuk menyediakan keluaran tempat tuts, anda harus menulis ke ``self.stdout`` dan ``self.stderr``, daripada mencetak ke ``stdout`` and ``stderr`` secara langsung. Dengan menggunakan proxi ini, dia menjadi lebih mudah untuk mencoba penyesuaian perintah anda. Catat juga bahwa anda tidak butuh mengakhiri pesan dengan karakter baris baru, dia akan ditambahkan otomatis, meskipun anda menentukan parameter ``ending``::"

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:95
msgid ""
"The new custom command can be called using ``python manage.py closepoll "
"<poll_id>``."
msgstr "Perintah penyesuaian baru dapat dipanggil menggunakan ``python manage.py closepoll <poll_id>``."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:98
msgid ""
"The ``handle()`` method takes one or more ``poll_ids`` and sets "
"``poll.opened`` to ``False`` for each one. If the user referenced any "
"nonexistent polls, a :exc:`CommandError` is raised. The ``poll.opened`` "
"attribute does not exist in the :doc:`tutorial</intro/tutorial01>` and was "
"added to ``polls.models.Poll`` for this example."
msgstr "Cara ``handle()`` mengambil satu atau lebih ``poll_ids`` dan menyetel ``poll.opened`` menjadi ``False`` untuk stiap satu. Jika pengguna diberikan petunjuk jejak pendapat yang tidak ada, sebuah :exc:`CommandError` dimunculkan. Atribut ``poll.opened`` tidak ada dalam :doc:`tutorial</intro/tutorial01>` dan telah ditambahkan ke ``polls.models.Poll`` untuk contoh ini."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:107
msgid "Accepting optional arguments"
msgstr "Menerima argumen pilihan"

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:109
msgid ""
"The same ``closepoll`` could be easily modified to delete a given poll "
"instead of closing it by accepting additional command line options. These "
"custom options can be added in the :meth:`~BaseCommand.add_arguments` method"
" like this::"
msgstr "``closepoll`` yang sama dapat dengan mudah dirubah untuk menghapus jejak pendapat yang diberikan daripada menutupnya dengan menerima tambahan pilihan baris perintah. Penyesuaian pilihan ini dapat ditambahkan dalam cara :meth:`~BaseCommand.add_arguments` seperti ini::"

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:133
msgid ""
"Previously, only the standard :py:mod:`optparse` library was supported and "
"you would have to extend the command ``option_list`` variable with "
"``optparse.make_option()``."
msgstr "Sebelumnya, hanya pustaka :py:mod:`optparse` standar yang didukung dan anda harus memperpanjang perintah variabel ``option_list`` dengan ``optparse.make_option()``."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:137
msgid ""
"The option (``delete`` in our example) is available in the options dict "
"parameter of the handle method. See the :py:mod:`argparse` Python "
"documentation for more about ``add_argument`` usage."
msgstr "Pilihan (``delete`` dalam contoh kami) tersedia dalam pilihan parameter perintah dari cara penanganan. Lihat dokumentasi Python :py:mod:`argparse` untuk lebih tentang penggunaan ``add_argument``."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:141
msgid ""
"In addition to being able to add custom command line options, all "
":doc:`management commands</ref/django-admin>` can accept some default "
"options such as :option:`--verbosity` and :option:`--traceback`."
msgstr "Dalam tambahan untuk dapat menambahkan penyesuaian pilihan baris perintah, semua :doc:`pengelolaan perintah</ref/django-admin>` dapat menerima beberapa pilihan awal seperti :option:`--verbosity` dan :option:`--traceback`."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:148
msgid "Management commands and locales"
msgstr "Pengelolaan perintah dan lokal"

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:150
msgid ""
"By default, the :meth:`BaseCommand.execute` method deactivates translations "
"because some commands shipped with Django perform several tasks (for "
"example, user-facing content rendering and database population) that require"
" a project-neutral string language."
msgstr "Secara awal, cara :meth:`BaseCommand.execute` menonaktifkan terjemahan karena beberapa perintah dikemas dengan Django melakukan beberapa tugas (sebagai contoh, membangun isi pengguna muka dan mengumpulkan basisdata) yang membutuhkan bahasa deretan karakter proyek-netral."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:157
msgid ""
"In previous versions, Django forced the \"en-us\" locale instead of "
"deactivating translations."
msgstr "Dalam versi sebelumnya, Django memaksa lokal \"en-us\" daripada meniadakan terjemahan."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:160
msgid ""
"If, for some reason, your custom management command needs to use a fixed "
"locale, you should manually activate and deactivate it in your "
":meth:`~BaseCommand.handle` method using the functions provided by the I18N "
"support code::"
msgstr "Jika, untuk beberapa alasan, penyesuaian pengelolaan perintah anda butuh menggunakan lokal yang tetap, anda harus secara manual mengaktif dan menonaktifkannya dalam cara :meth:`~BaseCommand.handle` anda menggunakan fungsi disediakan oleh dukungan kode I18N::"

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:186
msgid ""
"Another need might be that your command simply should use the locale set in "
"settings and Django should be kept from deactivating it. You can achieve it "
"by using the :data:`BaseCommand.leave_locale_alone` option."
msgstr "Kebutuhan lainnya mungkin bahwa perintah anda dengan mudah harus menggunakan kumpulan lokal dalam pengaturan dan Django harus dijaga dari penonaktifannya. Anda dapat mencapainya dengan menggunakan pilihan :data:`BaseCommand.leave_locale_alone`."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:190
msgid ""
"When working on the scenarios described above though, take into account that"
" system management commands typically have to be very careful about running "
"in non-uniform locales, so you might need to:"
msgstr "Ketika bekerja pada skenario yang digambarkan diatas, perhatikan akun yang sistem pengelolaan perintah khususnya harus sangat waspada tentang berjalan dalam lokal yang tidak seragam, jadi anda mungkin butuh untuk:"

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:194
msgid ""
"Make sure the :setting:`USE_I18N` setting is always ``True`` when running "
"the command (this is a good example of the potential problems stemming from "
"a dynamic runtime environment that Django commands avoid offhand by "
"deactivating translations)."
msgstr "Pastikan pengaturan :setting:`USE_I18N` selalu ``True`` ketika menjalankan perintah (ini adalah contoh bagus dari potensial masalah berasal dari sebuah lingkungan waktu berjalan dinamis dimana perintah Django menghindari begitu saja dengan menonaktifkan terjemahan)."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:199
msgid ""
"Review the code of your command and the code it calls for behavioral "
"differences when locales are changed and evaluate its impact on predictable "
"behavior of your command."
msgstr "Tinjau kode dari perintah anda dan kode dipanggil untuk perbedaan perilaku ketika lokal dirubah dan dinilai dampaknya pada perkiraan kebiasaan dari perintah anda."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:204
#: ../../../../sources/1.9/docs/howto/static-files/index.txt:143
#: ../../../../sources/1.9/docs/howto/upgrade-version.txt:69
msgid "Testing"
msgstr "Pengujian"

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:206
msgid ""
"Information on how to test custom management commands can be found in the "
":ref:`testing docs <topics-testing-management-commands>`."
msgstr "Informasi pada bagaimana untuk mencoba penyesuaian pengelolaan perintah dapat ditemukan dalam :ref:`dokumen percobaan <topics-testing-management-commands>`."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:210
msgid "Command objects"
msgstr "Obyek perintah"

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:214
msgid "The base class from which all management commands ultimately derive."
msgstr "Kelas dasar dari mana semua pengelolaan perintah akhirnya berasal."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:216
msgid ""
"Use this class if you want access to all of the mechanisms which parse the "
"command-line arguments and work out what code to call in response; if you "
"don't need to change any of that behavior, consider using one of its "
":ref:`subclasses<ref-basecommand-subclasses>`."
msgstr "Gunakan kelas ini jika anda ingin mengakses semua mekanisme yang mengurai argumen baris perintah dan bekerja kode apa untuk dipanggil dalam tanggapan; jika anda tidak butuh merubah kebiasaan apapun, pertimbangkan menggunakan satu dari :ref:`subclasses<ref-basecommand-subclasses>` nya."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:221
msgid ""
"Subclassing the :class:`BaseCommand` class requires that you implement the "
":meth:`~BaseCommand.handle` method."
msgstr "Mensubkelaskan kelas :class:`BaseCommand` membutuhkan bahwa anda menerapkan cara :meth:`~BaseCommand.handle`."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:225
msgid "Attributes"
msgstr "Atribut"

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:227
msgid ""
"All attributes can be set in your derived class and can be used in "
":class:`BaseCommand`’s :ref:`subclasses<ref-basecommand-subclasses>`."
msgstr "Semua atribut dapat di setel dalam kelas turunan anda dan dapat digunakan dalam :ref:`subclasses<ref-basecommand-subclasses>` :class:`BaseCommand`."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:232
msgid ""
"A string listing the arguments accepted by the command, suitable for use in "
"help messages; e.g., a command which takes a list of application names might"
" set this to '<app_label app_label ...>'."
msgstr "Daftar deretan karakter argumen yang diterima oleh perintah, cocok untuk digunakan dalam pesan bantuan; sebagai contoh, sebuah perintah yang mengambil daftar nama aplikasi mungkin disetel ini menjadi '<app_label app_label ...>'."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:239
msgid ""
"This should be done now in the :meth:`~BaseCommand.add_arguments()` method, "
"by calling the ``parser.add_argument()`` method. See the ``closepoll`` "
"example above."
msgstr "Ini seharusnya selesai sekarang dalam cara :meth:`~BaseCommand.add_arguments()`, dengan memanggil cara ``parser.add_argument()``. Lihat coontoh ``closepoll`` diatas."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:245
msgid ""
"A boolean indicating whether the command needs to be able to import Django "
"settings; if ``True``, ``execute()`` will verify that this is possible "
"before proceeding. Default value is ``True``."
msgstr "Sebuah boolean menunjukkan apakah perintah butuh dapat mengimpor pengaturan Django; jika ``True``, ``execute()`` akan memeriksa bahwa ini dimungkinkan sebelum dilanjutkan. Nilai awal adalah ``True``."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:252
msgid ""
"A short description of the command, which will be printed in the help "
"message when the user runs the command ``python manage.py help <command>``."
msgstr "Deskripsi singkat dari perintah, dimana akan ditampilkan di pesan bantuan ketika pengguna eksekusi perintah ``python manage.py help <command>``."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:260
msgid ""
"If your command defines mandatory positional arguments, you can customize "
"the message error returned in the case of missing arguments. The default is "
"output by :py:mod:`argparse` (\"too few arguments\")."
msgstr "Jika perintah anda menentukan argumen penempatan wajib, anda dapat menyesuaiakan pesan kesalahan yang dikembalikan dalam kasus argumen yang hilang. Awalnya adalah keluaran oleh :py:mod:`argparse` (\"terlalu sedikit argumen\")."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:266
msgid ""
"This is the list of ``optparse`` options which will be fed into the "
"command's ``OptionParser`` for parsing arguments."
msgstr "Ini adalah daftar dari pilihan ``optparse`` yang akan diberi makan kedalam perintah ``OptionParser`` untuk mengurai argumen."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:271
msgid ""
"You should now override the :meth:`~BaseCommand.add_arguments` method to add"
" custom arguments accepted by your command. See :ref:`the example above "
"<custom-commands-options>`."
msgstr "Anda harus sekarang mengesampingkan cara :meth:`~BaseCommand.add_arguments` untuk menambahkan penyesuaian argumen yang diterima oleh perintah anda. Lihat :ref:`contoh diatas <custom-commands-options>`."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:277
msgid ""
"A boolean indicating whether the command outputs SQL statements; if "
"``True``, the output will automatically be wrapped with ``BEGIN;`` and "
"``COMMIT;``. Default value is ``False``."
msgstr "Sebuah boolean menunjukkan apakah perintah keluaran pernyataan SQL; jika ``True``, keluaran akan otomatis dibungkus dengan ``BEGIN;`` dan ``COMMIT;``. Nilai awal adalah ``False``."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:283
msgid ""
"A boolean; if ``True``, the entire Django project will be checked for "
"potential problems prior to executing the command. Default value is "
"``True``."
msgstr "Sebuah boolean; jika ``True``, seluruh proyek Django akan diperiksa untuk masalah potensial sebelum menjalankan perintah. Nilai awal adalah ``True``."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:288
msgid ""
"A boolean indicating whether the locale set in settings should be preserved "
"during the execution of the command instead of being forcibly set to 'en-"
"us'."
msgstr "Sebuah boolean menunjukkan apakah kumpulan lokal dalam pengaturan harus dipertahankan selama menjalankan dari program daripada dipaksa disetel menjadi 'en-us'."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:291
msgid "Default value is ``False``."
msgstr "Nilai awal adalah ``False``."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:293
msgid ""
"Make sure you know what you are doing if you decide to change the value of "
"this option in your custom command if it creates database content that is "
"locale-sensitive and such content shouldn't contain any translations (like "
"it happens e.g. with django.contrib.auth permissions) as making the locale "
"differ from the de facto default 'en-us' might cause unintended effects. "
"Seethe `Management commands and locales`_ section above for further details."
msgstr "Pastikan anda mengetahui apa yang anda sedang mengerjakan jika anda memutuskan nilai dari pilihan ini dalam penyesuaian perintah anda jika dia dibuat basisdata yang bersifat sensitif-lokal dan isi seperti itu tidak harus mengandung terjemahan apapun (seperti itu terjadi sebagai contoh dengan django.contrib.auth permissions) ketika membuat perbedaan lokal dari standar sebenarnya 'en-us' mungkin menyebabkan efek yang tidak diinginkan. Lihat bagian `Management commands and locales`_ diatas untuk lebih lanjut."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:301
msgid ""
"This option can't be ``False`` when the "
":data:`~BaseCommand.can_import_settings` option is set to ``False`` too "
"because attempting to set the locale needs access to settings. This "
"condition will generate a :exc:`CommandError`."
msgstr "Pilihan ini tidak dapat ``False`` ketika pilihan :data:`~BaseCommand.can_import_settings` disetel menjadi ``False`` juga karena mencoba menyetel lokal butuh akses ke pengaturan. Kondisi ini akan membangkitkan sebuah :exc:`CommandError`."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:308
msgid ""
"An instance attribute that helps create colored output when writing to "
"``stdout`` or ``stderr``. For example::"
msgstr "Sebuah atribut instance yang membantu membuat keluaran bewarna ketika menulis ke ``stdout`` atau ``stderr``. Sebagai contoh::"

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:313
msgid ""
"See :ref:`syntax-coloring` to learn how to modify the color palette and to "
"see the available styles (use uppercased versions of the \"roles\" described"
" in that section)."
msgstr "Lihat :ref:`syntax-coloring` untuk mempelajari bagaimana merubah papan warna dan melihat gaya tersedia (gunakan versi huruf besar dari \"roles\" yang digambarkan dalam bagian itu)."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:317
msgid ""
"If you pass the :option:`--no-color` option when running your command, all "
"``self.style()`` calls will return the original string uncolored."
msgstr "Jika anda melewati pilihan :option:`--no-color` ketika menjalankan perintah anda, semua pemanggilan ``self.style()`` akan mengembalikan deretan karakter asli tidak bewarna."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:321
msgid "Methods"
msgstr "Cara"

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:323
msgid ""
":class:`BaseCommand` has a few methods that can be overridden but only the "
":meth:`~BaseCommand.handle` method must be implemented."
msgstr ":class:`BaseCommand` mempunyai beberapa cara yang dapat dikesampingkan tetapi hanya cara :meth:`~BaseCommand.handle` harus diterapkan."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:326
msgid "Implementing a constructor in a subclass"
msgstr "Menerapkan constructor dalam subkelas"

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:328
msgid ""
"If you implement ``__init__`` in your subclass of :class:`BaseCommand`, you "
"must call :class:`BaseCommand`’s ``__init__``::"
msgstr "Jika anda menerapkan ``__init__`` dalam subkelas anda dari :class:`BaseCommand`, anda harus memanggil ``__init__`` dari :class:`BaseCommand::"

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:340
msgid ""
"Entry point to add parser arguments to handle command line arguments passed "
"to the command. Custom commands should override this method to add both "
"positional and optional arguments accepted by the command. Calling "
"``super()`` is not needed when directly subclassing ``BaseCommand``."
msgstr "Titik masukan untuk menambahkan pengurai argumen untuk menangani argumen baris perintah dilewati ke perintah. Penyesuaian perintah harus mengesampingkan cara ini untuk menambah kedua argumen penempatan dan pilihan yang diterima oleh perintah. Memanggil ``super()`` tidak dibutuhkan ketika pengsubkelasan secara langsung ``BaseCommand``."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:347
msgid ""
"Returns the Django version, which should be correct for all built-in Django "
"commands. User-supplied commands can override this method to return their "
"own version."
msgstr "Mengembalikan versi Django, yang seharusnya benar untuk semua perintah Django siap pakai. Perintah pasokan-pengguna dapat mengesampingkan cara ini untuk mengembalikan versi mereka sendiri."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:353
msgid ""
"Tries to execute this command, performing system checks if needed (as "
"controlled by the :attr:`requires_system_checks` attribute). If the command "
"raises a :exc:`CommandError`, it's intercepted and printed to stderr."
msgstr "Coba untuk menjalankan perintah ini, melakukan pemeriksaan sistem jika dibutuhkan (sebagai pengendalian oleh :attr:`requires_system_checks` attribute). Jika perintah muncul sebuah :exc:`CommandError`, Dia dicegat dan dicetak ke stderr."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:357
msgid "Calling a management command in your code"
msgstr "Memanggil perintah pengelolaan di kode anda"

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:359
msgid ""
"``execute()`` should not be called directly from your code to execute a "
"command. Use :func:`~django.core.management.call_command` instead."
msgstr "``execute()`` jangan dipanggil secara langsung dari kode anda untuk menjalankan sebuah perintah. Lebih baik gunakan :func:`~django.core.management.call_command`."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:364
msgid ""
"The actual logic of the command. Subclasses must implement this method."
msgstr "Logika sebenarnya dari perintah. Subkelas harus menerapkan cara ini."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:366
msgid ""
"It may return a Unicode string which will be printed to ``stdout`` (wrapped "
"by ``BEGIN;`` and ``COMMIT;`` if :attr:`output_transaction` is ``True``)."
msgstr "Dia mungkin mengembalikan sebuah deretan karakter Unicode yang akan dicetak ke ``stdout`` (dibungkus oleh ``BEGIN;`` dan ``COMMIT;`` jika :attr:`output_transaction` adalah ``True``)."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:371
msgid ""
"Uses the system check framework to inspect the entire Django project for "
"potential problems. Serious problems are raised as a :exc:`CommandError`; "
"warnings are output to stderr; minor notifications are output to stdout."
msgstr "Gunakan kerangka pemeriksaan sistem untuk memeriksa keseluruhan proyek Django untuk masalah potensial. Masalah serius muncul seperti sebuah :exc:`CommandError`; peringatan dikeluarkan ke stderr; pemberitahuan kecil dikeluarkan pada stdout."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:375
msgid ""
"If ``app_configs`` and ``tags`` are both ``None``, all system checks are "
"performed. ``tags`` can be a list of check tags, like ``compatibility`` or "
"``models``."
msgstr "Jika ``app_configs`` dan ``tags`` keduanya ``None``, semua pemeriksaan sistem dilakukan. ``tags`` dapat menjadi daftar dari etiket pemeriksaan, seperti ``compatibility`` atau ``models``. "

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:382
msgid "``BaseCommand`` subclasses"
msgstr "Subkelas ``BaseCommand``"

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:386
msgid ""
"A management command which takes one or more installed application labels as"
" arguments, and does something with each of them."
msgstr "Sebuah pengelolaan perintah yang mengambil satu atau lebih label aplikasi terpasang sebagai argumen, dan melakukan sesuatu dengan masing-masing dari mereka."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:389
msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~AppCommand.handle_app_config`, which will be called once "
"for each application."
msgstr "Daripada menerapkan :meth:`~BaseCommand.handle`,  subkelas harus menerapkan :meth:`~AppCommand.handle_app_config`, yang akan dipanggil sekali untuk setiap aplikasi."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:395
msgid ""
"Perform the command's actions for ``app_config``, which will be an "
":class:`~django.apps.AppConfig` instance corresponding to an application "
"label given on the command line."
msgstr "Melakukan tindakan perintah untuk ``app_config``, yang akan menjadi sebuah instance :class:`~django.apps.AppConfig` terhubung ke sebuah label aplikasi yang diberikan pada baris perintah."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:401
msgid ""
"A management command which takes one or more arbitrary arguments (labels) on"
" the command line, and does something with each of them."
msgstr "Sebuah pengelolaan perintah yang mengambil satu atau lebih argumen (label) yang berubah-ubah pada baris perintah, dan melakukan sesuatu dengan masing-masing dari mereka."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:404
msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~LabelCommand.handle_label`, which will be called once for "
"each label."
msgstr "Daripada menerapkan :meth:`~BaseCommand.handle`,  subkelas harus menerapkan :meth:`~LabelCommand.handle_label`, yang akan dipanggil sekali untuk setiap label."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:409
msgid ""
"Perform the command's actions for ``label``, which will be the string as "
"given on the command line."
msgstr "Melakukan tindakan perintah untuk ``label``, yang akan menjadi deretan karakter seperti yang diberikan pada baris perintah."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:416
msgid "Use :class:`BaseCommand` instead, which takes no arguments by default."
msgstr "Gunakan :class:`BaseCommand`, yang tidak mengambil argumen secara awal."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:418
msgid "A command which takes no arguments on the command line."
msgstr "Sebuah perintah yang tidak mengambil argumen dalam baris perintah."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:420
msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~NoArgsCommand.handle_noargs`; :meth:`~BaseCommand.handle` "
"itself is overridden to ensure no arguments are passed to the command."
msgstr "Daripada menerapkan :meth:`~BaseCommand.handle`,  subkelas harus menerapkan :meth:`~NoArgsCommand.handle_noargs`; :meth:`~BaseCommand.handle` itu sendiri dikesampingkan untuk memastikan tidak ada argumen dilewatkan ke perintah."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:426
msgid "Perform this command's actions"
msgstr "Melakukan tindakan perintah ini"

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:429
msgid "Command exceptions"
msgstr "Perintah pengecualian"

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:433
msgid ""
"Exception class indicating a problem while executing a management command."
msgstr "Kelas pengecualian mengindikasikan sebuah masalah selama menjalankan perintah pengelolaan."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:435
msgid ""
"If this exception is raised during the execution of a management command "
"from a command line console, it will be caught and turned into a nicely-"
"printed error message to the appropriate output stream (i.e., stderr); as a "
"result, raising this exception (with a sensible description of the error) is"
" the preferred way to indicate that something has gone wrong in the "
"execution of a command."
msgstr "Jika pengecualian ini muncul selama peerjalanan dari pengelolaan perintah dari sebuah perintah baris tempat tuts, dia akan ditangkap dan dirubah menjadi pesan kesalahan tercetak yang bagus ke aliran keluaran yang sesuai (yaitu, stderr); sebagai sebuah hasil, memunculkan pengecualian ini (dengan sebuah gambaran yang mudah dimengerti dari kesalahan) adalah jalan yang dipilih untuk menunjukkan bahwa sesuatu telah salah dalam menjalankan sebuah perintah."

#: ../../../../sources/1.9/docs/howto/custom-management-commands.txt:441
msgid ""
"If a management command is called from code through "
":func:`~django.core.management.call_command`, it's up to you to catch the "
"exception when needed."
msgstr "Jika sebuah pengelolaan perintah dipanggil dari kode melalui :func:`~django.core.management.call_command`, itu terserah kamu untuk menangkap pengecualian ketika dibutuhkan."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:3
msgid "Writing custom model fields"
msgstr "Menulis bidang model penyesuaian"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:8
msgid "Introduction"
msgstr "Kata Pengantar"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:10
msgid ""
"The :doc:`model reference </topics/db/models>` documentation explains how to"
" use Django's standard field classes -- "
":class:`~django.db.models.CharField`, :class:`~django.db.models.DateField`, "
"etc. For many purposes, those classes are all you'll need. Sometimes, "
"though, the Django version won't meet your precise requirements, or you'll "
"want to use a field that is entirely different from those shipped with "
"Django."
msgstr "Dokumentasi :doc:`model acuan</topics/db/models>` menjelaskan bagaimana menggunakan kelas-kelas bidang standar Django -- :class:`~django.db.models.CharField`, :class:`~django.db.models.DateField`, dll. Untuk banyak tujuan, kelas-kelas tersebut adalah yang anda akan butuhkan. Terkadang, meskipun, versi DJango tidak akan bertemu persyaratan tepat anda, atau anda akan menggunakan sebuah bidang yang seluruhnya berbeda dari yang dikemas dengan Django."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:17
msgid ""
"Django's built-in field types don't cover every possible database column "
"type -- only the common types, such as ``VARCHAR`` and ``INTEGER``. For more"
" obscure column types, such as geographic polygons or even user-created "
"types such as `PostgreSQL custom types`_, you can define your own Django "
"``Field`` subclasses."
msgstr "Jenis bidang siap pakai Django tidak mencangkup setiap jenis kolom basisdata yang mungkin -- hanya jenis umum, seperti ``VARCHAR`` dan ``INTEGER``. Untuk lebih mengaburkan jenis kolom, seperti poligon geografis atau bahkan jenis dibuat-pengguna seperti `PostgreSQL custom types`_, anda dapat menentukan subkelas-subkelas ``Field`` Django and sendiri."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:24
msgid ""
"Alternatively, you may have a complex Python object that can somehow be "
"serialized to fit into a standard database column type. This is another case"
" where a ``Field`` subclass will help you use your object with your models."
msgstr "Jalan lain, anda mungkin mempunyai obyek Python rumit yang dapat entah bagaimana disambungkan untuk cocok kedalam jenis kolom basisdata standar. Ini adalah kasus lain dimana sebuah subkelas ``Field`` akan membantu anda menggunakan obyek anda dengan model anda."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:29
msgid "Our example object"
msgstr "Obyek contoh kami"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:31
msgid ""
"Creating custom fields requires a bit of attention to detail. To make things"
" easier to follow, we'll use a consistent example throughout this document: "
"wrapping a Python object representing the deal of cards in a hand of "
"Bridge_. Don't worry, you don't have to know how to play Bridge to follow "
"this example. You only need to know that 52 cards are dealt out equally to "
"four players, who are traditionally called *north*, *east*, *south* and "
"*west*.  Our class looks something like this::"
msgstr "Membuat penyesuaian bidang membuatuhkan sedikit perhatian ke rincian. Untuk membuat hal-hal lebih mudah utnuk diikuti, kami akan menggunakan contoh tetap melalui dokumen ini: membungkus sebuah obyek Python mewakili persetujuan dari kartu-kartu dalam sebuah tangan dari Bridge_. Jangan khawatir, anda tidak perlu mengetahui bagaimana bermain Bridge untuk mengikuti contoh ini. Anda hanya perlu mengetahui bahwa 52 kartu dibagikan sama ke empat pemain, yang secara tradisional dipanggil *utara*, *timur*, *selatan* dan *barat*. Kelas kami kelihatan seperti ini::"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:53
msgid ""
"This is just an ordinary Python class, with nothing Django-specific about "
"it. We'd like to be able to do things like this in our models (we assume the"
" ``hand`` attribute on the model is an instance of ``Hand``)::"
msgstr "Ini hanyalah kelas Python asli, dengan tidak ada spesifik-Django tentangnya. Kami akan dapat melakukan hal-hal seperti ini dalam model kami (kami menganggap atribut ``hand`` pada model adalah sebuah instance dari ``Hand``)::"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:64
msgid ""
"We assign to and retrieve from the ``hand`` attribute in our model just like"
" any other Python class. The trick is to tell Django how to handle saving "
"and loading such an object."
msgstr "Kami memberikan dan mengambil dari atribut ``hand`` dalam model kami seperti kelas Python lainnya. Tipuannya adalah mengatakan Django bagaimana menangani penyimpanan dan memuat sebuah obyek seperti itu."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:68
msgid ""
"In order to use the ``Hand`` class in our models, we **do not** have to "
"change this class at all. This is ideal, because it means you can easily "
"write model support for existing classes where you cannot change the source "
"code."
msgstr "Agar menggunakan kelas ``Hand`` di model kami, kami **tidak** harus merubah kelas ini sama sekali. Ini adalah cocok, karena dia berarti anda dapat  dengan mudah menulis model mendukung kelas-kelas yang ada dimana anda tidak dapat merubah sumber kode."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:73
msgid ""
"You might only be wanting to take advantage of custom database column types "
"and deal with the data as standard Python types in your models; strings, or "
"floats, for example. This case is similar to our ``Hand`` example and we'll "
"note any differences as we go along."
msgstr "Anda mungkin hanya menginginkan untuk mengambil keuntungan dari penyesuaian jenis kolom basisdata dan berhubungan dengan data sebagai jenis Python standar dalam model anda; string, atau float, sebagai contoh. Kasus ini mirip pada contoh ``hand`` kami dan kami akan mencatat perbedaan ketika kita pergi bersama."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:79
msgid "Background theory"
msgstr "Latar belakang teori"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:82
msgid "Database storage"
msgstr "Penyimpanan basisdata"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:84
msgid ""
"The simplest way to think of a model field is that it provides a way to take"
" a normal Python object -- string, boolean, ``datetime``, or something more "
"complex like ``Hand`` -- and convert it to and from a format that is useful "
"when dealing with the database (and serialization, but, as we'll see later, "
"that falls out fairly naturally once you have the database side under "
"control)."
msgstr "Jalan paling sederhana memikirkan sebuah bidang model adalah dia menyediakan sebuah jalan untuk mengambil sebuah obyek Pyton biasa -- string, boolean, ``datetime``, atau sesuatu lebih rumit seperti ``Hand`` -- dan merubahnya ke dan dari sebuah bentuk yang berguna ketika berhubungan dengan basisdata (dan penyambungan, tetapi, seperti yang akan kita lihat nanti, yang jatuh keluar secara alami sekali anda mempunyai sisi basisdata dibawah kendali)."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:90
msgid ""
"Fields in a model must somehow be converted to fit into an existing database"
" column type. Different databases provide different sets of valid column "
"types, but the rule is still the same: those are the only types you have to "
"work with. Anything you want to store in the database must fit into one of "
"those types."
msgstr "Bidang dalam sebuah model harus bagaimanapun dipindahkan untuk cocok kedalam jenis kolom basisdata yang ada. Basisdata yang berbeda menyediakan kumpulan berbeda dari jenis kolom sah, tetapi aturan masih sama: yaitu hanya jenis anda harus bekerja dengannya. Apapun anda ingin simpan dalam basisdata harus cocok kedalam satu dari jenis itu."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:96
msgid ""
"Normally, you're either writing a Django field to match a particular "
"database column type, or there's a fairly straightforward way to convert "
"your data to, say, a string."
msgstr "Biasanya, anda antara menulis sebuah bidang Django untuk mencocokkan jenis kolom basisdata tertentu, atau ada jalan cukup mudah untuk merubah data anda menjadi, katakan, sebuah deretan karakter."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:100
msgid ""
"For our ``Hand`` example, we could convert the card data to a string of 104 "
"characters by concatenating all the cards together in a pre-determined order"
" -- say, all the *north* cards first, then the *east*, *south* and *west* "
"cards. So ``Hand`` objects can be saved to text or character columns in the "
"database."
msgstr "Untuk contoh ``Hand`` kami, kami dapat merubah kartu data menjadi deretan karakter dari 104 karakter dengan menambah semua kartu bersama-sama dalam yang telah ditetapkan sebelumnya -- katakan, semua kartu *utara* dahulu, kemudian kartu *timur*, *selatan* dan *barat*. Hadi obyek ``Hand`` dapt disimpan ke kolom teks atau karakter dalam basisdata."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:106
msgid "What does a field class do?"
msgstr "Apakah yang kelas bidang lakukan?"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:108
msgid ""
"All of Django's fields (and when we say *fields* in this document, we always"
" mean model fields and not :doc:`form fields </ref/forms/fields>`) are "
"subclasses of :class:`django.db.models.Field`. Most of the information that "
"Django records about a field is common to all fields -- name, help text, "
"uniqueness and so forth. Storing all that information is handled by "
"``Field``. We'll get into the precise details of what ``Field`` can do later"
" on; for now, suffice it to say that everything descends from ``Field`` and "
"then customizes key pieces of the class behavior."
msgstr "Semua bidang Django (dan ketika kami katakan *bidang* dalam dokumen ini, kami selalu berarti bidang model dan bukan :doc:`bidang formulir </ref/forms/fields>`) adalah subkelas dari :class:`django.db.models.Field`. Kebanyakan informasi yang Django rekam mengenai sebuah bidang adalah umum bagi semua teman -- nama, bantuan, teks, keunikan dan sebagainya. Menyimpan semua informasi itu yang ditangani oleh ``Field``. Kami akan memasuki rincian tepat dari ``Field`` apa yang dapat dilakukan kemudian; untuk sekarang, cukuplah untuk mengatakan bahwa segala sesuatu turun dari ``Field`` dan kemudian menyesuaian potongan kunci dari kebiasaan kelas."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:117
msgid ""
"It's important to realize that a Django field class is not what is stored in"
" your model attributes. The model attributes contain normal Python objects. "
"The field classes you define in a model are actually stored in the ``Meta`` "
"class when the model class is created (the precise details of how this is "
"done are unimportant here). This is because the field classes aren't "
"necessary when you're just creating and modifying attributes. Instead, they "
"provide the machinery for converting between the attribute value and what is"
" stored in the database or sent to the :doc:`serializer "
"</topics/serialization>`."
msgstr "Adalah penting untuk menyadari bahwa sebuah kelas bidang Django bukan apa yang disimpan dalam atribut model anda. Pengaturan model mengandung obyek Python biasa. Kelas-kelas bidang yang anda tentukan dalam sebuah model sebenarnya disimpan dalam kelas ``Meta`` ketika kelas model dibuat (rincian tepatnya bagaimana ini dilakukan adalah tidak penting disini). Ini karena kelas-kelas bidang tidak perlu ketika anda hanya membuat dan merubah atribut. Sebagai gantinya, mereka menyediakan mesin-mesin untuk merubah diantara nilai atribut dan apa yang disimpan dalam basisdata atau dikirim ke :doc:`serializer </topics/serialization>`."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:126
msgid ""
"Keep this in mind when creating your own custom fields. The Django ``Field``"
" subclass you write provides the machinery for converting between your "
"Python instances and the database/serializer values in various ways (there "
"are differences between storing a value and using a value for lookups, for "
"example). If this sounds a bit tricky, don't worry -- it will become clearer"
" in the examples below. Just remember that you will often end up creating "
"two classes when you want a custom field:"
msgstr "Ingatlah ini ketika membuat penyesuaian bidang sendiri. Subkelas ``Field`` Django anda tulis menyediakan mesin-mesin untuk merubah diantara instance Python anda dan nilai database/serializer dalam beragam cara (ada perbedaan diantara menyimpan sebuah nilai dan menggunakan sebuah nilai untuk pencarian, sebagai contoh). Jika ini terdengar sedikit rumit, jangan khawatir -- dia akan menjadi lebih jelas dalam contoh dibawah ini. Ingatlah bahwa anda akan sering membuat dua kelas ketika anda ingin penyesuaian bidang:"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:134
msgid ""
"The first class is the Python object that your users will manipulate. They "
"will assign it to the model attribute, they will read from it for displaying"
" purposes, things like that. This is the ``Hand`` class in our example."
msgstr "Kelas pertama adalah obyek Python dimana pengguna anda akan merubah. Mereka akan menetapkannya ke atribut model, mereka akan membaca darinya untuk menampilkan tujuan, hal-hal seperti itu. ini adalah kelas ``hand`` dalam contoh kami."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:139
msgid ""
"The second class is the ``Field`` subclass. This is the class that knows how"
" to convert your first class back and forth between its permanent storage "
"form and the Python form."
msgstr "Kelas kedua adalah subkelas ``Field``. Ini adalah kelas yang diketahui bagaimana merubah kelas pertama anda ke belakang dan seterusnya diantara bentuk penyimpanan tetap dan bentuk Python."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:144
msgid "Writing a field subclass"
msgstr "Menulis sebuah subkelas bidang"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:146
msgid ""
"When planning your :class:`~django.db.models.Field` subclass, first give "
"some thought to which existing :class:`~django.db.models.Field` class your "
"new field is most similar to. Can you subclass an existing Django field and "
"save yourself some work? If not, you should subclass the "
":class:`~django.db.models.Field` class, from which everything is descended."
msgstr "Ketika merencanakan subkelas :class:`~django.db.models.Field` anda, pertama berikan beberapa diduga yang mana ada kelas :class:`~django.db.models.Field` bidang baru anda yang paling mirip. Dapatkah anda mensubkelaskan bidang Django yang ada dan menyimpan diri anda beberapa pekerjaan? Jika tidak, anda harus mensubkelaskan kelas :class:`~django.db.models.Field`, yang semuanya turun."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:152
msgid ""
"Initializing your new field is a matter of separating out any arguments that"
" are specific to your case from the common arguments and passing the latter "
"to the ``__init__()`` method of :class:`~django.db.models.Field` (or your "
"parent class)."
msgstr "Inisialisasi bidang baru anda adalah sebuah masalah dari memisahkan argumen apapun yang khusus pada kasus anda dari argumen umum dan melewatkannya ke cara `__init__()`` dari :class:`~django.db.models.Field` (atau kelas induk anda)."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:157
msgid ""
"In our example, we'll call our field ``HandField``. (It's a good idea to "
"call your :class:`~django.db.models.Field` subclass ``<Something>Field``, so"
" it's easily identifiable as a :class:`~django.db.models.Field` subclass.) "
"It doesn't behave like any existing field, so we'll subclass directly from "
":class:`~django.db.models.Field`::"
msgstr "Dalam contoh kami, kami akan memanggil bidang ``HandField``. (Adalah ide bagus untuk memanggil subkelas :class:`~django.db.models.Field` anda ``<Something>Field``, sehingga sangat mudah dicirikan sebagai sebuah subkelas :class:`~django.db.models.Field`.) Dia tidak berperilaku seperti bidang lainnya yang ada, jadi kami akan mensubkelaskan secara langsung dari :class:`~django.db.models.Field`::"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:173
msgid ""
"Our ``HandField`` accepts most of the standard field options (see the list "
"below), but we ensure it has a fixed length, since it only needs to hold 52 "
"card values plus their suits; 104 characters in total."
msgstr "``HandField`` kami menerima kebanyakan pilihan bidang standar (lihat daftar dibawah ini), tetapi kami memastikan dia mempunyai panjang tetap, sejak dia hanya butuh menampung 52 nilai kartu ditambah pasangan mereka; 104 karakter jumlahnya."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:179
msgid ""
"Many of Django's model fields accept options that they don't do anything "
"with. For example, you can pass both "
":attr:`~django.db.models.Field.editable` and "
":attr:`~django.db.models.DateField.auto_now` to a "
":class:`django.db.models.DateField` and it will simply ignore the "
":attr:`~django.db.models.Field.editable` parameter "
"(:attr:`~django.db.models.DateField.auto_now` being set implies "
"``editable=False``). No error is raised in this case."
msgstr "Banyak bidang model Django menerima pilihan dimana mereka tidak melakukan apapun. Sebagai contoh, anda dapat melewatkan kedua :attr:`~django.db.models.Field.editable` dan :attr:`~django.db.models.DateField.auto_now` ke a :class:`django.db.models.DateField` dan dia dengan mudah mengabaikan parameter :attr:`~django.db.models.Field.editable` (:attr:`~django.db.models.DateField.auto_now` menjadi disiratkan ``editable=False``). Tidak ada kesalahan dimunculkan dalam kasus ini."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:188
msgid ""
"This behavior simplifies the field classes, because they don't need to check"
" for options that aren't necessary. They just pass all the options to the "
"parent class and then don't use them later on. It's up to you whether you "
"want your fields to be more strict about the options they select, or to use "
"the simpler, more permissive behavior of the current fields."
msgstr "Kebiasaan ini menyederhanakan kelas-kelas bidang, karena mereka tidak butuh memeriksa untuk pilihan yang tidak dibutuhkan. Mereka hanya melewatkan semua pilihan ke kelas induk dan kemudian tidak menggunakan mereka kemudian. Itu terserah anda apakah anda ingin bidang anda lebih tegas tentang pilihan mereka pilih, atau menggunakan lebih sederhana, kebiasaan yang tidak wajib dari bidang saat ini."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:194
msgid "The ``Field.__init__()`` method takes the following parameters:"
msgstr "Cara ``Field.__init__()`` mengambil parameter berikut:"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:196
msgid ":attr:`~django.db.models.Field.verbose_name`"
msgstr ":attr:`~django.db.models.Field.verbose_name`"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:197
msgid "``name``"
msgstr "``nama``"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:198
msgid ":attr:`~django.db.models.Field.primary_key`"
msgstr ":attr:`~django.db.models.Field.primary_key`"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:199
msgid ":attr:`~django.db.models.CharField.max_length`"
msgstr ":attr:`~django.db.models.CharField.max_length`"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:200
msgid ":attr:`~django.db.models.Field.unique`"
msgstr ":attr:`~django.db.models.Field.unique`"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:201
msgid ":attr:`~django.db.models.Field.blank`"
msgstr ":attr:`~django.db.models.Field.blank`"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:202
msgid ":attr:`~django.db.models.Field.null`"
msgstr ":attr:`~django.db.models.Field.null`"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:203
msgid ":attr:`~django.db.models.Field.db_index`"
msgstr ":attr:`~django.db.models.Field.db_index`"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:204
msgid ""
"``rel``: Used for related fields (like :class:`ForeignKey`). For advanced "
"use only."
msgstr "``rel``: Digunakan untuk bidang terkait (seperti :class:`ForeignKey`). Hanya untuk penggunaan lanjut."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:206
msgid ":attr:`~django.db.models.Field.default`"
msgstr "attr:`~django.db.models.Field.default`"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:207
msgid ":attr:`~django.db.models.Field.editable`"
msgstr ":attr:`~django.db.models.Field.editable`"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:208
msgid ""
"``serialize``: If ``False``, the field will not be serialized when the model"
" is passed to Django's :doc:`serializers </topics/serialization>`. Defaults "
"to ``True``."
msgstr "``serialize``: Jika ``False``, bidang tidak akan didisambungkan ketika model dilewatkan ke :doc:`serializers </topics/serialization>` Django. Nilai awal ke ``True``."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:211
msgid ":attr:`~django.db.models.Field.unique_for_date`"
msgstr ":attr:`~django.db.models.Field.unique_for_date`"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:212
msgid ":attr:`~django.db.models.Field.unique_for_month`"
msgstr ":attr:`~django.db.models.Field.unique_for_month`"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:213
msgid ":attr:`~django.db.models.Field.unique_for_year`"
msgstr ":attr:`~django.db.models.Field.unique_for_year`"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:214
msgid ":attr:`~django.db.models.Field.choices`"
msgstr ":attr:`~django.db.models.Field.choices`"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:215
msgid ":attr:`~django.db.models.Field.help_text`"
msgstr ":attr:`~django.db.models.Field.help_text`"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:216
msgid ":attr:`~django.db.models.Field.db_column`"
msgstr ":attr:`~django.db.models.Field.db_column`"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:217
msgid ""
":attr:`~django.db.models.Field.db_tablespace`: Only for index creation, if "
"the backend supports :doc:`tablespaces </topics/db/tablespaces>`. You can "
"usually ignore this option."
msgstr ":attr:`~django.db.models.Field.db_tablespace`: hanya untuk pembuatan indeks, jika dukungan backend :doc:`tablespaces </topics/db/tablespaces>`. Anda dapat biasanya mengabaikan pilihan ini."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:220
msgid ""
":attr:`~django.db.models.Field.auto_created`: ``True`` if the field was "
"automatically created, as for the :class:`~django.db.models.OneToOneField` "
"used by model inheritance. For advanced use only."
msgstr ":attr:`~django.db.models.Field.auto_created`: ``True`` jika bidang otomatis telah dibuat, adapun :class:`~django.db.models.OneToOneField` digunakan oleh warisan model. Untuk penggunaan hanya tingkat lanjut."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:224
msgid ""
"All of the options without an explanation in the above list have the same "
"meaning they do for normal Django fields. See the :doc:`field documentation "
"</ref/models/fields>` for examples and details."
msgstr "Semua pilihan tanpa sebuah penjelasan dalam daftar diatas mempunyai arti yang sama mereka lakukan untuk bidang Django biasa. Lihat :doc:`field documentation </ref/models/fields>` untuk contoh dan rincian."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:231
msgid "Field deconstruction"
msgstr "Membongkar bidang"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:233
msgid ""
"The counterpoint to writing your ``__init__()`` method is writing the "
"``deconstruct()`` method. This method tells Django how to take an instance "
"of your new field and reduce it to a serialized form - in particular, what "
"arguments to pass to ``__init__()`` to re-create it."
msgstr "Kontrapung untuk menulis cara ``__init__()`` anda adalah menulis cara ``deconstruct()``. Cara ini mengatakan Django bagaimana mengambil instance dari bidang baru anda dan menguranginya untuk sebuah formulir yang disambungkan - khususnya, argumen apa utnuk dilewatkan ke ``__init__()`` untuk membuatnya kembali."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:238
msgid ""
"If you haven't added any extra options on top of the field you inherited "
"from, then there's no need to write a new ``deconstruct()`` method. If, "
"however, you're changing the arguments passed in ``__init__()`` (like we are"
" in ``HandField``), you'll need to supplement the values being passed."
msgstr "Jika anda belum menambahkan pilihan tambahan pada bagian atas bidang anda warisi, lalu tidak perlu untuk menulis cara ``deconstruct()`` baru. Jika, bagaimanapun, anda sedang merubah argumen dilewati dalam ``__init__()`` (seperti kami dalam ``HandField``), anda akan butuh tambahan nilai yang sedang dilewati."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:243
msgid ""
"The contract of ``deconstruct()`` is simple; it returns a tuple of four "
"items: the field's attribute name, the full import path of the field class, "
"the positional arguments (as a list), and the keyword arguments (as a dict)."
" Note this is different from the ``deconstruct()`` method :ref:`for custom "
"classes <custom-deconstruct-method>` which returns a tuple of three things."
msgstr "Kontrak dari ``deconstruct()`` adalah sederhana; dia mengembalikan sebuah tuple dari empat barang: nama atribut bidang, jalur impor penuh dari kelas bidang, penempatan argumen (sebagai sebuah daftar), dan argumen kata kunci (sebagai pendiktean). Catat bahwa ini berbeda dari cara ``deconstruct()`` :ref:`for custom classes <custom-deconstruct-method>` yang mengembalikan sebuah tuple dari tiga hal."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:249
msgid ""
"As a custom field author, you don't need to care about the first two values;"
" the base ``Field`` class has all the code to work out the field's attribute"
" name and import path. You do, however, have to care about the positional "
"and keyword arguments, as these are likely the things you are changing."
msgstr "Sebagai sebuah penyesuaian bidang penulis, anda tidak perlu memperhatikan tentang dua nilai pertama; kelas ``Field`` dasar mempunyai semua kode untuk bekerja nama atribut bidang dan mengimpor jalur. Anda, bagaimanapun, harus memperhatikan tentang penempatan dan katakunci argumen, seperti ini mirip hal-hal anda sedang rubah."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:254
msgid ""
"For example, in our ``HandField`` class we're always forcibly setting "
"max_length in ``__init__()``. The ``deconstruct()`` method on the base "
"``Field`` class will see this and try to return it in the keyword arguments;"
" thus, we can drop it from the keyword arguments for readability::"
msgstr "Sebagai contoh, dalam kelas ``HandField`` kami selalu memaksa menyetel max_length dalam ``__init__()``. Cara ``deconstruct()`` dalam basis kelas ``Field`` akan melihat ini dan mencoba mengembalikannya dalam argumen katakunci; demikian, kami dapat membuangnya dari argumen katakunci untuk kesiapan::"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:272
msgid ""
"If you add a new keyword argument, you need to write code to put its value "
"into ``kwargs`` yourself::"
msgstr "Jika anda menambahkan argumen kata kunci, anda perlu menuliskan sendiri kode untuk menambahkan nilai ke ``kwargs`` ::"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:291
msgid ""
"More complex examples are beyond the scope of this document, but remember - "
"for any configuration of your Field instance, ``deconstruct()`` must return "
"arguments that you can pass to ``__init__`` to reconstruct that state."
msgstr "Contoh lebih rumit diluar cakupan dari dokumen ini, tetapi ingat - untuk konfigurasi apapun dari instance Field anda, ``deconstruct()`` harus mengembalikan argumen yang anda dapat lewati ke ``__init__`` untuk membangun kembali keadaan tersebut."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:295
msgid ""
"Pay extra attention if you set new default values for arguments in the "
"``Field`` superclass; you want to make sure they're always included, rather "
"than disappearing if they take on the old default value."
msgstr "Beri perhatian lebih jika anda menyetel nilai baru awal untuk argumen dalam super kelas ``Field``; anda ingin memastikan mereka selalu disertakan, daripada  menghilang jika mereka mengambil nilai awal lama."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:299
msgid ""
"In addition, try to avoid returning values as positional arguments; where "
"possible, return values as keyword arguments for maximum future "
"compatibility. Of course, if you change the names of things more often than "
"their position in the constructor's argument list, you might prefer "
"positional, but bear in mind that people will be reconstructing your field "
"from the serialized version for quite a while (possibly years), depending "
"how long your migrations live for."
msgstr "Dalam tambahan, coba untuk menghindari nilai kembalian sebagai argumen penempatan; jika memungkinkan, kembalikan nilai sebagai argumen katakunci untuk kesesuaian masa depan maksimal. Tentu saja, jika anda merubah nama dari hal-hal sering daripada penempatan mereka dalam daftar argumen pembangun, anda mungkin memilih penempatan, tetapi ingatlah bahwa orang akan membangun kembali bidang ada dari versi bersambung untuk sejenak (mungkin tahunan), tergantung berapa lama perpindahan langsung anda."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:306
msgid ""
"You can see the results of deconstruction by looking in migrations that "
"include the field, and you can test deconstruction in unit tests by just "
"deconstructing and reconstructing the field::"
msgstr "Anda dapat melihat hasil dari membongkar dengan mencari dalam perpindahan yang menyertakan bidang, dan anda dapat menguji pembongkaran dalam satuan percobaan dengan hanya membongkar dan membangun kembali bidang."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:315
msgid "Documenting your custom field"
msgstr "Mendokumentasikan bidang penyesuaian anda"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:317
msgid ""
"As always, you should document your field type, so users will know what it "
"is. In addition to providing a docstring for it, which is useful for "
"developers, you can also allow users of the admin app to see a short "
"description of the field type via the :doc:`django.contrib.admindocs "
"</ref/contrib/admin/admindocs>` application. To do this simply provide "
"descriptive text in a :attr:`~Field.description` class attribute of your "
"custom field. In the above example, the description displayed by the "
"``admindocs`` application for a ``HandField`` will be 'A hand of cards "
"(bridge style)'."
msgstr "Seperti biasa, anda harus mendokumentasikan jenis bidang anda, sehingga pengguna akan mengetahui apa itu. Dalam tambahan untuk menyediakan docstring untuknya, mana yang berguna untuk pengembang, anda dapat juga mengizinkan aplikasi admin untuk melihat gambaran pendek dari jenis bidang melalui aplikasi :doc:`django.contrib.admindocs </ref/contrib/admin/admindocs>`. Untuk melakukan ini cukup menyediakan gambaran teks dalam sebuah atribut kelas :attr:`~Field.description` dari bidang penyesuaian anda. Dalam contoh diatas, gambaran ditampilkan oleh aplikasi ``admindocs`` untuk sebuah ``HandField`` akan menjadi 'Sebuah tangan dari kartu (gaya bridge)'."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:326
msgid ""
"In the :mod:`django.contrib.admindocs` display, the field description is "
"interpolated with ``field.__dict__`` which allows the description to "
"incorporate arguments of the field. For example, the description for "
":class:`~django.db.models.CharField` is::"
msgstr "Dalam tampilan :mod:`django.contrib.admindocs`, gambaran bidang ditambahkan dengan ``field.__dict__`` yang mengizinkan gambaran pada argumen yang digabungkan dari bidang. Sebagai contoh, gambaran untuk :class:`~django.db.models.CharField` adalah::"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:334
msgid "Useful methods"
msgstr "Cara berguna"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:336
msgid ""
"Once you've created your :class:`~django.db.models.Field` subclass, you "
"might consider overriding a few standard methods, depending on your field's "
"behavior. The list of methods below is in approximately decreasing order of "
"importance, so start from the top."
msgstr "Sekali anda telah membuat subkelas :class:`~django.db.models.Field` anda, anda boleh mempertimbangkan mengesampingkan sedikit cara standar, tergantung pada kebiasaan bidang anda. Daftar dari cara dibawah ini adalah dalam lebih kurang menurun urutan dari kepentingan, jadi mulai dari atas."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:344
msgid "Custom database types"
msgstr "Jenis basisdata penyesuaian"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:346
msgid ""
"Say you've created a PostgreSQL custom type called ``mytype``. You can "
"subclass ``Field`` and implement the :meth:`~Field.db_type` method, like "
"so::"
msgstr "Katakan anda telah membuat jenis penyesuaian PostgreSQL dipanggil ``mtype``. Anda dapat mensubkelaskan ``Field`` dan menerapkan cara :meth:`~Field.db_type`, seperti begitu::"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:355
msgid ""
"Once you have ``MytypeField``, you can use it in any model, just like any "
"other ``Field`` type::"
msgstr "Sekali anda mempunyai ``MytypeField``, anda dapat menggunakannya di model apapun, seperti jenis ``Field`` apapun lainnya ::"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:362
msgid ""
"If you aim to build a database-agnostic application, you should account for "
"differences in database column types. For example, the date/time column type"
" in PostgreSQL is called ``timestamp``, while the same column in MySQL is "
"called ``datetime``. The simplest way to handle this in a "
":meth:`~Field.db_type` method is to check the "
"``connection.settings_dict['ENGINE']`` attribute."
msgstr "Jika anda menuju membangun aplikasi agnostik-basisdata, anda harus melaporkan untuk perbedaan dalam jenis kolom basisdata. Sebagai contoh, jenis kolom date/time dalam PostgreSQL dipanggil ``timestamp``, sementara kolom yang sama dalam MySQL dipanggil ``datetime``. Jalan termudah untuk menangani ini dalam cara :meth:`~Field.db_type` adalah untuk memeriksa atribut ``connection.settings_dict['ENGINE']``."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:368
#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:510
#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:682
msgid "For example::"
msgstr "Sebagai contoh::"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:377
msgid ""
"The :meth:`~Field.db_type` method is called by Django when the framework "
"constructs the ``CREATE TABLE`` statements for your application -- that is, "
"when you first create your tables. It is also called when constructing a "
"``WHERE`` clause that includes the model field -- that is, when you retrieve"
" data using QuerySet methods like ``get()``, ``filter()``, and ``exclude()``"
" and have the model field as an argument. It's not called at any other time,"
" so it can afford to execute slightly complex code, such as the "
"``connection.settings_dict`` check in the above example."
msgstr "Cara :meth:`~Field.db_type` dipanggil oleh Django ketika kerangka membangun pernyataan ``CREATE TABLE`` untuk aplikasi anda -- yaitu, ketika anda pertama kali membuat tabel anda. Dia juga dipanggil ketika membangun klausa ``WHERE`` yang menyertakan bidang model -- yaitu, ketika anda mengambil data menggunakan cara QuerySet seperti ``get()``, ``filter()``, dan ``exclude()`` dan mempunyai bidang model sebagai sebuah argumen. Dia tidak dipanggil pada lain waktu, jadi dia dapat mampu menjalankan sedikit kode rumit , seperti ``connection.settings_dict`` diperiksa dalam contoh diatas."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:386
msgid ""
"Some database column types accept parameters, such as ``CHAR(25)``, where "
"the parameter ``25`` represents the maximum column length. In cases like "
"these, it's more flexible if the parameter is specified in the model rather "
"than being hard-coded in the ``db_type()`` method. For example, it wouldn't "
"make much sense to have a ``CharMaxlength25Field``, shown here::"
msgstr "Beberapa jenis kolom basisdata menerima parameter, seperti ``CHAR(25)``, dimana parameter ``25`` mewakili panjang kolom maksimum. Dalam kasus seperti ini, dia lebih supel jika parameter ditentukan dalam model daripada menjadi kode-keras dalam cara ``db_type()``. Sebagai contoh, dia tidak akan masuk akan untuk mempunyai ``CharMaxlength25Field``, ditampilkan disini::"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:402
msgid ""
"The better way of doing this would be to make the parameter specifiable at "
"run time -- i.e., when the class is instantiated. To do that, just implement"
" ``Field.__init__()``, like so::"
msgstr "Jalan lebih baik dari mengerjakan ini adalah membuat parameter dapat lebih khusus pada wktu berjalan -- yaitu, ketika kelas dipakai. Untuk melakukan itu, cukup terapkan ``Field.__init__()``, seperti begitu::"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:420
msgid ""
"Finally, if your column requires truly complex SQL setup, return ``None`` "
"from :meth:`.db_type`. This will cause Django's SQL creation code to skip "
"over this field. You are then responsible for creating the column in the "
"right table in some other way, of course, but this gives you a way to tell "
"Django to get out of the way."
msgstr "Akhirnya, jika kolom anda membutuhkan pengaturan SQL yang rumit, kembalikan ``None`` dari :meth:`.db_type`. Ini akan menyebabkan kode pembuatan SQL Django melewati terhadap bidang ini. Anda kemudian bertanggung jawab untuk membuat kolom dalam tabel yang benar dalam cara lain, tentu saja, tetapi ini memberikan anda sebuah jalan untuk memberitahu Django untuk keluar dari jalan."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:429
msgid "Converting values to Python objects"
msgstr "Mengubah nilai menjadi obyek Python"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:433
msgid ""
"Historically, Django provided a metaclass called ``SubfieldBase`` which "
"always called :meth:`~Field.to_python` on assignment. This did not play "
"nicely with custom database transformations, aggregation, or values queries,"
" so it has been replaced with :meth:`~Field.from_db_value`."
msgstr "Sejarahnya, Django menyediakan kelas meta dipanggil ``SubfieldBase`` yang selalu dipanggil :meth:`~Field.to_python` pada penugasan. Ini tidak bermain dengan baik dengan perubahan basisdata disesuaikan, pengumpulan, atau permintaan nilai, jadi dia telah diganti dengan :meth:`~Field.from_db_value`."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:438
msgid ""
"If your custom :class:`~Field` class deals with data structures that are "
"more complex than strings, dates, integers, or floats, then you may need to "
"override :meth:`~Field.from_db_value` and :meth:`~Field.to_python`."
msgstr "Jika penyesuaian kelas :class:`~Field` anda berhubungan dengan struktur dara yang lebih rumit daripada deretan karakter, tanggal, integer, atau float, kemudian anda butuh untuk mengesampingkan :meth:`~Field.from_db_value` dan :meth:`~Field.to_python`."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:442
msgid ""
"If present for the field subclass, ``from_db_value()`` will be called in all"
" circumstances when the data is loaded from the database, including in "
"aggregates and :meth:`~django.db.models.query.QuerySet.values` calls."
msgstr "Jika ada untuk bidang subkelas, ``from_db_value()`` akan dipanggil dalam semua keadaan ketika data dimuat dari basisdata, termasuk dalam keseluruhan dan panggilan :meth:`~django.db.models.query.QuerySet.values`."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:446
msgid ""
"``to_python()`` is called by deserialization and during the "
":meth:`~django.db.models.Model.clean` method used from forms."
msgstr "``to_python()`` dipanggil dengan memutuskan dan selama cara :meth:`~django.db.models.Model.clean` digunakan dari formulir."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:449
msgid ""
"As a general rule, ``to_python()`` should deal gracefully with any of the "
"following arguments:"
msgstr "Sebagai aturan umum, ``to_python()`` harus berurusan secara anggun dengan salah satu dari argumen berikut:"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:452
msgid ""
"An instance of the correct type (e.g., ``Hand`` in our ongoing example)."
msgstr "Sebuah instance dari jenis yang benar (sebagai contoh, ``Hand`` dalam contoh kami yang sedang berjalan)."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:454
msgid "A string"
msgstr "Sebuah string"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:456
msgid "``None`` (if the field allows ``null=True``)"
msgstr "``None`` (jika bidang mengizinkan ``null=True``)"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:458
msgid ""
"In our ``HandField`` class, we're storing the data as a VARCHAR field in the"
" database, so we need to be able to process strings and ``None`` in the "
"``from_db_value()``. In ``to_python()``, we need to also handle ``Hand`` "
"instances::"
msgstr "Dalam kelas ``HandField``, kami menyimpan data sebagai bidang VARCHAR dalam basisdata, jadi kami butuh dapat mengolah deretan karakter dan ``None`` dalam ``from_db_value()``. Di ``to_python()``, kami butuh juga menangani instance ``Hand``::"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:495
msgid ""
"Notice that we always return a ``Hand`` instance from these methods. That's "
"the Python object type we want to store in the model's attribute."
msgstr "Perhatikan bahwa kami selalu mengembalikan sebuah instance ``hand`` dari cara ini. Itu adalah jenis obyek Python kami ingin simpan dalam atribut model."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:498
msgid ""
"For ``to_python()``, if anything goes wrong during value conversion, you "
"should raise a :exc:`~django.core.exceptions.ValidationError` exception."
msgstr "Untuk ``to_python()``, jika apapun berjalan salah selama perubahan nilai, anda harus memunculkan pengecualian :exc:`~django.core.exceptions.ValidationError`."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:504
msgid "Converting Python objects to query values"
msgstr "Mengubah obyek Python ke nilai pencarian"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:506
msgid ""
"Since using a database requires conversion in both ways, if you override "
":meth:`~Field.to_python` you also have to override "
":meth:`~Field.get_prep_value` to convert Python objects back to query "
"values."
msgstr "Sejak menggunakan sebuah basisdata membutuhkan perubahan dalam kedua jalan, jika anda mengesampingkan :meth:`~Field.to_python` anda juga harus mengesampingkan :meth:`~Field.get_prep_value` untuk merubah obyek Python kembali ke nilai permintaan."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:521
msgid ""
"If your custom field uses the ``CHAR``, ``VARCHAR`` or ``TEXT`` types for "
"MySQL, you must make sure that :meth:`.get_prep_value` always returns a "
"string type. MySQL performs flexible and unexpected matching when a query is"
" performed on these types and the provided value is an integer, which can "
"cause queries to include unexpected objects in their results. This problem "
"cannot occur if you always return a string type from "
":meth:`.get_prep_value`."
msgstr "Jika bidang penyesuaian anda menggunakan jenis ``CHAR``, ``VARCHAR`` atau ``TEXT`` untuk MySQL, anda harus memastikan bahwa :meth:`.get_prep_value` selalu mengembalikan jenis string. MySQL melakukan luwas dan pencocokan tidak diharapkan ketika sebuah permintaan dilakukan pada jenis ini dan nilai yang disediakan adalah sebauh integer, yang dapat menyebabkan permintaan untuk menyertakan obyek tidak diharapkan dalam pencarian mereka. Masalah ini tidak dapat timbul jika anda selalu mengembalikan jenis string dari :meth:`.get_prep_value`."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:532
msgid "Converting query values to database values"
msgstr "Mengubah nilai pencarian ke nilai basisdata"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:534
msgid ""
"Some data types (for example, dates) need to be in a specific format before "
"they can be used by a database backend. :meth:`~Field.get_db_prep_value` is "
"the method where those conversions should be made. The specific connection "
"that will be used for the query is passed as the ``connection`` parameter. "
"This allows you to use backend-specific conversion logic if it is required."
msgstr "Beberapa jenis data (sebagai contoh, tanggal) butuh dalam bentuk yang khusus sebelum mereka dapat digunakan oleh backend basisdata. :meth:`~Field.get_db_prep_value` adalah cara dimana perubahan tersebut harus dibuat. Hubungan khusus yang akan digunakan untuk permintaan dilewati sebagai parameter ``connection``. Ini mengizinkan anda menggunakan logika perubahan khusus-backend jika dia diwajibkan."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:541
msgid ""
"For example, Django uses the following method for its :class:`BinaryField`::"
msgstr "Sebagai contoh, Django menggunakan cara berikut untuk :class:`BinaryField` nya::"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:550
msgid ""
"In case your custom field needs a special conversion when being saved that "
"is not the same as the conversion used for normal query parameters, you can "
"override :meth:`~Field.get_db_prep_save`."
msgstr "Dalam kasus bidang penyesuaian anda butuh perubahan khusus ketika sedang disimpan yang tidak sama seperti perubahan digunakan untuk parameter permintaan biasa, anda dapat mengesampingkan :meth:`~Field.get_db_prep_save`."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:557
msgid "Preprocessing values before saving"
msgstr "Mengolah nilai sebelum menyimpan"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:559
msgid ""
"If you want to preprocess the value just before saving, you can use "
":meth:`~Field.pre_save`. For example, Django's "
":class:`~django.db.models.DateTimeField` uses this method to set the "
"attribute correctly in the case of "
":attr:`~django.db.models.DateField.auto_now` or "
":attr:`~django.db.models.DateField.auto_now_add`."
msgstr "Jika anda ingin prapengolahan nilai sebelum menyimpan, anda dapat menggunakan :meth:`~Field.pre_save`. Sebagai contoh, :class:`~django.db.models.DateTimeField` Django menggunakan cara ini untuk menyetel atribut dengan benar dalam kasus dari :attr:`~django.db.models.DateField.auto_now` atau :attr:`~django.db.models.DateField.auto_now_add`."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:565
msgid ""
"If you do override this method, you must return the value of the attribute "
"at the end. You should also update the model's attribute if you make any "
"changes to the value so that code holding references to the model will "
"always see the correct value."
msgstr "Jika anda melakukan mengesampingkan cara ini, anda harus mengembalikan nilai dari atribut di akhirnya. Anda harus juga memperbaharui atribut model jika anda membuat perubahan apapun ke nilai sehingga kode menahan acuan ke model akan selalu melihat nilai benar."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:573
msgid "Preparing values for use in database lookups"
msgstr "Mempersiapkan nilai untuk digunakan dalam pencaian basisdata"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:575
msgid ""
"As with value conversions, preparing a value for database lookups is a two "
"phase process."
msgstr "Seperti perubahan nilai, menyiapkan sebauh nilai untuk pencarian basisdata adalah dua tingkatan pengolahan."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:578
msgid ""
":meth:`.get_prep_lookup` performs the first phase of lookup preparation: "
"type conversion and data validation."
msgstr ":meth:`.get_prep_lookup` melakukan tingkatan pertama dari persiapan pencarian: mengetik perubahan dan menmeriksa data."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:581
msgid ""
"Prepares the ``value`` for passing to the database when used in a lookup (a "
"``WHERE`` constraint in SQL). The ``lookup_type`` parameter will be one of "
"the valid Django filter lookups: ``exact``, ``iexact``, ``contains``, "
"``icontains``, ``gt``, ``gte``, ``lt``, ``lte``, ``in``, ``startswith``, "
"``istartswith``, ``endswith``, ``iendswith``, ``range``, ``year``, "
"``month``, ``day``, ``isnull``, ``search``, ``regex``, and ``iregex``."
msgstr "Menyiapkan ``value`` untuk dilewatkan ke basisdata ketika digunakan dalam pencarian (sebuah pembatas ``WHERE`` dalam SQL). Parameter ``lookup_type`` akan menjadi satu dari pencarian penyaring Django sah: ``exact``, ``iexact``, ``contains``, ``icontains``, ``gt``, ``gte``, ``lt``, ``lte``, ``in``, ``startswith``, ``istartswith``, ``endswith``, ``iendswith``, ``range``, ``year``, ``month``, ``day``, ``isnull``, ``search``, ``regex``, dan ``iregex``."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:588
msgid ""
"If you are using :doc:`custom lookups </howto/custom-lookups>`, the "
"``lookup_type`` can be any ``lookup_name`` used by the project's custom "
"lookups."
msgstr "Jika anda sedang menggunakan :doc:`pencarian penyesuaian </howto/custom-lookups>`, ``lookup_type`` dapat menjadi ``lookup_name`` apapun digunakan oleh pencarian penyesuaian proyek."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:591
msgid ""
"Your method must be prepared to handle all of these ``lookup_type`` values "
"and should raise either a ``ValueError`` if the ``value`` is of the wrong "
"sort (a list when you were expecting an object, for example) or a "
"``TypeError`` if your field does not support that type of lookup. For many "
"fields, you can get by with handling the lookup types that need special "
"handling for your field and pass the rest to the "
":meth:`~Field.get_db_prep_lookup` method of the parent class."
msgstr "Cara anda harus dipersiapkan untuk menangani semua nilai ``lookup_type`` ini dan harus menampilkan salah satu sebuah ``ValueError`` jika ``value`` dari urutan salah (sebuah daftar anda harapkan sebuah obyek, sebagai contoh) atau ``TypeError`` jika bidang anda tiadk mendukung jenis tersebut dari pencarian. Untuk banyak bidang-bidang, anda dapat mendapatkannya dengan menangani jenis pencarian yang butuh penanganan khusus untuk bidang anda dan sisa ke cara :meth:`~Field.get_db_prep_lookup` dari kelas induk."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:599
msgid ""
"If you needed to implement :meth:`.get_db_prep_save`, you will usually need "
"to implement :meth:`.get_prep_lookup`. If you don't, :meth:`.get_prep_value`"
" will be called by the default implementation, to manage ``exact``, ``gt``, "
"``gte``, ``lt``, ``lte``, ``in`` and ``range`` lookups."
msgstr "Jika anda butuh untuk menerapkan :meth:`.get_db_prep_save`, anda akan biasanya butuh menerapkan :meth:`.get_prep_lookup`. Jika anda tidak, :meth:`.get_prep_value` akan dipanggil secara awal penerapan, untuk mengelola pencarian ``exact``, ``gt``, ``gte``, ``lt``, ``lte``, ``in`` dan ``range``."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:604
msgid ""
"You may also want to implement this method to limit the lookup types that "
"could be used with your custom field type."
msgstr "Anda juga ingin menerapkan cara ini untuk membatasi jensi pencarian yang dapat digunakan dengan jenis bidang penyesuaian anda."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:607
msgid ""
"Note that, for ``\"range\"`` and ``\"in\"`` lookups, ``get_prep_lookup`` "
"will receive a list of objects (presumably of the right type) and will need "
"to convert them to a list of things of the right type for passing to the "
"database. Most of the time, you can reuse ``get_prep_value()``, or at least "
"factor out some common pieces."
msgstr "Catat bahwa, untuk pencarian ``\"jangkauan\"`` dan ``\"dalam\"``, ``get_prep_lookup`` akan menerima sebuah daftar dari obyek (barangkali dari jenis yang benar) dan akan merubah mereka ke sebuah daftar dari jenis benar untuk melewatkan ke basisdata. Kebanyakan dari waktu, anda dapat menggunakan kembali ``get_prep_value()``, atau setidaknya faktor luar beberapa potongan umum."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:613
msgid ""
"For example, the following code implements ``get_prep_lookup`` to limit the "
"accepted lookup types to ``exact`` and ``in``::"
msgstr "Sebagai contoh, kode berikut menerapkan ``get_prep_lookup`` untuk membatasi jenis pencarian yang diterima terhadap ``exact`` dan ``in``::"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:628
msgid ""
"For performing database-specific data conversions required by a lookup, you "
"can override :meth:`~Field.get_db_prep_lookup`."
msgstr "Untuk melakukan perubahan data basisdata-khusus dibuatuhkan oleh sebauh pencarian, anda dapat mengesampingkan :meth:`~Field.get_db_prep_lookup`."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:634
msgid "Specifying the form field for a model field"
msgstr "Menentukan bidang formulir untuk sebuah bidang model"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:636
msgid ""
"To customize the form field used by :class:`~django.forms.ModelForm`, you "
"can override :meth:`~Field.formfield`."
msgstr "Untuk menyesuaiakan bidang formulir digunakan oleh :class:`~django.forms.ModelForm`, anda dapat mengesampingkan :meth:`~Field.formfield`."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:639
msgid ""
"The form field class can be specified via the ``form_class`` and "
"``choices_form_class`` arguments; the latter is used if the field has "
"choices specified, the former otherwise. If these arguments are not "
"provided, :class:`~django.forms.CharField` or "
":class:`~django.forms.TypedChoiceField` will be used."
msgstr "Kelas bidang formulir dapat ditentukan melalui argumen ``form_class`` dan ``choices_form_class``; yang terakhir digunakan jika bidang mempunyai pilihan yang ditentukan, yang depan kebalikannya. Jika argumen ini tidak disediakan, :class:`~django.forms.CharField` atau :class:`~django.forms.TypedChoiceField` akan digunakan."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:645
msgid ""
"All of the ``kwargs`` dictionary is passed directly to the form field's "
"``__init__()`` method. Normally, all you need to do is set up a good default"
" for the ``form_class`` (and maybe ``choices_form_class``) argument and then"
" delegate further handling to the parent class. This might require you to "
"write a custom form field (and even a form widget). See the :doc:`forms "
"documentation </topics/forms/index>` for information about this."
msgstr "Semua kamus ``kwargs`` dilewatkan secara langsung ke formulir cara ``__init__()`` bidang. Biasanya, semua anda butuh lakukan adalah menyetel nilai awal bagus untuk ``form_class`` argumen (dan mungkin ``choices_form_class``) dan kemudian mengutus penanganan lebih lanjut untuk kelas induk. Ini mungkin membutuhkan anda menulis bidang formulir penyesuaian (dan bahkan sebuah widget formulir). Lihat :doc:`forms documentation </topics/forms/index>` untuk informasi tentang ini."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:652
msgid ""
"Continuing our ongoing example, we can write the :meth:`~Field.formfield` "
"method as::"
msgstr "Melanjutkan contoh berlangsung kita, kami dapat menulis cara :meth:`~Field.formfield` sebagai::"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:665
msgid ""
"This assumes we've imported a ``MyFormField`` field class (which has its own"
" default widget). This document doesn't cover the details of writing custom "
"form fields."
msgstr "Ini menganggap kami telah mengimpor kelas bidang ``MyFormField`` (yang mempunyai widget awal sendiri). Dokumen ini tidak mencakup rincian dari penulisan bidang formulir penyesuaian."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:675
msgid "Emulating built-in field types"
msgstr "Menyamai jenis bidang siap pakai"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:677
msgid ""
"If you have created a :meth:`.db_type` method, you don't need to worry about"
" :meth:`.get_internal_type` -- it won't be used much. Sometimes, though, "
"your database storage is similar in type to some other field, so you can use"
" that other field's logic to create the right column."
msgstr "Jika anda telah membuat cara :meth:`.db_type`, anda tidak butuh khawatir tentang :meth:`.get_internal_type` -- dia tidak akan digunakan. Terkadang, meskipun, penyimpanan basisdata anda mirip dalam jenis pada beberapa bidang lain, jadi anda dapat menggunakan logika bidang lain itu untuk membuat kolum yang benar."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:690
msgid ""
"No matter which database backend we are using, this will mean that "
":djadmin:`migrate` and other SQL commands create the right column type for "
"storing a string."
msgstr "Tidak penting backend basisdata anda kami gunakan, ini akan berarti bahwa :djadmin:`migrate` dan perintah SQL lainnya membuat jenis kolom benar untuk menyimpan sebuah deretan karakter."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:694
msgid ""
"If :meth:`.get_internal_type` returns a string that is not known to Django "
"for the database backend you are using -- that is, it doesn't appear in "
"``django.db.backends.<db_name>.base.DatabaseWrapper.data_types`` -- the "
"string will still be used by the serializer, but the default "
":meth:`~Field.db_type` method will return ``None``. See the documentation of"
" :meth:`~Field.db_type` for reasons why this might be useful. Putting a "
"descriptive string in as the type of the field for the serializer is a "
"useful idea if you're ever going to be using the serializer output in some "
"other place, outside of Django."
msgstr "Jika :meth:`.get_internal_type` megembalikan sebuah deretan karakter yang tidak diketahui ke Django untuk backend basisdata anda sedang gunakan -- yaitu, dia tidak muncul dalam ``django.db.backends.<db_name>.base.DatabaseWrapper.data_types`` -- deretan karakter akan masih digunakan oleh penyambung, tetapi cara :meth:`~Field.db_type` awal akan mengembalikan ``None``. Lihat dokumentasi dari :meth:`~Field.db_type` untuk alasan mengapa ini mungkin berguna. menaruh sebuah gambaran deretan karakter kedalam sebagai jenis dari bidang untuk penyambung adalah ide berguna jika anda sedang akan menggunakan keluaran penyambung dalam beberapa tempat lainnya, diluar Django."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:706
msgid "Converting field data for serialization"
msgstr "Mengubah data field untuk serialisasi"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:708
msgid ""
"To customize how the values are serialized by a serializer, you can override"
" :meth:`~Field.value_to_string`. Using ``value_from_object()`` is the best "
"way to get the field's value prior to serialization. For example, since our "
"``HandField`` uses strings for its data storage anyway, we can reuse some "
"existing conversion code::"
msgstr "Untuk menyesuaikan bagaimana nilai disambung oleh penyambung, anda dapat mengesampingkan :meth:`~Field.value_to_string`. Menggunakan ``value_from_object()`` adalah jalan terbaik untuk mendapatkan nilai bidang sebelum penyambungan. Sebagai contoh, sejak ``HandField`` kami menggunakan deretan karakter untuk penyimpanan datanya, kami dapat menggunakan kembali beberapa kode perubahan yang ada::"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:722
msgid "Some general advice"
msgstr "Beberapa saran umum"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:724
msgid ""
"Writing a custom field can be a tricky process, particularly if you're doing"
" complex conversions between your Python types and your database and "
"serialization formats. Here are a couple of tips to make things go more "
"smoothly:"
msgstr "Menulis sebuah bidang penyesuaian dapat menjadi pengolahan yang rumit, khususnya jika anda sedang melakukan perubahan rumit diantara jenis Python anda dan basisdata anda dan bentuk penyambungan. Ini adalah sepasang tip utnuk membuat hal-hal berjalan lebih halus::"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:729
msgid ""
"Look at the existing Django fields (in "
":file:`django/db/models/fields/__init__.py`) for inspiration. Try to find a "
"field that's similar to what you want and extend it a little bit, instead of"
" creating an entirely new field from scratch."
msgstr "Lihat bidang Django yang ada (dalam :file:`django/db/models/fields/__init__.py`) untuk inspirasi. Coba temukan bidang yang mirip pada apa anda inginkan dan perpanjang dia sedikit, daripada membuat sebuah keseluruhan bidang baru dari awal."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:734
msgid ""
"Put a ``__str__()`` (``__unicode__()`` on Python 2) method on the class "
"you're wrapping up as a field. There are a lot of places where the default "
"behavior of the field code is to call "
":func:`~django.utils.encoding.force_text` on the value. (In our examples in "
"this document, ``value`` would be a ``Hand`` instance, not a ``HandField``)."
" So if your ``__str__()`` method (``__unicode__()`` on Python 2) "
"automatically converts to the string form of your Python object, you can "
"save yourself a lot of work."
msgstr "Taruh sebuah cara ``__str__()`` (``__unicode__()`` pada Python 2) pada kelas anda sedang bungkus sebagai sebuah bidang. Ada banyak tempat dimana kebiasaan awal dari kode bidang adalah memanggil :func:`~django.utils.encoding.force_text` pada nilai. (Dalam contoh kami di dokumen ini, ``value`` akan menjadi instance ``Hand``, bukan sebuah ``HandField``). Jadi jika cara ``__str__()`` anda (``__unicode__()`` pada Python 2) otomatis merubah ke bentuk deretan karakter dari obyek Python anda, anda dapat menyimpan banyak pekerjaan."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:744
msgid "Writing a ``FileField`` subclass"
msgstr "Menulis subkelas ``FileField``"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:746
msgid ""
"In addition to the above methods, fields that deal with files have a few "
"other special requirements which must be taken into account. The majority of"
" the mechanics provided by ``FileField``, such as controlling database "
"storage and retrieval, can remain unchanged, leaving subclasses to deal with"
" the challenge of supporting a particular type of file."
msgstr "Dalam tambahan pada cara diatas, bidang-bidang yang berurusan dengan berkas-berkas mempunyai sedikit persyaratan khusus lainnya yang harus diambil kedalam akun. Kebanyakan dari mekanisme disediakan oleh ``FileField``, seperti mengendalikan penyimpanan basisdata dan pengambilan, dapat tetap tidak berubah, meninggalkan subkelas-subkelas untuk berurusan dengan tantangan dari mendukung jenis khusus dari berkas."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:752
msgid ""
"Django provides a ``File`` class, which is used as a proxy to the file's "
"contents and operations. This can be subclassed to customize how the file is"
" accessed, and what methods are available. It lives at "
"``django.db.models.fields.files``, and its default behavior is explained in "
"the :doc:`file documentation </ref/files/file>`."
msgstr "Django menyediakan sebuah kelas ``File``, yang digunakan sebagai sebuah proxy pada isi berkas dan tindakan. Ini dapat disubkelaskan ke menyesuaikan bagaimana berkas diakses, dan cara apa yang tersedia. Dia tinggal di ``django.db.models.fields.files``, dan kebiasaan awalnya adalah dijelaskan dalam :doc:`file documentation </ref/files/file>`."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:758
msgid ""
"Once a subclass of ``File`` is created, the new ``FileField`` subclass must "
"be told to use it. To do so, simply assign the new ``File`` subclass to the "
"special ``attr_class`` attribute of the ``FileField`` subclass."
msgstr "Sekali sebuah subkelas dari ``File`` dibuat, subkelas ``FileField`` harus diberitahu untuk menggunakannya. Untuk melakukannya, cukup tetapkan subkelas ``File`` baru ke atribut ``attr_class`` khusus dari subkelas ``FileField``."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:763
msgid "A few suggestions"
msgstr "Sedikit saran"

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:765
msgid ""
"In addition to the above details, there are a few guidelines which can "
"greatly improve the efficiency and readability of the field's code."
msgstr "Sebagai tambahan pada rincian diatas, terdapat sedikit panduan yang dapat meningkatkan efisiensi dan kesiapan dari kode bidang."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:768
msgid ""
"The source for Django's own ``ImageField`` (in "
"``django/db/models/fields/files.py``) is a great example of how to subclass "
"``FileField`` to support a particular type of file, as it incorporates all "
"of the techniques described above."
msgstr "Sumber untuk ``ImageField`` sendiri Django (dalam ``django/db/models/fields/files.py``) adalah contoh hebat dari bagaimana untuk mensubkelaskan ``FileField`` untuk mendukung jenis khusus dari berkas, karena menggabungkan semua teknik digambarkan diatas."

#: ../../../../sources/1.9/docs/howto/custom-model-fields.txt:773
msgid ""
"Cache file attributes wherever possible. Since files may be stored in remote"
" storage systems, retrieving them may cost extra time, or even money, that "
"isn't always necessary. Once a file is retrieved to obtain some data about "
"its content, cache as much of that data as possible to reduce the number of "
"times the file must be retrieved on subsequent calls for that information."
msgstr "Menembolok atribut berkas dimanapaun memungkinkan. Sejak berkas-berkas mungkin disimpan dalam sistem penyimpanan jauh, mengambil mereka mungkin memakan waktu tambahan, atau bahkan uang, yang tidak selalu dibutuhkan. Sekali sebuah berkas diambil untuk mendapatkan beberapa data tentang isinya, tembolok sebanyak mungkin data tersebut untuk mengurangi jumlah kali berkas harus diambil pada pemanggilan berikut untuk informasi itu."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:3
msgid "Custom template tags and filters"
msgstr "Penyesuaian etiket cetakan dan saringan"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:5
msgid ""
"Django's template language comes with a wide variety of :doc:`built-in tags "
"and filters </ref/templates/builtins>` designed to address the presentation "
"logic needs of your application. Nevertheless, you may find yourself needing"
" functionality that is not covered by the core set of template primitives. "
"You can extend the template engine by defining custom tags and filters using"
" Python, and then make them available to your templates using the :ttag:`{% "
"load %}<load>` tag."
msgstr "Cetakan bahasa Django datang dengan beragam luas dari :doc:`built-in tags and filters </ref/templates/builtins>` dirancang untuk megnalamatkan kebutuhan pembawaan logis dari aplikasi anda. Namun, anda mungkin menemukan diri anda sendiri membutuhkan fungsi yang tidak dicakupi oleh inti kumpulan dari cetakan primitif. Anda dapat memperpanjang cetakan mesin dengan menentukan penyesuaian etiket dan penyaring menggunakan Python, dan membuat mereka tersedua pada cetakan anda menggunakan etiket :ttag:`{% load %}<load>`."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:14
msgid "Code layout"
msgstr "Tata letak kode"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:16
msgid ""
"The most common place to specify custom template tags and filters is inside "
"a Django app. If they relate to an existing app, it makes sense to bundle "
"them there; otherwise, they can be added to a new app. When a Django app is "
"added to :setting:`INSTALLED_APPS`, any tags it defines in the conventional "
"location described below are automatically made available to load within "
"templates."
msgstr "Tempat paling umum untuk menentukan cetakan etiket dan penyaring adalah didalam aplikasi Django. Jika mereka terhubung pada aplikasi yang ada, dia masuk akal untuk menggabungkan mereka; kalau tidak, mereka dapat ditambahkan ke aplikasi baru. Ketika aplikasi Django ditambahkan ke :setting:`INSTALLED_APPS`, etiket apapun dia tentukan dalam tempat biasa dibawah otomatis dibuat tersedia untuk dimuat dengan cetakan."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:22
msgid ""
"The app should contain a ``templatetags`` directory, at the same level as "
"``models.py``, ``views.py``, etc. If this doesn't already exist, create it -"
" don't forget the ``__init__.py`` file to ensure the directory is treated as"
" a Python package."
msgstr "Aplikasi harus mengandung sebuah direktori ``templatetags``, pada tingkatan sama seperti ``models.py``, ``views.py``, dll. Jika ini tidak ada, buat dia - jangan lupakan berkas ``__init__.py`` untuk memastikan direktori diperlakukan sebagai paket Python."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:27
msgid "Development server won't automatically restart"
msgstr "Peladen pengembangan tidak akan otomatis nyala kembali"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:29
msgid ""
"After adding the ``templatetags``  module, you will need to restart your "
"server before you can use the tags or filters in templates."
msgstr "Setelah menambahkan modul  ``templatetags``, anda akan butuh memulai kembali peladen anda sebelum anda dapat menggunakan etiket atau penyaring dalam cetakan."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:32
msgid ""
"Your custom tags and filters will live in a module inside the "
"``templatetags`` directory. The name of the module file is the name you'll "
"use to load the tags later, so be careful to pick a name that won't clash "
"with custom tags and filters in another app."
msgstr "Penyesuaian etiket dan penyaring anda akan berada dalam sebuah modul didalam direktori ``templatetags``. Nama dari berkas modul adalah nama anda akan gunakan untuk memuat etiket kemudian, jadi berhati-hatilah untuk mengambil sebuah nama yang tidak akan bentrok dengan penyesuaian etiket dan penyaring di aplikasi lain."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:37
msgid ""
"For example, if your custom tags/filters are in a file called "
"``poll_extras.py``, your app layout might look like this::"
msgstr "Sebagai contoh, jika penyesuaian etiket/penyaring anda berada dalam sebuah berkas yang dipanggil ``poll_extras.py``, tata letak eplikasi anda mungkin terlihat seperti ini::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:48
msgid "And in your template you would use the following:"
msgstr "Dan di cetakan anda, anda akan menggunakan berikut:"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:54
msgid ""
"The app that contains the custom tags must be in :setting:`INSTALLED_APPS` "
"in order for the :ttag:`{% load %}<load>` tag to work. This is a security "
"feature: It allows you to host Python code for many template libraries on a "
"single host machine without enabling access to all of them for every Django "
"installation."
msgstr "Aplikasi yang mengandung penyesuaian etiket harus berada dalam :setting:`INSTALLED_APPS` agar etiket :ttag:`{% load %}<load>` bekerja. Ini adalah fitur keamanan: Dia mengizinkan anda untuk menempatkan kode Python untuk banyak cetakan pustaka pada sebuah mesin rumah tunggal tanpa mengadakan akses ke semua dari mereka untuk setiap pemasangan Django."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:59
msgid ""
"There's no limit on how many modules you put in the ``templatetags`` "
"package. Just keep in mind that a :ttag:`{% load %}<load>` statement will "
"load tags/filters for the given Python module name, not the name of the app."
msgstr "Tidak ada batasan pada bagaimana banyak modul anda taruh dalam paket ``templatetags``. Hanya perlu diingat bahwa sebuah pernyataan :ttag:`{% load %}<load>` akan memuatetiket/penyaring untuk nama modul Python yang diberikan, bukan nama dari aplikasi."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:63
msgid ""
"To be a valid tag library, the module must contain a module-level variable "
"named ``register`` that is a ``template.Library`` instance, in which all the"
" tags and filters are registered. So, near the top of your module, put the "
"following::"
msgstr "Untuk menjadi pustaka sah, modul harus mengandung sebuah variabel tingkat-modul yang dinamai ``register`` yaitu sebuah instance ``template.Library``, dimana semua etiket dan penyaring didaftarkan. Jadi dekat diatas modul anda, taruh berikut:"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:74
msgid ""
"Alternatively, template tag modules can be registered through the "
"``'libraries'`` argument to "
":class:`~django.template.backends.django.DjangoTemplates`. This is useful if"
" you want to use a different label from the template tag module name when "
"loading template tags. It also enables you to register tags without "
"installing an application."
msgstr "Kalau tidak, cetakan modul etiket dapat didaftarkan melalui argumen ``'libraries'`` ke :class:`~django.template.backends.django.DjangoTemplates`. Ini berguna jika anda ingin menggunakan label berbeda dari nama cetakan modul etiket ketika memuat cetakan etiket. Dia juga mengadakan anda untuk mendaftar etiket tanpa memasang sebuah aplikasi."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:81
msgid "Behind the scenes"
msgstr "Dibalik layar"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:83
msgid ""
"For a ton of examples, read the source code for Django's default filters and"
" tags. They're in ``django/template/defaultfilters.py`` and "
"``django/template/defaulttags.py``, respectively."
msgstr "Untuk banyak contoh, baca kode sumber untuk penatingan dan etiket awal Django. Mereka berada di ``django/template/defaultfilters.py`` dan ``django/template/defaulttags.py``, masing-masing."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:87
msgid "For more information on the :ttag:`load` tag, read its documentation."
msgstr "Untuk informasi lebih pada etiket :ttag:`load`, baca dokumentasinya."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:92
msgid "Writing custom template filters"
msgstr "Menulis saringan cetakan penyesuaian"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:94
msgid ""
"Custom filters are just Python functions that take one or two arguments:"
msgstr "Saringan penyesuaian hanyalah fungsi fungsi yang mengambil satu atau dua argumen:"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:96
msgid "The value of the variable (input) -- not necessarily a string."
msgstr "Nilai dari variabel (masukan) -- tidak perlu deretan karakter."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:97
msgid ""
"The value of the argument -- this can have a default value, or be left out "
"altogether."
msgstr "Nilai dari argumen -- ini dapat mempunyai nilai awal, atau ditinggalkan sama sekali."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:100
msgid ""
"For example, in the filter ``{{ var|foo:\"bar\" }}``, the filter ``foo`` "
"would be passed the variable ``var`` and the argument ``\"bar\"``."
msgstr "Sebagai contoh, dalam saringan ``{{ var|foo:\"bar\" }}``, the filter ``foo`` akan dilewatkan variabel ``var`` dan argumen ``''bar''``."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:103
msgid ""
"Since the template language doesn't provide exception handling, any "
"exception raised from a template filter will be exposed as a server error. "
"Thus, filter functions should avoid raising exceptions if there is a "
"reasonable fallback value to return. In case of input that represents a "
"clear bug in a template, raising an exception may still be better than "
"silent failure which hides the bug."
msgstr "Sejak cetakan bahasa tidak menyediakan penanganan pengecualian, setiap pengecualian yang muncul dari sebuah cetakan saringan akan tidak terlindungi sebagai sebuah kesalahan peladen. Dengan demikian, fungsi penyaring harus menghindari memunculkan pengecualian jika ada alasan nilai mundur untuk kembali. Dalam kasus dari masukan yang mewakili kesalahan jelas dalam sebuah cetakan, menampilkan pencegualian mungkin masih lebih baik daripada kegagalan diam yang menyembunyikan kesalahan."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:110
msgid "Here's an example filter definition::"
msgstr "Ini adalah sebuah contoh pengertian saringan ::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:116
msgid "And here's an example of how that filter would be used:"
msgstr "Dan ini adalah sebuah contoh bagaimana saringan itu akan digunakan:"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:122
msgid ""
"Most filters don't take arguments. In this case, just leave the argument out"
" of your function. Example::"
msgstr "Kebanyakan saringan tidak mengambil argumen. Dalam kasus ini, tinggalkan argumen dari fungsi anda. Contoh::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:130
msgid "Registering custom filters"
msgstr "Mendaftarkan saringan penyesuaian"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:134
msgid ""
"Once you've written your filter definition, you need to register it with "
"your ``Library`` instance, to make it available to Django's template "
"language::"
msgstr "Sekali anda telah menulis arti saringan anda, anda butuh mendaftarkannya dengan instance ``Library`` anda, untuk membuatnya tersedia pada bahasa cetakan Django::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:140
msgid "The ``Library.filter()`` method takes two arguments:"
msgstr "Cara ``Library.filter()`` mengambil dua argumen:"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:142
msgid "The name of the filter -- a string."
msgstr "Nama dari saringan -- sebuah deretan karakter."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:143
#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:962
msgid ""
"The compilation function -- a Python function (not the name of the function "
"as a string)."
msgstr "Fungsi himpunan -- Sebuah fungsi Python (bukan nama fungsi sebagai deretan karakter)."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:146
msgid "You can use ``register.filter()`` as a decorator instead::"
msgstr "Anda dapat menggunakan ``register.filter()`` sebagai penghias::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:156
msgid ""
"If you leave off the ``name`` argument, as in the second example above, "
"Django will use the function's name as the filter name."
msgstr "Jika anda tidak mengubah argumen ``name``, seperti di contoh kedua di atas, Django akan menggunakan nama fungsi sebagai nama filter."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:159
msgid ""
"Finally, ``register.filter()`` also accepts three keyword arguments, "
"``is_safe``, ``needs_autoescape``, and ``expects_localtime``. These "
"arguments are described in :ref:`filters and auto-escaping <filters-auto-"
"escaping>` and :ref:`filters and time zones <filters-timezones>` below."
msgstr "Akhirnya, ``register.filter()`` juga menerima tiga argumen katakunci, ``is_safe``, ``needs_autoescape``, dan ``expects_localtime``. Argumen ini digambarkan dalam :ref:`penyaring dan pelolosan otomatis <filters-auto-escaping>` dan :ref:`penyaring dan zona waktu <filters-timezones>` dibawah."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:165
msgid "Template filters that expect strings"
msgstr "Cetakan penyaring yang mengharapkan deretan karakter"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:169
msgid ""
"If you're writing a template filter that only expects a string as the first "
"argument, you should use the decorator ``stringfilter``. This will convert "
"an object to its string value before being passed to your function::"
msgstr "Jika anda sedang menulis sebuah cetakan penyaring yang hanya menerima sebuah deretan karakter sebagai argumen pertama, anda harus menggunakan decorator ``stringfilter``. Ini akan merubah sebuah obyek ke nilai deretan karakternya sebelum dilewatkan ke fungsi anda::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:183
msgid ""
"This way, you'll be able to pass, say, an integer to this filter, and it "
"won't cause an ``AttributeError`` (because integers don't have ``lower()`` "
"methods)."
msgstr "Jalan ini, anda akan dapat melewatkan, katakan, sebuah integer ke penyaring ini, dan dia tidak menyebabkan sebuah ``AttributeError`` (karena integer tidak mempunyai cara ``lower()``)."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:190
msgid "Filters and auto-escaping"
msgstr "Penyaring dan pelolosan otomatis"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:192
msgid ""
"When writing a custom filter, give some thought to how the filter will "
"interact with Django's auto-escaping behavior. Note that three types of "
"strings can be passed around inside the template code:"
msgstr "Ketika menulis sebuah penyesuaian penyaring, berikan beberapa pemikiran tentang bagaimana penyaring akan berinteraksi dengan kebiasaan pelolosan otomatis Django. Catat bahwa tiga jenis deretan karakter dapat dilewatkan disekeliling dalam cetakan kode:"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:196
msgid ""
"**Raw strings** are the native Python ``str`` or ``unicode`` types. On "
"output, they're escaped if auto-escaping is in effect and presented "
"unchanged, otherwise."
msgstr "**Raw strings** adalah jenis ``str`` atau ``unicode`` Python asli. Pada keluaran, mereka lolos jika pelolosan otomatis ini berlaku dan disajikan tidak berubah, jika tidak."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:200
msgid ""
"**Safe strings** are strings that have been marked safe from further "
"escaping at output time. Any necessary escaping has already been done. "
"They're commonly used for output that contains raw HTML that is intended to "
"be interpreted as-is on the client side."
msgstr "**Safe strings** adalah deretan karakter yang telah ditandai aman dari pelolosan lanjut pada waktu keluar. Apa saja yang diperlukan pelolosan telah dilakukan. Mereka umumnya digunakan untuk keluaran yang mengandung HTML mentah yang akan di ditafsirkan apa adanya pada sisi klien."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:205
msgid ""
"Internally, these strings are of type ``SafeBytes`` or ``SafeText``. They "
"share a common base class of ``SafeData``, so you can test for them using "
"code like::"
msgstr "Secara internal, deretan karakter ini adalah dari jenis ``SafeBytes`` atau ``SafeText``. Mereka berbagi kelas dasar umum dari ``SafeData``, sehingga anda dapat mencoba untuk mereka menggunakan kode seperti::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:213
msgid ""
"**Strings marked as \"needing escaping\"** are *always* escaped on output, "
"regardless of whether they are in an :ttag:`autoescape` block or not. These "
"strings are only escaped once, however, even if auto-escaping applies."
msgstr "**Deretan karakter ditandai sebagai \"needing escaping\"** adalah *selalu* diloloskan pada keluaran, tanpa memperhatikan apakah mereka berada dalam sebuah blok :ttag:`autoescape` atau tidak. Deretan karakter ini hanya diloloskan sekali, bagaimanapun, bahkan jika pelolosan otomatis berlaku."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:218
msgid ""
"Internally, these strings are of type ``EscapeBytes`` or ``EscapeText``. "
"Generally you don't have to worry about these; they exist for the "
"implementation of the :tfilter:`escape` filter."
msgstr "Secara internal, deretan karakter ini adaah dari jenis ``EscapeBytes`` or ``EscapeText``. Umumnya anda tidak perlu khawatir tentang ini; mereka ada untuk penerapan dari :tfilter:`escape` filter. "

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:222
msgid "Template filter code falls into one of two situations:"
msgstr "Kode cetakan penyaring gagal kedalam satu dari dua keadaan:"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:224
msgid ""
"Your filter does not introduce any HTML-unsafe characters (``<``, ``>``, "
"``'``, ``\"`` or ``&``) into the result that were not already present. In "
"this case, you can let Django take care of all the auto-escaping handling "
"for you. All you need to do is set the ``is_safe`` flag to ``True`` when you"
" register your filter function, like so::"
msgstr "Penyaring anda tidak memperkenalkan salah satu karakter tidak aman (``<``, ``>``, ``'``, ``\"`` atau ``&``) kedalam hasil yang tidak hadir. Dalam kasus ini, anda dapat membiarkan Django mengambil semua penanganan pelolosan otomatis untuk anda. Semua anda butuh untuk dilakukan adalah menyetel bendera ``is_safe`` ke ``True`` ketika anda mendaftar fungsi penyaringan, seperti begitu:"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:234
msgid ""
"This flag tells Django that if a \"safe\" string is passed into your filter,"
" the result will still be \"safe\" and if a non-safe string is passed in, "
"Django will automatically escape it, if necessary."
msgstr "Bendera ini memberitahu Django bahwa jika sebuah deretan karakter \"safe\" dilewatkan kedalam penyaring anda, hasil akan masih menjadi \"safe\" dan jika sebuah deretan karakter tidak aman dilewatkan, Django akan otomatis meloloskannya, jika diperlukan."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:238
msgid ""
"You can think of this as meaning \"this filter is safe -- it doesn't "
"introduce any possibility of unsafe HTML.\""
msgstr "Anda dapat berpikir dari ini sebagai berarti \"penyaring ini aman -- dia tidak memperkenalkan kemungkinan apapun dari HTML tidak aman.\""

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:241
msgid ""
"The reason ``is_safe`` is necessary is because there are plenty of normal "
"string operations that will turn a ``SafeData`` object back into a normal "
"``str`` or ``unicode`` object and, rather than try to catch them all, which "
"would be very difficult, Django repairs the damage after the filter has "
"completed."
msgstr "Alasan ``is_safe`` adalah diperlukan bahwa karena ada banyak tindakan deretan karakter biasa yang akan mengembalikan obyek ``SafeData`` kembali ke dalam obyek ``str`` atau ``unicode`` normal, daripada mencoba menangkap semuanya, yang akan sangat sulit, Django memperbaiki kerusakan setelah penyaring telah lengkap."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:247
msgid ""
"For example, suppose you have a filter that adds the string ``xx`` to the "
"end of any input. Since this introduces no dangerous HTML characters to the "
"result (aside from any that were already present), you should mark your "
"filter with ``is_safe``::"
msgstr "Sebagi contoh, andaikan anda mempunyai sebuah penyaring yang menambahkan deretan karakter ``xx`` ke akhir dari masukan. Sejak ini diperkenalkan karakter HTML tidak berbahaya ke hasil (selain dari apapun itu sudah hadir), anda harus menandai penyaring anda dengan ``is_safe``::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:256
msgid ""
"When this filter is used in a template where auto-escaping is enabled, "
"Django will escape the output whenever the input is not already marked as "
"\"safe\"."
msgstr "Ketika penyaring ini digunakan dalam sebuah cetakan dimana pelolosan otomatis diadakan, Django akan meloloskan keluaran ketika masukan belum ditandai sebagai \"safe\"."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:260
msgid ""
"By default, ``is_safe`` is ``False``, and you can omit it from any filters "
"where it isn't required."
msgstr "Secara awal, ``is_safe`` adalah ``False``, dan anda dapat menghilangkannya dari saringan dimana dia tidak dibutuhkan."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:263
msgid ""
"Be careful when deciding if your filter really does leave safe strings as "
"safe. If you're *removing* characters, you might inadvertently leave "
"unbalanced HTML tags or entities in the result. For example, removing a "
"``>`` from the input might turn ``<a>`` into ``<a``, which would need to be "
"escaped on output to avoid causing problems. Similarly, removing a semicolon"
" (``;``) can turn ``&amp;`` into ``&amp``, which is no longer a valid entity"
" and thus needs further escaping. Most cases won't be nearly this tricky, "
"but keep an eye out for any problems like that when reviewing your code."
msgstr "Hati-hati ketika memutuskan jika penyaring anda sangat membiarkan deretan karakter aman sebagai safe. Jika anda sedang *memidnahkan* karakter, anda mungkin secara tidak sengaja membiarkan etiket HTML tidak seimbang atau kesatuan dalam hasil. Sebagai contoh, memindahkan sebuah ``>`` dari masukan mungkin mengubah ``<a>`` menjadi ``<a``, yang akan butuh diloloskan pada keluaran untuk menghindari masalah. Demikian pula, memindahkan titik koma (``;``) dapat merubah ``&amp;`` into ``&amp``, yang tidak lagi kesatuan sah dan demikian butuh pelolosan. Kebanyakan kasus tidak dekat dengan trik ini, tetapi jaga mata anda untuk masalah apapun seperti itu ketika meninjau kode anda."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:273
msgid ""
"Marking a filter ``is_safe`` will coerce the filter's return value to a "
"string.  If your filter should return a boolean or other non-string value, "
"marking it ``is_safe`` will probably have unintended consequences (such as "
"converting a boolean False to the string 'False')."
msgstr "Menandai sebuah penyaring ``is_safe`` akan memaksa nilai kembalian penyaring menjadi deretan karakter. Jika penyaring anda harus mengembalikan sebuah boolean atau nilai bukan deretan karakter, tandai dia ``is_safe`` akan mungkin mempunyai konsekuensi yang tidak diinginkan (seperti merubah boolean False menjadi deretan karakter 'False')."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:279
msgid ""
"Alternatively, your filter code can manually take care of any necessary "
"escaping. This is necessary when you're introducing new HTML markup into the"
" result. You want to mark the output as safe from further escaping so that "
"your HTML markup isn't escaped further, so you'll need to handle the input "
"yourself."
msgstr "Kalau tidak, kode penyaring anda dapat secara manual merawat pelolosan apapun yang dibutuhkan. Ini adalah penting ketika anda sedang memperkenalkan markah HTML baru kedalam hasil. Anda ingin menandai keluaran sebagai aman dari pelolosan lebih lanjut sehingga markah HTML anda tidak diloloskan lebih lanjut, jadi anda akan butuh menangani masukan diri anda sendiri."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:285
msgid ""
"To mark the output as a safe string, use "
":func:`django.utils.safestring.mark_safe`."
msgstr "Untuk menandai keluaran sebagai deretan karakter aman, gunakan :func:`django.utils.safestring.mark_safe`."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:288
msgid ""
"Be careful, though. You need to do more than just mark the output as safe. "
"You need to ensure it really *is* safe, and what you do depends on whether "
"auto-escaping is in effect. The idea is to write filters that can operate in"
" templates where auto-escaping is either on or off in order to make things "
"easier for your template authors."
msgstr "Berhati-hatilah, meskipun. Anda butuh melakukan lagi daripada hanya menandai keluaran sebagai aman. Anda butuh memastikan dia sangat *adalah* aman, dan apa yang anda lakukan tergantung pada apakah pelolosan otomatis berpengaruh. Idenya adalah menulis penyaring yang dapat berjalan dalam cetakan dimana pelolosan otomatis salah satunya nyala atau mati agar membuat hal-hal semakin mudah untuk cetakan penulis anda."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:294
msgid ""
"In order for your filter to know the current auto-escaping state, set the "
"``needs_autoescape`` flag to ``True`` when you register your filter "
"function. (If you don't specify this flag, it defaults to ``False``). This "
"flag tells Django that your filter function wants to be passed an extra "
"keyword argument, called ``autoescape``, that is ``True`` if auto-escaping "
"is in effect and ``False`` otherwise. It is recommended to set the default "
"of the ``autoescape`` parameter to ``True``, so that if you call the "
"function from Python code it will have escaping enabled by default."
msgstr "Agar penyaring anda mengetahui keadaan pelolosan otomatis saat ini, setel bendera ``needs_autoescape`` ke ``True`` ketika anda mendaftar fungsi penyaring anda. (Jika anda tidak menentukan bendera ini, dia awalnya adalah ``False``). Bendera ini mengatakan Django bahwa fungsi penyaring anda ingin dilewatkan sebuah argumen katakunci tambahan, dipanggil ``autoescape``, yaitu ``True`` jika pelolosan otomatis dalam efek dan ``False`` sebaliknya. Sangat dianjurkan untuk menyetel parameter ``autoescape`` ke ``True``, sehingga jika anda memanggil fungsi dari kode Python dia akan mempunyai pelolosan diadakan secara awal."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:303
msgid ""
"For example, let's write a filter that emphasizes the first character of a "
"string::"
msgstr "Sebagai contoh, mari kita menulis penyaring yang menekankan karakter pertama dari sebuah deretan karakter::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:322
msgid ""
"The ``needs_autoescape`` flag and the ``autoescape`` keyword argument mean "
"that our function will know whether automatic escaping is in effect when the"
" filter is called. We use ``autoescape`` to decide whether the input data "
"needs to be passed through ``django.utils.html.conditional_escape`` or not. "
"(In the latter case, we just use the identity function as the \"escape\" "
"function.) The ``conditional_escape()`` function is like ``escape()`` except"
" it only escapes input that is **not** a ``SafeData`` instance. If a "
"``SafeData`` instance is passed to ``conditional_escape()``, the data is "
"returned unchanged."
msgstr "Bendera ``needs_autoescape`` dan argumen katakunci ``autoescape`` berarti bahwa fungsi kami akan mengetahui apakah pelolosan otomatis berada dalam efek ketika penyaring dipanggil. Kami menggunakan ``autoescape`` untuk memutuskan apakah data masukan butuh dilewatkan melalui ``django.utils.html.conditional_escape`` atau tidak. (Dalam kasus terakhir, kami hanya menggunakan fungsi identitas sebagai fungsi \"escape\".) Fungsi ``conditional_escape()`` seperti ``escape()`` kecuali dia hanya meloloskan masukan yang **bukan** instance ``SafeData``. Jika sebuah instance ``SafeData`` dilewatkan ke ``conditional_escape()``, data dikembalikan tidak berubah."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:332
msgid ""
"Finally, in the above example, we remember to mark the result as safe so "
"that our HTML is inserted directly into the template without further "
"escaping."
msgstr "Akhirnya, dalam contoh diatas, kami ingat untuk menandai hasil sebagai aman sehingga HTML kami dimasukkan langsung kedalam cetakan tanpa pelolosan lanjut."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:336
msgid ""
"There's no need to worry about the ``is_safe`` flag in this case (although "
"including it wouldn't hurt anything). Whenever you manually handle the auto-"
"escaping issues and return a safe string, the ``is_safe`` flag won't change "
"anything either way."
msgstr "Tidak perlu khawatir tentang bendera ``is_safe`` dalam kasus ini (meskipun termasuknya tidak akaan melukai apapun). Kapanpun anda secara manual menangani masalah pelolosan otomatis dan mengembalikan sebuah deretan karakter aman, bendera ``is_safe`` tidak merubah apapun."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:341
msgid "Avoiding XSS vulnerabilities when reusing built-in filters"
msgstr "Menghindari kerentanan XSS ketika menggunakan ulang filter bawaan"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:345
msgid ""
"Django's built-in filters have ``autoescape=True`` by default in order to "
"get the proper autoescaping behavior and avoid a cross-site script "
"vulnerability."
msgstr "Penyaring siap pakai Django mempunyai ``autoescape=True`` secara awal agar mendapatkan kebiasaan pelolosan otomatis yang benar dan menghindari kerentanan cross-site script."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:349
msgid ""
"In older versions of Django, be careful when reusing Django's built-in "
"filters as ``autoescape`` defaults to ``None``. You'll need to pass "
"``autoescape=True`` to get autoescaping."
msgstr "Dalam versi lama Django, berhati-hatilah ketika menggunakan penyaring pasang-tetap Django sebagai ``autoescape`` nilai awal ke ``None``. Anda akan butuh melewatkan ``autoescape=True`` untuk mendapatkan pelolosan otomatis."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:353
msgid ""
"For example, if you wanted to write a custom filter called "
"``urlize_and_linebreaks`` that combined the :tfilter:`urlize` and "
":tfilter:`linebreaksbr` filters, the filter would look like::"
msgstr "Sebagai contoh, jika anda ingin menulis penyesuaian penyaring dipanggil ``urlize_and_linebreaks`` yang menggabungkan penyaring :tfilter:`urlize` dan :tfilter:`linebreaksbr`, penyaring akan kelihatan seperti::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:366
msgid "Then:"
msgstr "Kemudian:"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:372
msgid "would be equivalent to:"
msgstr "akan setara dengan:"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:381
msgid "Filters and time zones"
msgstr "Saringan dan zona waktu"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:383
msgid ""
"If you write a custom filter that operates on :class:`~datetime.datetime` "
"objects, you'll usually register it with the ``expects_localtime`` flag set "
"to ``True``::"
msgstr "Jika anda menulis sebuah penyesuaian penyaring yang dijalankan pada obyek :class:`~datetime.datetime`, anda akan biasanya mendaftarkannya dengan bendera ``expects_localtime`` disetel ke ``True``::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:394
msgid ""
"When this flag is set, if the first argument to your filter is a time zone "
"aware datetime, Django will convert it to the current time zone before "
"passing it to your filter when appropriate, according to :ref:`rules for "
"time zones conversions in templates <time-zones-in-templates>`."
msgstr "Ketika bendera ini disetel, jika argumen pertama pada penyaring anda adalah zona waktu perhatikan datetime, Django akan merubahnya ke zona waktu saat ini sebelum melewatkannya ke penyaring anda ketika sesuai, menurut pada :ref:`aturan untuk perubahan zona waktu dalam cetakan <time-zones-in-templates>`."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:402
msgid "Writing custom template tags"
msgstr "Menulis etiket cetakan penyesuaian"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:404
msgid ""
"Tags are more complex than filters, because tags can do anything. Django "
"provides a number of shortcuts that make writing most types of tags easier. "
"First we'll explore those shortcuts, then explain how to write a tag from "
"scratch for those cases when the shortcuts aren't powerful enough."
msgstr "Etiket lebih rumit daripada penyaring, karena etiket dapat melakukan apapun. Django menyediakan sejumlah jalan pintas yang membuat penulisan kebanyakan jenis etiket lebih mudah. Pertama kami akan menjelajahi jalan pintas tersebut, kemudian menjelaskan bagaimana menulis sebauh etiket dari goresan untuk kasus=kasus tersebut ketika jalan pintas tidak cukup kuat."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:412
msgid "Simple tags"
msgstr "Etiket sederhana"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:416
msgid ""
"Many template tags take a number of arguments -- strings or template "
"variables -- and return a result after doing some processing based solely on"
" the input arguments and some external information. For example, a "
"``current_time`` tag might accept a format string and return the time as a "
"string formatted accordingly."
msgstr "Banyak cetakan etiket mengambil sejumlah argumen -- deretan karakter atau cetakan variabel -- dan mengembalikan sebuah hasil setelah melakukan beberapa pengolahan berdasarkan hanya pada masukan argumen dan beberapa informasi luar. Sebagai contoh, sebuah etiket ``current_time`` mungkin menerima sebuah bentuk deretan karakter dan mengembalikan waktu sebagai bentuk deretan karakter."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:422
msgid ""
"To ease the creation of these types of tags, Django provides a helper "
"function, ``simple_tag``. This function, which is a method of "
"``django.template.Library``, takes a function that accepts any number of "
"arguments, wraps it in a ``render`` function and the other necessary bits "
"mentioned above and registers it with the template system."
msgstr "Untuk meringankan pembuatan dari jenis ini dari etiket, Django menyediakan fungsi pembantu, ``simple_tag``. Fungsi ini, yaitu sebuah cara dari ``django.template.Library``, mengambil sebuah fungsi yang menerima angka apapun dari argumen, membungkusnya dalam fungsi ``render`` dan bit-bit yang dibutuhkan lainnya disebutkan diatas dan mendaftarkannya dengan cetakan sistem."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:428
msgid "Our ``current_time`` function could thus be written like this::"
msgstr "Fungsi ``current_time`` kami dapat jadi ditulis seperti ini::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:439
msgid "A few things to note about the ``simple_tag`` helper function:"
msgstr "Beberapa hal untuk dicatat tentang fungsi pembantu ``simple_tag``:"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:441
msgid ""
"Checking for the required number of arguments, etc., has already been done "
"by the time our function is called, so we don't need to do that."
msgstr "Memeriksa angka dibutuhkan dari argumen, dll., telah selesai dilakukan oleh waktu fungsi kami dipanggil, jadi kami tidak butuh melakukan itu."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:443
msgid ""
"The quotes around the argument (if any) have already been stripped away, so "
"we just receive a plain string."
msgstr "Kutipan disekeliling argumen (jika ada) telah dilucuti, jadi kami hanya menerima deretan karakter kosong."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:445
msgid ""
"If the argument was a template variable, our function is passed the current "
"value of the variable, not the variable itself."
msgstr "Jika argumen adalah cetakan variabel, fungsi kami dilewatkan nilai sast ini dari variabel, bukan variabel itu sendiri."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:448
msgid ""
"Unlike other tag utilities, ``simple_tag`` passes its output through "
":func:`~django.utils.html.conditional_escape` if the template context is in "
"autoescape mode, to ensure correct HTML and protect you from XSS "
"vulnerabilities."
msgstr "Tidak seperti peralatan etiket lain, ``simple_tag`` melewatkan keluarannya melalui :func:`~django.utils.html.conditional_escape` jika konteks cetakan dalam suasana pelolosan otomatis, untuk memastikan HTML benar dan melindungi anda dari kerentanan XSS."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:453
msgid ""
"If additional escaping is not desired, you will need to use "
":func:`~django.utils.safestring.mark_safe` if you are absolutely sure that "
"your code does not contain XSS vulnerabilities. For building small HTML "
"snippets, use of :func:`~django.utils.html.format_html` instead of "
"``mark_safe()`` is strongly recommended."
msgstr "Jika tambahan pelolosan tidak diharapkan, anda akan butuh menggunakan :func:`~django.utils.safestring.mark_safe` jika anda sepenuhnya yakin bahwa kode anda tidak mengandung kerentanan XSS. Untuk membangun potongan kecil HTML, gunakan :func:`~django.utils.html.format_html` daripada ``mark_safe()`` sangat kuat dianjurkan."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:461
msgid ""
"Auto-escaping for ``simple_tag`` as described in the previous two paragraphs"
" was added."
msgstr "Pelolosan otomatis untuk ``simple_tag`` seperti digambarkan dalam dua paragraf sebelumnya telah ditambahkan."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:464
msgid ""
"If your template tag needs to access the current context, you can use the "
"``takes_context`` argument when registering your tag::"
msgstr "Jika etiket cetakan anda butuh untuk mengakses konteks saat ini, anda dapat menggunakan argumen ``takes_context`` ketika mendaftarkan etiket anda::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:472
msgid "Note that the first argument *must* be called ``context``."
msgstr "Catat bahwa argumen pertama *harus* dipanggil ``context``."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:474
msgid ""
"For more information on how the ``takes_context`` option works, see the "
"section on :ref:`inclusion tags<howto-custom-template-tags-inclusion-tags>`."
msgstr "Untuk informasi lebih pada bagaimana pilihan ``takes_context`` bekerja, lihat bagian pada :ref:`inclusion tags<howto-custom-template-tags-inclusion-tags>`."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:477
msgid "If you need to rename your tag, you can provide a custom name for it::"
msgstr "Jika anda butuh menamai kembali etiket anda, anda dapat menyediakan nama penyesuaian untuknya::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:485
msgid ""
"``simple_tag`` functions may accept any number of positional or keyword "
"arguments. For example::"
msgstr "Fungsi ``simple_tag`` mungkin menerima angka apapun dari argumen terkait atau kata kunci. Sebagai contoh::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:495
#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:643
msgid ""
"Then in the template any number of arguments, separated by spaces, may be "
"passed to the template tag. Like in Python, the values for keyword arguments"
" are set using the equal sign (\"``=``\") and must be provided after the "
"positional arguments. For example:"
msgstr "Kemudian dalam cetakan angka apapun dari argumen, dipisahkan oleh spasi, mungkin dilewatkan ke cetakan etiket. Seperti dalam Python, nilai untuk argumen katakunci disetel menggunakan tanda sama dengan (\"``=``\") dan harus disediakan setelah penempatan argumen. Sebagai contoh:"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:506
msgid ""
"It's possible to store the tag results in a template variable rather than "
"directly outputting it. This is done by using the ``as`` argument followed "
"by the variable name. Doing so enables you to output the content yourself "
"where you see fit:"
msgstr "Itu dimungkinkan untuk menyimpan hasil etiket dalam sebuah cetakan variabel daripada secara langsung mengeluarkannya. Ini dilakukan dengan menggunakan argumen ``as`` diikuti oleh nama variabel. Melakukannya mengadakan anda untuk mengeluarkan isi diri anda dimana anda melihatnya cocok:"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:519
msgid "Inclusion tags"
msgstr "Penyertaaan etiket"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:523
msgid ""
"Another common type of template tag is the type that displays some data by "
"rendering *another* template. For example, Django's admin interface uses "
"custom template tags to display the buttons along the bottom of the "
"\"add/change\" form pages. Those buttons always look the same, but the link "
"targets change depending on the object being edited -- so they're a perfect "
"case for using a small template that is filled with details from the current"
" object. (In the admin's case, this is the ``submit_row`` tag.)"
msgstr "Jenis umum lainnya dari cetakan etiket adalah jenis yang menampilkan beberapa data dengan membangun cetakan *lain*. Sebagai contoh, antarmuka admin Django menggunakan penyesuaian etiket cetakan untuk menampilkan tombol dibawah dari halaman formulir \"add/change\". Tombol-tombol tersebut selalu terlihat sama, tetapi ssaran tautan berubah tergantung pada obyek yang sedang disunting -- sehingga mereka kasus sempurna untuk menggunakan cetakan kecil yang diisi dengan rincian dari obyek saat ini. (Dalam kasus admin, ini adalah etiket ``submit_row``.)"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:531
msgid "These sorts of tags are called \"inclusion tags\"."
msgstr "Urutan etiket ini dipanggil \"penyertaan etiket\"."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:533
msgid ""
"Writing inclusion tags is probably best demonstrated by example. Let's write"
" a tag that outputs a list of choices for a given ``Poll`` object, such as "
"was created in the :ref:`tutorials <creating-models>`. We'll use the tag "
"like this:"
msgstr "Menulis pencatuman etiket adalah mungkin pertunjukan terbaik dengan contoh. Mari kita menulis sebuah etiket yang mengeluarkan daftar pilihan untuk obyek ``Poll`` yang diberikan, seperti dibuat dalam :ref:`tutorial <creating-models>`. Kami akan menggunakan etiket seperti ini:"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:541
msgid "...and the output will be something like this:"
msgstr "...dan keluaran akan kelihatan seperti ini:"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:551
msgid ""
"First, define the function that takes the argument and produces a dictionary"
" of data for the result. The important point here is we only need to return "
"a dictionary, not anything more complex. This will be used as a template "
"context for the template fragment. Example::"
msgstr "Pertama, tentukan fungsi yang mengambil argumen dan menghasulkan kamus dari data untuk hasil. Titik terpenting disini adalah kami hanya butuh mengembalikan sebauh kamus, bukan apapun lebih rumit. Ini akan digunakan sebagai konteks cetakan untuk fragmen cetakan. Contoh::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:560
msgid ""
"Next, create the template used to render the tag's output. This template is "
"a fixed feature of the tag: the tag writer specifies it, not the template "
"designer. Following our example, the template is very simple:"
msgstr "Selanjutnya, buat cetakan digunakan untuk membangun keluaran etiket. Cetakan ini adalah fitur tetap dari etiket: penulis etiket menentukannya, bukan perancang etiket. Mengikuti contoh kami, cetakan sangat mudah:"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:572
msgid ""
"Now, create and register the inclusion tag by calling the "
"``inclusion_tag()`` method on a ``Library`` object. Following our example, "
"if the above template is in a file called ``results.html`` in a directory "
"that's searched by the template loader, we'd register the tag like this::"
msgstr "Sekarang, buat dan daftar penyertaan etiket dengan memanggil cara ``inclusion_tag()`` pada sebuah obyek ``Library``. Mengikuti contoh kami, jika cetakan diatas dalam sebuah berkas dipanggil ``results.html`` dalam sebuah direktori yang dicari oleh pemuat cetakan, kami akan mendaftar etiket seperti ini::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:582
msgid ""
"Alternatively it is possible to register the inclusion tag using a "
":class:`django.template.Template` instance::"
msgstr "Kemungkinan lain dia memungkinkan mendaftarkan pemasukan etiket menggunakan instace :class:`django.template.Template`::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:589
msgid "...when first creating the function."
msgstr "...ketika pertama membuat fungsi."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:591
msgid ""
"Sometimes, your inclusion tags might require a large number of arguments, "
"making it a pain for template authors to pass in all the arguments and "
"remember their order. To solve this, Django provides a ``takes_context`` "
"option for inclusion tags. If you specify ``takes_context`` in creating a "
"template tag, the tag will have no required arguments, and the underlying "
"Python function will have one argument -- the template context as of when "
"the tag was called."
msgstr "Terkadang, penyertaan etiket anda mungkin membutuhkan sejumlah besar argumen, membuatnya sakit untuk cetakan penulis melewatkan semua argumen dan mengingat urutan mereka. Untuk mengatasi ini, Django menyediakan sebuah pilihan ``takes_context`` untuk penyertaan etiket. Jika anda menentukan ``takes_context`` dalam sebuah cetakan etiket, etiket akan tidak membutuhkan argumen, dan pokok fungsi Python akan mempunyai satu argumen -- konteks cetakan mulai ketika etiket dipanggil."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:598
msgid ""
"For example, say you're writing an inclusion tag that will always be used in"
" a context that contains ``home_link`` and ``home_title`` variables that "
"point back to the main page. Here's what the Python function would look "
"like::"
msgstr "Sebagai contoh, katakan anda sedang menulis sebuah penyertaan etiket yang akan selalu digunakan dalam sebuah konteks yang mengandung variabel ``home_link`` dan ``home_title`` yang menunjuk kembali ke halaman utama. Disini fungsi Python akan kelihatan seperti::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:609
msgid ""
"Note that the first parameter to the function *must* be called ``context``."
msgstr "Catat bahwa parameter pertama pada fungsi *harus* dipanggil ``context``."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:611
msgid ""
"In that ``register.inclusion_tag()`` line, we specified "
"``takes_context=True`` and the name of the template. Here's what the "
"template ``link.html`` might look like:"
msgstr "Dalam baris ``register.inclusion_tag()`` itu, kami mencirikan ``takes_context=True`` dan nama dari cetakan. Ini adalah cetakan ``link.html`` mungkin kelihatan seperti:"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:619
msgid ""
"Then, any time you want to use that custom tag, load its library and call it"
" without any arguments, like so:"
msgstr "Lalu, kapanpun anda ingin menggunakan tag tersuai, muat pustakanya dan panggil tanpa argument, seperti:"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:626
msgid ""
"Note that when you're using ``takes_context=True``, there's no need to pass "
"arguments to the template tag. It automatically gets access to the context."
msgstr "Catat bahwa ketika anda menggunakan ``takes_context=True``, tidak perlu melewatkan argumen ke etiket cetakan. Dia otomatis mendapatkan akses ke konteks."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:629
msgid ""
"The ``takes_context`` parameter defaults to ``False``. When it's set to "
"``True``, the tag is passed the context object, as in this example. That's "
"the only difference between this case and the previous ``inclusion_tag`` "
"example."
msgstr "Parameter ``takes_context`` awalnya adalah ``False``. Ketika disetel ke ``True``, etiket melewatkan obyek konteks, seperti dalam contoh ini. Itu hanya oerbedaan diantara kasus ini dan contoh ``inclusion_tag`` sebelumnya."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:633
msgid ""
"``inclusion_tag`` functions may accept any number of positional or keyword "
"arguments. For example::"
msgstr "Fungsi ``inclusion_tag`` mungkin menerima angka apapun dari penempatan atau argumen kata kunci. Sebagai contoh::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:653
msgid "Assignment tags"
msgstr "Menyerahkan etiket"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:659
msgid ""
"``simple_tag`` can now store results in a template variable and should be "
"used instead."
msgstr "``simple_tag`` da[at sekarang menyimpan hasil dalam variabel cetakan dan harus digunakan."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:662
msgid ""
"To ease the creation of tags setting a variable in the context, Django "
"provides a helper function, ``assignment_tag``. This function works the same"
" way as :meth:`~django.template.Library.simple_tag` except that it stores "
"the tag's result in a specified context variable instead of directly "
"outputting it."
msgstr "Untuk meringankan pembuatan etiket pengaturan sebuah variabel dalam konteks, Django menyediakan sebuah fungsi pembantu, ``assignment_tag``. Fungsi ini bekerja di jalan yang sama sebagai :meth:`~django.template.Library.simple_tag` kecuali dia menyimpan hasil etiket dalam variabel konteks ditentukan daripada secara langsung mengeluarkannya."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:667
msgid ""
"Our earlier ``current_time`` function could thus be written like this::"
msgstr "Fungsi ``current_time`` awal kami dapat ditulis seperti ini:: "

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:673
msgid ""
"You may then store the result in a template variable using the ``as`` "
"argument followed by the variable name, and output it yourself where you see"
" fit:"
msgstr "Anda dapat menyimpan hasil dalam sebuah variabel cetakan menggunakan argumen ``as`` diikuti oleh nama variabel, dan keluarannya itu sendiri dimana anda melihatnya sesuai:"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:682
msgid "Advanced custom template tags"
msgstr "Etiket cetakan penyesuaian tingkat lanjut"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:684
msgid ""
"Sometimes the basic features for custom template tag creation aren't enough."
" Don't worry, Django gives you complete access to the internals required to "
"build a template tag from the ground up."
msgstr "Terkadang fitur dasar untuk pembuatan etiket cetakan penyesuaian tidak cukup. Jangan khawatir, Django memberikan anda akses lengkap ke internal yang dibutuhkan untuk membangun sebuah etiket cetakan dari bawah ke atas."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:689
msgid "A quick overview"
msgstr "Ikhtisar cepat"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:691
msgid ""
"The template system works in a two-step process: compiling and rendering. To"
" define a custom template tag, you specify how the compilation works and how"
" the rendering works."
msgstr "Sistem cetakan bekerja dalam dua langkah pengolahan: menyusun dan membangun. Untuk menentukan etiket cetakan penyesuaian, anda menentukan bagaimana penyusunan bekerja dan bagaimana pembangunan bekerja."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:695
msgid ""
"When Django compiles a template, it splits the raw template text into "
"''nodes''. Each node is an instance of ``django.template.Node`` and has a "
"``render()`` method. A compiled template is, simply, a list of ``Node`` "
"objects. When you call ``render()`` on a compiled template object, the "
"template calls ``render()`` on each ``Node`` in its node list, with the "
"given context. The results are all concatenated together to form the output "
"of the template."
msgstr "Ketika Django menyusun sebauh cetakan, dia memisahkan teks cetakan mentah kedalam ''nodes''. Setiap node adalah sebuah instance dari ``django.template.Node`` dan mempunyai sebuah cara ``render()``. Sebuah cetakan tersusun adalah, sederhana, sebuah daftar dari obyek ``Node``. Ketika anda memanggil ``render()`` pada sebuah obyek cetakan disusun, cetakan memanggil ``render()`` pada setiap ``Node`` dalam daftar nodenya, dengan konteks yang diberikan. Hasil adalah semua digabungkan bersama untuk membentuk keluaran dari cetakan."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:702
msgid ""
"Thus, to define a custom template tag, you specify how the raw template tag "
"is converted into a ``Node`` (the compilation function), and what the node's"
" ``render()`` method does."
msgstr "Jadi, untuk menentukan penyesuaian cetakan etiket, anda menentukan bagaimana cetakan etiket mentah dirubah kedalam ``Node`` (fungsi penyusunan), dan apa cara ``render()`` node lakukan."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:707
msgid "Writing the compilation function"
msgstr "Menulis fungsi himpunan"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:709
msgid ""
"For each template tag the template parser encounters, it calls a Python "
"function with the tag contents and the parser object itself. This function "
"is responsible for returning a ``Node`` instance based on the contents of "
"the tag."
msgstr "Untuk setiap etiket cetakan pertemuan pengurai cetakan, dia memanggil fungsi Python dengan isi etiket dan pengurai obyek itu sendiri. Fungsi ini bertanggungjawab untuk mengembalikan sebuah instance ``Node`` berdasarkan pada isi dari etiket."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:713
msgid ""
"For example, let's write a full implementation of our simple template tag, "
"``{% current_time %}``, that displays the current date/time, formatted "
"according to a parameter given in the tag, in :func:`~time.strftime` syntax."
" It's a good idea to decide the tag syntax before anything else. In our "
"case, let's say the tag should be used like this:"
msgstr "Sebagai contoh, mari kita menulis penerapan lengkap dari cetakan etiket sederhana kami, ``{% current_time %}``, yang menampilkan tanggal/waktu saat ini, dibentuk menurut sebuah parameter yang diberikan dalam etiket, di sintaksis :func:`~time.strftime`. Adalah ide bagus utnuk memutuskan etiket sintaksis sebelum yang lainnya. Dalam kasus kami, mari kita katakan etiket harus digunakan seperti ini:"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:723
msgid ""
"The parser for this function should grab the parameter and create a ``Node``"
" object::"
msgstr "Pengurai untuk fungsi ini harus mengambil parameter dan membuat obyek ``Node``::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:742
#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:794
msgid "Notes:"
msgstr "Catatan:"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:744
msgid ""
"``parser`` is the template parser object. We don't need it in this example."
msgstr "`parser`` adalah obyek pengurai cetakan. Kami tidak membutuhkannya dalam contoh ini."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:747
msgid ""
"``token.contents`` is a string of the raw contents of the tag. In our "
"example, it's ``'current_time \"%Y-%m-%d %I:%M %p\"'``."
msgstr "``token.contents`` adalah deretan karakter dari isi mentah dari etiket. Dalam contoh kami, dia adalah ``'current_time \"%Y-%m-%d %I:%M %p\"'``."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:750
msgid ""
"The ``token.split_contents()`` method separates the arguments on spaces "
"while keeping quoted strings together. The more straightforward "
"``token.contents.split()`` wouldn't be as robust, as it would naively split "
"on *all* spaces, including those within quoted strings. It's a good idea to "
"always use ``token.split_contents()``."
msgstr "Cara ``token.split_contents()`` memisahkan argumen pada ruang selama menjaga deretan karakter dikutip bersama. Lebih mudah ``token.contents.split()`` tidak akan menjadi kuat, karena akan naif pisah pada *semua* ruang, termasuk itu dalam deretan karakter dikutip. Adalah ide bagus untuk selalu menggunakan ``token.split_contents()``."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:756
msgid ""
"This function is responsible for raising "
"``django.template.TemplateSyntaxError``, with helpful messages, for any "
"syntax error."
msgstr "Fungsi ini bertanggungjawab untuk memunculkan ``django.template.TemplateSyntaxError``, dengan pesan membantu, untuk sintakses kesalahan apapun."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:760
msgid ""
"The ``TemplateSyntaxError`` exceptions use the ``tag_name`` variable. Don't "
"hard-code the tag's name in your error messages, because that couples the "
"tag's name to your function. ``token.contents.split()[0]`` will ''always'' "
"be the name of your tag -- even when the tag has no arguments."
msgstr "Pengecualian ``TemplateSyntaxError`` menggunakan variabel ``tag_name``. Jangan mengkode keraskan nama etiket dalam pesan-pesan kesalahan anda, karena itu memasangkan nama etiket ke fungsi anda. ``token.contents.split()[0]`` akan ''selalu'' menjadi nama dari etiket anda -- bahkan ketika etiket tidak mempunyai argumen."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:766
msgid ""
"The function returns a ``CurrentTimeNode`` with everything the node needs to"
" know about this tag. In this case, it just passes the argument -- "
"``\"%Y-%m-%d %I:%M %p\"``. The leading and trailing quotes from the template"
" tag are removed in ``format_string[1:-1]``."
msgstr "Fungsi mengembalikan sebuah ``CurrentTimeNode`` dengan semuanya yang node butuhkan untuk mengetahui tentang etiket ini. Dalam kasus ini, dia hanya melewatkan argumen -- ``\"%Y-%m-%d %I:%M %p\"``. Awalan dan akhiran kutipan dari cetakan etiket dipindahkan dalam ``format_string[1:-1]``."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:771
msgid ""
"The parsing is very low-level. The Django developers have experimented with "
"writing small frameworks on top of this parsing system, using techniques "
"such as EBNF grammars, but those experiments made the template engine too "
"slow. It's low-level because that's fastest."
msgstr "Penguraian adalah tingkat-rendah. Pengembang Django mempunyai percobaan dengan menulis kerangka kecil diatas dari sistem penyurai ini, menggunakan teknik seperti tata bahasa EBNF, tetapi percobaan tersebut membuat cetakan mesin terlalu lambat. Dia adalah tingkat-rendah karena itu tercepat."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:777
msgid "Writing the renderer"
msgstr "Menulis pembangun"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:779
msgid ""
"The second step in writing custom tags is to define a ``Node`` subclass that"
" has a ``render()`` method."
msgstr "Langkah kedua dalam menulis penyesuaian etiket adalah menentukan sebuah subkelas ``Node`` yang mempunyai cara ``render()``."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:782
msgid "Continuing the above example, we need to define ``CurrentTimeNode``::"
msgstr "Melanjutkan contoh diatas, kami butuh menentukan ``CurrentTimeNode``::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:796
msgid ""
"``__init__()`` gets the ``format_string`` from ``do_current_time()``. Always"
" pass any options/parameters/arguments to a ``Node`` via its ``__init__()``."
msgstr "``__init__()`` mendapatkan ``format_string`` dari ``do_current_time()``. Selalu melewati options/parameters/arguments apapun ke ``Node`` melalui ``__init__()`` nya."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:800
msgid "The ``render()`` method is where the work actually happens."
msgstr "Cara ``render()`` adalah dimana pekerjaan sebenarnya terjadi."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:802
msgid ""
"``render()`` should generally fail silently, particularly in a production "
"environment. In some cases however, particularly if "
"``context.template.engine.debug`` is ``True``, this method may raise an "
"exception to make debugging easier. For example, several core tags raise "
"``django.template.TemplateSyntaxError`` if they receive the wrong number or "
"type of arguments."
msgstr "``render()`` harus pada umumnya gagal secara diam, khususnya dalam lingkungan produksi. Dalam beberapa kasus bagaimanapun, khususnya jika ``context.template.engine.debug`` adalah ``True``, cara ini mungkin memunculkan sebuah pengecualian untuk membuat mencari kesalahan lebih mudah. Sebagai contoh, beberapa etiket inti memunculkan ``django.template.TemplateSyntaxError`` jika mereka menerima nomor atau jenis salah dari argumen"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:809
msgid ""
"Ultimately, this decoupling of compilation and rendering results in an "
"efficient template system, because a template can render multiple contexts "
"without having to be parsed multiple times."
msgstr "Akhirnya, pemisahan ini dari hasil penyusunan dan pembangunan dalam sebuah sistem cetakan efesien, karena sebuah cetakan dapat membangun banyak konteks tanpa harus diuraikan banyak kali."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:816
msgid "Auto-escaping considerations"
msgstr "Pertimbangan pelolosan otomatis"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:818
msgid ""
"The output from template tags is **not** automatically run through the auto-"
"escaping filters (with the exception of "
":meth:`~django.template.Library.simple_tag` as described above). However, "
"there are still a couple of things you should keep in mind when writing a "
"template tag."
msgstr "Keluaran dari cetakan etiket *tidak** otomatis berjalan melalui penyaring pelolosan otomatis (dengan pencegualian dari :meth:`~django.template.Library.simple_tag` seperti yang digambarkan diatas). Bagaimanapun, masih terdapat sepasang hal anda harus ingat ketika menulis sebuah cetakan etiket."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:824
msgid ""
"If the ``render()`` function of your template stores the result in a context"
" variable (rather than returning the result in a string), it should take "
"care to call ``mark_safe()`` if appropriate. When the variable is ultimately"
" rendered, it will be affected by the auto-escape setting in effect at the "
"time, so content that should be safe from further escaping needs to be "
"marked as such."
msgstr "Jika fungsi ``render()`` dari cetakan anda menyimpan hasil dalam sebuah konteks variabel (daripada mengembalikan hasil dalam sebuah deretan karakter), dia harus berhati-hati utnuk memanggil ``mark_safe()`` jika sesuai. Ketika variabel pada akhirnya dibangun, dia akan dipengaruhi oleh pengaturan pelolosan otomatis dalam efek pada saat itu, sehingga isi yang harus aman dari pelolosan lebih lanjut butuh ditandai saja."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:831
msgid ""
"Also, if your template tag creates a new context for performing some sub-"
"rendering, set the auto-escape attribute to the current context's value. The"
" ``__init__`` method for the ``Context`` class takes a parameter called "
"``autoescape`` that you can use for this purpose. For example::"
msgstr "Juga, jika cetakan etiket anda membuat konteks baru untuk melakukan beberapa sub pembangunan, setel atribut pelolosan otomatis ke nilai konteks saat ini. Cara ``__init__`` untuk kelas ``Context`` mengambil parameter dipanggil ``autoescape`` dimana anda dapat menggunakan untuk tujuan ini. Sebagai contoh::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:843
msgid ""
"This is not a very common situation, but it's useful if you're rendering a "
"template yourself. For example::"
msgstr "Ini bukan situasi paling umum, tetapi ini berguna jika anda membangun cetakan anda sendiri. Sebagai contoh::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:852
msgid ""
"The ``template`` attribute of ``Context`` objects was added in Django 1.8. "
":meth:`context.template.engine.get_template "
"<django.template.Engine.get_template>` must be used instead of "
":func:`django.template.loader.get_template` because the latter now returns a"
" wrapper whose ``render`` method doesn't accept a "
":class:`~django.template.Context`."
msgstr "Atribut ``template`` dari obyek ``Context`` telah ditambahkan dalam Django 1.8. :meth:`context.template.engine.get_template <django.template.Engine.get_template>` harus digunakan daripada :func:`django.template.loader.get_template` karena yang terakhir sekarang mengembalikan sebuah pembungkus yang cara ``render`` tidak menerima sebuah :class:`~django.template.Context`. "

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:859
msgid ""
"If we had neglected to pass in the current ``context.autoescape`` value to "
"our new ``Context`` in this example, the results would have *always* been "
"automatically escaped, which may not be the desired behavior if the template"
" tag is used inside a :ttag:`{% autoescape off %}<autoescape>` block."
msgstr "Jika kami mempunyai terlantar untuk dilewatkan dalam nilai ``context.autoescape`` saat ini ke ``Context`` baru kami dalam contoh ini, hasil akan mempunyai *selalu* otomatis diloloskan, yang mungkin perilaku yang tidak diinginkan jika cetakan etiket digunakan dalam sebuah blok :ttag:`{% autoescape off %}<autoescape>`."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:867
msgid "Thread-safety considerations"
msgstr "Pertimbangan Thread-safety"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:869
msgid ""
"Once a node is parsed, its ``render`` method may be called any number of "
"times. Since Django is sometimes run in multi-threaded environments, a "
"single node may be simultaneously rendering with different contexts in "
"response to two separate requests. Therefore, it's important to make sure "
"your template tags are thread safe."
msgstr "Sekali node diuraikan, cara ``render`` dia mungkin dipanggil sejumlah kali. Sejak Django terkadang berjalan dalam lingkungan banyak-rangkaian, sebuah node tunggal mungkin secara berkelanjutan membangun dengan konteks berbeda dalam menjawab ke dua permintaan terpisah. Oleh sebab itu, sangat penting untuk memastikan cetakan etiket anda adalah aman."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:875
msgid ""
"To make sure your template tags are thread safe, you should never store "
"state information on the node itself. For example, Django provides a builtin"
" :ttag:`cycle` template tag that cycles among a list of given strings each "
"time it's rendered:"
msgstr "Untuk memastikan cetakan etiket anda thread safe, anda harus jangan menyimpan informasi keadaan pada node itu sendiri. Sebagai contoh, Django menyediakan cetakan etiket :ttag:`cycle` siap pakai yang berputar terhadap sebuah daftar dari deretan karakter yang diberikan setiap kali dia dibangun:"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:888
msgid ""
"A naive implementation of ``CycleNode`` might look something like this::"
msgstr "Sebuah penerapan yang dibuat-buat dari ``CycleNode`` mungkin kelihatan kurang lebih seperti ini::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:900
msgid ""
"But, suppose we have two templates rendering the template snippet from above"
" at the same time:"
msgstr "Tetapi, seandainya kami mempunyai dua cetakan membangun potongan cetakan dari atas pada waktu bersamaan:"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:903
msgid ""
"Thread 1 performs its first loop iteration, ``CycleNode.render()`` returns "
"'row1'"
msgstr "Urutan 1 melakukan pengulangan pertamanya, ``CycleNode.render()`` mengembalikan 'row1'"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:905
msgid ""
"Thread 2 performs its first loop iteration, ``CycleNode.render()`` returns "
"'row2'"
msgstr "Urutan 2 melakukan pengulangan pertamanya, ``CycleNode.render()`` mengembalikan 'row2'"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:907
msgid ""
"Thread 1 performs its second loop iteration, ``CycleNode.render()`` returns "
"'row1'"
msgstr "Urutan 1 melakukan pengulangan keduanya, ``CycleNode.render()`` mengembalikan 'row1'"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:909
msgid ""
"Thread 2 performs its second loop iteration, ``CycleNode.render()`` returns "
"'row2'"
msgstr "Urutan 2 melakukan pengulangan keduanya, ``CycleNode.render()`` mengembalikan 'row2'"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:912
msgid ""
"The CycleNode is iterating, but it's iterating globally. As far as Thread 1 "
"and Thread 2 are concerned, it's always returning the same value. This is "
"obviously not what we want!"
msgstr "CycleNode berulang-ulang, tetapi perulangannya secara umum. Sejauh Thread 1 dan Thread 2 dirisaukan, dia selalu mengembalikan nilai sama. Ini jelas bukan apa kami inginkan!"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:916
msgid ""
"To address this problem, Django provides a ``render_context`` that's "
"associated with the ``context`` of the template that is currently being "
"rendered. The ``render_context`` behaves like a Python dictionary, and "
"should be used to store ``Node`` state between invocations of the ``render``"
" method."
msgstr "Untuk mengalamatkan masalah ini, Django menyediakan sebuah ``render_context`` yang terhubung dengan ``context`` dari cetakan yang saat ini sedang dibangun. ``render_context`` berperilaku seperti sebuah kamus Python, dan harus digunakan untuk menyimpan keadaan ``Node`` diantara permohonan dari cara ``render``."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:921
msgid ""
"Let's refactor our ``CycleNode`` implementation to use the "
"``render_context``::"
msgstr "Mari kita refactor penerapan ``CycleNode`` kami untuk menggunakan ``render_context``::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:933
msgid ""
"Note that it's perfectly safe to store global information that will not "
"change throughout the life of the ``Node`` as an attribute. In the case of "
"``CycleNode``, the ``cyclevars`` argument doesn't change after the ``Node`` "
"is instantiated, so we don't need to put it in the ``render_context``. But "
"state information that is specific to the template that is currently being "
"rendered, like the current iteration of the ``CycleNode``, should be stored "
"in the ``render_context``."
msgstr "Catat bahwa ini sangat aman untuk menyimpan informasi umum yang tidak akan merubah keseluruhan hidup dari ``Node`` sebagai sebuah atribut. Dalam kasus ``CycleNode``, argumen ``cyclevars`` tidak berubah setelah ``Node`` dipakai, jadi kami tidak butuh menaruhnya ke dalam ``render_context``. Tetapi keadaan informasi yang khusus pada cetakan yang saat ini sedang dibangun, seperti putaran saat ini dari ``CycleNode``, harus disimpan dalam ``render_context``."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:942
msgid ""
"Notice how we used ``self`` to scope the ``CycleNode`` specific information "
"within the ``render_context``. There may be multiple ``CycleNodes`` in a "
"given template, so we need to be careful not to clobber another node's state"
" information. The easiest way to do this is to always use ``self`` as the "
"key into ``render_context``. If you're keeping track of several state "
"variables, make ``render_context[self]`` a dictionary."
msgstr "Perhatikan bagaimana kami menggunakan ``self`` untuk menjangkau ``CycleNode`` informasi tertentu dalam ``render_context``. Disana mungkin banyak ``CycleNodes`` dalam cetakan yang diberikan, jadi kami butuh berhati-hati tidak megnkritik informasi keadaan node lainnya. Cara termudah melakukan ini adalah selalu menggunakan ``self`` sebagai kunci kedalam ``render_context``. Jika anda sedang menjaga jalur dari beberapa variabel keadaan, buat ``render_context[self]`` sebuah kamus."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:950
msgid "Registering the tag"
msgstr "Mendaftarkan etiket"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:952
msgid ""
"Finally, register the tag with your module's ``Library`` instance, as "
"explained in :ref:`writing custom template filters<howto-writing-custom-"
"template-tags>` above. Example::"
msgstr "Akhirnya, daftarkan etiket dengan instance ``Library`` modul, sesuai penjelasan dalam :ref:`menulis penyesuaian cetakan penyaring<howto-writing-custom-template-tags>` diatas. Contoh::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:958
msgid "The ``tag()`` method takes two arguments:"
msgstr "Cara ``tag()`` mengambil dua argumen:"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:960
msgid ""
"The name of the template tag -- a string. If this is left out, the name of "
"the compilation function will be used."
msgstr "Nama dari cetakan etiket -- sebuah deretan karakter. Jika ini dihilangkan dari fungsi penyusunan akan digunakan."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:965
msgid ""
"As with filter registration, it is also possible to use this as a "
"decorator::"
msgstr "Dengan pendaftaran penyaring, dia juga memungkinkan menggunakan ini sebagai decorator::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:975
msgid ""
"If you leave off the ``name`` argument, as in the second example above, "
"Django will use the function's name as the tag name."
msgstr "Jika anda meninggalkan argumen ``name``, seperti dalam contoh kedud diatas, Django akan menggunakan nama fungsi sebagai nama etiket."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:979
msgid "Passing template variables to the tag"
msgstr "Melewatkan variabel cetakan ke etiket"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:981
msgid ""
"Although you can pass any number of arguments to a template tag using "
"``token.split_contents()``, the arguments are all unpacked as string "
"literals. A little more work is required in order to pass dynamic content (a"
" template variable) to a template tag as an argument."
msgstr "Meskipun anda dapat melewatkan angka apapun dari argumen ke etiket cetakan menggunakan ``token.split_contents()``, argumen semua tidak dipaketkan sebagai harfiah string. Sedikit kerja lebih dibutuhkan untuk melewatkan isi dinamis (variabel cetakan) ke etiket cetakan sebagai sebuah argumen."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:986
msgid ""
"While the previous examples have formatted the current time into a string "
"and returned the string, suppose you wanted to pass in a "
":class:`~django.db.models.DateTimeField` from an object and have the "
"template tag format that date-time:"
msgstr "Selagi contoh sebelumnya telah membentuk waktu saat ini ke dalam string dan mengembalikan string, misalkan anda ingin melewatkan di :class:`~django.db.models.DateTimeField` dari sebuah obyek dan mempunyai bentuk etiket cetakan yang tanggal-waktu:"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:995
msgid "Initially, ``token.split_contents()`` will return three values:"
msgstr "Mulanya, ``token.split_contents()`` akan mengembalikan tiga nilai:"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:997
msgid "The tag name ``format_time``."
msgstr "Nama etiket ``format_time``."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:998
msgid ""
"The string ``'blog_entry.date_updated'`` (without the surrounding quotes)."
msgstr "String ``'blog_entry.date_updated'`` (tanpa dikelilingi kutip)."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1000
msgid ""
"The formatting string ``'\"%Y-%m-%d %I:%M %p\"'``. The return value from "
"``split_contents()`` will include the leading and trailing quotes for string"
" literals like this."
msgstr "Pembentukan deretan karakter ``'\"%Y-%m-%d %I:%M %p\"'``. Mengembalikan nilai dari ``split_contents()`` akan menyertakan kutipan awal dan akhir untuk deretan karakter persis seperti ini."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1004
msgid "Now your tag should begin to look like this::"
msgstr "Sekarang etiket anda harus kelihatan seperti ini::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1022
msgid ""
"You also have to change the renderer to retrieve the actual contents of the "
"``date_updated`` property of the ``blog_entry`` object.  This can be "
"accomplished by using the ``Variable()`` class in ``django.template``."
msgstr "Anda juga mempunyai kesemparan pembangun untuk mengambil isi sebenarnya dari sifat ``date_updated`` dari obyek ``blog_entry``. Ini dapat diselesaikan dengan menggunakan kelas ``Variable()`` dalam ``django.template``."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1026
msgid ""
"To use the ``Variable`` class, simply instantiate it with the name of the "
"variable to be resolved, and then call ``variable.resolve(context)``. So, "
"for example::"
msgstr "Untuk menggunakan kelas ``Variable``, berikan contoh dia dengan nama dari variabel untuk di selesaikan dan kemudian panggil ``variable.resolve(context)``. Jadi, sebagai contoh::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1042
msgid ""
"Variable resolution will throw a ``VariableDoesNotExist`` exception if it "
"cannot resolve the string passed to it in the current context of the page."
msgstr "Keputusan variabel akan melempar sebuah pengecualian ``VariableDoesNotExist`` jika dia tidak dapat menyelesaikan deretan karakter dilewatkan ke dia dalam konteks saat ini dari halaman."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1046
msgid "Setting a variable in the context"
msgstr "Menyetel sebuah variabel di konteks"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1048
msgid ""
"The above examples simply output a value. Generally, it's more flexible if "
"your template tags set template variables instead of outputting values. That"
" way, template authors can reuse the values that your template tags create."
msgstr "Contoh diatas mengeluarkan sebuah nilai. Umumnya, dia lebih fleksibel jika cetakan etiket anda mengatur cetakan variabel daripada mengeluarkan nilai. Cara tersebut, penulis cetakan dapat menggunakan nilai yang cetakan etiket anda buat."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1052
msgid ""
"To set a variable in the context, just use dictionary assignment on the "
"context object in the ``render()`` method. Here's an updated version of "
"``CurrentTimeNode`` that sets a template variable ``current_time`` instead "
"of outputting it::"
msgstr "Untuk mengatur sebuah variabel dalam konteks, cukup gunakan penugasan kamus pada obyek konteks dalam cara ``render()``. Ini adalah versi terperbaharui dari ``CurrentTimeNode`` yang mengatur sebuah variabel cetakan ``current_time`` daripada mengeluarkannya::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1067
msgid ""
"Note that ``render()`` returns the empty string. ``render()`` should always "
"return string output. If all the template tag does is set a variable, "
"``render()`` should return the empty string."
msgstr "Catat bahwa ``render()`` mengembalikan deretan karakter kosong. ``render() harus selalu mengembalikan keluaran deretan karakter. Jika semua cetakan etiket disetel variabel, ``render()`` harus mengembalikan deretan karakter kosong."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1071
msgid "Here's how you'd use this new version of the tag:"
msgstr "Ini adalah bagaimana anda akan menggunakan versi baru dari etiket:"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1077
msgid "Variable scope in context"
msgstr "Lingkup variabel di konteks"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1079
msgid ""
"Any variable set in the context will only be available in the same ``block``"
" of the template in which it was assigned. This behavior is intentional; it "
"provides a scope for variables so that they don't conflict with context in "
"other blocks."
msgstr "Apapun kumpulan variabel dalam konteks akan hanya tersedua dalam ``block`` yang sama dari cetakan dimana dia ditetapkan. Perilaku ini adalah disengaja; dia menyediakan cakupan untuk variabel sehingga mereka tidak bertentangan dengan konteks di blok lainnya."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1084
msgid ""
"But, there's a problem with ``CurrentTimeNode2``: The variable name "
"``current_time`` is hard-coded. This means you'll need to make sure your "
"template doesn't use ``{{ current_time }}`` anywhere else, because the ``{% "
"current_time %}`` will blindly overwrite that variable's value. A cleaner "
"solution is to make the template tag specify the name of the output "
"variable, like so:"
msgstr "Tetapi, ada masalah dengan ``CurrentTimeNode2``: Nama variabel ``current_time`` adalah dikode keraskan. Ini berarti anda akan butuh untuk memastikan cetakan anda tidak menggunakan ``{{ current_time }}`` dimanapun juga, karena ``{% current_time %}`` akan membabi buta meniban nilai variabel itu. Sebuah solusi pembersih adalah membuat cetakan etiket menentukan nama dari variabel keluaran, seperti begitu:"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1096
msgid ""
"To do that, you'll need to refactor both the compilation function and "
"``Node`` class, like so::"
msgstr "Untuk melakukannya, anda akan butuh me refaktor kedua fungsi penyusun dan kelas ``Node``, seperti begitu::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1128
msgid ""
"The difference here is that ``do_current_time()`` grabs the format string "
"and the variable name, passing both to ``CurrentTimeNode3``."
msgstr "Perbedaan disini adalah bahwa ``do_current_time()`` mengambil bentuk deretan karakter dan nama variabel, melewatkan keduanya ke ``CurrentTimeNode3``."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1131
msgid ""
"Finally, if you only need to have a simple syntax for your custom context-"
"updating template tag, consider using the "
":meth:`~django.template.Library.simple_tag` shortcut, which supports "
"assigning the tag results to a template variable."
msgstr "Akhirnya, jika anda hanya butuh mempunyai sintaksis sederhana untuk penyesuaian pembaharuan-konteks cetakan etiket, pertimbangkan menggunakan jalan pintas :meth:`~django.template.Library.simple_tag`, yang mendukung menetapkan hasil etiket ke cetakan variabel."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1137
msgid "Parsing until another block tag"
msgstr "Menguraikan sampai blok etiket lain"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1139
msgid ""
"Template tags can work in tandem. For instance, the standard :ttag:`{% "
"comment %}<comment>` tag hides everything until ``{% endcomment %}``. To "
"create a template tag such as this, use ``parser.parse()`` in your "
"compilation function."
msgstr "Cetakan etiket dapat bekerja dalam berduaan. Sebagai contoh, standar etiket :ttag:`{% comment %}<comment>` menyembunyikan semua sampai ``{% endcomment %}``. Untuk membuat sebuah cetakan etiket seperti ini, gunakan ``parser.parse()`` dalam fungsi penyusun anda "

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1144
msgid "Here's how a simplified ``{% comment %}`` tag might be implemented::"
msgstr "Ini adalah bagaimana menyederhanakan etiket ``{% comment %}`` mungkin diterapkan::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1156
msgid ""
"The actual implementation of :ttag:`{% comment %}<comment>` is slightly "
"different in that it allows broken template tags to appear between ``{% "
"comment %}`` and ``{% endcomment %}``. It does so by calling "
"``parser.skip_past('endcomment')`` instead of "
"``parser.parse(('endcomment',))`` followed by "
"``parser.delete_first_token()``, thus avoiding the generation of a node "
"list."
msgstr "Penerapan sebenarnya dari :ttag:`{% comment %}<comment>` adalah sedikit berbeda dalam memungkinkan merusak cetakan etiket untuk muncul diantara ``{% comment %}`` dan ``{% endcomment %}``. Dia melakukannya dengan memanggil ``parser.skip_past('endcomment')`` daripada ``parser.parse(('endcomment',))`` diikuti oleh ``parser.delete_first_token()``, jadi menghindari generasi dari sebuah daftar node."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1163
msgid ""
"``parser.parse()`` takes a tuple of names of block tags ''to parse until''. "
"It returns an instance of ``django.template.NodeList``, which is a list of "
"all ``Node`` objects that the parser encountered ''before'' it encountered "
"any of the tags named in the tuple."
msgstr "``parser.parse()`` mengambil sebuah tuple dari nama dari blok etiket \"untuk diurai sampai\". Dia mengembalikan sebuah instance dari ``django.template.NodeList``, yaitu sebuah daftar dari semua obyek ``Node`` yang pengurai jumpai \"sebelum\" dia menjumpai etiket dinamai apapun dalam tuple."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1168
msgid ""
"In ``\"nodelist = parser.parse(('endcomment',))\"`` in the above example, "
"``nodelist`` is a list of all nodes between the ``{% comment %}`` and ``{% "
"endcomment %}``, not counting ``{% comment %}`` and ``{% endcomment %}`` "
"themselves."
msgstr "Dalam ``\"nodelist = parser.parse(('endcomment',))\"`` di contoh atas, ``nodelist`` adalah sebuah daftar dari semua node diantara ``{% comment %}`` dan ``{% endcomment %}``, bukan menghitung ``{% comment %}`` dan ``{% endcomment %}`` mereka sendiri."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1173
msgid ""
"After ``parser.parse()`` is called, the parser hasn't yet \"consumed\" the "
"``{% endcomment %}`` tag, so the code needs to explicitly call "
"``parser.delete_first_token()``."
msgstr "Setelah ``parser.parse()`` dipanggil, pengurai belum \"mengkonsumsi\" etiket ``{% endcomment %}``, jadi kode butuh  secara eksplisit memanggil ``parser.delete_first_token()``."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1177
msgid ""
"``CommentNode.render()`` simply returns an empty string. Anything between "
"``{% comment %}`` and ``{% endcomment %}`` is ignored."
msgstr "``CommentNode.render()`` mengembalikan sebuah deretan karakter kosong. Apapun diantara ``{% comment %}`` dan ``{% endcomment %}`` diabaikan."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1181
msgid "Parsing until another block tag, and saving contents"
msgstr "Mengurai sampai blok etiket lainnya, dan menyimpan isi"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1183
msgid ""
"In the previous example, ``do_comment()`` discarded everything between ``{% "
"comment %}`` and ``{% endcomment %}``. Instead of doing that, it's possible "
"to do something with the code between block tags."
msgstr "Di contoh sebelumnya, ``do_comment()`` menyingkirkan apapun diantara ``{% comment %}`` and ``{% endcomment %}``. Daripada melakukan itu, dimungkinkan untuk melakukan sesuatu dengan kode diantara blok etiket."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1187
msgid ""
"For example, here's a custom template tag, ``{% upper %}``, that capitalizes"
" everything between itself and ``{% endupper %}``."
msgstr "Sebagai contoh, ini adalah penyesuaian cetakan etiket, ``{% upper %}``, yang menghuruf besarkan semuanya diantara dia sendiri dan ``{% endupper %}``.\n "

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1190
msgid "Usage:"
msgstr "Penggunaan:"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1196
msgid ""
"As in the previous example, we'll use ``parser.parse()``. But this time, we "
"pass the resulting ``nodelist`` to the ``Node``::"
msgstr "Seperti di contoh sebelumnya, kami akan menggunakan ``parser.parse()``. Tetapi kali ini, kami melewatkan hasil ``nodelist`` ke ``Node``::"

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1211
msgid ""
"The only new concept here is the ``self.nodelist.render(context)`` in "
"``UpperNode.render()``."
msgstr "Satu-satunya konsep disini adalah ``self.nodelist.render(context)`` dalam ``UpperNode.render()``."

#: ../../../../sources/1.9/docs/howto/custom-template-tags.txt:1214
msgid ""
"For more examples of complex rendering, see the source code of :ttag:`{% for"
" %}<for>` in ``django/template/defaulttags.py`` and :ttag:`{% if %}<if>` in "
"``django/template/smartif.py``."
msgstr "Untuk lebih contoh dari pembangunan rumit, lihat kode sumber dari :ttag:`{% for %}<for>` dalam ``django/template/defaulttags.py`` dan :ttag:`{% if %}<if>` di ``django/template/smartif.py``."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:3
msgid "Deployment checklist"
msgstr "Daftar centang penyebaran"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:5
msgid ""
"The Internet is a hostile environment. Before deploying your Django project,"
" you should take some time to review your settings, with security, "
"performance, and operations in mind."
msgstr "Internet adalah lingkungan yang bermusuhan. Sebelum menyebarkan proyek Django anda, anda harus mengambil beberapa waktu untuk meninjau pengaturan anda, dengan penampilan keamanan, dan tindakan dalam pikiran."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:9
msgid ""
"Django includes many :doc:`security features </topics/security>`. Some are "
"built-in and always enabled. Others are optional because they aren't always "
"appropriate, or because they're inconvenient for development. For example, "
"forcing HTTPS may not be suitable for all websites, and it's impractical for"
" local development."
msgstr "Django menyertakan banyak :doc:`fitur keamanan </topics/security>`. Beberapa dibangun dan selalu tersedia. Lainnya pilihan karena mereka tidak selalu sesuai, atau karena mereka susah untuk dikembangkan. Sebagai contoh, memaksa HTTPS mungkin tidak cocok untuk semua situs jaringan, dan dia tidak berguna untuk pengembangan lokal."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:15
msgid ""
"Performance optimizations are another category of trade-offs with "
"convenience. For instance, caching is useful in production, less so for "
"local development. Error reporting needs are also widely different."
msgstr "Optimalisasi penampilan adalah kategori lain dari penjualan dengan mudahnya. Sebagai contoh, menembolok sangat berguna dalam produksi, sedikit juga untuk pengembangan lokal. Kebutuhan pelaporan kesalahan sangat berbeda."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:19
msgid "The following checklist includes settings that:"
msgstr "Daftar centang berikut menyertakan pengaturan yang:"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:21
msgid ""
"must be set properly for Django to provide the expected level of security;"
msgstr "harus di setel dengan benar untuk Django untuk menyediakan tingkatan diharapkan dari keamanan;"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:22
msgid "are expected to be different in each environment;"
msgstr "diharapkan menjadi berbeda dalam setiap lingkungan;"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:23
msgid "enable optional security features;"
msgstr "adakan pilihan fitur keamanan;"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:24
msgid "enable performance optimizations;"
msgstr "adakan optimalisasi penampilan;"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:25
msgid "provide error reporting."
msgstr "menyediakan pelaporan kesalahan."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:27
msgid ""
"Many of these settings are sensitive and should be treated as confidential. "
"If you're releasing the source code for your project, a common practice is "
"to publish suitable settings for development, and to use a private settings "
"module for production."
msgstr "Banyak dari setelan ini adalah sesitif dan harus diperlakukan rahasia. Jika anda sedang menerbitkan sumber kode untuk proyek anda, praktik umum adalah menerbitkan pengaturan yang cocok untuk pengembangan, dan menggunakan modul setelan pribadi untuk produksi."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:33
msgid "Run ``manage.py check --deploy``"
msgstr "Jalankan ``manage.py check --deploy``"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:35
msgid ""
"Some of the checks described below can be automated using the :option:`check"
" --deploy` option. Be sure to run it against your production settings file "
"as described in the option's documentation."
msgstr "Beberapa pemeriksaan digambarkan dibawah dapat diotomatisasi menggunakan pilihan :option:`check --deploy`. Pastikan menjalankannya terhadap berkas pengaturan produksi anda seperti yang digambarkan dalam dokumentasi pilihan."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:40
msgid "Critical settings"
msgstr "Pengaturan kritis"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:43
msgid ":setting:`SECRET_KEY`"
msgstr ":setting:`SECRET_KEY`"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:45
msgid ""
"**The secret key must be a large random value and it must be kept secret.**"
msgstr "**Kunci rahasia harus nilai acak besar dan dia harus tetap rahasia.**"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:47
msgid ""
"Make sure that the key used in production isn't used anywhere else and avoid"
" committing it to source control. This reduces the number of vectors from "
"which an attacker may acquire the key."
msgstr "Pastikan bahwa kunci digunakan dalam produksi tidak digunakan dimanapun dan hindari menyerahkannya ke sumber kendali. Ini mengurangi sejumlah vektor dari yang sebuah penyerang mungkin mendapatkan kunci."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:51
msgid ""
"Instead of hardcoding the secret key in your settings module, consider "
"loading it from an environment variable::"
msgstr "Daripada kode keras kuncu rahasia dalam modul pengaturan anda, pertimbangkan memuatnya dari sebuah variabel lingkungan::"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:57
msgid "or from a file::"
msgstr "atau dari sebuah berkas::"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:63
msgid ":setting:`DEBUG`"
msgstr ":setting:`DEBUG`"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:65
msgid "**You must never enable debug in production.**"
msgstr "**Anda dilarang mengaktifkan debug di lingkungan produksi.**"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:67
msgid ""
"You're certainly developing your project with :setting:`DEBUG = True "
"<DEBUG>`, since this enables handy features like full tracebacks in your "
"browser."
msgstr "Anda pasti mengembangkan proyek anda dengan :setting:`DEBUG = True <DEBUG>`, sejak ini mengadakan fitur mudah seperti pelacakan kembali penuh dalam perambah anda."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:70
msgid ""
"For a production environment, though, this is a really bad idea, because it "
"leaks lots of information about your project: excerpts of your source code, "
"local variables, settings, libraries used, etc."
msgstr "Untuk sebuah lingkungan produksi, meskipun, ini adalah ide jelek, karena dia membocorkan banyak informasi tentang proyek anda; kutipan dari kode sumber anda, variabel lokal, pengaturan, pustaka-pustaka digunakan, dll."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:75
msgid "Environment-specific settings"
msgstr "Pengaturan lingkungan-khusus"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:78
msgid ":setting:`ALLOWED_HOSTS`"
msgstr ":setting:`ALLOWED_HOSTS`"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:80
msgid ""
"When :setting:`DEBUG = False <DEBUG>`, Django doesn't work at all without a "
"suitable value for :setting:`ALLOWED_HOSTS`."
msgstr "Ketika :setting:`DEBUG = False <DEBUG>`, Django tidak bekerja sama sekali tanpa nilai cocok untuk :setting:`ALLOWED_HOSTS`."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:83
msgid ""
"This setting is required to protect your site against some CSRF attacks. If "
"you use a wildcard, you must perform your own validation of the ``Host`` "
"HTTP header, or otherwise ensure that you aren't vulnerable to this category"
" of attacks."
msgstr "Pengaturan ini dibutuhkan untuk melindungi situs anda terhadap beberapa serangan CSRF. Jika anda menggunakan wildcard, anda harus melakukan pengecekan anda sendiri dari kepala ``Host`` HTTP, atau jika tidak pastikan bahwa anda tidak rentan ke kategori serangan ini."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:88
msgid ""
"You should also configure the Web server that sits in front of Django to "
"validate the host. It should respond with a static error page or ignore "
"requests for incorrect hosts instead of forwarding the request to Django. "
"This way you'll avoid spurious errors in your Django logs (or emails if you "
"have error reporting configured that way). For example, on nginx you might "
"setup a default server to return \"444 No Response\" on an unrecognized "
"host:"
msgstr "Anda harus juga mengkonfigurasi peladen Jaringan yang duduk didepan Django untuk mengecek rumah. Dia harus menjadwan dengan halaman kesalahan statis atai mengabaikan permintaan untuk rumah tidak benar dari pada meneruskan permintaan ke Django. Jalan ini anda akan menghindari kesalahan palsu dalam catatan Django anda (atau surel jika anda mempunyai pelaporan kesalahan dokonfigurasi seperti itu). Sebagai contoh, pada nginx anda mungkin menyetel sebuah peladen awal untuk mengembalikan \"444 No Response\" pada sebuah rumah tidak dikategorikan:"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:103
msgid ":setting:`CACHES`"
msgstr ":setting:`CACHES`"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:105
msgid ""
"If you're using a cache, connection parameters may be different in "
"development and in production."
msgstr "Jika anda sedang menggunakan tembolok, parameter tetap mungkin berbeda dalam pengembangan dan dalam produksi."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:108
msgid ""
"Cache servers often have weak authentication. Make sure they only accept "
"connections from your application servers."
msgstr "Server cache seringnya memiliki autentifikasi yang lemah. Pastikan hanya menerima koneksi dari server aplikasi anda saja."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:111
msgid ""
"If you're using Memcached, consider using :ref:`cached sessions <cached-"
"sessions-backend>` to improve performance."
msgstr "Jika anda sedang menggunakan Memcached, pertimbangkan menggunakan :ref:`cached sessions <cached-sessions-backend>` untuk meningkatkan penampilan."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:115
msgid ":setting:`DATABASES`"
msgstr ":setting:`DATABASES`"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:117
msgid ""
"Database connection parameters are probably different in development and in "
"production."
msgstr "Parameter hubungan basisdata kemungkinan berbeda di pengembangan dan di produksi."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:120
msgid ""
"Database passwords are very sensitive. You should protect them exactly like "
":setting:`SECRET_KEY`."
msgstr "Sandi basisdata sangat rahasia. Anda harus melindungi mereka persis seperti :setting:`SECRET_KEY`."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:123
msgid ""
"For maximum security, make sure database servers only accept connections "
"from your application servers."
msgstr "Untuk keamanan maksimal, pastikan peladen basisdata hanya menerima hubungan dari peladen aplikasi anda."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:126
msgid "If you haven't set up backups for your database, do it right now!"
msgstr "Jika anda belum menyetel sokongan basisdata anda, lakukan sekarang!"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:129
msgid ":setting:`EMAIL_BACKEND` and related settings"
msgstr ":setting:`EMAIL_BACKEND` dan pengaturan terkait"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:131
msgid "If your site sends emails, these values need to be set correctly."
msgstr "Jika situs anda mengirim email, nilai ini butuh disetel dengan benar."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:133
msgid ""
"By default, Django sends email from webmaster@localhost and root@localhost. "
"However, some mail providers reject email from these addresses. To use "
"different sender addresses, modify the :setting:`DEFAULT_FROM_EMAIL` and "
":setting:`SERVER_EMAIL` settings."
msgstr "Secara awal, DJango mengirim email dari webmaster@localhost dan root@localhost. BAgaimanapun, beberapa penyedia surat menolak email dari alamat ini. Untuk menggunakan alamat pengirim berbeda, rubah pengaturan :setting:`DEFAULT_FROM_EMAIL` dan :setting:`SERVER_EMAIL`"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:139
msgid ":setting:`STATIC_ROOT` and :setting:`STATIC_URL`"
msgstr ":setting:`STATIC_ROOT` dan :setting:`STATIC_URL`"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:141
msgid ""
"Static files are automatically served by the development server. In "
"production, you must define a :setting:`STATIC_ROOT` directory where "
":djadmin:`collectstatic` will copy them."
msgstr "Berkas statis otomatis dilayani oleh peladen pengembangan. Di produksi, anda harus menentukan direktori :setting:`STATIC_ROOT` dimana :djadmin:`collectstatic` akan menyalin mereka."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:145
msgid "See :doc:`/howto/static-files/index` for more information."
msgstr "Lihat :doc:`/howto/static-files/index` untuk informasi lebih."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:148
msgid ":setting:`MEDIA_ROOT` and :setting:`MEDIA_URL`"
msgstr ":setting:`MEDIA_ROOT` dan :setting:`MEDIA_URL`"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:150
msgid ""
"Media files are uploaded by your users. They're untrusted! Make sure your "
"web server never attempt to interpret them. For instance, if a user uploads "
"a ``.php`` file , the web server shouldn't execute it."
msgstr "Berkas media diunggah oleh pengguna anda. Mereka tidak dapat dipercaya! Pastikan peladen jaringan anda tidak pernah mencoba untuk menafsirkannya. Sebagai contoh, jika pengguna mengunggah berkas ``.php``, peladen jaringan jangan menjalankannya."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:154
msgid "Now is a good time to check your backup strategy for these files."
msgstr "Sekarang waktu tepat untuk memeriksa strategi sokongan anda untuk berkas ini."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:157
msgid "HTTPS"
msgstr "HTTPS"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:159
msgid ""
"Any website which allows users to log in should enforce site-wide HTTPS to "
"avoid transmitting access tokens in clear. In Django, access tokens include "
"the login/password, the session cookie, and password reset tokens. (You "
"can't do much to protect password reset tokens if you're sending them by "
"email.)"
msgstr "Jaringan situs apapun yang mengizinkan pengguna untuk masuh harus melaksanakan lebar-situs HTTPS untuk menghindari token transmisi akses jelas. Di Django, token akses menyertakan masuk/sandi, sesi kue, dan setel kembali sandi token. (Anda tidak dapat melakukan banyak untuk melindungi sandi setel kembali token jika anda mengirim mereka dengan email.)"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:164
msgid ""
"Protecting sensitive areas such as the user account or the admin isn't "
"sufficient, because the same session cookie is used for HTTP and HTTPS. Your"
" web server must redirect all HTTP traffic to HTTPS, and only transmit HTTPS"
" requests to Django."
msgstr "Melindungi kawasan sensitif seperti akun pengguna atau admin tidak cukuo, karena sesi kue sama digunakan untuk HTTP dan HTTPS. Peladen jaringan anda ahrus mengalihkan semua lalu lintas HTTP ke HTTPS, dan hanya mengirimkan permintaan HTTPS ke Django."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:169
msgid "Once you've set up HTTPS, enable the following settings."
msgstr "Sekali anda telah menyetel HTTPS, adakan pengaturan berikut."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:172
msgid ":setting:`CSRF_COOKIE_SECURE`"
msgstr ":setting:`CSRF_COOKIE_SECURE`"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:174
msgid ""
"Set this to ``True`` to avoid transmitting the CSRF cookie over HTTP "
"accidentally."
msgstr "Setel ini menjadi  ``True`` untuk menghindari mengirimkan kue CSRF melalui HTTP dengan tidak sengaja."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:178
msgid ":setting:`SESSION_COOKIE_SECURE`"
msgstr ":setting:`SESSION_COOKIE_SECURE`"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:180
msgid ""
"Set this to ``True`` to avoid transmitting the session cookie over HTTP "
"accidentally."
msgstr "Ubah jadi ``True`` untuk menghindari pengiriman cookie sesi melalui HTTP secara tidak sengaja."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:184
msgid "Performance optimizations"
msgstr "Optimalisasi penampilan"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:186
msgid ""
"Setting :setting:`DEBUG = False <DEBUG>` disables several features that are "
"only useful in development. In addition, you can tune the following "
"settings."
msgstr "Pengaturan :setting:`DEBUG = False <DEBUG>` meniadakan beberapa fitur yang hanya berguna dalam pengembangan. Dalam tambahan, anda dapat menyesuaikan pengaturan berikut."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:190
msgid ":setting:`CONN_MAX_AGE`"
msgstr ":setting:`CONN_MAX_AGE`"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:192
msgid ""
"Enabling :ref:`persistent database connections <persistent-database-"
"connections>` can result in a nice speed-up when connecting to the database "
"accounts for a significant part of the request processing time."
msgstr "Mengadakan :ref:`persistent database connections <persistent-database-connections>` dapat menghasilkan sebuah kecepatan bagus ketika berhubung ke akun basisdata untuk bagian khusus dari waktu pengolahan permintaan."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:197
msgid ""
"This helps a lot on virtualized hosts with limited network performance."
msgstr "Ini membantu banyak pada rumah virtual dengan penampilan jaringan terbatas."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:200
msgid ":setting:`TEMPLATES`"
msgstr ":setting:`TEMPLATES`"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:202
msgid ""
"Enabling the cached template loader often improves performance drastically, "
"as it avoids compiling each template every time it needs to be rendered. See"
" the :ref:`template loaders docs <template-loaders>` for more information."
msgstr "Mengadakan pemuat cetakan tembolok sering memperbaiki penampilan secaradrastis, seperti dia menghindari menyusun setiap cetakan setiap kali dia dibutuhkan untuk dibangun. Lihat :ref:`template loaders docs <template-loaders>` untuk informasi lebih."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:207
#: ../../../../sources/1.9/docs/howto/error-reporting.txt:3
msgid "Error reporting"
msgstr "Pelaporan kesalahan"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:209
msgid ""
"By the time you push your code to production, it's hopefully robust, but you"
" can't rule out unexpected errors. Thankfully, Django can capture errors and"
" notify you accordingly."
msgstr "Seiring waktu anda mendorong kode anda ke produksi, semoga kuat, tetapi anda tidak dapat mengesampingkan kesalahan-kesalahan tidak diharapkan. Terima kasih, Django dapat menangkap kesalahan-kesalahan dan membuertahu anda yang sesuai."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:214
msgid ":setting:`LOGGING`"
msgstr ":setting:`LOGGING`"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:216
msgid ""
"Review your logging configuration before putting your website in production,"
" and check that it works as expected as soon as you have received some "
"traffic."
msgstr "Pratinjau konfigurasi pencatatan anda sebelum menaruh situs jaringan anda dalam produksi, dan periksa bahwa dia bekerja seauai harapan setelah anda menerima beberapa lalu lintas."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:219
msgid "See :doc:`/topics/logging` for details on logging."
msgstr "Lihat :doc:`/topics/logging` untuk rincian pada tempuhan."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:222
msgid ":setting:`ADMINS` and :setting:`MANAGERS`"
msgstr ":setting:`ADMINS` dan :setting:`MANAGERS`"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:224
msgid ":setting:`ADMINS` will be notified of 500 errors by email."
msgstr ":setting:`ADMINS` akan diberitahu dari 500 kesalahan oleh email."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:226
msgid ""
":setting:`MANAGERS` will be notified of 404 errors. "
":setting:`IGNORABLE_404_URLS` can help filter out spurious reports."
msgstr ":setting:`MANAGERS` akan diberitahu kesalahan 404. :setting:`IGNORABLE_404_URLS` dapat membantu saringan laporan palsu."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:229
msgid ""
"See :doc:`/howto/error-reporting` for details on error reporting by email."
msgstr "Lihat :doc:`/howto/error-reporting` untuk rincian di pelaporan kesalahan oleh email."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:231
msgid "Error reporting by email doesn't scale very well"
msgstr "Pelaporan error melalui email tidak dapat dikembangkan pada skala lebih lebih besar dengan baik"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:233
msgid ""
"Consider using an error monitoring system such as Sentry_ before your inbox "
"is flooded by reports. Sentry can also aggregate logs."
msgstr "Pertimbangkan menggunakan sistem pengamatan kesalahan seperti Sentry_ sebelum kotak masuk anda dibanjiri oleh laporan. Sentry dapat juga mengumpulkan catatan."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:239
msgid "Customize the default error views"
msgstr "Sesuaikan tampilan kesalahan awal"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:241
msgid ""
"Django includes default views and templates for several HTTP error codes. "
"You may want to override the default templates by creating the following "
"templates in your root template directory: ``404.html``, ``500.html``, "
"``403.html``, and ``400.html``. The default views should suffice for 99% of "
"Web applications, but if you desire to customize them, see these "
"instructions which also contain details about the default templates:"
msgstr "Django menyertakan tampilan dan cetakan awal untuk beberapa kode kesalahan HTTP. Anda mungkin ingin mengesampingkan cetakan awal dengan membuat cetakam berikut di direktori cetakan akar anda: ``404.html``, ``500.html``, ``403.html``, dan ``400.html``. Tampilan awal harus mencukupi untuk 99% dari aplikasi Jaringan, tetapi jika anda menginginkan menyesuaikan mereka, lihat perintah ini yang juga mengandung rincian tentang cetakan awal:"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:248
msgid ":ref:`http_not_found_view`"
msgstr ":ref:`http_not_found_view`"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:249
msgid ":ref:`http_internal_server_error_view`"
msgstr ":ref:`http_internal_server_error_view`"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:250
msgid ":ref:`http_forbidden_view`"
msgstr ":ref:`http_forbidden_view`"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:251
msgid ":ref:`http_bad_request_view`"
msgstr ":ref:`http_bad_request_view`"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:254
msgid "Python Options"
msgstr "Pilihan Phyton"

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:256
msgid ""
"It's strongly recommended that you invoke the Python process running your "
"Django application using the `-R`_ option or with the "
":envvar:`PYTHONHASHSEED` environment variable set to ``random``. This option"
" is enabled by default starting with Python 3.3."
msgstr "Sangat kuta dianjurkan bahwa anda meminta pengolahan Python menjalankan aplikasi Django anda menggunakan pilihan `-R`_ atau dengan lingkungan :envvar:`PYTHONHASHSEED` variabel disetel ke ``random``. Pilihan ini diadakan secara awal mulai dengan Python 3.3."

#: ../../../../sources/1.9/docs/howto/deployment/checklist.txt:261
msgid ""
"These options help protect your site from denial-of-service (DoS) attacks "
"triggered by carefully crafted inputs. Such an attack can drastically "
"increase CPU usage by causing worst-case performance when creating ``dict`` "
"instances. See `oCERT advisory #2011-003 "
"<http://www.ocert.org/advisories/ocert-2011-003.html>`_ for more "
"information."
msgstr "Pilihan ini membantu melindungi situs anda dari serangan denial-of-service (DoS) dipicu oleh masukan dibuat. Sebuah serangan dapat secara drastis meningkatkan penggunaan CPU dengan menyebabkan penampilan kasus-buruk ketika membuat instance ``dict``. Lihat `oCERT advisory #2011-003 <http://www.ocert.org/advisories/ocert-2011-003.html>`_ untuk informasi lebih."

#: ../../../../sources/1.9/docs/howto/deployment/index.txt:3
msgid "Deploying Django"
msgstr "Menyebarkan Django"

#: ../../../../sources/1.9/docs/howto/deployment/index.txt:5
msgid ""
"Django's chock-full of shortcuts to make Web developer's lives easier, but "
"all those tools are of no use if you can't easily deploy your sites. Since "
"Django's inception, ease of deployment has been a major goal."
msgstr "Sokongan penuh Django dari jalan pintas untuk membuat hidup pengembang Jaringan lebih mudah, tetapi semua alat-alat tersebut tidak berguna jika anda tidak dapat dengan mudah menyebarkan situs anda. Sejak lahirnya Django, pengembangan mudah telah menjadi sasaran utama."

#: ../../../../sources/1.9/docs/howto/deployment/index.txt:15
msgid ""
"If you're new to deploying Django and/or Python, we'd recommend you try "
":doc:`mod_wsgi </howto/deployment/wsgi/modwsgi>` first. In most cases it'll "
"be the easiest, fastest, and most stable deployment choice."
msgstr "Jika anda baru untuk menyebarkan Django dan/atau Phyton, kami menganjurkan anda mencoba :doc:`mod_wsgi </howto/deployment/wsgi/modwsgi>` dahulu. Dalam kebanyakan kasus itu akan paling mudah, paling cepat dan pilihan penyebaran paling stabil."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/apache-auth.txt:3
#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:236
msgid "Authenticating against Django's user database from Apache"
msgstr "Pembuktian keaslian terhadap pengguna basisdata Django dari Apache"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/apache-auth.txt:5
msgid ""
"Since keeping multiple authentication databases in sync is a common problem "
"when dealing with Apache, you can configure Apache to authenticate against "
"Django's :doc:`authentication system </topics/auth/index>` directly. This "
"requires Apache version >= 2.2 and mod_wsgi >= 2.0. For example, you could:"
msgstr "Sejak menjaga banyak pembuktian keaslian basisdata di sinkronasi adalah masalah utama ketika berhadapan dengan Apache, anda dapat mengkonfigurasi Apache untuk membuktikan keaslian terhadap :doc:`sistem pembuktian keaslian </topics/auth/index>` Django secara langsung. Ini membutuhkan Apache versi >= 2.2 dan mod_wsgi >= 2.0. Sebagai contoh, anda dapat:"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/apache-auth.txt:10
msgid ""
"Serve static/media files directly from Apache only to authenticated users."
msgstr "Melayani berkas statis/media secara langsung dari Apache hanya untuk membuktikan keaslian pengguna."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/apache-auth.txt:12
msgid ""
"Authenticate access to a Subversion_ repository against Django users with a "
"certain permission."
msgstr "Akses pembuktian keaslian pada sebuah gudang Subversion_ terhadap pengguna Django dengan perizinan tertentu."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/apache-auth.txt:15
msgid ""
"Allow certain users to connect to a WebDAV share created with mod_dav_."
msgstr "Mengizinkan pengguna tertentu untuk terhubung ke berbagi WebDAV dibuat dengan mod_dav_."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/apache-auth.txt:18
msgid ""
"If you have installed a :ref:`custom User model <auth-custom-user>` and want"
" to use this default auth handler, it must support an ``is_active`` "
"attribute. If you want to use group based authorization, your custom user "
"must have a relation named 'groups', referring to a related object that has "
"a 'name' field. You can also specify your own custom mod_wsgi auth handler "
"if your custom cannot conform to these requirements."
msgstr "Jika anda telah memasang sebuah :ref:`custom User model <auth-custom-user>` dan ingin menggunakan penangan pembuktian keaslian awal ini, itu harus mendukung sebuah atribut ``is_active``. Jika anda ingin menggunakan kelompok berdasarkan pembuktian keaslian, pengguna disesuaikan anda harus mempunyai hubungan dinamai 'groups', mengacu pada obyek terhubung yang mempunyai bidang 'name'. Anda dapat juga menentukan penangan pembuktian keaslian mod_wsgi disesuaikan jika sistem anda tidak dapat sesuai ke persyaratan ini."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/apache-auth.txt:29
msgid "Authentication with ``mod_wsgi``"
msgstr "Pembuktian keaslian dengan ``mod_wsgi``"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/apache-auth.txt:33
msgid ""
"The use of ``WSGIApplicationGroup %{GLOBAL}`` in the configurations below "
"presumes that your Apache instance is running only one Django application. "
"If you are running more than one Django application, please refer to the "
"`Defining Application Groups`_ section of the mod_wsgi docs for more "
"information about this setting."
msgstr "Penggunaan dari ``WSGIApplicationGroup %{GLOBAL}`` di konfigurasi dibawah menganggap bahwa instance Apache anda sedang menjalankan hanya satu alikasi Django. Jika anda sedang menjalankan lebih dati satu aplikasi Django, silahkan mengacu pada bagian `Menentukan Aplikasi Kelompok`_ dari dokumen mod_wsgi untuk informasi lebih tentang pengaturan ini."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/apache-auth.txt:39
msgid ""
"Make sure that mod_wsgi is installed and activated and that you have "
"followed the steps to setup :doc:`Apache with mod_wsgi "
"</howto/deployment/wsgi/modwsgi>`."
msgstr "Pastikan bahwa mod_wsgi telah dipasang dan diaktivasi dan bahwa anda telah mengikuti langkah-langkah untuk mengatur :doc:`Apache dengan mod_wsgi </howto/deployment/wsgi/modwsgi>`."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/apache-auth.txt:43
msgid ""
"Next, edit your Apache configuration to add a location that you want only "
"authenticated users to be able to view:"
msgstr "Selanjutnya, sunting konfigurasi Apache anda untuk menambahkan tempat yang anda ingin dibuktikan keaslian pengguna untuk dapat melihat:"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/apache-auth.txt:62
msgid ""
"The ``WSGIAuthUserScript`` directive tells mod_wsgi to execute the "
"``check_password`` function in specified wsgi script, passing the user name "
"and password that it receives from the prompt. In this example, the "
"``WSGIAuthUserScript`` is the same as the ``WSGIScriptAlias`` that defines "
"your application :doc:`that is created by django-admin startproject "
"</howto/deployment/wsgi/index>`."
msgstr "``WSGIAuthUserScript`` yang memerintahkan memberitahu mod_wsgi untuk menjalankan fungsi ``check_password`` di tulisan wsgi yang lebih khusus, melewati nama pengguna dan sandi yang dia menerimanya dari prompt. Di contoh ini, ``WSGIAuthUserScript`` adalah sama seperti ``WSGIScriptAlias`` yang menentukan aplikasi anda :doc:`yang dibuat oleh django-admin startproject </howto/deployment/wsgi/index>`."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/apache-auth.txt:69
msgid "Using Apache 2.2 with authentication"
msgstr "Menggunakan Apache 2.2 dengan pembuktian keaslian"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/apache-auth.txt:71
msgid "Make sure that ``mod_auth_basic`` and ``mod_authz_user`` are loaded."
msgstr "Pastikan bahwa ``mod_auth_basic`` and ``mod_authz_user`` dimuat."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/apache-auth.txt:73
msgid ""
"These might be compiled statically into Apache, or you might need to use "
"LoadModule to load them dynamically in your ``httpd.conf``:"
msgstr "Ini mungkin disusun secara tetap kedalam Apache, atau anda mungkin butuh menggunakan LoadModule untuk memuat mereka secara dinamis dalam ``httpd.conf`` anda:"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/apache-auth.txt:81
msgid ""
"Finally, edit your WSGI script ``mysite.wsgi`` to tie Apache's "
"authentication to your site's authentication mechanisms by importing the "
"``check_password`` function::"
msgstr "Akhirnya sunting tulisan WSGI anda ``mysite.wsgi`` ke pembuktian keaslian Apache ke mekanisme pembuktian keaslian situs anda dengan mengimpor fungsi ``check_password``:: "

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/apache-auth.txt:95
msgid ""
"Requests beginning with ``/secret/`` will now require a user to "
"authenticate."
msgstr "Permintaan dimulai dengan ``/secret/`` akan sekarang membutuhkan pengguna untuk dibuktikan keasliannya."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/apache-auth.txt:97
msgid ""
"The mod_wsgi `access control mechanisms documentation`_ provides additional "
"details and information about alternative methods of authentication."
msgstr "mod_wsgi `dokumentasi mekanisme kendali akses`_ menyediakan tambahan rincian dan informasi tentang cara lain dari pembuktian keaslian."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/apache-auth.txt:104
msgid "Authorization with ``mod_wsgi`` and Django groups"
msgstr "Otorisasi dengan ``mod_wsgi`` dan kelompok Django"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/apache-auth.txt:106
msgid ""
"mod_wsgi also provides functionality to restrict a particular location to "
"members of a group."
msgstr "mod_wsgi juga menyediakan fungsi untuk membatasi sebagian tempat untuk anggota kelompok."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/apache-auth.txt:109
msgid "In this case, the Apache configuration should look like this:"
msgstr "Dalam kasus ini, konfigurasi Apache harus kelihatan seperti ini:"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/apache-auth.txt:128
msgid ""
"To support the ``WSGIAuthGroupScript`` directive, the same WSGI script "
"``mysite.wsgi`` must also import the ``groups_for_user`` function which "
"returns a list groups the given user belongs to."
msgstr "Untuk mendukung perintah ``WSGIAuthGroupScript``, tulisan WSGI sama ``mysite.wsgi`` harus juga mengimpor fungsi ``groups_for_user`` yang mengembalikan daftar kelompok milik pengguna yang diberikan."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/apache-auth.txt:136
msgid ""
"Requests for ``/secret/`` will now also require user to be a member of the "
"\"secret-agents\" group."
msgstr "Permintaan untuk ``/secret/`` akan juga membutuhkan pengguna menjadi anggota dari kelompok \"secret-agents\"."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/gunicorn.txt:3
msgid "How to use Django with Gunicorn"
msgstr "Bagaimana menggunakan Django dengan Gunicorn"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/gunicorn.txt:7
msgid ""
"Gunicorn_ ('Green Unicorn') is a pure-Python WSGI server for UNIX. It has no"
" dependencies and is easy to install and use."
msgstr "Gunicorn_ ('Green Unicorn') adalah peladen murni-Phyton WSGI untuk UNIX. Dia juga tidak tergantung dan mudah dipasang dan digunakan."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/gunicorn.txt:13
msgid "Installing Gunicorn"
msgstr "Memasang Gunicorn"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/gunicorn.txt:15
msgid ""
"Installing gunicorn is as easy as ``pip install gunicorn``. For more "
"details, see the `gunicorn documentation`_."
msgstr "Memasang gunicorn adalah semudah seperti ``pip install gunicorn``. Untuk rincian lebih, lihat `dokumentasi gunicorn`_."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/gunicorn.txt:21
msgid "Running Django in Gunicorn as a generic WSGI application"
msgstr "Menjalankan Django di Gunicorn sebagai aplikasi WSGI umum."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/gunicorn.txt:23
msgid ""
"When Gunicorn is installed, a ``gunicorn`` command is available which starts"
" the Gunicorn server process. At its simplest, gunicorn just needs to be "
"called with the location of a module containing a WSGI application object "
"named `application`. So for a typical Django project, invoking gunicorn "
"would look like::"
msgstr "Ketika Gunicorn dipasang, sebuah perintah ``gunicorn`` tersedia yang memulai pengolahan peladen Gunicorn. Pada sederhananya, gunicorn hanya butuh dipanggil dengan tempat dari modul mengandung obyek aplikasi WSGI dinamai `application`. Sehingga untuk proyek Django khusus, meminta gunicorn kelihatan seperti::"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/gunicorn.txt:31
msgid ""
"This will start one process running one thread listening on "
"``127.0.0.1:8000``. It requires that your project be on the Python path; the"
" simplest way to ensure that is to run this command from the same directory "
"as your ``manage.py`` file."
msgstr "Ini akan memulai satu pengolahan menjalankan satu rangkaian pada ``127.0.0.1:8000``. Dia mengharuskan bahwa proyek anda berada di jalur Phyton; cara sederhana untuk memastikan bahwa menjalankan perintah ini dari direktori sama seperti berkas ``manage.py`` anda."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/gunicorn.txt:35
msgid "See Gunicorn's `deployment documentation`_ for additional tips."
msgstr "Lihat `dokumentasi penyebaran`_ Gunicorn untuk tips tambahan."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/index.txt:3
msgid "How to deploy with WSGI"
msgstr "Bagaimana menyebarkan dengan WSGI"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/index.txt:5
msgid ""
"Django's primary deployment platform is WSGI_, the Python standard for web "
"servers and applications."
msgstr "Platform penyebaran utama Django adalah WSGI_, standar Phyton untuk peladen jaringan dan aplikasi."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/index.txt:10
msgid ""
"Django's :djadmin:`startproject` management command sets up a simple default"
" WSGI configuration for you, which you can tweak as needed for your project,"
" and direct any WSGI-compliant application server to use."
msgstr "Perintah pengelolaan :djadmin:`startproject` Django mengatur konfigurasi WSGI awal sederhana untuk anda, yang anda dapat tarik sesuai kebutuhan untuk proyek anda, dan langsung peladen aplikasi WSGI untuk digunakan."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/index.txt:14
msgid ""
"Django includes getting-started documentation for the following WSGI "
"servers:"
msgstr "Django menyertakan dokumentasi mulai untuk peladen WSGI berikut:"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/index.txt:25
msgid "The ``application`` object"
msgstr "Obyek ``aplikasi``"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/index.txt:27
msgid ""
"The key concept of deploying with WSGI is the ``application`` callable which"
" the application server uses to communicate with your code. It's commonly "
"provided as an object named ``application`` in a Python module accessible to"
" the server."
msgstr "Konsep kunci dari penyebaran dengan WSGI adalah ``application`` dapat dipanggil dimana peladen aplikasi gunakan untuk komunikasi dengan kode anda. Dia umumnya disediakan sebagai sebuah obyek dinamai ``application`` di modul Phyton dapat diakses ke peladen."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/index.txt:32
msgid ""
"The :djadmin:`startproject` command creates a file "
":file:`<project_name>/wsgi.py` that contains such an ``application`` "
"callable."
msgstr "Perintah :djadmin:`startproject` membuat sebuah berkas :file:`<project_name>/wsgi.py` yang mengandung seperti ``aplication`` dapat dipanggil."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/index.txt:35
msgid ""
"It's used both by Django's development server and in production WSGI "
"deployments."
msgstr "Itu digunakan kedua oleh peladen pengembangan Django dan dalam produksi penyebaran WSGI."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/index.txt:38
msgid ""
"WSGI servers obtain the path to the ``application`` callable from their "
"configuration. Django's built-in server, namely the :djadmin:`runserver` "
"command, read it from the :setting:`WSGI_APPLICATION` setting. By default, "
"it's set to ``<project_name>.wsgi.application``, which points to the "
"``application`` callable in :file:`<project_name>/wsgi.py`."
msgstr "Peladen WSGI mendapatkan jalur ke ``application`` dapat dipanggil dari konfigurasi mereka. Peladen siap pakai Django, dinamakan perintah :djadmin:`runserver`, membacanya dari pengaturan :setting:`WSGI_APPLICATION`. Secara awal, dia disetel ke ``<project_name>.wsgi.application``, yang menunjuk ke ``application`` yang dapat dipanggil dalam :file:`<project_name>/wsgi.py`."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/index.txt:45
msgid "Configuring the settings module"
msgstr "Konfigurasi modul pengaturan"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/index.txt:47
msgid ""
"When the WSGI server loads your application, Django needs to import the "
"settings module — that's where your entire application is defined."
msgstr "Ketika peladen WSGI memuat aplikasi anda, Django butuh mengimpor modul pengaturan -- itu dimana aplikasi keseluruhan anda ditentukan."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/index.txt:50
msgid ""
"Django uses the :envvar:`DJANGO_SETTINGS_MODULE` environment variable to "
"locate the appropriate settings module. It must contain the dotted path to "
"the settings module. You can use a different value for development and "
"production; it all depends on how you organize your settings."
msgstr "Django menggunakan lingkungan variabel  :envvar:`DJANGO_SETTINGS_MODULE` utnuk menempatkan modul pengaturan yang sesuai. Dia harus mengandung jalur titik pada modul pengaturan. Anda dapat menggunakan nilai berbeda untuk pengembangan dan produksi; dia semua tergantung pada bagaimana anda mengorganisasikan pengaturan anda."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/index.txt:55
msgid ""
"If this variable isn't set, the default :file:`wsgi.py` sets it to "
"``mysite.settings``, where ``mysite`` is the name of your project. That's "
"how :djadmin:`runserver` discovers the default settings file by default."
msgstr "Jika variabel ini belum disetel, nilai awal :file:`wsgi.py` disetel ke ``mysite.settings``, dinama ``mysite`` adalah nama dari proyek anda. Itu bagaimana :djadmin:`runserver` menemukan berkas pengaturan awal secara awal."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/index.txt:61
msgid ""
"Since environment variables are process-wide, this doesn't work when you run"
" multiple Django sites in the same process. This happens with mod_wsgi."
msgstr "Sejak lingkungan variabel diproses luas, ini tidak bekerja ketika anda menjalankan banyak situs Django dalam pengolahan yang sama. Ini terjadi dengan mod_wsgi."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/index.txt:64
msgid ""
"To avoid this problem, use mod_wsgi's daemon mode with each site in its own "
"daemon process, or override the value from the environment by enforcing "
"``os.environ[\"DJANGO_SETTINGS_MODULE\"] = \"mysite.settings\"`` in your "
":file:`wsgi.py`."
msgstr "Untuk menghindari masalah ini, gunakan suasana daemon wsgi dengan setiap situs di pengolahan daemon itu sendiri, atau kesampingkan nilai dari lingkungan dengan memaksa ``os.environ[\"DJANGO_SETTINGS_MODULE\"] = \"mysite.settings\"`` dalam :file:`wsgi.py` anda."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/index.txt:71
msgid "Applying WSGI middleware"
msgstr "Memberlakukan middleware WSGI"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/index.txt:73
msgid ""
"To apply `WSGI middleware`_ you can simply wrap the application object. For "
"instance you could add these lines at the bottom of :file:`wsgi.py`::"
msgstr "Untuk meberlakukan `WSGI middleware`_ anda dapat dengan mudah membungkus obyek aplikasi. Sebagai contoh anda dapat menambah baris-baris ini pada bagian bawah dari :file:`wsgi.py`::"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/index.txt:79
msgid ""
"You could also replace the Django WSGI application with a custom WSGI "
"application that later delegates to the Django WSGI application, if you want"
" to combine a Django application with a WSGI application of another "
"framework."
msgstr "Anda juga dapar mengganti aplikasi WSGI Django dengan penyesuaian aplikasi WSGI yang diutuskan kemudian pada aplikasi WSGI Django, jika anda ingin menggabungkan aplikasi Django dengan aplikasi WSGI dari kerangka lain."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/index.txt:87
msgid ""
"Some third-party WSGI middleware do not call ``close`` on the response "
"object after handling a request. In those cases the "
":data:`~django.core.signals.request_finished` signal isn't sent. This can "
"result in idle connections to database and memcache servers."
msgstr "Beberapa middleware WSGI pihak-ketiga tidak memanggil ``close`` pada obyek tanggapan setelah menangani sebuah permintaan. Dalam kasus tersebut sinyal :data:`~django.core.signals.request_finished` tidak dikirim. Ini dapat dihasilkan di hubungan diam ke basisdata dan peladen memcache."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:3
msgid "How to use Django with Apache and ``mod_wsgi``"
msgstr "Bagaimana menggunakan Django dengan Apache dan ``mod_wsgi``"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:5
msgid ""
"Deploying Django with Apache_ and `mod_wsgi`_ is a tried and tested way to "
"get Django into production."
msgstr "Menyebarkan Django dengan Apache_ dan ``mod_wsgi`_ adalah jalan percobaan dan pengujian utnuk mendapatkan Django dalam produksi."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:11
msgid ""
"mod_wsgi is an Apache module which can host any Python WSGI_ application, "
"including Django. Django will work with any version of Apache which supports"
" mod_wsgi."
msgstr "mod_wsgi adalah sebuah modul Apache yang dapat merumahkan aplikasi WSGI_Python apapun, termasuk Django. Django akan bekerja dengan versi apapun dari Apache yang mendukung mod_wsgi."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:17
msgid ""
"The `official mod_wsgi documentation`_ is fantastic; it's your source for "
"all the details about how to use mod_wsgi. You'll probably want to start "
"with the `installation and configuration documentation`_."
msgstr "`official mod_wsgi documentation`_ adalah hebat; itu adalah sumber untuk semua rincian tentang bagaimana menggunakan mod_wsgi. Anda akan mungkin ingin memulai dengan `installation and configuration documentation`_."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:25
msgid "Basic configuration"
msgstr "Konfigurasi dasar"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:27
msgid ""
"Once you've got mod_wsgi installed and activated, edit your Apache server's "
"`httpd.conf`_ file (or a `virtual host`_ file) and add the following. If you"
" are using a version of Apache older than 2.4, replace ``Require all "
"granted`` with ``Allow from all`` and also add the line ``Order deny,allow``"
" above it."
msgstr "Sekali anda telah mendapatkan mod_wsgi terpasang dan aktif, sunting berkas `httpd.conf`_ peladen Apache (atau berkas `virtual host`_) dan tambah berikut. Jika anda menggunakan versi Apache lebih lama dari 1.4, ganti ``Require all granted`` dengan ``Allow from all`` dan juga tambah baris ``Order deny,allow`` diatasnya. "

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:46
msgid ""
"The first bit in the ``WSGIScriptAlias`` line is the base URL path you want "
"to serve your application at (``/`` indicates the root url), and the second "
"is the location of a \"WSGI file\" -- see below -- on your system, usually "
"inside of your project package (``mysite`` in this example). This tells "
"Apache to serve any request below the given URL using the WSGI application "
"defined in that file."
msgstr "Bit pertama dalam baris ``WSGIScriptAlias`` adalah jalur URL dasar anda ingin melayani aplikasi anda pada (``/`` mengindikasikan url akar), dan kedua adalah tempat dari \"berkas WSGI\" -- lihat dibawa -- pada sistem anda, biasanya didalam paket proyek anda (``mysite`` di contoh ini). Ini memberitahu Apache untuk melayani setiap permintaan dibawah URL yang diberikan menggunakan aplikasi WSGI yang ditentukan dalam berkas itu."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:53
msgid ""
"The ``WSGIPythonPath`` line ensures that your project package is available "
"for import on the Python path; in other words, that ``import mysite`` works."
msgstr "Baris ``WSGIPythonPath`` memastikan bahwa paket proyek anda tersedia untuk diimpor pada jalur Python; dengan kata lain, bahwa ``import mysite`` bekerja."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:56
msgid ""
"The ``<Directory>`` piece just ensures that Apache can access your "
":file:`wsgi.py` file."
msgstr "Potongan ``<Directory>`` hanya memastikan bahwa Apache dapat mengakses berkas :file:`wsgi.py` anda."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:59
msgid ""
"Next we'll need to ensure this :file:`wsgi.py` with a WSGI application "
"object exists. As of Django version 1.4, :djadmin:`startproject` will have "
"created one for you; otherwise, you'll need to create it. See the :doc:`WSGI"
" overview documentation</howto/deployment/wsgi/index>` for the default "
"contents you should put in this file, and what else you can add to it."
msgstr "Selanjutnya kami akan butuh memastikan berkas ini :file:`wsgi.py` dengan obyek aplikasi WSGI ada. Sehingga Django versi 1.4, :djadmin:`startproject` akan membuat satu untuk anda; jika tidak, anda akan butuh membuatnya. Lihat :doc:`Dokumentasi ikhtisar WSGI</howto/deployment/wsgi/index>` untuk isi awal anda harus tempatkan dalam berkas ini, dan apa lagi yang anda dapat tambahkan."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:67
msgid ""
"If multiple Django sites are run in a single mod_wsgi process, all of them "
"will use the settings of whichever one happens to run first. This can be "
"solved by changing::"
msgstr "Jika situs Django banyak berjalan dalam pengolahan mod_wsgi tunggal, semua dari mereka akan menggunakan pengaturan dari manasaja satu terjadi untuk dijalankan pertama kali. Ini dapat diselesaikan dengan merubah::"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:73
msgid "in ``wsgi.py``, to::"
msgstr "di ``wsgi.py``, untuk::"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:77
msgid ""
"or by :ref:`using mod_wsgi daemon mode<daemon-mode>` and ensuring that each "
"site runs in its own daemon process."
msgstr "atau dengan :ref:`using mod_wsgi daemon mode<daemon-mode>` dan memastikan bahwa setiap situs berjalan dalam pengolahan daemon nya sendiri."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:80
#: ../../../../sources/1.9/docs/howto/deployment/wsgi/uwsgi.txt:111
msgid "Fixing ``UnicodeEncodeError`` for file uploads"
msgstr "Memperbaiki ``UnicodeEncodeError`` untuk mengunggah berkas"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:82
msgid ""
"If you get a ``UnicodeEncodeError`` when uploading files with file names "
"that contain non-ASCII characters, make sure Apache is configured to accept "
"non-ASCII file names::"
msgstr "Jika anda mendapatkan sebuah `UnicodeEncodeError`` ketika mengunggah berkas-berkas dengan nama berkas yang mengandung karakter bukan ASCII, pastikan Apache dikonfigurasi untuk menerima nama-nama berkas bukan ASCII::"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:89
msgid ""
"A common location to put this configuration is ``/etc/apache2/envvars``."
msgstr "Lokasi biasa tempat meletakkan konfigurasi ini di ``/etc/apache2/envvars``."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:91
#: ../../../../sources/1.9/docs/howto/deployment/wsgi/uwsgi.txt:119
msgid ""
"See the :ref:`unicode-files` section of the Unicode reference guide for "
"details."
msgstr "Lihat bagian :ref:`unicode-files` dari panduan acuan Unicode untuk rincian."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:95
msgid "Using a ``virtualenv``"
msgstr "Menggunakan ``virtualenv``"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:97
msgid ""
"If you install your project's Python dependencies inside a `virtualenv`_, "
"you'll need to add the path to this virtualenv's ``site-packages`` directory"
" to your Python path as well. To do this, add an additional path to your "
"``WSGIPythonPath`` directive, with multiple paths separated by a colon "
"(``:``) if using a UNIX-like system, or a semicolon (``;``) if using "
"Windows. If any part of a directory path contains a space character, the "
"complete argument string to ``WSGIPythonPath`` must be quoted:"
msgstr "Jika anda memasang ketergantungan Python proyek didalam sebuah `virtualenv`_, anda akan butuh menambahkan jalur pada paket direktori ``site-packages``ini ke jalur Python anda juga. Untuk melakukan ini, tambah sebuah jalur tambahan dengan sebuah titik dua (``:``) jika menggunakan sistem seperti UNIX, atau sebuah titik koma (``;``) jika menggunakan Windows. Jika bagian apapun dari jalur direktori mengandung karakter ruang, deretan karakter argumen lengkap pada ``WSGIPythonPath`` harus dikutip:"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:109
msgid ""
"Make sure you give the correct path to your virtualenv, and replace "
"``python3.X`` with the correct Python version (e.g. ``python3.4``)."
msgstr "Pastikan anda memberikan jalur benar ke virtualenv anda, dan ganti  ``python3.X`` dengan versi Python yang benar (sebagai contoh ``python3.4``)."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:117
msgid "Using ``mod_wsgi`` daemon mode"
msgstr "Menggunakan ``mod_wsgi`` mode daemon"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:119
msgid ""
"\"Daemon mode\" is the recommended mode for running mod_wsgi (on non-Windows"
" platforms). To create the required daemon process group and delegate the "
"Django instance to run in it, you will need to add appropriate "
"``WSGIDaemonProcess`` and ``WSGIProcessGroup`` directives. A further change "
"required to the above configuration if you use daemon mode is that you can't"
" use ``WSGIPythonPath``; instead you should use the ``python-path`` option "
"to ``WSGIDaemonProcess``, for example:"
msgstr "\"Daemon mode\" adalah suasana yang dianjurkan untuk menjalankan mod_wsgi (pada serambi bukan-Windows). Untuk membuat kelompok pengolahan daemon yang dibutuhkan dan menugaskan instance Django untuk menjalankan di dalamnya, anda akan butuh menambahkan arahan ``WSGIDaemonProcess`` dan ``WSGIProcessGroup`` sesuai. Perubahan lebih lanjut pada konfigurasi diatas jika anda menggunakan suasana daemon adalah anda tidak dapat menggunakan ``WSGIPythonPath``; daripada anda harus menggunakan pilihan ``python-path`` ke ``WSGIDaemonProcess``, sebagai contoh:"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:132
msgid ""
"If you want to serve your project in a subdirectory "
"(``https://example.com/mysite`` in this example), you can add "
"``WSGIScriptAlias`` to the configuration above:"
msgstr "Jika anda ingin melayani proyek anda dalam subdirektori (``https://example.com/mysite`` dalam contoh ini), anda dapat menambahkan ``WSGIScriptAlias`` pada konfigurasi diatas:  "

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:140
msgid ""
"See the official mod_wsgi documentation for `details on setting up daemon "
"mode`_."
msgstr "Lihat dokumentasi mod_wsgi resmi untuk `details on setting up daemon mode`_."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:148
msgid "Serving files"
msgstr "Melayani berkas"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:150
msgid ""
"Django doesn't serve files itself; it leaves that job to whichever Web "
"server you choose."
msgstr "Django tidak melayani berkas-berkas dia sendiri; dia meninggalkan pekerjaan tersebut ke peladen Jaringan manapun anda pilih."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:153
msgid ""
"We recommend using a separate Web server -- i.e., one that's not also "
"running Django -- for serving media. Here are some good choices:"
msgstr "Kami rekomendasi menggunakan Web server terpisah -- misalnya, yang juga menggunakan Django -- untuk melayani media. Berikut adalah beberapa alternatif baik:"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:156
#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:73
msgid "Nginx_"
msgstr "Nginx_"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:157
#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:74
msgid "A stripped-down version of Apache_"
msgstr "Versi ringkas dari Apache_"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:159
msgid ""
"If, however, you have no option but to serve media files on the same Apache "
"``VirtualHost`` as Django, you can set up Apache to serve some URLs as "
"static media, and others using the mod_wsgi interface to Django."
msgstr "Jika, bagaimanapun, anda tidak mempunyai pilihan tetapi utnuk melayani berkas-berkas media pada Apache ``VirtualHost`` sama sebagai Django, anda dapat menyetel Apache untuk melayani beberapa URL sebagai media statis, dan lainnya menggunakan antarmuka mod_wsgi ke Django."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:163
msgid ""
"This example sets up Django at the site root, but serves ``robots.txt``, "
"``favicon.ico``, and anything in the ``/static/`` and ``/media/`` URL space "
"as a static file. All other URLs will be served using mod_wsgi:"
msgstr "Contoh ini menyetel Django pada akar situs, tetapi melayani ``robots.txt``, ``favicon.ico``, dan apapun dalam ruang URL ``/static/`` dan ``/media/`` sebagai berkas statis. Semua URL lain akan dilayani menggunakan mod_wsgi:"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:191
msgid ""
"If you are using a version of Apache older than 2.4, replace ``Require all "
"granted`` with ``Allow from all`` and also add the line ``Order deny,allow``"
" above it."
msgstr "Jika anda sedang menggunakan versi Apache lebih lama dari 2.4, ganti ``Require all granted`` dengan ``Allow from all`` dan juga tambah baris ``Order deny,allow`` diatasnya."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:206
msgid "Serving the admin files"
msgstr "Melayani berkas admin"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:208
msgid ""
"When :mod:`django.contrib.staticfiles` is in :setting:`INSTALLED_APPS`, the "
"Django development server automatically serves the static files of the admin"
" app (and any other installed apps). This is however not the case when you "
"use any other server arrangement. You're responsible for setting up Apache, "
"or whichever Web server you're using, to serve the admin files."
msgstr "Ketika :mod:`django.contrib.staticfiles` berada dalam :setting:`INSTALLED_APPS`, peladen pengembangan Django otomatis melayani berkas-berkas tetap dari aplikasi admin (dan aplikasi terpasang lainnya). Ini bagaimanapun bukan kasus ketika anda menggunakan pengaturan peladen lainnya. Anda bertanggungjawab untuk mengatur Apache, atau peladen Jaringan manapun anda sedang gunakan, untuk melayani berkas-berkas admin."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:214
msgid ""
"The admin files live in (:file:`django/contrib/admin/static/admin`) of the "
"Django distribution."
msgstr "Berkas admin tinggal di (:file:`django/contrib/admin/static/admin`) dari penyaluran Django."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:217
msgid ""
"We **strongly** recommend using :mod:`django.contrib.staticfiles` to handle "
"the admin files (along with a Web server as outlined in the previous "
"section; this means using the :djadmin:`collectstatic` management command to"
" collect the static files in :setting:`STATIC_ROOT`, and then configuring "
"your Web server to serve :setting:`STATIC_ROOT` at :setting:`STATIC_URL`), "
"but here are three other approaches:"
msgstr "Kami **sangat kuat** menganjurkan menggunakan :mod:`django.contrib.staticfiles` untuk menangani berkas-berkas admin (bersama dengan peladen Jaringan sebagai gambaran peta di bagian sebelumnya; ini berarti menggunakan perintah pengelolaan :djadmin:`collectstatic` untuk mengumpulkan berkas-berkas tetap dalam :setting:`STATIC_ROOT`, dan ketika mengkonfigurasi peladen Jaringan anda untuk melayani :setting:`STATIC_ROOT` pada :setting:`STATIC_URL`), tetapi disini adalah tiga pendekatan lain:"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:224
msgid ""
"Create a symbolic link to the admin static files from within your document "
"root (this may require ``+FollowSymLinks`` in your Apache configuration)."
msgstr "Buat sebuah tautan simbolis ke berkas statis admin dari dalam akar dokumen anda (ini mungkin membutuhkan ``+FollowSymLinks`` dalam konfigurasi Apache anda)."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:228
msgid ""
"Use an ``Alias`` directive, as demonstrated above, to alias the appropriate "
"URL (probably :setting:`STATIC_URL` + ``admin/``) to the actual location of "
"the admin files."
msgstr "Gunakan sebuah petunjuk ``Alias``, seperti yang ditampilkan diatas, untuk alias URL yang sesuai (mungkin :setting:`STATIC_URL` + ``admin/``) ke tempat sebenarnya dari berkas-berkas admin."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:232
msgid ""
"Copy the admin static files so that they live within your Apache document "
"root."
msgstr "Salin berkas tetap admin sehingga mereka berada dalam akar dokumen Apache anda."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/modwsgi.txt:238
msgid ""
"Django provides a handler to allow Apache to authenticate users directly "
"against Django's authentication backends. See the :doc:`mod_wsgi "
"authentication documentation </howto/deployment/wsgi/apache-auth>`."
msgstr "Django menyediakan sebuah penanganan untuk mengizinkan Apache untuk membuktikan keaslian pengguna secara langsung terhadap backend pembuktian keaslian Django. Lihat :doc:`mod_wsgi authentication documentation </howto/deployment/wsgi/apache-auth>`."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/uwsgi.txt:3
msgid "How to use Django with uWSGI"
msgstr "Bagaimana menggunakan Django dengan uWSGI"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/uwsgi.txt:7
msgid ""
"uWSGI_ is a fast, self-healing and developer/sysadmin-friendly application "
"container server coded in pure C."
msgstr "uWSGI_ adalah cepat, menyembuhkan-sendiri dan wadah peladen  aplikasi developer/sysadmin-friendly dikodekan dalam C murni."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/uwsgi.txt:14
msgid ""
"The uWSGI docs offer a `tutorial`_ covering Django, nginx, and uWSGI (one "
"possible deployment setup of many). The docs below are focused on how to "
"integrate Django with uWSGI."
msgstr "Dokumen uWSGI menawarkan sebuah `tutorial`_ mencangkup Django, nginx, dan uWSGI (satu kemungkinan penyebaran pengaturan dari banyak). Dokumen dibawah fokus pada bagaimana menggabungkan Django dengan uWSGI."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/uwsgi.txt:21
msgid "Prerequisite: uWSGI"
msgstr "Prasyarat: uWSGI"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/uwsgi.txt:23
msgid ""
"The uWSGI wiki describes several `installation procedures`_. Using pip, the "
"Python package manager, you can install any uWSGI version with a single "
"command. For example:"
msgstr "Wiki uWSGI menggambarkan beberapa `installation procedures`_. Menggunakan pip, pengelola paket Python, anda dapat memasang versi uWSGI apapun dengan perintah tunggal. Sebagai contoh:"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/uwsgi.txt:39
msgid ""
"Some distributions, including Debian and Ubuntu, ship an outdated version of"
" uWSGI that does not conform to the WSGI specification. Versions prior to "
"1.2.6 do not call ``close`` on the response object after handling a request."
" In those cases the :data:`~django.core.signals.request_finished` signal "
"isn't sent. This can result in idle connections to database and memcache "
"servers."
msgstr "Beberapa penyaluran, termasuk Debian dan Ubuntu, mengemas versi lama dari uSWGI yang tidak memenuhi spesifikasi WSGI. Versi sebelumnya sampai 1.2.6 jangan memanggil ``close`` pada obyek tanggapan setelah menangani sebuah permintaan. Dalam kasus-kasus tersebut sinyal :data:`~django.core.signals.request_finished` tidak dikirim. Ini dapat menghasilkan hubungan diam ke basisdata dan peladen memcache. "

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/uwsgi.txt:47
msgid "uWSGI model"
msgstr "Model uWSGI"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/uwsgi.txt:49
msgid ""
"uWSGI operates on a client-server model. Your Web server (e.g., nginx, "
"Apache) communicates with a django-uwsgi \"worker\" process to serve dynamic"
" content. See uWSGI's `background documentation`_ for more detail."
msgstr "uWSGI berjalan pada model klien-peladen. Peladen Jaringan anda (sebagai contoh nginx, Apache) berkomunikasi dengan pengolahan \"worker\" uwsgi-django untuk melayani isi dinamis. Lihat `background documentation`_ uWSGI untuk lebih rinci."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/uwsgi.txt:56
msgid "Configuring and starting the uWSGI server for Django"
msgstr "Mengkonfigurasi dan memulai peladen uWSGI  untuk Django"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/uwsgi.txt:58
msgid ""
"uWSGI supports multiple ways to configure the process. See uWSGI's "
"`configuration documentation`_ and `examples`_."
msgstr "uWSGI mendukung banyak cara untuk mengkonfigurasikan pengolahan. Lihat `configuration documentation`_ uWSGI dan `examples`_."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/uwsgi.txt:64
msgid "Here's an example command to start a uWSGI server::"
msgstr "Ini adalah sebuah contoh perintah untuk memulai peladen uWSGI::"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/uwsgi.txt:79
msgid ""
"This assumes you have a top-level project package named ``mysite``, and "
"within it a module :file:`mysite/wsgi.py` that contains a WSGI "
"``application`` object. This is the layout you'll have if you ran ``django-"
"admin startproject mysite`` (using your own project name in place of "
"``mysite``) with a recent version of Django. If this file doesn't exist, "
"you'll need to create it. See the :doc:`/howto/deployment/wsgi/index` "
"documentation for the default contents you should put in this file and what "
"else you can add to it."
msgstr "Ini menganggap anda mempunyai paket proyek tingkat-tinggi bernama ``mysite``, dan dalamnya sebuah modul :file:`mysite/wsgi.py` yang mengandung obyek ``application`` WSGI. Ini adalah tata letak anda akan punyai jika anda menjalankan ``django-admin startproject mysite`` (menggunakan nama proyek anda sendiri di tempat ``mysite``) dengan versi baru dari Django. Jika berkas ini tidak ada, anda akan butuh membuatnya. Lihat dokumentasi :doc:`/howto/deployment/wsgi/index` untuk isi awal anda harus taruh dalam berkas ini dan apa lagi anda dapat tambahkan ke dia."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/uwsgi.txt:87
msgid "The Django-specific options here are:"
msgstr "Pilihan khusus-Django disini adalah:"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/uwsgi.txt:89
msgid ""
"``chdir``: The path to the directory that needs to be on Python's import "
"path -- i.e., the directory containing the ``mysite`` package."
msgstr "``chdir``: Jalur ke direktori yang dibutuhkan berada di jalur impor Python -- yaitu direktori mengandung paket ``mysite``."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/uwsgi.txt:91
msgid ""
"``module``: The WSGI module to use -- probably the ``mysite.wsgi`` module "
"that :djadmin:`startproject` creates."
msgstr "``module``: modul WSGI dogunakan -- mungkin modul  ``mysite.wsgi`` yang :djadmin:`startproject` buat."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/uwsgi.txt:93
msgid "``env``: Should probably contain at least ``DJANGO_SETTINGS_MODULE``."
msgstr "``env``: mungkin harus mengandung setidaknya ``DJANGO_SETTINGS_MODULE``."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/uwsgi.txt:94
msgid "``home``: Optional path to your project virtualenv."
msgstr "``home``: path pilihan untuk virtualenv dari proyek anda."

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/uwsgi.txt:96
msgid "Example ini configuration file::"
msgstr "Contoh di berkas konfigurasi::"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/uwsgi.txt:107
msgid "Example ini configuration file usage::"
msgstr "Contoh penggunaan berkas konfigurasi ini::"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/uwsgi.txt:113
msgid ""
"If you get a ``UnicodeEncodeError`` when uploading files with file names "
"that contain non-ASCII characters, make sure uWSGI is configured to accept "
"non-ASCII file names by adding this to your ``uwsgi.ini``::"
msgstr "Jika anda mendapatkan sebuah ``UnicodeEncodeError`` ketika mengunggah berkas-berkas dengan nama-nama berkas yang mengandung karakter bukan ASCII, pastikan uWSGI dikonfigurasikan untuk menerima nama-nama berkas bukan ASCII dengan menambahkan ini ke ``uwsgi.ini``::"

#: ../../../../sources/1.9/docs/howto/deployment/wsgi/uwsgi.txt:122
msgid ""
"See the uWSGI docs on `managing the uWSGI process`_ for information on "
"starting, stopping and reloading the uWSGI workers."
msgstr "Lihat dokumentasi uWSGI pada `managing the uWSGI process`_ untuk informasi pada permulaan, pemberhentian dan memuat kembali pekerja-pekerja uWSGI."

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:5
msgid ""
"When you're running a public site you should always turn off the "
":setting:`DEBUG` setting. That will make your server run much faster, and "
"will also prevent malicious users from seeing details of your application "
"that can be revealed by the error pages."
msgstr "Ketika anda sedang menjalankan situs umum anda harus selalu mematikan pengaturan :setting:`DEBUG`. Itu akan membuat peladen anda berjalan lebih cepat, dan juga akan mencegah pengguna hahat dari melihat rincian dari aplikasi anda yang dapat diungkap dengan kesalahan halaman."

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:10
msgid ""
"However, running with :setting:`DEBUG` set to ``False`` means you'll never "
"see errors generated by your site -- everyone will just see your public "
"error pages. You need to keep track of errors that occur in deployed sites, "
"so Django can be configured to create reports with details about those "
"errors."
msgstr "Bagaimanapun, menjalankan dengan :setting:`DEBUG` disetel ke ``False`` berarti anda akan tidak pernah melihat kesalahan dibangkitkan oleh situs anda -- semua orang akan hanya melihat halaman-halaman kesalahan umum anda. Anda butuh menjaga jalur kesalahan-kesalahan yang muncul dalam situs yang disebar, sehingga Django dapat dikonfigurasikan untuk membuat laporan dengan rincian tentang kesalahan-kesalahan tersebut."

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:16
msgid "Email reports"
msgstr "Email laporan"

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:19
msgid "Server errors"
msgstr "Kesalahan peladen"

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:21
msgid ""
"When :setting:`DEBUG` is ``False``, Django will email the users listed in "
"the :setting:`ADMINS` setting whenever your code raises an unhandled "
"exception and results in an internal server error (HTTP status code 500). "
"This gives the administrators immediate notification of any errors. The "
":setting:`ADMINS` will get a description of the error, a complete Python "
"traceback, and details about the HTTP request that caused the error."
msgstr "Ketika :setting:`DEBUG` adalah ``False``, Django akan mensurelkan pengguna terdaftar dalam pengaturan :setting:`ADMINS` kapanpun kode anda memunculkan pengecualian yang tidak ditangani dan menghasilkan dalam kesalahan peladen dalam (kode status HTTP 500). Ini memberikan administrator pemberitahuan segera dari pelacakan kebelakang apapun, dan rincian tentang permintaan HTTP yang menyebabkan kesalahan."

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:30
msgid ""
"In order to send email, Django requires a few settings telling it how to "
"connect to your mail server. At the very least, you'll need to specify "
":setting:`EMAIL_HOST` and possibly :setting:`EMAIL_HOST_USER` and "
":setting:`EMAIL_HOST_PASSWORD`, though other settings may be also required "
"depending on your mail server's configuration. Consult :doc:`the Django "
"settings documentation </ref/settings>` for a full list of email-related "
"settings."
msgstr "Agar mengirim surel, Django membutuhkan beberapa pengaturan mengatakannya bagaimana terhubung ke peladen surat anda. Setidaknya, anda akan butuh menentukan :setting:`EMAIL_HOST` dan kemungkinan :setting:`EMAIL_HOST_USER` dan :setting:`EMAIL_HOST_PASSWORD`, meskipun pengaturan lainnya mungkin tidak juga dibutuhkan tergantung pada konfigurasi peladen surat anda. Rundingkan :doc:`the Django settings documentation </ref/settings>` untuk daftar penuh dari pengaturan terkait-email."

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:39
msgid ""
"By default, Django will send email from root@localhost. However, some mail "
"providers reject all email from this address. To use a different sender "
"address, modify the :setting:`SERVER_EMAIL` setting."
msgstr "Secara awal, Django akan mengirim surel dari root@localhost. Bagaimanapun, beberapa penyedia surat menolak semua surel dari alamat ini. Untuk menggunakan alamat pengirim berbeda, rubah pengaturan :setting:`SERVER_EMAIL`."

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:43
msgid ""
"To activate this behavior, put the email addresses of the recipients in the "
":setting:`ADMINS` setting."
msgstr "Untuk mengaktifkan perilaku ini, masukkan alamat email dari penerima di bagian :setting:`ADMINS`."

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:48
msgid ""
"Server error emails are sent using the logging framework, so you can "
"customize this behavior by :doc:`customizing your logging configuration "
"</topics/logging>`."
msgstr "Surel kesalahan peladen dikirim menggunakan kerangka pencatatan, jadi anda dapat menyesuaikan perilaku ini dengan :doc:`customizing your logging configuration </topics/logging>`. "

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:53
msgid "404 errors"
msgstr "kesalahan 404"

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:55
msgid ""
"Django can also be configured to email errors about broken links (404 \"page"
" not found\" errors). Django sends emails about 404 errors when:"
msgstr "Django juga dapat dikonfirgasi untuk mengirimkan email kesalahan tentang tautan yang tidak ditemukan (404 \"page not found\" errors). Django mengirim email tentang error 404 ketika:"

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:58
msgid ":setting:`DEBUG` is ``False``;"
msgstr ":setting:`DEBUG` adalah ``False``;"

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:60
msgid ""
"Your :setting:`MIDDLEWARE_CLASSES` setting includes "
":class:`django.middleware.common.BrokenLinkEmailsMiddleware`."
msgstr "Pengaturan :setting:`MIDDLEWARE_CLASSES` anda termasuk :class:`django.middleware.common.BrokenLinkEmailsMiddleware`."

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:63
msgid ""
"If those conditions are met, Django will email the users listed in the "
":setting:`MANAGERS` setting whenever your code raises a 404 and the request "
"has a referer. It doesn't bother to email for 404s that don't have a referer"
" -- those are usually just people typing in broken URLs or broken Web bots. "
"It also ignores 404s when the referer is equal to the requested URL, since "
"this behavior is from broken Web bots too."
msgstr "Jika kondisi tersebut bertemu, Django akan surel pengguna terdaftar di pengaturan :setting:`MANAGERS` kapanpun kode anda memunculkan 404 dan permintaan mempunyai acuan. Dia tidak mengganggu ke surel untuk 404 yang tidak punya acuan -- yaitu biasanya hanya orang mengetikkan dalam URL rusak atau robot Jaringan rusak. Dia juga mengabaikan 404 ketika acuan sama pada URL yang diminta, sejak perilaku ini dari robot Jaringan rusak juga."

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:72
msgid ""
"In older versions, 404s were not ignored when the referer was equal to the "
"requested URL."
msgstr "Di versi yang lama, 404 tidak diabaikan ketika referer sama dengan URL yang diminta."

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:77
msgid ""
":class:`~django.middleware.common.BrokenLinkEmailsMiddleware` must appear "
"before other middleware that intercepts 404 errors, such as "
":class:`~django.middleware.locale.LocaleMiddleware` or "
":class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware`. "
"Put it towards the top of your :setting:`MIDDLEWARE_CLASSES` setting."
msgstr ":class:`~django.middleware.common.BrokenLinkEmailsMiddleware` harus muncul sebelum middleware lain yang mencegat kesalahan 404, seperti :class:`~django.middleware.locale.LocaleMiddleware` atau :class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware`. Taruh dia menuju atas dari pengaturan :setting:`MIDDLEWARE_CLASSES` anda."

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:83
msgid ""
"You can tell Django to stop reporting particular 404s by tweaking the "
":setting:`IGNORABLE_404_URLS` setting. It should be a list of compiled "
"regular expression objects. For example::"
msgstr "Anda dapat memberitahu Django untuk menghentikan pelaporan tertentu 404 dengan merubah pengaturan :setting:`IGNORABLE_404_URLS`. Dia harus menjadi daftar dari obyek ekspresi biasa tersusun. Sebagai contoh::"

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:93
msgid ""
"In this example, a 404 to any URL ending with ``.php`` or ``.cgi`` will "
"*not* be reported. Neither will any URL starting with ``/phpmyadmin/``."
msgstr "Dalam contoh ini, sebuah 404 pada setiap URL berakhiran dengan ``.php`` atau ``.cgi`` akan *tidak* dilaporkan. Juga tidak akan URL apapun dimulai dengan ``/phpmyadmin/``."

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:96
msgid ""
"The following example shows how to exclude some conventional URLs that "
"browsers and crawlers often request::"
msgstr "Contoh berikut menunjukkan bagaimana mengeluarkan beberapa URL biasa yang perambah dan penjilat sering diminta::"

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:106
msgid ""
"(Note that these are regular expressions, so we put a backslash in front of "
"periods to escape them.)"
msgstr "(Perhatikan bahwa ini adalah ekspresi regular, jadi kita tuliskan backslash di depan titik untuk melepaskannya)"

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:109
msgid ""
"If you'd like to customize the behavior of "
":class:`django.middleware.common.BrokenLinkEmailsMiddleware` further (for "
"example to ignore requests coming from web crawlers), you should subclass it"
" and override its methods."
msgstr "Jika anda suka menyesuaikan perilaku dari :class:`django.middleware.common.BrokenLinkEmailsMiddleware` lebih lanjut (sebagai contoh untuk mengabaikan permintaan datang dari penjilat jaringan), anda harus mensubkelaskannya dan mengesampingkan caranya."

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:116
msgid ""
"404 errors are logged using the logging framework. By default, these log "
"records are ignored, but you can use them for error reporting by writing a "
"handler and :doc:`configuring logging </topics/logging>` appropriately."
msgstr "Kesalahan 404 dicatat menggunakan kerangka pencatatan. Secara awal, rekaman catatan ini diabaikan, tetapi anda dapat menggunakan mereka untuk kesalahan pelaporan dengan menulis sebuah penanganan :doc:`configuring logging </topics/logging>` dengan benar."

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:123
msgid "Filtering error reports"
msgstr "Menyaring laporan kesalahan"

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:127
msgid ""
"Filtering sensitive data is a hard problem, and it's nearly impossible to "
"guarantee that sensitive won't leak into an error report. Therefore, error "
"reports should only be available to trusted team members and you should "
"avoid transmitting error reports unencrypted over the Internet (such as "
"through email)."
msgstr "Menyaring data sensitif adalah masalah sulit, dan hampur tidak mungkin menjamin bahwa sensitif tidak akan bocor kedalam sebuah laporan kesalahan. Karena itu, laporan kesalahan harus hanya tersedia pada anggota tim yang dapat dipercaya dan harus menghindari perpindahan laporan kesalahan tidak disandikan di Internet (seperti surel)."

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:134
msgid "Filtering sensitive information"
msgstr "Menyaring informasi rahasia"

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:138
msgid ""
"Error reports are really helpful for debugging errors, so it is generally "
"useful to record as much relevant information about those errors as "
"possible. For example, by default Django records the `full traceback`_ for "
"the exception raised, each `traceback frame`_’s local variables, and the "
":class:`~django.http.HttpRequest`’s :ref:`attributes<httprequest-"
"attributes>`."
msgstr "Laporan kesalahan sangat membantu untuk memeriksa kesalahan, jadi dia umumnya berguna untuk merekam informasi terkait tentang kesalahan-kesalahan tersebut sebanyak mungkin. Sebagai contoh, secara awal rekaman Django `full traceback`_ untuk dimunculkan pengecualian, setiap variabel lokal `full traceback`_, dan :ref:`attributes<httprequest-attributes>` :class:`~django.http.HttpRequest`."

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:144
msgid ""
"However, sometimes certain types of information may be too sensitive and "
"thus may not be appropriate to be kept track of, for example a user's "
"password or credit card number. So Django offers a set of function "
"decorators to help you control which information should be filtered out of "
"error reports in a production environment (that is, where :setting:`DEBUG` "
"is set to ``False``): :func:`sensitive_variables` and "
":func:`sensitive_post_parameters`."
msgstr "Bagaimanapun, terkadang jenis-jenis tertentu dari informasi mungkin terlalu sensitif dan demikian mungkin tidak sesuai akan terus dilacak, sebagai contoh san pengguna atau angka kartu kredit. Jadi Django menawarkan sekumpulan fungsi decorator untuk membantu anda mengendalikan informasi mana harus disaring keluar dari laporan kesalahan dalam lingkungan produksi (yaitu, dimana :setting:`DEBUG` disetel ke ``False``): :func:`sensitive_variables` dan :func:`sensitive_post_parameters`."

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:156
msgid ""
"If a function (either a view or any regular callback) in your code uses "
"local variables susceptible to contain sensitive information, you may "
"prevent the values of those variables from being included in error reports "
"using the ``sensitive_variables`` decorator::"
msgstr "Jika sebuah fungsi (baik sebuah tampilan atau callback umum apapun) dalam kode anda menggunakan variabel lokal rentan mengandung informasi sensitif, anda mungkin mencegah nilai-nilai variabel tersebut dari menjadi disertakan dalam laporan kesalahan menggunakan decorator ``sensitive_variables``::"

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:170
msgid ""
"In the above example, the values for the ``user``, ``pw`` and ``cc`` "
"variables will be hidden and replaced with stars (`**********`) in the error"
" reports, whereas the value of the ``name`` variable will be disclosed."
msgstr "Dalam contoh diatas, nilai-nilai untuk variabel ``user``, ``pw`` dan ``cc`` akan disembunyikan dan diganti dengan bintang (`**********`) dalam laporan kesalahan, dimana nilai dari variabel ``name`` akan diungkapkan."

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:175
msgid ""
"To systematically hide all local variables of a function from error logs, do"
" not provide any argument to the ``sensitive_variables`` decorator::"
msgstr "Untuk secara sistematis menyembunyikan semua variabel lokal dari sebuah fungsi dari laporan kesalahan, jangan menyediakan argumen apapun pada decorator ``sensitive_variables``::"

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:182
msgid "When using multiple decorators"
msgstr "Ketika menggunakan sejumlah dekorator"

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:184
msgid ""
"If the variable you want to hide is also a function argument (e.g. "
"'``user``’ in the following example), and if the decorated function has "
"multiple decorators, then make sure to place ``@sensitive_variables`` at the"
" top of the decorator chain. This way it will also hide the function "
"argument as it gets passed through the other decorators::"
msgstr "Jika variabel anda ingin sembunyikan adalah juga argumen fungsi (sebagai contoh '``user``’ dalam contoh berikut), dan jika fungsi dihiasi mempunyai banyak decorator, kemudian pastikan menempatkan ``@sensitive_variables`` pda atas dari rantai decorator. Cara ini dia akan juga menyembunyikan argumen fungsi ketika dia mendapatkan dilewati melalui decorator lain::"

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:198
msgid ""
"If one of your views receives an :class:`~django.http.HttpRequest` object "
"with :attr:`POST parameters<django.http.HttpRequest.POST>` susceptible to "
"contain sensitive information, you may prevent the values of those "
"parameters from being included in the error reports using the "
"``sensitive_post_parameters`` decorator::"
msgstr "Jika satu dari tampilan anda menerima sebuah obyek :class:`~django.http.HttpRequest` dengan :attr:`POST parameters<django.http.HttpRequest.POST>` rentan utnuk mengandung informasi sensitif, anda mungkin mencegah nilai-nilai dari parameter tersebut dari menjadi disertakan dalam laporan kesalahan menggunakan decorator ``sensitive_post_parameters``::"

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:214
msgid ""
"In the above example, the values for the ``pass_word`` and "
"``credit_card_number`` POST parameters will be hidden and replaced with "
"stars (`**********`) in the request's representation inside the error "
"reports, whereas the value of the ``name`` parameter will be disclosed."
msgstr "Dalam contoh diatas, nilai-nilai untuk parameter POST ``pass_word`` dan ``credit_card_number`` akan disembunyikan dan diganti dengan bintang (`**********`) dalam laporan kesalahan, dimana nilai dari variabel ``name`` akan diungkapkan."

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:219
msgid ""
"To systematically hide all POST parameters of a request in error reports, do"
" not provide any argument to the ``sensitive_post_parameters`` decorator::"
msgstr "Untuk secara sistematis menyembunyikan semua parameter POST dari sebuah permintaan dalam laporan kesalahan, jangan menyediakan argumen apapun pada decorator ``sensitive_variables``::"

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:226
msgid ""
"All POST parameters are systematically filtered out of error reports for "
"certain :mod:`django.contrib.auth.views` views (``login``, "
"``password_reset_confirm``, ``password_change``, and ``add_view`` and "
"``user_change_password`` in the ``auth`` admin) to prevent the leaking of "
"sensitive information such as user passwords."
msgstr "Semua parameter POST adalah sistematis disaring keluar dari laporan kesalahan untuk tampilan :mod:`django.contrib.auth.views` tertentu (``login``, ``password_reset_confirm``, ``password_change``, dan ``add_view`` dan ``user_change_password`` dalam admin ``auth``) untuk mencegah dari pembocoran dari informasi sensitif seperti sandi pengguna."

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:235
msgid "Custom error reports"
msgstr "Penyesuaian laporan kesalahan"

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:237
msgid ""
"All :func:`sensitive_variables` and :func:`sensitive_post_parameters` do is,"
" respectively, annotate the decorated function with the names of sensitive "
"variables and annotate the ``HttpRequest`` object with the names of "
"sensitive POST parameters, so that this sensitive information can later be "
"filtered out of reports when an error occurs. The actual filtering is done "
"by Django's default error reporter filter: "
":class:`django.views.debug.SafeExceptionReporterFilter`. This filter uses "
"the decorators' annotations to replace the corresponding values with stars "
"(`**********`) when the error reports are produced. If you wish to override "
"or customize this default behavior for your entire site, you need to define "
"your own filter class and tell Django to use it via the "
":setting:`DEFAULT_EXCEPTION_REPORTER_FILTER` setting::"
msgstr "Semua :func:`sensitive_variables` dan :func:`sensitive_post_parameters` lakukan adalah, masing-masing, keterangan dungsi dihiasi dengan nama-nama dari variabel sensitif dan keterangan obyek ``HttpRequest`` dengan nama-nama dari sensitif parameter POST, sehingga informasi sensitif ini dapat kemudian disaring keluar dari laporan ketika kesalahan muncul. Penyaring sebenarnya dilakukan oleh penyaring laporan kesalahan awal Django: :class:`django.views.debug.SafeExceptionReporterFilter`. Penyaring ini menggunakan keterangan dihiasi untuk mengganti nilai-nilai terhubung dengan bintang (`**********`) ketika laporan kesalahan di buat. Jika anda berharap mengesampingkan atau menyesuaikan perilaku awal ini untuk keseluruhan situs anda, anda butuh menentukan kelas penyaring sendiri dan beritahu Django untuk menggunakannya melalui pengaturan :setting:`DEFAULT_EXCEPTION_REPORTER_FILTER`:"

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:252
msgid ""
"You may also control in a more granular way which filter to use within any "
"given view by setting the ``HttpRequest``’s ``exception_reporter_filter`` "
"attribute::"
msgstr "Anda dapat juga mengendalikan cara lebih kecil penyaring mana untuk digunakan dalam tampilan yang diberikan oleh pengaturan atribut ``exception_reporter_filter`` ``HttpRequest``::"

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:263
msgid ""
"Your custom filter class needs to inherit from "
":class:`django.views.debug.SafeExceptionReporterFilter` and may override the"
" following methods:"
msgstr "Kelas penyaring penyesuaian anda butuh diwariskan dari :class:`django.views.debug.SafeExceptionReporterFilter` dan mungkin mengesampingkan cara berikut:"

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:271
msgid ""
"Returns ``True`` to activate the filtering operated in the other methods. By"
" default the filter is active if :setting:`DEBUG` is ``False``."
msgstr "Mengembalikan ``True`` untuk mengaktifkan penyaring dijalankan dalam cara lain. Secara awal penyaring aktif jika :setting:`DEBUG` adalah ``False``."

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:276
msgid ""
"Returns the filtered dictionary of POST parameters. By default it replaces "
"the values of sensitive parameters with stars (`**********`)."
msgstr "Mengembalikan kamis penyaring dari parameter POST. Secara awal dia mengganti nilai-nilai dari parameter sensitif dengan bintang (`**********`)."

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:281
msgid ""
"Returns the filtered dictionary of local variables for the given traceback "
"frame. By default it replaces the values of sensitive variables with stars "
"(`**********`)."
msgstr "Mengembalikan kamus disaring dari variabel lokal untuk kerangka pelacakan kembali yang diberikan. Secara awal dia mengganti nilai-nilai dari variabel sensitif dengan bintang (`**********`)."

#: ../../../../sources/1.9/docs/howto/error-reporting.txt:287
msgid ""
"You can also set up custom error reporting by writing a custom piece of "
":ref:`exception middleware <exception-middleware>`. If you do write custom "
"error handling, it's a good idea to emulate Django's built-in error handling"
" and only report/log errors if :setting:`DEBUG` is ``False``."
msgstr "Anda dapat juga mengatur penyesuaian pelaporan kesalahan dengan menulis sebuah potongan penyesuaian dari :ref:`exception middleware <exception-middleware>`. Jika anda melakukan menulis penyesuaian penanganan kesalahan, adalah ide bagus untuk meniru penanganan kesalahan siap pakai Django dan hanya laporan/catatan kesalahan jika setting:`DEBUG` adalah ``False``."

#: ../../../../sources/1.9/docs/howto/index.txt:3
msgid "\"How-to\" guides"
msgstr "Panduan \"Bagaimana\""

#: ../../../../sources/1.9/docs/howto/index.txt:5
msgid ""
"Here you'll find short answers to \"How do I....?\" types of questions. "
"These how-to guides don't cover topics in depth -- you'll find that material"
" in the :doc:`/topics/index` and the :doc:`/ref/index`. However, these "
"guides will help you quickly accomplish common tasks."
msgstr "Disini anda akan menemukan jawaban pendek pada jenis pertanyaan \"Bagaimana Saya....?\". Panduanbagaimana-untuk ini tidak mencakupi topik lebih dalam -- anda akan menemukan bahan tersebut di :doc:`/topics/index` dan the :doc:`/ref/index`. Bagaimanapun, panduan ini akan membantu anda dengan cepat menyelesaikan tugas-tugas umum."

#: ../../../../sources/1.9/docs/howto/index.txt:34
msgid ""
"The `Django community aggregator`_, where we aggregate content from the "
"global Django community. Many writers in the aggregator write this sort of "
"how-to material."
msgstr "`Django community aggregator`_, dimana kami mengumpulkan isi dari komunitas Django keseluruhan. Banyak penulis di perkumpulan menulis bahan bagaimana-untuk semacam ini."

#: ../../../../sources/1.9/docs/howto/initial-data.txt:3
msgid "Providing initial data for models"
msgstr "Menyediakan data awal untuk model"

#: ../../../../sources/1.9/docs/howto/initial-data.txt:5
msgid ""
"It's sometimes useful to pre-populate your database with hard-coded data "
"when you're first setting up an app. You can provide initial data via "
"fixtures."
msgstr "Terkadang berguna untuk pra-pengumpulan basisdata anda dengan data dikode keraskan ketika anda pertama kali mengatur aplikasi. Anda dapat menyedikan data awal melalui perlengkapan tetap."

#: ../../../../sources/1.9/docs/howto/initial-data.txt:11
msgid "Providing initial data with fixtures"
msgstr "Menyediakan data awal dengan perlengkapan tetap"

#: ../../../../sources/1.9/docs/howto/initial-data.txt:13
msgid ""
"A fixture is a collection of data that Django knows how to import into a "
"database. The most straightforward way of creating a fixture if you've "
"already got some data is to use the :djadmin:`manage.py dumpdata <dumpdata>`"
" command. Or, you can write fixtures by hand; fixtures can be written as "
"JSON, XML or YAML (with PyYAML_ installed) documents. The "
":doc:`serialization documentation </topics/serialization>` has more details "
"about each of these supported :ref:`serialization formats <serialization-"
"formats>`."
msgstr "Perlengkapan tetap adalah sebuah kumpulan dari data yang Django ketahui bagaimana diimpor kedalam sebuah basisdata. Kebanyakan jalan mudah dari pembuatan perlengkapan tetap jika anda telah mendapatkan beberapa data adalah untuk menggunakan perintah  :djadmin:`manage.py dumpdata <dumpdata>`. Atau, anda dapat menulis perlengkapan tetap dengan tangan; perlengkapan tetap dapat ditulis sebagai dokumen JSON, XML atau YAML (dengan PyYAML_ terpasang). :doc:`serialization documentation </topics/serialization>` mempunyai lebih rincian tentang setiap dari ini :ref:`serialization formats <serialization-formats>` yang didukung."

#: ../../../../sources/1.9/docs/howto/initial-data.txt:23
msgid ""
"As an example, though, here's what a fixture for a simple ``Person`` model "
"might look like in JSON:"
msgstr "Sebagai sebuah contoh, meskipun, ini adalah apa sebuah perlengkapan tetap untuk mode ``Person`` sederhana mungkin kelihatan seperti di JSON:"

#: ../../../../sources/1.9/docs/howto/initial-data.txt:47
msgid "And here's that same fixture as YAML:"
msgstr "Dan ini adalah yang perlengkapan tetap sama seperti YAML:"

#: ../../../../sources/1.9/docs/howto/initial-data.txt:62
msgid "You'll store this data in a ``fixtures`` directory inside your app."
msgstr "Anda akan menyimpan data ini dalam sebuah direktori ``fixtures`` didalam aplikasi anda."

#: ../../../../sources/1.9/docs/howto/initial-data.txt:64
msgid ""
"Loading data is easy: just call :djadmin:`manage.py loaddata <loaddata>` "
"``<fixturename>``, where ``<fixturename>`` is the name of the fixture file "
"you've created. Each time you run :djadmin:`loaddata`, the data will be read"
" from the fixture and re-loaded into the database. Note this means that if "
"you change one of the rows created by a fixture and then run "
":djadmin:`loaddata` again, you'll wipe out any changes you've made."
msgstr "Memuat data sangat mudah: cukup panggil :djadmin:`manage.py loaddata <loaddata>` ``<fixturename>``, dimana ``<fixturename>`` adalah nama dari berkas perlengkapan tetap anda telah buat. Setiap kali anda menjalankan :djadmin:`loaddata`, data akan dibaca dari perlengkapan tetap dan dimuat kembali kedalam basisdata. Catat ini berarti bahwa jika anda merubah satu dari baris-baris dibuat oleh sebuah perlengkapan tetap dan kemudian menjalankan :djadmin:`loaddata` kembali, anda akan menyapu bersih setiap perubahan anda telah buat."

#: ../../../../sources/1.9/docs/howto/initial-data.txt:72
msgid "Where Django finds fixture files"
msgstr "Dimana Django menemukan berkas-berkas perlengkapan tetap "

#: ../../../../sources/1.9/docs/howto/initial-data.txt:74
msgid ""
"By default, Django looks in the ``fixtures`` directory inside each app for "
"fixtures. You can set the :setting:`FIXTURE_DIRS` setting to a list of "
"additional directories where Django should look."
msgstr "Secara awal, Django mencari dalam direktori ``fixtures`` didalam setiap aplokasi untuk perlengkapan tetap. Anda dapat mengatur pengaturan :setting:`FIXTURE_DIRS`ke sebuah daftar dari direktoti tambahan dimana Django seharusnya melihat."

#: ../../../../sources/1.9/docs/howto/initial-data.txt:78
msgid ""
"When running :djadmin:`manage.py loaddata <loaddata>`, you can also specify "
"a path to a fixture file, which overrides searching the usual directories."
msgstr "Ketika menjalankan :djadmin:`manage.py loaddata <loaddata>`, anda dapat juga menentukan sebuah jalur untuk berkas pelengkapan tetap, yang mengesampingkan pencarian direktori-direktori biasanya."

#: ../../../../sources/1.9/docs/howto/initial-data.txt:84
msgid ""
"Fixtures are also used by the :ref:`testing framework <topics-testing-"
"fixtures>` to help set up a consistent test environment."
msgstr "Perlengkapan tetap juga digunakan oleh :ref:`testing framework <topics-testing-fixtures>` untuk membantu mengatur kelesarasan lingkungan percobaan."

#: ../../../../sources/1.9/docs/howto/jython.txt:3
msgid "Running Django on Jython"
msgstr "Menjalankan Django pada Jyton"

#: ../../../../sources/1.9/docs/howto/jython.txt:7
msgid ""
"Jython_ is an implementation of Python that runs on the Java platform (JVM)."
" This document will get you up and running with Django on top of Jython."
msgstr "Jython_ adalah sebuah penerapan dari Python yang berjalan pada Java platform (JVM). Dokumen ini akan membuat anda terbangun dan berjalan dengan Django diatas Jython."

#: ../../../../sources/1.9/docs/howto/jython.txt:11
msgid "Installing Jython"
msgstr "Memasang Jython"

#: ../../../../sources/1.9/docs/howto/jython.txt:13
msgid ""
"Django works with Jython versions 2.7b2 and higher. See the Jython_ website "
"for download and installation instructions."
msgstr "Django bekerja dengan Jython versi 2.7b2 dan lebih tinggi. Lihat situs jaringan Jython_ untuk petunjuk mengunduh dan memasang."

#: ../../../../sources/1.9/docs/howto/jython.txt:19
msgid "Creating a servlet container"
msgstr "Membuat kontainer servlet"

#: ../../../../sources/1.9/docs/howto/jython.txt:21
msgid ""
"If you just want to experiment with Django, skip ahead to the next section; "
"Django includes a lightweight Web server you can use for testing, so you "
"won't need to set up anything else until you're ready to deploy Django in "
"production."
msgstr "Jika anda hanya ingin mencoba dengan Django, lewati kedepan ke bagian selanjutnya; Django menyertakan peladen Jaringan ringan anda dapat gunakan untuk percobaan, jadi anda tidak butuh mengatur apapun lagi sampai anda telah siap untuk menyebarkan Django di produksi."

#: ../../../../sources/1.9/docs/howto/jython.txt:25
msgid ""
"If you want to use Django on a production site, use a Java servlet "
"container, such as `Apache Tomcat`_. Full JavaEE applications servers such "
"as `GlassFish`_ or `JBoss`_ are also OK, if you need the extra features they"
" include."
msgstr "Jika anda ingin menggunakan Django pada sebuah situs produksi, gunakan wadah Java servlet, seperti `Apache Tomcat`_. Peladen aplikasi JavaEE penuh seperti `GlassFish`_ atau `JBoss`_ juga OKE, jika anda butuh fitur-fitur tambahan mereka sertakan."

#: ../../../../sources/1.9/docs/howto/jython.txt:34
msgid "Installing Django"
msgstr "Memasang Django"

#: ../../../../sources/1.9/docs/howto/jython.txt:36
msgid ""
"The next step is to install Django itself. This is exactly the same as "
"installing Django on standard Python, so see :ref:`removing-old-versions-of-"
"django` and :ref:`install-django-code` for instructions."
msgstr "Langkah selanjutnya adalah memasang Django itu sendiri. Ini tepatnya sama ketika memasang Django pada Python standar, jadi lihat :ref:`removing-old-versions-of-django` dan :ref:`install-django-code` untuk petunjuk."

#: ../../../../sources/1.9/docs/howto/jython.txt:42
msgid "Installing Jython platform support libraries"
msgstr "Memasang pustaka-pustaka pendukung serambi Jython"

#: ../../../../sources/1.9/docs/howto/jython.txt:44
msgid ""
"The `django-jython`_ project contains database backends and management "
"commands for Django/Jython development. Note that the builtin Django "
"backends won't work on top of Jython."
msgstr "Proyek `django-jython`_ mengandung backend basisdata dan perintah pengelolaan untuk pengembangan Django/Jython. Catah bahwa backend Django siap pakai tidak akan bekerja di atas Jython."

#: ../../../../sources/1.9/docs/howto/jython.txt:50
msgid ""
"To install it, follow the `installation instructions`_ detailed on the "
"project website. Also, read the `database backends`_ documentation there."
msgstr "Untuk memasangnya, ikuti rincian `installation instructions`_ pada proyek situs jaringan. Juga, baca dokumentasi database backends`_ disana."

#: ../../../../sources/1.9/docs/howto/jython.txt:57
msgid "Differences with Django on Jython"
msgstr "Perbedaan dengan Django pada Jython"

#: ../../../../sources/1.9/docs/howto/jython.txt:61
msgid ""
"At this point, Django on Jython should behave nearly identically to Django "
"running on standard Python. However, are a few differences to keep in mind:"
msgstr "Pada titik ini, Django pada Jython harus berperilaku hampir mirip pada Django dijalankan pada Python standar. Bagaimanapun, sedikit perbedaan untuk dijaga dalam pikiran:"

#: ../../../../sources/1.9/docs/howto/jython.txt:64
msgid ""
"Remember to use the ``jython`` command instead of ``python``. The "
"documentation uses ``python`` for consistency, but if you're using Jython "
"you'll want to mentally replace ``python`` with ``jython`` every time it "
"occurs."
msgstr "Ingat untuk menggunakan perintah ``jython`` daripada ``python``. Dokumentasi menggunakan ``python`` untuk konsisten, tetapi jika anda sedang menggunakan Jython anda akan ingin secara mental mengganti ``python`` dengan ``jython`` setiap kali dia muncul."

#: ../../../../sources/1.9/docs/howto/jython.txt:69
msgid ""
"Similarly, you'll need to use the ``JYTHONPATH`` environment variable "
"instead of ``PYTHONPATH``."
msgstr "Samah halnya, anda akan butuh menggunakan variabel lingkungan ``JYTHONPATH`` daripada ``PYTHONPATH``."

#: ../../../../sources/1.9/docs/howto/jython.txt:72
msgid "Any part of Django that requires `Pillow`_ will not work."
msgstr "Bagian apapun dari Django yang membutuhkan `Pillow`_ tidak akan bekerja."

#: ../../../../sources/1.9/docs/howto/legacy-databases.txt:3
msgid "Integrating Django with a legacy database"
msgstr "Memadukan Django dengan basisdata warisan"

#: ../../../../sources/1.9/docs/howto/legacy-databases.txt:5
msgid ""
"While Django is best suited for developing new applications, it's quite "
"possible to integrate it into legacy databases. Django includes a couple of "
"utilities to automate as much of this process as possible."
msgstr "Selagi Django adalah terbaik cocok untuk pengembangan aplikasi baru, dia sangat dimungkinkan untuk menggabungkan nya kedalam warisan basisdata. Django menyertakan sepasang peralatan untuk mengotomatisasi sebanyak mungkin proses ini."

#: ../../../../sources/1.9/docs/howto/legacy-databases.txt:9
msgid ""
"This document assumes you know the Django basics, as covered in the "
":doc:`tutorial </intro/tutorial01>`."
msgstr "Dokumen ini menganggap anda mengetahui dasar-dasar Django, seperti yang tercakup dalam :doc:`tutorial </intro/tutorial01>`."

#: ../../../../sources/1.9/docs/howto/legacy-databases.txt:12
msgid ""
"Once you've got Django set up, you'll follow this general process to "
"integrate with an existing database."
msgstr "Sekali anda telah menyetel Django, anda akan mengikuti pengolahan umum untuk digabungkan dengan basisdata yang ada."

#: ../../../../sources/1.9/docs/howto/legacy-databases.txt:16
msgid "Give Django your database parameters"
msgstr "Berikan Django parameter basisdata anda"

#: ../../../../sources/1.9/docs/howto/legacy-databases.txt:18
msgid ""
"You'll need to tell Django what your database connection parameters are, and"
" what the name of the database is. Do that by editing the "
":setting:`DATABASES` setting and assigning values to the following keys for "
"the ``'default'`` connection:"
msgstr "Anda akan butuh memberitahu Django apa parameter hubungan basisdata anda, dan apa nama dari basisdatanya. Lakukan itu dengan menyunting pengaturan :setting:`DATABASES` dan tetapkan nilai-nilai pada kunci-kunci berikut untuk hubungan ``'default'``:"

#: ../../../../sources/1.9/docs/howto/legacy-databases.txt:23
msgid ":setting:`NAME`"
msgstr ":setting:`NAME`"

#: ../../../../sources/1.9/docs/howto/legacy-databases.txt:24
msgid ":setting:`ENGINE <DATABASE-ENGINE>`"
msgstr ":setting:`ENGINE <DATABASE-ENGINE>`"

#: ../../../../sources/1.9/docs/howto/legacy-databases.txt:25
msgid ":setting:`USER`"
msgstr ":setting:`USER`"

#: ../../../../sources/1.9/docs/howto/legacy-databases.txt:26
msgid ":setting:`PASSWORD`"
msgstr ":setting:`PASSWORD`"

#: ../../../../sources/1.9/docs/howto/legacy-databases.txt:27
msgid ":setting:`HOST`"
msgstr ":setting:`HOST`"

#: ../../../../sources/1.9/docs/howto/legacy-databases.txt:28
msgid ":setting:`PORT`"
msgstr ":setting:`PORT`"

#: ../../../../sources/1.9/docs/howto/legacy-databases.txt:31
msgid "Auto-generate the models"
msgstr "Model yang dibangun otomatis"

#: ../../../../sources/1.9/docs/howto/legacy-databases.txt:35
msgid ""
"Django comes with a utility called :djadmin:`inspectdb` that can create "
"models by introspecting an existing database. You can view the output by "
"running this command::"
msgstr "Django datang dengan peralatan dipanggil :djadmin:`inspectdb` yang dapat membuat model dengan menginterospeksi sebuah basisdata yang ada. Anda dapat melihat keluaran dengan menjalankan perintah ini::"

#: ../../../../sources/1.9/docs/howto/legacy-databases.txt:41
msgid "Save this as a file by using standard Unix output redirection::"
msgstr "Simpan ini sebagai sebuah berkas dengan menggunakan pengalihan standar keluaran Unix::"

#: ../../../../sources/1.9/docs/howto/legacy-databases.txt:45
msgid ""
"This feature is meant as a shortcut, not as definitive model generation. See"
" the :djadmin:`documentation of inspectdb <inspectdb>` for more information."
msgstr "Fitur ini berarti sebagai sebuah jalan pintas, bukan sebagai generasi model tetap. Lihat :djadmin:`documentation of inspectdb <inspectdb>` untuk informasi lebih."

#: ../../../../sources/1.9/docs/howto/legacy-databases.txt:48
msgid ""
"Once you've cleaned up your models, name the file ``models.py`` and put it "
"in the Python package that holds your app. Then add the app to your "
":setting:`INSTALLED_APPS` setting."
msgstr "Sekali anda telah membersihkan model anda, namai berkas ``models.py`` dan taruh dia di paket Python yang menampung aplikasi anda. Kemudian tambah aplikasi ke pengaturan :setting:`INSTALLED_APPS` anda."

#: ../../../../sources/1.9/docs/howto/legacy-databases.txt:52
msgid ""
"By default, :djadmin:`inspectdb` creates unmanaged models. That is, "
"``managed = False`` in the model's ``Meta`` class tells Django not to manage"
" each table's creation, modification, and deletion::"
msgstr "Secara awal, djadmin:`inspectdb` membuat model tidak terkelola. Yaitu, ``managed = False`` dalam kelas ``Meta`` model memberitahu Django tidak mengelola setiap pembuatan tabel, perubahan, dan penghapusan::"

#: ../../../../sources/1.9/docs/howto/legacy-databases.txt:63
msgid ""
"If you do want to allow Django to manage the table's lifecycle, you'll need "
"to change the :attr:`~django.db.models.Options.managed` option above to "
"``True`` (or simply remove it because ``True`` is its default value)."
msgstr "Jika anda ingin mengizinkan untuk mengelola daur hidup tabel, anda akan butuh merubah pilihan :attr:`~django.db.models.Options.managed` diatas menjadi ``True`` (atau mudahnya pindahkan dia karena ``True`` adalan nilai awalnya)."

#: ../../../../sources/1.9/docs/howto/legacy-databases.txt:68
msgid "Install the core Django tables"
msgstr "Pasang tabel inti Django"

#: ../../../../sources/1.9/docs/howto/legacy-databases.txt:70
msgid ""
"Next, run the :djadmin:`migrate` command to install any extra needed "
"database records such as admin permissions and content types::"
msgstr "Selanjutnya, jalankan perintah :djadmin:`migrate` untuk memasang setiap tambahan yang diperlukan rekaman basisdata seperti perizinan admin dan jenis-jenis isi::"

#: ../../../../sources/1.9/docs/howto/legacy-databases.txt:76
msgid "Test and tweak"
msgstr "Uji dan ubah"

#: ../../../../sources/1.9/docs/howto/legacy-databases.txt:78
msgid ""
"Those are the basic steps -- from here you'll want to tweak the models "
"Django generated until they work the way you'd like. Try accessing your data"
" via the Django database API, and try editing objects via Django's admin "
"site, and edit the models file accordingly."
msgstr "Itu adalah langkah-langkah awal -- dari sini anda akan ingin menyesuaikan model DJango dibangkitkan sampai mereka bekerja dengan cara yang anda inginkan. Coba mengakses data melalui API basisdata Django, dan coba menyunting obyek melalui situs admin Django, dan menyunting berkas model."

#: ../../../../sources/1.9/docs/howto/outputting-csv.txt:3
msgid "Outputting CSV with Django"
msgstr "Mengeluarkan CSV dengan Django"

#: ../../../../sources/1.9/docs/howto/outputting-csv.txt:5
msgid ""
"This document explains how to output CSV (Comma Separated Values) "
"dynamically using Django views. To do this, you can either use the Python "
"CSV library or the Django template system."
msgstr "Dokumen ini menjelaskan bagaimana keluaran CSV (Comma Separated Values) secara dinamis menggunakan tampilan Django. Untuk melakukan ini, anda dapat salah satu menggunakan pustaka CSV Python atau sistem cetakan Django."

#: ../../../../sources/1.9/docs/howto/outputting-csv.txt:10
msgid "Using the Python CSV library"
msgstr "Menggunakan pustaka CSV Python"

#: ../../../../sources/1.9/docs/howto/outputting-csv.txt:12
msgid ""
"Python comes with a CSV library, :mod:`csv`. The key to using it with Django"
" is that the :mod:`csv` module's CSV-creation capability acts on file-like "
"objects, and Django's :class:`~django.http.HttpResponse` objects are file-"
"like objects."
msgstr "Python datang dengan pustaka CSV, :mod:`csv`. Kunci menggunakannya dengan Django adalah :mod:`csv` kemampuan modul pembuatan-CSV bertindak pada obyek seperti-berkas, dan obyek :class:`~django.http.HttpResponse` Django adalah obyek seperti-berkas."

#: ../../../../sources/1.9/docs/howto/outputting-csv.txt:16
msgid "Here's an example::"
msgstr "Ini adalah sebuah contoh::"

#: ../../../../sources/1.9/docs/howto/outputting-csv.txt:32
#: ../../../../sources/1.9/docs/howto/outputting-pdf.txt:69
msgid ""
"The code and comments should be self-explanatory, but a few things deserve a"
" mention:"
msgstr "Kode dan komentar seharunya sudah cukup jelas, tetapi sedikit hal pantas disebut:"

#: ../../../../sources/1.9/docs/howto/outputting-csv.txt:35
msgid ""
"The response gets a special MIME type, :mimetype:`text/csv`. This tells "
"browsers that the document is a CSV file, rather than an HTML file. If you "
"leave this off, browsers will probably interpret the output as HTML, which "
"will result in ugly, scary gobbledygook in the browser window."
msgstr "Tanggapan mendapatkan jenis MIME khusus, mimetype:`text/csv`. Ini memberitahu perambah bahwa dokumen adalah sebuah berkas CSV, daripada sebuah berkas HTML. Jika anda mengosongkan ini, perambah akan kemungkinan mentafsirkan keluaran sebagai HTML,  yang akan menghasilkan buruk, uraian berbelit-belit yang menakutkan dalam jendela perambah."

#: ../../../../sources/1.9/docs/howto/outputting-csv.txt:40
msgid ""
"The response gets an additional ``Content-Disposition`` header, which "
"contains the name of the CSV file. This filename is arbitrary; call it "
"whatever you want. It'll be used by browsers in the \"Save as...\" dialog, "
"etc."
msgstr "Tanggapan mendapatkan sebuah kepala ``Content-Disposition`` tambahan, yang mengandung nama dari berkas CSV. Berkas nama ini berubah-ubah; panggil dia kapanpun anda inginkan. DIa akan digunakan oleh perambah dalam dialog \"Save as...\", dll."

#: ../../../../sources/1.9/docs/howto/outputting-csv.txt:44
msgid ""
"Hooking into the CSV-generation API is easy: Just pass ``response`` as the "
"first argument to ``csv.writer``. The ``csv.writer`` function expects a "
"file-like object, and :class:`~django.http.HttpResponse` objects fit the "
"bill."
msgstr "Mengait kedalam API pembangkitan-CSV adalah mudah: Cukup lewatkan ``response`` sebagai argumen eprtama pada ``csv.writer``. Fungsi ``csv.writer`` mengharapkan obyek berkas-seperti, dan obyek :class:`~django.http.HttpResponse` cocok dengan tagihan."

#: ../../../../sources/1.9/docs/howto/outputting-csv.txt:49
msgid ""
"For each row in your CSV file, call ``writer.writerow``, passing it an "
"iterable object such as a list or tuple."
msgstr "Untuk setiap baris di berkas CSV anda, panggil ``writer.writerow``, lewatkan dia obyek berputar seperti sebuah daftar atau tuple."

#: ../../../../sources/1.9/docs/howto/outputting-csv.txt:52
msgid ""
"The CSV module takes care of quoting for you, so you don't have to worry "
"about escaping strings with quotes or commas in them. Just pass "
"``writerow()`` your raw strings, and it'll do the right thing."
msgstr "Modul CSV merawat dari mengutip untuk anda, jadi jangan khawatir tentang pelolosan deretan karakter dengan kutip atau koma di dalamnya. Cukup lewatkan `writerow()`` deretan karakter mentah anda, dan dia akan melakukan hal benar."

#: ../../../../sources/1.9/docs/howto/outputting-csv.txt:56
msgid "Handling Unicode on Python 2"
msgstr "Menangani Unicode di Python 2"

#: ../../../../sources/1.9/docs/howto/outputting-csv.txt:58
msgid ""
"Python 2's :mod:`csv` module does not support Unicode input. Since Django "
"uses Unicode internally this means strings read from sources such as "
":class:`~django.http.HttpRequest` are potentially problematic. There are a "
"few options for handling this:"
msgstr "Modul :mod:`csv` Python2 tidak mendukung masukan Unicode. Sejak Django menggunakan Unicode secara internal in iberarti deretan karakter dibaca dari sumber seperti class:`~django.http.HttpRequest` adalah berpotensi bermasalah. Ada sedikit pilihan untuk menangani ini:"

#: ../../../../sources/1.9/docs/howto/outputting-csv.txt:63
msgid "Manually encode all Unicode objects to a compatible encoding."
msgstr "Secara manual menyandi semua obyek Unicode ke penyandian yang cocok."

#: ../../../../sources/1.9/docs/howto/outputting-csv.txt:65
msgid ""
"Use the ``UnicodeWriter`` class provided in the `csv module's examples "
"section`_."
msgstr "Gunakan kelas ``UnicodeWriter`` disediakan di `csv module's examples section`_."

#: ../../../../sources/1.9/docs/howto/outputting-csv.txt:68
msgid ""
"Use the `python-unicodecsv module`_, which aims to be a drop-in replacement "
"for :mod:`csv` that gracefully handles Unicode."
msgstr "Gunakan `python-unicodecsv module`_, yang menuju untuk menjadi pengganti untuk :mod:`csv` yang anggun menangani Unicode."

#: ../../../../sources/1.9/docs/howto/outputting-csv.txt:71
msgid ""
"For more information, see the Python documentation of the :mod:`csv` module."
msgstr "Untuk info lebih lanjut, lihat dokumentasi Python di modul :mod:`csv`."

#: ../../../../sources/1.9/docs/howto/outputting-csv.txt:79
msgid "Streaming large CSV files"
msgstr "Mengalirkan berkas-berkas CSV besar"

#: ../../../../sources/1.9/docs/howto/outputting-csv.txt:81
msgid ""
"When dealing with views that generate very large responses, you might want "
"to consider using Django's :class:`~django.http.StreamingHttpResponse` "
"instead. For example, by streaming a file that takes a long time to generate"
" you can avoid a load balancer dropping a connection that might have "
"otherwise timed out while the server was generating the response."
msgstr "Ketika berurusan dengan tampilan yang membangkitkan tanggapan yang sangat besar, anda mungkin ingin mempertimbangkan menggunakan :class:`~django.http.StreamingHttpResponse` Django. Sebagai contoh, dengan mengalirkan sebuah berkas yang memakan waktu lama untuk membangkitkan anda dapat menghindari penyeimbang memuat menjatuhkan hubungan yang mungkin telah dinyatakan habis selagi peladen membangkitkan tanggapan."

#: ../../../../sources/1.9/docs/howto/outputting-csv.txt:87
msgid ""
"In this example, we make full use of Python generators to efficiently handle"
" the assembly and transmission of a large CSV file::"
msgstr "Dalam contoh ini, kami membuat penggunaan penuh dari pembangkit Python untuk secara efisien menangani rakitan dan perpindahan dari berkas CSV besar::"

#: ../../../../sources/1.9/docs/howto/outputting-csv.txt:117
msgid "Using the template system"
msgstr "Menggunakan sistem cetakan"

#: ../../../../sources/1.9/docs/howto/outputting-csv.txt:119
msgid ""
"Alternatively, you can use the :doc:`Django template system "
"</topics/templates>` to generate CSV. This is lower-level than using the "
"convenient Python :mod:`csv` module, but the solution is presented here for "
"completeness."
msgstr "Kalau tidak, anda dapat menggunakan :doc:`Django template system </topics/templates>` untuk membangkitkan CSV. Ini adalah tingkatan lebih rendah daripada menggunakan modul :mod:`csv` mudah Python, tetapi pemecahannya adalah membawakannya kesini untuk kelengkapan."

#: ../../../../sources/1.9/docs/howto/outputting-csv.txt:123
msgid ""
"The idea here is to pass a list of items to your template, and have the "
"template output the commas in a :ttag:`for` loop."
msgstr "Ide disini adalah melewatkan sebuah daftar dari barang-barang ke cetakan anda, dan mempunyai keluaran cetakan koma di :ttag:`for` untuk berulang."

#: ../../../../sources/1.9/docs/howto/outputting-csv.txt:126
msgid "Here's an example, which generates the same CSV file as above::"
msgstr "Ini adalah contoh, yang akan membangkitkan berkas CSV sama seperti diatas::"

#: ../../../../sources/1.9/docs/howto/outputting-csv.txt:150
msgid ""
"The only difference between this example and the previous example is that "
"this one uses template loading instead of the CSV module. The rest of the "
"code -- such as the ``content_type='text/csv'`` -- is the same."
msgstr "Satu-satunya perbedaan diantara contoh ini dan contoh sebelumnya adalah bahwa satu ini menggunakan cetakan memuat daripada modul CSV. Sisa dari kode -- seperti ``content_type='text/csv'`` -- adalah sama."

#: ../../../../sources/1.9/docs/howto/outputting-csv.txt:154
msgid ""
"Then, create the template ``my_template_name.txt``, with this template code:"
msgstr "Kemudian, buat cetakan ``my_template_name.txt``, dengan kode cetakan ini:"

#: ../../../../sources/1.9/docs/howto/outputting-csv.txt:161
msgid ""
"This template is quite basic. It just iterates over the given data and "
"displays a line of CSV for each row. It uses the :tfilter:`addslashes` "
"template filter to ensure there aren't any problems with quotes."
msgstr "Cetakan ini sangat dasar. Dia hanya berulang terhadap data yang diberikan dan menampilkan sebauh baris dari CSV untuk setiap baris. Dia menggunakan cetakan penyaring :tfilter:`addslashes` untuk memastikan tidak ada masalah dengan kutipan."

#: ../../../../sources/1.9/docs/howto/outputting-csv.txt:166
msgid "Other text-based formats"
msgstr "Format berbasis teks lainnya"

#: ../../../../sources/1.9/docs/howto/outputting-csv.txt:168
msgid ""
"Notice that there isn't very much specific to CSV here -- just the specific "
"output format. You can use either of these techniques to output any text-"
"based format you can dream of. You can also use a similar technique to "
"generate arbitrary binary data; see :doc:`/howto/outputting-pdf` for an "
"example."
msgstr "Perhatikan bahwa tidak ada banyak spesifik pada CSV disini -- cukup bentuk keluaran spesifik. Anda dapat menggunakan salah satu dari teknik ini untuk mengeluarkan bentuk berdasarkan-teks apapun anda impikan. Anda dapat juga menggunakan teknik yang mirip untuk membangkitkan data biner berubah-ubah; lihat :doc:`/howto/outputting-pdf` untuk sebuah contoh. "

#: ../../../../sources/1.9/docs/howto/outputting-pdf.txt:3
msgid "Outputting PDFs with Django"
msgstr "Mengeluarkan PDF dengan Django"

#: ../../../../sources/1.9/docs/howto/outputting-pdf.txt:5
msgid ""
"This document explains how to output PDF files dynamically using Django "
"views. This is made possible by the excellent, open-source ReportLab_ Python"
" PDF library."
msgstr "Dokumen ini menjelaskan bagaimana mengeluarkan berkas-berkas PDF secara dinamis menggunakan tampilan Django. Ini dibuat mungkin oleh istimewa, sumber terbuka pustaka PDF Python ReportLab_."

#: ../../../../sources/1.9/docs/howto/outputting-pdf.txt:9
msgid ""
"The advantage of generating PDF files dynamically is that you can create "
"customized PDFs for different purposes -- say, for different users or "
"different pieces of content."
msgstr "Keuntungan dari membangkitkan berkas-berkas PDF secara dinamis adalah bahwa anda dapat membuat penyesuaian PDF untuk tujuan berbeda -- katakan, untuk pengguna berbeda atau potongan berbeda dari isi."

#: ../../../../sources/1.9/docs/howto/outputting-pdf.txt:13
msgid ""
"For example, Django was used at kusports.com_ to generate customized, "
"printer-friendly NCAA tournament brackets, as PDF files, for people "
"participating in a March Madness contest."
msgstr "Sebagai contoh, Django telah digunakan pada kusports.com_ untuk membangkitkan penyesuaian, kurung turnamen NCAA ramah-mencetak, sebagai berkas-berkas PDF, untuk orang yang ikut serta di perlombaan March Madness."

#: ../../../../sources/1.9/docs/howto/outputting-pdf.txt:21
msgid "Install ReportLab"
msgstr "Pasang ReportLab"

#: ../../../../sources/1.9/docs/howto/outputting-pdf.txt:23
msgid ""
"The ReportLab library is `available on PyPI`_. A `user guide`_ (not "
"coincidentally, a PDF file) is also available for download. You can install "
"ReportLab with ``pip``:"
msgstr "Pustaka ReportLab adalah `available on PyPI`_. Sebuah `user guide`_ (tidak secara kebetulan, sebuah berkas PDF) juga tersedia untuk unduhan. Anda dapat memasang ReportLab dengan ``pip``:"

#: ../../../../sources/1.9/docs/howto/outputting-pdf.txt:31
msgid ""
"Test your installation by importing it in the Python interactive "
"interpreter::"
msgstr "Ujikan pemasangan anda dengan mengimpornya dalam penterjemah interaktif Python::"

#: ../../../../sources/1.9/docs/howto/outputting-pdf.txt:35
msgid "If that command doesn't raise any errors, the installation worked."
msgstr "Jika perintah itu tidak menimbulkan kesalahan apapun, pemasangan bekerja."

#: ../../../../sources/1.9/docs/howto/outputting-pdf.txt:41
msgid "Write your view"
msgstr "Tulis tampilan anda"

#: ../../../../sources/1.9/docs/howto/outputting-pdf.txt:43
msgid ""
"The key to generating PDFs dynamically with Django is that the ReportLab API"
" acts on file-like objects, and Django's :class:`~django.http.HttpResponse` "
"objects are file-like objects."
msgstr "Kunci untuk membangkitkan PDF secara dinamis dengan Django adalah bahwa API ReportLab bertindak pada obyek seperti-berkas, dan obyek :class:`~django.http.HttpResponse` Django adalah obyek seperti-berkas."

#: ../../../../sources/1.9/docs/howto/outputting-pdf.txt:47
msgid "Here's a \"Hello World\" example::"
msgstr "Ini adalah contoh \"Hello World\" ::"

#: ../../../../sources/1.9/docs/howto/outputting-pdf.txt:72
msgid ""
"The response gets a special MIME type, :mimetype:`application/pdf`. This "
"tells browsers that the document is a PDF file, rather than an HTML file. If"
" you leave this off, browsers will probably interpret the output as HTML, "
"which would result in ugly, scary gobbledygook in the browser window."
msgstr "Tanggapan mendapatkan jenis MIME khusus, :mimetype:`application/pdf`. Ini memberitahu perambah bahwa dokumen adalah sebuah berkas PDF, daripada sebuah berkas HTML. Jika anda mengosongkan ini, perambah akan kemungkinan pentafsirkan keluaran sebagai HTML, yang akan menghasilkan buruk, uraian berbelit-belit yang menakutkan dalam jendela perambah."

#: ../../../../sources/1.9/docs/howto/outputting-pdf.txt:78
msgid ""
"The response gets an additional ``Content-Disposition`` header, which "
"contains the name of the PDF file. This filename is arbitrary: Call it "
"whatever you want. It'll be used by browsers in the \"Save as...\" dialog, "
"etc."
msgstr "Tanggapan mendapatkan sebuah tambahan kepala ``Content-Disposition``, yang mengandung nama dari berkas PDF. Nama berkas ini berubah-ubah: Panggil dia kapanpun anda ingin. Dia akan digunakan oleh perambah dalam dialog \"Save as...\", dll."

#: ../../../../sources/1.9/docs/howto/outputting-pdf.txt:82
msgid ""
"The ``Content-Disposition`` header starts with ``'attachment; '`` in this "
"example. This forces Web browsers to pop-up a dialog box "
"prompting/confirming how to handle the document even if a default is set on "
"the machine. If you leave off ``'attachment;'``, browsers will handle the "
"PDF using whatever program/plugin they've been configured to use for PDFs. "
"Here's what that code would look like::"
msgstr "Kepala ``Content-Disposition`` dimulai dengan ``'attachment; '`` dalam contoh ini. Ini memaksa perambah Jaringan memunculkan kotak dialog menunjuk/memastikan bagaimana menangani dokumen bahkan jika nilai awal disetel pada mesin. Jika anda meninggalkan ``'attachment; '``, perambah akan menangani PDF menggunakan program/tambahan apapun mereka telah konfigurasikan digunakan untuk PDF. Ini adalah apa kode kelihatan seperti::"

#: ../../../../sources/1.9/docs/howto/outputting-pdf.txt:91
msgid ""
"Hooking into the ReportLab API is easy: Just pass ``response`` as the first "
"argument to ``canvas.Canvas``. The ``Canvas`` class expects a file-like "
"object, and :class:`~django.http.HttpResponse` objects fit the bill."
msgstr "Mengaitkan kedalam API ReportLab adalah mudah: Cukup lewatkan ``response`` sebagai argumen pertama pada ``canvas.Canvas``. Kelas ``Canvas`` kecuali obyek seperti-berkas, dan obyek :class:`~django.http.HttpResponse` sesuai dengan tagihan."

#: ../../../../sources/1.9/docs/howto/outputting-pdf.txt:96
msgid ""
"Note that all subsequent PDF-generation methods are called on the PDF object"
" (in this case, ``p``) -- not on ``response``."
msgstr "Catat bahwa semua cara pembangkitan-PDF berikutnya dipanggil pada obyek PDF (dalam kasus ini, ``p``) -- bukan pada ``response``."

#: ../../../../sources/1.9/docs/howto/outputting-pdf.txt:99
msgid ""
"Finally, it's important to call ``showPage()`` and ``save()`` on the PDF "
"file."
msgstr "Akhirnya, sangatlah penting memanggil ``showPage()`` dan ``save()`` pada berkas PDF."

#: ../../../../sources/1.9/docs/howto/outputting-pdf.txt:104
msgid ""
"ReportLab is not thread-safe. Some of our users have reported odd issues "
"with building PDF-generating Django views that are accessed by many people "
"at the same time."
msgstr "ReportLab tidak thread-safe. Beberapa dari pengguna kami telah melaporkan masalah-masalah ganjil dengan membangun tampilan Django pembangkitan-PDF yang diakses oleh banyak orang pada waktu yang sama."

#: ../../../../sources/1.9/docs/howto/outputting-pdf.txt:109
msgid "Complex PDFs"
msgstr "PDF rumit"

#: ../../../../sources/1.9/docs/howto/outputting-pdf.txt:111
msgid ""
"If you're creating a complex PDF document with ReportLab, consider using the"
" :mod:`io` library as a temporary holding place for your PDF file. This "
"library provides a file-like object interface that is particularly "
"efficient. Here's the above \"Hello World\" example rewritten to use "
":mod:`io`::"
msgstr "Jika anda sedang membuat dokumen PDF rumit dengan ReportLab, pertimbangkan menggunakan pustaka :mod:`io` sebagai tempat menampung sementara untu berkas PDF anda. Pustaka ini menyediakan antarmuka obyek seperti-berkas yang khususnya efisien. Ini adalah contoh \"Hello World\" diatas ditulis kembali untuk menggunakan :mod:`io`::"

#: ../../../../sources/1.9/docs/howto/outputting-pdf.txt:145
msgid "Further resources"
msgstr "Sumberdaya lebih lanjut"

#: ../../../../sources/1.9/docs/howto/outputting-pdf.txt:147
msgid ""
"PDFlib_ is another PDF-generation library that has Python bindings. To use "
"it with Django, just use the same concepts explained in this article."
msgstr "PDFlib_ adalah pustaka pembangkitan-PDF lainnya yang mempunyai ikatan Python. Untuk menggunakannya dengan Django, cukup gunakan konsep sama dijelaskan dalam artikel ini."

#: ../../../../sources/1.9/docs/howto/outputting-pdf.txt:149
msgid ""
"`XHTML2PDF`_ is yet another PDF-generation library. It ships with an example"
" of how to integrate it with Django."
msgstr "`XHTML2PDF`_ adalah pustaka generasi-PDF lainnya. Dia dibungkus denngan sebuah contoh dari bagaimana menggabungkannya dengan Django."

#: ../../../../sources/1.9/docs/howto/outputting-pdf.txt:151
msgid ""
"HTMLdoc_ is a command-line script that can convert HTML to PDF. It doesn't "
"have a Python interface, but you can escape out to the shell using "
"``system`` or ``popen`` and retrieve the output in Python."
msgstr "HTMLdoc_ adalah tulisan baris-perintah yang dapat merubah HTML ke PDF. Dia tidak mempunyai antarmuka Python, tetapi anda dapat meloloskan ke shell menggunakan ``system`` atau ``popen`` dan mengambil keluaran di Python."

#: ../../../../sources/1.9/docs/howto/outputting-pdf.txt:160
msgid "Other formats"
msgstr "Bentuk lain"

#: ../../../../sources/1.9/docs/howto/outputting-pdf.txt:162
msgid ""
"Notice that there isn't a lot in these examples that's PDF-specific -- just "
"the bits using ``reportlab``. You can use a similar technique to generate "
"any arbitrary format that you can find a Python library for. Also see "
":doc:`/howto/outputting-csv` for another example and some techniques you can"
" use when generated text-based formats."
msgstr "Perhatikan bahwa tidak ada banyak di contoh ini yaitu spesifik-PDF -- cukup bit menggunakan ``reportlab``. Anda dapat menggunakan teknik mirip untuk membangkitkan bentuk berubah-ubah yang anda dapat temukan pustaka Python. Juga lihat :doc:`/howto/outputting-csv` untuk contoh lainnya dan beberapa teknik anda dapat gunakan ketika membangkitkan bentuk berbasis-teks."

#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:3
msgid "Deploying static files"
msgstr "menyebarkan berkas tetap"

#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:7
msgid ""
"For an introduction to the use of :mod:`django.contrib.staticfiles`, see "
":doc:`/howto/static-files/index`."
msgstr "Untuk perkenalan ke penggunaan :mod:`django.contrib.staticfiles`, lihat :doc:`/howto/static-files/index`."

#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:13
msgid "Serving static files in production"
msgstr "Melayani berkas statis di produksi"

#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:15
msgid ""
"The basic outline of putting static files into production is simple: run the"
" :djadmin:`collectstatic` command when static files change, then arrange for"
" the collected static files directory (:setting:`STATIC_ROOT`) to be moved "
"to the static file server and served. Depending on "
":setting:`STATICFILES_STORAGE`, files may need to be moved to a new location"
" manually or the :func:`post_process "
"<django.contrib.staticfiles.storage.StaticFilesStorage.post_process>` method"
" of the ``Storage`` class might take care of that."
msgstr "Garis besar dasar dari menaruh berkas-berkas tetap kedalam produksi adalah sederhana: jalankan perintah :djadmin:`collectstatic` ketika berkas-berkas tetap berubah, kemudian atur untuk direktori berkas-berkas tetap yang dikumpulkan. Tergantung pada :setting:`STATICFILES_STORAGE`, berkas-berkas mungkin butuh dipindahkan ke tempat baru secara manual atau cara :func:`post_process <django.contrib.staticfiles.storage.StaticFilesStorage.post_process>` dari kelas ``Storage`` mungkin mengurusinya."

#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:23
msgid ""
"Of course, as with all deployment tasks, the devil's in the details. Every "
"production setup will be a bit different, so you'll need to adapt the basic "
"outline to fit your needs. Below are a few common patterns that might help."
msgstr "Tentu saja, seperti semua tugas-tugas penyebaran, jahat adalah di dalam rincian. Setiap pengaturan produksi akan sedikit berbeda, jadi anda akan butuh mengadaptasi garis besar dasar untuk menyesuaikan kebutuhan anda. Dibawah ini adalah sedikit corak umum yang mungkin membantu."

#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:28
msgid "Serving the site and your static files from the same server"
msgstr "Melayani situs dan berkas-berkas tetap anda dari peladen sama"

#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:30
msgid ""
"If you want to serve your static files from the same server that's already "
"serving your site, the process may look something like:"
msgstr "Jika anda ingin melayani berkas-berkas tetap anda dari peladen sama yang sudah melayani situs anda, pengolahan mungkin terlihat sesuatu seperti:"

#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:33
msgid "Push your code up to the deployment server."
msgstr "Dorong kode anda ke atas ke peladen penyebaran."

#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:34
msgid ""
"On the server, run :djadmin:`collectstatic` to copy all the static files "
"into :setting:`STATIC_ROOT`."
msgstr "Di peladen, jalankan :djadmin:`collectstatic` untuk menyalin semua berkas statis kedalam :setting:`STATIC_ROOT`."

#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:36
msgid ""
"Configure your web server to serve the files in :setting:`STATIC_ROOT` under"
" the URL :setting:`STATIC_URL`. For example, here's :ref:`how to do this "
"with Apache and mod_wsgi <serving-files>`."
msgstr "Konfigurasikan peladen jaringan anda untuk melayani berkas-berkas dalam :setting:`STATIC_ROOT` dibawah URL :setting:`STATIC_URL`. Sebagai contoh, ini :ref:`how to do this with Apache and mod_wsgi <serving-files>`."

#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:40
msgid ""
"You'll probably want to automate this process, especially if you've got "
"multiple web servers. There's any number of ways to do this automation, but "
"one option that many Django developers enjoy is `Fabric "
"<http://fabfile.org/>`_."
msgstr "Anda akan mungkin ingin mengotomatisasi pengolahan ini, khususnya jika anda mendapatkan banyak peladen jaringan. Ada banyak sejumlah cara melakukan otomatisasi ini, tetapi satu pilihan yang banyak pengembang Django nikmati adalah `Fabric <http://fabfile.org/>`_."

#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:45
msgid ""
"Below, and in the following sections, we'll show off a few example fabfiles "
"(i.e. Fabric scripts) that automate these file deployment options. The "
"syntax of a fabfile is fairly straightforward but won't be covered here; "
"consult `Fabric's documentation <http://docs.fabfile.org/>`_, for a complete"
" explanation of the syntax."
msgstr "Dibawah ini, dan di bagian berikutnya, kami akan menampilkan sedikit contoh fabfile (yaitu tulisan Fabric) yang mengotomatisasi pilihan penyebaran berkas. Sintaksis dari fabfile adalah cukup mudah tetapi tidak akan dicakup disini; konsultasikan `Fabric's documentation <http://docs.fabfile.org/>`_, untuk penjelasan lengkap dari sintaksis."

#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:51
msgid ""
"So, a fabfile to deploy static files to a couple of web servers might look "
"something like::"
msgstr "Jadi, sebuah fabfile untuk menyebar berkas-berkas tetap ke sepasang peladen jaringan mungkin terlihat seperti ini::"

#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:67
msgid "Serving static files from a dedicated server"
msgstr "Melayani berkas statis dari sebuah server tersendiri"

#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:69
msgid ""
"Most larger Django sites use a separate Web server -- i.e., one that's not "
"also running Django -- for serving static files. This server often runs a "
"different type of web server -- faster but less full-featured. Some common "
"choices are:"
msgstr "Kebanyakan situs Django besar menggunakan peladen Jaringan terpisah -- yaitu, satu yang tidak juga menjalankan Django -- untuk melayani berkas-berkas tetap. Peladen ini sering berjalan jenis berbeda dari peladen jaringan -- lebih cepat tetapi sedikit fitur-penuh. Beberapa pilihan umum adalah:"

#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:79
msgid ""
"Configuring these servers is out of scope of this document; check each "
"server's respective documentation for instructions."
msgstr "Konfigurasi peladen ini diluar cakupan dari dokumen ini; periksa setiap dokumentasi masing-masing peladen untuk perintah."

#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:82
msgid ""
"Since your static file server won't be running Django, you'll need to modify"
" the deployment strategy to look something like:"
msgstr "Sejak peladen berkas tetap anda tidak akan menjalankan Django, anda akan butuh merubah strategi penyebaran menjadi kelihatan sesuatu seperti:"

#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:85
msgid "When your static files change, run :djadmin:`collectstatic` locally."
msgstr "Ketika berkas statis anda berubah, jalankan :djadmin:`collectstatic` secara lokal."

#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:87
msgid ""
"Push your local :setting:`STATIC_ROOT` up to the static file server into the"
" directory that's being served. `rsync <https://rsync.samba.org/>`_ is a "
"common choice for this step since it only needs to transfer the bits of "
"static files that have changed."
msgstr "Dorong :setting:`STATIC_ROOT` lokal anda sampai pada peladen berkas tetap kedalam direktori yang sedang dilayani. `rsync <https://rsync.samba.org/>`_ adalah sebuah pilihan umum untuk langkah ini sejak dia hanya butuh memindahkan bit ke berkas-berkas tetap yang telah berubah."

#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:92
msgid "Here's how this might look in a fabfile::"
msgstr "Ini adalah bagaimana ini mungkin kelihatan dalam fabfile::"

#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:115
msgid "Serving static files from a cloud service or CDN"
msgstr "Melayani berkas statis dari layanan cloud atau CDN"

#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:117
msgid ""
"Another common tactic is to serve static files from a cloud storage provider"
" like Amazon's S3 and/or a CDN (content delivery network). This lets you "
"ignore the problems of serving static files and can often make for faster-"
"loading webpages (especially when using a CDN)."
msgstr "Taktik umum lainnya adalah melayani berkas-berkas tetap dari penyedia penyimpanan awan seperti S3 Amazon dan/atau CDN (content delivery network). Ini membuat anda mengabaikan masalah dari melayani berkas-berkas tetap dan sering membuat untuk memuat-cepat halaman jaringan (khususnya ketika menggunakan CDN)."

#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:122
msgid ""
"When using these services, the basic workflow would look a bit like the "
"above, except that instead of using ``rsync`` to transfer your static files "
"to the server you'd need to transfer the static files to the storage "
"provider or CDN."
msgstr "Ketika menggunakan layanan ini, alurkerja dasar akan kelihatan sedikit seperti diatas, kecuali bahwa daripada menggunakan ``rsync`` untuk memindahkan berkas-berkas tetap anda ke peladen anda akan butuh untuk memindahkan berkas-berkas tetap ke penyedia panyimpanan atau CDN."

#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:126
msgid ""
"There's any number of ways you might do this, but if the provider has an API"
" a :doc:`custom file storage backend </howto/custom-file-storage>` will make"
" the process incredibly simple. If you've written or are using a 3rd party "
"custom storage backend, you can tell :djadmin:`collectstatic` to use it by "
"setting :setting:`STATICFILES_STORAGE` to the storage engine."
msgstr "Terdapat sejumlah jalan anda mungkin lakukan ini, tetapi jika penyedia mempunyai sebuah API :doc:`custom file storage backend </howto/custom-file-storage>` akan membuat pengolahan luar biasa sederhana. Jika anda telah menulis atau menggunakan backend penyimpanan penyesuaian pihak ke3, anda dapat memberitahu :djadmin:`collectstatic` untuk digunakan oleh pengatur :setting:`STATICFILES_STORAGE` ke mesin penyimpanan."

#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:132
msgid ""
"For example, if you've written an S3 storage backend in "
"``myproject.storage.S3Storage`` you could use it with::"
msgstr "Sebagai contoh, jika anda telah menulis sebuah backend penyimpanan S3 dalam ``myproject.storage.S3Storage`` anda dapat menggunakannya dengan::"

#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:137
msgid ""
"Once that's done, all you have to do is run :djadmin:`collectstatic` and "
"your static files would be pushed through your storage package up to S3. If "
"you later needed to switch to a different storage provider, it could be as "
"simple as changing your :setting:`STATICFILES_STORAGE` setting."
msgstr "Sekali semua dilakukan, semua anda harus lakukan adalah menjalankan :djadmin:`collectstatic` dan berkas-berkas tetap anda akan didorong melalui paket penyimpanan sampai ke S3. Jika anda kemudian membutuhkan mengganti ke  penyedia penyimpanan berbeda,  dia dapat semudah ketika merubah pengaturan :setting:`STATICFILES_STORAGE` anda. "

#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:142
msgid ""
"For details on how you'd write one of these backends, see :doc:`/howto"
"/custom-file-storage`. There are 3rd party apps available that provide "
"storage backends for many common file storage APIs. A good starting point is"
" the `overview at djangopackages.com <https://www.djangopackages.com/grids/g"
"/storage-backends/>`_."
msgstr "Untuk perincian pada bagaimana anda menulis satu dari backend ini, lihat :doc:`/howto/custom-file-storage`. Ada aplikasi pihak ke3 tersedia yang menyediakan backend penyimpanan untuk banyak API penyimpanan penyimpanan berkas. Titik awal yang bagus adalah `overview at djangopackages.com <https://www.djangopackages.com/grids/g/storage-backends/>`_."

#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:149
#: ../../../../sources/1.9/docs/howto/static-files/index.txt:184
msgid "Learn more"
msgstr "Pelajari lagi"

#: ../../../../sources/1.9/docs/howto/static-files/deployment.txt:151
msgid ""
"For complete details on all the settings, commands, template tags, and other"
" pieces included in :mod:`django.contrib.staticfiles`, see :doc:`the "
"staticfiles reference </ref/contrib/staticfiles>`."
msgstr "Untuk rincian lengkap pada semua pengaturan, perintah, cetakan etiket, dan potongan-potongan lainnya dalam :mod:`django.contrib.staticfiles`, lihat :doc:`the staticfiles reference </ref/contrib/staticfiles>`."

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:3
msgid "Managing static files (e.g. images, JavaScript, CSS)"
msgstr "Mengelola berkas statis (sebagai contoh gambar, JavaScript, CSS)"

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:5
msgid ""
"Websites generally need to serve additional files such as images, "
"JavaScript, or CSS. In Django, we refer to these files as \"static files\"."
"  Django provides :mod:`django.contrib.staticfiles` to help you manage them."
msgstr "Situs jaringan pada umumnya butuh melayani tambahan berkas-berkas seperti gambar, JavaScript, atau CSS. Di Django, kami mengacu pada berkas-berkas ini sebagai \"berkas-berkas tetap\". Django menyediakan :mod:`django.contrib.staticfiles` untuk membantu anda mengelola mereka."

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:9
msgid "This page describes how you can serve these static files."
msgstr "Halaman ini menggambarkan bagaimana anda dapat melayani berkas statis ini."

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:12
msgid "Configuring static files"
msgstr "Mengkonfigurasi berkas-berkas tetap"

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:14
msgid ""
"Make sure that ``django.contrib.staticfiles`` is included in your "
":setting:`INSTALLED_APPS`."
msgstr "Pastikan bahwa ``django.contrib.staticfiles`` disertakan dalam :setting:`INSTALLED_APPS` anda."

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:17
msgid "In your settings file, define :setting:`STATIC_URL`, for example::"
msgstr "Di berkas pengaturan anda, tentukan :setting:`STATIC_URL`, sebagai contoh::"

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:21
msgid ""
"In your templates, either hardcode the url like "
"``/static/my_app/myexample.jpg`` or, preferably, use the :ttag:`static"
"<staticfiles-static>` template tag to build the URL for the given relative "
"path by using the configured :setting:`STATICFILES_STORAGE` storage (this "
"makes it much easier when you want to switch to a content delivery network "
"(CDN) for serving static files)."
msgstr "Dalam cetakan anda, bai itu url kode keras seperti ``/static/my_app/myexample.jpg`` atau, lebih disukai, menggunakan cetakan etiket :ttag:`static<staticfiles-static>` untuk membangun URL dari jalur relatif yang diberikan dengan menggunakan penyimpanan :setting:`STATICFILES_STORAGE` yang dikonfigurasi (ini membuatnya lebih mudah ketika anda ingin mengganti ke content delivery network (CDN) untuk melayani berkas-berkas tetap). "

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:35
msgid ""
"Store your static files in a folder called ``static`` in your app. For "
"example ``my_app/static/my_app/myimage.jpg``."
msgstr "Simpan berkas statis anda di pelipat disebut ``static`` di aplikasi anda. Sebagai contoh ``my_app/static/my_app/myimage.jpg``. "

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:38
msgid "Serving the files"
msgstr "Melayani berkas-berkas"

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:40
msgid ""
"In addition to these configuration steps, you'll also need to actually serve"
" the static files."
msgstr "Dalam tambahan pada langkah-langkah konfigurasi ini, anda akan juga butuh untuk melayani berkas-berkas tetap."

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:43
msgid ""
"During development, if you use :mod:`django.contrib.staticfiles`, this will "
"be done automatically by :djadmin:`runserver` when :setting:`DEBUG` is set "
"to ``True`` (see :func:`django.contrib.staticfiles.views.serve`)."
msgstr "Selama pengembangan, jika anda menggunakan :mod:`django.contrib.staticfiles`, ini akan dilakukan otomatis oleh :djadmin:`runserver` ketika :setting:`DEBUG` disetel ke ``True`` (lihat :func:`django.contrib.staticfiles.views.serve`)."

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:47
msgid ""
"This method is **grossly inefficient** and probably **insecure**, so it is "
"**unsuitable for production**."
msgstr "Cara ini adalah **terlalu tidak efesien** dan mungkin **tidak aman**, jadi dia **tidak cocok untuk produksi**."

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:50
msgid ""
"See :doc:`/howto/static-files/deployment` for proper strategies to serve "
"static files in production environments."
msgstr "Lihat :doc:`/howto/static-files/deployment` untuk strategi yang sesuai untuk melayani berkas-berkas tetap dalam lingkungan produksi."

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:53
msgid ""
"Your project will probably also have static assets that aren't tied to a "
"particular app. In addition to using a ``static/`` directory inside your "
"apps, you can define a list of directories (:setting:`STATICFILES_DIRS`) in "
"your settings file where Django will also look for static files. For "
"example::"
msgstr "Proyek anda mungkin juga mempunyai aset tetap yang tidak diikat pada aplikasi khusus. Dalam tambahan untuk menggunakan direktori ``static/`` didalam aplikasi anda, anda dapat menentukan sebuah daftar direktori (:setting:`STATICFILES_DIRS`)  di berkas pengaturan anda dimana Django akan juga mencari untuk berkas-berkas tetap. Sebagai contoh::"

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:63
msgid ""
"See the documentation for the :setting:`STATICFILES_FINDERS` setting for "
"details on how ``staticfiles`` finds your files."
msgstr "Lihat dokumentasi untuk pengaturan :setting:`STATICFILES_FINDERS` untuk rincian pada bagaimana ``staticfiles`` menemukan berkas-berkas anda."

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:66
msgid "Static file namespacing"
msgstr "Namespacing berkas statis"

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:68
msgid ""
"Now we *might* be able to get away with putting our static files directly in"
" ``my_app/static/`` (rather than creating another ``my_app`` subdirectory), "
"but it would actually be a bad idea. Django will use the first static file "
"it finds whose name matches, and if you had a static file with the same name"
" in a *different* application, Django would be unable to distinguish between"
" them. We need to be able to point Django at the right one, and the easiest "
"way to ensure this is by *namespacing* them. That is, by putting those "
"static files inside *another* directory named for the application itself."
msgstr "Sekarang kami *mungkin* dapat pergi dengan menaruh berkas-berkas tetap kami secara langsung dalam ``my_app/static/`` (daripada membuat subdirektori ``my_app`` lain), tetapi dia akan sebenarnya adalah ide bagus. Django akan menggunakan berkas tetapnya untuk menemukan nama yang cocok, dan jika anda mempunyai berkas tetap dengan nama sama dalam aplikasi *berbeda*, Django tidak akan dapat membedakan diantara mereka. Kami butuh dapat menunjuk Django pada satu yang benar, dan cara termudah untuk memastikan ini dengan *namesapcing* mereka. Yaitu, dengan menaruh berkas-berkas tetap mereka didalam direktori *lain* dinamai untuk aplikasi itu sendiri."

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:81
msgid "Serving static files during development."
msgstr "Melayani berkas statis pada masa pengembangan"

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:83
msgid ""
"If you use :mod:`django.contrib.staticfiles` as explained above, "
":djadmin:`runserver` will do this automatically when :setting:`DEBUG` is set"
" to ``True``. If you don't have ``django.contrib.staticfiles`` in "
":setting:`INSTALLED_APPS`, you can still manually serve static files using "
"the :func:`django.contrib.staticfiles.views.serve` view."
msgstr "Jika anda menggunakan :mod:`django.contrib.staticfiles` seperti yang dijelaskan diatas, :djadmin:`runserver` akan melakukan ini secara otomatis ketika :setting:`DEBUG` disetel ke ``True``. Jika anda tidak mempunyai ``django.contrib.staticfiles`` di :setting:`INSTALLED_APPS`,  anda dapat masih secara manual melayani berkas-berkas tetap menggunakan tampilan :func:`django.contrib.staticfiles.views.serve`."

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:89
#: ../../../../sources/1.9/docs/howto/static-files/index.txt:121
msgid ""
"This is not suitable for production use! For some common deployment "
"strategies, see :doc:`/howto/static-files/deployment`."
msgstr "Ini tidak cocok untuk penggunaan produksi! Untuk beberapa strategi penyebaran umum, lihat :doc:`/howto/static-files/deployment`."

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:92
msgid ""
"For example, if your :setting:`STATIC_URL` is defined as ``/static/``, you "
"can do this by adding the following snippet to your urls.py::"
msgstr "Sebagai contoh, jika :setting:`STATIC_URL` anda ditentukan sebagai ``/static/``, anda dapat melakukan ini dengan menambahkan potongan berikut ke urls.py anda::"

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:104
msgid ""
"This helper function works only in debug mode and only if the given prefix "
"is local (e.g. ``/static/``) and not a URL (e.g. "
"``http://static.example.com/``)."
msgstr "Fungsi pembantu ini hanya bekerja dalam suasana mencari kesalahan dan hanya jika awalan yang diberikan adalah lokal (sebagai contoh ``/static/``) dan bukan URL (sebagai contoh ``http://static.example.com/``)."

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:108
msgid ""
"Also this helper function only serves the actual :setting:`STATIC_ROOT` "
"folder; it doesn't perform static files discovery like "
":mod:`django.contrib.staticfiles`."
msgstr "Juga fungsi pembantu ini hanya melayani folder :setting:`STATIC_ROOT` sebenarnya; dia tidak menampilkan berkas-berkas tetap seperti :mod:`django.contrib.staticfiles`."

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:115
msgid "Serving files uploaded by a user during development."
msgstr "Melayani berkas yang diunggah oleh pengguna saat pengembangan"

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:117
msgid ""
"During development, you can serve user-uploaded media files from "
":setting:`MEDIA_ROOT` using the "
":func:`django.contrib.staticfiles.views.serve` view."
msgstr "Selama pengembangan, anda dapat melayani berkas-berkas media diupload-pengguna dari :setting:`MEDIA_ROOT` menggunakan tampilan :func:`django.contrib.staticfiles.views.serve`."

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:124
msgid ""
"For example, if your :setting:`MEDIA_URL` is defined as ``/media/``, you can"
" do this by adding the following snippet to your urls.py::"
msgstr "Sebagai contoh, jika :setting:`MEDIA_URL` anda ditentukan sebagai ``/media/``, anda dapat melakukan ini dengan menambahkan potongan berikut ke urls.py anda::"

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:136
msgid ""
"This helper function works only in debug mode and only if the given prefix "
"is local (e.g. ``/media/``) and not a URL (e.g. "
"``http://media.example.com/``)."
msgstr "Fungsi pembantu ini bekerja hanya dalam suasana mencari kesalahan dan hanya jika awalan yang diberikan adalah lokal (sebagai contoh ``/media/``) dan bukan URL (sebagai contoh ``http://media.example.com/``)."

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:145
msgid ""
"When running tests that use actual HTTP requests instead of the built-in "
"testing client (i.e. when using the built-in :class:`LiveServerTestCase "
"<django.test.LiveServerTestCase>`) the static assets need to be served along"
" the rest of the content so the test environment reproduces the real one as "
"faithfully as possible, but ``LiveServerTestCase`` has only very basic "
"static file-serving functionality: It doesn't know about the finders feature"
" of the ``staticfiles`` application and assumes the static content has "
"already been collected under :setting:`STATIC_ROOT`."
msgstr "Ketika menjalankan percobaan yang menggunakan permintaan HTTP sebenarnya daripada klien percobaan siap pakai (yaitu ketika menggunakan :class:`LiveServerTestCase <django.test.LiveServerTestCase>` siap pakai) aset tetap butuh dilayani bersama sisa dari isi sehingga lingkungan percobaan memproduksi kembali satu yang asli setepat mungkin, tetapi ``LiveServerTestCase`` mempunyai hanya sangat dasar berkas tetap-melayani fungsi: Dia tidak tahu bahwa penemu fitur dari aplikasi ``staticfiles`` dan menganggap isi statis telah dikumpulkan dibawah :setting:`STATIC_ROOT`. "

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:154
msgid ""
"Because of this, ``staticfiles`` ships its own "
":class:`django.contrib.staticfiles.testing.StaticLiveServerTestCase`, a "
"subclass of the built-in one that has the ability to transparently serve all"
" the assets during execution of these tests in a way very similar to what we"
" get at development time with ``DEBUG = True``, i.e. without having to "
"collect them using :djadmin:`collectstatic` first."
msgstr "Karena ini, ``staticfiles`` mengemas :class:`django.contrib.staticfiles.testing.StaticLiveServerTestCase` milik dia sendiri, sebuah subkelas dari satu siap pakai yang mempunyai kemampuan untuk transparan melayani semua aset selama pelaksanaan dari percobaan ini dengan cara sangat mirip pada apa kami dapat di waktu pengembangan dengan ``DEBUG = True``, yaitu tanpa mengumpulkan mereka menggunakan :djadmin:`collectstatic` pertama kali."

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:162
#: ../../../../sources/1.9/docs/howto/upgrade-version.txt:87
msgid "Deployment"
msgstr "Penyebaran"

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:164
msgid ""
":mod:`django.contrib.staticfiles` provides a convenience management command "
"for gathering static files in a single directory so you can serve them "
"easily."
msgstr ":mod:`django.contrib.staticfiles` menyediakan kenyamanan perintah pengelolaan untuk mengumpulkan berkas-berkas tetap dalam direktori tunggal sehingga anda dapat melayani mereka dengan mudah."

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:167
msgid ""
"Set the :setting:`STATIC_ROOT` setting to the directory from which you'd "
"like to serve these files, for example::"
msgstr "Setel pengaturan :setting:`STATIC_ROOT` ke direktori dari dimana anda ingin melayani berkas-berkas ini, sebagai contoh::"

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:172
msgid "Run the :djadmin:`collectstatic` management command::"
msgstr "Jalankan perintah pengelolaan :djadmin:`collectstatic`::"

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:176
msgid ""
"This will copy all files from your static folders into the "
":setting:`STATIC_ROOT` directory."
msgstr "Ini akan menyalin semua berkas dari pelipat tetap anda kedalam direktori :setting:`STATIC_ROOT`."

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:179
msgid ""
"Use a web server of your choice to serve the files. :doc:`/howto/static-"
"files/deployment` covers some common deployment strategies for static files."
msgstr "Gunakan sebuah peladen jaringan dari pilihan anda untuk melayani berkas-berkas. :doc:`/howto/static-files/deployment` melingkupi beberapa strategi penyebaran umum untuk berkas-berkas tetap."

#: ../../../../sources/1.9/docs/howto/static-files/index.txt:186
msgid ""
"This document has covered the basics and some common usage patterns. For "
"complete details on all the settings, commands, template tags, and other "
"pieces included in :mod:`django.contrib.staticfiles`, see :doc:`the "
"staticfiles reference </ref/contrib/staticfiles>`."
msgstr "Dokumen ini melingkupi corak penggunaan dasar dan beberapa umum. Untuk melengkapi rincian pada semua pengaturan, perintah, etiket cetakan, dan potongan lainnya disertakan dalam :mod:`django.contrib.staticfiles`, lihat :doc:`the acuan berkas tetap </ref/contrib/staticfiles>`."

#: ../../../../sources/1.9/docs/howto/upgrade-version.txt:3
msgid "Upgrading Django to a newer version"
msgstr "Meningkatkan Django ke versi terbaru"

#: ../../../../sources/1.9/docs/howto/upgrade-version.txt:5
msgid ""
"While it can be a complex process at times, upgrading to the latest Django "
"version has several benefits:"
msgstr "Selama dia dapat menjadi pengolahan rumit terkadang, meningkatkan ke versi Django terakhir mempunyai beberapa keuntungan:"

#: ../../../../sources/1.9/docs/howto/upgrade-version.txt:8
msgid "New features and improvements are added."
msgstr "Fitur baru dan perbaikan telah ditambahkan."

#: ../../../../sources/1.9/docs/howto/upgrade-version.txt:9
msgid "Bugs are fixed."
msgstr "Kesalahan diperbaiki."

#: ../../../../sources/1.9/docs/howto/upgrade-version.txt:10
msgid ""
"Older version of Django will eventually no longer receive security updates. "
"(see :ref:`backwards-compatibility-policy`)."
msgstr "Versi lama Django akhirnya akan tidak menerima pembaharuan keamanan. (lihat :ref:`backwards-compatibility-policy`)."

#: ../../../../sources/1.9/docs/howto/upgrade-version.txt:12
msgid ""
"Upgrading as each new Django release is available makes future upgrades less"
" painful by keeping your code base up to date."
msgstr "Meningkatkan ketika setiap terbitan Django baru tersedia membuat peningkatan masa depan sedikit menyakitkan dengan menjaga dasar kode anda terbaru."

#: ../../../../sources/1.9/docs/howto/upgrade-version.txt:15
msgid ""
"Here are some things to consider to help make your upgrade process as smooth"
" as possible."
msgstr "Ini adalah beberapa hal untuk dipertimbangkan untuk membantu pengolahan membuat peningkatan anda semulus mungkin."

#: ../../../../sources/1.9/docs/howto/upgrade-version.txt:19
msgid "Required Reading"
msgstr "Dibutuhkan Membaca"

#: ../../../../sources/1.9/docs/howto/upgrade-version.txt:21
msgid ""
"If it's your first time doing an upgrade, it is useful to read the "
":doc:`guide on the different release processes </internals/release-"
"process>`."
msgstr "Jika ini adalah pertama kali melakukan peningkatan, adalah sangat berguna untuk membaca :doc:`panduan dalam pengolahan terbitan berbeda </internals/release-process>`."

#: ../../../../sources/1.9/docs/howto/upgrade-version.txt:24
msgid ""
"Afterwards, you should familiarize yourself with the changes that were made "
"in the new Django version(s):"
msgstr "Setelah itu, anda harus akrabkan diri anda dengan perubahan yang telah dibuat di versi Django baru:"

#: ../../../../sources/1.9/docs/howto/upgrade-version.txt:27
msgid ""
"Read the :doc:`release notes </releases/index>` for each 'final' release "
"from the one after your current Django version, up to and including the "
"version to which you plan to upgrade."
msgstr "Baca :doc:`release notes </releases/index>` untuk setiap terbitan 'final' dari satu setelah versi Django saat ini, sampai dan termasuk versi dimana anda berencana untuk ditingkatkan."

#: ../../../../sources/1.9/docs/howto/upgrade-version.txt:30
msgid ""
"Look at the :doc:`deprecation timeline</internals/deprecation>` for the "
"relevant versions."
msgstr "Lihat :doc:`deprecation timeline</internals/deprecation>` untuk versi bersangkutan."

#: ../../../../sources/1.9/docs/howto/upgrade-version.txt:33
msgid ""
"Pay particular attention to backwards incompatible changes to get a clear "
"idea of what will be needed for a successful upgrade."
msgstr "Bayar perhatian khusus untuk perubahan ketidaksesuaian kebelakang untuk mendapatkan ide jelas dari apa akan dibutuhkan untuk peningkatan yang berhasil."

#: ../../../../sources/1.9/docs/howto/upgrade-version.txt:37
msgid "Dependencies"
msgstr "Ketergantungan"

#: ../../../../sources/1.9/docs/howto/upgrade-version.txt:39
msgid ""
"In most cases it will be necessary to upgrade to the latest version of your "
"Django-related dependencies as well. If the Django version was recently "
"released or if some of your dependencies are not well-maintained, some of "
"your dependencies may not yet support the new Django version. In these cases"
" you may have to wait until new versions of your dependencies are released."
msgstr "Dalam kebanyakan kasus-kasus dia akan butuh ditingkatkan sampai versi terakhir dari ketergantungan hubungan-Django anda juga. Jika versi Django saat ini diterbitkan atau jika beberapa dari ketergantungan tidak dirawat-baik, beberapa dari ketergantungan mungkin tidak mendukung versi Django baru. Dalam kasus ini anda mungkin harus menunggu sampai versi terbaru dari ketergantungan anda diterbitkan."

#: ../../../../sources/1.9/docs/howto/upgrade-version.txt:46
msgid "Installation"
msgstr "Pemasangan"

#: ../../../../sources/1.9/docs/howto/upgrade-version.txt:48
msgid ""
"Once you're ready, it is time to :doc:`install the new Django version "
"</topics/install>`. If you are using virtualenv_ and it is a major upgrade, "
"you might want to set up a new environment with all the dependencies first."
msgstr "Sekali anda siap, adalah waktunya untuk :doc:`install the new Django version </topics/install>`. Jika anda menggunakan virtualenv_ dan peningkatan utama, anda mungkin ingin menyetel lingkungan baru dengan ketergantungan terlebih dahulu."

#: ../../../../sources/1.9/docs/howto/upgrade-version.txt:52
msgid ""
"Exactly which steps you will need to take depends on your installation "
"process. The most convenient way is to use pip_ with the ``--upgrade`` or "
"``-U`` flag:"
msgstr "Tepatnya langkah-langkah mana anda akan butuh untuk mengambil ketergantungan pada pengolahan pemasangan anda. Kebanyakan cara mudah adalah menggunakan pip_ dengan bendera ``--upgrade`` atau ``-U``:"

#: ../../../../sources/1.9/docs/howto/upgrade-version.txt:59
msgid "pip_ also automatically uninstalls the previous version of Django."
msgstr "pip_ juga otomatis melepas versi Django sebelumnya."

#: ../../../../sources/1.9/docs/howto/upgrade-version.txt:61
msgid ""
"If you use some other installation process, you might have to manually "
":ref:`uninstall the old Django version <removing-old-versions-of-django>` "
"and should look at the complete installation instructions."
msgstr "Jika anda menggunakan beberapa pengolahan pemasangan lain, anda mungkin harus secara manual :ref:`uninstall the old Django version <removing-old-versions-of-django>` dan harus mencari pada perintah pemasangan yang lengkap."

#: ../../../../sources/1.9/docs/howto/upgrade-version.txt:71
msgid ""
"When the new environment is set up, :doc:`run the full test suite "
"</topics/testing/overview>` for your application. In Python 2.7+, "
"deprecation warnings are silenced by default. It is useful to turn the "
"warnings on so they are shown in the test output (you can also use the flag "
"if you test your app manually using ``manage.py runserver``):"
msgstr "Ketika lingkungan baru disetel, :doc:`run the full test suite </topics/testing/overview>` untuk aplikasi anda. Di Python 2.7+, peringatan ketergantungan didiamkan secara awal. Itu sangan berguna untuk menyalakan peringatan sehingga mereka yang ditampilkan dalam keluaran percobaan (anda dapat juga menggunakan bendera jika anda mencoba aplikasi anda secara manual menggunakan ``manage.py runserver``):"

#: ../../../../sources/1.9/docs/howto/upgrade-version.txt:81
msgid ""
"After you have run the tests, fix any failures. While you have the release "
"notes fresh in your mind, it may also be a good time to take advantage of "
"new features in Django by refactoring your code to eliminate any deprecation"
" warnings."
msgstr "Setelah anda menjalankan percobaan, perbaiki setiap kegagalan. Selagi anda telah menerbitkan catatan segar dalam pikiran anda, itu mungkin juga waktu yang tepat untuk mengambil keuntungan dari fitur baru dalam Django dengan merefaktor kode anda untuk mengurangi setiap peringatan pengusangan."

#: ../../../../sources/1.9/docs/howto/upgrade-version.txt:89
msgid ""
"When you are sufficiently confident your app works with the new version of "
"Django, you're ready to go ahead and :doc:`deploy </howto/deployment/index>`"
" your upgraded Django project."
msgstr "Ketika anda cukup percaya diri aplikasi anda bekerja dengan versi baru dari Django, anda siap melanjutkan dan :doc:`deploy </howto/deployment/index>` proyek Django anda yang ditingkatkan."

#: ../../../../sources/1.9/docs/howto/upgrade-version.txt:93
msgid ""
"If you are using caching provided by Django, you should consider clearing "
"your cache after upgrading. Otherwise you may run into problems, for "
"example, if you are caching pickled objects as these objects are not "
"guaranteed to be pickle-compatible across Django versions. A past instance "
"of incompatibility was caching pickled :class:`~django.http.HttpResponse` "
"objects, either directly or indirectly via the "
":func:`~django.views.decorators.cache.cache_page` decorator."
msgstr "Jika anda menggunakan penembolokan oleh Django, anda harus mempertimbangkan membersihkan tembolok setelah meningkatkan. Jika tidak anda mungkin berjalan kedalam masalah, sebagai contoh, jika anda sedang menembolok objek pickledimana obyek ini tidak dijamin untuk menjadi pickle cocok terhadap versi Django. Contoh lama dari ketidakcocokan adalah menembolok objek :class:`~django.http.HttpResponse` pickle, salah satu langsung atau tidak langsung melalui decorator :func:`~django.views.decorators.cache.cache_page`."

#: ../../../../sources/1.9/docs/howto/windows.txt:3
msgid "How to install Django on Windows"
msgstr "Bagaimana memasang Django pada WIndows"

#: ../../../../sources/1.9/docs/howto/windows.txt:5
msgid ""
"This document will guide you through installing Python 3.5 and Django on "
"Windows. It also provides instructions for installing `virtualenv`_ and "
"`virtualenvwrapper`_, which make it easier to work on Python projects. This "
"is meant as a beginner's guide for users working on Django projects and does"
" not reflect how Django should be installed when developing patches for "
"Django itself."
msgstr "Dokumen ini akan memandu anda melalui pemasangan Python 3.5 dan Django pada Windows. Dia juga menyediakan perintah-perintah untuk memasang  `virtualenv`_ dan `virtualenvwrapper`_, yang membuatnya lebih mudah untuk bekerja pada proyek Python. Ini berarti sebagai panduan pemula untuk pengguna bekerja pada proyek Django dan tidak mencerminkan bagaimana Django harus dipasang ketika menyebarkan tambalan untuk Django itu sendiri."

#: ../../../../sources/1.9/docs/howto/windows.txt:12
msgid ""
"The steps in this guide have been tested with Windows 7, 8, and 10. In other"
" versions, the steps would be similar. You will need to be familiar with "
"using the Windows command prompt."
msgstr "Langkah-langkah ini dalam panduan telah diujikan dengan Windows 7,8, dan 10. Dengan kata lain, langkah-langkah akan mirip. Anda akan butuh menjadi akrab dengan menggunakan command prompt Windows."

#: ../../../../sources/1.9/docs/howto/windows.txt:17
msgid "Install Python"
msgstr "Pasang Phyton"

#: ../../../../sources/1.9/docs/howto/windows.txt:19
msgid ""
"Django is a Python web framework, thus requiring Python to be installed on "
"your machine. At the time of writing, Python 3.5 is the latest version."
msgstr "Django adalah sebuah kerangka kerja jaringan Python, demikian membutuhkan dipasang pada mesin anda. Pada saat menulis, Python 3.5 adalah versi terakhir."

#: ../../../../sources/1.9/docs/howto/windows.txt:22
msgid ""
"To install Python on your machine go to https://python.org/downloads/. The "
"website should offer you a download button for the latest Python version. "
"Download the executable installer and run it. Check the box next to ``Add "
"Python 3.5 to PATH`` and then click ``Install Now``."
msgstr "Untuk memasang Pyhton pada mesin anda pergi ke https://python.org/downloads/. Jaringan situs harus menawarkan anda tombol unduhan untuk versi Python terakhir. Unduh pemasang dijalankan dan jalankan dia. Centang kotak dekat ``Add Python 3.5 to PATH`` dan klik ``Install Now``."

#: ../../../../sources/1.9/docs/howto/windows.txt:27
msgid ""
"After installation, open the command prompt and check that the Python "
"version matches the version you installed by executing::"
msgstr "Setelah pemasangan, buka command prompt dan periksa bahwa versi Python cocok dengan versi anda pasang dengan menjalankan::"

#: ../../../../sources/1.9/docs/howto/windows.txt:33
msgid "About ``pip``"
msgstr "Tentang ``pip``"

#: ../../../../sources/1.9/docs/howto/windows.txt:35
msgid ""
"`pip`_ is a package manage for Python. It makes installing and uninstalling "
"Python packages (such as Django!) very easy. For the rest of the "
"installation, we'll use ``pip`` to install Python packages from the command "
"line."
msgstr "`pip`_ adalah sebuah pengelola paet untuk Python. Dia membuat memasang dan mencopot paket Python (seperti Django!) sangat mudah. Untuk sisa dari pemasangan, kami akan menggunakan ``pip`` untuk memasang paket Python dari baris perintah."

#: ../../../../sources/1.9/docs/howto/windows.txt:42
msgid "Install ``virtualenv`` and ``virtualenvwrapper``"
msgstr "Pasang ``virtualenv`` dan ``virtualenvwrapper``"

#: ../../../../sources/1.9/docs/howto/windows.txt:44
msgid ""
"`virtualenv`_ and `virtualenvwrapper`_ provide a dedicated environment for "
"each Django project you create. While not mandatory, this is considered a "
"best practice and will save you time in the future when you're ready to "
"deploy your project. Simply type::"
msgstr "`virtualenv`_ dan `virtualenvwrapper`_ menyediakan sebuah lingkungan khusus untuk setiap proyek Django anda buat. Selagi bukan kewajiban, ini dipertimbangkan sebagai praktik terbaik dan akan menghemat waktu anda di masa depan ketika anda sudah siap menyebarkan proyek anda. Cukup ketik::"

#: ../../../../sources/1.9/docs/howto/windows.txt:51
msgid "Then create a virtual environment for your project::"
msgstr "Kemudian buat lingkungan maya untuk proyek anda::"

#: ../../../../sources/1.9/docs/howto/windows.txt:55
msgid ""
"The virtual environment will be activated automatically and you'll see "
"\"(myproject)\" next to the command prompt to designate that. If you start a"
" new command prompt, you'll need to activate the environment again using::"
msgstr "Lingkungan maya akan diaktifkan otomatis dan anda akan melihat \"(myproject)\" dekat dengan command prompt untuk menandai itu. Jika anda mulai command prompt baru, anda akan butuh mengaktifkan lingkungan kembali menggunakan::"

#: ../../../../sources/1.9/docs/howto/windows.txt:65
msgid "Install Django"
msgstr "Pasanga Django"

#: ../../../../sources/1.9/docs/howto/windows.txt:67
msgid "Django can be installed easily using ``pip``."
msgstr "Django dapat dipasang dengan mudah menggunakan ``pip``."

#: ../../../../sources/1.9/docs/howto/windows.txt:69
msgid "In the command prompt, execute the following command::"
msgstr "Dalam command prompt, jalankan perintah berikut::"

#: ../../../../sources/1.9/docs/howto/windows.txt:73
msgid "This will download and install the latest Django release."
msgstr "Ini akan mengunduh dan memasang terbitan Django terakhir."

#: ../../../../sources/1.9/docs/howto/windows.txt:75
msgid ""
"After the installation has completed, you can verify your Django "
"installation by executing ``django-admin --version`` in the command prompt."
msgstr "Setelah pemasangan lengkap, anda dapat memeriksa pemasangan Django anda dengan menjalankan ``django-admin --version`` di command prompt."

#: ../../../../sources/1.9/docs/howto/windows.txt:78
msgid ""
"See :ref:`database-installation` for information on database installation "
"with Django."
msgstr "Lihat :ref:`database-installation` untuk informasi pada pemasangan basisdata dengan Django."

#: ../../../../sources/1.9/docs/howto/windows.txt:82
msgid "Common pitfalls"
msgstr "Kesalahan umum"

#: ../../../../sources/1.9/docs/howto/windows.txt:84
msgid ""
"If ``django-admin`` only displays the help text no matter what arguments it "
"is given, there is probably a problem with the file association in Windows. "
"Check if there is more than one environment variable set for running Python "
"scripts in ``PATH``. This usually occurs when there is more than one Python "
"version installed."
msgstr "Jika ``django-admin`` hanya menampilkan teks bantuan tidak perduli argumen apa yang diberikan, ada kemungkinan masalah dengan berkas terkait di Windows. Periksa jika ada lagi dari satu kumpulan lingkungan variabel untuk menjalankan tulisan Python dalam  ``PATH``. Ini biasanya muncul ketika ada lebih dari satu versi Python terpasang."

#: ../../../../sources/1.9/docs/howto/windows.txt:90
msgid ""
"If you are connecting to the internet behind a proxy, there might be problem"
" in running the command ``pip install django``. Set the environment "
"variables for proxy configuration in the command prompt as follows::"
msgstr "Jika anda sedang terhubung ke internet di belakang proxy, kemungkinan menjadi masalah dalam menjalankan perintah ``pip install django``. Setel lingkungan variabel untuk konfigurasi proxy dalam command prompt sebagai berikut::"

#: ../../../../sources/1.9/docs/howto/writing-migrations.txt:3
msgid "Writing database migrations"
msgstr "Menulis perpindahan basisdata"

#: ../../../../sources/1.9/docs/howto/writing-migrations.txt:5
msgid ""
"This document explains how to structure and write database migrations for "
"different scenarios you might encounter. For introductory material on "
"migrations, see :doc:`the topic guide </topics/migrations>`."
msgstr "Dokumen ini menjelaskan bagaimana menyusun dan menulis perpindahan basisdata untuk skenario berbeda anda mungkin hadapi. Untuk bahan perkenalan pada perpindahan, lihat :doc:`the topic guide </topics/migrations>`."

#: ../../../../sources/1.9/docs/howto/writing-migrations.txt:12
msgid "Data migrations and multiple databases"
msgstr "Perpindahan data dan banyak basisdata"

#: ../../../../sources/1.9/docs/howto/writing-migrations.txt:14
msgid ""
"When using multiple databases, you may need to figure out whether or not to "
"run a migration against a particular database. For example, you may want to "
"**only** run a migration on a particular database."
msgstr "Ketika menggunakan banyak basisdata, anda mungkin butuh memahami apakat atau tidak menjalankan perpindahan terhadap basisdata tertentu. Sebagai contoh, anda ingin **hanya** menjalankan perpindahan pada basisdata tertentu."

#: ../../../../sources/1.9/docs/howto/writing-migrations.txt:18
msgid ""
"In order to do that you can check the database connection's alias inside a "
"``RunPython`` operation by looking at the ``schema_editor.connection.alias``"
" attribute::"
msgstr "Untuk melakukan itu anda dapat memeriksa nama lain hubungan basisdata didalam operasi ``RunPython`` dengan mencari atribut ``schema_editor.connection.alias``::"

#: ../../../../sources/1.9/docs/howto/writing-migrations.txt:41
msgid ""
"You can also provide hints that will be passed to the "
":meth:`allow_migrate()` method of database routers as ``**hints``:"
msgstr "Anda dapat juga menyediakan bayangan yang akan dilewatkan ke cara :meth:`allow_migrate()` dari router basisdata sebagai ``**hints``: "

#: ../../../../sources/1.9/docs/howto/writing-migrations.txt:54
msgid "Then, to leverage this in your migrations, do the following::"
msgstr "Kemudian, untuk mempengaruhi ini dalam pemindahan anda, lakukan berikut::"

#: ../../../../sources/1.9/docs/howto/writing-migrations.txt:72
msgid ""
"If your ``RunPython`` or ``RunSQL`` operation only affects one model, it's "
"good practice to pass ``model_name`` as a hint to make it as transparent as "
"possible to the router. This is especially important for reusable and third-"
"party apps."
msgstr "Jika `operasi `RunPython`` atau ``RunSQL`` anda hanya berpengaruh pada satu model, adalah   latihan bagus untuk melewatkan ``model_name`` sebagai sebuah bayangan untuk membuatnya se transparan mungkin ke router. Ini khususnya penting untuk aplikasi digunakan kembali dan pihak ketiga."

#: ../../../../sources/1.9/docs/howto/writing-migrations.txt:77
msgid "Migrations that add unique fields"
msgstr "Perpindahan yang menambah bidang unik"

#: ../../../../sources/1.9/docs/howto/writing-migrations.txt:79
msgid ""
"Applying a \"plain\" migration that adds a unique non-nullable field to a "
"table with existing rows will raise an error because the value used to "
"populate existing rows is generated only once, thus breaking the unique "
"constraint."
msgstr "Memberlakukan perpindahan \"plain\" yang menambahkan bidang bukan null unik ke sebuah tabel dengan baris yang ada akan menampilkan sebuah kesalahan karena nilai digunakan untuk mengumpulkan baris-baris yang ada dibangkitkan hanya sekali, demikian merusak pembatas unik."

#: ../../../../sources/1.9/docs/howto/writing-migrations.txt:83
msgid ""
"Therefore, the following steps should be taken. In this example, we'll add a"
" non-nullable :class:`~django.db.models.UUIDField` with a default value. "
"Modify the respective field according to your needs."
msgstr "Karena itu, langkah-langkah berikut harus diambil. Dalam contoh ini, kami akan menambahkan :class:`~django.db.models.UUIDField` bukan null dengan nilai awal. Rubah bidang masing-masing menurut kebutuhan anda."

#: ../../../../sources/1.9/docs/howto/writing-migrations.txt:87
msgid ""
"Add the field on your model with ``default=uuid.uuid4`` and ``unique=True`` "
"arguments (choose an appropriate default for the type of the field you're "
"adding)."
msgstr "Tambah bidang pada model anda dengan argumen ``default=uuid.uuid4`` dan ``unique=True``  (pilih awal yang sesuai untuk jenis dari bidang anda sedang tambahkan)."

#: ../../../../sources/1.9/docs/howto/writing-migrations.txt:91
msgid ""
"Run the :djadmin:`makemigrations` command. This should generate a migration "
"with an ``AddField`` operation."
msgstr "Jalankan perintah  :djadmin:`makemigrations`. Ini harus membangkitkan perpindahan dengan tindakan ``AddField``."

#: ../../../../sources/1.9/docs/howto/writing-migrations.txt:94
msgid ""
"Generate two empty migration files for the same app by running "
"``makemigrations myapp --empty`` twice. We've renamed the migration files to"
" give them meaningful names in the examples below."
msgstr "Bangkitkan dua berkas-berkas perpindahan kosong untuk aplikasi sama dengan menjalankan ``makemigrations myapp --empty`` dua kali. Kami telah menamai kembali berkas-berkas perpindahan untuk memberikan mereka nama berarti di contoh dibawah."

#: ../../../../sources/1.9/docs/howto/writing-migrations.txt:98
msgid ""
"Copy the ``AddField`` operation from the auto-generated migration (the first"
" of the three new files) to the last migration and change ``AddField`` to "
"``AlterField``. For example:"
msgstr "Salin operasi ``AddField`` dari perpindahan dibangkitkan otomatis (pertama dari tiga berkas-berkas baru) ke perpindahan terakhir dan rubah ``AddField`` ke ``AlterField``. Sebagi contoh: "

#: ../../../../sources/1.9/docs/howto/writing-migrations.txt:127
msgid ""
"Edit the first migration file. The generated migration class should look "
"similar to this:"
msgstr "Sunting berkas perpindahan pertama. Kelas perpindahan dibangkitkan harus kelihatan mirip seperti ini:"

#: ../../../../sources/1.9/docs/howto/writing-migrations.txt:147
msgid ""
"Change ``unique=True`` to ``null=True`` -- this will create the intermediary"
" null field and defer creating the unique constraint until we've populated "
"unique values on all the rows."
msgstr "Rubah ``unique=True`` menjadi ``null=True`` -- ini akan membuat perantara bidang null dan menunda pembuatan pembatas unik sampai kami telah mengumpulkan nilai-nilai unik pada semua baris."

#: ../../../../sources/1.9/docs/howto/writing-migrations.txt:151
msgid ""
"In the first empty migration file, add a "
":class:`~django.db.migrations.operations.RunPython` or "
":class:`~django.db.migrations.operations.RunSQL` operation to generate a "
"unique value (UUID in the example) for each existing row. For example:"
msgstr "Dalam berkas perpindahan kosong pertama, tambah tindakan :class:`~django.db.migrations.operations.RunPython` atau :class:`~django.db.migrations.operations.RunSQL` untuk membangkitkan nilai unik (UUID dalam contoh) untuk setiap baris yang ada. Sebagai contoh:"

#: ../../../../sources/1.9/docs/howto/writing-migrations.txt:183
msgid ""
"Now you can apply the migrations as usual with the :djadmin:`migrate` "
"command."
msgstr "Sekarang anda dapat berlakukan perpindahan seperti biasa dengan perintah :djadmin:`migrate`"

#: ../../../../sources/1.9/docs/howto/writing-migrations.txt:185
msgid ""
"Note there is a race condition if you allow objects to be created while this"
" migration is running. Objects created after the ``AddField`` and before "
"``RunPython`` will have their original ``uuid``’s overwritten."
msgstr "Catat ada kondisi jarang jika anda mengizinkan obyek untuk dibuat selagi perpindahan ini berjalan. Obyek dibuat setelah ``AddField`` dan sebelum ``RunPython`` akan mempunyai ``uuid`` asli mereka ditulis kembali."

#: ../../../../sources/1.9/docs/howto/writing-migrations.txt:190
msgid "Controlling the order of migrations"
msgstr "Mengendalikan urutan dari pemindahan"

#: ../../../../sources/1.9/docs/howto/writing-migrations.txt:192
msgid ""
"Django determines the order in which migrations should be applied not by the"
" filename of each migration, but by building a graph using two properties on"
" the ``Migration`` class: ``dependencies`` and ``run_before``."
msgstr "Django menentukan urutan dalam perpindahan mana harus diberlakukan tidak berdasarkan nama berkas dari setiap perpindahan, tetapi dengan membangun sebauh grafik menggunakan dua alat pada kelas ``Migration``: ``dependencies`` dan ``run_before``."

#: ../../../../sources/1.9/docs/howto/writing-migrations.txt:196
msgid ""
"If you've used the :djadmin:`makemigrations` command you've probably already"
" seen ``dependencies`` in action because auto-created migrations have this "
"defined as part of their creation process."
msgstr "Jika anda telah menggunakan perintah :djadmin:`makemigrations` anda mungkin seudah melihat ``dependencies`` dalam tindakan karena perpindahan dibuat-otomatis mempunyai penentuan ini sebagai bagian dari pengolahan pembuatan mereka."

#: ../../../../sources/1.9/docs/howto/writing-migrations.txt:200
msgid "The ``dependencies`` property is declared like this::"
msgstr "Properti ``dependencies`` diumumkan seperti ini::"

#: ../../../../sources/1.9/docs/howto/writing-migrations.txt:210
msgid ""
"Usually this will be enough, but from time to time you may need to ensure "
"that your migration runs *before* other migrations. This is useful, for "
"example, to make third-party apps' migrations run *after* your "
":setting:`AUTH_USER_MODEL` replacement."
msgstr "Biasanya ini akan cukup, tetapi dari waktu ke waktu anda mungkin butuh memastikan bahwa perpindahan anda berjalan *sebelum* perpindahan lain. Ini berguna, sebagai contoh, untuk membuat perpindahan aplikasi pihak ketiga berjalan *setelah* pergantian :setting:`AUTH_USER_MODEL` anda."

#: ../../../../sources/1.9/docs/howto/writing-migrations.txt:215
msgid ""
"To achieve this, place all migrations that should depend on yours in the "
"``run_before`` attribute on your ``Migration`` class::"
msgstr "Untuk mencapai ini, tempatkan semua perpindahan yang harus tergantung pada diri anda dalam atribut ``run_before`` pada kelas ``Migration`` anda."

#: ../../../../sources/1.9/docs/howto/writing-migrations.txt:225
msgid ""
"Prefer using ``dependencies`` over ``run_before`` when possible. You should "
"only use ``run_before`` if it is undesirable or impractical to specify "
"``dependencies`` in the migration which you want to run after the one you "
"are writing."
msgstr "Lebih suka menggunakan ``dependencies`` daripada ``run_before`` ketika memungkinkan. Anda harus hanya menggunakan ``run_before`` jika dia tidak diinginkan atau tidak praktis untuk menentukan ``dependencies`` dalam perpindahan yang anda ingin jalankan setelah satu anda sedang tulis."
