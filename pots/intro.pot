# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Django 1.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-23 14:56+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../intro/contributing.txt:3
# 3265bc00730f44169681a7d6f1ccda66
msgid "Writing your first patch for Django"
msgstr ""

#: ../../intro/contributing.txt:6
# 5209427672e9495f930294d9ce9aadc6
msgid "Introduction"
msgstr ""

#: ../../intro/contributing.txt:8
# b568ab4df303467c9dfd00c7b53858ec
msgid "Interested in giving back to the community a little? Maybe you've found a bug in Django that you'd like to see fixed, or maybe there's a small feature you want added."
msgstr ""

#: ../../intro/contributing.txt:12
# ba6d8b5be3814e0bb9b8539c8e6d1ea1
msgid "Contributing back to Django itself is the best way to see your own concerns addressed. This may seem daunting at first, but it's really pretty simple. We'll walk you through the entire process, so you can learn by example."
msgstr ""

#: ../../intro/contributing.txt:17
# 9a023a036c244106a88da93d5b751661
msgid "Who's this tutorial for?"
msgstr ""

#: ../../intro/contributing.txt:19
# 7133d1787ac64465acca9bc4c3e275d4
msgid "For this tutorial, we expect that you have at least a basic understanding of how Django works. This means you should be comfortable going through the existing tutorials on :doc:`writing your first Django app</intro/tutorial01>`. In addition, you should have a good understanding of Python itself. But if you don't, \"Dive Into Python\" (for `Python 2`__, for `Python 3`__) is a fantastic (and free) online book for beginning Python programmers."
msgstr ""

#: ../../intro/contributing.txt:26
# 60269e59d85f4c989c62cc7b7d833e91
msgid "Those of you who are unfamiliar with version control systems and Trac will find that this tutorial and its links include just enough information to get started. However, you'll probably want to read some more about these different tools if you plan on contributing to Django regularly."
msgstr ""

#: ../../intro/contributing.txt:31
# 9a9f6198a269473188c9954286f95a3d
msgid "For the most part though, this tutorial tries to explain as much as possible, so that it can be of use to the widest audience."
msgstr ""

#: ../../intro/contributing.txt:34
#: ../../intro/tutorial01.txt:36
# 92b08dcbd9bd40e78a9bbe0b58d49d9d
# ca5b2a8d5ba24846a9d1ca06f6a14c31
msgid "Where to get help:"
msgstr ""

#: ../../intro/contributing.txt:36
# aad28df850a246a8a09df6116c538edb
msgid "If you're having trouble going through this tutorial, please post a message to `django-developers`__ or drop by `#django-dev on irc.freenode.net`__ to chat with other Django users who might be able to help."
msgstr ""

#: ../../intro/contributing.txt:46
# 66a6e1c54af844e28625c1807c2a8030
msgid "What does this tutorial cover?"
msgstr ""

#: ../../intro/contributing.txt:48
# a027ee9632524a969a2a15f46755f9ee
msgid "We'll be walking you through contributing a patch to Django for the first time. By the end of this tutorial, you should have a basic understanding of both the tools and the processes involved. Specifically, we'll be covering the following:"
msgstr ""

#: ../../intro/contributing.txt:52
# d2a74b249db84037904de97321d392eb
msgid "Installing Git."
msgstr ""

#: ../../intro/contributing.txt:53
# bf83dc0ad53f431d9a3d237a92e186d7
msgid "How to download a development copy of Django."
msgstr ""

#: ../../intro/contributing.txt:54
# 1a74b22b579845b99140ba5a046f99f9
msgid "Running Django's test suite."
msgstr ""

#: ../../intro/contributing.txt:55
# fb42dfd9a7014740a8ae8678581d31ae
msgid "Writing a test for your patch."
msgstr ""

#: ../../intro/contributing.txt:56
# 1842bf7f5e8342a29fcc08ca2db7c5b4
msgid "Writing the code for your patch."
msgstr ""

#: ../../intro/contributing.txt:57
# c91e038b5742463db5341850ce05cc38
msgid "Testing your patch."
msgstr ""

#: ../../intro/contributing.txt:58
# 8a9a4392809a43dcaa355e9af616af26
msgid "Generating a patch file for your changes."
msgstr ""

#: ../../intro/contributing.txt:59
# 762a80b82e7a446e9c198eba795cfe07
msgid "Where to look for more information."
msgstr ""

#: ../../intro/contributing.txt:61
# 7b3f0cfe758140f9b4b588bfcd47fa71
msgid "Once you're done with the tutorial, you can look through the rest of :doc:`Django's documentation on contributing</internals/contributing/index>`. It contains lots of great information and is a must read for anyone who'd like to become a regular contributor to Django. If you've got questions, it's probably got the answers."
msgstr ""

#: ../../intro/contributing.txt:68
# 8b91955d41254ca1a3a330dbf262a20e
msgid "Installing Git"
msgstr ""

#: ../../intro/contributing.txt:70
# a6aa9aa1ca5b4d81ba55578931d715e9
msgid "For this tutorial, you'll need Git installed to download the current development version of Django and to generate patch files for the changes you make."
msgstr ""

#: ../../intro/contributing.txt:74
# 04dc3e4dbfd84b68a8c322dca5c946cf
msgid "To check whether or not you have Git installed, enter ``git`` into the command line. If you get messages saying that this command could be found, you'll have to download and install it, see `Git's download page`__."
msgstr ""

#: ../../intro/contributing.txt:78
# fe5e05a7bf1e40739f2e62616effa809
msgid "If you're not that familiar with Git, you can always find out more about its commands (once it's installed) by typing ``git help`` into the command line."
msgstr ""

#: ../../intro/contributing.txt:84
# 767c1b12b1044ee4a6ad4671f3fcdf26
msgid "Getting a copy of Django's development version"
msgstr ""

#: ../../intro/contributing.txt:86
# 0f755ae4ee6f48bb9fe351a4b0ccb9fc
msgid "The first step to contributing to Django is to get a copy of the source code. From the command line, use the ``cd`` command to navigate to the directory where you'll want your local copy of Django to live."
msgstr ""

#: ../../intro/contributing.txt:90
# 8e50d016a9564135a2e5fa4e5f2a2c8e
msgid "Download the Django source code repository using the following command::"
msgstr ""

#: ../../intro/contributing.txt:96
# b730433f64d14b1b8a11efa6def9694d
msgid "For users who wish to use `virtualenv`__, you can use::"
msgstr ""

#: ../../intro/contributing.txt:100
# c975f845f7de40fba0373376516820eb
msgid "(where ``django`` is the directory of your clone that contains ``setup.py``) to link your cloned checkout into a virtual environment. This is a great option to isolate your development copy of Django from the rest of your system and avoids potential package conflicts."
msgstr ""

#: ../../intro/contributing.txt:108
# 18e8e713cabd4a6d8bebb47d8b316f20
msgid "Rolling back to a previous revision of Django"
msgstr ""

#: ../../intro/contributing.txt:110
# 6b666e2eb6b444cfb38acc5dda67f3ae
msgid "For this tutorial, we'll be using `ticket #17549`__ as a case study, so we'll rewind Django's version history in git to before that ticket's patch was applied. This will allow us to go through all of the steps involved in writing that patch from scratch, including running Django's test suite."
msgstr ""

#: ../../intro/contributing.txt:115
# 66b3de4c0f3b4d04b3c5baa216c86862
msgid "**Keep in mind that while we'll be using an older revision of Django's trunk for the purposes of the tutorial below, you should always use the current development revision of Django when working on your own patch for a ticket!**"
msgstr ""

#: ../../intro/contributing.txt:121
# 93c6882305244be69a12defea900d752
msgid "The patch for this ticket was written by Ulrich Petri, and it was applied to Django as `commit ac2052ebc84c45709ab5f0f25e685bf656ce79bc`__. Consequently, we'll be using the revision of Django just prior to that, `commit 39f5bc7fc3a4bb43ed8a1358b17fe0521a1a63ac`__."
msgstr ""

#: ../../intro/contributing.txt:130
# 7d90750e876e458b873716f5f16f08e8
msgid "Navigate into Django's root directory (that's the one that contains ``django``, ``docs``, ``tests``, ``AUTHORS``, etc.). You can then check out the older revision of Django that we'll be using in the tutorial below::"
msgstr ""

#: ../../intro/contributing.txt:137
# 90ed8ec1beee41b69f62ef05c93988f1
msgid "Running Django's test suite for the first time"
msgstr ""

#: ../../intro/contributing.txt:139
# 68b46e518fc4475e9c597e8421257f15
msgid "When contributing to Django it's very important that your code changes don't introduce bugs into other areas of Django.  One way to check that Django still works after you make your changes is by running Django's test suite. If all the tests still pass, then you can be reasonably sure that your changes haven't completely broken Django. If you've never run Django's test suite before, it's a good idea to run it once beforehand just to get familiar with what its output is supposed to look like."
msgstr ""

#: ../../intro/contributing.txt:147
# 64b23b33bdea4479a825dd782e6cffac
msgid "We can run the test suite by simply ``cd``-ing into the Django ``tests/`` directory and, if you're using GNU/Linux, Mac OS X or some other flavor of Unix, run::"
msgstr ""

#: ../../intro/contributing.txt:153
# e8c4cc05d5e74268b678bbdfaf9be0c1
msgid "If you're on Windows, the above should work provided that you are using \"Git Bash\" provided by the default Git install. GitHub has a `nice tutorial`__."
msgstr ""

#: ../../intro/contributing.txt:160
# 2b314be2591645bbb54ca66496a1b3e2
msgid "If you're using ``virtualenv``, you can omit ``PYTHONPATH=..`` when running the tests. This instructs Python to look for Django in the parent directory of ``tests``. ``virtualenv`` puts your copy of Django on the ``PYTHONPATH`` automatically."
msgstr ""

#: ../../intro/contributing.txt:165
# 8df6ceee095d4f88a0dc45d40cc808a8
msgid "Now sit back and relax. Django's entire test suite has over 4800 different tests, so it can take anywhere from 5 to 15 minutes to run, depending on the speed of your computer."
msgstr ""

#: ../../intro/contributing.txt:169
# f2c5532da6a841b9afc3db4dae295e2f
msgid "While Django's test suite is running, you'll see a stream of characters representing the status of each test as it's run. ``E`` indicates that an error was raised during a test, and ``F`` indicates that a test's assertions failed. Both of these are considered to be test failures. Meanwhile, ``x`` and ``s`` indicated expected failures and skipped tests, respectively. Dots indicate passing tests."
msgstr ""

#: ../../intro/contributing.txt:176
# 6826444d51eb4983985203dc76a867ac
msgid "Skipped tests are typically due to missing external libraries required to run the test; see :ref:`running-unit-tests-dependencies` for a list of dependencies and be sure to install any for tests related to the changes you are making (we won't need any for this tutorial)."
msgstr ""

#: ../../intro/contributing.txt:181
# c53d37007a184b5bb74dc1367336f360
msgid "Once the tests complete, you should be greeted with a message informing you whether the test suite passed or failed. Since you haven't yet made any changes to Django's code, the entire test suite **should** pass. If you get failures or errors make sure you've followed all of the previous steps properly. See :ref:`running-unit-tests` for more information."
msgstr ""

#: ../../intro/contributing.txt:187
# 8a25ab08bb8c42668a2a1fb77a533444
msgid "Note that the latest Django trunk may not always be stable. When developing against trunk, you can check `Django's continuous integration builds`__ to determine if the failures are specific to your machine or if they are also present in Django's official builds. If you click to view a particular build, you can view the \"Configuration Matrix\" which shows failures broken down by Python version and database backend."
msgstr ""

#: ../../intro/contributing.txt:198
# a1888bd02a374120a3fa71505c60958a
msgid "For this tutorial and the ticket we're working on, testing against SQLite is sufficient, however, it's possible (and sometimes necessary) to :ref:`run the tests using a different database <running-unit-tests-settings>`."
msgstr ""

#: ../../intro/contributing.txt:204
# 50bf9c151cd349288478e0da97a721ea
msgid "Writing some tests for your ticket"
msgstr ""

#: ../../intro/contributing.txt:206
# 0281f38e2fb344c7add5319cb09f1bcf
msgid "In most cases, for a patch to be accepted into Django it has to include tests. For bug fix patches, this means writing a regression test to ensure that the bug is never reintroduced into Django later on. A regression test should be written in such a way that it will fail while the bug still exists and pass once the bug has been fixed. For patches containing new features, you'll need to include tests which ensure that the new features are working correctly. They too should fail when the new feature is not present, and then pass once it has been implemented."
msgstr ""

#: ../../intro/contributing.txt:215
# 55396bac70bb4f9e9e5bbbc798e6d2aa
msgid "A good way to do this is to write your new tests first, before making any changes to the code. This style of development is called `test-driven development`__ and can be applied to both entire projects and single patches. After writing your tests, you then run them to make sure that they do indeed fail (since you haven't fixed that bug or added that feature yet). If your new tests don't fail, you'll need to fix them so that they do. After all, a regression test that passes regardless of whether a bug is present is not very helpful at preventing that bug from reoccurring down the road."
msgstr ""

#: ../../intro/contributing.txt:224
# 156a41e941ee4c00a04c8bc3a3e9e711
msgid "Now for our hands-on example."
msgstr ""

#: ../../intro/contributing.txt:229
# 9ac011b82cbb49cb9742b0a9ddd288e9
msgid "Writing some tests for ticket #17549"
msgstr ""

#: ../../intro/contributing.txt:231
# 5fcb3c5450fe44cfb762877addb891dc
msgid "`Ticket #17549`__ describes the following, small feature addition:"
msgstr ""

#: ../../intro/contributing.txt:233
# 940077a74c4242369bf297896c59da0d
msgid "It's useful for URLField to give you a way to open the URL; otherwise you might as well use a CharField."
msgstr ""

#: ../../intro/contributing.txt:236
# 717c8f24498d4c108d74ec97da2be33a
msgid "In order to resolve this ticket, we'll add a ``render`` method to the ``AdminURLFieldWidget`` in order to display a clickable link above the input widget. Before we make those changes though, we're going to write a couple tests to verify that our modification functions correctly and continues to function correctly in the future."
msgstr ""

#: ../../intro/contributing.txt:242
# 46012f5af3c84b99ac596d69eb0f894b
msgid "Navigate to Django's ``tests/admin_widgets/`` folder and open the ``tests.py`` file. Add the following code on line 269 right before the ``AdminFileWidgetTest`` class::"
msgstr ""

#: ../../intro/contributing.txt:276
# b41a791242f94449a2830a60579bfeb6
msgid "The new tests check to see that the ``render`` method we'll be adding works correctly in a couple different situations."
msgstr ""

#: ../../intro/contributing.txt:279
# 340cc5892e9f49ca9658bdc3888d7536
msgid "But this testing thing looks kinda hard..."
msgstr ""

#: ../../intro/contributing.txt:281
# 104d0312a0ab4084be334f677df5f3ca
msgid "If you've never had to deal with tests before, they can look a little hard to write at first glance. Fortunately, testing is a *very* big subject in computer programming, so there's lots of information out there:"
msgstr ""

#: ../../intro/contributing.txt:285
# 7aa4b37faaf54692a60de90935e082bb
msgid "A good first look at writing tests for Django can be found in the documentation on :doc:`Testing Django applications </topics/testing/overview>`."
msgstr ""

#: ../../intro/contributing.txt:287
# f50ac7326a484f84b78fe495c094443f
msgid "Dive Into Python (a free online book for beginning Python developers) includes a great `introduction to Unit Testing`__."
msgstr ""

#: ../../intro/contributing.txt:289
# 67641c03a01e4d4a859064ef1a37cfe3
msgid "After reading those, if you want something a little meatier to sink your teeth into, there's always the `Python unittest documentation`__."
msgstr ""

#: ../../intro/contributing.txt:297
# 7a1a44e84dc542f99bde52907d8fb1a6
msgid "Running your new test"
msgstr ""

#: ../../intro/contributing.txt:299
# f5d59742b8fc4e7ab12930cf43c8168c
msgid "Remember that we haven't actually made any modifications to ``AdminURLFieldWidget`` yet, so our tests are going to fail. Let's run all the tests in the ``model_forms_regress`` folder to make sure that's really what happens. From the command line, ``cd`` into the Django ``tests/`` directory and run::"
msgstr ""

#: ../../intro/contributing.txt:307
# 4c6d728463b04f139428ce47260b3e1c
msgid "If the tests ran correctly, you should see three failures corresponding to each of the test methods we added. If all of the tests passed, then you'll want to make sure that you added the new test shown above to the appropriate folder and class."
msgstr ""

#: ../../intro/contributing.txt:313
# 09e200c9b4ed4a98baa70d3dbf6badda
msgid "Writing the code for your ticket"
msgstr ""

#: ../../intro/contributing.txt:315
# 29cf71270e424e4088a9bc9bbec665b8
msgid "Next we'll be adding the functionality described in `ticket #17549`__ to Django."
msgstr ""

#: ../../intro/contributing.txt:318
# 6576cb0b5c2a4311b87885f1ad9a9bd4
msgid "Writing the code for ticket #17549"
msgstr ""

#: ../../intro/contributing.txt:320
# c10406a29c2441188f596f7f3d8477dd
msgid "Navigate to the ``django/django/contrib/admin/`` folder and open the ``widgets.py`` file. Find the ``AdminURLFieldWidget`` class on line 302 and add the following ``render`` method after the existing ``__init__`` method::"
msgstr ""

#: ../../intro/contributing.txt:337
# f4656683a9734d05ab7fec8a9336c4c7
msgid "Verifying your test now passes"
msgstr ""

#: ../../intro/contributing.txt:339
# 63d096a608374d4196989f6610f27f8f
msgid "Once you're done modifying Django, we need to make sure that the tests we wrote earlier pass, so we can see whether the code we wrote above is working correctly. To run the tests in the ``admin_widgets`` folder, ``cd`` into the Django ``tests/`` directory and run::"
msgstr ""

#: ../../intro/contributing.txt:346
# f68df0da7ce44726b566e327d753b9d5
msgid "Oops, good thing we wrote those tests! You should still see 3 failures with the following exception::"
msgstr ""

#: ../../intro/contributing.txt:351
# c01a69e5a9c24d64bbb6fa6f5e84dcd8
msgid "We forgot to add the import for that method.  Go ahead and add the ``smart_urlquote`` import at the end of line 13 of ``django/contrib/admin/widgets.py`` so it looks as follows::"
msgstr ""

#: ../../intro/contributing.txt:357
# 2a42476ce98143e38d1d2b33f69b5d86
msgid "Re-run the tests and everything should pass. If it doesn't, make sure you correctly modified the ``AdminURLFieldWidget`` class as shown above and copied the new tests correctly."
msgstr ""

#: ../../intro/contributing.txt:364
# 4de83e80f0064da9a3ae7352a677fa40
msgid "Running Django's test suite for the second time"
msgstr ""

#: ../../intro/contributing.txt:366
# 05cdd00cdf67497b8dce100247caa4d9
msgid "Once you've verified that your patch and your test are working correctly, it's a good idea to run the entire Django test suite just to verify that your change hasn't introduced any bugs into other areas of Django. While successfully passing the entire test suite doesn't guarantee your code is bug free, it does help identify many bugs and regressions that might otherwise go unnoticed."
msgstr ""

#: ../../intro/contributing.txt:372
# 0f04871d71684ca7afb0db98bdff7a3d
msgid "To run the entire Django test suite, ``cd`` into the Django ``tests/`` directory and run::"
msgstr ""

#: ../../intro/contributing.txt:377
# 040d078a41cc4a9fa74afcc52d17289d
msgid "As long as you don't see any failures, you're good to go. Note that this fix also made a `small CSS change`__ to format the new widget. You can make the change if you'd like, but we'll skip it for now in the interest of brevity."
msgstr ""

#: ../../intro/contributing.txt:384
# 109e4ba7f4854b448d714aac70699ad9
msgid "Writing Documentation"
msgstr ""

#: ../../intro/contributing.txt:386
# d0a8fbd3048a408cb8db0828d327a6a1
msgid "This is a new feature, so it should be documented.  Add the following on line 925 of ``django/docs/ref/models/fields.txt`` beneath the existing docs for ``URLField``::"
msgstr ""

#: ../../intro/contributing.txt:395
# 3f677cf081704031a8fb358512819f34
msgid "For more information on writing documentation, including an explanation of what the ``versionadded`` bit is all about, see :doc:`/internals/contributing/writing-documentation`. That page also includes an explanation of how to build a copy of the documentation locally, so you can preview the HTML that will be generated."
msgstr ""

#: ../../intro/contributing.txt:402
# 50a0109b5fc94d26ab8edd18eb309ce6
msgid "Generating a patch for your changes"
msgstr ""

#: ../../intro/contributing.txt:404
# 164aaa6756a84006aef3046534c4c4c9
msgid "Now it's time to generate a patch file that can be uploaded to Trac or applied to another copy of Django. To get a look at the content of your patch, run the following command::"
msgstr ""

#: ../../intro/contributing.txt:410
# 337a106923ab48af832e7f90eddb1438
msgid "This will display the differences between your current copy of Django (with your changes) and the revision that you initially checked out earlier in the tutorial."
msgstr ""

#: ../../intro/contributing.txt:414
# 96dc3a0f5a4d483eb2bb5394f21b86a9
msgid "Once you're done looking at the patch, hit the ``q`` key to exit back to the command line.  If the patch's content looked okay, you can run the following command to save the patch file to your current working directory::"
msgstr ""

#: ../../intro/contributing.txt:420
# 36f835a089eb45e8a8069bf962511a0f
msgid "You should now have a file in the root Django directory called ``17549.diff``. This patch file contains all your changes and should look this:"
msgstr ""

#: ../../intro/contributing.txt:514
# 4b2ec75316a04ce2a2e7a70f5efc997f
msgid "So what do I do next?"
msgstr ""

#: ../../intro/contributing.txt:516
# 3cfec236c30143dfad35fbba1e781c29
msgid "Congratulations, you've generated your very first Django patch! Now that you've got that under your belt, you can put those skills to good use by helping to improve Django's codebase. Generating patches and attaching them to Trac tickets is useful, however, since we are using git - adopting a more :doc:`git oriented workflow </internals/contributing/writing-code/working-with-git>` is recommended."
msgstr ""

#: ../../intro/contributing.txt:523
# 7b81535a9f3d4e749d1ff81424368242
msgid "Since we never committed our changes locally, perform the following to get your git branch back to a good starting point::"
msgstr ""

#: ../../intro/contributing.txt:530
# 0da8ece0ebce406d8bc3488f091b7c3c
msgid "More information for new contributors"
msgstr ""

#: ../../intro/contributing.txt:532
# 43aae0ceac8743458b2e6ced00fccb31
msgid "Before you get too into writing patches for Django, there's a little more information on contributing that you should probably take a look at:"
msgstr ""

#: ../../intro/contributing.txt:535
# f5be27af9c4d40528599237757793ddd
msgid "You should make sure to read Django's documentation on :doc:`claiming tickets and submitting patches </internals/contributing/writing-code/submitting-patches>`. It covers Trac etiquette, how to claim tickets for yourself, expected coding style for patches, and many other important details."
msgstr ""

#: ../../intro/contributing.txt:540
# 9299a76c0c4d4fe5aa632d977fa4d340
msgid "First time contributors should also read Django's :doc:`documentation for first time contributors</internals/contributing/new-contributors/>`. It has lots of good advice for those of us who are new to helping out with Django."
msgstr ""

#: ../../intro/contributing.txt:544
# 0c1504778d364206a3b2de0328f7eec9
msgid "After those, if you're still hungry for more information about contributing, you can always browse through the rest of :doc:`Django's documentation on contributing</internals/contributing/index>`. It contains a ton of useful information and should be your first source for answering any questions you might have."
msgstr ""

#: ../../intro/contributing.txt:551
# 8fe852415c4a443d9399ef4fc99fc3e7
msgid "Finding your first real ticket"
msgstr ""

#: ../../intro/contributing.txt:553
# 209ee1219e37413f83790a37f889c061
msgid "Once you've looked through some of that information, you'll be ready to go out and find a ticket of your own to write a patch for. Pay special attention to tickets with the \"easy pickings\" criterion. These tickets are often much simpler in nature and are great for first time contributors.  Once you're familiar with contributing to Django, you can move on to writing patches for more difficult and complicated tickets."
msgstr ""

#: ../../intro/contributing.txt:560
# b74a4a34c1c34bc8b6d84fd01f8bc85f
msgid "If you just want to get started already (and nobody would blame you!), try taking a look at the list of `easy tickets that need patches`__ and the `easy tickets that have patches which need improvement`__. If you're familiar with writing tests, you can also look at the list of `easy tickets that need tests`__. Just remember to follow the guidelines about claiming tickets that were mentioned in the link to Django's documentation on :doc:`claiming tickets and submitting patches </internals/contributing/writing-code/submitting-patches>`."
msgstr ""

#: ../../intro/contributing.txt:574
#: ../../intro/tutorial05.txt:642
#: ../../intro/tutorial06.txt:117
# 980d7a20a3184e4eb26d75d4b7799382
# a167d70547774e89ba9eec1a9917e833
# 1aa714cc3da042019542b2656f434d13
msgid "What's next?"
msgstr ""

#: ../../intro/contributing.txt:576
# cbc2799ba9964b369dae3e923bf268dd
msgid "After a ticket has a patch, it needs to be reviewed by a second set of eyes. After uploading a patch or submitting a pull request, be sure to update the ticket metadata by setting the flags on the ticket to say \"has patch\", \"doesn't need tests\", etc, so others can find it for review. Contributing doesn't necessarily always mean writing a patch from scratch. Reviewing existing patches is also a very helpful contribution. See :doc:`/internals/contributing/triaging-tickets` for details."
msgstr ""

#: ../../intro/index.txt:2
# 350048f7c8004ae092bf5fd7c998922c
msgid "Getting started"
msgstr ""

#: ../../intro/index.txt:4
# 54989039dfaa41caa4e4807af0fb8bfc
msgid "New to Django? Or to Web development in general? Well, you came to the right place: read this material to quickly get up and running."
msgstr ""

#: ../../intro/index.txt:24
# 90558cc3f39249cfbfa15ea65b7190d6
msgid "If you're new to Python_, you might want to start by getting an idea of what the language is like. Django is 100% Python, so if you've got minimal comfort with Python you'll probably get a lot more out of Django."
msgstr ""

#: ../../intro/index.txt:28
# 43de66e407364e799d099b644d50514e
msgid "If you're new to programming entirely, you might want to start with this `list of Python resources for non-programmers`_"
msgstr ""

#: ../../intro/index.txt:31
# 1e1face40d5d4566a4ba3588d1c1ee2c
msgid "If you already know a few other languages and want to get up to speed with Python quickly, we recommend \"Dive Into Python\" (for `Python 2`_, for `Python 3`_, also available in a `dead-tree version`_). If that's not quite your style, there are quite a few other `books about Python`_."
msgstr ""

#: ../../intro/install.txt:2
# 6a9e5bdd19f74583ba217a27cf07435c
msgid "Quick install guide"
msgstr ""

#: ../../intro/install.txt:4
# 53dedb619a3d4f45a98b432e3b56b819
msgid "Before you can use Django, you'll need to get it installed. We have a :doc:`complete installation guide </topics/install>` that covers all the possibilities; this guide will guide you to a simple, minimal installation that'll work while you walk through the introduction."
msgstr ""

#: ../../intro/install.txt:10
# 9636fa7e770645c1af8a20306baf1329
msgid "Install Python"
msgstr ""

#: ../../intro/install.txt:12
# be81ab6cd4344200926415b20eccdd94
msgid "Being a Python Web framework, Django requires Python. It works with Python 2.6, 2.7, 3.2 or 3.3. All these versions of Python include a lightweight database called SQLite_ so you won't need to set up a database just yet."
msgstr ""

#: ../../intro/install.txt:18
# 1a680e2750dd45b6a7b637fcb32111e2
msgid "Get Python at http://www.python.org. If you're running Linux or Mac OS X, you probably already have it installed."
msgstr ""

#: ../../intro/install.txt:21
# 12bbf8c72ac843f786de1dea4828b231
msgid "Django on Jython"
msgstr ""

#: ../../intro/install.txt:23
# f817a2c00a274587aecb0fa15e19dc7a
msgid "If you use Jython_ (a Python implementation for the Java platform), you'll need to follow a few additional steps. See :doc:`/howto/jython` for details."
msgstr ""

#: ../../intro/install.txt:28
# f86c3d4726e84df9bd4e113751029448
msgid "You can verify that Python is installed by typing ``python`` from your shell; you should see something like::"
msgstr ""

#: ../../intro/install.txt:37
# aea2c8ce99c34be7a3b570bf3c16a48d
msgid "Set up a database"
msgstr ""

#: ../../intro/install.txt:39
# ca0508d8eaca44be88defd75a9b0fa81
msgid "This step is only necessary if you'd like to work with a \"large\" database engine like PostgreSQL, MySQL, or Oracle. To install such a database, consult the :ref:`database installation information <database-installation>`."
msgstr ""

#: ../../intro/install.txt:44
# e3cc3a05142a4a29a6f825d59f7e5245
msgid "Remove any old versions of Django"
msgstr ""

#: ../../intro/install.txt:46
# d497dc99bf20407695f8dcd98cb7e327
msgid "If you are upgrading your installation of Django from a previous version, you will need to :ref:`uninstall the old Django version before installing the new version <removing-old-versions-of-django>`."
msgstr ""

#: ../../intro/install.txt:51
# 6e41e7237bf94959877e0f9c292acf90
msgid "Install Django"
msgstr ""

#: ../../intro/install.txt:53
# e9840d578be4472f942f25587f8127fc
msgid "You've got three easy options to install Django:"
msgstr ""

#: ../../intro/install.txt:55
# a823edf1ab4d4397bc8357ff0dff3e62
msgid "Install a version of Django :doc:`provided by your operating system distribution </misc/distributions>`. This is the quickest option for those who have operating systems that distribute Django."
msgstr ""

#: ../../intro/install.txt:59
# 908af0925fc24a57abc6334401c8ece4
msgid ":ref:`Install an official release <installing-official-release>`. This is the best approach for users who want a stable version number and aren't concerned about running a slightly older version of Django."
msgstr ""

#: ../../intro/install.txt:63
# 542de8f7a79e4cc7a7a6288ff87818d7
msgid ":ref:`Install the latest development version <installing-development-version>`. This is best for users who want the latest-and-greatest features and aren't afraid of running brand-new code."
msgstr ""

#: ../../intro/install.txt:67
# fe4b8cbbbcc847df9205922f1ef5f338
msgid "Always refer to the documentation that corresponds to the version of Django you're using!"
msgstr ""

#: ../../intro/install.txt:70
# 98a75e1bb33f4c95ac2be3bc8d91ef70
msgid "If you do either of the first two steps, keep an eye out for parts of the documentation marked **new in development version**. That phrase flags features that are only available in development versions of Django, and they likely won't work with an official release."
msgstr ""

#: ../../intro/install.txt:77
# 1048928612414517bb3a8938aa17c93c
msgid "Verifying"
msgstr ""

#: ../../intro/install.txt:79
# 001a991c1e964941a16e86e4bfcd68a2
msgid "To verify that Django can be seen by Python, type ``python`` from your shell. Then at the Python prompt, try to import Django:"
msgstr ""

#: ../../intro/install.txt:88
# 5df9b07b466a4261a5e388cf8e290a9a
msgid "You may have another version of Django installed."
msgstr ""

#: ../../intro/install.txt:91
# 9f364583caf04adab566eb4a827632da
msgid "That's it!"
msgstr ""

#: ../../intro/install.txt:93
# 0eed3b0f0feb424488ea940f5ad0cb42
msgid "That's it -- you can now :doc:`move onto the tutorial </intro/tutorial01>`."
msgstr ""

#: ../../intro/overview.txt:3
# 64e96d6bc5e04920889b46206248b239
msgid "Django at a glance"
msgstr ""

#: ../../intro/overview.txt:5
# d5f85efe4eab4f6599a5f075fedbf69e
msgid "Because Django was developed in a fast-paced newsroom environment, it was designed to make common Web-development tasks fast and easy. Here's an informal overview of how to write a database-driven Web app with Django."
msgstr ""

#: ../../intro/overview.txt:9
# 4c308f860b3740ffa1b603e1c20fe74a
msgid "The goal of this document is to give you enough technical specifics to understand how Django works, but this isn't intended to be a tutorial or reference -- but we've got both! When you're ready to start a project, you can :doc:`start with the tutorial </intro/tutorial01>` or :doc:`dive right into more detailed documentation </topics/index>`."
msgstr ""

#: ../../intro/overview.txt:16
# 6fe9b661fb454cf3834f399706fc648f
msgid "Design your model"
msgstr ""

#: ../../intro/overview.txt:18
# 5f20430d20e94ccdb60591d2742b412a
msgid "Although you can use Django without a database, it comes with an `object-relational mapper`_ in which you describe your database layout in Python code."
msgstr ""

#: ../../intro/overview.txt:24
# 5820b5cfe9a14c50a22d316be1105d6d
msgid "The :doc:`data-model syntax </topics/db/models>` offers many rich ways of representing your models -- so far, it's been solving two years' worth of database-schema problems. Here's a quick example, which might be saved in the file ``mysite/news/models.py``::"
msgstr ""

#: ../../intro/overview.txt:49
# 13d4153e154146fb9f16cc9475b6efd2
msgid "Install it"
msgstr ""

#: ../../intro/overview.txt:51
# 8d0d878b0a534053bf7407b6771bda9b
msgid "Next, run the Django command-line utility to create the database tables automatically:"
msgstr ""

#: ../../intro/overview.txt:58
# 9bc590d133c4429db13281dcc8c1d33a
msgid "The :djadmin:`syncdb` command looks at all your available models and creates tables in your database for whichever tables don't already exist."
msgstr ""

#: ../../intro/overview.txt:62
# e732f34ce725453497d53a70b95cab56
msgid "Enjoy the free API"
msgstr ""

#: ../../intro/overview.txt:64
# 2d8170f8568c40eaa8133ae2b6f25d2b
msgid "With that, you've got a free, and rich, :doc:`Python API </topics/db/queries>` to access your data. The API is created on the fly, no code generation necessary:"
msgstr ""

#: ../../intro/overview.txt:140
# dc53662b6bc44c9abd1fb298cf88a61b
msgid "A dynamic admin interface: it's not just scaffolding -- it's the whole house"
msgstr ""

#: ../../intro/overview.txt:142
# e55320559b0e4e85b9ad2ddccc6f8ef0
msgid "Once your models are defined, Django can automatically create a professional, production ready :doc:`administrative interface </ref/contrib/admin/index>` -- a Web site that lets authenticated users add, change and delete objects. It's as easy as registering your model in the admin site::"
msgstr ""

#: ../../intro/overview.txt:165
# c66dda8f4716401abeba6660e16d7d6e
msgid "The philosophy here is that your site is edited by a staff, or a client, or maybe just you -- and you don't want to have to deal with creating backend interfaces just to manage content."
msgstr ""

#: ../../intro/overview.txt:169
# d2bce5425abb4cfd94ea40fec30e7b2e
msgid "One typical workflow in creating Django apps is to create models and get the admin sites up and running as fast as possible, so your staff (or clients) can start populating data. Then, develop the way data is presented to the public."
msgstr ""

#: ../../intro/overview.txt:174
# d0aea1efa145486ba4f285dfda58c362
msgid "Design your URLs"
msgstr ""

#: ../../intro/overview.txt:176
# 0bb4e2e7af7444db8b2a55ec7110b984
msgid "A clean, elegant URL scheme is an important detail in a high-quality Web application. Django encourages beautiful URL design and doesn't put any cruft in URLs, like ``.php`` or ``.asp``."
msgstr ""

#: ../../intro/overview.txt:180
# 466991b6b2244e5f93436e065928cde3
msgid "To design URLs for an app, you create a Python module called a :doc:`URLconf </topics/http/urls>`. A table of contents for your app, it contains a simple mapping between URL patterns and Python callback functions. URLconfs also serve to decouple URLs from Python code."
msgstr ""

#: ../../intro/overview.txt:185
# de7eebb4a2474015a2bc62b9de48d07f
msgid "Here's what a URLconf might look like for the ``Reporter``/``Article`` example above::"
msgstr ""

#: ../../intro/overview.txt:196
# 8cd4b98a0fe2408687dd0ad09737a078
msgid "The code above maps URLs, as simple `regular expressions`_, to the location of Python callback functions (\"views\"). The regular expressions use parenthesis to \"capture\" values from the URLs. When a user requests a page, Django runs through each pattern, in order, and stops at the first one that matches the requested URL. (If none of them matches, Django calls a special-case 404 view.) This is blazingly fast, because the regular expressions are compiled at load time."
msgstr ""

#: ../../intro/overview.txt:206
# 4a424bfdebc0481eb6a675d5cb3f8d48
msgid "Once one of the regexes matches, Django imports and calls the given view, which is a simple Python function. Each view gets passed a request object -- which contains request metadata -- and the values captured in the regex."
msgstr ""

#: ../../intro/overview.txt:210
# cba62a93d89e47119ca1b233e3d59077
msgid "For example, if a user requested the URL \"/articles/2005/05/39323/\", Django would call the function ``news.views.article_detail(request, '2005', '05', '39323')``."
msgstr ""

#: ../../intro/overview.txt:215
# 00396c301f724ae0a260f5d4ad364648
msgid "Write your views"
msgstr ""

#: ../../intro/overview.txt:217
# a0acb08974d44b84bfde84b1c648ceb6
msgid "Each view is responsible for doing one of two things: Returning an :class:`~django.http.HttpResponse` object containing the content for the requested page, or raising an exception such as :class:`~django.http.Http404`. The rest is up to you."
msgstr ""

#: ../../intro/overview.txt:222
# 8c53d99a15bb42af88f121ab310dbf99
msgid "Generally, a view retrieves data according to the parameters, loads a template and renders the template with the retrieved data. Here's an example view for ``year_archive`` from above::"
msgstr ""

#: ../../intro/overview.txt:232
# e06d27796f8c40fdb0420fbcc5d97e6f
msgid "This example uses Django's :doc:`template system </topics/templates>`, which has several powerful features but strives to stay simple enough for non-programmers to use."
msgstr ""

#: ../../intro/overview.txt:237
# 0dac84a2b7284b0e950396cb3bec9e4a
msgid "Design your templates"
msgstr ""

#: ../../intro/overview.txt:239
# 39e2f25aeefa415f9dc42a7a00fd5224
msgid "The code above loads the ``news/year_archive.html`` template."
msgstr ""

#: ../../intro/overview.txt:241
# cea78758d04b4ae69bc4e8da08837e49
msgid "Django has a template search path, which allows you to minimize redundancy among templates. In your Django settings, you specify a list of directories to check for templates with :setting:`TEMPLATE_DIRS`. If a template doesn't exist in the first directory, it checks the second, and so on."
msgstr ""

#: ../../intro/overview.txt:246
# 9bb4590a4ae649029814f517573406c7
msgid "Let's say the ``news/year_archive.html`` template was found. Here's what that might look like:"
msgstr ""

#: ../../intro/overview.txt:265
# 9e77c19313dc4d50bcc11c8e39811e5c
msgid "Variables are surrounded by double-curly braces. ``{{ article.headline }}`` means \"Output the value of the article's headline attribute.\" But dots aren't used only for attribute lookup: They also can do dictionary-key lookup, index lookup and function calls."
msgstr ""

#: ../../intro/overview.txt:270
# 883eed42de0248458c34f77b9b781b19
msgid "Note ``{{ article.pub_date|date:\"F j, Y\" }}`` uses a Unix-style \"pipe\" (the \"|\" character). This is called a template filter, and it's a way to filter the value of a variable. In this case, the date filter formats a Python datetime object in the given format (as found in PHP's date function)."
msgstr ""

#: ../../intro/overview.txt:275
# 90473c613ce14d22adf4b708f7c647a5
msgid "You can chain together as many filters as you'd like. You can write :ref:`custom template filters <howto-writing-custom-template-filters>`. You can write :doc:`custom template tags </howto/custom-template-tags>`, which run custom Python code behind the scenes."
msgstr ""

#: ../../intro/overview.txt:280
# dc17a2f8699f44f89ba63d750684df58
msgid "Finally, Django uses the concept of \"template inheritance\": That's what the ``{% extends \"base.html\" %}`` does. It means \"First load the template called 'base', which has defined a bunch of blocks, and fill the blocks with the following blocks.\" In short, that lets you dramatically cut down on redundancy in templates: each template has to define only what's unique to that template."
msgstr ""

#: ../../intro/overview.txt:286
# 74d5d60cbddc4d8bb31755e5bf1efc6c
msgid "Here's what the \"base.html\" template, including the use of :doc:`static files </howto/static-files/index>`, might look like:"
msgstr ""

#: ../../intro/overview.txt:302
# 47363f83c2f847b3b4842c4f784a9a32
msgid "Simplistically, it defines the look-and-feel of the site (with the site's logo), and provides \"holes\" for child templates to fill. This makes a site redesign as easy as changing a single file -- the base template."
msgstr ""

#: ../../intro/overview.txt:306
# 71691f7855c24bdcb0eb0c793b28ce06
msgid "It also lets you create multiple versions of a site, with different base templates, while reusing child templates. Django's creators have used this technique to create strikingly different cell-phone editions of sites -- simply by creating a new base template."
msgstr ""

#: ../../intro/overview.txt:311
# 8dcc0e1300964b27bc44233ff2e0b204
msgid "Note that you don't have to use Django's template system if you prefer another system. While Django's template system is particularly well-integrated with Django's model layer, nothing forces you to use it. For that matter, you don't have to use Django's database API, either. You can use another database abstraction layer, you can read XML files, you can read files off disk, or anything you want. Each piece of Django -- models, views, templates -- is decoupled from the next."
msgstr ""

#: ../../intro/overview.txt:320
# e2d48fdfb2bf4f9393a11b5e46f1e4a5
msgid "This is just the surface"
msgstr ""

#: ../../intro/overview.txt:322
# f2a218e9f207495daca770a3c5079857
msgid "This has been only a quick overview of Django's functionality. Some more useful features:"
msgstr ""

#: ../../intro/overview.txt:325
# 07e582f2f0b44e86998e41e75174062c
msgid "A :doc:`caching framework </topics/cache>` that integrates with memcached or other backends."
msgstr ""

#: ../../intro/overview.txt:328
# 86ddce6f10854fda8a3b4eb8fc946095
msgid "A :doc:`syndication framework </ref/contrib/syndication>` that makes creating RSS and Atom feeds as easy as writing a small Python class."
msgstr ""

#: ../../intro/overview.txt:331
# ff5d92dde9f343cb893e026accc005cb
msgid "More sexy automatically-generated admin features -- this overview barely scratched the surface."
msgstr ""

#: ../../intro/overview.txt:334
# 91a99d8d78bb4c5481f6d91d1d5c3d26
msgid "The next obvious steps are for you to `download Django`_, read :doc:`the tutorial </intro/tutorial01>` and join `the community`_. Thanks for your interest!"
msgstr ""

#: ../../intro/reusable-apps.txt:3
# 58c09dcc13a34f04959a5de2c5138681
msgid "Advanced tutorial: How to write reusable apps"
msgstr ""

#: ../../intro/reusable-apps.txt:5
# 6b23962fac4444bf9995aa9cb1f9c252
msgid "This advanced tutorial begins where :doc:`Tutorial 6 </intro/tutorial06>` left off. We'll be turning our Web-poll into a standalone Python package you can reuse in new projects and share with other people."
msgstr ""

#: ../../intro/reusable-apps.txt:9
# f2309e09b35241de92a5059a22d9a015
msgid "If you haven't recently completed Tutorials 1–6, we encourage you to review these so that your example project matches the one described below."
msgstr ""

#: ../../intro/reusable-apps.txt:13
# 9d55ee95423644af9607b23f7d0338fc
msgid "Reusability matters"
msgstr ""

#: ../../intro/reusable-apps.txt:15
# f48573faddf04d98aabffc56b9833d2b
msgid "It's a lot of work to design, build, test and maintain a web application. Many Python and Django projects share common problems. Wouldn't it be great if we could save some of this repeated work?"
msgstr ""

#: ../../intro/reusable-apps.txt:19
# b1cddd62c5964dc78e1cbdcbf5871d0f
msgid "Reusability is the way of life in Python. `The Python Package Index (PyPI) <http://guide.python-distribute.org/contributing.html#pypi-info>`_ has a vast range of packages you can use in your own Python programs. Check out `Django Packages <http://www.djangopackages.com>`_ for existing reusable apps you could incorporate in your project. Django itself is also just a Python package. This means that you can take existing Python packages or Django apps and compose them into your own web project. You only need to write the parts that make your project unique."
msgstr ""

#: ../../intro/reusable-apps.txt:28
# e9b66b96c0dd415f9ec42ab00d1b8017
msgid "Let's say you were starting a new project that needed a polls app like the one we've been working on. How do you make this app reusable? Luckily, you're well on the way already. In :doc:`Tutorial 3 </intro/tutorial03>`, we saw how we could decouple polls from the project-level URLconf using an ``include``. In this tutorial, we'll take further steps to make the app easy to use in new projects and ready to publish for others to install and use."
msgstr ""

#: ../../intro/reusable-apps.txt:35
# d609b5e7fe2347188bf63fce7360b40d
msgid "Package? App?"
msgstr ""

#: ../../intro/reusable-apps.txt:37
# 2cbb5bb73e2341de9e1b20144d500a58
msgid "A Python `package <http://docs.python.org/tutorial/modules.html#packages>`_ provides a way of grouping related Python code for easy reuse. A package contains one or more files of Python code (also known as \"modules\")."
msgstr ""

#: ../../intro/reusable-apps.txt:41
# 8083919c696c4e82b6fcd71b37494178
msgid "A package can be imported with ``import foo.bar`` or ``from foo import bar``. For a directory (like ``polls``) to form a package, it must contain a special file ``__init__.py``, even if this file is empty."
msgstr ""

#: ../../intro/reusable-apps.txt:45
# cb398a9c844e4f81b22400e1309470d1
msgid "A Django *app* is just a Python package that is specifically intended for use in a Django project. An app may also use common Django conventions, such as having a ``models.py`` file."
msgstr ""

#: ../../intro/reusable-apps.txt:49
# e5dfe02ab8e841c1b8774a65f89e14eb
msgid "Later on we use the term *packaging* to describe the process of making a Python package easy for others to install. It can be a little confusing, we know."
msgstr ""

#: ../../intro/reusable-apps.txt:54
# f5d283dad742438d878bc859426bbaec
msgid "Your project and your reusable app"
msgstr ""

#: ../../intro/reusable-apps.txt:56
# 1b0c293a303b494ba77b50dd788b9571
msgid "After the previous tutorials, our project should look like this::"
msgstr ""

#: ../../intro/reusable-apps.txt:86
# e1c6275c6fa44f92a260b8cc5e2f04ca
msgid "You created ``mysite/templates`` in :doc:`Tutorial 2 </intro/tutorial02>`, and ``polls/templates`` in :doc:`Tutorial 3 </intro/tutorial03>`. Now perhaps it is clearer why we chose to have separate template directories for the project and application: everything that is part of the polls application is in ``polls``. It makes the application self-contained and easier to drop into a new project."
msgstr ""

#: ../../intro/reusable-apps.txt:93
# 03ed0a86ff3348459ccac803f18d1071
msgid "The ``polls`` directory could now be copied into a new Django project and immediately reused. It's not quite ready to be published though. For that, we need to package the app to make it easy for others to install."
msgstr ""

#: ../../intro/reusable-apps.txt:100
# ac291ec782f2447b88e8f22814e55f19
msgid "Installing some prerequisites"
msgstr ""

#: ../../intro/reusable-apps.txt:102
# 5cf3538263624b04ac6d0fd768904a91
msgid "The current state of Python packaging is a bit muddled with various tools. For this tutorial, we're going to use setuptools_ to build our package. It's the recommended packaging tool (merged with the ``distribute`` fork). We'll also be using `pip`_ to install and uninstall it. You should install these two packages now. If you need help, you can refer to :ref:`how to install Django with pip<installing-official-release>`. You can install ``setuptools`` the same way."
msgstr ""

#: ../../intro/reusable-apps.txt:114
# f62c3ef2caad487f9fe41a759683738b
msgid "Packaging your app"
msgstr ""

#: ../../intro/reusable-apps.txt:116
# 4efa4eb01781402ab50e6848f3e762a0
msgid "Python *packaging* refers to preparing your app in a specific format that can be easily installed and used. Django itself is packaged very much like this. For a small app like polls, this process isn't too difficult."
msgstr ""

#: ../../intro/reusable-apps.txt:120
# f2abc9c2375541b2a4664e7ab23b2c5f
msgid "First, create a parent directory for ``polls``, outside of your Django project. Call this directory ``django-polls``."
msgstr ""

#: ../../intro/reusable-apps.txt:123
# 3d3cfb3888504b6cb4cc9ddd30fcee0b
msgid "Choosing a name for your app"
msgstr ""

#: ../../intro/reusable-apps.txt:125
# d19e3540cdb441d49bf4597f053de129
msgid "When choosing a name for your package, check resources like PyPI to avoid naming conflicts with existing packages. It's often useful to prepend ``django-`` to your module name when creating a package to distribute. This helps others looking for Django apps identify your app as Django specific."
msgstr ""

#: ../../intro/reusable-apps.txt:131
# 613e52b2a0bf401e9d27715bce46397f
msgid "Move the ``polls`` directory into the ``django-polls`` directory."
msgstr ""

#: ../../intro/reusable-apps.txt:133
# 37f0d92ec1b64223bbc5fb5f2d0d0846
msgid "Create a file ``django-polls/README.rst`` with the following contents::"
msgstr ""

#: ../../intro/reusable-apps.txt:165
# 2aa2fc955efc4626a7dd4c35bad72cf7
msgid "Create a ``django-polls/LICENSE`` file. Choosing a license is beyond the scope of this tutorial, but suffice it to say that code released publicly without a license is *useless*. Django and many Django-compatible apps are distributed under the BSD license; however, you're free to pick your own license. Just be aware that your licensing choice will affect who is able to use your code."
msgstr ""

#: ../../intro/reusable-apps.txt:172
# 83b16608bca94e7db54ed59696cd0406
msgid "Next we'll create a ``setup.py`` file which provides details about how to build and install the app. A full explanation of this file is beyond the scope of this tutorial, but the `setuptools docs <http://packages.python.org/setuptools/setuptools.html>`_ have a good explanation. Create a file ``django-polls/setup.py`` with the following contents::"
msgstr ""

#: ../../intro/reusable-apps.txt:212
# b4957d929029461b9703ad13293b5b33
msgid "Only Python modules and packages are included in the package by default. To include additional files, we'll need to create a ``MANIFEST.in`` file. The setuptools docs referred to in the previous step discuss this file in more details. To include the templates, the ``README.rst`` and our ``LICENSE`` file, create a file ``django-polls/MANIFEST.in`` with the following contents::"
msgstr ""

#: ../../intro/reusable-apps.txt:224
# 54c6a0be76e24d6595a9284030d5473f
msgid "It's optional, but recommended, to include detailed documentation with your app. Create an empty directory ``django-polls/docs`` for future documentation. Add an additional line to ``django-polls/MANIFEST.in``::"
msgstr ""

#: ../../intro/reusable-apps.txt:235
# 0fd5d6a26db44553a62f95852499faea
msgid "Note that the ``docs`` directory won't be included in your package unless you add some files to it. Many Django apps also provide their documentation online through sites like `readthedocs.org <http://readthedocs.org>`_."
msgstr ""

#: ../../intro/reusable-apps.txt:239
# e7c4b4528c72497782ff3d01651359df
msgid "Try building your package with ``python setup.py sdist`` (run from inside ``django-polls``). This creates a directory called ``dist`` and builds your new package, ``django-polls-0.1.tar.gz``."
msgstr ""

#: ../../intro/reusable-apps.txt:243
# fc38033a331d4379bd9dcbf7041c76c7
msgid "For more information on packaging, see `The Hitchhiker's Guide to Packaging <http://guide.python-distribute.org/quickstart.html>`_."
msgstr ""

#: ../../intro/reusable-apps.txt:247
# fcc6437c90144a2097e111f41b86d8c7
msgid "Using your own package"
msgstr ""

#: ../../intro/reusable-apps.txt:249
# 7c3ead2899214dc5984a032861fd4171
msgid "Since we moved the ``polls`` directory out of the project, it's no longer working. We'll now fix this by installing our new ``django-polls`` package."
msgstr ""

#: ../../intro/reusable-apps.txt:252
# aae72d4817cd4af2be3d51a8a0e1d0c3
msgid "Installing as a user library"
msgstr ""

#: ../../intro/reusable-apps.txt:254
# bd7b710e5e8a4692aafc1de6f085b339
msgid "The following steps install ``django-polls`` as a user library. Per-user installs have a lot of advantages over installing the package system-wide, such as being usable on systems where you don't have administrator access as well as preventing the package from affecting system services and other users of the machine. Python 2.6 added support for user libraries, so if you are using an older version this won't work, but Django 1.5 requires Python 2.6 or newer anyway."
msgstr ""

#: ../../intro/reusable-apps.txt:262
# bddfbb32cabc422fbab041344fa865cc
msgid "Note that per-user installations can still affect the behavior of system tools that run as that user, so ``virtualenv`` is a more robust solution (see below)."
msgstr ""

#: ../../intro/reusable-apps.txt:266
# 6570b407bb4a41fb827b2eb2016468d4
msgid "To install the package, use pip (you already :ref:`installed it <installing-reusable-apps-prerequisites>`, right?)::"
msgstr ""

#: ../../intro/reusable-apps.txt:271
# f49716e1e5374426af37b6bed6f55ba9
msgid "With luck, your Django project should now work correctly again. Run the server again to confirm this."
msgstr ""

#: ../../intro/reusable-apps.txt:274
# b54da67dc3de4ae2bbc828dfe77b5c91
msgid "To uninstall the package, use pip::"
msgstr ""

#: ../../intro/reusable-apps.txt:281
# de6c9344b49344039ce40b487538fd75
msgid "Publishing your app"
msgstr ""

#: ../../intro/reusable-apps.txt:283
# 97ee10478d604e26913f208f4e81a754
msgid "Now that we've packaged and tested ``django-polls``, it's ready to share with the world! If this wasn't just an example, you could now:"
msgstr ""

#: ../../intro/reusable-apps.txt:286
# 98408b5f422749fd8306b26deb7ad8d7
msgid "Email the package to a friend."
msgstr ""

#: ../../intro/reusable-apps.txt:288
# a774350c86af49789a5186b11f637dc6
msgid "Upload the package on your Web site."
msgstr ""

#: ../../intro/reusable-apps.txt:290
# 82e3d695c3924385ab2a745a98979be8
msgid "Post the package on a public repository, such as `The Python Package Index (PyPI) <http://guide.python-distribute.org/contributing.html#pypi-info>`_."
msgstr ""

#: ../../intro/reusable-apps.txt:293
# 26ab0de7a96d4d9fbf4cb47a575916f7
msgid "For more information on PyPI, see the `Quickstart <http://guide.python-distribute.org/quickstart.html#register-your-package-with-the-python-package-index-pypi>`_ section of The Hitchhiker's Guide to Packaging. One detail this guide mentions is choosing the license under which your code is distributed."
msgstr ""

#: ../../intro/reusable-apps.txt:299
# 2b5692ce09f04e5da35ae29555f28e1f
msgid "Installing Python packages with virtualenv"
msgstr ""

#: ../../intro/reusable-apps.txt:301
# 900f1b3edfdf4595ae560216d7534b7c
msgid "Earlier, we installed the polls app as a user library. This has some disadvantages:"
msgstr ""

#: ../../intro/reusable-apps.txt:304
# 268b08bbeb1a4cc3b19c9fc50f778ecd
msgid "Modifying the user libraries can affect other Python software on your system."
msgstr ""

#: ../../intro/reusable-apps.txt:306
# 27a7f9ac1d19456abb67a7d98590937b
msgid "You won't be able to run multiple versions of this package (or others with the same name)."
msgstr ""

#: ../../intro/reusable-apps.txt:309
# ffccb7ccb72946a0a559bdec3ea8dfbe
msgid "Typically, these situations only arise once you're maintaining several Django projects. When they do, the best solution is to use `virtualenv <http://www.virtualenv.org/>`_. This tool allows you to maintain multiple isolated Python environments, each with its own copy of the libraries and package namespace."
msgstr ""

#: ../../intro/tutorial01.txt:3
# 352888f1b919407ab9cee74bd9896130
msgid "Writing your first Django app, part 1"
msgstr ""

#: ../../intro/tutorial01.txt:5
# 4b85a206bea94d51930336d18907c12c
msgid "Let's learn by example."
msgstr ""

#: ../../intro/tutorial01.txt:7
# f1d645027022448a830a4aa4513529a3
msgid "Throughout this tutorial, we'll walk you through the creation of a basic poll application."
msgstr ""

#: ../../intro/tutorial01.txt:10
# f704f6ec77e741ab9a900a0afa053437
msgid "It'll consist of two parts:"
msgstr ""

#: ../../intro/tutorial01.txt:12
# f1924f389c5545098ffc6095803bb20d
msgid "A public site that lets people view polls and vote in them."
msgstr ""

#: ../../intro/tutorial01.txt:13
# 296e594af95448679fe95fe6f3784ed4
msgid "An admin site that lets you add, change and delete polls."
msgstr ""

#: ../../intro/tutorial01.txt:15
# 9335142a8cdc4d20b76b75850410dc34
msgid "We'll assume you have :doc:`Django installed </intro/install>` already. You can tell Django is installed and which version by running the following command:"
msgstr ""

#: ../../intro/tutorial01.txt:22
# ed92ebe65c1f42199bd4b14182c18c1a
msgid "If Django is installed, you should see the version of your installation. If it isn't, you'll get an error telling \"No module named django\"."
msgstr ""

#: ../../intro/tutorial01.txt:25
# 8a53008827c043868a4c27d119161890
msgid "This tutorial is written for Django |version| and Python 2.x. If the Django version doesn't match, you can refer to the tutorial for your version of Django by using the version switcher at the bottom right corner of this page, or update Django to the newest version. If you are using Python 3.x, be aware that your code may need to differ from what is in the tutorial and you should continue using the tutorial only if you know what you are doing with Python 3.x."
msgstr ""

#: ../../intro/tutorial01.txt:33
# 5bf427e3ecf24a60b0c655ff6cfd3341
msgid "See :doc:`How to install Django </topics/install>` for advice on how to remove older versions of Django and install a newer one."
msgstr ""

#: ../../intro/tutorial01.txt:38
# 1f15bd1cd0ef4dce9e6d24f089e180b7
msgid "If you're having trouble going through this tutorial, please post a message to `django-users`__ or drop by `#django on irc.freenode.net`__ to chat with other Django users who might be able to help."
msgstr ""

#: ../../intro/tutorial01.txt:46
# 51fdbcbfba7d4c319bb92cb97d37d454
msgid "Creating a project"
msgstr ""

#: ../../intro/tutorial01.txt:48
# 04ac6c3035984e12886b832339ee30f3
msgid "If this is your first time using Django, you'll have to take care of some initial setup. Namely, you'll need to auto-generate some code that establishes a Django :term:`project` -- a collection of settings for an instance of Django, including database configuration, Django-specific options and application-specific settings."
msgstr ""

#: ../../intro/tutorial01.txt:54
# afe57559bb2c47419b608441b8a389e8
msgid "From the command line, ``cd`` into a directory where you'd like to store your code, then run the following command:"
msgstr ""

#: ../../intro/tutorial01.txt:61
# 7b0d9301c50943ea95da754a9ee9f85c
msgid "This will create a ``mysite`` directory in your current directory. If it didn't work, see :ref:`troubleshooting-django-admin-py`."
msgstr ""

#: ../../intro/tutorial01.txt:66
# 5a4fa3ae610341cab96e3f4992e57742
msgid "You'll need to avoid naming projects after built-in Python or Django components. In particular, this means you should avoid using names like ``django`` (which will conflict with Django itself) or ``test`` (which conflicts with a built-in Python package)."
msgstr ""

#: ../../intro/tutorial01.txt:71
# f9693b1bcbcd41a88b79a43d2fd1ca38
msgid "Where should this code live?"
msgstr ""

#: ../../intro/tutorial01.txt:73
# d8f85518185649339e37610cb6bb658b
msgid "If your background is in plain old PHP (with no use of modern frameworks), you're probably used to putting code under the Web server's document root (in a place such as ``/var/www``). With Django, you don't do that. It's not a good idea to put any of this Python code within your Web server's document root, because it risks the possibility that people may be able to view your code over the Web. That's not good for security."
msgstr ""

#: ../../intro/tutorial01.txt:80
# be9ffb75958b42ef9398e177486f16e1
msgid "Put your code in some directory **outside** of the document root, such as :file:`/home/mycode`."
msgstr ""

#: ../../intro/tutorial01.txt:83
# f3042b8e563749d5bcb24f351a3762c0
msgid "Let's look at what :djadmin:`startproject` created::"
msgstr ""

#: ../../intro/tutorial01.txt:93
#: ../../intro/tutorial02.txt:46
# 8cfd0f85629541c2a03c3e20c021d736
# 56b588baeb2d4147a3bb179ab0ca7c3c
msgid "Doesn't match what you see?"
msgstr ""

#: ../../intro/tutorial01.txt:95
# 6f9ef16cabe24b31bebca23ce64d0e6e
msgid "The default project layout recently changed. If you're seeing a \"flat\" layout (with no inner :file:`mysite/` directory), you're probably using a version of Django that doesn't match this tutorial version.  You'll want to either switch to the older tutorial or the newer Django version."
msgstr ""

#: ../../intro/tutorial01.txt:100
# 877e68624e444f9383ffe5ca07c29e77
msgid "These files are:"
msgstr ""

#: ../../intro/tutorial01.txt:102
# fc7c28f1d96540b2bc844c8590fb7c2c
msgid "The outer :file:`mysite/` root directory is just a container for your project. Its name doesn't matter to Django; you can rename it to anything you like."
msgstr ""

#: ../../intro/tutorial01.txt:106
# 95d6a39396a943f0b724df20e519d73f
msgid ":file:`manage.py`: A command-line utility that lets you interact with this Django project in various ways. You can read all the details about :file:`manage.py` in :doc:`/ref/django-admin`."
msgstr ""

#: ../../intro/tutorial01.txt:110
# f680b640e22f4819b544a09b021dcafd
msgid "The inner :file:`mysite/` directory is the actual Python package for your project. Its name is the Python package name you'll need to use to import anything inside it (e.g. ``mysite.urls``)."
msgstr ""

#: ../../intro/tutorial01.txt:114
# 4b32d3e3f4804c18bfbf411a62143fb6
msgid ":file:`mysite/__init__.py`: An empty file that tells Python that this directory should be considered a Python package. (Read `more about packages`_ in the official Python docs if you're a Python beginner.)"
msgstr ""

#: ../../intro/tutorial01.txt:118
# 9fe1c638212c4087a7fb57961f1a40ed
msgid ":file:`mysite/settings.py`: Settings/configuration for this Django project.  :doc:`/topics/settings` will tell you all about how settings work."
msgstr ""

#: ../../intro/tutorial01.txt:122
# 94598adeff314b48b1f7bff050508406
msgid ":file:`mysite/urls.py`: The URL declarations for this Django project; a \"table of contents\" of your Django-powered site. You can read more about URLs in :doc:`/topics/http/urls`."
msgstr ""

#: ../../intro/tutorial01.txt:126
# 252acb32bc96403c9a97777da4a80cf1
msgid ":file:`mysite/wsgi.py`: An entry-point for WSGI-compatible web servers to serve your project. See :doc:`/howto/deployment/wsgi/index` for more details."
msgstr ""

#: ../../intro/tutorial01.txt:132
# 879bde01fb324b8d84d4049c8730409c
msgid "The development server"
msgstr ""

#: ../../intro/tutorial01.txt:134
# e14e6228057840aaa6b56c93638713eb
msgid "Let's verify this worked. Change into the outer :file:`mysite` directory, if you haven't already, and run the command ``python manage.py runserver``. You'll see the following output on the command line:"
msgstr ""

#: ../../intro/tutorial01.txt:148
# 7404530c790c46baa4b7a780e0f0a40f
msgid "You've started the Django development server, a lightweight Web server written purely in Python. We've included this with Django so you can develop things rapidly, without having to deal with configuring a production server -- such as Apache -- until you're ready for production."
msgstr ""

#: ../../intro/tutorial01.txt:153
# 94187b8231774a3bb1b70dac0a4e68bd
msgid "Now's a good time to note: **Don't** use this server in anything resembling a production environment. It's intended only for use while developing. (We're in the business of making Web frameworks, not Web servers.)"
msgstr ""

#: ../../intro/tutorial01.txt:157
# f86d5e214381447bbd9c077c084a2e48
msgid "Now that the server's running, visit http://127.0.0.1:8000/ with your Web browser. You'll see a \"Welcome to Django\" page, in pleasant, light-blue pastel. It worked!"
msgstr ""

#: ../../intro/tutorial01.txt:161
# 23068ede288c479595ee9fcc1c502fdf
msgid "Changing the port"
msgstr ""

#: ../../intro/tutorial01.txt:163
# 0394d5e483a948e69e66740260e615d2
msgid "By default, the :djadmin:`runserver` command starts the development server on the internal IP at port 8000."
msgstr ""

#: ../../intro/tutorial01.txt:166
# e5899dc3d1c44a3391382c103edb0135
msgid "If you want to change the server's port, pass it as a command-line argument. For instance, this command starts the server on port 8080:"
msgstr ""

#: ../../intro/tutorial01.txt:174
# b5e0472627cd4111b254388b8037ec0e
msgid "If you want to change the server's IP, pass it along with the port. So to listen on all public IPs (useful if you want to show off your work on other computers), use:"
msgstr ""

#: ../../intro/tutorial01.txt:182
# 73cedb21a2c84c3ea4ff7bbc64955ae1
msgid "Full docs for the development server can be found in the :djadmin:`runserver` reference."
msgstr ""

#: ../../intro/tutorial01.txt:185
# 8161d4bd5f644ccabccc66aed3642ff4
msgid "Automatic reloading of :djadmin:`runserver`"
msgstr ""

#: ../../intro/tutorial01.txt:187
# 417221bc2e844c45b40f7d1e79ed056c
msgid "The development server automatically reloads Python code for each request as needed. You don't need to restart the server for code changes to take effect. However, some actions like adding files or compiling translation files don't trigger a restart, so you'll have to restart the server in these cases."
msgstr ""

#: ../../intro/tutorial01.txt:194
# 8c39058e60654483b0f6bfffd0680f5a
msgid "Database setup"
msgstr ""

#: ../../intro/tutorial01.txt:196
# 4f6fa2b12b464ea6800d4afb2429e77e
msgid "Now, edit :file:`mysite/settings.py`. It's a normal Python module with module-level variables representing Django settings."
msgstr ""

#: ../../intro/tutorial01.txt:199
# 075d0c350be94228935ef46d9732d026
msgid "By default, the configuration uses SQLite. If you're new to databases, or you're just interested in trying Django, this is the easiest choice. SQLite is included in Python, so you won't need to install anything else to support your database."
msgstr ""

#: ../../intro/tutorial01.txt:204
# 9726a5482a0e472b89da44e71e8c0a79
msgid "If you wish to use another database, install the appropriate :ref:`database bindings <database-installation>`, and change the following keys in the :setting:`DATABASES` ``'default'`` item to match your database connection settings:"
msgstr ""

#: ../../intro/tutorial01.txt:209
# 7254c473c3da4e4f93f88ede6adb81fb
msgid ":setting:`ENGINE <DATABASE-ENGINE>` -- Either ``'django.db.backends.sqlite3'``, ``'django.db.backends.postgresql_psycopg2'``, ``'django.db.backends.mysql'``, or ``'django.db.backends.oracle'``. Other backends are :setting:`also available <DATABASE-ENGINE>`."
msgstr ""

#: ../../intro/tutorial01.txt:216
# bf360ecf9f8d47f495ac9dfc45270c9c
msgid ":setting:`NAME` -- The name of your database. If you're using SQLite, the database will be a file on your computer; in that case, :setting:`NAME` should be the full absolute path, including filename, of that file. The default value, ``os.path.join(BASE_DIR, 'db.sqlite3')``, will store the file in your project directory."
msgstr ""

#: ../../intro/tutorial01.txt:222
# fadedc8b801a44569ca24bdada4c3371
msgid "If you are not using SQLite as your database, additional settings such as :setting:`USER`, :setting:`PASSWORD`, :setting:`HOST` must be added. For more details, see the reference documentation for :setting:`DATABASES`."
msgstr ""

#: ../../intro/tutorial01.txt:227
# c91514dc058141fb9a5be9d0d6a10ff7
msgid "If you're using PostgreSQL or MySQL, make sure you've created a database by this point. Do that with \"``CREATE DATABASE database_name;``\" within your database's interactive prompt."
msgstr ""

#: ../../intro/tutorial01.txt:231
# c6c8220512d141dd971ed99f19dc8577
msgid "If you're using SQLite, you don't need to create anything beforehand - the database file will be created automatically when it is needed."
msgstr ""

#: ../../intro/tutorial01.txt:234
# 85e81838657c43ff8ba19959dc97db3a
msgid "While you're editing :file:`mysite/settings.py`, set :setting:`TIME_ZONE` to your time zone."
msgstr ""

#: ../../intro/tutorial01.txt:237
# 628f513858a7430d87663e0d501a0fcc
msgid "Also, note the :setting:`INSTALLED_APPS` setting at the top of the file. That holds the names of all Django applications that are activated in this Django instance. Apps can be used in multiple projects, and you can package and distribute them for use by others in their projects."
msgstr ""

#: ../../intro/tutorial01.txt:242
# 7ca4eab83da24688b1babf9db6c3b9d9
msgid "By default, :setting:`INSTALLED_APPS` contains the following apps, all of which come with Django:"
msgstr ""

#: ../../intro/tutorial01.txt:245
# 7c3c5bbc9038456190b7c4158e793455
msgid ":mod:`django.contrib.admin` -- The admin site. You'll use it in :doc:`part 2 of this tutorial </intro/tutorial02>`."
msgstr ""

#: ../../intro/tutorial01.txt:248
# 0b6111590dc14971af946036befeb7e5
msgid ":mod:`django.contrib.auth` -- An authentication system."
msgstr ""

#: ../../intro/tutorial01.txt:250
# a6811fc75c1940df9a2ec5310411088c
msgid ":mod:`django.contrib.contenttypes` -- A framework for content types."
msgstr ""

#: ../../intro/tutorial01.txt:252
# 5cc266b07ab74109a5c6d4eaa6b36bf6
msgid ":mod:`django.contrib.sessions` -- A session framework."
msgstr ""

#: ../../intro/tutorial01.txt:254
# aa70161363c3480cb2ef631349499275
msgid ":mod:`django.contrib.messages` -- A messaging framework."
msgstr ""

#: ../../intro/tutorial01.txt:256
# 66ba61bece794f00a201394bf3f4f45d
msgid ":mod:`django.contrib.staticfiles` -- A framework for managing static files."
msgstr ""

#: ../../intro/tutorial01.txt:259
# f2633feac5c84d9faa2dbfaa903c2a88
msgid "These applications are included by default as a convenience for the common case."
msgstr ""

#: ../../intro/tutorial01.txt:261
# f5cb97fc1b9b4a0d9316532e2ef5c610
msgid "Some of these applications makes use of at least one database table, though, so we need to create the tables in the database before we can use them. To do that, run the following command:"
msgstr ""

#: ../../intro/tutorial01.txt:269
# 52d7cf7863524fb1a783870cf76e53f2
msgid "The :djadmin:`syncdb` command looks at the :setting:`INSTALLED_APPS` setting and creates any necessary database tables according to the database settings in your :file:`mysite/settings.py` file. You'll see a message for each database table it creates, and you'll get a prompt asking you if you'd like to create a superuser account for the authentication system. Go ahead and do that."
msgstr ""

#: ../../intro/tutorial01.txt:276
# c5110ee520374275a4cf18632e22b7c5
msgid "If you're interested, run the command-line client for your database and type ``\\dt`` (PostgreSQL), ``SHOW TABLES;`` (MySQL), or ``.schema`` (SQLite) to display the tables Django created."
msgstr ""

#: ../../intro/tutorial01.txt:280
# d948f070fe2441519c0f25483dbeb640
msgid "For the minimalists"
msgstr ""

#: ../../intro/tutorial01.txt:282
# 5567a10d01554960b65aeee4cd0ace09
msgid "Like we said above, the default applications are included for the common case, but not everybody needs them. If you don't need any or all of them, feel free to comment-out or delete the appropriate line(s) from :setting:`INSTALLED_APPS` before running :djadmin:`syncdb`. The :djadmin:`syncdb` command will only create tables for apps in :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../intro/tutorial01.txt:292
# 4051ff7d01b84b79becc473425b9be7a
msgid "Creating models"
msgstr ""

#: ../../intro/tutorial01.txt:294
# 62f46d259de44a0eada78e8f48377382
msgid "Now that your environment -- a \"project\" -- is set up, you're set to start doing work."
msgstr ""

#: ../../intro/tutorial01.txt:297
# 4ccfbef4c50046939e877c93a4dfef54
msgid "Each application you write in Django consists of a Python package that follows a certain convention. Django comes with a utility that automatically generates the basic directory structure of an app, so you can focus on writing code rather than creating directories."
msgstr ""

#: ../../intro/tutorial01.txt:302
# d67cf5917f4e4feeb3c1cb3e070195a0
msgid "Projects vs. apps"
msgstr ""

#: ../../intro/tutorial01.txt:304
# 81710d58d6554c1d95d8690bc0c60152
msgid "What's the difference between a project and an app? An app is a Web application that does something -- e.g., a Weblog system, a database of public records or a simple poll app. A project is a collection of configuration and apps for a particular Web site. A project can contain multiple apps. An app can be in multiple projects."
msgstr ""

#: ../../intro/tutorial01.txt:310
# addef2702ab744fd963ee714dabbefbc
msgid "Your apps can live anywhere on your `Python path`_. In this tutorial, we'll create our poll app right next to your :file:`manage.py` file so that it can be imported as its own top-level module, rather than a submodule of ``mysite``."
msgstr ""

#: ../../intro/tutorial01.txt:314
# c3107444b31b4cc09dcd2b2c913b3b60
msgid "To create your app, make sure you're in the same directory as :file:`manage.py` and type this command:"
msgstr ""

#: ../../intro/tutorial01.txt:321
# b08bf4a85b5742b2ba07eb71acb713fc
msgid "That'll create a directory :file:`polls`, which is laid out like this::"
msgstr ""

#: ../../intro/tutorial01.txt:330
# 8de312cba1234a09837349b136052890
msgid "This directory structure will house the poll application."
msgstr ""

#: ../../intro/tutorial01.txt:332
# da53678033194bb4be34ed9168bc6d84
msgid "The first step in writing a database Web app in Django is to define your models -- essentially, your database layout, with additional metadata."
msgstr ""

#: ../../intro/tutorial01.txt:335
#: ../../intro/tutorial01.txt:409
#: ../../intro/tutorial02.txt:9
#: ../../intro/tutorial03.txt:10
#: ../../intro/tutorial03.txt:439
# 8b333384ef6b44c7ac9109256b2e29c6
# e0e15029a6814ac6a247ba490999f813
# 99595ce0ce884adf92608207ded2db29
# dc365f15d1224de296d0fdc978f838ae
# b6758fe307594fd7878f44ba836e8307
msgid "Philosophy"
msgstr ""

#: ../../intro/tutorial01.txt:337
# c9bd55f14f384f50a60a237050ab7495
msgid "A model is the single, definitive source of data about your data. It contains the essential fields and behaviors of the data you're storing. Django follows the :ref:`DRY Principle <dry>`. The goal is to define your data model in one place and automatically derive things from it."
msgstr ""

#: ../../intro/tutorial01.txt:342
# 5995ca066a584050897ecb317392fc2e
msgid "In our simple poll app, we'll create two models: ``Poll`` and ``Choice``. A ``Poll`` has a question and a publication date. A ``Choice`` has two fields: the text of the choice and a vote tally. Each ``Choice`` is associated with a ``Poll``."
msgstr ""

#: ../../intro/tutorial01.txt:347
# 3023c9e1de9847658bcc12ee9a7fc972
msgid "These concepts are represented by simple Python classes. Edit the :file:`polls/models.py` file so it looks like this::"
msgstr ""

#: ../../intro/tutorial01.txt:361
# 445ef0495f4d4bd4b7872a072b80aaa7
msgid "The code is straightforward. Each model is represented by a class that subclasses :class:`django.db.models.Model`. Each model has a number of class variables, each of which represents a database field in the model."
msgstr ""

#: ../../intro/tutorial01.txt:365
# ce5196ed1b564ae9939a70b79d4c45ac
msgid "Each field is represented by an instance of a :class:`~django.db.models.Field` class -- e.g., :class:`~django.db.models.CharField` for character fields and :class:`~django.db.models.DateTimeField` for datetimes. This tells Django what type of data each field holds."
msgstr ""

#: ../../intro/tutorial01.txt:370
# f0007e1b638549e2922943dd5b165e13
msgid "The name of each :class:`~django.db.models.Field` instance (e.g. ``question`` or ``pub_date``) is the field's name, in machine-friendly format. You'll use this value in your Python code, and your database will use it as the column name."
msgstr ""

#: ../../intro/tutorial01.txt:374
# f2ba94d4478d469f98e603fd6f4126ab
msgid "You can use an optional first positional argument to a :class:`~django.db.models.Field` to designate a human-readable name. That's used in a couple of introspective parts of Django, and it doubles as documentation. If this field isn't provided, Django will use the machine-readable name. In this example, we've only defined a human-readable name for ``Poll.pub_date``. For all other fields in this model, the field's machine-readable name will suffice as its human-readable name."
msgstr ""

#: ../../intro/tutorial01.txt:382
# ef9ca937b4974947b76fdca9c83bb529
msgid "Some :class:`~django.db.models.Field` classes have required arguments. :class:`~django.db.models.CharField`, for example, requires that you give it a :attr:`~django.db.models.CharField.max_length`. That's used not only in the database schema, but in validation, as we'll soon see."
msgstr ""

#: ../../intro/tutorial01.txt:387
# 6e4bd176066a4ac498c906d9d1341a57
msgid "A :class:`~django.db.models.Field` can also have various optional arguments; in this case, we've set the :attr:`~django.db.models.Field.default` value of ``votes`` to 0."
msgstr ""

#: ../../intro/tutorial01.txt:391
# ad178a98df37403c8dbc6ff5766a4645
msgid "Finally, note a relationship is defined, using :class:`~django.db.models.ForeignKey`. That tells Django each ``Choice`` is related to a single ``Poll``. Django supports all the common database relationships: many-to-ones, many-to-manys and one-to-ones."
msgstr ""

#: ../../intro/tutorial01.txt:399
# 2970d46ce3a94c3cb6d03c5b62077801
msgid "Activating models"
msgstr ""

#: ../../intro/tutorial01.txt:401
# 02dc85595e684ceaa3d5ed0ac92b594d
msgid "That small bit of model code gives Django a lot of information. With it, Django is able to:"
msgstr ""

#: ../../intro/tutorial01.txt:404
# a06e09533a794a329049cd38b35abf6e
msgid "Create a database schema (``CREATE TABLE`` statements) for this app."
msgstr ""

#: ../../intro/tutorial01.txt:405
# e0f7c5a35aad476f9afdf879a6ec3f76
msgid "Create a Python database-access API for accessing ``Poll`` and ``Choice`` objects."
msgstr ""

#: ../../intro/tutorial01.txt:407
# 9d3bbabc06e94db098b5a09acd7e25b3
msgid "But first we need to tell our project that the ``polls`` app is installed."
msgstr ""

#: ../../intro/tutorial01.txt:411
# c06d52bff0a6435da3792deee8d8f74e
msgid "Django apps are \"pluggable\": You can use an app in multiple projects, and you can distribute apps, because they don't have to be tied to a given Django installation."
msgstr ""

#: ../../intro/tutorial01.txt:415
# 9b39e6fccd83428cb391fd59120e3ca9
msgid "Edit the :file:`mysite/settings.py` file again, and change the :setting:`INSTALLED_APPS` setting to include the string ``'polls'``. So it'll look like this::"
msgstr ""

#: ../../intro/tutorial01.txt:429
# 38cc3607411c46af9ebc8a3241bcdaa1
msgid "Now Django knows to include the ``polls`` app. Let's run another command:"
msgstr ""

#: ../../intro/tutorial01.txt:435
# e37d8883f268423395130368e6490842
msgid "You should see something similar to the following (the ``CREATE TABLE`` SQL statements for the polls app):"
msgstr ""

#: ../../intro/tutorial01.txt:454
# efe26d36c04b431ebdaa16d50f653589
msgid "Note the following:"
msgstr ""

#: ../../intro/tutorial01.txt:456
# 3bab5863878b42539a6109be2e30a459
msgid "The exact output will vary depending on the database you are using. The example above is generated for SQLite."
msgstr ""

#: ../../intro/tutorial01.txt:459
# cb8f645c58304d0d89ab8b771585e93c
msgid "Table names are automatically generated by combining the name of the app (``polls``) and the lowercase name of the model -- ``poll`` and ``choice``. (You can override this behavior.)"
msgstr ""

#: ../../intro/tutorial01.txt:463
# a61d6de8045b4d8484b69945c6677f20
msgid "Primary keys (IDs) are added automatically. (You can override this, too.)"
msgstr ""

#: ../../intro/tutorial01.txt:465
# 5346421b069a4be18e3e0a24c4e52951
msgid "By convention, Django appends ``\"_id\"`` to the foreign key field name. (Yes, you can override this, as well.)"
msgstr ""

#: ../../intro/tutorial01.txt:468
# 8257ee50878d4aff948d4e38334a9424
msgid "The foreign key relationship is made explicit by a ``REFERENCES`` statement."
msgstr ""

#: ../../intro/tutorial01.txt:471
# 9a2baa2b17dd4dcda1c328cc36bfd6b6
msgid "It's tailored to the database you're using, so database-specific field types such as ``auto_increment`` (MySQL), ``serial`` (PostgreSQL), or ``integer primary key`` (SQLite) are handled for you automatically. Same goes for quoting of field names -- e.g., using double quotes or single quotes."
msgstr ""

#: ../../intro/tutorial01.txt:477
# 959d65b05a6a4cee87d1f649f6a2873d
msgid "The :djadmin:`sql` command doesn't actually run the SQL in your database - it just prints it to the screen so that you can see what SQL Django thinks is required. If you wanted to, you could copy and paste this SQL into your database prompt. However, as we will see shortly, Django provides an easier way of committing the SQL to the database."
msgstr ""

#: ../../intro/tutorial01.txt:483
# ee8c080e43f442829387527c80aec5eb
msgid "If you're interested, also run the following commands:"
msgstr ""

#: ../../intro/tutorial01.txt:485
# b961eb10a3c24cb2b1439dfae7a9c2ef
msgid ":djadmin:`python manage.py validate <validate>` -- Checks for any errors in the construction of your models."
msgstr ""

#: ../../intro/tutorial01.txt:488
# adca512099d046e1a6ca40482e6431cd
msgid ":djadmin:`python manage.py sqlcustom polls <sqlcustom>` -- Outputs any :ref:`custom SQL statements <initial-sql>` (such as table modifications or constraints) that are defined for the application."
msgstr ""

#: ../../intro/tutorial01.txt:492
# 7f1f13c1719d4953abcaf9b81367d8cb
msgid ":djadmin:`python manage.py sqlclear polls <sqlclear>` -- Outputs the necessary ``DROP TABLE`` statements for this app, according to which tables already exist in your database (if any)."
msgstr ""

#: ../../intro/tutorial01.txt:496
# ba34867d461b4cc49ed67b165aef5d45
msgid ":djadmin:`python manage.py sqlindexes polls <sqlindexes>` -- Outputs the ``CREATE INDEX`` statements for this app."
msgstr ""

#: ../../intro/tutorial01.txt:499
# 3db6d5a44a144ea388c0c40185bdc485
msgid ":djadmin:`python manage.py sqlall polls <sqlall>` -- A combination of all the SQL from the :djadmin:`sql`, :djadmin:`sqlcustom`, and :djadmin:`sqlindexes` commands."
msgstr ""

#: ../../intro/tutorial01.txt:503
# 30932a604a2e437ebddd1807ebf3b9fd
msgid "Looking at the output of those commands can help you understand what's actually happening under the hood."
msgstr ""

#: ../../intro/tutorial01.txt:506
# e6be90b608ff47e4bbe1c2c985c6b047
msgid "Now, run :djadmin:`syncdb` again to create those model tables in your database:"
msgstr ""

#: ../../intro/tutorial01.txt:512
# 17525d3436da4fde870a0201b7a85bff
msgid "The :djadmin:`syncdb` command runs the SQL from :djadmin:`sqlall` on your database for all apps in :setting:`INSTALLED_APPS` that don't already exist in your database. This creates all the tables, initial data and indexes for any apps you've added to your project since the last time you ran syncdb. :djadmin:`syncdb` can be called as often as you like, and it will only ever create the tables that don't exist."
msgstr ""

#: ../../intro/tutorial01.txt:519
# 27f2bdca1af746a1b3404f2dab5a371d
msgid "Read the :doc:`django-admin.py documentation </ref/django-admin>` for full information on what the ``manage.py`` utility can do."
msgstr ""

#: ../../intro/tutorial01.txt:523
# 4b0c3ea919b64e5386796c4cacd18f93
msgid "Playing with the API"
msgstr ""

#: ../../intro/tutorial01.txt:525
# 0e150a1cea1248a09e79a4d634e14c0a
msgid "Now, let's hop into the interactive Python shell and play around with the free API Django gives you. To invoke the Python shell, use this command:"
msgstr ""

#: ../../intro/tutorial01.txt:532
# 72c37af9f5f64dc9a502c170d61961b2
msgid "We're using this instead of simply typing \"python\", because :file:`manage.py` sets the ``DJANGO_SETTINGS_MODULE`` environment variable, which gives Django the Python import path to your :file:`mysite/settings.py` file."
msgstr ""

#: ../../intro/tutorial01.txt:536
# babfcc9231884218bab968273763a426
msgid "Bypassing manage.py"
msgstr ""

#: ../../intro/tutorial01.txt:538
# e649b1cc1e854453a0ab9382ce6bb674
msgid "If you'd rather not use :file:`manage.py`, no problem. Just set the ``DJANGO_SETTINGS_MODULE`` environment variable to ``mysite.settings`` and run ``python`` from the same directory :file:`manage.py` is in (or ensure that directory is on the Python path, so that ``import mysite`` works)."
msgstr ""

#: ../../intro/tutorial01.txt:543
# a6010f8b544c4911b2caf6a159b9a4a5
msgid "For more information on all of this, see the :doc:`django-admin.py documentation </ref/django-admin>`."
msgstr ""

#: ../../intro/tutorial01.txt:546
# 51dc96fe75de426a8bfd00932bf1f142
msgid "Once you're in the shell, explore the :doc:`database API </topics/db/queries>`::"
msgstr ""

#: ../../intro/tutorial01.txt:586
# afca214b93be4ba2b5494ba41d0bc051
msgid "Wait a minute. ``<Poll: Poll object>`` is, utterly, an unhelpful representation of this object. Let's fix that by editing the polls model (in the ``polls/models.py`` file) and adding a :meth:`~django.db.models.Model.__unicode__` method to both ``Poll`` and ``Choice``. On Python 3, simply replace ``__unicode__`` by ``__str__`` in the following example::"
msgstr ""

#: ../../intro/tutorial01.txt:605
# 0570fdd72115454e95a5c9ba207d4945
msgid "It's important to add :meth:`~django.db.models.Model.__unicode__` methods (or :meth:`~django.db.models.Model.__str__` on Python 3) to your models, not only for your own sanity when dealing with the interactive prompt, but also because objects' representations are used throughout Django's automatically-generated admin."
msgstr ""

#: ../../intro/tutorial01.txt:611
# 4ef2140d828042699d56dc2e0895d185
msgid "`__unicode__` or `__str__`?"
msgstr ""

#: ../../intro/tutorial01.txt:613
# db007728ce3f49ad94b7cb9b5df3ba52
msgid "On Python 3, things are simpler, just use :meth:`~django.db.models.Model.__str__` and forget about :meth:`~django.db.models.Model.__unicode__`."
msgstr ""

#: ../../intro/tutorial01.txt:617
# c5b189f9f9704241957675e8e7a98e8b
msgid "If you're familiar with Python 2, you might be in the habit of adding :meth:`~django.db.models.Model.__str__` methods to your classes, not :meth:`~django.db.models.Model.__unicode__` methods. We use :meth:`~django.db.models.Model.__unicode__` here because Django models deal with Unicode by default. All data stored in your database is converted to Unicode when it's returned."
msgstr ""

#: ../../intro/tutorial01.txt:624
# 1a9ef464d41244b69e71886076ff6c29
msgid "Django models have a default :meth:`~django.db.models.Model.__str__` method that calls :meth:`~django.db.models.Model.__unicode__` and converts the result to a UTF-8 bytestring. This means that ``unicode(p)`` will return a Unicode string, and ``str(p)`` will return a normal string, with characters encoded as UTF-8."
msgstr ""

#: ../../intro/tutorial01.txt:630
# 197437a4d32245d6a90bab515c432347
msgid "If all of this is gibberish to you, just remember to add :meth:`~django.db.models.Model.__unicode__` methods to your models. With any luck, things should Just Work for you."
msgstr ""

#: ../../intro/tutorial01.txt:634
# 70ada3ec78334459b503d5ebe97a1eee
msgid "Note these are normal Python methods. Let's add a custom method, just for demonstration::"
msgstr ""

#: ../../intro/tutorial01.txt:645
# 7b60ab0b522f42bbba17f7d492e870ac
msgid "Note the addition of ``import datetime`` and ``from django.utils import timezone``, to reference Python's standard :mod:`datetime` module and Django's time-zone-related utilities in :mod:`django.utils.timezone`, respectively. If you aren't familiar with time zone handling in Python, you can learn more in the :doc:`time zone support docs </topics/i18n/timezones>`."
msgstr ""

#: ../../intro/tutorial01.txt:651
# b0de47747ef34e6ea5cd62e6563a4f64
msgid "Save these changes and start a new Python interactive shell by running ``python manage.py shell`` again::"
msgstr ""

#: ../../intro/tutorial01.txt:730
# d9aea70eb8d147e4bdf2cb0f300c2fcb
msgid "For more information on model relations, see :doc:`Accessing related objects </ref/models/relations>`. For more on how to use double underscores to perform field lookups via the API, see :ref:`Field lookups <field-lookups-intro>`. For full details on the database API, see our :doc:`Database API reference </topics/db/queries>`."
msgstr ""

#: ../../intro/tutorial01.txt:736
# f627b0c18f6842cabfa73f3af71d70e9
msgid "When you're comfortable with the API, read :doc:`part 2 of this tutorial </intro/tutorial02>` to get Django's automatic admin working."
msgstr ""

#: ../../intro/tutorial02.txt:3
# 8df8f0b6124c43528464e4a40f82a605
msgid "Writing your first Django app, part 2"
msgstr ""

#: ../../intro/tutorial02.txt:5
# b564b0898d9e44cca07008f72020933b
msgid "This tutorial begins where :doc:`Tutorial 1 </intro/tutorial01>` left off. We're continuing the Web-poll application and will focus on Django's automatically-generated admin site."
msgstr ""

#: ../../intro/tutorial02.txt:11
# c050820f29fd47c391bfe6778d4974a4
msgid "Generating admin sites for your staff or clients to add, change and delete content is tedious work that doesn't require much creativity. For that reason, Django entirely automates creation of admin interfaces for models."
msgstr ""

#: ../../intro/tutorial02.txt:15
# 714c6847aaf5445cb9fab4cf0b43512f
msgid "Django was written in a newsroom environment, with a very clear separation between \"content publishers\" and the \"public\" site. Site managers use the system to add news stories, events, sports scores, etc., and that content is displayed on the public site. Django solves the problem of creating a unified interface for site administrators to edit content."
msgstr ""

#: ../../intro/tutorial02.txt:21
# 54ada9625e7e4d539124d35481435c52
msgid "The admin isn't intended to be used by site visitors. It's for site managers."
msgstr ""

#: ../../intro/tutorial02.txt:25
# 0df8e463888c4b5290349c8cabc61a98
msgid "Start the development server"
msgstr ""

#: ../../intro/tutorial02.txt:27
# 2d22c2becfc04279ae04da2417b0cb69
msgid "The Django admin site is activated by default. Let's start the development server and explore it."
msgstr ""

#: ../../intro/tutorial02.txt:30
# cb1e672800ec41a796ea6c431633b495
msgid "Recall from Tutorial 1 that you start the development server like so:"
msgstr ""

#: ../../intro/tutorial02.txt:36
# b3254f88e0554aa98ce5fea471093572
msgid "Now, open a Web browser and go to \"/admin/\" on your local domain -- e.g., http://127.0.0.1:8000/admin/. You should see the admin's login screen:"
msgstr ""

#: ../../intro/tutorial02.txt:42
# fc62aa62143646d884a9797dca08368b
msgid "Since :doc:`translation </topics/i18n/translation>` is turned on by default, the login screen may be displayed in your own language, depending on your browser's settings and on whether Django has a translation for this language."
msgstr ""

#: ../../intro/tutorial02.txt:48
# 87cd8b482baa42caa943369d53e16fcd
msgid "If at this point, instead of the above login page, you get an error page reporting something like::"
msgstr ""

#: ../../intro/tutorial02.txt:55
# 62c03ddd55554550906bbfe8b4c393b6
msgid "then you're probably using a version of Django that doesn't match this tutorial version. You'll want to either switch to the older tutorial or the newer Django version."
msgstr ""

#: ../../intro/tutorial02.txt:60
# fde754d2dd064c4a9e92b17d8bec0d42
msgid "Enter the admin site"
msgstr ""

#: ../../intro/tutorial02.txt:62
# ce141577564746619b2d3ae76e2a85b6
msgid "Now, try logging in. You created a superuser account in the first part of this tutorial, remember?  If you didn't create one or forgot the password you can :ref:`create another one <topics-auth-creating-superusers>`."
msgstr ""

#: ../../intro/tutorial02.txt:66
# 90102c3060f1430a88a75cdd81c045a1
msgid "You should see the Django admin index page:"
msgstr ""

#: ../../intro/tutorial02.txt:71
# 036eb669a5c74757ae7cbc651ae0e71c
msgid "You should see a few types of editable content: groups and users. They are provided by :mod:`django.contrib.auth`, the authentication framework shipped by Django."
msgstr ""

#: ../../intro/tutorial02.txt:76
# f2f94cc47a0343019e72b86587efc57a
msgid "Make the poll app modifiable in the admin"
msgstr ""

#: ../../intro/tutorial02.txt:78
# b282d235fcb7456285f581c217e0f046
msgid "But where's our poll app? It's not displayed on the admin index page."
msgstr ""

#: ../../intro/tutorial02.txt:80
# 4df8bbd88d6e4872bf0ff0786902bc0e
msgid "Just one thing to do: we need to tell the admin that ``Poll`` objects have an admin interface. To do this, open the :file:`polls/admin.py` file, and edit it to look like this::"
msgstr ""

#: ../../intro/tutorial02.txt:90
# 8a55c17a30b24fe78176eb1d60819088
msgid "Explore the free admin functionality"
msgstr ""

#: ../../intro/tutorial02.txt:92
# 540096d9a46042e09ef24d49a493177f
msgid "Now that we've registered ``Poll``, Django knows that it should be displayed on the admin index page:"
msgstr ""

#: ../../intro/tutorial02.txt:98
# 043e25e4a2fd4381a11d3c162f8a23ba
msgid "Click \"Polls.\" Now you're at the \"change list\" page for polls. This page displays all the polls in the database and lets you choose one to change it. There's the \"What's up?\" poll we created in the first tutorial:"
msgstr ""

#: ../../intro/tutorial02.txt:105
# 4b9c2b1c094249129c346ee0c7cab065
msgid "Click the \"What's up?\" poll to edit it:"
msgstr ""

#: ../../intro/tutorial02.txt:110
# 709e7e891f2a4c19a1d4f84306c7584a
msgid "Things to note here:"
msgstr ""

#: ../../intro/tutorial02.txt:112
# 24bbc7b4453f4404a5d874bd595648c7
msgid "The form is automatically generated from the ``Poll`` model."
msgstr ""

#: ../../intro/tutorial02.txt:114
# 19498a1beadd49948e8d1f3986efdb0d
msgid "The different model field types (:class:`~django.db.models.DateTimeField`, :class:`~django.db.models.CharField`) correspond to the appropriate HTML input widget. Each type of field knows how to display itself in the Django admin."
msgstr ""

#: ../../intro/tutorial02.txt:119
# f0e48fdf6f6346fa87a69f7b7bab26ee
msgid "Each :class:`~django.db.models.DateTimeField` gets free JavaScript shortcuts. Dates get a \"Today\" shortcut and calendar popup, and times get a \"Now\" shortcut and a convenient popup that lists commonly entered times."
msgstr ""

#: ../../intro/tutorial02.txt:123
# 4bf807ad2de5471bbadc4fc9f07c0980
msgid "The bottom part of the page gives you a couple of options:"
msgstr ""

#: ../../intro/tutorial02.txt:125
# 4354456e83f349b6a560d172a28f99b0
msgid "Save -- Saves changes and returns to the change-list page for this type of object."
msgstr ""

#: ../../intro/tutorial02.txt:128
# 4f89aa6a6bc14590901eedd3327dcb11
msgid "Save and continue editing -- Saves changes and reloads the admin page for this object."
msgstr ""

#: ../../intro/tutorial02.txt:131
# 2e8d0353b8b14cee91cae4b8ad1d8b86
msgid "Save and add another -- Saves changes and loads a new, blank form for this type of object."
msgstr ""

#: ../../intro/tutorial02.txt:134
# 84edb6ab451d43f68313337c76859f06
msgid "Delete -- Displays a delete confirmation page."
msgstr ""

#: ../../intro/tutorial02.txt:136
# 1c4aff0d5d3b4d12aa9ec56c1765e540
msgid "If the value of \"Date published\" doesn't match the time when you created the poll in Tutorial 1, it probably means you forgot to set the correct value for the :setting:`TIME_ZONE` setting. Change it, reload the page and check that the correct value appears."
msgstr ""

#: ../../intro/tutorial02.txt:141
# 1baa2ae169834136be600abc74697346
msgid "Change the \"Date published\" by clicking the \"Today\" and \"Now\" shortcuts. Then click \"Save and continue editing.\" Then click \"History\" in the upper right. You'll see a page listing all changes made to this object via the Django admin, with the timestamp and username of the person who made the change:"
msgstr ""

#: ../../intro/tutorial02.txt:150
# 43daaaf5840d4e1dbe11f23e0ab2d736
msgid "Customize the admin form"
msgstr ""

#: ../../intro/tutorial02.txt:152
# 65424e8e1aff4e6c882ca3796aaf4db8
msgid "Take a few minutes to marvel at all the code you didn't have to write. By registering the Poll model with ``admin.site.register(Poll)``, Django was able to construct a default form representation. Often, you'll want to customize how the admin form looks and works. You'll do this by telling Django the options you want when you register the object."
msgstr ""

#: ../../intro/tutorial02.txt:158
# 89d35dafe62140cb9ef810f756978d8c
msgid "Let's see how this works by re-ordering the fields on the edit form. Replace the ``admin.site.register(Poll)`` line with::"
msgstr ""

#: ../../intro/tutorial02.txt:169
# c908643d20f94f37950e9993219a904e
msgid "You'll follow this pattern -- create a model admin object, then pass it as the second argument to ``admin.site.register()`` -- any time you need to change the admin options for an object."
msgstr ""

#: ../../intro/tutorial02.txt:173
# 03555cdd87524303879aab3cbb8fbfe5
msgid "This particular change above makes the \"Publication date\" come before the \"Question\" field:"
msgstr ""

#: ../../intro/tutorial02.txt:179
# f5600de27cd34aff9767e7de5f0788fd
msgid "This isn't impressive with only two fields, but for admin forms with dozens of fields, choosing an intuitive order is an important usability detail."
msgstr ""

#: ../../intro/tutorial02.txt:182
# 1077cdca71834298b3d02ca8f4a6dcd9
msgid "And speaking of forms with dozens of fields, you might want to split the form up into fieldsets::"
msgstr ""

#: ../../intro/tutorial02.txt:196
# 59086c8ad85e451a8d4930c483c96598
msgid "The first element of each tuple in ``fieldsets`` is the title of the fieldset. Here's what our form looks like now:"
msgstr ""

#: ../../intro/tutorial02.txt:202
# 44ad4a1a79cb453b9f524326fd331d1a
msgid "You can assign arbitrary HTML classes to each fieldset. Django provides a ``\"collapse\"`` class that displays a particular fieldset initially collapsed. This is useful when you have a long form that contains a number of fields that aren't commonly used::"
msgstr ""

#: ../../intro/tutorial02.txt:220
# 288e9f04971049a980d8fb35e22bc824
msgid "Adding related objects"
msgstr ""

#: ../../intro/tutorial02.txt:222
# a6d0820a5db3499da4294261c69fb67b
msgid "OK, we have our Poll admin page. But a ``Poll`` has multiple ``Choices``, and the admin page doesn't display choices."
msgstr ""

#: ../../intro/tutorial02.txt:225
# c55c3c760b1d43d388f7fdb114e12a9d
msgid "Yet."
msgstr ""

#: ../../intro/tutorial02.txt:227
# 293867f5e53b4f3aa4ab80faa088414d
msgid "There are two ways to solve this problem. The first is to register ``Choice`` with the admin just as we did with ``Poll``. That's easy::"
msgstr ""

#: ../../intro/tutorial02.txt:235
# 9b2a15299dfc4a56b7511f3f3e92a80d
msgid "Now \"Choices\" is an available option in the Django admin. The \"Add choice\" form looks like this:"
msgstr ""

#: ../../intro/tutorial02.txt:241
# 2118ec417e1742669fcf2006d8b18b59
msgid "In that form, the \"Poll\" field is a select box containing every poll in the database. Django knows that a :class:`~django.db.models.ForeignKey` should be represented in the admin as a ``<select>`` box. In our case, only one poll exists at this point."
msgstr ""

#: ../../intro/tutorial02.txt:246
# dcd3b3ff4a0f41c693b52d7582d1e434
msgid "Also note the \"Add Another\" link next to \"Poll.\" Every object with a ``ForeignKey`` relationship to another gets this for free. When you click \"Add Another,\" you'll get a popup window with the \"Add poll\" form. If you add a poll in that window and click \"Save,\" Django will save the poll to the database and dynamically add it as the selected choice on the \"Add choice\" form you're looking at."
msgstr ""

#: ../../intro/tutorial02.txt:253
# 2ea94cabc21f47088cf496c8d333472f
msgid "But, really, this is an inefficient way of adding ``Choice`` objects to the system. It'd be better if you could add a bunch of Choices directly when you create the ``Poll`` object. Let's make that happen."
msgstr ""

#: ../../intro/tutorial02.txt:257
# 65d205beae074a80b6b48ca7323cc96e
msgid "Remove the ``register()`` call for the ``Choice`` model. Then, edit the ``Poll`` registration code to read::"
msgstr ""

#: ../../intro/tutorial02.txt:276
# 9d84b8f041f74807832ed73d1663b28e
msgid "This tells Django: \"``Choice`` objects are edited on the ``Poll`` admin page. By default, provide enough fields for 3 choices.\""
msgstr ""

#: ../../intro/tutorial02.txt:279
# 597c7f2782b046c8a8b622c69af95d86
msgid "Load the \"Add poll\" page to see how that looks:"
msgstr ""

#: ../../intro/tutorial02.txt:284
# 4a8fbb761c1b4694b56d71309bbf9142
msgid "It works like this: There are three slots for related Choices -- as specified by ``extra`` -- and each time you come back to the \"Change\" page for an already-created object, you get another three extra slots."
msgstr ""

#: ../../intro/tutorial02.txt:288
# bf129eb07b7b4c3da8b6a2c348c02249
msgid "At the end of the three current slots you will find an \"Add another Choice\" link.  If you click on it, a new slot will be added. If you want to remove the added slot, you can click on the X to the top right of the added slot. Note that you can't remove the original three slots. This image shows an added slot:"
msgstr ""

#: ../../intro/tutorial02.txt:296
# ae38a1cdc2be445ebed4ac5d0a8f8b15
msgid "One small problem, though. It takes a lot of screen space to display all the fields for entering related ``Choice`` objects. For that reason, Django offers a tabular way of displaying inline related objects; you just need to change the ``ChoiceInline`` declaration to read::"
msgstr ""

#: ../../intro/tutorial02.txt:304
# 32610db832ff45f9b188fa03149a84c8
msgid "With that ``TabularInline`` (instead of ``StackedInline``), the related objects are displayed in a more compact, table-based format:"
msgstr ""

#: ../../intro/tutorial02.txt:310
# b074a29ec0014389baa2506bd5e4958d
msgid "Note that there is an extra \"Delete?\" column that allows removing rows added using the \"Add Another Choice\" button and rows that have already been saved."
msgstr ""

#: ../../intro/tutorial02.txt:314
# 9e0acbeb237847a0a8ac57827cbab165
msgid "Customize the admin change list"
msgstr ""

#: ../../intro/tutorial02.txt:316
# 2039af053a28401b8232fc12116c31ae
msgid "Now that the Poll admin page is looking good, let's make some tweaks to the \"change list\" page -- the one that displays all the polls in the system."
msgstr ""

#: ../../intro/tutorial02.txt:319
# 1d2ddae27b484e81a1531e265e572715
msgid "Here's what it looks like at this point:"
msgstr ""

#: ../../intro/tutorial02.txt:324
# 80306fb23b284e1aad0219f19d8ec23a
msgid "By default, Django displays the ``str()`` of each object. But sometimes it'd be more helpful if we could display individual fields. To do that, use the ``list_display`` admin option, which is a tuple of field names to display, as columns, on the change list page for the object::"
msgstr ""

#: ../../intro/tutorial02.txt:333
# f608c7ccdb48489cbecf7bb348cbfaa6
msgid "Just for good measure, let's also include the ``was_published_recently`` custom method from Tutorial 1::"
msgstr ""

#: ../../intro/tutorial02.txt:340
# 427e26a7a60541b59e14234e3fadb562
msgid "Now the poll change list page looks like this:"
msgstr ""

#: ../../intro/tutorial02.txt:345
# 6e07894aa571461f994f9d40519e7a26
msgid "You can click on the column headers to sort by those values -- except in the case of the ``was_published_recently`` header, because sorting by the output of an arbitrary method is not supported. Also note that the column header for ``was_published_recently`` is, by default, the name of the method (with underscores replaced with spaces), and that each line contains the string representation of the output."
msgstr ""

#: ../../intro/tutorial02.txt:352
# 9338ba61405a47fabcaad4977dcd823a
msgid "You can improve that by giving that method (in :file:`polls/models.py`) a few attributes, as follows::"
msgstr ""

#: ../../intro/tutorial02.txt:363
# 1a05a4bcb1ba489d93c50aa3fb8fe491
msgid "Edit your :file:`polls/admin.py` file again and add an improvement to the Poll change list page: Filters. Add the following line to ``PollAdmin``::"
msgstr ""

#: ../../intro/tutorial02.txt:368
# 4f94caa654b84c21a69320f1864b7b02
msgid "That adds a \"Filter\" sidebar that lets people filter the change list by the ``pub_date`` field:"
msgstr ""

#: ../../intro/tutorial02.txt:374
# e3f34692c0f1439b851bfa28d889c6c1
msgid "The type of filter displayed depends on the type of field you're filtering on. Because ``pub_date`` is a :class:`~django.db.models.DateTimeField`, Django knows to give appropriate filter options: \"Any date,\" \"Today,\" \"Past 7 days,\" \"This month,\" \"This year.\""
msgstr ""

#: ../../intro/tutorial02.txt:379
# f9e6dfe31c844ceea0f62f34e561c931
msgid "This is shaping up well. Let's add some search capability::"
msgstr ""

#: ../../intro/tutorial02.txt:383
# a86440d0f6de478083621e7c41c2f47d
msgid "That adds a search box at the top of the change list. When somebody enters search terms, Django will search the ``question`` field. You can use as many fields as you'd like -- although because it uses a ``LIKE`` query behind the scenes, keep it reasonable, to keep your database happy."
msgstr ""

#: ../../intro/tutorial02.txt:388
# 82e22d3de11f40369fa917d3b8fda44b
msgid "Now's also a good time to note that change lists give you free pagination. The default is to display 100 items per page. Change-list pagination, search boxes, filters, date-hierarchies and column-header-ordering all work together like you think they should."
msgstr ""

#: ../../intro/tutorial02.txt:394
# c9931c646a464770b377ceb6ee71be73
msgid "Customize the admin look and feel"
msgstr ""

#: ../../intro/tutorial02.txt:396
# 5e87ee9ff812400f95ec684e14bcd47b
msgid "Clearly, having \"Django administration\" at the top of each admin page is ridiculous. It's just placeholder text."
msgstr ""

#: ../../intro/tutorial02.txt:399
# 154cb7f8a9ee40b19b1050bedbaa7e55
msgid "That's easy to change, though, using Django's template system. The Django admin is powered by Django itself, and its interfaces use Django's own template system."
msgstr ""

#: ../../intro/tutorial02.txt:406
# afa07cc7c051423aaea7540f1588fbe6
msgid "Customizing your *project's* templates"
msgstr ""

#: ../../intro/tutorial02.txt:408
# 3a7f58899421420a92b48f7338acde48
msgid "Create a ``templates`` directory in your project directory. Templates can live anywhere on your filesystem that Django can access. (Django runs as whatever user your server runs.) However, keeping your templates within the project is a good convention to follow."
msgstr ""

#: ../../intro/tutorial02.txt:413
# 5dbe185cf6794ef6b57d65833adf0813
msgid "Open your settings file (:file:`mysite/settings.py`, remember) and add a :setting:`TEMPLATE_DIRS` setting::"
msgstr ""

#: ../../intro/tutorial02.txt:418
# 10f46550adc44694a929589eb0a943f8
msgid ":setting:`TEMPLATE_DIRS` is an iterable of filesystem directories to check when loading Django templates; it's a search path."
msgstr ""

#: ../../intro/tutorial02.txt:421
# fe03f8a46ee147318e817daea516008e
msgid "Now create a directory called ``admin`` inside ``templates``, and copy the template ``admin/base_site.html`` from within the default Django admin template directory in the source code of Django itself (``django/contrib/admin/templates``) into that directory."
msgstr ""

#: ../../intro/tutorial02.txt:426
# 0b450b1c88e9445990c83ddd3f88b71d
msgid "Where are the Django source files?"
msgstr ""

#: ../../intro/tutorial02.txt:428
# 9e98009c86da48cfae74260959178097
msgid "If you have difficulty finding where the Django source files are located on your system, run the following command:"
msgstr ""

#: ../../intro/tutorial02.txt:439
# 23aa90cdaf744b319e58d616b9542d26
msgid "Then, just edit the file and replace the generic Django text with your own site's name as you see fit."
msgstr ""

#: ../../intro/tutorial02.txt:442
# 470d6dd83c314852b58a30669320529f
msgid "This template file contains lots of text like ``{% block branding %}`` and ``{{ title }}``. The ``{%`` and ``{{`` tags are part of Django's template language. When Django renders ``admin/base_site.html``, this template language will be evaluated to produce the final HTML page. Don't worry if you can't make any sense of the template right now -- we'll delve into Django's templating language in Tutorial 3."
msgstr ""

#: ../../intro/tutorial02.txt:449
# 2f61886023a14f878148b1b728d3a82f
msgid "Note that any of Django's default admin templates can be overridden. To override a template, just do the same thing you did with ``base_site.html`` -- copy it from the default directory into your custom directory, and make changes."
msgstr ""

#: ../../intro/tutorial02.txt:455
# f0e5c25e03a042d1ae9759e8198886f8
msgid "Customizing your *application's* templates"
msgstr ""

#: ../../intro/tutorial02.txt:457
# ec2c79521cb3436baddaab05b0d914b1
msgid "Astute readers will ask: But if :setting:`TEMPLATE_DIRS` was empty by default, how was Django finding the default admin templates? The answer is that, by default, Django automatically looks for a ``templates/`` subdirectory within each application package, for use as a fallback (don't forget that ``django.contrib.admin`` is an application)."
msgstr ""

#: ../../intro/tutorial02.txt:463
# be2566596f74406b9653e10cfd645504
msgid "Our poll application is not very complex and doesn't need custom admin templates. But if it grew more sophisticated and required modification of Django's standard admin templates for some of its functionality, it would be more sensible to modify the *application's* templates, rather than those in the *project*. That way, you could include the polls application in any new project and be assured that it would find the custom templates it needed."
msgstr ""

#: ../../intro/tutorial02.txt:470
# cfed58f560834157875eaa38b4762c8a
msgid "See the :ref:`template loader documentation <template-loaders>` for more information about how Django finds its templates."
msgstr ""

#: ../../intro/tutorial02.txt:474
# d367b685d90a40c1989c96c19642c820
msgid "Customize the admin index page"
msgstr ""

#: ../../intro/tutorial02.txt:476
# e5a27f29ecae4606a436a10b156419a8
msgid "On a similar note, you might want to customize the look and feel of the Django admin index page."
msgstr ""

#: ../../intro/tutorial02.txt:479
# 19721b2f2132431c971c629e7752b089
msgid "By default, it displays all the apps in :setting:`INSTALLED_APPS` that have been registered with the admin application, in alphabetical order. You may want to make significant changes to the layout. After all, the index is probably the most important page of the admin, and it should be easy to use."
msgstr ""

#: ../../intro/tutorial02.txt:484
# c9b1969d36574eb2b234299bb5fd95eb
msgid "The template to customize is ``admin/index.html``. (Do the same as with ``admin/base_site.html`` in the previous section -- copy it from the default directory to your custom template directory.) Edit the file, and you'll see it uses a template variable called ``app_list``. That variable contains every installed Django app. Instead of using that, you can hard-code links to object-specific admin pages in whatever way you think is best. Again, don't worry if you can't understand the template language -- we'll cover that in more detail in Tutorial 3."
msgstr ""

#: ../../intro/tutorial02.txt:493
# 981fe9e7836342269a29c8e8efd5db86
msgid "When you're comfortable with the admin site, read :doc:`part 3 of this tutorial </intro/tutorial03>` to start working on public poll views."
msgstr ""

#: ../../intro/tutorial03.txt:3
# 44af483c2d8d48e0bd89a4c8730530cf
msgid "Writing your first Django app, part 3"
msgstr ""

#: ../../intro/tutorial03.txt:5
# 6d61c29f44a24870ab422a633ce820c5
msgid "This tutorial begins where :doc:`Tutorial 2 </intro/tutorial02>` left off. We're continuing the Web-poll application and will focus on creating the public interface -- \"views.\""
msgstr ""

#: ../../intro/tutorial03.txt:12
# fec7421e7a56468d99b2f807d48202d2
msgid "A view is a \"type\" of Web page in your Django application that generally serves a specific function and has a specific template. For example, in a blog application, you might have the following views:"
msgstr ""

#: ../../intro/tutorial03.txt:16
# 75859509b69a46b5b0d4cbe6fdb38e69
msgid "Blog homepage -- displays the latest few entries."
msgstr ""

#: ../../intro/tutorial03.txt:18
# 93393a2ebfae4e4b8e427632b3bd29c3
msgid "Entry \"detail\" page -- permalink page for a single entry."
msgstr ""

#: ../../intro/tutorial03.txt:20
# 898f86da22b0429dbcf48e1cb49e5bf9
msgid "Year-based archive page -- displays all months with entries in the given year."
msgstr ""

#: ../../intro/tutorial03.txt:23
# b1399a90987940a092c2db3bdabe90a3
msgid "Month-based archive page -- displays all days with entries in the given month."
msgstr ""

#: ../../intro/tutorial03.txt:26
# 76ef83f7543043aca85a9e3a8928dc07
msgid "Day-based archive page -- displays all entries in the given day."
msgstr ""

#: ../../intro/tutorial03.txt:28
# 27d0bbcf8208474393208638eb8827b6
msgid "Comment action -- handles posting comments to a given entry."
msgstr ""

#: ../../intro/tutorial03.txt:30
# 4c2e12e152ac408fa4d3d8c3220975f0
msgid "In our poll application, we'll have the following four views:"
msgstr ""

#: ../../intro/tutorial03.txt:32
# 15caedf2657d4a769add50467c1b3350
msgid "Poll \"index\" page -- displays the latest few polls."
msgstr ""

#: ../../intro/tutorial03.txt:34
# 46f526f9f44849cfbb265a32e3595a40
msgid "Poll \"detail\" page -- displays a poll question, with no results but with a form to vote."
msgstr ""

#: ../../intro/tutorial03.txt:37
# d01f6e472e50419881f41e8134609a3a
msgid "Poll \"results\" page -- displays results for a particular poll."
msgstr ""

#: ../../intro/tutorial03.txt:39
# fe57bea4895548579d0e60afad7351ee
msgid "Vote action -- handles voting for a particular choice in a particular poll."
msgstr ""

#: ../../intro/tutorial03.txt:42
# 910fb707e5af4443a70090f1f6106640
msgid "In Django, web pages and other content are delivered by views. Each view is represented by a simple Python function (or method, in the case of class-based views). Django will choose a view by examining the URL that's requested (to be precise, the part of the URL after the domain name)."
msgstr ""

#: ../../intro/tutorial03.txt:47
# 2d45aca833fa4c5abd8087342bf85df3
msgid "Now in your time on the web you may have come across such beauties as \"ME2/Sites/dirmod.asp?sid=&type=gen&mod=Core+Pages&gid=A6CD4967199A42D9B65B1B\". You will be pleased to know that Django allows us much more elegant *URL patterns* than that."
msgstr ""

#: ../../intro/tutorial03.txt:52
# a13e7290751649ebb6701201626d535b
msgid "A URL pattern is simply the general form of a URL - for example: ``/newsarchive/<year>/<month>/``."
msgstr ""

#: ../../intro/tutorial03.txt:55
# 8103aaebcd414de1a081a3f74df0167d
msgid "To get from a URL to a view, Django uses what are known as 'URLconfs'. A URLconf maps URL patterns (described as regular expressions) to views."
msgstr ""

#: ../../intro/tutorial03.txt:58
# 1225db1e56a4407bb726fa33b9ade63e
msgid "This tutorial provides basic instruction in the use of URLconfs, and you can refer to :mod:`django.core.urlresolvers` for more information."
msgstr ""

#: ../../intro/tutorial03.txt:62
# d30b8de6adc04eb8981325561ca2615e
msgid "Write your first view"
msgstr ""

#: ../../intro/tutorial03.txt:64
# e2044aaae10a4e2bbfcee0deb1c5702e
msgid "Let's write the first view. Open the file ``polls/views.py`` and put the following Python code in it::"
msgstr ""

#: ../../intro/tutorial03.txt:72
# f3580d998b5549188900aa07d929c383
msgid "This is the simplest view possible in Django. To call the view, we need to map it to a URL - and for this we need a URLconf."
msgstr ""

#: ../../intro/tutorial03.txt:75
# c5fd89db00e7466c939cc4cc78d9abe5
msgid "To create a URLconf in the polls directory, create a file called ``urls.py``. Your app directory should now look like::"
msgstr ""

#: ../../intro/tutorial03.txt:86
# be703eb6ee484b7db4d4356b83468c98
msgid "In the ``polls/urls.py`` file include the following code::"
msgstr ""

#: ../../intro/tutorial03.txt:96
# e9e89f86db90411ab1e5e915a346e7e8
msgid "The next step is to point the root URLconf at the ``polls.urls`` module. In ``mysite/urls.py`` insert an :func:`~django.conf.urls.include`, leaving you with::"
msgstr ""

#: ../../intro/tutorial03.txt:110
# 899bb525fd9c4042b1ff1c63bad8f9f2
msgid "You have now wired an ``index`` view into the URLconf. Go to http://localhost:8000/polls/ in your browser, and you should see the text \"*Hello, world. You're at the poll index.*\", which you defined in the ``index`` view."
msgstr ""

#: ../../intro/tutorial03.txt:115
# 89a4d8910b8e41cb83690327c87a48d3
msgid "The :func:`~django.conf.urls.url` function is passed four arguments, two required: ``regex`` and ``view``, and two optional: ``kwargs``, and ``name``. At this point, it's worth reviewing what these arguments are for."
msgstr ""

#: ../../intro/tutorial03.txt:120
# 2d5cbfdc3c18400ca98641db064c040e
msgid ":func:`~django.conf.urls.url` argument: regex"
msgstr ""

#: ../../intro/tutorial03.txt:122
# a8785806b8184086a4c90e7ca20e1762
msgid "The term \"regex\" is a commonly used short form meaning \"regular expression\", which is a syntax for matching patterns in strings, or in this case, url patterns. Django starts at the first regular expression and makes its way down the list,  comparing the requested URL against each regular expression until it finds one that matches."
msgstr ""

#: ../../intro/tutorial03.txt:128
# b377ba0e93b546bd835d8e8561e8e363
msgid "Note that these regular expressions do not search GET and POST parameters, or the domain name. For example, in a request to ``http://www.example.com/myapp/``, the URLconf will look for ``myapp/``. In a request to ``http://www.example.com/myapp/?page=3``, the URLconf will also look for ``myapp/``."
msgstr ""

#: ../../intro/tutorial03.txt:134
# 673455e11ea1412fb408fe11f6d91d34
msgid "If you need help with regular expressions, see `Wikipedia's entry`_ and the documentation of the :mod:`re` module. Also, the O'Reilly book \"Mastering Regular Expressions\" by Jeffrey Friedl is fantastic. In practice, however, you don't need to be an expert on regular expressions, as you really only need to know how to capture simple patterns. In fact, complex regexes can have poor lookup performance, so you probably shouldn't rely on the full power of regexes."
msgstr ""

#: ../../intro/tutorial03.txt:141
# cf974c26caee448c8f86a75a25cd79a5
msgid "Finally, a performance note: these regular expressions are compiled the first time the URLconf module is loaded. They're super fast (as long as the lookups aren't too complex as noted above)."
msgstr ""

#: ../../intro/tutorial03.txt:148
# 56646c2905b7425a8f631bf09cbeb467
msgid ":func:`~django.conf.urls.url` argument: view"
msgstr ""

#: ../../intro/tutorial03.txt:150
# 1262b31d3b06459c9e5ddf2ad73f0519
msgid "When Django finds a regular expression match, Django calls the specified view function, with an :class:`~django.http.HttpRequest` object as the first argument and any “captured” values from the regular expression as other arguments. If the regex uses simple captures, values are passed as positional arguments; if it uses named captures, values are passed as keyword arguments. We'll give an example of this in a bit."
msgstr ""

#: ../../intro/tutorial03.txt:158
# 5913cb25badf45e4a72536f479f8e98d
msgid ":func:`~django.conf.urls.url` argument: kwargs"
msgstr ""

#: ../../intro/tutorial03.txt:160
# f8cb8463ff6b4751beed949dcae15550
msgid "Arbitrary keyword arguments can be passed in a dictionary to the target view. We aren't going to use this feature of Django in the tutorial."
msgstr ""

#: ../../intro/tutorial03.txt:164
# 5deb62d53f0d41e8809757a83ed5769f
msgid ":func:`~django.conf.urls.url` argument: name"
msgstr ""

#: ../../intro/tutorial03.txt:166
# b1d5bcf791d343aaaf5901437454e8f7
msgid "Naming your URL lets you refer to it unambiguously from elsewhere in Django especially templates. This powerful feature allows you to make  global changes to the url patterns of your project while only touching a single file."
msgstr ""

#: ../../intro/tutorial03.txt:171
# 58337111955947c9aec44ca792648021
msgid "Writing more views"
msgstr ""

#: ../../intro/tutorial03.txt:173
# 042e0f76a39946a1a92c6bc152adecbc
msgid "Now let's add a few more views to ``polls/views.py``. These views are slightly different, because they take an argument::"
msgstr ""

#: ../../intro/tutorial03.txt:185
# c70cef669e6c4541886401d0af2d45dc
msgid "Wire these new views into the ``polls.urls`` module by adding the following :func:`~django.conf.urls.url` calls::"
msgstr ""

#: ../../intro/tutorial03.txt:203
# 5abd60e3fc7a4a7b95e6c64ee7511321
msgid "Take a look in your browser, at \"/polls/34/\". It'll run the ``detail()`` method and display whatever ID you provide in the URL. Try \"/polls/34/results/\" and \"/polls/34/vote/\" too -- these will display the placeholder results and voting pages."
msgstr ""

#: ../../intro/tutorial03.txt:208
# 8e4768658a2b4915a3d8d42937ad276a
msgid "When somebody requests a page from your Web site -- say, \"/polls/34/\", Django will load the ``mysite.urls`` Python module because it's pointed to by the :setting:`ROOT_URLCONF` setting. It finds the variable named ``urlpatterns`` and traverses the regular expressions in order. The :func:`~django.conf.urls.include` functions we are using simply reference other URLconfs. Note that the regular expressions for the :func:`~django.conf.urls.include` functions don't have a ``$`` (end-of-string match character) but rather a trailing slash. Whenever Django encounters :func:`~django.conf.urls.include`, it chops off whatever part of the URL matched up to that point and sends the remaining string to the included URLconf for further processing."
msgstr ""

#: ../../intro/tutorial03.txt:220
# f109a4feacef49f2816537d8271bb260
msgid "The idea behind :func:`~django.conf.urls.include` is to make it easy to plug-and-play URLs. Since polls are in their own URLconf (``polls/urls.py``), they can be placed under \"/polls/\", or under \"/fun_polls/\", or under \"/content/polls/\", or any other path root, and the app will still work."
msgstr ""

#: ../../intro/tutorial03.txt:226
# d5ead8698c6743cb9ddb57dacf01a16c
msgid "Here's what happens if a user goes to \"/polls/34/\" in this system:"
msgstr ""

#: ../../intro/tutorial03.txt:228
# 63521f47da2f46f090e6455e22033283
msgid "Django will find the match at ``'^polls/'``"
msgstr ""

#: ../../intro/tutorial03.txt:230
# 6ea2df6185504cbeb99bf5fd4af04a57
msgid "Then, Django will strip off the matching text (``\"polls/\"``) and send the remaining text -- ``\"34/\"`` -- to the 'polls.urls' URLconf for further processing which matches ``r'^(?P<poll_id>\\d+)/$'`` resulting in a call to the ``detail()`` view like so::"
msgstr ""

#: ../../intro/tutorial03.txt:237
# afccc188f910447c92868dce2d5b735d
msgid "The ``poll_id='34'`` part comes from ``(?P<poll_id>\\d+)``. Using parentheses around a pattern \"captures\" the text matched by that pattern and sends it as an argument to the view function; ``?P<poll_id>`` defines the name that will be used to identify the matched pattern; and ``\\d+`` is a regular expression to match a sequence of digits (i.e., a number)."
msgstr ""

#: ../../intro/tutorial03.txt:243
# 9783614d68694ce9acbe7eec0047d97c
msgid "Because the URL patterns are regular expressions, there really is no limit on what you can do with them. And there's no need to add URL cruft such as ``.html`` -- unless you want to, in which case you can do something like this::"
msgstr ""

#: ../../intro/tutorial03.txt:250
# 6d942babdbe1453c9ad484d3e26cf1e4
msgid "But, don't do that. It's silly."
msgstr ""

#: ../../intro/tutorial03.txt:253
# d014ffeec24348498c53e506bfe8efea
msgid "Write views that actually do something"
msgstr ""

#: ../../intro/tutorial03.txt:255
# 476dd72044f04742ad875ec89e114dad
msgid "Each view is responsible for doing one of two things: returning an :class:`~django.http.HttpResponse` object containing the content for the requested page, or raising an exception such as :exc:`~django.http.Http404`. The rest is up to you."
msgstr ""

#: ../../intro/tutorial03.txt:260
# 37f563bb92d540029c2af1e7415ff956
msgid "Your view can read records from a database, or not. It can use a template system such as Django's -- or a third-party Python template system -- or not. It can generate a PDF file, output XML, create a ZIP file on the fly, anything you want, using whatever Python libraries you want."
msgstr ""

#: ../../intro/tutorial03.txt:265
# 1a17c442685c44f3b32a9b6b552b8e1b
msgid "All Django wants is that :class:`~django.http.HttpResponse`. Or an exception."
msgstr ""

#: ../../intro/tutorial03.txt:267
# 6cfd90bbb7234bd08dc9ed9520ea260e
msgid "Because it's convenient, let's use Django's own database API, which we covered in :doc:`Tutorial 1 </intro/tutorial01>`. Here's one stab at the ``index()`` view, which displays the latest 5 poll questions in the system, separated by commas, according to publication date::"
msgstr ""

#: ../../intro/tutorial03.txt:281
# 8d420db8d9b04048ac34146b9df5fb14
msgid "There's a problem here, though: the page's design is hard-coded in the view. If you want to change the way the page looks, you'll have to edit this Python code. So let's use Django's template system to separate the design from Python by creating a template that the view can use."
msgstr ""

#: ../../intro/tutorial03.txt:286
# 9230f0484ee348b9975c9a179fb55b93
msgid "First, create a directory called ``templates`` in your ``polls`` directory. Django will look for templates in there."
msgstr ""

#: ../../intro/tutorial03.txt:289
# c3b702c114aa4f43ba2178eb5617a9c1
msgid "Django's :setting:`TEMPLATE_LOADERS` setting contains a list of callables that know how to import templates from various sources. One of the defaults is :class:`django.template.loaders.app_directories.Loader` which looks for a \"templates\" subdirectory in each of the :setting:`INSTALLED_APPS` - this is how Django knows to find the polls templates even though we didn't modify :setting:`TEMPLATE_DIRS`, as we did in :ref:`Tutorial 2 <ref-customizing-your-projects-templates>`."
msgstr ""

#: ../../intro/tutorial03.txt:297
# b9fdf71919db4f2dbe25a74e9ab35b5b
msgid "Organizing templates"
msgstr ""

#: ../../intro/tutorial03.txt:299
# a2299d1aeea14ed8b0caceec81d5f229
msgid "We *could* have all our templates together, in one big templates directory, and it would work perfectly well. However, this template belongs to the polls application, so unlike the admin template we created in the previous tutorial, we'll put this one in the application's template directory (``polls/templates``) rather than the project's (``templates``). We'll discuss in more detail in the :doc:`reusable apps tutorial </intro/reusable-apps>` *why* we do this."
msgstr ""

#: ../../intro/tutorial03.txt:307
# 69ae40200ddf4ac583fd820d46b2fde5
msgid "Within the ``templates`` directory you have just created, create another directory called ``polls``, and within that create a file called ``index.html``. In other words, your template should be at ``polls/templates/polls/index.html``. Because of how the ``app_directories`` template loader works as described above, you can refer to this template within Django simply as ``polls/index.html``."
msgstr ""

#: ../../intro/tutorial03.txt:314
# 2e9284fe63124adcac0dd6220fc506fc
msgid "Template namespacing"
msgstr ""

#: ../../intro/tutorial03.txt:316
# 04135d82dbc642a69a2b1a697abea2c8
msgid "Now we *might* be able to get away with putting our templates directly in ``polls/templates`` (rather than creating another ``polls`` subdirectory), but it would actually be a bad idea. Django will choose the first template it finds whose name matches, and if you had a template with the same name in a *different* application, Django would be unable to distinguish between them. We need to be able to point Django at the right one, and the easiest way to ensure this is by *namespacing* them. That is, by putting those templates inside *another* directory named for the application itself."
msgstr ""

#: ../../intro/tutorial03.txt:325
# cfc1fa2ab4fa40b6acf517def66f683c
msgid "Put the following code in that template:"
msgstr ""

#: ../../intro/tutorial03.txt:339
# 75b87c9bcedc41a4ad8de8147f86d81a
msgid "Now let's update our ``index`` view in ``polls/views.py`` to use the template::"
msgstr ""

#: ../../intro/tutorial03.txt:354
# b4549d6a9d2b4bbc8525b78c50f0bcfd
msgid "That code loads the template called  ``polls/index.html`` and passes it a context. The context is a dictionary mapping template variable names to Python objects."
msgstr ""

#: ../../intro/tutorial03.txt:358
# 0c3eb4e27cdc40eda67d0580a845ac6f
msgid "Load the page by pointing your browser at \"/polls/\", and you should see a bulleted-list containing the \"What's up\" poll from Tutorial 1. The link points to the poll's detail page."
msgstr ""

#: ../../intro/tutorial03.txt:363
# 07b6c7a2b7db4a12847c406cacb38ca7
msgid "A shortcut: :func:`~django.shortcuts.render`"
msgstr ""

#: ../../intro/tutorial03.txt:365
# 1dff3939776e47e0894d15b7d649ff6a
msgid "It's a very common idiom to load a template, fill a context and return an :class:`~django.http.HttpResponse` object with the result of the rendered template. Django provides a shortcut. Here's the full ``index()`` view, rewritten::"
msgstr ""

#: ../../intro/tutorial03.txt:379
# 402704d6c4f14ad6bcbf9278df175908
msgid "Note that once we've done this in all these views, we no longer need to import :mod:`~django.template.loader`, :class:`~django.template.RequestContext` and :class:`~django.http.HttpResponse` (you'll want to keep ``HttpResponse`` if you still have the stub methods for ``detail``, ``results``, and ``vote``)."
msgstr ""

#: ../../intro/tutorial03.txt:384
# e0f5f386b39445c18122f4fd939a3e85
msgid "The :func:`~django.shortcuts.render` function takes the request object as its first argument, a template name as its second argument and a dictionary as its optional third argument. It returns an :class:`~django.http.HttpResponse` object of the given template rendered with the given context."
msgstr ""

#: ../../intro/tutorial03.txt:390
# be080ebbb7d044a3bbfd437cf4af6e1c
msgid "Raising a 404 error"
msgstr ""

#: ../../intro/tutorial03.txt:392
# b67ae139b01341a8bf4537b2be6d37bd
msgid "Now, let's tackle the poll detail view -- the page that displays the question for a given poll. Here's the view::"
msgstr ""

#: ../../intro/tutorial03.txt:407
# 351a5eeac3964afd803f6ffe931a4cf4
msgid "The new concept here: The view raises the :exc:`~django.http.Http404` exception if a poll with the requested ID doesn't exist."
msgstr ""

#: ../../intro/tutorial03.txt:410
# 64630e7070324e2191d5255b1d3d48e8
msgid "We'll discuss what you could put in that ``polls/detail.html`` template a bit later, but if you'd like to quickly get the above example working, a file containing just::"
msgstr ""

#: ../../intro/tutorial03.txt:416
# f469d43bbe7c4511a208d5ff32e1d93f
msgid "will get you started for now."
msgstr ""

#: ../../intro/tutorial03.txt:419
# 3071f97087aa4d319d8fdea6b8279b38
msgid "A shortcut: :func:`~django.shortcuts.get_object_or_404`"
msgstr ""

#: ../../intro/tutorial03.txt:421
# 9d269975a437401ca0e3fede2a617495
msgid "It's a very common idiom to use :meth:`~django.db.models.query.QuerySet.get` and raise :exc:`~django.http.Http404` if the object doesn't exist. Django provides a shortcut. Here's the ``detail()`` view, rewritten::"
msgstr ""

#: ../../intro/tutorial03.txt:433
# f1e947483b8940f5bf6f3c0bd5b630ef
msgid "The :func:`~django.shortcuts.get_object_or_404` function takes a Django model as its first argument and an arbitrary number of keyword arguments, which it passes to the :meth:`~django.db.models.query.QuerySet.get` function of the model's manager. It raises :exc:`~django.http.Http404` if the object doesn't exist."
msgstr ""

#: ../../intro/tutorial03.txt:441
# 9646f338a2e847b5b3eb967e0ac25745
msgid "Why do we use a helper function :func:`~django.shortcuts.get_object_or_404` instead of automatically catching the :exc:`~django.core.exceptions.ObjectDoesNotExist` exceptions at a higher level, or having the model API raise :exc:`~django.http.Http404` instead of :exc:`~django.core.exceptions.ObjectDoesNotExist`?"
msgstr ""

#: ../../intro/tutorial03.txt:447
# 28d104aacfd148d087551f528464941c
msgid "Because that would couple the model layer to the view layer. One of the foremost design goals of Django is to maintain loose coupling. Some controlled coupling is introduced in the :mod:`django.shortcuts` module."
msgstr ""

#: ../../intro/tutorial03.txt:451
# 5eb34165494645659d52217659c4b6dd
msgid "There's also a :func:`~django.shortcuts.get_list_or_404` function, which works just as :func:`~django.shortcuts.get_object_or_404` -- except using :meth:`~django.db.models.query.QuerySet.filter` instead of :meth:`~django.db.models.query.QuerySet.get`. It raises :exc:`~django.http.Http404` if the list is empty."
msgstr ""

#: ../../intro/tutorial03.txt:458
# 4b100a20427c473c97a7b28e6c4ee6d6
msgid "Use the template system"
msgstr ""

#: ../../intro/tutorial03.txt:460
# 9ef79ff34c6c45c68015a67b791ec92c
msgid "Back to the ``detail()`` view for our poll application. Given the context variable ``poll``, here's what the ``polls/detail.html`` template might look like:"
msgstr ""

#: ../../intro/tutorial03.txt:473
# cc33c2a6217f413695acfb5226393234
msgid "The template system uses dot-lookup syntax to access variable attributes. In the example of ``{{ poll.question }}``, first Django does a dictionary lookup on the object ``poll``. Failing that, it tries an attribute lookup -- which works, in this case. If attribute lookup had failed, it would've tried a list-index lookup."
msgstr ""

#: ../../intro/tutorial03.txt:479
# 39eb39dfcd184b41a97a6783bab32d7b
msgid "Method-calling happens in the :ttag:`{% for %}<for>` loop: ``poll.choice_set.all`` is interpreted as the Python code ``poll.choice_set.all()``, which returns an iterable of ``Choice`` objects and is suitable for use in the :ttag:`{% for %}<for>` tag."
msgstr ""

#: ../../intro/tutorial03.txt:484
# 88f78b7e9f584904ab38c8c6be55b847
msgid "See the :doc:`template guide </topics/templates>` for more about templates."
msgstr ""

#: ../../intro/tutorial03.txt:487
# a7c6c1c0f1c74e79a84acf77822f28b8
msgid "Removing hardcoded URLs in templates"
msgstr ""

#: ../../intro/tutorial03.txt:489
# 785bea32b62a462db8951ce136e3700d
msgid "Remember, when we wrote the link to a poll in the ``polls/index.html`` template, the link was partially hardcoded like this:"
msgstr ""

#: ../../intro/tutorial03.txt:496
# 0e2f9f11197a4077b301be2e35a0eb60
msgid "The problem with this hardcoded, tightly-coupled approach is that it becomes challenging to change URLs on projects with a lot of templates. However, since you defined the name argument in the :func:`~django.conf.urls.url` functions in the ``polls.urls`` module, you can remove a reliance on specific URL paths defined in your url configurations by using the ``{% url %}`` template tag:"
msgstr ""

#: ../../intro/tutorial03.txt:508
# eb2d88c8d89b4553bec61f282c02d626
msgid "If ``{% url 'detail' poll.id %}`` (with quotes) doesn't work, but ``{% url detail poll.id %}`` (without quotes) does, that means you're using a version of Django < 1.5. In this case, add the following declaration at the top of your template:"
msgstr ""

#: ../../intro/tutorial03.txt:517
# 42e05717028d408596406e9e5da3fa77
msgid "The way this works is by looking up the URL definition as specified in the ``polls.urls`` module. You can see exactly where the URL name of 'detail' is defined below::"
msgstr ""

#: ../../intro/tutorial03.txt:526
# 94f01ccb32814be7a1db3619d239bbf1
msgid "If you want to change the URL of the polls detail view to something else, perhaps to something like ``polls/specifics/12/`` instead of doing it in the template (or templates) you would change it in ``polls/urls.py``::"
msgstr ""

#: ../../intro/tutorial03.txt:536
# c88b98689de94641ac092412773fc2b0
msgid "Namespacing URL names"
msgstr ""

#: ../../intro/tutorial03.txt:538
# c371664173ee4a5e882ec4054281da3c
msgid "The tutorial project has just one app, ``polls``. In real Django projects, there might be five, ten, twenty apps or more. How does Django differentiate the URL names between them? For example, the ``polls`` app has a ``detail`` view, and so might an app on the same project that is for a blog. How does one make it so that Django knows which app view to create for a url when using the ``{% url %}`` template tag?"
msgstr ""

#: ../../intro/tutorial03.txt:545
# 1cccd076e54347b9b9d9284e0a2e74af
msgid "The answer is to add namespaces to your root URLconf. In the ``mysite/urls.py`` file (the project's ``urls.py``, not the application's), go ahead and change it to include namespacing::"
msgstr ""

#: ../../intro/tutorial03.txt:559
# e44066262c29452b9f481ecbd13b6366
msgid "Now change your ``polls/index.html`` template from:"
msgstr ""

#: ../../intro/tutorial03.txt:565
# c3e363eda8a8484cb03febcf5bbec3fe
msgid "to point at the namespaced detail view:"
msgstr ""

#: ../../intro/tutorial03.txt:571
# 5fad843efe7841ad8c2dbb7215c6ecc2
msgid "When you're comfortable with writing views, read :doc:`part 4 of this tutorial </intro/tutorial04>` to learn about simple form processing and generic views."
msgstr ""

#: ../../intro/tutorial04.txt:3
# a025d3135db7430a85ad9637a1807e5b
msgid "Writing your first Django app, part 4"
msgstr ""

#: ../../intro/tutorial04.txt:5
# 64cd7e6d37214a2eade0b0a3df1f1ef9
msgid "This tutorial begins where :doc:`Tutorial 3 </intro/tutorial03>` left off. We're continuing the Web-poll application and will focus on simple form processing and cutting down our code."
msgstr ""

#: ../../intro/tutorial04.txt:10
# edf14a7553074e44a465e40dd8143f28
msgid "Write a simple form"
msgstr ""

#: ../../intro/tutorial04.txt:12
# 5e3874bb677d4dd1b1cab58438307df1
msgid "Let's update our poll detail template (\"polls/detail.html\") from the last tutorial, so that the template contains an HTML ``<form>`` element:"
msgstr ""

#: ../../intro/tutorial04.txt:30
# 7c5f044b9d2f4b25bf51157ce1348902
msgid "A quick rundown:"
msgstr ""

#: ../../intro/tutorial04.txt:32
# e83da0da2b0c4bb2aea2a603cd93c08c
msgid "The above template displays a radio button for each poll choice. The ``value`` of each radio button is the associated poll choice's ID. The ``name`` of each radio button is ``\"choice\"``. That means, when somebody selects one of the radio buttons and submits the form, it'll send the POST data ``choice=3``. This is the basic concept of HTML forms."
msgstr ""

#: ../../intro/tutorial04.txt:38
# e580b1281f8641278635cffc04f69546
msgid "We set the form's ``action`` to ``{% url 'polls:vote' poll.id %}``, and we set ``method=\"post\"``. Using ``method=\"post\"`` (as opposed to ``method=\"get\"``) is very important, because the act of submitting this form will alter data server-side. Whenever you create a form that alters data server-side, use ``method=\"post\"``. This tip isn't specific to Django; it's just good Web development practice."
msgstr ""

#: ../../intro/tutorial04.txt:45
# 7c76e38edc764ae7a20723878468e6bc
msgid "``forloop.counter`` indicates how many times the :ttag:`for` tag has gone through its loop"
msgstr ""

#: ../../intro/tutorial04.txt:48
# 8a41c1697bed40979e6a7d9ecd4e436b
msgid "Since we're creating a POST form (which can have the effect of modifying data), we need to worry about Cross Site Request Forgeries. Thankfully, you don't have to worry too hard, because Django comes with a very easy-to-use system for protecting against it. In short, all POST forms that are targeted at internal URLs should use the :ttag:`{% csrf_token %}<csrf_token>` template tag."
msgstr ""

#: ../../intro/tutorial04.txt:55
# fffc9425ed854852b9868034142ec063
msgid "Now, let's create a Django view that handles the submitted data and does something with it. Remember, in :doc:`Tutorial 3 </intro/tutorial03>`, we created a URLconf for the polls application that includes this line::"
msgstr ""

#: ../../intro/tutorial04.txt:61
# f1f3e0600e104e6c9e631a6f00183695
msgid "We also created a dummy implementation of the ``vote()`` function. Let's create a real version. Add the following to ``polls/views.py``::"
msgstr ""

#: ../../intro/tutorial04.txt:87
# 17605d56f1b640e985c782558f2744cd
msgid "This code includes a few things we haven't covered yet in this tutorial:"
msgstr ""

#: ../../intro/tutorial04.txt:89
# f155fa1ea9944c9cb1ec32da69577815
msgid ":attr:`request.POST <django.http.HttpRequest.POST>` is a dictionary-like object that lets you access submitted data by key name. In this case, ``request.POST['choice']`` returns the ID of the selected choice, as a string. :attr:`request.POST <django.http.HttpRequest.POST>` values are always strings."
msgstr ""

#: ../../intro/tutorial04.txt:95
# 7affd361962c4bcea5fc498c0697cbc8
msgid "Note that Django also provides :attr:`request.GET <django.http.HttpRequest.GET>` for accessing GET data in the same way -- but we're explicitly using :attr:`request.POST <django.http.HttpRequest.POST>` in our code, to ensure that data is only altered via a POST call."
msgstr ""

#: ../../intro/tutorial04.txt:101
# a5026c8b7f204a14b4967cb9b5309aef
msgid "``request.POST['choice']`` will raise :exc:`~exceptions.KeyError` if ``choice`` wasn't provided in POST data. The above code checks for :exc:`~exceptions.KeyError` and redisplays the poll form with an error message if ``choice`` isn't given."
msgstr ""

#: ../../intro/tutorial04.txt:106
# 120428b900e1449a9d9bc19a972c0bd6
msgid "After incrementing the choice count, the code returns an :class:`~django.http.HttpResponseRedirect` rather than a normal :class:`~django.http.HttpResponse`. :class:`~django.http.HttpResponseRedirect` takes a single argument: the URL to which the user will be redirected (see the following point for how we construct the URL in this case)."
msgstr ""

#: ../../intro/tutorial04.txt:113
# 3b31d5c1449c44da8e79f5906f6e63c2
msgid "As the Python comment above points out, you should always return an :class:`~django.http.HttpResponseRedirect` after successfully dealing with POST data. This tip isn't specific to Django; it's just good Web development practice."
msgstr ""

#: ../../intro/tutorial04.txt:118
# 6d712497175c435b8b225f0bfa800eeb
msgid "We are using the :func:`~django.core.urlresolvers.reverse` function in the :class:`~django.http.HttpResponseRedirect` constructor in this example. This function helps avoid having to hardcode a URL in the view function. It is given the name of the view that we want to pass control to and the variable portion of the URL pattern that points to that view. In this case, using the URLconf we set up in Tutorial 3, this :func:`~django.core.urlresolvers.reverse` call will return a string like ::"
msgstr ""

#: ../../intro/tutorial04.txt:129
# 211d8bef1e964d5d82854a96fb3d962f
msgid "... where the ``3`` is the value of ``p.id``. This redirected URL will then call the ``'results'`` view to display the final page."
msgstr ""

#: ../../intro/tutorial04.txt:132
# 98d69bc16b624e34abc56d9bebcf4bba
msgid "As mentioned in Tutorial 3, ``request`` is a :class:`~django.http.HttpRequest` object. For more on :class:`~django.http.HttpRequest` objects, see the :doc:`request and response documentation </ref/request-response>`."
msgstr ""

#: ../../intro/tutorial04.txt:136
# 0e0f4b70c90e4504975aefcda238729b
msgid "After somebody votes in a poll, the ``vote()`` view redirects to the results page for the poll. Let's write that view::"
msgstr ""

#: ../../intro/tutorial04.txt:145
# 34c063d714ef44a88483fde829191191
msgid "This is almost exactly the same as the ``detail()`` view from :doc:`Tutorial 3 </intro/tutorial03>`. The only difference is the template name. We'll fix this redundancy later."
msgstr ""

#: ../../intro/tutorial04.txt:149
# 0c2d03fbfa70442da1b775dc22228821
msgid "Now, create a ``polls/results.html`` template:"
msgstr ""

#: ../../intro/tutorial04.txt:163
# a8c24e07b1e2455ab0525c898e48bb08
msgid "Now, go to ``/polls/1/`` in your browser and vote in the poll. You should see a results page that gets updated each time you vote. If you submit the form without having chosen a choice, you should see the error message."
msgstr ""

#: ../../intro/tutorial04.txt:168
# e23250d97ccc45a3a60582d673252a03
msgid "Use generic views: Less code is better"
msgstr ""

#: ../../intro/tutorial04.txt:170
# 18444659bfef403fb50e013df5e75605
msgid "The ``detail()`` (from :doc:`Tutorial 3 </intro/tutorial03>`) and ``results()`` views are stupidly simple -- and, as mentioned above, redundant. The ``index()`` view (also from Tutorial 3), which displays a list of polls, is similar."
msgstr ""

#: ../../intro/tutorial04.txt:174
# ad2b5776d2a14676813e2cf601589dc4
msgid "These views represent a common case of basic Web development: getting data from the database according to a parameter passed in the URL, loading a template and returning the rendered template. Because this is so common, Django provides a shortcut, called the \"generic views\" system."
msgstr ""

#: ../../intro/tutorial04.txt:179
# 52f4c5d217744f13bebf06d473f469ba
msgid "Generic views abstract common patterns to the point where you don't even need to write Python code to write an app."
msgstr ""

#: ../../intro/tutorial04.txt:182
# be33bf07e6f64aecbd2bb184703e5dac
msgid "Let's convert our poll app to use the generic views system, so we can delete a bunch of our own code. We'll just have to take a few steps to make the conversion. We will:"
msgstr ""

#: ../../intro/tutorial04.txt:186
# 63a54d8addfa4f6799df02b08507bf12
msgid "Convert the URLconf."
msgstr ""

#: ../../intro/tutorial04.txt:188
# f26efc7bd562430abb283fcad91ae252
msgid "Delete some of the old, unneeded views."
msgstr ""

#: ../../intro/tutorial04.txt:190
# 5ebac2a0f1d544a4bb67fde89b041f38
msgid "Introduce new views based on Django's generic views."
msgstr ""

#: ../../intro/tutorial04.txt:192
# 4c77b0307a1a465da07845d6be25693b
msgid "Read on for details."
msgstr ""

#: ../../intro/tutorial04.txt:194
# ab1d96270a594ad3a0a8e6de1bacec6f
msgid "Why the code-shuffle?"
msgstr ""

#: ../../intro/tutorial04.txt:196
# c7e713a18ac847559b6c030ce4917cae
msgid "Generally, when writing a Django app, you'll evaluate whether generic views are a good fit for your problem, and you'll use them from the beginning, rather than refactoring your code halfway through. But this tutorial intentionally has focused on writing the views \"the hard way\" until now, to focus on core concepts."
msgstr ""

#: ../../intro/tutorial04.txt:202
# a737e80ce62b4eda8691dc1be15f25c5
msgid "You should know basic math before you start using a calculator."
msgstr ""

#: ../../intro/tutorial04.txt:205
# 1d3f060291914b4eb0bbd048eafbaada
msgid "Amend URLconf"
msgstr ""

#: ../../intro/tutorial04.txt:207
# 9be252e1e527423695665014528ec0ae
msgid "First, open the ``polls/urls.py`` URLconf and change it like so::"
msgstr ""

#: ../../intro/tutorial04.txt:221
# 1a681a8ffb0542e686b82bbd1469c521
msgid "Amend views"
msgstr ""

#: ../../intro/tutorial04.txt:223
# 466310b7f97e404e9b9ae98ce289ae11
msgid "Next, we're going to remove our old ``index``, ``detail``, and ``results`` views and use Django's generic views instead. To do so, open the ``polls/views.py`` file and change it like so::"
msgstr ""

#: ../../intro/tutorial04.txt:255
# ff409ccd459a41b490eb644e97d67495
msgid "We're using two generic views here: :class:`~django.views.generic.list.ListView` and :class:`~django.views.generic.detail.DetailView`. Respectively, those two views abstract the concepts of \"display a list of objects\" and \"display a detail page for a particular type of object.\""
msgstr ""

#: ../../intro/tutorial04.txt:261
# c20a9085cc7f4b35b8650640f32daa04
msgid "Each generic view needs to know what model it will be acting upon. This is provided using the ``model`` attribute."
msgstr ""

#: ../../intro/tutorial04.txt:264
# 1e26868c182d4e88b23a1290d325bf85
msgid "The :class:`~django.views.generic.detail.DetailView` generic view expects the primary key value captured from the URL to be called ``\"pk\"``, so we've changed ``poll_id`` to ``pk`` for the generic views."
msgstr ""

#: ../../intro/tutorial04.txt:269
# 039d60292ac54e39bb6e787c65a634ca
msgid "By default, the :class:`~django.views.generic.detail.DetailView` generic view uses a template called ``<app name>/<model name>_detail.html``. In our case, it'll use the template ``\"polls/poll_detail.html\"``. The ``template_name`` attribute is used to tell Django to use a specific template name instead of the autogenerated default template name. We also specify the ``template_name`` for the ``results`` list view -- this ensures that the results view and the detail view have a different appearance when rendered, even though they're both a :class:`~django.views.generic.detail.DetailView` behind the scenes."
msgstr ""

#: ../../intro/tutorial04.txt:279
# fb6ee692a06e4206a26d0c2c98cb56d2
msgid "Similarly, the :class:`~django.views.generic.list.ListView` generic view uses a default template called ``<app name>/<model name>_list.html``; we use ``template_name`` to tell :class:`~django.views.generic.list.ListView` to use our existing ``\"polls/index.html\"`` template."
msgstr ""

#: ../../intro/tutorial04.txt:285
# e4ca60e79e664a47bd2e5d0f60d24edf
msgid "In previous parts of the tutorial, the templates have been provided with a context that contains the ``poll`` and ``latest_poll_list`` context variables. For ``DetailView`` the ``poll`` variable is provided automatically -- since we're using a Django model (``Poll``), Django is able to determine an appropriate name for the context variable. However, for ListView, the automatically generated context variable is ``poll_list``. To override this we provide the ``context_object_name`` attribute, specifying that we want to use ``latest_poll_list`` instead. As an alternative approach, you could change your templates to match the new default context variables -- but it's a lot easier to just tell Django to use the variable you want."
msgstr ""

#: ../../intro/tutorial04.txt:297
# bc09de792aef4ab683e64dfd57b90e69
msgid "Run the server, and use your new polling app based on generic views."
msgstr ""

#: ../../intro/tutorial04.txt:299
# 8055620f4a504b98887cfb2826a05a10
msgid "For full details on generic views, see the :doc:`generic views documentation </topics/class-based-views/index>`."
msgstr ""

#: ../../intro/tutorial04.txt:302
# 8fd50f59dbc249ada247b011a727eb74
msgid "When you're comfortable with forms and generic views, read :doc:`part 5 of this tutorial</intro/tutorial05>` to learn about testing our polls app."
msgstr ""

#: ../../intro/tutorial05.txt:3
# 969f5bf66c4840e78a45828c09ecde6c
msgid "Writing your first Django app, part 5"
msgstr ""

#: ../../intro/tutorial05.txt:5
# 9a4bd150c24d462287360768a61c96d9
msgid "This tutorial begins where :doc:`Tutorial 4 </intro/tutorial04>` left off. We've built a Web-poll application, and we'll now create some automated tests for it."
msgstr ""

#: ../../intro/tutorial05.txt:10
# 6a4656bc2e5a4e738cf3fb99154dc4c3
msgid "Introducing automated testing"
msgstr ""

#: ../../intro/tutorial05.txt:13
# cb32ccbea9f1434e83232b13edddeb2e
msgid "What are automated tests?"
msgstr ""

#: ../../intro/tutorial05.txt:15
# a3efeb1ff82348d1a347af52d38fd552
msgid "Tests are simple routines that check the operation of your code."
msgstr ""

#: ../../intro/tutorial05.txt:17
# 3165795a5cfd498fbc8dc78fd5aaac11
msgid "Testing operates at different levels. Some tests might apply to a tiny detail (*does a particular model method return values as expected?*) while others examine the overall operation of the software (*does a sequence of user inputs on the site produce the desired result?*). That's no different from the kind of testing you did earlier in :doc:`Tutorial 1 </intro/tutorial01>`, using the :djadmin:`shell` to examine the behavior of a method, or running the application and entering data to check how it behaves."
msgstr ""

#: ../../intro/tutorial05.txt:25
# c00a5c6a2a664ef2a49d87905ac000ec
msgid "What's different in *automated* tests is that the testing work is done for you by the system. You create a set of tests once, and then as you make changes to your app, you can check that your code still works as you originally intended, without having to perform time consuming manual testing."
msgstr ""

#: ../../intro/tutorial05.txt:31
# d370ec0751e249528a08cb14db643562
msgid "Why you need to create tests"
msgstr ""

#: ../../intro/tutorial05.txt:33
# f03496f58c374bba987756e954d3e0c7
msgid "So why create tests, and why now?"
msgstr ""

#: ../../intro/tutorial05.txt:35
# e47dd615c53c4d7ea25538278583d02f
msgid "You may feel that you have quite enough on your plate just learning Python/Django, and having yet another thing to learn and do may seem overwhelming and perhaps unnecessary. After all, our polls application is working quite happily now; going through the trouble of creating automated tests is not going to make it work any better. If creating the polls application is the last bit of Django programming you will ever do, then true, you don't need to know how to create automated tests. But, if that's not the case, now is an excellent time to learn."
msgstr ""

#: ../../intro/tutorial05.txt:45
# e05c86db9c5a4065999b6fd2abf829da
msgid "Tests will save you time"
msgstr ""

#: ../../intro/tutorial05.txt:47
# 84d668c9d2214be98046b79af099fae9
msgid "Up to a certain point, 'checking that it seems to work' will be a satisfactory test. In a more sophisticated application, you might have dozens of complex interactions between components."
msgstr ""

#: ../../intro/tutorial05.txt:51
# 6c4b0e8f7d0244559dfa89eb9b148821
msgid "A change in any of those components could have unexpected consequences on the application's behavior. Checking that it still 'seems to work' could mean running through your code's functionality with twenty different variations of your test data just to make sure you haven't broken something - not a good use of your time."
msgstr ""

#: ../../intro/tutorial05.txt:57
# 7efe60c414f54c938cc88cdbde9fb96e
msgid "That's especially true when automated tests could do this for you in seconds. If something's gone wrong, tests will also assist in identifying the code that's causing the unexpected behavior."
msgstr ""

#: ../../intro/tutorial05.txt:61
# e743c6d72795487892c17b093941cbf0
msgid "Sometimes it may seem a chore to tear yourself away from your productive, creative programming work to face the unglamorous and unexciting business of writing tests, particularly when you know your code is working properly."
msgstr ""

#: ../../intro/tutorial05.txt:65
# 5eb5ae3f890d4354926183dd729cc670
msgid "However, the task of writing tests is a lot more fulfilling than spending hours testing your application manually or trying to identify the cause of a newly-introduced problem."
msgstr ""

#: ../../intro/tutorial05.txt:70
# 17c53797b38b47e6b56a8dc30fff3a2d
msgid "Tests don't just identify problems, they prevent them"
msgstr ""

#: ../../intro/tutorial05.txt:72
# 1a30e9d197c84a2c85d3d0a1136f0b28
msgid "It's a mistake to think of tests merely as a negative aspect of development."
msgstr ""

#: ../../intro/tutorial05.txt:74
# 127c4f8366fb404196a7778c33307471
msgid "Without tests, the purpose or intended behavior of an application might be rather opaque. Even when it's your own code, you will sometimes find yourself poking around in it trying to find out what exactly it's doing."
msgstr ""

#: ../../intro/tutorial05.txt:78
# e43afd3374e2454eba2efde139dc2c69
msgid "Tests change that; they light up your code from the inside, and when something goes wrong, they focus light on the part that has gone wrong - *even if you hadn't even realized it had gone wrong*."
msgstr ""

#: ../../intro/tutorial05.txt:83
# 696c829ed0af4a9b9957d196e531dacf
msgid "Tests make your code more attractive"
msgstr ""

#: ../../intro/tutorial05.txt:85
# ccad05ca8a6740b19f9bd131bda56ecd
msgid "You might have created a brilliant piece of software, but you will find that many other developers will simply refuse to look at it because it lacks tests; without tests, they won't trust it. Jacob Kaplan-Moss, one of Django's original developers, says \"Code without tests is broken by design.\""
msgstr ""

#: ../../intro/tutorial05.txt:90
# 9aac64880dd64e0383db546de26d13fc
msgid "That other developers want to see tests in your software before they take it seriously is yet another reason for you to start writing tests."
msgstr ""

#: ../../intro/tutorial05.txt:94
# c5106b4f83084b2ca74a55cf066ae1f0
msgid "Tests help teams work together"
msgstr ""

#: ../../intro/tutorial05.txt:96
# 82aeb002011b4ae48ba0a8272398ca53
msgid "The previous points are written from the point of view of a single developer maintaining an application. Complex applications will be maintained by teams. Tests guarantee that colleagues don't inadvertently break your code (and that you don't break theirs without knowing). If you want to make a living as a Django programmer, you must be good at writing tests!"
msgstr ""

#: ../../intro/tutorial05.txt:103
# 104dbd0a1311417096566eb108850a34
msgid "Basic testing strategies"
msgstr ""

#: ../../intro/tutorial05.txt:105
# d85af1b646a642babebc4c221c16e7b3
msgid "There are many ways to approach writing tests."
msgstr ""

#: ../../intro/tutorial05.txt:107
# 1455781e7fee4932b6b9777735918709
msgid "Some programmers follow a discipline called \"`test-driven development`_\"; they actually write their tests before they write their code. This might seem counter-intuitive, but in fact it's similar to what most people will often do anyway: they describe a problem, then create some code to solve it. Test-driven development simply formalizes the problem in a Python test case."
msgstr ""

#: ../../intro/tutorial05.txt:113
# 6366837a22914d0894bef3f3e6ad5250
msgid "More often, a newcomer to testing will create some code and later decide that it should have some tests. Perhaps it would have been better to write some tests earlier, but it's never too late to get started."
msgstr ""

#: ../../intro/tutorial05.txt:117
# ced32c17ba814f53981f067c3100d2ef
msgid "Sometimes it's difficult to figure out where to get started with writing tests. If you have written several thousand lines of Python, choosing something to test might not be easy. In such a case, it's fruitful to write your first test the next time you make a change, either when you add a new feature or fix a bug."
msgstr ""

#: ../../intro/tutorial05.txt:122
# bfc98545b94b4c38bd79a758aa038f87
msgid "So let's do that right away."
msgstr ""

#: ../../intro/tutorial05.txt:127
# 2f13a8db476c427d8d0eb7e9bbe55dc2
msgid "Writing our first test"
msgstr ""

#: ../../intro/tutorial05.txt:130
# b12c37356f08472387e52b8cb7c21935
msgid "We identify a bug"
msgstr ""

#: ../../intro/tutorial05.txt:132
# 89e365f36ea441ff8bd3ad0f430fa470
msgid "Fortunately, there's a little bug in the ``polls`` application for us to fix right away: the ``Poll.was_published_recently()`` method returns ``True`` if the ``Poll`` was published within the last day (which is correct) but also if the ``Poll``’s ``pub_date`` field is in the future (which certainly isn't)."
msgstr ""

#: ../../intro/tutorial05.txt:137
# 9345a4a581a941938600256c3fcc61e2
msgid "You can see this in the Admin; create a poll whose date lies in the future; you'll see that the ``Poll`` change list claims it was published recently."
msgstr ""

#: ../../intro/tutorial05.txt:140
# 9ef525213d1c45a58c11a32d20ef1001
msgid "You can also see this using the :djadmin:`shell`::"
msgstr ""

#: ../../intro/tutorial05.txt:151
# ad93d25f92ce4fd3822247bb9ee7cb86
msgid "Since things in the future are not 'recent', this is clearly wrong."
msgstr ""

#: ../../intro/tutorial05.txt:154
# f575f75102a341c394f763a40c7f029d
msgid "Create a test to expose the bug"
msgstr ""

#: ../../intro/tutorial05.txt:156
# 5f5ac2dffeab419ba21c51fdebccfec6
msgid "What we've just done in the :djadmin:`shell` to test for the problem is exactly what we can do in an automated test, so let's turn that into an automated test."
msgstr ""

#: ../../intro/tutorial05.txt:159
# d109ad25c801448a84f262155e73eb70
msgid "A conventional place for an application's tests is in the application's ``tests.py`` file; the testing system will automatically find tests in any file whose name begins with ``test``."
msgstr ""

#: ../../intro/tutorial05.txt:163
# 352cb8c32975499d9d395521279e83d5
msgid "Put the following in the ``tests.py`` file in the ``polls`` application::"
msgstr ""

#: ../../intro/tutorial05.txt:182
# 308651f2903a4b47892c0b89781ee81b
msgid "What we have done here is created a :class:`django.test.TestCase` subclass with a method that creates a ``Poll`` instance with a ``pub_date`` in the future. We then check the output of ``was_published_recently()`` - which *ought* to be False."
msgstr ""

#: ../../intro/tutorial05.txt:188
# 00e2471911744dbd92568dad5d851fd3
msgid "Running tests"
msgstr ""

#: ../../intro/tutorial05.txt:190
# f49b8e769d0c4e649338c92a7a27c1e1
msgid "In the terminal, we can run our test::"
msgstr ""

#: ../../intro/tutorial05.txt:194
# eb6fee4e4cf84045ae4d8dd74cfb04f8
msgid "and you'll see something like::"
msgstr ""

#: ../../intro/tutorial05.txt:212
# fc3c14ba5519459cb3919941bd4e3a2e
msgid "What happened is this:"
msgstr ""

#: ../../intro/tutorial05.txt:214
# 2ee49020af5d414ab55c61e609b2ace4
msgid "``python manage.py test polls`` looked for tests in the ``polls`` application"
msgstr ""

#: ../../intro/tutorial05.txt:216
# b64cb8a8c5ad48468890ea57a25fbb8a
msgid "it found a subclass of the :class:`django.test.TestCase` class"
msgstr ""

#: ../../intro/tutorial05.txt:218
# 8a628c437d30495d83d7c1f463964f77
msgid "it created a special database for the purpose of testing"
msgstr ""

#: ../../intro/tutorial05.txt:220
# 9eb81540c54344fe9dbfb3fc2e38bcbd
msgid "it looked for test methods - ones whose names begin with ``test``"
msgstr ""

#: ../../intro/tutorial05.txt:222
# 63d32788eb2d42ba9468d36b49732c5a
msgid "in ``test_was_published_recently_with_future_poll`` it created a ``Poll`` instance whose ``pub_date`` field is 30 days in the future"
msgstr ""

#: ../../intro/tutorial05.txt:225
# 49d0e33ed9f64d22a124945b5457ebe6
msgid "... and using the ``assertEqual()`` method, it discovered that its ``was_published_recently()`` returns ``True``, though we wanted it to return ``False``"
msgstr ""

#: ../../intro/tutorial05.txt:229
# e1be92ee5b914fa4a436213d510aaa71
msgid "The test informs us which test failed and even the line on which the failure occurred."
msgstr ""

#: ../../intro/tutorial05.txt:233
# d4d54f9c5e2e4a2a9300a30d2df8f488
msgid "Fixing the bug"
msgstr ""

#: ../../intro/tutorial05.txt:235
# 85d8d960d6fb47ea8a0c21687f06bd68
msgid "We already know what the problem is: ``Poll.was_published_recently()`` should return ``False`` if its ``pub_date`` is in the future. Amend the method in ``models.py``, so that it will only return ``True`` if the date is also in the past::"
msgstr ""

#: ../../intro/tutorial05.txt:244
# 430995d01105453983f6fce0250b9dbc
msgid "and run the test again::"
msgstr ""

#: ../../intro/tutorial05.txt:254
# 1f6766ad4f0147b699038cb8f5715720
msgid "After identifying a bug, we wrote a test that exposes it and corrected the bug in the code so our test passes."
msgstr ""

#: ../../intro/tutorial05.txt:257
# 3f90fca28b2b4c1a84404ae0bd26930b
msgid "Many other things might go wrong with our application in the future, but we can be sure that we won't inadvertently reintroduce this bug, because simply running the test will warn us immediately. We can consider this little portion of the application pinned down safely forever."
msgstr ""

#: ../../intro/tutorial05.txt:263
# d9512db4a537495d99d7995c00d28b92
msgid "More comprehensive tests"
msgstr ""

#: ../../intro/tutorial05.txt:265
# cff08815e83f4767918ca48a493aaa5b
msgid "While we're here, we can further pin down the ``was_published_recently()`` method; in fact, it would be positively embarrassing if in fixing one bug we had introduced another."
msgstr ""

#: ../../intro/tutorial05.txt:269
# 0a8b511e3a1d408f82c1a90c76c7856a
msgid "Add two more test methods to the same class, to test the behavior of the method more comprehensively::"
msgstr ""

#: ../../intro/tutorial05.txt:288
# 4a286f5af102431f9d9ff0a619625ef8
msgid "And now we have three tests that confirm that ``Poll.was_published_recently()`` returns sensible values for past, recent, and future polls."
msgstr ""

#: ../../intro/tutorial05.txt:291
# b633ef9c9e404b0a85e7eb0d9b7e6e52
msgid "Again, ``polls`` is a simple application, but however complex it grows in the future and whatever other code it interacts with, we now have some guarantee that the method we have written tests for will behave in expected ways."
msgstr ""

#: ../../intro/tutorial05.txt:296
# 676a1e1571da4cd880227185c369f29e
msgid "Test a view"
msgstr ""

#: ../../intro/tutorial05.txt:298
# 72090b7597b24d1ea1de4ed0cbfa681d
msgid "The polls application is fairly undiscriminating: it will publish any poll, including ones whose ``pub_date`` field lies in the future. We should improve this. Setting a ``pub_date`` in the future should mean that the Poll is published at that moment, but invisible until then."
msgstr ""

#: ../../intro/tutorial05.txt:304
# c825b50803a84cf0b29aa4d371b7fde7
msgid "A test for a view"
msgstr ""

#: ../../intro/tutorial05.txt:306
# ef41be750e8e4c4c9acd456f5c123d60
msgid "When we fixed the bug above, we wrote the test first and then the code to fix it. In fact that was a simple example of test-driven development, but it doesn't really matter in which order we do the work."
msgstr ""

#: ../../intro/tutorial05.txt:310
# 1c2055ba822c4072aa05965d6d87e6ea
msgid "In our first test, we focused closely on the internal behavior of the code. For this test, we want to check its behavior as it would be experienced by a user through a web browser."
msgstr ""

#: ../../intro/tutorial05.txt:314
# b255faeb27f84c9883b67d7819d9d2fb
msgid "Before we try to fix anything, let's have a look at the tools at our disposal."
msgstr ""

#: ../../intro/tutorial05.txt:317
# 8e49d4177419431a9e176d745659257c
msgid "The Django test client"
msgstr ""

#: ../../intro/tutorial05.txt:319
# d25d06acb7614d0ea75c5277736ef9d3
msgid "Django provides a test :class:`~django.test.client.Client` to simulate a user interacting with the code at the view level.  We can use it in ``tests.py`` or even in the :djadmin:`shell`."
msgstr ""

#: ../../intro/tutorial05.txt:323
# 72361204105142b8ba1aae9b6ae8c54c
msgid "We will start again with the :djadmin:`shell`, where we need to do a couple of things that won't be necessary in ``tests.py``. The first is to set up the test environment in the :djadmin:`shell`::"
msgstr ""

#: ../../intro/tutorial05.txt:330
# bbcac69e1b5440c9b2927d7badf4c2e1
msgid ":meth:`~django.test.utils.setup_test_environment` installs a template renderer which will allow us to examine some additional attributes on responses such as ``response.context`` that otherwise wouldn't be available. Note that this method *does not* setup a test database, so the following will be run against the existing database and the output may differ slightly depending on what polls you already created."
msgstr ""

#: ../../intro/tutorial05.txt:337
# d5650943409546fb9a5e3418b28bf30f
msgid "Next we need to import the test client class (later in ``tests.py`` we will use the :class:`django.test.TestCase` class, which comes with its own client, so this won't be required)::"
msgstr ""

#: ../../intro/tutorial05.txt:345
# f194e1df713b40199072a768df3c85ab
msgid "With that ready, we can ask the client to do some work for us::"
msgstr ""

#: ../../intro/tutorial05.txt:376
# 2f03a4920a884526bdf87648468c4c14
msgid "Improving our view"
msgstr ""

#: ../../intro/tutorial05.txt:378
# b4e2120b1f024c4c88194d90219278b6
msgid "The list of polls shows polls that aren't published yet (i.e. those that have a ``pub_date`` in the future). Let's fix that."
msgstr ""

#: ../../intro/tutorial05.txt:381
# 96623dbb1cbe43c58f3a77c22433cc90
msgid "In :doc:`Tutorial 4 </intro/tutorial04>` we introduced a class-based view, based on :class:`~django.views.generic.list.ListView`::"
msgstr ""

#: ../../intro/tutorial05.txt:392
# ffe6fc1681974560aa5c1dc6c925a555
msgid "``response.context_data['latest_poll_list']`` extracts the data this view places into the context."
msgstr ""

#: ../../intro/tutorial05.txt:395
# f00ae951be11447e9e2cabf2daf7522e
msgid "We need to amend the ``get_queryset`` method and change it so that it also checks the date by comparing it with ``timezone.now()``. First we need to add an import::"
msgstr ""

#: ../../intro/tutorial05.txt:401
# f610bf0a2c434e2d835791079b2fab80
msgid "and then we must amend the ``get_queryset`` method like so::"
msgstr ""

#: ../../intro/tutorial05.txt:412
# 754e3d6a915f440da041790bc62209c3
msgid "``Poll.objects.filter(pub_date__lte=timezone.now())`` returns a queryset containing Polls whose ``pub_date`` is less than or equal to - that is, earlier than or equal to - ``timezone.now``."
msgstr ""

#: ../../intro/tutorial05.txt:417
# f207467d52a44fd481f25f159f9ef948
msgid "Testing our new view"
msgstr ""

#: ../../intro/tutorial05.txt:419
# ee13615f9477429aa1f4192e13db5c13
msgid "Now you can satisfy yourself that this behaves as expected by firing up the runserver, loading the site in your browser, creating ``Polls`` with dates in the past and future, and checking that only those that have been published are listed.  You don't want to have to do that *every single time you make any change that might affect this* - so let's also create a test, based on our :djadmin:`shell` session above."
msgstr ""

#: ../../intro/tutorial05.txt:426
# 44e4e92e90364cdbbf8c923269febbbf
msgid "Add the following to ``polls/tests.py``::"
msgstr ""

#: ../../intro/tutorial05.txt:430
# 84e6b49140f8463280183603e8b43e08
msgid "and we'll create a factory method to create polls as well as a new test class::"
msgstr ""

#: ../../intro/tutorial05.txt:497
# 1bcec0bb36fe4e26b964c50cbc6fdbc8
msgid "Let's look at some of these more closely."
msgstr ""

#: ../../intro/tutorial05.txt:499
# 73b8c200d29343d19de5b40781c78d22
msgid "First is a poll factory method, ``create_poll``, to take some repetition out of the process of creating polls."
msgstr ""

#: ../../intro/tutorial05.txt:502
# 01448f591c3d4cd497b788434a22afdc
msgid "``test_index_view_with_no_polls`` doesn't create any polls, but checks the message: \"No polls are available.\" and verifies the ``latest_poll_list`` is empty. Note that the :class:`django.test.TestCase` class provides some additional assertion methods. In these examples, we use :meth:`~django.test.SimpleTestCase.assertContains()` and :meth:`~django.test.TransactionTestCase.assertQuerysetEqual()`."
msgstr ""

#: ../../intro/tutorial05.txt:509
# a54523e0fb3844d98b2c7bdfb9a95d1b
msgid "In ``test_index_view_with_a_past_poll``, we create a poll and verify that it appears in the list."
msgstr ""

#: ../../intro/tutorial05.txt:512
# c4328d470759433d8934e57a9437a558
msgid "In ``test_index_view_with_a_future_poll``, we create a poll with a ``pub_date`` in the future. The database is reset for each test method, so the first poll is no longer there, and so again the index shouldn't have any polls in it."
msgstr ""

#: ../../intro/tutorial05.txt:516
# 460e992b4e354a82bbfb147047f1f0fa
msgid "And so on. In effect, we are using the tests to tell a story of admin input and user experience on the site, and checking that at every state and for every new change in the state of the system, the expected results are published."
msgstr ""

#: ../../intro/tutorial05.txt:521
# e5b2c79c8a8c4501bbe9465219fdf6c6
msgid "Testing the ``DetailView``"
msgstr ""

#: ../../intro/tutorial05.txt:523
# 28dae418a02d4483830c5abf04ee567d
msgid "What we have works well; however, even though future polls don't appear in the *index*, users can still reach them if they know or guess the right URL. So we need to add a similar  constraint to ``DetailView``::"
msgstr ""

#: ../../intro/tutorial05.txt:536
# 35abe9e9837c480b957c85d666987b95
msgid "And of course, we will add some tests, to check that a ``Poll`` whose ``pub_date`` is in the past can be displayed, and that one with a ``pub_date`` in the future is not::"
msgstr ""

#: ../../intro/tutorial05.txt:560
# 7844d0b0d0b647b3bd2c65048c91a6b6
msgid "Ideas for more tests"
msgstr ""

#: ../../intro/tutorial05.txt:562
# f138370a398d490193b1c5ac45e60c48
msgid "We ought to add a similar ``get_queryset`` method to ``ResultsView`` and create a new test class for that view. It'll be very similar to what we have just created; in fact there will be a lot of repetition."
msgstr ""

#: ../../intro/tutorial05.txt:566
# c1438b9d1b7c428eb405c8037283953e
msgid "We could also improve our application in other ways, adding tests along the way. For example, it's silly that ``Polls`` can be published on the site that have no ``Choices``. So, our views could check for this, and exclude such ``Polls``. Our tests would create a ``Poll`` without ``Choices`` and then test that it's not published, as well as create a similar ``Poll`` *with* ``Choices``, and test that it *is* published."
msgstr ""

#: ../../intro/tutorial05.txt:573
# 0e3eaa8bd0684426a6597f344532e953
msgid "Perhaps logged-in admin users should be allowed to see unpublished ``Polls``, but not ordinary visitors. Again: whatever needs to be added to the software to accomplish this should be accompanied by a test, whether you write the test first and then make the code pass the test, or work out the logic in your code first and then write a test to prove it."
msgstr ""

#: ../../intro/tutorial05.txt:579
# 35a95f65b35f411492dc6ca8b824521e
msgid "At a certain point you are bound to look at your tests and wonder whether your code is suffering from test bloat, which brings us to:"
msgstr ""

#: ../../intro/tutorial05.txt:583
# 4bd3dc5465a343dfb08e16e25e4e493f
msgid "When testing, more is better"
msgstr ""

#: ../../intro/tutorial05.txt:585
# e03f3d169761464cac8b7a5f24e65d39
msgid "It might seem that our tests are growing out of control. At this rate there will soon be more code in our tests than in our application, and the repetition is unaesthetic, compared to the elegant conciseness of the rest of our code."
msgstr ""

#: ../../intro/tutorial05.txt:589
# d43ed015a2d542ce944535d78b68dede
msgid "**It doesn't matter**. Let them grow. For the most part, you can write a test once and then forget about it. It will continue performing its useful function as you continue to develop your program."
msgstr ""

#: ../../intro/tutorial05.txt:593
# 2a27fd75876e4f5cab2bd69ce0b9e923
msgid "Sometimes tests will need to be updated. Suppose that we amend our views so that only ``Polls`` with ``Choices`` are published. In that case, many of our existing tests will fail - *telling us exactly which tests need to be amended to bring them up to date*, so to that extent tests help look after themselves."
msgstr ""

#: ../../intro/tutorial05.txt:598
# a22c616d2cff4430ba81673b3d3ecb61
msgid "At worst, as you continue developing, you might find that you have some tests that are now redundant. Even that's not a problem; in testing redundancy is a *good* thing."
msgstr ""

#: ../../intro/tutorial05.txt:602
# 38bddafc84624e34ba7377e9e5c13fb1
msgid "As long as your tests are sensibly arranged, they won't become unmanageable. Good rules-of-thumb include having:"
msgstr ""

#: ../../intro/tutorial05.txt:605
# eb8ee6df6aca4993bee456dc5fcfeddf
msgid "a separate ``TestClass`` for each model or view"
msgstr ""

#: ../../intro/tutorial05.txt:606
# 2f48e1e5ebd2411f8d5c21327734fc37
msgid "a separate test method for each set of conditions you want to test"
msgstr ""

#: ../../intro/tutorial05.txt:607
# 6509bce08997489eb716bdc89465498d
msgid "test method names that describe their function"
msgstr ""

#: ../../intro/tutorial05.txt:610
# b78fa65741e24b1081ec4a37b50e0e31
msgid "Further testing"
msgstr ""

#: ../../intro/tutorial05.txt:612
# 1d4f27f925874dff897d1bcde62193b0
msgid "This tutorial only introduces some of the basics of testing. There's a great deal more you can do, and a number of very useful tools at your disposal to achieve some very clever things."
msgstr ""

#: ../../intro/tutorial05.txt:616
# a3f8d919ee954859bfff8995723a8152
msgid "For example, while our tests here have covered some of the internal logic of a model and the way our views publish information, you can use an \"in-browser\" framework such as Selenium_ to test the way your HTML actually renders in a browser. These tools allow you to check not just the behavior of your Django code, but also, for example, of your JavaScript. It's quite something to see the tests launch a browser, and start interacting with your site, as if a human being were driving it! Django includes :class:`~django.test.LiveServerTestCase` to facilitate integration with tools like Selenium."
msgstr ""

#: ../../intro/tutorial05.txt:625
# 334a577188264dd7aa12eb616eb0157e
msgid "If you have a complex application, you may want to run tests automatically with every commit for the purposes of `continuous integration`_, so that quality control is itself - at least partially - automated."
msgstr ""

#: ../../intro/tutorial05.txt:629
# fe5612fbc10c49ac863f2d4c58460ca8
msgid "A good way to spot untested parts of your application is to check code coverage. This also helps identify fragile or even dead code. If you can't test a piece of code, it usually means that code should be refactored or removed. Coverage will help to identify dead code. See :ref:`topics-testing-code-coverage` for details."
msgstr ""

#: ../../intro/tutorial05.txt:635
# 14bf8b5abd4441b7a23f663aa9a13978
msgid ":doc:`Testing Django applications </topics/testing/index>` has comprehensive information about testing."
msgstr ""

#: ../../intro/tutorial05.txt:644
# 482ff91d85cc45aebc2d37ec29f94828
msgid "For full details on testing, see :doc:`Testing in Django </topics/testing/index>`."
msgstr ""

#: ../../intro/tutorial05.txt:647
# 2d0b2eb495b34b1c9386ca892e24c4a4
msgid "When you're comfortable with testing Django views, read :doc:`part 6 of this tutorial</intro/tutorial06>` to learn about static files management."
msgstr ""

#: ../../intro/tutorial06.txt:3
# 066ba94a76af4611b1076a676a6327c1
msgid "Writing your first Django app, part 6"
msgstr ""

#: ../../intro/tutorial06.txt:5
# cde4c3de0f5647038619ccd67ab33be6
msgid "This tutorial begins where :doc:`Tutorial 5 </intro/tutorial05>` left off. We've built a tested Web-poll application, and we'll now add a stylesheet and an image."
msgstr ""

#: ../../intro/tutorial06.txt:9
# 508308c28f9c45f4bf7b4e07f5e42477
msgid "Aside from the HTML generated by the server, web applications generally need to serve additional files — such as images, JavaScript, or CSS — necessary to render the complete web page. In Django, we refer to these files as \"static files\"."
msgstr ""

#: ../../intro/tutorial06.txt:14
# 9a29e943bac04ad6971249f44fbb0063
msgid "For small projects, this isn't a big deal, because you can just keep the static files somewhere your web server can find it. However, in bigger projects -- especially those comprised of multiple apps -- dealing with the multiple sets of static files provided by each application starts to get tricky."
msgstr ""

#: ../../intro/tutorial06.txt:20
# 310f7a79bb0d40889722359de07334ae
msgid "That's what ``django.contrib.staticfiles`` is for: it collects static files from each of your applications (and any other places you specify) into a single location that can easily be served in production."
msgstr ""

#: ../../intro/tutorial06.txt:25
# 885b3f81bdaa493d8d376e8238379564
msgid "Customize your *app's* look and feel"
msgstr ""

#: ../../intro/tutorial06.txt:27
# cf4b0f77c66c434a979648a97a55e6f3
msgid "First, create a directory called ``static`` in your ``polls`` directory. Django will look for static files there, similarly to how Django finds templates inside ``polls/templates/``."
msgstr ""

#: ../../intro/tutorial06.txt:31
# 07d7f26300904ce999f24799a1ba589c
msgid "Django's :setting:`STATICFILES_FINDERS` setting contains a list of finders that know how to discover static files from various sources. One of the defaults is ``AppDirectoriesFinder`` which looks for a \"static\" subdirectory in each of the :setting:`INSTALLED_APPS`, like the one in ``polls`` we just created. The admin site uses the same directory structure for its static files."
msgstr ""

#: ../../intro/tutorial06.txt:38
# f9cf3f474d2747999964b71010a95db0
msgid "Within the ``static`` directory you have just created, create another directory called ``polls`` and within that create a file called ``style.css``. In other words, your stylesheet should be at ``polls/static/polls/style.css``. Because of how the ``AppDirectoriesFinder`` staticfile finder works, you can refer to this static file in Django simply as ``polls/style.css``, similar to how you reference the path for templates."
msgstr ""

#: ../../intro/tutorial06.txt:45
# 187c0d596a9449869b6d0ca721426dcc
msgid "Static file namespacing"
msgstr ""

#: ../../intro/tutorial06.txt:47
# c91622e27f884e25b5c97366ebce74d4
msgid "Just like templates, we *might* be able to get away with putting our static files directly in ``polls/static`` (rather than creating another ``polls`` subdirectory), but it would actually be a bad idea. Django will choose the first static file it finds whose name matches, and if you had a static file with the same name in a *different* application, Django would be unable to distinguish between them. We need to be able to point Django at the right one, and the easiest way to ensure this is by *namespacing* them. That is, by putting those static files inside *another* directory named for the application itself."
msgstr ""

#: ../../intro/tutorial06.txt:57
# 9f481080b8f144bb8e9f2d6e78db1469
msgid "Put the following code in that stylesheet (``polls/static/polls/style.css``):"
msgstr ""

#: ../../intro/tutorial06.txt:65
# 4243e7cfd65d4d60b4251e599fb6aac3
msgid "Next, add the following at the top of ``polls/templates/polls/index.html``:"
msgstr ""

#: ../../intro/tutorial06.txt:73
# 2ad1904da78d4c799c5eeb4f3c49e18d
msgid "``{% load staticfiles %}`` loads the :ttag:`{% static %} <staticfiles-static>` template tag from the ``staticfiles`` template library. The ``{% static %}`` template tag generates the absolute URL of the static file."
msgstr ""

#: ../../intro/tutorial06.txt:77
# fb3b3ec7291f4fde98191b6033e48422
msgid "That's all you need to do for development. Reload ``http://localhost:8000/polls/`` and you should see that the poll links are green (Django style!) which means that your stylesheet was properly loaded."
msgstr ""

#: ../../intro/tutorial06.txt:82
# 99ad3c143fbc46d9b2b25bd756ac47cc
msgid "Adding a background-image"
msgstr ""

#: ../../intro/tutorial06.txt:84
# a60e08e8304c46dc8a67ab9f1ba505ac
msgid "Next, we'll create a subdirectory for images. Create an ``images`` subdirectory in the ``polls/static/polls/`` directory. Inside this directory, put an image called ``background.gif``. In other words, put your image in ``polls/static/polls/images/background.gif``."
msgstr ""

#: ../../intro/tutorial06.txt:89
# fe508b39d33b42ceb8d2de6f7dd017db
msgid "Then, add to your stylesheet (``polls/static/polls/style.css``):"
msgstr ""

#: ../../intro/tutorial06.txt:97
# b234f2ac5b53491ea74b29b883b146b6
msgid "Reload ``http://localhost:8000/polls/`` and you should see the background loaded in the bottom right of the screen."
msgstr ""

#: ../../intro/tutorial06.txt:102
# 56765405c1ea4b03b1330d28478a3d09
msgid "Of course the ``{% static %}`` template tag is not available for use in static files like your stylesheet which aren't generated by Django. You should always use **relative paths** to link your static files between each other, because then you can change :setting:`STATIC_URL` (used by the :ttag:`static` template tag to generate its URLs) without having to modify a bunch of paths in your static files as well."
msgstr ""

#: ../../intro/tutorial06.txt:109
# 35b34b127296473093d5ffe9a82e7c11
msgid "These are the **basics**. For more details on settings and other bits included with the framework see :doc:`the static files howto </howto/static-files/index>` and :doc:`the staticfiles reference </ref/contrib/staticfiles>`. :doc:`Deploying static files </howto/static-files/deployment>` discusses how to use static files on a real server."
msgstr ""

#: ../../intro/tutorial06.txt:119
# aff22a2607cb4063a31ce953c9e5113a
msgid "The beginner tutorial ends here for the time being. In the meantime, you might want to check out some pointers on :doc:`where to go from here </intro/whatsnext>`."
msgstr ""

#: ../../intro/tutorial06.txt:123
# 008a32a010da4bb8838dc0acbb10aa41
msgid "If you are familiar with Python packaging and interested in learning how to turn polls into a \"reusable app\", check out :doc:`Advanced tutorial: How to write reusable apps</intro/reusable-apps>`."
msgstr ""

#: ../../intro/whatsnext.txt:3
# d8884a36f9af4c7791bf3b0bb764e212
msgid "What to read next"
msgstr ""

#: ../../intro/whatsnext.txt:5
# 2bbbaeb3c32b4791aec569c568cf436d
msgid "So you've read all the :doc:`introductory material </intro/index>` and have decided you'd like to keep using Django. We've only just scratched the surface with this intro (in fact, if you've read every single word, you've read about 5% of the overall documentation)."
msgstr ""

#: ../../intro/whatsnext.txt:10
# b3f8ef52c081448ba9e138e0102d9dee
msgid "So what's next?"
msgstr ""

#: ../../intro/whatsnext.txt:12
# aed687243349499bb3e8167eb7fb95f2
msgid "Well, we've always been big fans of learning by doing. At this point you should know enough to start a project of your own and start fooling around. As you need to learn new tricks, come back to the documentation."
msgstr ""

#: ../../intro/whatsnext.txt:16
# 04586531a7684ca19a54baeffc8d7662
msgid "We've put a lot of effort into making Django's documentation useful, easy to read and as complete as possible. The rest of this document explains more about how the documentation works so that you can get the most out of it."
msgstr ""

#: ../../intro/whatsnext.txt:20
# e2cd9981a09948c494d41c7edea72093
msgid "(Yes, this is documentation about documentation. Rest assured we have no plans to write a document about how to read the document about documentation.)"
msgstr ""

#: ../../intro/whatsnext.txt:24
# 9d42d620ce084c60b3fe6c17706cea0b
msgid "Finding documentation"
msgstr ""

#: ../../intro/whatsnext.txt:26
# 4637451faf634913bf1cb84d79af2d9b
msgid "Django's got a *lot* of documentation -- almost 450,000 words and counting -- so finding what you need can sometimes be tricky. A few good places to start are the :ref:`search` and the :ref:`genindex`."
msgstr ""

#: ../../intro/whatsnext.txt:30
# 4e29ed1e7296458b93773632c9a6a875
msgid "Or you can just browse around!"
msgstr ""

#: ../../intro/whatsnext.txt:33
# dc58614fd2fc4a82821532a8c449cb99
msgid "How the documentation is organized"
msgstr ""

#: ../../intro/whatsnext.txt:35
# 309eb0bc11f84f11b93aa8200d4a910e
msgid "Django's main documentation is broken up into \"chunks\" designed to fill different needs:"
msgstr ""

#: ../../intro/whatsnext.txt:38
# 832a040418ed4f6a9e1f85c15915c1d4
msgid "The :doc:`introductory material </intro/index>` is designed for people new to Django -- or to Web development in general. It doesn't cover anything in depth, but instead gives a high-level overview of how developing in Django \"feels\"."
msgstr ""

#: ../../intro/whatsnext.txt:43
# f72bf6e953984592ae1ea4a2afea34da
msgid "The :doc:`topic guides </topics/index>`, on the other hand, dive deep into individual parts of Django. There are complete guides to Django's :doc:`model system </topics/db/index>`, :doc:`template engine </topics/templates>`, :doc:`forms framework </topics/forms/index>`, and much more."
msgstr ""

#: ../../intro/whatsnext.txt:49
# a66dce9edf7049e4bcb222c848902a12
msgid "This is probably where you'll want to spend most of your time; if you work your way through these guides you should come out knowing pretty much everything there is to know about Django."
msgstr ""

#: ../../intro/whatsnext.txt:53
# 674ac6dae41d4c7a80626f0a113eb122
msgid "Web development is often broad, not deep -- problems span many domains. We've written a set of :doc:`how-to guides </howto/index>` that answer common \"How do I ...?\" questions. Here you'll find information about :doc:`generating PDFs with Django </howto/outputting-pdf>`, :doc:`writing custom template tags </howto/custom-template-tags>`, and more."
msgstr ""

#: ../../intro/whatsnext.txt:59
# 162aae02034a4419a71fb38845c04db3
msgid "Answers to really common questions can also be found in the :doc:`FAQ </faq/index>`."
msgstr ""

#: ../../intro/whatsnext.txt:62
# 2cceaaf44b634457b948d3d71a6a46a9
msgid "The guides and how-to's don't cover every single class, function, and method available in Django -- that would be overwhelming when you're trying to learn. Instead, details about individual classes, functions, methods, and modules are kept in the :doc:`reference </ref/index>`. This is where you'll turn to find the details of a particular function or whathaveyou."
msgstr ""

#: ../../intro/whatsnext.txt:69
# aa59ef25d28f4c19aa782bba6367cb0d
msgid "If you are interested in deploying a project for public use, our docs have :doc:`several guides</howto/deployment/index>` for various deployment setups as well as a :doc:`deployment checklist</howto/deployment/checklist>` for some things you'll need to think about."
msgstr ""

#: ../../intro/whatsnext.txt:74
# 4ececbed55d646209fa1d3fd49112684
msgid "Finally, there's some \"specialized\" documentation not usually relevant to most developers. This includes the :doc:`release notes </releases/index>` and :doc:`internals documentation </internals/index>` for those who want to add code to Django itself, and a :doc:`few other things that simply don't fit elsewhere </misc/index>`."
msgstr ""

#: ../../intro/whatsnext.txt:82
# 3225a6015d9f4b22826c5cec33820ada
msgid "How documentation is updated"
msgstr ""

#: ../../intro/whatsnext.txt:84
# f1974ab30119474b8872ae154c23c393
msgid "Just as the Django code base is developed and improved on a daily basis, our documentation is consistently improving. We improve documentation for several reasons:"
msgstr ""

#: ../../intro/whatsnext.txt:88
# e3682848674c4cd29b154275f570d942
msgid "To make content fixes, such as grammar/typo corrections."
msgstr ""

#: ../../intro/whatsnext.txt:90
# 4480370242094f2e8a9a5e8fa4cb2afd
msgid "To add information and/or examples to existing sections that need to be expanded."
msgstr ""

#: ../../intro/whatsnext.txt:93
# 548f48630eda4828be6fbd16c08ff746
msgid "To document Django features that aren't yet documented. (The list of such features is shrinking but exists nonetheless.)"
msgstr ""

#: ../../intro/whatsnext.txt:96
# 28cbb91478cc4a878ed21ef486b54129
msgid "To add documentation for new features as new features get added, or as Django APIs or behaviors change."
msgstr ""

#: ../../intro/whatsnext.txt:99
# b6823d149c754275927ce73d236057cc
msgid "Django's documentation is kept in the same source control system as its code. It lives in the `docs`_ directory of our Git repository. Each document online is a separate text file in the repository."
msgstr ""

#: ../../intro/whatsnext.txt:106
# 380a495817424c7d91d1d24e8a0f8ef6
msgid "Where to get it"
msgstr ""

#: ../../intro/whatsnext.txt:108
# 1e1ef4e677ae4568bba07a037ef7268e
msgid "You can read Django documentation in several ways. They are, in order of preference:"
msgstr ""

#: ../../intro/whatsnext.txt:112
# d37e27a31d2c44b68c120a8206b38ad5
msgid "On the Web"
msgstr ""

#: ../../intro/whatsnext.txt:114
# 5235b4d50c954cbc84091beb057ce2c1
msgid "The most recent version of the Django documentation lives at https://docs.djangoproject.com/en/dev/. These HTML pages are generated automatically from the text files in source control. That means they reflect the \"latest and greatest\" in Django -- they include the very latest corrections and additions, and they discuss the latest Django features, which may only be available to users of the Django development version. (See \"Differences between versions\" below.)"
msgstr ""

#: ../../intro/whatsnext.txt:122
# 342cbd366c0341a1b846cc0a0a5553df
msgid "We encourage you to help improve the docs by submitting changes, corrections and suggestions in the `ticket system`_. The Django developers actively monitor the ticket system and use your feedback to improve the documentation for everybody."
msgstr ""

#: ../../intro/whatsnext.txt:126
# 37c16c2909e540389f366bd7242102e3
msgid "Note, however, that tickets should explicitly relate to the documentation, rather than asking broad tech-support questions. If you need help with your particular Django setup, try the `django-users mailing list`_ or the `#django IRC channel`_ instead."
msgstr ""

#: ../../intro/whatsnext.txt:136
# a7583060623445adbc5600a7bef07237
msgid "In plain text"
msgstr ""

#: ../../intro/whatsnext.txt:138
# 799284fac8544dfb8aa5f2eb0bf5ea65
msgid "For offline reading, or just for convenience, you can read the Django documentation in plain text."
msgstr ""

#: ../../intro/whatsnext.txt:141
# ca22a61e28414fbb9ff8ea2703047384
msgid "If you're using an official release of Django, note that the zipped package (tarball) of the code includes a ``docs/`` directory, which contains all the documentation for that release."
msgstr ""

#: ../../intro/whatsnext.txt:145
# 5829581102194a8a8543d943927d3e40
msgid "If you're using the development version of Django (aka \"trunk\"), note that the ``docs/`` directory contains all of the documentation. You can update your Git checkout to get the latest changes."
msgstr ""

#: ../../intro/whatsnext.txt:149
# 97f7ebfab4bf418887e1924c7bad01b9
msgid "One low-tech way of taking advantage of the text documentation is by using the Unix ``grep`` utility to search for a phrase in all of the documentation. For example, this will show you each mention of the phrase \"max_length\" in any Django document:"
msgstr ""

#: ../../intro/whatsnext.txt:159
# cc99e7997dfa431fb2a3ef4ae67a1ffb
msgid "As HTML, locally"
msgstr ""

#: ../../intro/whatsnext.txt:161
# 6b2fb949f4a048f49615b0643caacb53
msgid "You can get a local copy of the HTML documentation following a few easy steps:"
msgstr ""

#: ../../intro/whatsnext.txt:163
# 8490edd023b34245a8aa39032196db42
msgid "Django's documentation uses a system called Sphinx__ to convert from plain text to HTML. You'll need to install Sphinx by either downloading and installing the package from the Sphinx Web site, or with ``pip``:"
msgstr ""

#: ../../intro/whatsnext.txt:171
# 18dc796698b74fca8512a0c4b0b36133
msgid "Then, just use the included ``Makefile`` to turn the documentation into HTML:"
msgstr ""

#: ../../intro/whatsnext.txt:179
# ad4db385a0044524a90441253e7983b1
msgid "You'll need `GNU Make`__ installed for this."
msgstr ""

#: ../../intro/whatsnext.txt:181
# deb37e196b5244589de0736552d050ef
msgid "If you're on Windows you can alternatively use the included batch file:"
msgstr ""

#: ../../intro/whatsnext.txt:188
# db8e5f17638641b480975687af9a4ab5
msgid "The HTML documentation will be placed in ``docs/_build/html``."
msgstr ""

#: ../../intro/whatsnext.txt:192
# 4986188fb33949f79224b03e21f80b52
msgid "Generation of the Django documentation will work with Sphinx version 0.6 or newer, but we recommend going straight to Sphinx 1.0.2 or newer."
msgstr ""

#: ../../intro/whatsnext.txt:201
# f5aae40f9f4c4a21bbdc9181eacdd1cb
msgid "Differences between versions"
msgstr ""

#: ../../intro/whatsnext.txt:203
# cefb350d6c7549d7a42c5c2f7c165dd5
msgid "As previously mentioned, the text documentation in our Git repository contains the \"latest and greatest\" changes and additions. These changes often include documentation of new features added in the Django development version -- the Git (\"trunk\") version of Django. For that reason, it's worth pointing out our policy on keeping straight the documentation for various versions of the framework."
msgstr ""

#: ../../intro/whatsnext.txt:210
# ac3bf76d14ae438f993a49ee715e8d5a
msgid "We follow this policy:"
msgstr ""

#: ../../intro/whatsnext.txt:212
# c0c4dfbeef554a4d8a60254d13776735
msgid "The primary documentation on djangoproject.com is an HTML version of the latest docs in Git. These docs always correspond to the latest official Django release, plus whatever features we've added/changed in the framework *since* the latest release."
msgstr ""

#: ../../intro/whatsnext.txt:217
# 4bd35025f84748f79da130e3f71b422c
msgid "As we add features to Django's development version, we try to update the documentation in the same Git commit transaction."
msgstr ""

#: ../../intro/whatsnext.txt:220
# 395abbb3688b4ba5bcbaa014236e5521
msgid "To distinguish feature changes/additions in the docs, we use the phrase: \"New in version X.Y\", being X.Y the next release version (hence, the one being developed)."
msgstr ""

#: ../../intro/whatsnext.txt:224
# a96dde0702cc498d861008f546bfe4e2
msgid "Documentation fixes and improvements may be backported to the last release branch, at the discretion of the committer, however, once a version of Django is :ref:`no longer supported<backwards-compatibility-policy>`, that version of the docs won't get any further updates."
msgstr ""

#: ../../intro/whatsnext.txt:229
# 64e1b2c112ec45298e0ea3f63521f486
msgid "The `main documentation Web page`_ includes links to documentation for all previous versions. Be sure you are using the version of the docs corresponding to the version of Django you are using!"
msgstr ""

