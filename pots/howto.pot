# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Django 1.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-02 15:07+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../howto/auth-remote-user.txt:3
# e6b5ac0fcd5c46c1add85ebda47b3b90
msgid "Authentication using ``REMOTE_USER``"
msgstr ""

#: ../../howto/auth-remote-user.txt:7
# a3ed70c3406a4dbb9c767c19dbd4f04a
msgid "This document describes how to make use of external authentication sources (where the Web server sets the ``REMOTE_USER`` environment variable) in your Django applications.  This type of authentication solution is typically seen on intranet sites, with single sign-on solutions such as IIS and Integrated Windows Authentication or Apache and `mod_authnz_ldap`_, `CAS`_, `Cosign`_, `WebAuth`_, `mod_auth_sspi`_, etc."
msgstr ""

#: ../../howto/auth-remote-user.txt:20
# 23dbcf514b0d436298582ef4605fc36b
msgid "When the Web server takes care of authentication it typically sets the ``REMOTE_USER`` environment variable for use in the underlying application.  In Django, ``REMOTE_USER`` is made available in the :attr:`request.META <django.http.HttpRequest.META>` attribute.  Django can be configured to make use of the ``REMOTE_USER`` value using the ``RemoteUserMiddleware`` and ``RemoteUserBackend`` classes found in :mod:`django.contrib.auth`."
msgstr ""

#: ../../howto/auth-remote-user.txt:28
# bc0da4da71f2421a9f7916668466ff0b
msgid "Configuration"
msgstr ""

#: ../../howto/auth-remote-user.txt:32
# 720d25d45138496792f0de829ab114e0
msgid "First, you must add the :class:`django.contrib.auth.middleware.RemoteUserMiddleware` to the :setting:`MIDDLEWARE_CLASSES` setting **after** the :class:`django.contrib.auth.middleware.AuthenticationMiddleware`::"
msgstr ""

#: ../../howto/auth-remote-user.txt:44
# fa9cedc75a3e4403a376ee57b81c0873
msgid "Next, you must replace the :class:`~django.contrib.auth.backends.ModelBackend` with ``RemoteUserBackend`` in the :setting:`AUTHENTICATION_BACKENDS` setting::"
msgstr ""

#: ../../howto/auth-remote-user.txt:51
# d8c618801f9e4f3d8ecc51aff227b55c
msgid "With this setup, ``RemoteUserMiddleware`` will detect the username in ``request.META['REMOTE_USER']`` and will authenticate and auto-login that user using the ``RemoteUserBackend``."
msgstr ""

#: ../../howto/auth-remote-user.txt:56
# 04286915eecd49799f789e85cb8e8b4e
msgid "Since the ``RemoteUserBackend`` inherits from ``ModelBackend``, you will still have all of the same permissions checking that is implemented in ``ModelBackend``."
msgstr ""

#: ../../howto/auth-remote-user.txt:60
# 5e8943474a8a4a239403d38668c1a472
msgid "If your authentication mechanism uses a custom HTTP header and not ``REMOTE_USER``, you can subclass ``RemoteUserMiddleware`` and set the ``header`` attribute to the desired ``request.META`` key.  For example::"
msgstr ""

#: ../../howto/auth-remote-user.txt:71
# 83d6a2076dbe4e3e95a3ad7aaa4d91d3
msgid "``RemoteUserBackend``"
msgstr ""

#: ../../howto/auth-remote-user.txt:75
# 54d67e928ce44289aaf56c0e886b1f47
msgid "If you need more control, you can create your own authentication backend that inherits from ``RemoteUserBackend`` and overrides certain parts:"
msgstr ""

#: ../../howto/auth-remote-user.txt:79
#: ../../howto/custom-management-commands.txt:193
# 99e939eaf08c489cba1d13bf552e0754
# f8611054cea24690a88aa4bd65d5f250
msgid "Attributes"
msgstr ""

#: ../../howto/auth-remote-user.txt:83
# a0cce7679b0644ad9e50c8c5294d36f5
msgid "``True`` or ``False``.  Determines whether or not a :class:`~django.contrib.auth.models.User` object is created if not already in the database.  Defaults to ``True``."
msgstr ""

#: ../../howto/auth-remote-user.txt:88
#: ../../howto/custom-management-commands.txt:262
# 44295a05443e4ab88c33c5edb252caeb
# 7b86a5b2ca834f7dbb77717cad20e967
msgid "Methods"
msgstr ""

#: ../../howto/auth-remote-user.txt:92
# 1fc2c52942234790b744cf762ca8baf2
msgid "The username passed as ``remote_user`` is considered trusted. This method simply returns the ``User`` object with the given username, creating a new ``User`` object if :attr:`~RemoteUserBackend.create_unknown_user` is ``True``."
msgstr ""

#: ../../howto/auth-remote-user.txt:97
# 2692ac3bb66b44e4bb0e52ab1d572a3b
msgid "Returns ``None`` if :attr:`~RemoteUserBackend.create_unknown_user` is ``False`` and a ``User`` object with the given username is not found in the database."
msgstr ""

#: ../../howto/auth-remote-user.txt:103
# 17f2248bbc054e3eb3f5a0d34e68383d
msgid "Performs any cleaning on the ``username`` (e.g. stripping LDAP DN information) prior to using it to get or create a :class:`~django.contrib.auth.models.User` object.  Returns the cleaned username."
msgstr ""

#: ../../howto/auth-remote-user.txt:110
# 0e50a6d5b29842cd9e39191a10be58e2
msgid "Configures a newly created user.  This method is called immediately after a new user is created, and can be used to perform custom setup actions, such as setting the user's groups based on attributes in an LDAP directory. Returns the user object."
msgstr ""

#: ../../howto/custom-file-storage.txt:2
# b40c3afd4a4a4d9e98ef183fbb1c314d
msgid "Writing a custom storage system"
msgstr ""

#: ../../howto/custom-file-storage.txt:6
# 2444a35914a341c9918a3b5f68b82c21
msgid "If you need to provide custom file storage -- a common example is storing files on some remote system -- you can do so by defining a custom storage class. You'll need to follow these steps:"
msgstr ""

#: ../../howto/custom-file-storage.txt:10
# de531222557e40f7813222847abf4d7f
msgid "Your custom storage system must be a subclass of ``django.core.files.storage.Storage``::"
msgstr ""

#: ../../howto/custom-file-storage.txt:18
# ae4e078ca7c642928c661a6a69fb0af4
msgid "Django must be able to instantiate your storage system without any arguments. This means that any settings should be taken from ``django.conf.settings``::"
msgstr ""

#: ../../howto/custom-file-storage.txt:30
# 0972da1bc76a4f0c8c2fc86d436cff68
msgid "Your storage class must implement the :meth:`_open()` and :meth:`_save()` methods, along with any other methods appropriate to your storage class. See below for more on these methods."
msgstr ""

#: ../../howto/custom-file-storage.txt:34
# 13bdc488d16a4893a1dbe15c278f9b63
msgid "In addition, if your class provides local file storage, it must override the ``path()`` method."
msgstr ""

#: ../../howto/custom-file-storage.txt:37
# acf3d5d4f51f418dacfd40a372307ee0
msgid "Your custom storage system may override any of the storage methods explained in :doc:`/ref/files/storage`, but you **must** implement the following methods:"
msgstr ""

#: ../../howto/custom-file-storage.txt:40
# ea12ca56b36f4d87a9b2b892a39ecb8a
msgid ":meth:`Storage.delete`"
msgstr ""

#: ../../howto/custom-file-storage.txt:41
# 40a0d8cf78d94b0b93d5a7dda655cab4
msgid ":meth:`Storage.exists`"
msgstr ""

#: ../../howto/custom-file-storage.txt:42
# 39088023a1d44363bef87f199d6b1204
msgid ":meth:`Storage.listdir`"
msgstr ""

#: ../../howto/custom-file-storage.txt:43
# 8c4bf92705e34dafb9556c237d464d55
msgid ":meth:`Storage.size`"
msgstr ""

#: ../../howto/custom-file-storage.txt:44
# 608de459c68943ecaed4f57a304e9930
msgid ":meth:`Storage.url`"
msgstr ""

#: ../../howto/custom-file-storage.txt:46
# bae26f956c9a48e0bdcd00470fa337dd
msgid "You'll also usually want to use hooks specifically designed for custom storage objects. These are:"
msgstr ""

#: ../../howto/custom-file-storage.txt:51
# fcd0c7f94b2a4453a1617235035c353a
msgid "**Required**."
msgstr ""

#: ../../howto/custom-file-storage.txt:53
# 8a24abb039474205a5a6289f87d7fc86
msgid "Called by ``Storage.open()``, this is the actual mechanism the storage class uses to open the file. This must return a ``File`` object, though in most cases, you'll want to return some subclass here that implements logic specific to the backend storage system."
msgstr ""

#: ../../howto/custom-file-storage.txt:60
# 92bc10048154495c9cda4fd7f943fab8
msgid "Called by ``Storage.save()``. The ``name`` will already have gone through ``get_valid_name()`` and ``get_available_name()``, and the ``content`` will be a ``File`` object itself."
msgstr ""

#: ../../howto/custom-file-storage.txt:64
# 4213438cb09449b886e25978a3468fe1
msgid "Should return the actual name of name of the file saved (usually the ``name`` passed in, but if the storage needs to change the file name return the new name instead)."
msgstr ""

#: ../../howto/custom-file-storage.txt:71
# 4172351731534235aa1d7c9835dc6171
msgid "Returns a filename suitable for use with the underlying storage system. The ``name`` argument passed to this method is the original filename sent to the server, after having any path information removed. Override this to customize how non-standard characters are converted to safe filenames."
msgstr ""

#: ../../howto/custom-file-storage.txt:76
# 13c9c850c9a9421ba2e612698b51b97a
msgid "The code provided on ``Storage`` retains only alpha-numeric characters, periods and underscores from the original filename, removing everything else."
msgstr ""

#: ../../howto/custom-file-storage.txt:81
# def9ba0ca8c14ef09d0e243350784936
msgid "Returns a filename that is available in the storage mechanism, possibly taking the provided filename into account. The ``name`` argument passed to this method will have already cleaned to a filename valid for the storage system, according to the ``get_valid_name()`` method described above."
msgstr ""

#: ../../howto/custom-file-storage.txt:86
# 7e461a506ac3481aadf78e2021ca1ccd
msgid "The code provided on ``Storage`` simply appends ``\"_1\"``, ``\"_2\"``, etc. to the filename until it finds one that's available in the destination directory."
msgstr ""

#: ../../howto/custom-management-commands.txt:3
# eeeb3bfac80a40d28197cc1af877790a
msgid "Writing custom django-admin commands"
msgstr ""

#: ../../howto/custom-management-commands.txt:7
# 9998b6bdeb5e4d10934de8112d8f9f65
msgid "Applications can register their own actions with ``manage.py``. For example, you might want to add a ``manage.py`` action for a Django app that you're distributing. In this document, we will be building a custom ``closepoll`` command for the ``polls`` application from the :doc:`tutorial</intro/tutorial01>`."
msgstr ""

#: ../../howto/custom-management-commands.txt:13
# e0adbbc561a849b986d408eddb009b80
msgid "To do this, just add a ``management/commands`` directory to the application. Django will register a ``manage.py`` command for each Python module in that directory whose name doesn't begin with an underscore. For example::"
msgstr ""

#: ../../howto/custom-management-commands.txt:29
# 3dcd2a2158c048a295c5f7f80f0d72a7
msgid "In this example, the ``closepoll`` command will be made available to any project that includes the ``polls`` application in :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../howto/custom-management-commands.txt:32
# bb9a12ee2c9c4b66a69b0b3a9542754d
msgid "The ``_private.py`` module will not be available as a management command."
msgstr ""

#: ../../howto/custom-management-commands.txt:34
# 7c7921e27d774c60b82cff453ae18cd8
msgid "The ``closepoll.py`` module has only one requirement -- it must define a class ``Command`` that extends :class:`BaseCommand` or one of its :ref:`subclasses<ref-basecommand-subclasses>`."
msgstr ""

#: ../../howto/custom-management-commands.txt:38
# 4c62cca5a49444ceb28acdcd2b1b589d
msgid "Standalone scripts"
msgstr ""

#: ../../howto/custom-management-commands.txt:40
# 885bea62ee60425488fcefb0dfacac60
msgid "Custom management commands are especially useful for running standalone scripts or for scripts that are periodically executed from the UNIX crontab or from Windows scheduled tasks control panel."
msgstr ""

#: ../../howto/custom-management-commands.txt:44
# 2bb98bde09334d8f9fd3672f823970c4
msgid "To implement the command, edit ``polls/management/commands/closepoll.py`` to look like this:"
msgstr ""

#: ../../howto/custom-management-commands.txt:71
# 146effd76c784b25b76d8bb2edab3712
msgid "When you are using management commands and wish to provide console output, you should write to ``self.stdout`` and ``self.stderr``, instead of printing to ``stdout`` and ``stderr`` directly. By using these proxies, it becomes much easier to test your custom command. Note also that you don't need to end messages with a newline character, it will be added automatically, unless you specify the ``ending`` parameter::"
msgstr ""

#: ../../howto/custom-management-commands.txt:81
# 20af3da775f3485f966966e8dbdfa99c
msgid "The new custom command can be called using ``python manage.py closepoll <poll_id>``."
msgstr ""

#: ../../howto/custom-management-commands.txt:84
# 5f134fbacfc14570b289f6fbbd6da017
msgid "The ``handle()`` method takes zero or more ``poll_ids`` and sets ``poll.opened`` to ``False`` for each one. If the user referenced any nonexistent polls, a :class:`CommandError` is raised. The ``poll.opened`` attribute does not exist in the :doc:`tutorial</intro/tutorial01>` and was added to ``polls.models.Poll`` for this example."
msgstr ""

#: ../../howto/custom-management-commands.txt:90
# ac6887269aab419e91f22771dcef9a7d
msgid "The same ``closepoll`` could be easily modified to delete a given poll instead of closing it by accepting additional command line options. These custom options must be added to :attr:`~BaseCommand.option_list` like this:"
msgstr ""

#: ../../howto/custom-management-commands.txt:113
# 046db66bac3741f4b045e07024c1034c
msgid "The option (``delete`` in our example) is available in the options dict parameter of the handle method. See the :py:mod:`optparse` Python documentation for more about ``make_option`` usage."
msgstr ""

#: ../../howto/custom-management-commands.txt:117
# d1ac7514f3ed41eab512b4bfd35ebc0b
msgid "In addition to being able to add custom command line options, all :doc:`management commands</ref/django-admin>` can accept some default options such as :djadminopt:`--verbosity` and :djadminopt:`--traceback`."
msgstr ""

#: ../../howto/custom-management-commands.txt:124
# 3fe628d1c7da45e78c044a9150c8c34e
msgid "Management commands and locales"
msgstr ""

#: ../../howto/custom-management-commands.txt:126
# 0c7c38f462af43e99ac8c8b5e476911c
msgid "By default, the :meth:`BaseCommand.execute` method sets the hardcoded 'en-us' locale because some commands shipped with Django perform several tasks (for example, user-facing content rendering and database population) that require a system-neutral string language (for which we use 'en-us')."
msgstr ""

#: ../../howto/custom-management-commands.txt:131
# 9898d122f8c34657aff895678a56004f
msgid "If, for some reason, your custom management command needs to use a fixed locale different from 'en-us', you should manually activate and deactivate it in your :meth:`~BaseCommand.handle` or :meth:`~NoArgsCommand.handle_noargs` method using the functions provided by the I18N support code:"
msgstr ""

#: ../../howto/custom-management-commands.txt:160
# 025ed210af3e4667bdd2f33a56215d58
msgid "Another need might be that your command simply should use the locale set in settings and Django should be kept from forcing it to 'en-us'. You can achieve it by using the :data:`BaseCommand.leave_locale_alone` option."
msgstr ""

#: ../../howto/custom-management-commands.txt:164
# a7cc6616cbee4d78bb902dea6fc61873
msgid "When working on the scenarios described above though, take into account that system management commands typically have to be very careful about running in non-uniform locales, so you might need to:"
msgstr ""

#: ../../howto/custom-management-commands.txt:168
# 3f7e22229e5949a2bf8d3865ea028f81
msgid "Make sure the :setting:`USE_I18N` setting is always ``True`` when running the command (this is a good example of the potential problems stemming from a dynamic runtime environment that Django commands avoid offhand by always using a fixed locale)."
msgstr ""

#: ../../howto/custom-management-commands.txt:173
# bf85860baf1b43b8a6cd20497c2d2044
msgid "Review the code of your command and the code it calls for behavioral differences when locales are changed and evaluate its impact on predictable behavior of your command."
msgstr ""

#: ../../howto/custom-management-commands.txt:178
# 91e86be900dc4efe809ac597339e5a5c
msgid "Command objects"
msgstr ""

#: ../../howto/custom-management-commands.txt:182
# 8d4a297ce5634e768cd41a367c2a9944
msgid "The base class from which all management commands ultimately derive."
msgstr ""

#: ../../howto/custom-management-commands.txt:184
# 8eb430c1724743f2af3820879cc680a7
msgid "Use this class if you want access to all of the mechanisms which parse the command-line arguments and work out what code to call in response; if you don't need to change any of that behavior, consider using one of its :ref:`subclasses<ref-basecommand-subclasses>`."
msgstr ""

#: ../../howto/custom-management-commands.txt:189
# 977116a691384e0691b6bf35f0ba5503
msgid "Subclassing the :class:`BaseCommand` class requires that you implement the :meth:`~BaseCommand.handle` method."
msgstr ""

#: ../../howto/custom-management-commands.txt:195
# 82e3c819a9174d0483870fdb3d8fb4f2
msgid "All attributes can be set in your derived class and can be used in :class:`BaseCommand`'s :ref:`subclasses<ref-basecommand-subclasses>`."
msgstr ""

#: ../../howto/custom-management-commands.txt:200
# ef7faae288be40e08fd7c66db712bdcf
msgid "A string listing the arguments accepted by the command, suitable for use in help messages; e.g., a command which takes a list of application names might set this to '<appname appname ...>'."
msgstr ""

#: ../../howto/custom-management-commands.txt:207
# 8a3c305f574245878c72a153ae91eace
msgid "A boolean indicating whether the command needs to be able to import Django settings; if ``True``, ``execute()`` will verify that this is possible before proceeding. Default value is ``True``."
msgstr ""

#: ../../howto/custom-management-commands.txt:214
# 891b0a11f9344a05a6c23991809b9ad7
msgid "A short description of the command, which will be printed in the help message when the user runs the command ``python manage.py help <command>``."
msgstr ""

#: ../../howto/custom-management-commands.txt:220
# bb2a9a3f0e11462d8efc9fb2f073a0cc
msgid "This is the list of ``optparse`` options which will be fed into the command's ``OptionParser`` for parsing arguments."
msgstr ""

#: ../../howto/custom-management-commands.txt:225
# 9040a243ee4d41f0aa7a453c0f6f70ae
msgid "A boolean indicating whether the command outputs SQL statements; if ``True``, the output will automatically be wrapped with ``BEGIN;`` and ``COMMIT;``. Default value is ``False``."
msgstr ""

#: ../../howto/custom-management-commands.txt:232
# eba99c5ecbfb456984361b229ef81202
msgid "A boolean; if ``True``, validation of installed models will be performed prior to executing the command. Default value is ``True``. To validate an individual application's models rather than all applications' models, call :meth:`~BaseCommand.validate` from :meth:`~BaseCommand.handle`."
msgstr ""

#: ../../howto/custom-management-commands.txt:240
# a65a35cf18c44f87a5484269fd5cd9d2
msgid "A boolean indicating whether the locale set in settings should be preserved during the execution of the command instead of being forcibly set to 'en-us'."
msgstr ""

#: ../../howto/custom-management-commands.txt:243
# 2e20356c7d26461fa827ceaeb40fcf91
msgid "Default value is ``False``."
msgstr ""

#: ../../howto/custom-management-commands.txt:245
# e2836fd5afbf4b7692b75af5f37bbd44
msgid "Make sure you know what you are doing if you decide to change the value of this option in your custom command if it creates database content that is locale-sensitive and such content shouldn't contain any translations (like it happens e.g. with django.contrib.auth permissions) as making the locale differ from the de facto default 'en-us' might cause unintended effects. See the `Management commands and locales`_ section above for further details."
msgstr ""

#: ../../howto/custom-management-commands.txt:252
# ac26b1a74b814dc58460a7517c4e8dd7
msgid "This option can't be ``False`` when the :data:`~BaseCommand.can_import_settings` option is set to ``False`` too because attempting to set the locale needs access to settings. This condition will generate a :class:`CommandError`."
msgstr ""

#: ../../howto/custom-management-commands.txt:259
# c184a56ddf9141a1a864fb56a71fbd68
msgid "The ``leave_locale_alone`` option was added in Django 1.6."
msgstr ""

#: ../../howto/custom-management-commands.txt:264
# 009ab493ca2d4d96a74a3cae9a553155
msgid ":class:`BaseCommand` has a few methods that can be overridden but only the :meth:`~BaseCommand.handle` method must be implemented."
msgstr ""

#: ../../howto/custom-management-commands.txt:267
# 2834b778578a4460907cc0e4507bfc2a
msgid "Implementing a constructor in a subclass"
msgstr ""

#: ../../howto/custom-management-commands.txt:269
# 8011219b40724589b44f0022f34f20c0
msgid "If you implement ``__init__`` in your subclass of :class:`BaseCommand`, you must call :class:`BaseCommand`'s ``__init__``."
msgstr ""

#: ../../howto/custom-management-commands.txt:281
# 2b6c64b747374c98a35df808f95d8abc
msgid "Return the Django version, which should be correct for all built-in Django commands. User-supplied commands can override this method to return their own version."
msgstr ""

#: ../../howto/custom-management-commands.txt:287
# afaf7494615e4295b48e5fbfe6c2114b
msgid "Try to execute this command, performing model validation if needed (as controlled by the attribute :attr:`requires_model_validation`). If the command raises a :class:`CommandError`, intercept it and print it sensibly to stderr."
msgstr ""

#: ../../howto/custom-management-commands.txt:293
# c37b5362d17c426ea07d523780fed032
msgid "Calling a management command in your code"
msgstr ""

#: ../../howto/custom-management-commands.txt:295
# 59c99498cb944a4b8d891e93271d47e7
msgid "``execute()`` should not be called directly from your code to execute a command. Use :ref:`call_command <call-command>` instead."
msgstr ""

#: ../../howto/custom-management-commands.txt:300
# eebe5e92b0bd441b87c5b58406301778
msgid "The actual logic of the command. Subclasses must implement this method."
msgstr ""

#: ../../howto/custom-management-commands.txt:304
# e40301ffc05945c2b2e01b2fdd2926f7
msgid "Validates the given app, raising :class:`CommandError` for any errors."
msgstr ""

#: ../../howto/custom-management-commands.txt:306
# cb3356fa61d4432794ec1017f70905ff
msgid "If ``app`` is None, then all installed apps are validated."
msgstr ""

#: ../../howto/custom-management-commands.txt:312
# 1363e96b6dbc43c5ada66d91ccf43d51
msgid "BaseCommand subclasses"
msgstr ""

#: ../../howto/custom-management-commands.txt:316
# 8a276153393642b796b69c0102537f0a
msgid "A management command which takes one or more installed application names as arguments, and does something with each of them."
msgstr ""

#: ../../howto/custom-management-commands.txt:319
# 9c20011b89e64e96bae97071b2474bdb
msgid "Rather than implementing :meth:`~BaseCommand.handle`, subclasses must implement :meth:`~AppCommand.handle_app`, which will be called once for each application."
msgstr ""

#: ../../howto/custom-management-commands.txt:324
# 87710feeadc94b5fa19430e4fc19ae2b
msgid "Perform the command's actions for ``app``, which will be the Python module corresponding to an application name given on the command line."
msgstr ""

#: ../../howto/custom-management-commands.txt:330
# bfbd8441c4894ae6b0a7e59e9a35fcd6
msgid "A management command which takes one or more arbitrary arguments (labels) on the command line, and does something with each of them."
msgstr ""

#: ../../howto/custom-management-commands.txt:334
# c6609be6eb404856bec48c745669fd9f
msgid "Rather than implementing :meth:`~BaseCommand.handle`, subclasses must implement :meth:`~LabelCommand.handle_label`, which will be called once for each label."
msgstr ""

#: ../../howto/custom-management-commands.txt:339
# 6970644e04614b5697b2feb9cc36a830
msgid "Perform the command's actions for ``label``, which will be the string as given on the command line."
msgstr ""

#: ../../howto/custom-management-commands.txt:344
# dd4c57cc28754a04adcb88053deafc32
msgid "A command which takes no arguments on the command line."
msgstr ""

#: ../../howto/custom-management-commands.txt:346
# 06e0d928499e41428f0ede9225987b2c
msgid "Rather than implementing :meth:`~BaseCommand.handle`, subclasses must implement :meth:`~NoArgsCommand.handle_noargs`; :meth:`~BaseCommand.handle` itself is overridden to ensure no arguments are passed to the command."
msgstr ""

#: ../../howto/custom-management-commands.txt:352
# 850b8914f1924a4da71f8b2d1fb1dbdd
msgid "Perform this command's actions"
msgstr ""

#: ../../howto/custom-management-commands.txt:357
# ebbe82ffc1b447bcaff5d8ac0c5add2d
msgid "Command exceptions"
msgstr ""

#: ../../howto/custom-management-commands.txt:361
# 3eb28298aaa542f581431ef948728476
msgid "Exception class indicating a problem while executing a management command."
msgstr ""

#: ../../howto/custom-management-commands.txt:364
# f234fe2ca348436ba93744418ee913c9
msgid "If this exception is raised during the execution of a management command from a command line console, it will be caught and turned into a nicely-printed error message to the appropriate output stream (i.e., stderr); as a result, raising this exception (with a sensible description of the error) is the preferred way to indicate that something has gone wrong in the execution of a command."
msgstr ""

#: ../../howto/custom-management-commands.txt:371
# b2f22de53f494cc69874baa3356e78f4
msgid "If a management command is called from code through :ref:`call_command <call-command>`, it's up to you to catch the exception when needed."
msgstr ""

#: ../../howto/custom-model-fields.txt:3
# 05e4c5950c3e40cca08a5f7bd01376b7
msgid "Writing custom model fields"
msgstr ""

#: ../../howto/custom-model-fields.txt:8
# 5dc99a8d317d42c0b9dfe0ad74539381
msgid "Introduction"
msgstr ""

#: ../../howto/custom-model-fields.txt:10
# 5be04164e0a94a1c9590e92b079bcd9e
msgid "The :doc:`model reference </topics/db/models>` documentation explains how to use Django's standard field classes -- :class:`~django.db.models.CharField`, :class:`~django.db.models.DateField`, etc. For many purposes, those classes are all you'll need. Sometimes, though, the Django version won't meet your precise requirements, or you'll want to use a field that is entirely different from those shipped with Django."
msgstr ""

#: ../../howto/custom-model-fields.txt:17
# fe71182c1e614ae2af221347f34d4560
msgid "Django's built-in field types don't cover every possible database column type -- only the common types, such as ``VARCHAR`` and ``INTEGER``. For more obscure column types, such as geographic polygons or even user-created types such as `PostgreSQL custom types`_, you can define your own Django ``Field`` subclasses."
msgstr ""

#: ../../howto/custom-model-fields.txt:24
# 51de9315f3f94d75ba4890d22d4289d4
msgid "Alternatively, you may have a complex Python object that can somehow be serialized to fit into a standard database column type. This is another case where a ``Field`` subclass will help you use your object with your models."
msgstr ""

#: ../../howto/custom-model-fields.txt:29
# 08067cc7cd6c45ee867bfabdb6e0b5cb
msgid "Our example object"
msgstr ""

#: ../../howto/custom-model-fields.txt:31
# e324bb1f27904eef9b9c4f7b590ec73f
msgid "Creating custom fields requires a bit of attention to detail. To make things easier to follow, we'll use a consistent example throughout this document: wrapping a Python object representing the deal of cards in a hand of Bridge_. Don't worry, you don't have to know how to play Bridge to follow this example. You only need to know that 52 cards are dealt out equally to four players, who are traditionally called *north*, *east*, *south* and *west*.  Our class looks something like this::"
msgstr ""

#: ../../howto/custom-model-fields.txt:53
# a6768ed34883453586919b352f36752b
msgid "This is just an ordinary Python class, with nothing Django-specific about it. We'd like to be able to do things like this in our models (we assume the ``hand`` attribute on the model is an instance of ``Hand``)::"
msgstr ""

#: ../../howto/custom-model-fields.txt:64
# dc39b44121114c5c8dc93b81cfffc85b
msgid "We assign to and retrieve from the ``hand`` attribute in our model just like any other Python class. The trick is to tell Django how to handle saving and loading such an object."
msgstr ""

#: ../../howto/custom-model-fields.txt:68
# b7d865a22c104060a456faa5c027edce
msgid "In order to use the ``Hand`` class in our models, we **do not** have to change this class at all. This is ideal, because it means you can easily write model support for existing classes where you cannot change the source code."
msgstr ""

#: ../../howto/custom-model-fields.txt:73
# 86d446d8f42243c1b1474bfc15ab35c9
msgid "You might only be wanting to take advantage of custom database column types and deal with the data as standard Python types in your models; strings, or floats, for example. This case is similar to our ``Hand`` example and we'll note any differences as we go along."
msgstr ""

#: ../../howto/custom-model-fields.txt:79
# ac85095525614f3da4eabc7d10c0291a
msgid "Background theory"
msgstr ""

#: ../../howto/custom-model-fields.txt:82
# 086152c39d1b47b19573fe61deabe072
msgid "Database storage"
msgstr ""

#: ../../howto/custom-model-fields.txt:84
# 85d66c92be4845a18e810f88ebd95167
msgid "The simplest way to think of a model field is that it provides a way to take a normal Python object -- string, boolean, ``datetime``, or something more complex like ``Hand`` -- and convert it to and from a format that is useful when dealing with the database (and serialization, but, as we'll see later, that falls out fairly naturally once you have the database side under control)."
msgstr ""

#: ../../howto/custom-model-fields.txt:90
# 0263da343f214d65a7224c24fa922e44
msgid "Fields in a model must somehow be converted to fit into an existing database column type. Different databases provide different sets of valid column types, but the rule is still the same: those are the only types you have to work with. Anything you want to store in the database must fit into one of those types."
msgstr ""

#: ../../howto/custom-model-fields.txt:96
# eecf31414a394716b34f7d26d199a899
msgid "Normally, you're either writing a Django field to match a particular database column type, or there's a fairly straightforward way to convert your data to, say, a string."
msgstr ""

#: ../../howto/custom-model-fields.txt:100
# 38ec4c4fe9514669a19a70593e5f198e
msgid "For our ``Hand`` example, we could convert the card data to a string of 104 characters by concatenating all the cards together in a pre-determined order -- say, all the *north* cards first, then the *east*, *south* and *west* cards. So ``Hand`` objects can be saved to text or character columns in the database."
msgstr ""

#: ../../howto/custom-model-fields.txt:106
# 49bfef6c35cb4bddb8bf613ceb7ec978
msgid "What does a field class do?"
msgstr ""

#: ../../howto/custom-model-fields.txt:110
# 83158d7a495b4bc79f01d10d70661392
msgid "All of Django's fields (and when we say *fields* in this document, we always mean model fields and not :doc:`form fields </ref/forms/fields>`) are subclasses of :class:`django.db.models.Field`. Most of the information that Django records about a field is common to all fields -- name, help text, uniqueness and so forth. Storing all that information is handled by ``Field``. We'll get into the precise details of what ``Field`` can do later on; for now, suffice it to say that everything descends from ``Field`` and then customizes key pieces of the class behavior."
msgstr ""

#: ../../howto/custom-model-fields.txt:119
# e8eb8f4483db4bf88fab2779496f6654
msgid "It's important to realize that a Django field class is not what is stored in your model attributes. The model attributes contain normal Python objects. The field classes you define in a model are actually stored in the ``Meta`` class when the model class is created (the precise details of how this is done are unimportant here). This is because the field classes aren't necessary when you're just creating and modifying attributes. Instead, they provide the machinery for converting between the attribute value and what is stored in the database or sent to the :doc:`serializer </topics/serialization>`."
msgstr ""

#: ../../howto/custom-model-fields.txt:128
# 3edcac7b4d484f948ebede06e1675d1c
msgid "Keep this in mind when creating your own custom fields. The Django ``Field`` subclass you write provides the machinery for converting between your Python instances and the database/serializer values in various ways (there are differences between storing a value and using a value for lookups, for example). If this sounds a bit tricky, don't worry -- it will become clearer in the examples below. Just remember that you will often end up creating two classes when you want a custom field:"
msgstr ""

#: ../../howto/custom-model-fields.txt:136
# b9f58126156a424d8595c1599aae777f
msgid "The first class is the Python object that your users will manipulate. They will assign it to the model attribute, they will read from it for displaying purposes, things like that. This is the ``Hand`` class in our example."
msgstr ""

#: ../../howto/custom-model-fields.txt:141
# 85e0588e3bac43fdb448b31d38550e0f
msgid "The second class is the ``Field`` subclass. This is the class that knows how to convert your first class back and forth between its permanent storage form and the Python form."
msgstr ""

#: ../../howto/custom-model-fields.txt:146
# 0c8b33dfa3eb4018b66be3f86b5f9955
msgid "Writing a field subclass"
msgstr ""

#: ../../howto/custom-model-fields.txt:148
# 97300e4731694175ad3dd4fefac575e1
msgid "When planning your :class:`~django.db.models.Field` subclass, first give some thought to which existing :class:`~django.db.models.Field` class your new field is most similar to. Can you subclass an existing Django field and save yourself some work? If not, you should subclass the :class:`~django.db.models.Field` class, from which everything is descended."
msgstr ""

#: ../../howto/custom-model-fields.txt:154
# c5027e87e71d4d67b1971d4895842464
msgid "Initializing your new field is a matter of separating out any arguments that are specific to your case from the common arguments and passing the latter to the ``__init__()`` method of :class:`~django.db.models.Field` (or your parent class)."
msgstr ""

#: ../../howto/custom-model-fields.txt:159
# 12e6eca0ce7f4a9885a76dbd253e8bc2
msgid "In our example, we'll call our field ``HandField``. (It's a good idea to call your :class:`~django.db.models.Field` subclass ``<Something>Field``, so it's easily identifiable as a :class:`~django.db.models.Field` subclass.) It doesn't behave like any existing field, so we'll subclass directly from :class:`~django.db.models.Field`::"
msgstr ""

#: ../../howto/custom-model-fields.txt:175
# a610f7a4b91444e1aa3ca287c1dde076
msgid "Our ``HandField`` accepts most of the standard field options (see the list below), but we ensure it has a fixed length, since it only needs to hold 52 card values plus their suits; 104 characters in total."
msgstr ""

#: ../../howto/custom-model-fields.txt:181
# bcfc99aa4aeb4628b5247255e4b2c457
msgid "Many of Django's model fields accept options that they don't do anything with. For example, you can pass both :attr:`~django.db.models.Field.editable` and :attr:`~django.db.models.DateField.auto_now` to a :class:`django.db.models.DateField` and it will simply ignore the :attr:`~django.db.models.Field.editable` parameter (:attr:`~django.db.models.DateField.auto_now` being set implies ``editable=False``). No error is raised in this case."
msgstr ""

#: ../../howto/custom-model-fields.txt:190
# 25f481c70b3843b29d2ee8fb4d89083b
msgid "This behavior simplifies the field classes, because they don't need to check for options that aren't necessary. They just pass all the options to the parent class and then don't use them later on. It's up to you whether you want your fields to be more strict about the options they select, or to use the simpler, more permissive behavior of the current fields."
msgstr ""

#: ../../howto/custom-model-fields.txt:198
# 900f420dd8894bb6b7cc72a6cb4358a8
msgid "The :meth:`~django.db.models.Field.__init__` method takes the following parameters:"
msgstr ""

#: ../../howto/custom-model-fields.txt:201
# d45d0aa319b84bc7bec61865cce05c69
msgid ":attr:`~django.db.models.Field.verbose_name`"
msgstr ""

#: ../../howto/custom-model-fields.txt:202
# 92b90ee2cd33440880842d8df071c8ec
msgid "``name``"
msgstr ""

#: ../../howto/custom-model-fields.txt:203
# 9420da9e5d2a47d7a0ff4bdf5055d8f0
msgid ":attr:`~django.db.models.Field.primary_key`"
msgstr ""

#: ../../howto/custom-model-fields.txt:204
# 2c0db779ad2343fb9e146f78c4755e1a
msgid ":attr:`~django.db.models.CharField.max_length`"
msgstr ""

#: ../../howto/custom-model-fields.txt:205
# 8a2206bc987d431bb08fcfbb01d49700
msgid ":attr:`~django.db.models.Field.unique`"
msgstr ""

#: ../../howto/custom-model-fields.txt:206
# d15360b3e9584741bc9ff1633b256615
msgid ":attr:`~django.db.models.Field.blank`"
msgstr ""

#: ../../howto/custom-model-fields.txt:207
# ba2768a9e94a43fc98b9a21852c9b64a
msgid ":attr:`~django.db.models.Field.null`"
msgstr ""

#: ../../howto/custom-model-fields.txt:208
# e76bdd85a2f943ceae2e321e18a5d083
msgid ":attr:`~django.db.models.Field.db_index`"
msgstr ""

#: ../../howto/custom-model-fields.txt:209
# 2a61f37a70cc40bb80e86f22a9a2e42c
msgid "``rel``: Used for related fields (like :class:`ForeignKey`). For advanced use only."
msgstr ""

#: ../../howto/custom-model-fields.txt:211
# bda04ac6159f4a3fa60d3bb6bfe754b8
msgid ":attr:`~django.db.models.Field.default`"
msgstr ""

#: ../../howto/custom-model-fields.txt:212
# a93adcd519bd46e49c55500b3a735a2f
msgid ":attr:`~django.db.models.Field.editable`"
msgstr ""

#: ../../howto/custom-model-fields.txt:213
# e2098f02a8854a988e334954ff94cc40
msgid "``serialize``: If ``False``, the field will not be serialized when the model is passed to Django's :doc:`serializers </topics/serialization>`. Defaults to ``True``."
msgstr ""

#: ../../howto/custom-model-fields.txt:216
# 877789f7578847f28875e771a4083927
msgid ":attr:`~django.db.models.Field.unique_for_date`"
msgstr ""

#: ../../howto/custom-model-fields.txt:217
# 06f3bd867ff444a3a646b9a2070148d4
msgid ":attr:`~django.db.models.Field.unique_for_month`"
msgstr ""

#: ../../howto/custom-model-fields.txt:218
# aecfb00f4dc948d8b4bf4f66c9d4cde1
msgid ":attr:`~django.db.models.Field.unique_for_year`"
msgstr ""

#: ../../howto/custom-model-fields.txt:219
# f7961fbf8f2b44daa4ce3823328ae4ac
msgid ":attr:`~django.db.models.Field.choices`"
msgstr ""

#: ../../howto/custom-model-fields.txt:220
# dd3d712b210a47a2b9714815f41f5371
msgid ":attr:`~django.db.models.Field.help_text`"
msgstr ""

#: ../../howto/custom-model-fields.txt:221
# 65ab74cd45cb4c47a27e261ab312955f
msgid ":attr:`~django.db.models.Field.db_column`"
msgstr ""

#: ../../howto/custom-model-fields.txt:222
# 9f5465b0eed84a899e133f2c34514ad4
msgid ":attr:`~django.db.models.Field.db_tablespace`: Only for index creation, if the backend supports :doc:`tablespaces </topics/db/tablespaces>`. You can usually ignore this option."
msgstr ""

#: ../../howto/custom-model-fields.txt:225
# afd8404eb024459db5ebf0ee518bfb42
msgid "``auto_created``: ``True`` if the field was automatically created, as for the :class:`~django.db.models.OneToOneField` used by model inheritance. For advanced use only."
msgstr ""

#: ../../howto/custom-model-fields.txt:229
# f55a144a65ca4b84b524286a33db0999
msgid "All of the options without an explanation in the above list have the same meaning they do for normal Django fields. See the :doc:`field documentation </ref/models/fields>` for examples and details."
msgstr ""

#: ../../howto/custom-model-fields.txt:234
# de0546c9610b4c74bcd4f0f7fcca9614
msgid "The ``SubfieldBase`` metaclass"
msgstr ""

#: ../../howto/custom-model-fields.txt:238
# 0c216cd02cef4a28a91aa328b62636ae
msgid "As we indicated in the introduction_, field subclasses are often needed for two reasons: either to take advantage of a custom database column type, or to handle complex Python types. Obviously, a combination of the two is also possible. If you're only working with custom database column types and your model fields appear in Python as standard Python types direct from the database backend, you don't need to worry about this section."
msgstr ""

#: ../../howto/custom-model-fields.txt:245
# 2597e341bcde46b88c53e23ed4742eb1
msgid "If you're handling custom Python types, such as our ``Hand`` class, we need to make sure that when Django initializes an instance of our model and assigns a database value to our custom field attribute, we convert that value into the appropriate Python object. The details of how this happens internally are a little complex, but the code you need to write in your ``Field`` class is simple: make sure your field subclass uses a special metaclass:"
msgstr ""

#: ../../howto/custom-model-fields.txt:252
# f0f1f10437ef4dfb98ee6f8239992028
msgid "For example, on Python 2::"
msgstr ""

#: ../../howto/custom-model-fields.txt:263
# 312b99b945214987a44ab8976d21b9b1
msgid "On Python 3, in lieu of setting the ``__metaclass__`` attribute, add ``metaclass`` to the class definition::"
msgstr ""

#: ../../howto/custom-model-fields.txt:269
# e42b87460a894fe9b5c42af8a78b15da
msgid "If you want your code to work on Python 2 & 3, you can use :func:`six.with_metaclass`::"
msgstr ""

#: ../../howto/custom-model-fields.txt:277
# e2b5417522244d0c9d46bb47fc3e6628
msgid "This ensures that the :meth:`.to_python` method, documented below, will always be called when the attribute is initialized."
msgstr ""

#: ../../howto/custom-model-fields.txt:281
# 7df28faba5b04e86af4e4207b650ee95
msgid "ModelForms and custom fields"
msgstr ""

#: ../../howto/custom-model-fields.txt:283
# 4e0dfba59fb44c21a24ca5a1781ba079
msgid "If you use :class:`~django.db.models.SubfieldBase`, :meth:`.to_python` will be called every time an instance of the field is assigned a value. This means that whenever a value may be assigned to the field, you need to ensure that it will be of the correct datatype, or that you handle any exceptions."
msgstr ""

#: ../../howto/custom-model-fields.txt:289
# 5933a89185614e5da468e7470d795c67
msgid "This is especially important if you use :doc:`ModelForms </topics/forms/modelforms>`. When saving a ModelForm, Django will use form values to instantiate model instances. However, if the cleaned form data can't be used as valid input to the field, the normal form validation process will break."
msgstr ""

#: ../../howto/custom-model-fields.txt:295
# 0a6e19f8c8184f889015a7cda4ea55c7
msgid "Therefore, you must ensure that the form field used to represent your custom field performs whatever input validation and data cleaning is necessary to convert user-provided form input into a `to_python()`-compatible model field value. This may require writing a custom form field, and/or implementing the :meth:`.formfield` method on your field to return a form field class whose `to_python()` returns the correct datatype."
msgstr ""

#: ../../howto/custom-model-fields.txt:304
# 830951f38a0843fa8a85530132fc3d37
msgid "Documenting your custom field"
msgstr ""

#: ../../howto/custom-model-fields.txt:308
# d01c39d36b9e4f02b7cd5967872d08be
msgid "As always, you should document your field type, so users will know what it is. In addition to providing a docstring for it, which is useful for developers, you can also allow users of the admin app to see a short description of the field type via the :doc:`django.contrib.admindocs </ref/contrib/admin/admindocs>` application. To do this simply provide descriptive text in a ``description`` class attribute of your custom field. In the above example, the description displayed by the ``admindocs`` application for a ``HandField`` will be 'A hand of cards (bridge style)'."
msgstr ""

#: ../../howto/custom-model-fields.txt:317
# 9400790d03c24846af35b8282a77ba73
msgid "In the :mod:`django.contrib.admindocs` display, the field description is interpolated with ``field.__dict__`` which allows the description to incorporate arguments of the field. For example, the description for :class:`~django.db.models.CharField` is::"
msgstr ""

#: ../../howto/custom-model-fields.txt:325
# 10e1b90bd9f740ef90d1f8c629941bcc
msgid "Useful methods"
msgstr ""

#: ../../howto/custom-model-fields.txt:327
# ae1f8ebff89b4705ba796d8c50c350a5
msgid "Once you've created your :class:`~django.db.models.Field` subclass and set up the ``__metaclass__``, you might consider overriding a few standard methods, depending on your field's behavior. The list of methods below is in approximately decreasing order of importance, so start from the top."
msgstr ""

#: ../../howto/custom-model-fields.txt:333
# ca3c8d03d327421bb05400a7471868dc
msgid "Custom database types"
msgstr ""

#: ../../howto/custom-model-fields.txt:337
# eb1c0339fff249189c44446fb2945128
msgid "Returns the database column data type for the :class:`~django.db.models.Field`, taking into account the connection object, and the settings associated with it."
msgstr ""

#: ../../howto/custom-model-fields.txt:340
# 4161c054f07e4f60bdb7a93eef322f11
msgid "Say you've created a PostgreSQL custom type called ``mytype``. You can use this field with Django by subclassing ``Field`` and implementing the :meth:`.db_type` method, like so::"
msgstr ""

#: ../../howto/custom-model-fields.txt:350
# b35240e9997e46dd80b61f2d9ce16aaa
msgid "Once you have ``MytypeField``, you can use it in any model, just like any other ``Field`` type::"
msgstr ""

#: ../../howto/custom-model-fields.txt:357
# 966a3e0e1b5d4eacbcc8d431d54b77aa
msgid "If you aim to build a database-agnostic application, you should account for differences in database column types. For example, the date/time column type in PostgreSQL is called ``timestamp``, while the same column in MySQL is called ``datetime``. The simplest way to handle this in a :meth:`.db_type` method is to check the ``connection.settings_dict['ENGINE']`` attribute."
msgstr ""

#: ../../howto/custom-model-fields.txt:363
#: ../../howto/custom-model-fields.txt:495
#: ../../howto/custom-model-fields.txt:671
# 1786c26a430d4a7b903a4769dff30dff
# b7298ef28e4f42c2af7234340b17cd77
# a90cba84e8b24727b812bffbf6b4a69e
msgid "For example::"
msgstr ""

#: ../../howto/custom-model-fields.txt:372
# c916f76af3cb480181a30e12b54df56c
msgid "The :meth:`.db_type` method is only called by Django when the framework constructs the ``CREATE TABLE`` statements for your application -- that is, when you first create your tables. It's not called at any other time, so it can afford to execute slightly complex code, such as the ``connection.settings_dict`` check in the above example."
msgstr ""

#: ../../howto/custom-model-fields.txt:378
# 49b3552ad5d84b1d9b597a1e56535393
msgid "Some database column types accept parameters, such as ``CHAR(25)``, where the parameter ``25`` represents the maximum column length. In cases like these, it's more flexible if the parameter is specified in the model rather than being hard-coded in the ``db_type()`` method. For example, it wouldn't make much sense to have a ``CharMaxlength25Field``, shown here::"
msgstr ""

#: ../../howto/custom-model-fields.txt:394
# dcfe19977da54eb0a067c6012f644dc8
msgid "The better way of doing this would be to make the parameter specifiable at run time -- i.e., when the class is instantiated. To do that, just implement :meth:`django.db.models.Field.__init__`, like so::"
msgstr ""

#: ../../howto/custom-model-fields.txt:412
# 03b9904e87664c8eb61f16c19cd66ff3
msgid "Finally, if your column requires truly complex SQL setup, return ``None`` from :meth:`.db_type`. This will cause Django's SQL creation code to skip over this field. You are then responsible for creating the column in the right table in some other way, of course, but this gives you a way to tell Django to get out of the way."
msgstr ""

#: ../../howto/custom-model-fields.txt:419
# 81c828af203f424b8e99530f65ab793b
msgid "Converting database values to Python objects"
msgstr ""

#: ../../howto/custom-model-fields.txt:423
# 36f4342cb3c94aedb5b34609d5aa6cfd
msgid "Converts a value as returned by your database (or a serializer) to a Python object."
msgstr ""

#: ../../howto/custom-model-fields.txt:426
# 5c59e5c28f9e4f4596280684b4f8e78a
msgid "The default implementation simply returns ``value``, for the common case in which the database backend already returns data in the correct format (as a Python string, for example)."
msgstr ""

#: ../../howto/custom-model-fields.txt:430
# 29987ffcd4394f6691878b51ad57b22a
msgid "If your custom :class:`~django.db.models.Field` class deals with data structures that are more complex than strings, dates, integers or floats, then you'll need to override this method. As a general rule, the method should deal gracefully with any of the following arguments:"
msgstr ""

#: ../../howto/custom-model-fields.txt:435
# c1944dab661049eeb237340b71a37a74
msgid "An instance of the correct type (e.g., ``Hand`` in our ongoing example)."
msgstr ""

#: ../../howto/custom-model-fields.txt:437
# cad40dc24fea47ce84c7f846c945f3d2
msgid "A string (e.g., from a deserializer)."
msgstr ""

#: ../../howto/custom-model-fields.txt:439
# 44b9e471ba354d31a836e9420c91ab6f
msgid "Whatever the database returns for the column type you're using."
msgstr ""

#: ../../howto/custom-model-fields.txt:441
# 8783a54d6f9d43f992883410b87605af
msgid "In our ``HandField`` class, we're storing the data as a VARCHAR field in the database, so we need to be able to process strings and ``Hand`` instances in :meth:`.to_python`::"
msgstr ""

#: ../../howto/custom-model-fields.txt:462
# 038cbb78affb4352acb40ddde53d0cb5
msgid "Notice that we always return a ``Hand`` instance from this method. That's the Python object type we want to store in the model's attribute. If anything is going wrong during value conversion, you should raise a :exc:`~django.core.exceptions.ValidationError` exception."
msgstr ""

#: ../../howto/custom-model-fields.txt:467
# 593a3660f4c046f89c9721a885c94e39
msgid "**Remember:** If your custom field needs the :meth:`.to_python` method to be called when it is created, you should be using `The SubfieldBase metaclass`_ mentioned earlier. Otherwise :meth:`.to_python` won't be called automatically."
msgstr ""

#: ../../howto/custom-model-fields.txt:474
# c1add1989c054a459e25e4109e92575b
msgid "If your custom field allows ``null=True``, any field method that takes ``value`` as an argument, like :meth:`~Field.to_python` and :meth:`~Field.get_prep_value`, should handle the case when ``value`` is ``None``."
msgstr ""

#: ../../howto/custom-model-fields.txt:480
# b9022b0ea3e544e4b41e223477fa3c5a
msgid "Converting Python objects to query values"
msgstr ""

#: ../../howto/custom-model-fields.txt:484
# 364570686b4840eca3ec1a18e44dbcf3
msgid "This is the reverse of :meth:`.to_python` when working with the database backends (as opposed to serialization). The ``value`` parameter is the current value of the model's attribute (a field has no reference to its containing model, so it cannot retrieve the value itself), and the method should return data in a format that has been prepared for use as a parameter in a query."
msgstr ""

#: ../../howto/custom-model-fields.txt:491
# 83c9a39b5aa4460193447ea5692c89f2
msgid "This conversion should *not* include any database-specific conversions. If database-specific conversions are required, they should be made in the call to :meth:`.get_db_prep_value`."
msgstr ""

#: ../../howto/custom-model-fields.txt:505
# dcd48ededdd64b889a00abaeaca78646
msgid "Converting query values to database values"
msgstr ""

#: ../../howto/custom-model-fields.txt:509
# 9243ebd3100344f4a402ed5c1ffa5775
msgid "Some data types (for example, dates) need to be in a specific format before they can be used by a database backend. :meth:`.get_db_prep_value` is the method where those conversions should be made. The specific connection that will be used for the query is passed as the ``connection`` parameter. This allows you to use backend-specific conversion logic if it is required."
msgstr ""

#: ../../howto/custom-model-fields.txt:516
# 1dec6bf7e89a429eb57d2ab3abb233f5
msgid "The ``prepared`` argument describes whether or not the value has already been passed through :meth:`.get_prep_value` conversions. When ``prepared`` is False, the default implementation of :meth:`.get_db_prep_value` will call :meth:`.get_prep_value` to do initial data conversions before performing any database-specific processing."
msgstr ""

#: ../../howto/custom-model-fields.txt:525
# 80005b2afd234971bf07689b068d6a5e
msgid "Same as the above, but called when the Field value must be *saved* to the database. As the default implementation just calls :meth:`.get_db_prep_value`, you shouldn't need to implement this method unless your custom field needs a special conversion when being saved that is not the same as the conversion used for normal query parameters (which is implemented by :meth:`.get_db_prep_value`)."
msgstr ""

#: ../../howto/custom-model-fields.txt:533
# 1cfa33a52d764047bec2315cd283b58c
msgid "Preprocessing values before saving"
msgstr ""

#: ../../howto/custom-model-fields.txt:537
# 9c9982ee56c54871a03d549a98b9f067
msgid "This method is called just prior to :meth:`.get_db_prep_save` and should return the value of the appropriate attribute from ``model_instance`` for this field. The attribute name is in ``self.attname`` (this is set up by :class:`~django.db.models.Field`). If the model is being saved to the database for the first time, the ``add`` parameter will be ``True``, otherwise it will be ``False``."
msgstr ""

#: ../../howto/custom-model-fields.txt:544
# 76208d6cd7224da888fab6372e4ce7ae
msgid "You only need to override this method if you want to preprocess the value somehow, just before saving. For example, Django's :class:`~django.db.models.DateTimeField` uses this method to set the attribute correctly in the case of :attr:`~django.db.models.DateField.auto_now` or :attr:`~django.db.models.DateField.auto_now_add`."
msgstr ""

#: ../../howto/custom-model-fields.txt:550
# bbbcffc4de5644f780d157848689d1ed
msgid "If you do override this method, you must return the value of the attribute at the end. You should also update the model's attribute if you make any changes to the value so that code holding references to the model will always see the correct value."
msgstr ""

#: ../../howto/custom-model-fields.txt:556
# 12e5f103fb4b49fe8c62c6f6e9dbcd73
msgid "Preparing values for use in database lookups"
msgstr ""

#: ../../howto/custom-model-fields.txt:558
# 0c44420cee8a4ea4b48095bb8845c310
msgid "As with value conversions, preparing a value for database lookups is a two phase process."
msgstr ""

#: ../../howto/custom-model-fields.txt:563
# 4cd2551efd884df4b368f24a38950fe7
msgid ":meth:`.get_prep_lookup` performs the first phase of lookup preparation, performing generic data validity checks"
msgstr ""

#: ../../howto/custom-model-fields.txt:566
# c49706b436b34005b529c6df72af5fc4
msgid "Prepares the ``value`` for passing to the database when used in a lookup (a ``WHERE`` constraint in SQL). The ``lookup_type`` will be one of the valid Django filter lookups: ``exact``, ``iexact``, ``contains``, ``icontains``, ``gt``, ``gte``, ``lt``, ``lte``, ``in``, ``startswith``, ``istartswith``, ``endswith``, ``iendswith``, ``range``, ``year``, ``month``, ``day``, ``isnull``, ``search``, ``regex``, and ``iregex``."
msgstr ""

#: ../../howto/custom-model-fields.txt:573
# d6a5b746a6d34bd7b22d105dbff75c82
msgid "Your method must be prepared to handle all of these ``lookup_type`` values and should raise either a ``ValueError`` if the ``value`` is of the wrong sort (a list when you were expecting an object, for example) or a ``TypeError`` if your field does not support that type of lookup. For many fields, you can get by with handling the lookup types that need special handling for your field and pass the rest to the :meth:`.get_db_prep_lookup` method of the parent class."
msgstr ""

#: ../../howto/custom-model-fields.txt:580
# cc713881d4864761807cdeac82c4050b
msgid "If you needed to implement ``get_db_prep_save()``, you will usually need to implement ``get_prep_lookup()``. If you don't, ``get_prep_value`` will be called by the default implementation, to manage ``exact``, ``gt``, ``gte``, ``lt``, ``lte``, ``in`` and ``range`` lookups."
msgstr ""

#: ../../howto/custom-model-fields.txt:585
# bdf0961454e9424b83ec71837f386600
msgid "You may also want to implement this method to limit the lookup types that could be used with your custom field type."
msgstr ""

#: ../../howto/custom-model-fields.txt:588
# 4a46bffe55e14d83a5c3f102084cf3cd
msgid "Note that, for ``range`` and ``in`` lookups, ``get_prep_lookup`` will receive a list of objects (presumably of the right type) and will need to convert them to a list of things of the right type for passing to the database. Most of the time, you can reuse ``get_prep_value()``, or at least factor out some common pieces."
msgstr ""

#: ../../howto/custom-model-fields.txt:594
# f7d77f29c5a74b4fb089d928d9bbc493
msgid "For example, the following code implements ``get_prep_lookup`` to limit the accepted lookup types to ``exact`` and ``in``::"
msgstr ""

#: ../../howto/custom-model-fields.txt:611
# aa480a5e87ae418081b7b12ec8f458ff
msgid "Performs any database-specific data conversions required by a lookup. As with :meth:`.get_db_prep_value`, the specific connection that will be used for the query is passed as the ``connection`` parameter. The ``prepared`` argument describes whether the value has already been prepared with :meth:`.get_prep_lookup`."
msgstr ""

#: ../../howto/custom-model-fields.txt:618
# 9a236ec69a4d4595a9242cd433f68c20
msgid "Specifying the form field for a model field"
msgstr ""

#: ../../howto/custom-model-fields.txt:622
# 6c03266581524eaaa370a556d94217bb
msgid "Returns the default form field to use when this model field is displayed in a form.  This method is called by the :class:`~django.forms.ModelForm` helper."
msgstr ""

#: ../../howto/custom-model-fields.txt:625
# e3c5bd1ead33475e8121e26309d14259
msgid "The form field class can be specified via the ``form_class`` and ``choices_form_class`` arguments; the latter is used if the field has choices specified, the former otherwise. If these arguments are not provided, :class:`~django.forms.CharField` or :class:`~django.forms.TypedChoiceField` will be used."
msgstr ""

#: ../../howto/custom-model-fields.txt:631
# e7462542f8af41dea395400f7b60f128
msgid "All of the ``kwargs`` dictionary is passed directly to the form field's ``__init__()`` method. Normally, all you need to do is set up a good default for the ``form_class`` (and maybe ``choices_form_class``) argument and then delegate further handling to the parent class. This might require you to write a custom form field (and even a form widget). See the :doc:`forms documentation </topics/forms/index>` for information about this."
msgstr ""

#: ../../howto/custom-model-fields.txt:638
# 55a9ae34a23545ca8f49fdd96d4d99aa
msgid "Continuing our ongoing example, we can write the :meth:`.formfield` method as::"
msgstr ""

#: ../../howto/custom-model-fields.txt:650
# c4b503bbdbb341c9b285bafeda73161e
msgid "This assumes we've imported a ``MyFormField`` field class (which has its own default widget). This document doesn't cover the details of writing custom form fields."
msgstr ""

#: ../../howto/custom-model-fields.txt:658
# e95b0db8218941909522d4aa04ad789b
msgid "Emulating built-in field types"
msgstr ""

#: ../../howto/custom-model-fields.txt:662
# efc500783e154c4482139ae05cbb84dd
msgid "Returns a string giving the name of the :class:`~django.db.models.Field` subclass we are emulating at the database level. This is used to determine the type of database column for simple cases."
msgstr ""

#: ../../howto/custom-model-fields.txt:666
# 2ac175e765664062a1abe1f6403744fb
msgid "If you have created a :meth:`.db_type` method, you don't need to worry about :meth:`.get_internal_type` -- it won't be used much. Sometimes, though, your database storage is similar in type to some other field, so you can use that other field's logic to create the right column."
msgstr ""

#: ../../howto/custom-model-fields.txt:679
# c34c63a2d2f649b19f37c4cec87b5326
msgid "No matter which database backend we are using, this will mean that ``syncdb`` and other SQL commands create the right column type for storing a string."
msgstr ""

#: ../../howto/custom-model-fields.txt:682
# 650a9ecf75bc440aa2a8ad51b1e4cca8
msgid "If :meth:`.get_internal_type` returns a string that is not known to Django for the database backend you are using -- that is, it doesn't appear in ``django.db.backends.<db_name>.creation.DATA_TYPES`` -- the string will still be used by the serializer, but the default :meth:`.db_type` method will return ``None``. See the documentation of :meth:`.db_type` for reasons why this might be useful. Putting a descriptive string in as the type of the field for the serializer is a useful idea if you're ever going to be using the serializer output in some other place, outside of Django."
msgstr ""

#: ../../howto/custom-model-fields.txt:692
# 3b2e1a6a02a7496cbe46a8bb869460c6
msgid "Converting field data for serialization"
msgstr ""

#: ../../howto/custom-model-fields.txt:696
# 38289628c4c74ec08c77f63a25ecea0b
msgid "This method is used by the serializers to convert the field into a string for output. Calling ``Field._get_val_from_obj(obj)`` is the best way to get the value to serialize. For example, since our ``HandField`` uses strings for its data storage anyway, we can reuse some existing conversion code::"
msgstr ""

#: ../../howto/custom-model-fields.txt:709
# 214ad77d34bd4f2c8db1c1dd73e1e0ef
msgid "Some general advice"
msgstr ""

#: ../../howto/custom-model-fields.txt:711
# fa2c85969ea3495d9acc0a361cf542de
msgid "Writing a custom field can be a tricky process, particularly if you're doing complex conversions between your Python types and your database and serialization formats. Here are a couple of tips to make things go more smoothly:"
msgstr ""

#: ../../howto/custom-model-fields.txt:716
# 4241e722cd684d76ac11813c76aab274
msgid "Look at the existing Django fields (in :file:`django/db/models/fields/__init__.py`) for inspiration. Try to find a field that's similar to what you want and extend it a little bit, instead of creating an entirely new field from scratch."
msgstr ""

#: ../../howto/custom-model-fields.txt:721
# f4233ed432a64c029fbb128126b3709a
msgid "Put a ``__str__()`` or ``__unicode__()`` method on the class you're wrapping up as a field. There are a lot of places where the default behavior of the field code is to call :func:`~django.utils.encoding.force_text` on the value. (In our examples in this document, ``value`` would be a ``Hand`` instance, not a ``HandField``). So if your ``__unicode__()`` method (``__str__()`` on Python 3) automatically converts to the string form of your Python object, you can save yourself a lot of work."
msgstr ""

#: ../../howto/custom-model-fields.txt:732
# e644349295ad4e0c8f7df18d36918035
msgid "Writing a ``FileField`` subclass"
msgstr ""

#: ../../howto/custom-model-fields.txt:734
# b83efa31a7a745aa872dea65faf2f09f
msgid "In addition to the above methods, fields that deal with files have a few other special requirements which must be taken into account. The majority of the mechanics provided by ``FileField``, such as controlling database storage and retrieval, can remain unchanged, leaving subclasses to deal with the challenge of supporting a particular type of file."
msgstr ""

#: ../../howto/custom-model-fields.txt:740
# a59f9a1ef9524d2596a28ede0cd1280f
msgid "Django provides a ``File`` class, which is used as a proxy to the file's contents and operations. This can be subclassed to customize how the file is accessed, and what methods are available. It lives at ``django.db.models.fields.files``, and its default behavior is explained in the :doc:`file documentation </ref/files/file>`."
msgstr ""

#: ../../howto/custom-model-fields.txt:746
# 3cdb6034119e4b4c84dcdfd50781695a
msgid "Once a subclass of ``File`` is created, the new ``FileField`` subclass must be told to use it. To do so, simply assign the new ``File`` subclass to the special ``attr_class`` attribute of the ``FileField`` subclass."
msgstr ""

#: ../../howto/custom-model-fields.txt:751
# b0e8d4e4f7f24bff9f6e6ab891317f88
msgid "A few suggestions"
msgstr ""

#: ../../howto/custom-model-fields.txt:753
# 499c2b0802b24986b122e4fd0cfc6d0b
msgid "In addition to the above details, there are a few guidelines which can greatly improve the efficiency and readability of the field's code."
msgstr ""

#: ../../howto/custom-model-fields.txt:756
# 9f60c4eb31ec4396877057963fe26d2f
msgid "The source for Django's own ``ImageField`` (in ``django/db/models/fields/files.py``) is a great example of how to subclass ``FileField`` to support a particular type of file, as it incorporates all of the techniques described above."
msgstr ""

#: ../../howto/custom-model-fields.txt:761
# 3bfddc44b1954122b62c6df21bbc4c15
msgid "Cache file attributes wherever possible. Since files may be stored in remote storage systems, retrieving them may cost extra time, or even money, that isn't always necessary. Once a file is retrieved to obtain some data about its content, cache as much of that data as possible to reduce the number of times the file must be retrieved on subsequent calls for that information."
msgstr ""

#: ../../howto/custom-template-tags.txt:3
# e62a5a1fa5c04c84bfaa91167dc34b8c
msgid "Custom template tags and filters"
msgstr ""

#: ../../howto/custom-template-tags.txt:5
# d6f144c438774d3bbce1d55fd5d40355
msgid "Django's template system comes with a wide variety of :doc:`built-in tags and filters </ref/templates/builtins>` designed to address the presentation logic needs of your application. Nevertheless, you may find yourself needing functionality that is not covered by the core set of template primitives. You can extend the template engine by defining custom tags and filters using Python, and then make them available to your templates using the :ttag:`{% load %}<load>` tag."
msgstr ""

#: ../../howto/custom-template-tags.txt:14
# 972333af9aca42d1be0d939576649ccd
msgid "Code layout"
msgstr ""

#: ../../howto/custom-template-tags.txt:16
# 23bedcdc58c8420899ed57cec17426f5
msgid "Custom template tags and filters must live inside a Django app. If they relate to an existing app it makes sense to bundle them there; otherwise, you should create a new app to hold them."
msgstr ""

#: ../../howto/custom-template-tags.txt:20
# 885c015aaa3440d0aff911ba5161ebaa
msgid "The app should contain a ``templatetags`` directory, at the same level as ``models.py``, ``views.py``, etc. If this doesn't already exist, create it - don't forget the ``__init__.py`` file to ensure the directory is treated as a Python package. After adding this module, you will need to restart your server before you can use the tags or filters in templates."
msgstr ""

#: ../../howto/custom-template-tags.txt:26
# 13ea80a99ad74c3fb5d6d023fe7a8d3b
msgid "Your custom tags and filters will live in a module inside the ``templatetags`` directory. The name of the module file is the name you'll use to load the tags later, so be careful to pick a name that won't clash with custom tags and filters in another app."
msgstr ""

#: ../../howto/custom-template-tags.txt:31
# 1828510c185847679d6e70443166ea87
msgid "For example, if your custom tags/filters are in a file called ``poll_extras.py``, your app layout might look like this::"
msgstr ""

#: ../../howto/custom-template-tags.txt:41
# 86d4c465e29d40ea851ef5068a2a4d68
msgid "And in your template you would use the following:"
msgstr ""

#: ../../howto/custom-template-tags.txt:47
# eecefdca3d3549e8b0991b0173f2bf53
msgid "The app that contains the custom tags must be in :setting:`INSTALLED_APPS` in order for the :ttag:`{% load %}<load>` tag to work. This is a security feature: It allows you to host Python code for many template libraries on a single host machine without enabling access to all of them for every Django installation."
msgstr ""

#: ../../howto/custom-template-tags.txt:52
# 376be502570a40d0ad063b76c219d104
msgid "There's no limit on how many modules you put in the ``templatetags`` package. Just keep in mind that a :ttag:`{% load %}<load>` statement will load tags/filters for the given Python module name, not the name of the app."
msgstr ""

#: ../../howto/custom-template-tags.txt:56
# d4332da5c6fd4d7e87227327e162cf97
msgid "To be a valid tag library, the module must contain a module-level variable named ``register`` that is a ``template.Library`` instance, in which all the tags and filters are registered. So, near the top of your module, put the following:"
msgstr ""

#: ../../howto/custom-template-tags.txt:68
# 9be58a2e8283494193f9bfdffc375d82
msgid "Behind the scenes"
msgstr ""

#: ../../howto/custom-template-tags.txt:70
# a1666d796083413fa526cc58b227bf7d
msgid "For a ton of examples, read the source code for Django's default filters and tags. They're in ``django/template/defaultfilters.py`` and ``django/template/defaulttags.py``, respectively."
msgstr ""

#: ../../howto/custom-template-tags.txt:74
# e7a26d61aeaf4351ab8bdc472967d2d3
msgid "For more information on the :ttag:`load` tag, read its documentation."
msgstr ""

#: ../../howto/custom-template-tags.txt:79
# 3e0f7b5a36bd4d719ef31fb9eff916cb
msgid "Writing custom template filters"
msgstr ""

#: ../../howto/custom-template-tags.txt:81
# c774ae7f823e4dd6a4af814749152bd5
msgid "Custom filters are just Python functions that take one or two arguments:"
msgstr ""

#: ../../howto/custom-template-tags.txt:83
# 1bcfedbdffff45ee8759bc1b075060d3
msgid "The value of the variable (input) -- not necessarily a string."
msgstr ""

#: ../../howto/custom-template-tags.txt:84
# 3710917cb85b4377a0d0e7314ccbc08d
msgid "The value of the argument -- this can have a default value, or be left out altogether."
msgstr ""

#: ../../howto/custom-template-tags.txt:87
# ac6cf3c961044ce4a95c980a9c476e5b
msgid "For example, in the filter ``{{ var|foo:\"bar\" }}``, the filter ``foo`` would be passed the variable ``var`` and the argument ``\"bar\"``."
msgstr ""

#: ../../howto/custom-template-tags.txt:90
# b3695931bb31485fb7819f4a0285bc5f
msgid "Filter functions should always return something. They shouldn't raise exceptions. They should fail silently. In case of error, they should return either the original input or an empty string -- whichever makes more sense."
msgstr ""

#: ../../howto/custom-template-tags.txt:94
# 2db8f247392c4623a68acc3cf888a568
msgid "Here's an example filter definition:"
msgstr ""

#: ../../howto/custom-template-tags.txt:102
# 890436bb007d454c95f17a152008e0ba
msgid "And here's an example of how that filter would be used:"
msgstr ""

#: ../../howto/custom-template-tags.txt:108
# 3d4ea9e378ee498c869550cd2333feb6
msgid "Most filters don't take arguments. In this case, just leave the argument out of your function. Example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:118
# c6c896aaa73b44198bcae61a69317184
msgid "Registering custom filters"
msgstr ""

#: ../../howto/custom-template-tags.txt:122
# a948302ef557456f9041fcc11d41d468
msgid "Once you've written your filter definition, you need to register it with your ``Library`` instance, to make it available to Django's template language:"
msgstr ""

#: ../../howto/custom-template-tags.txt:130
# aa125b036dc14cefb7efb995869a98c1
msgid "The ``Library.filter()`` method takes two arguments:"
msgstr ""

#: ../../howto/custom-template-tags.txt:132
# 60a97f883ffd4d6dabcd85bf495229ae
msgid "The name of the filter -- a string."
msgstr ""

#: ../../howto/custom-template-tags.txt:133
#: ../../howto/custom-template-tags.txt:634
# 524944e94a6e4bc68480aade2f9fb2e4
# 38abc4cbf1584939b4933f5a71e23631
msgid "The compilation function -- a Python function (not the name of the function as a string)."
msgstr ""

#: ../../howto/custom-template-tags.txt:136
# 794ec0f73004424184e7b50249443ab9
msgid "You can use ``register.filter()`` as a decorator instead:"
msgstr ""

#: ../../howto/custom-template-tags.txt:148
# d99349a53bfc4d1aa865518ad9d24493
msgid "If you leave off the ``name`` argument, as in the second example above, Django will use the function's name as the filter name."
msgstr ""

#: ../../howto/custom-template-tags.txt:151
# 90a68e6b42c24c3db28382ff9bfe65f2
msgid "Finally, ``register.filter()`` also accepts three keyword arguments, ``is_safe``, ``needs_autoescape``, and ``expects_localtime``. These arguments are described in :ref:`filters and auto-escaping <filters-auto-escaping>` and :ref:`filters and time zones <filters-timezones>` below."
msgstr ""

#: ../../howto/custom-template-tags.txt:157
# 9c39d31e9dfa4eb592bfe396c0d360e2
msgid "Template filters that expect strings"
msgstr ""

#: ../../howto/custom-template-tags.txt:161
# 9635dbdb8334497ca60259c008bf0337
msgid "If you're writing a template filter that only expects a string as the first argument, you should use the decorator ``stringfilter``. This will convert an object to its string value before being passed to your function:"
msgstr ""

#: ../../howto/custom-template-tags.txt:177
# da7d1def27a349779bf626580e583cd9
msgid "This way, you'll be able to pass, say, an integer to this filter, and it won't cause an ``AttributeError`` (because integers don't have ``lower()`` methods)."
msgstr ""

#: ../../howto/custom-template-tags.txt:184
# cfc80a3c83ec4797a534ed3678d6ae59
msgid "Filters and auto-escaping"
msgstr ""

#: ../../howto/custom-template-tags.txt:186
# 62ccf795be534d1baa9076b0b23c6e8f
msgid "When writing a custom filter, give some thought to how the filter will interact with Django's auto-escaping behavior. Note that three types of strings can be passed around inside the template code:"
msgstr ""

#: ../../howto/custom-template-tags.txt:190
# 512951318aaf4e748f2bba8083348e24
msgid "**Raw strings** are the native Python ``str`` or ``unicode`` types. On output, they're escaped if auto-escaping is in effect and presented unchanged, otherwise."
msgstr ""

#: ../../howto/custom-template-tags.txt:194
# fc9ac2b3bf0f451f83d54051c6b62817
msgid "**Safe strings** are strings that have been marked safe from further escaping at output time. Any necessary escaping has already been done. They're commonly used for output that contains raw HTML that is intended to be interpreted as-is on the client side."
msgstr ""

#: ../../howto/custom-template-tags.txt:199
# add63b9ad3e246da9f966ba7412d554d
msgid "Internally, these strings are of type ``SafeBytes`` or ``SafeText``. They share a common base class of ``SafeData``, so you can test for them using code like:"
msgstr ""

#: ../../howto/custom-template-tags.txt:209
# ce22b07c719a40a3a6d1d5bc2fbd54f4
msgid "**Strings marked as \"needing escaping\"** are *always* escaped on output, regardless of whether they are in an :ttag:`autoescape` block or not. These strings are only escaped once, however, even if auto-escaping applies."
msgstr ""

#: ../../howto/custom-template-tags.txt:214
# fc2010ffa21440ea83053fc035000053
msgid "Internally, these strings are of type ``EscapeBytes`` or ``EscapeText``. Generally you don't have to worry about these; they exist for the implementation of the :tfilter:`escape` filter."
msgstr ""

#: ../../howto/custom-template-tags.txt:218
# 6dd20d6ead80488f8ad35c6cf8b1a571
msgid "Template filter code falls into one of two situations:"
msgstr ""

#: ../../howto/custom-template-tags.txt:220
# 4c988337ae58430b9f9df5695bbba8ab
msgid "Your filter does not introduce any HTML-unsafe characters (``<``, ``>``, ``'``, ``\"`` or ``&``) into the result that were not already present. In this case, you can let Django take care of all the auto-escaping handling for you. All you need to do is set the ``is_safe`` flag to ``True`` when you register your filter function, like so:"
msgstr ""

#: ../../howto/custom-template-tags.txt:232
# 217c9a9007bb4cebb0af8a2c9c0333b3
msgid "This flag tells Django that if a \"safe\" string is passed into your filter, the result will still be \"safe\" and if a non-safe string is passed in, Django will automatically escape it, if necessary."
msgstr ""

#: ../../howto/custom-template-tags.txt:236
# 305a6710e7f445f4888f3529cc8aef96
msgid "You can think of this as meaning \"this filter is safe -- it doesn't introduce any possibility of unsafe HTML.\""
msgstr ""

#: ../../howto/custom-template-tags.txt:239
# cc70da21500345c4abe0bcffea90dc33
msgid "The reason ``is_safe`` is necessary is because there are plenty of normal string operations that will turn a ``SafeData`` object back into a normal ``str`` or ``unicode`` object and, rather than try to catch them all, which would be very difficult, Django repairs the damage after the filter has completed."
msgstr ""

#: ../../howto/custom-template-tags.txt:245
# 44e06d2412364f40ad9ccb54facce335
msgid "For example, suppose you have a filter that adds the string ``xx`` to the end of any input. Since this introduces no dangerous HTML characters to the result (aside from any that were already present), you should mark your filter with ``is_safe``:"
msgstr ""

#: ../../howto/custom-template-tags.txt:256
# f24066244d274045a1cef4ec6545cfb7
msgid "When this filter is used in a template where auto-escaping is enabled, Django will escape the output whenever the input is not already marked as \"safe\"."
msgstr ""

#: ../../howto/custom-template-tags.txt:260
# d4205880093f4eeeaf7d4bd95ec8ca15
msgid "By default, ``is_safe`` is ``False``, and you can omit it from any filters where it isn't required."
msgstr ""

#: ../../howto/custom-template-tags.txt:263
# e3e81f8aa9484ab3a25699384c947684
msgid "Be careful when deciding if your filter really does leave safe strings as safe. If you're *removing* characters, you might inadvertently leave unbalanced HTML tags or entities in the result. For example, removing a ``>`` from the input might turn ``<a>`` into ``<a``, which would need to be escaped on output to avoid causing problems. Similarly, removing a semicolon (``;``) can turn ``&amp;`` into ``&amp``, which is no longer a valid entity and thus needs further escaping. Most cases won't be nearly this tricky, but keep an eye out for any problems like that when reviewing your code."
msgstr ""

#: ../../howto/custom-template-tags.txt:273
# 86999cd78f2e4a338ab2127c0ffb2a78
msgid "Marking a filter ``is_safe`` will coerce the filter's return value to a string.  If your filter should return a boolean or other non-string value, marking it ``is_safe`` will probably have unintended consequences (such as converting a boolean False to the string 'False')."
msgstr ""

#: ../../howto/custom-template-tags.txt:279
# 5b1827717c54481db57f1581bb53d180
msgid "Alternatively, your filter code can manually take care of any necessary escaping. This is necessary when you're introducing new HTML markup into the result. You want to mark the output as safe from further escaping so that your HTML markup isn't escaped further, so you'll need to handle the input yourself."
msgstr ""

#: ../../howto/custom-template-tags.txt:285
# 105550ca44a046f88f89527191cfadd7
msgid "To mark the output as a safe string, use :func:`django.utils.safestring.mark_safe`."
msgstr ""

#: ../../howto/custom-template-tags.txt:288
# 73fa8e088eca428cb52b6b18235d41a7
msgid "Be careful, though. You need to do more than just mark the output as safe. You need to ensure it really *is* safe, and what you do depends on whether auto-escaping is in effect. The idea is to write filters than can operate in templates where auto-escaping is either on or off in order to make things easier for your template authors."
msgstr ""

#: ../../howto/custom-template-tags.txt:294
# 1544c5f13340409a97daa1b57116c58a
msgid "In order for your filter to know the current auto-escaping state, set the ``needs_autoescape`` flag to ``True`` when you register your filter function. (If you don't specify this flag, it defaults to ``False``). This flag tells Django that your filter function wants to be passed an extra keyword argument, called ``autoescape``, that is ``True`` if auto-escaping is in effect and ``False`` otherwise."
msgstr ""

#: ../../howto/custom-template-tags.txt:301
# 5ce4252c034f4c61b1327325358d95be
msgid "For example, let's write a filter that emphasizes the first character of a string:"
msgstr ""

#: ../../howto/custom-template-tags.txt:322
# c3bdc0511e274eecb4da344bc7a23185
msgid "The ``needs_autoescape`` flag and the ``autoescape`` keyword argument mean that our function will know whether automatic escaping is in effect when the filter is called. We use ``autoescape`` to decide whether the input data needs to be passed through ``django.utils.html.conditional_escape`` or not. (In the latter case, we just use the identity function as the \"escape\" function.) The ``conditional_escape()`` function is like ``escape()`` except it only escapes input that is **not** a ``SafeData`` instance. If a ``SafeData`` instance is passed to ``conditional_escape()``, the data is returned unchanged."
msgstr ""

#: ../../howto/custom-template-tags.txt:332
# e27668975f494b139145d8dcc9d6cbf7
msgid "Finally, in the above example, we remember to mark the result as safe so that our HTML is inserted directly into the template without further escaping."
msgstr ""

#: ../../howto/custom-template-tags.txt:336
# ee271f1c2cd043038d28ea110b743483
msgid "There's no need to worry about the ``is_safe`` flag in this case (although including it wouldn't hurt anything). Whenever you manually handle the auto-escaping issues and return a safe string, the ``is_safe`` flag won't change anything either way."
msgstr ""

#: ../../howto/custom-template-tags.txt:344
# 56de71744f724ccbbb8e79e454c7152a
msgid "Filters and time zones"
msgstr ""

#: ../../howto/custom-template-tags.txt:346
# 363de76987a34c018f591135b7a156e2
msgid "If you write a custom filter that operates on :class:`~datetime.datetime` objects, you'll usually register it with the ``expects_localtime`` flag set to ``True``:"
msgstr ""

#: ../../howto/custom-template-tags.txt:359
# 1af52419852b48b096cda971fa216c20
msgid "When this flag is set, if the first argument to your filter is a time zone aware datetime, Django will convert it to the current time zone before passing it to your filter when appropriate, according to :ref:`rules for time zones conversions in templates <time-zones-in-templates>`."
msgstr ""

#: ../../howto/custom-template-tags.txt:365
# db8cbbeaeb804147a5a26bf9e68e09f9
msgid "Writing custom template tags"
msgstr ""

#: ../../howto/custom-template-tags.txt:367
# e95f27a88e7343a782e5b0ab3deab584
msgid "Tags are more complex than filters, because tags can do anything."
msgstr ""

#: ../../howto/custom-template-tags.txt:370
# 1d612fb651e2443d9879dbd83cb17e7d
msgid "A quick overview"
msgstr ""

#: ../../howto/custom-template-tags.txt:372
# da74efa4e9b0409c97665285767066fe
msgid "Above, this document explained that the template system works in a two-step process: compiling and rendering. To define a custom template tag, you specify how the compilation works and how the rendering works."
msgstr ""

#: ../../howto/custom-template-tags.txt:376
# 1f17d3c6b383415c95a29be3e3b15f44
msgid "When Django compiles a template, it splits the raw template text into ''nodes''. Each node is an instance of ``django.template.Node`` and has a ``render()`` method. A compiled template is, simply, a list of ``Node`` objects. When you call ``render()`` on a compiled template object, the template calls ``render()`` on each ``Node`` in its node list, with the given context. The results are all concatenated together to form the output of the template."
msgstr ""

#: ../../howto/custom-template-tags.txt:383
# c2d1d4a3e1aa40d9b8e65b501f025c35
msgid "Thus, to define a custom template tag, you specify how the raw template tag is converted into a ``Node`` (the compilation function), and what the node's ``render()`` method does."
msgstr ""

#: ../../howto/custom-template-tags.txt:388
# 3be7356857df4e3e9e9aae2e8d1d7e74
msgid "Writing the compilation function"
msgstr ""

#: ../../howto/custom-template-tags.txt:390
# 1a14aab3c86644439a86bcc99c664a46
msgid "For each template tag the template parser encounters, it calls a Python function with the tag contents and the parser object itself. This function is responsible for returning a ``Node`` instance based on the contents of the tag."
msgstr ""

#: ../../howto/custom-template-tags.txt:394
# 4f021d95d5a644f1a1265a6a1382aef5
msgid "For example, let's write a template tag, ``{% current_time %}``, that displays the current date/time, formatted according to a parameter given in the tag, in :func:`~time.strftime` syntax. It's a good idea to decide the tag syntax before anything else. In our case, let's say the tag should be used like this:"
msgstr ""

#: ../../howto/custom-template-tags.txt:403
# 3c703ed4b79947d583aa4de99c31e536
msgid "The parser for this function should grab the parameter and create a ``Node`` object:"
msgstr ""

#: ../../howto/custom-template-tags.txt:419
#: ../../howto/custom-template-tags.txt:472
# 7640ffca6c5842a2b7f904ad3c7e1264
# b74d79d49ca54492b28f4f8046e91b10
msgid "Notes:"
msgstr ""

#: ../../howto/custom-template-tags.txt:421
# dca3fe60f6c0447a865e2d0f30707b25
msgid "``parser`` is the template parser object. We don't need it in this example."
msgstr ""

#: ../../howto/custom-template-tags.txt:424
# 49ff5e4e765b4ba0949a1063ed991ee7
msgid "``token.contents`` is a string of the raw contents of the tag. In our example, it's ``'current_time \"%Y-%m-%d %I:%M %p\"'``."
msgstr ""

#: ../../howto/custom-template-tags.txt:427
# 3d6d0b171d874009a08cbdeb8ad3edaf
msgid "The ``token.split_contents()`` method separates the arguments on spaces while keeping quoted strings together. The more straightforward ``token.contents.split()`` wouldn't be as robust, as it would naively split on *all* spaces, including those within quoted strings. It's a good idea to always use ``token.split_contents()``."
msgstr ""

#: ../../howto/custom-template-tags.txt:433
# 5e84b5e1e4fb4f49b2d62bc09fd1e398
msgid "This function is responsible for raising ``django.template.TemplateSyntaxError``, with helpful messages, for any syntax error."
msgstr ""

#: ../../howto/custom-template-tags.txt:437
# 44134ba14ff44db0adfabc59de16c529
msgid "The ``TemplateSyntaxError`` exceptions use the ``tag_name`` variable. Don't hard-code the tag's name in your error messages, because that couples the tag's name to your function. ``token.contents.split()[0]`` will ''always'' be the name of your tag -- even when the tag has no arguments."
msgstr ""

#: ../../howto/custom-template-tags.txt:443
# b4c24662ca2d416db9b6b6cad3f55ee0
msgid "The function returns a ``CurrentTimeNode`` with everything the node needs to know about this tag. In this case, it just passes the argument -- ``\"%Y-%m-%d %I:%M %p\"``. The leading and trailing quotes from the template tag are removed in ``format_string[1:-1]``."
msgstr ""

#: ../../howto/custom-template-tags.txt:448
# 1132922ce2b04f2aad090033e2e1e453
msgid "The parsing is very low-level. The Django developers have experimented with writing small frameworks on top of this parsing system, using techniques such as EBNF grammars, but those experiments made the template engine too slow. It's low-level because that's fastest."
msgstr ""

#: ../../howto/custom-template-tags.txt:454
# 73908c167251482c815f5d00b89786dc
msgid "Writing the renderer"
msgstr ""

#: ../../howto/custom-template-tags.txt:456
# e13437bdf61d4601bde0ba3c561f2b1b
msgid "The second step in writing custom tags is to define a ``Node`` subclass that has a ``render()`` method."
msgstr ""

#: ../../howto/custom-template-tags.txt:459
# 33219b2166a24bfd966ff222638f1a76
msgid "Continuing the above example, we need to define ``CurrentTimeNode``:"
msgstr ""

#: ../../howto/custom-template-tags.txt:474
# c2903a72f88f43a786bedbcff0ba2357
msgid "``__init__()`` gets the ``format_string`` from ``do_current_time()``. Always pass any options/parameters/arguments to a ``Node`` via its ``__init__()``."
msgstr ""

#: ../../howto/custom-template-tags.txt:478
# 27c89c699166442bb0e592f638de70c7
msgid "The ``render()`` method is where the work actually happens."
msgstr ""

#: ../../howto/custom-template-tags.txt:480
# 960fea4b72c146308b5baf306bdd7432
msgid "``render()`` should generally fail silently, particularly in a production environment where :setting:`DEBUG` and :setting:`TEMPLATE_DEBUG` are ``False``. In some cases however, particularly if :setting:`TEMPLATE_DEBUG` is ``True``, this method may raise an exception to make debugging easier. For example, several core tags raise ``django.template.TemplateSyntaxError`` if they receive the wrong number or type of arguments."
msgstr ""

#: ../../howto/custom-template-tags.txt:487
# e30471f59e8746df940c8d3cebde0325
msgid "Ultimately, this decoupling of compilation and rendering results in an efficient template system, because a template can render multiple contexts without having to be parsed multiple times."
msgstr ""

#: ../../howto/custom-template-tags.txt:492
# 1190aa4d80024b5c9865faf0ad341ed4
msgid "Auto-escaping considerations"
msgstr ""

#: ../../howto/custom-template-tags.txt:494
# b2cc379cfdf1474f8feedc4bca9d0733
msgid "The output from template tags is **not** automatically run through the auto-escaping filters. However, there are still a couple of things you should keep in mind when writing a template tag."
msgstr ""

#: ../../howto/custom-template-tags.txt:498
# 990ddbad8bbc4ccda38d4b89c39087fa
msgid "If the ``render()`` function of your template stores the result in a context variable (rather than returning the result in a string), it should take care to call ``mark_safe()`` if appropriate. When the variable is ultimately rendered, it will be affected by the auto-escape setting in effect at the time, so content that should be safe from further escaping needs to be marked as such."
msgstr ""

#: ../../howto/custom-template-tags.txt:505
# 6f8c545f8d9a4f0686870a9f51e65588
msgid "Also, if your template tag creates a new context for performing some sub-rendering, set the auto-escape attribute to the current context's value. The ``__init__`` method for the ``Context`` class takes a parameter called ``autoescape`` that you can use for this purpose. For example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:519
# aa680620515c4f9e8369039bf7e0fe76
msgid "This is not a very common situation, but it's useful if you're rendering a template yourself. For example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:528
# 4f21484d3ba8400ebad6eee7153c6d32
msgid "If we had neglected to pass in the current ``context.autoescape`` value to our new ``Context`` in this example, the results would have *always* been automatically escaped, which may not be the desired behavior if the template tag is used inside a :ttag:`{% autoescape off %}<autoescape>` block."
msgstr ""

#: ../../howto/custom-template-tags.txt:536
# 4feed7e357fb45e7b68b815830073895
msgid "Thread-safety considerations"
msgstr ""

#: ../../howto/custom-template-tags.txt:538
# 41d0a3e3f64b402fbcd3864b4acf7cd0
msgid "Once a node is parsed, its ``render`` method may be called any number of times. Since Django is sometimes run in multi-threaded environments, a single node may be simultaneously rendering with different contexts in response to two separate requests. Therefore, it's important to make sure your template tags are thread safe."
msgstr ""

#: ../../howto/custom-template-tags.txt:544
# 4b8e22e9435f444fa31db191389ddc13
msgid "To make sure your template tags are thread safe, you should never store state information on the node itself. For example, Django provides a builtin :ttag:`cycle` template tag that cycles among a list of given strings each time it's rendered:"
msgstr ""

#: ../../howto/custom-template-tags.txt:557
# 8967ae8c6e4f402480811c5e8bb80a23
msgid "A naive implementation of ``CycleNode`` might look something like this:"
msgstr ""

#: ../../howto/custom-template-tags.txt:570
# 7dedac8b059347dab312ea7a187870cf
msgid "But, suppose we have two templates rendering the template snippet from above at the same time:"
msgstr ""

#: ../../howto/custom-template-tags.txt:573
# 147addf0f9d247828a9db414da43755b
msgid "Thread 1 performs its first loop iteration, ``CycleNode.render()`` returns 'row1'"
msgstr ""

#: ../../howto/custom-template-tags.txt:575
# c943c9a2db17475c889c8382f7a40b2a
msgid "Thread 2 performs its first loop iteration, ``CycleNode.render()`` returns 'row2'"
msgstr ""

#: ../../howto/custom-template-tags.txt:577
# 520fd3e827254724970cb6d9e7aa2c7c
msgid "Thread 1 performs its second loop iteration, ``CycleNode.render()`` returns 'row1'"
msgstr ""

#: ../../howto/custom-template-tags.txt:579
# a0ecac8b03984871bb78be6d1e705d0c
msgid "Thread 2 performs its second loop iteration, ``CycleNode.render()`` returns 'row2'"
msgstr ""

#: ../../howto/custom-template-tags.txt:582
# 8f7b5678cc6f43aaa1984b27613cf9b1
msgid "The CycleNode is iterating, but it's iterating globally. As far as Thread 1 and Thread 2 are concerned, it's always returning the same value. This is obviously not what we want!"
msgstr ""

#: ../../howto/custom-template-tags.txt:586
# f6ebb20af0fc4f8c8a3f7335a60d9fb7
msgid "To address this problem, Django provides a ``render_context`` that's associated with the ``context`` of the template that is currently being rendered. The ``render_context`` behaves like a Python dictionary, and should be used to store ``Node`` state between invocations of the ``render`` method."
msgstr ""

#: ../../howto/custom-template-tags.txt:591
# 67d7466566e244ca9b960eaa1c33fd39
msgid "Let's refactor our ``CycleNode`` implementation to use the ``render_context``:"
msgstr ""

#: ../../howto/custom-template-tags.txt:604
# 37d675b277084c7da87afabe19cb9eb5
msgid "Note that it's perfectly safe to store global information that will not change throughout the life of the ``Node`` as an attribute. In the case of ``CycleNode``, the ``cyclevars`` argument doesn't change after the ``Node`` is instantiated, so we don't need to put it in the ``render_context``. But state information that is specific to the template that is currently being rendered, like the current iteration of the ``CycleNode``, should be stored in the ``render_context``."
msgstr ""

#: ../../howto/custom-template-tags.txt:613
# 421c60ccf6364bbfb4e5d18dd8fa10d6
msgid "Notice how we used ``self`` to scope the ``CycleNode`` specific information within the ``render_context``. There may be multiple ``CycleNodes`` in a given template, so we need to be careful not to clobber another node's state information. The easiest way to do this is to always use ``self`` as the key into ``render_context``. If you're keeping track of several state variables, make ``render_context[self]`` a dictionary."
msgstr ""

#: ../../howto/custom-template-tags.txt:621
# 3938c010b2b94f02a9b31ee363cb4ec8
msgid "Registering the tag"
msgstr ""

#: ../../howto/custom-template-tags.txt:623
# dbb24a83491f40a6a7a65190c8873b7e
msgid "Finally, register the tag with your module's ``Library`` instance, as explained in \"Writing custom template filters\" above. Example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:630
# c7c8decd85d84881b4559f4e22bb0f62
msgid "The ``tag()`` method takes two arguments:"
msgstr ""

#: ../../howto/custom-template-tags.txt:632
# f4c46ab7cd164fc09dd7d1843b1094d7
msgid "The name of the template tag -- a string. If this is left out, the name of the compilation function will be used."
msgstr ""

#: ../../howto/custom-template-tags.txt:637
# a5457779762e49e09ab5244bed6e7ce9
msgid "As with filter registration, it is also possible to use this as a decorator:"
msgstr ""

#: ../../howto/custom-template-tags.txt:649
# d5f8836c2e9b430189c13f67e4a00164
msgid "If you leave off the ``name`` argument, as in the second example above, Django will use the function's name as the tag name."
msgstr ""

#: ../../howto/custom-template-tags.txt:653
# 69f99c47141c4017b65c68feae895b70
msgid "Passing template variables to the tag"
msgstr ""

#: ../../howto/custom-template-tags.txt:655
# 7a1146bbe12247668652e024bf28b6f6
msgid "Although you can pass any number of arguments to a template tag using ``token.split_contents()``, the arguments are all unpacked as string literals. A little more work is required in order to pass dynamic content (a template variable) to a template tag as an argument."
msgstr ""

#: ../../howto/custom-template-tags.txt:660
# de7fb351c7104389b37f1fbe8822a2e4
msgid "While the previous examples have formatted the current time into a string and returned the string, suppose you wanted to pass in a :class:`~django.db.models.DateTimeField` from an object and have the template tag format that date-time:"
msgstr ""

#: ../../howto/custom-template-tags.txt:669
# 1ed7ff2585af45bb937bd6d1c05aa44c
msgid "Initially, ``token.split_contents()`` will return three values:"
msgstr ""

#: ../../howto/custom-template-tags.txt:671
# d6aa2c495cae49279f8a68c7ec47ddfe
msgid "The tag name ``format_time``."
msgstr ""

#: ../../howto/custom-template-tags.txt:672
# b2bf8c5253cc47d5825092999f716a3a
msgid "The string ``\"blog_entry.date_updated\"`` (without the surrounding quotes)."
msgstr ""

#: ../../howto/custom-template-tags.txt:674
# 040cde1845be42efae6128b71801fcdd
msgid "The formatting string ``\"%Y-%m-%d %I:%M %p\"``. The return value from ``split_contents()`` will include the leading and trailing quotes for string literals like this."
msgstr ""

#: ../../howto/custom-template-tags.txt:678
# 6e97223c19a04905bfc3296463a0372f
msgid "Now your tag should begin to look like this:"
msgstr ""

#: ../../howto/custom-template-tags.txt:694
# 19138bee1ac7478bbd56b6673bbeb48d
msgid "You also have to change the renderer to retrieve the actual contents of the ``date_updated`` property of the ``blog_entry`` object.  This can be accomplished by using the ``Variable()`` class in ``django.template``."
msgstr ""

#: ../../howto/custom-template-tags.txt:698
# 3f8945eeccc24cbfb3676459504824f0
msgid "To use the ``Variable`` class, simply instantiate it with the name of the variable to be resolved, and then call ``variable.resolve(context)``. So, for example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:716
# 79f5f5a8fbb44dada58d6620ad393f53
msgid "Variable resolution will throw a ``VariableDoesNotExist`` exception if it cannot resolve the string passed to it in the current context of the page."
msgstr ""

#: ../../howto/custom-template-tags.txt:722
# bdb98204b25846a3bd62451e627d604b
msgid "Simple tags"
msgstr ""

#: ../../howto/custom-template-tags.txt:726
# 3f79fe2b910c43a999d4c788d55d7b62
msgid "Many template tags take a number of arguments -- strings or template variables -- and return a string after doing some processing based solely on the input arguments and some external information. For example, the ``current_time`` tag we wrote above is of this variety: we give it a format string, it returns the time as a string."
msgstr ""

#: ../../howto/custom-template-tags.txt:732
# b5b33b99666947efa46e5daba4b63c05
msgid "To ease the creation of these types of tags, Django provides a helper function, ``simple_tag``. This function, which is a method of ``django.template.Library``, takes a function that accepts any number of arguments, wraps it in a ``render`` function and the other necessary bits mentioned above and registers it with the template system."
msgstr ""

#: ../../howto/custom-template-tags.txt:738
#: ../../howto/custom-template-tags.txt:1076
# bcc89f0ca727438ab5c68606565ca80d
# 75764c1753954ecb80bcb1b4053f4168
msgid "Our earlier ``current_time`` function could thus be written like this:"
msgstr ""

#: ../../howto/custom-template-tags.txt:752
#: ../../howto/custom-template-tags.txt:1085
# 2417e4035a61464bb0f366485e1d73e4
# b20dbf46237a456db8f7e7becd741472
msgid "The decorator syntax also works:"
msgstr ""

#: ../../howto/custom-template-tags.txt:760
# 5e73ffe7a76145de92adcb240117a0e5
msgid "A few things to note about the ``simple_tag`` helper function:"
msgstr ""

#: ../../howto/custom-template-tags.txt:762
# 078c56d3c93b47598751f761276e3bb2
msgid "Checking for the required number of arguments, etc., has already been done by the time our function is called, so we don't need to do that."
msgstr ""

#: ../../howto/custom-template-tags.txt:764
# 1294e86b74164a47a8dc1aa5410429f7
msgid "The quotes around the argument (if any) have already been stripped away, so we just receive a plain string."
msgstr ""

#: ../../howto/custom-template-tags.txt:766
# 3d64b46cd5184571adc8fd0c3e9385a5
msgid "If the argument was a template variable, our function is passed the current value of the variable, not the variable itself."
msgstr ""

#: ../../howto/custom-template-tags.txt:769
#: ../../howto/custom-template-tags.txt:1101
# a6ac5dd16273464baa68482cadb65ff7
# 60d3052d05d3421ea4254818df1bd8c4
msgid "If your template tag needs to access the current context, you can use the ``takes_context`` argument when registering your tag:"
msgstr ""

#: ../../howto/custom-template-tags.txt:781
#: ../../howto/custom-template-tags.txt:1113
# a2d55f9fb74749bda46b53c1fbfe30ed
# d759208c08114cd7a22ca280d43dec48
msgid "Or, using decorator syntax:"
msgstr ""

#: ../../howto/custom-template-tags.txt:790
#: ../../howto/custom-template-tags.txt:1122
# cbf1122df26a476193410dcefa57bfc2
# a1429df86358440494b4e40ebee3c361
msgid "For more information on how the ``takes_context`` option works, see the section on :ref:`inclusion tags<howto-custom-template-tags-inclusion-tags>`."
msgstr ""

#: ../../howto/custom-template-tags.txt:793
# c131257dc9064633aef1735f5fe79239
msgid "If you need to rename your tag, you can provide a custom name for it:"
msgstr ""

#: ../../howto/custom-template-tags.txt:803
# 09a94ac7735640ca853a3db28bd1fcaa
msgid "``simple_tag`` functions may accept any number of positional or keyword arguments. For example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:815
#: ../../howto/custom-template-tags.txt:967
#: ../../howto/custom-template-tags.txt:1137
# 610a38983b5e45f992cd3d8ec0ec8f86
# 7c9c320db29449faa45ed8d5cf1a3252
# 358b64062f234ee2beaf1a7c76f45132
msgid "Then in the template any number of arguments, separated by spaces, may be passed to the template tag. Like in Python, the values for keyword arguments are set using the equal sign (\"``=``\") and must be provided after the positional arguments. For example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:827
# edecec9cb587487b906f846246cf3d77
msgid "Inclusion tags"
msgstr ""

#: ../../howto/custom-template-tags.txt:829
# 66df761bd69041e1b961611cab3ab0ee
msgid "Another common type of template tag is the type that displays some data by rendering *another* template. For example, Django's admin interface uses custom template tags to display the buttons along the bottom of the \"add/change\" form pages. Those buttons always look the same, but the link targets change depending on the object being edited -- so they're a perfect case for using a small template that is filled with details from the current object. (In the admin's case, this is the ``submit_row`` tag.)"
msgstr ""

#: ../../howto/custom-template-tags.txt:837
# 83ce3b69f13b4646a1dde2bcf70f769a
msgid "These sorts of tags are called \"inclusion tags\"."
msgstr ""

#: ../../howto/custom-template-tags.txt:839
# 53ca203718bb4941a4d10e779ea97571
msgid "Writing inclusion tags is probably best demonstrated by example. Let's write a tag that outputs a list of choices for a given ``Poll`` object, such as was created in the :ref:`tutorials <creating-models>`. We'll use the tag like this:"
msgstr ""

#: ../../howto/custom-template-tags.txt:847
# 0bd24e4c8b18462781af09b415bbcc80
msgid "...and the output will be something like this:"
msgstr ""

#: ../../howto/custom-template-tags.txt:857
# a5387dbcd8d8417280dda442f6128f37
msgid "First, define the function that takes the argument and produces a dictionary of data for the result. The important point here is we only need to return a dictionary, not anything more complex. This will be used as a template context for the template fragment. Example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:868
# 1c6194afeeb24ecebcdcf0810295af22
msgid "Next, create the template used to render the tag's output. This template is a fixed feature of the tag: the tag writer specifies it, not the template designer. Following our example, the template is very simple:"
msgstr ""

#: ../../howto/custom-template-tags.txt:880
# f64501ca8c2c4e08944123e15ddaa362
msgid "Now, create and register the inclusion tag by calling the ``inclusion_tag()`` method on a ``Library`` object. Following our example, if the above template is in a file called ``results.html`` in a directory that's searched by the template loader, we'd register the tag like this:"
msgstr ""

#: ../../howto/custom-template-tags.txt:890
# 0c658f83ce6d473ea7b4082139ac0002
msgid "Alternatively it is possible to register the inclusion tag using a :class:`django.template.Template` instance:"
msgstr ""

#: ../../howto/custom-template-tags.txt:899
# 9a02f05bc80e4618ab986e4f07c02d35
msgid "As always, decorator syntax works as well, so we could have written:"
msgstr ""

#: ../../howto/custom-template-tags.txt:907
# 1f58db4c97ec447c99c129ba2f7417d4
msgid "...when first creating the function."
msgstr ""

#: ../../howto/custom-template-tags.txt:909
# fa46af63f0e4435b93337032a45ac2a1
msgid "Sometimes, your inclusion tags might require a large number of arguments, making it a pain for template authors to pass in all the arguments and remember their order. To solve this, Django provides a ``takes_context`` option for inclusion tags. If you specify ``takes_context`` in creating a template tag, the tag will have no required arguments, and the underlying Python function will have one argument -- the template context as of when the tag was called."
msgstr ""

#: ../../howto/custom-template-tags.txt:916
# 75aae0ca030c4426be6ca6fd9688e8a3
msgid "For example, say you're writing an inclusion tag that will always be used in a context that contains ``home_link`` and ``home_title`` variables that point back to the main page. Here's what the Python function would look like:"
msgstr ""

#: ../../howto/custom-template-tags.txt:931
# 528b34e9dae244b8b5bffd11bcbb272e
msgid "(Note that the first parameter to the function *must* be called ``context``.)"
msgstr ""

#: ../../howto/custom-template-tags.txt:933
# 365f6760c81e40628dbec06eac44a7bf
msgid "In that ``register.inclusion_tag()`` line, we specified ``takes_context=True`` and the name of the template. Here's what the template ``link.html`` might look like:"
msgstr ""

#: ../../howto/custom-template-tags.txt:941
# d1bf3f9ff5ae4d0e9fd3201107d2b6a6
msgid "Then, any time you want to use that custom tag, load its library and call it without any arguments, like so:"
msgstr ""

#: ../../howto/custom-template-tags.txt:948
# 49f434fff2e743d09623b9900a00d543
msgid "Note that when you're using ``takes_context=True``, there's no need to pass arguments to the template tag. It automatically gets access to the context."
msgstr ""

#: ../../howto/custom-template-tags.txt:951
# 0040c15f157644ddb7a9bbcfae28e260
msgid "The ``takes_context`` parameter defaults to ``False``. When it's set to ``True``, the tag is passed the context object, as in this example. That's the only difference between this case and the previous ``inclusion_tag`` example."
msgstr ""

#: ../../howto/custom-template-tags.txt:955
# c2f2b93fdaa24c4bb7c62931e161469e
msgid "``inclusion_tag`` functions may accept any number of positional or keyword arguments. For example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:977
# df56a30622a6441cb3afebd3e92d6786
msgid "Setting a variable in the context"
msgstr ""

#: ../../howto/custom-template-tags.txt:979
# be87ef8b88024491a0d3d5a0b3e7fcaa
msgid "The above examples simply output a value. Generally, it's more flexible if your template tags set template variables instead of outputting values. That way, template authors can reuse the values that your template tags create."
msgstr ""

#: ../../howto/custom-template-tags.txt:983
# 12c6de9803274defbfd190de8a391517
msgid "To set a variable in the context, just use dictionary assignment on the context object in the ``render()`` method. Here's an updated version of ``CurrentTimeNode`` that sets a template variable ``current_time`` instead of outputting it:"
msgstr ""

#: ../../howto/custom-template-tags.txt:1000
# 78d132f2dd6343f59368d9b0ca7c8097
msgid "Note that ``render()`` returns the empty string. ``render()`` should always return string output. If all the template tag does is set a variable, ``render()`` should return the empty string."
msgstr ""

#: ../../howto/custom-template-tags.txt:1004
# 5c61181ea67a48ce8d38c074530732f3
msgid "Here's how you'd use this new version of the tag:"
msgstr ""

#: ../../howto/custom-template-tags.txt:1010
# 8ac839f51070495381aa260091c0bf66
msgid "Variable scope in context"
msgstr ""

#: ../../howto/custom-template-tags.txt:1012
# d54bb5f0912c4e649d76d821ef45877c
msgid "Any variable set in the context will only be available in the same ``block`` of the template in which it was assigned. This behavior is intentional; it provides a scope for variables so that they don't conflict with context in other blocks."
msgstr ""

#: ../../howto/custom-template-tags.txt:1017
# 6f85f3251a7445fcaabdcf259a9d8c13
msgid "But, there's a problem with ``CurrentTimeNode2``: The variable name ``current_time`` is hard-coded. This means you'll need to make sure your template doesn't use ``{{ current_time }}`` anywhere else, because the ``{% current_time %}`` will blindly overwrite that variable's value. A cleaner solution is to make the template tag specify the name of the output variable, like so:"
msgstr ""

#: ../../howto/custom-template-tags.txt:1029
# db71b7e8ed114c5fae6be601f0caa03e
msgid "To do that, you'll need to refactor both the compilation function and ``Node`` class, like so:"
msgstr ""

#: ../../howto/custom-template-tags.txt:1058
# 2dfa3147b30a4a27809517cc3df5ccce
msgid "The difference here is that ``do_current_time()`` grabs the format string and the variable name, passing both to ``CurrentTimeNode3``."
msgstr ""

#: ../../howto/custom-template-tags.txt:1061
# 9e24d818f4a54d39a7f576a7b5dd5694
msgid "Finally, if you only need to have a simple syntax for your custom context-updating template tag, you might want to consider using an :ref:`assignment tag <howto-custom-template-tags-assignment-tags>`."
msgstr ""

#: ../../howto/custom-template-tags.txt:1068
# 2bce3b0f39f14c6480b34031faf88e34
msgid "Assignment tags"
msgstr ""

#: ../../howto/custom-template-tags.txt:1070
# d6c4b127046e4a30a421e5fb06ddabc4
msgid "To ease the creation of tags setting a variable in the context, Django provides a helper function, ``assignment_tag``. This function works the same way as :ref:`simple_tag<howto-custom-template-tags-simple-tags>`, except that it stores the tag's result in a specified context variable instead of directly outputting it."
msgstr ""

#: ../../howto/custom-template-tags.txt:1093
# 7eab01c183994ff09f8d6025c4b98483
msgid "You may then store the result in a template variable using the ``as`` argument followed by the variable name, and output it yourself where you see fit:"
msgstr ""

#: ../../howto/custom-template-tags.txt:1125
# 9c3e7e32e5bb4f579e76a6fa1c874c69
msgid "``assignment_tag`` functions may accept any number of positional or keyword arguments. For example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:1147
# ca365092011649c6a0a88c4afff1b064
msgid "Parsing until another block tag"
msgstr ""

#: ../../howto/custom-template-tags.txt:1149
# d5060fced02f48f080ca836f08f73ccb
msgid "Template tags can work in tandem. For instance, the standard :ttag:`{% comment %}<comment>` tag hides everything until ``{% endcomment %}``. To create a template tag such as this, use ``parser.parse()`` in your compilation function."
msgstr ""

#: ../../howto/custom-template-tags.txt:1154
# dfa6c745bac1498286c8ca4b74675435
msgid "Here's how a simplified ``{% comment %}`` tag might be implemented:"
msgstr ""

#: ../../howto/custom-template-tags.txt:1168
# 2632c49aa06f497eaa000841694882eb
msgid "The actual implementation of :ttag:`{% comment %}<comment>` is slightly different in that it allows broken template tags to appear between ``{% comment %}`` and ``{% endcomment %}``. It does so by calling ``parser.skip_past('endcomment')`` instead of ``parser.parse(('endcomment',))`` followed by ``parser.delete_first_token()``, thus avoiding the generation of a node list."
msgstr ""

#: ../../howto/custom-template-tags.txt:1175
# caba3386554d4a3c99efb7b3230047bc
msgid "``parser.parse()`` takes a tuple of names of block tags ''to parse until''. It returns an instance of ``django.template.NodeList``, which is a list of all ``Node`` objects that the parser encountered ''before'' it encountered any of the tags named in the tuple."
msgstr ""

#: ../../howto/custom-template-tags.txt:1180
# 2d50bfe9e31245fb92221b57c49d3ae7
msgid "In ``\"nodelist = parser.parse(('endcomment',))\"`` in the above example, ``nodelist`` is a list of all nodes between the ``{% comment %}`` and ``{% endcomment %}``, not counting ``{% comment %}`` and ``{% endcomment %}`` themselves."
msgstr ""

#: ../../howto/custom-template-tags.txt:1185
# 47f948b923ad46e7bc2fe7255cfaadd6
msgid "After ``parser.parse()`` is called, the parser hasn't yet \"consumed\" the ``{% endcomment %}`` tag, so the code needs to explicitly call ``parser.delete_first_token()``."
msgstr ""

#: ../../howto/custom-template-tags.txt:1189
# 692a85d5483d47099f678d469468e787
msgid "``CommentNode.render()`` simply returns an empty string. Anything between ``{% comment %}`` and ``{% endcomment %}`` is ignored."
msgstr ""

#: ../../howto/custom-template-tags.txt:1193
# 7129dbf3fc224fb0aae1e43088ed515c
msgid "Parsing until another block tag, and saving contents"
msgstr ""

#: ../../howto/custom-template-tags.txt:1195
# 6f4d82bfc3574a10b04a8c68f7f2568c
msgid "In the previous example, ``do_comment()`` discarded everything between ``{% comment %}`` and ``{% endcomment %}``. Instead of doing that, it's possible to do something with the code between block tags."
msgstr ""

#: ../../howto/custom-template-tags.txt:1199
# b14bcf63e16e4c398a4bf49977eb698e
msgid "For example, here's a custom template tag, ``{% upper %}``, that capitalizes everything between itself and ``{% endupper %}``."
msgstr ""

#: ../../howto/custom-template-tags.txt:1202
# 286a69a94f9a4f81b78ca4aa465684be
msgid "Usage:"
msgstr ""

#: ../../howto/custom-template-tags.txt:1208
# a5f0477be15940718423a0588015875a
msgid "As in the previous example, we'll use ``parser.parse()``. But this time, we pass the resulting ``nodelist`` to the ``Node``:"
msgstr ""

#: ../../howto/custom-template-tags.txt:1225
# a6497b3252ec47a9ae1fd32e98834461
msgid "The only new concept here is the ``self.nodelist.render(context)`` in ``UpperNode.render()``."
msgstr ""

#: ../../howto/custom-template-tags.txt:1228
# 45f884820e224d909c5b8fa09a0bd0f2
msgid "For more examples of complex rendering, see the source code for :ttag:`{% if %}<if>`, :ttag:`{% for %}<for>`, :ttag:`{% ifequal %}<ifequal>` or :ttag:`{% ifchanged %}<ifchanged>`. They live in ``django/template/defaulttags.py``."
msgstr ""

#: ../../howto/deployment/checklist.txt:3
# 29b4ec115fc24d7087c7a7edd573e92c
msgid "Deployment checklist"
msgstr ""

#: ../../howto/deployment/checklist.txt:5
# 0d053da68bad43538afe0a608d9f89e2
msgid "The Internet is a hostile environment. Before deploying your Django project, you should take some time to review your settings, with security, performance, and operations in mind."
msgstr ""

#: ../../howto/deployment/checklist.txt:9
# 85aa5973394d4d9ea1e02b1c4c798915
msgid "Django includes many :doc:`security features </topics/security>`. Some are built-in and always enabled. Others are optional because they aren't always appropriate, or because they're inconvenient for development. For example, forcing HTTPS may not be suitable for all websites, and it's impractical for local development."
msgstr ""

#: ../../howto/deployment/checklist.txt:15
# f495020234c0480a85550c9c1d452ad8
msgid "Performance optimizations are another category of trade-offs with convenience. For instance, caching is useful in production, less so for local development. Error reporting needs are also widely different."
msgstr ""

#: ../../howto/deployment/checklist.txt:19
# fcc8b05fc9cd47b78441c3084a919681
msgid "The following checklist includes settings that:"
msgstr ""

#: ../../howto/deployment/checklist.txt:21
# 1d137e6f75c64a0db2c2f3e47d3eb9fa
msgid "must be set properly for Django to provide the expected level of security;"
msgstr ""

#: ../../howto/deployment/checklist.txt:22
# f16db24b4e0b408782ae2a778d19f159
msgid "are expected to be different in each environment;"
msgstr ""

#: ../../howto/deployment/checklist.txt:23
# d1588ffb54734123a33d29b66c199347
msgid "enable optional security features;"
msgstr ""

#: ../../howto/deployment/checklist.txt:24
# 0567cd01e1b248f08778bb23706ba77f
msgid "enable performance optimizations;"
msgstr ""

#: ../../howto/deployment/checklist.txt:25
# 800614bcfe5a42d7bb099e102520fa15
msgid "provide error reporting."
msgstr ""

#: ../../howto/deployment/checklist.txt:27
# d61e70181e8c4d13918729321b867da6
msgid "Many of these settings are sensitive and should be treated as confidential. If you're releasing the source code for your project, a common practice is to publish suitable settings for development, and to use a private settings module for production."
msgstr ""

#: ../../howto/deployment/checklist.txt:33
# d01e0582f77d4a25a3d7dbbc0c4c02c4
msgid "Critical settings"
msgstr ""

#: ../../howto/deployment/checklist.txt:36
# bbee8039630747ceb5252450732554b0
msgid ":setting:`SECRET_KEY`"
msgstr ""

#: ../../howto/deployment/checklist.txt:38
# a1e2d60deb424ace86f247d416b0384e
msgid "**The secret key must be a large random value and it must be kept secret.**"
msgstr ""

#: ../../howto/deployment/checklist.txt:40
# 1af656bea89e4c4d8a18d8f10391be26
msgid "Make sure that the key used in production isn't used anywhere else and avoid committing it to source control. This reduces the number of vectors from which an attacker may acquire the key."
msgstr ""

#: ../../howto/deployment/checklist.txt:44
# 1bd38d9d83384cea8e75e2f6cc59846e
msgid "Instead of hardcoding the secret key in your settings module, consider loading it from an environment variable::"
msgstr ""

#: ../../howto/deployment/checklist.txt:50
# f288127ded074877ac5b576cbca81a4c
msgid "or from a file::"
msgstr ""

#: ../../howto/deployment/checklist.txt:56
# 55a88fd9bebf4c01a23b0d1422e77ca2
msgid ":setting:`DEBUG`"
msgstr ""

#: ../../howto/deployment/checklist.txt:58
# 45d8f07a8c9b45d9821b3f703ee93c9c
msgid "**You must never enable debug in production.**"
msgstr ""

#: ../../howto/deployment/checklist.txt:60
# cc6d049955904095bd30b4a5607ae0a2
msgid "You're certainly developing your project with :setting:`DEBUG = True <DEBUG>`, since this enables handy features like full tracebacks in your browser."
msgstr ""

#: ../../howto/deployment/checklist.txt:63
# 52682030006d4a77b682b9c1609b3ba9
msgid "For a production environment, though, this is a really bad idea, because it leaks lots of information about your project: excerpts of your source code, local variables, settings, libraries used, etc."
msgstr ""

#: ../../howto/deployment/checklist.txt:68
# ac5c4633530b418f8dd2359faa83942e
msgid "Environment-specific settings"
msgstr ""

#: ../../howto/deployment/checklist.txt:71
# fb4437b10968482090c0c852d462b929
msgid ":setting:`ALLOWED_HOSTS`"
msgstr ""

#: ../../howto/deployment/checklist.txt:73
# 349af1330b64437dae4fd43d00b66b36
msgid "When :setting:`DEBUG = False <DEBUG>`, Django doesn't work at all without a suitable value for :setting:`ALLOWED_HOSTS`."
msgstr ""

#: ../../howto/deployment/checklist.txt:76
# 55f67be441304542b9cd516bdaef096d
msgid "This setting is required to protect your site against some CSRF attacks. If you use a wildcard, you must perform your own validation of the ``Host`` HTTP header, or otherwise ensure that you aren't vulnerable to this category of attacks."
msgstr ""

#: ../../howto/deployment/checklist.txt:82
# 5c1706f438854e7b8885f39d7255ad14
msgid ":setting:`CACHES`"
msgstr ""

#: ../../howto/deployment/checklist.txt:84
# 0351d429bb594441badc5dd910ba5f75
msgid "If you're using a cache, connection parameters may be different in development and in production."
msgstr ""

#: ../../howto/deployment/checklist.txt:87
# 84939f6b8bce48bab9ca3698666365a8
msgid "Cache servers often have weak authentication. Make sure they only accept connections from your application servers."
msgstr ""

#: ../../howto/deployment/checklist.txt:90
# 8740b0e706c2419f9f89c902ac330048
msgid "If you're using Memcached, consider using :ref:`cached sessions <cached-sessions-backend>` to improve performance."
msgstr ""

#: ../../howto/deployment/checklist.txt:94
# 73b2bac5619a47f19f79850dda96acab
msgid ":setting:`DATABASES`"
msgstr ""

#: ../../howto/deployment/checklist.txt:96
# f51f4c4cd85c4b6c9268875ddc14915d
msgid "Database connection parameters are probably different in development and in production."
msgstr ""

#: ../../howto/deployment/checklist.txt:99
# e4891f39114f4aa28f36eb43280aa462
msgid "Database passwords are very sensitive. You should protect them exactly like :setting:`SECRET_KEY`."
msgstr ""

#: ../../howto/deployment/checklist.txt:102
# 71f593b034b548d7a9fddb22e298fe0a
msgid "For maximum security, make sure database servers only accept connections from your application servers."
msgstr ""

#: ../../howto/deployment/checklist.txt:105
# 2f8bc754e24b4cce9d7ba8126cf9c234
msgid "If you haven't set up backups for your database, do it right now!"
msgstr ""

#: ../../howto/deployment/checklist.txt:108
# a35eb761340d4958aa077043d293529b
msgid ":setting:`EMAIL_BACKEND` and related settings"
msgstr ""

#: ../../howto/deployment/checklist.txt:110
# 2368cc7a6a5a49e3903830c0caa51a8e
msgid "If your site sends emails, these values need to be set correctly."
msgstr ""

#: ../../howto/deployment/checklist.txt:113
# 2ace51e524cc4bfab79ae71f299128bb
msgid ":setting:`STATIC_ROOT` and :setting:`STATIC_URL`"
msgstr ""

#: ../../howto/deployment/checklist.txt:115
# 8557d20cea0047d08927c34661bef42c
msgid "Static files are automatically served by the development server. In production, you must define a :setting:`STATIC_ROOT` directory where :djadmin:`collectstatic` will copy them."
msgstr ""

#: ../../howto/deployment/checklist.txt:119
# 1b72682e9f594676aba88732b8cc8196
msgid "See :doc:`/howto/static-files/index` for more information."
msgstr ""

#: ../../howto/deployment/checklist.txt:122
# 316430b892cc4e7dab6fe31145dabc6a
msgid ":setting:`MEDIA_ROOT` and :setting:`MEDIA_URL`"
msgstr ""

#: ../../howto/deployment/checklist.txt:124
# 2469d99c6bde44a88cfe4baa5a82c744
msgid "Media files are uploaded by your users. They're untrusted! Make sure your web server never attempt to interpret them. For instance, if a user uploads a ``.php`` file , the web server shouldn't execute it."
msgstr ""

#: ../../howto/deployment/checklist.txt:128
# e3bfe7d7adfe4e0e96393e5a86fca049
msgid "Now is a good time to check your backup strategy for these files."
msgstr ""

#: ../../howto/deployment/checklist.txt:131
# f38c76d9c9544397ab1ebba86e982666
msgid "HTTPS"
msgstr ""

#: ../../howto/deployment/checklist.txt:133
# 13d941b6bf874658ba935869af24b266
msgid "Any website which allows users to log in should enforce site-wide HTTPS to avoid transmitting access tokens in clear. In Django, access tokens include the login/password, the session cookie, and password reset tokens. (You can't do much to protect password reset tokens if you're sending them by email.)"
msgstr ""

#: ../../howto/deployment/checklist.txt:138
# 642d6f28a298457cad3a1b31ac2dc2c2
msgid "Protecting sensitive areas such as the user account or the admin isn't sufficient, because the same session cookie is used for HTTP and HTTPS. Your web server must redirect all HTTP traffic to HTTPS, and only transmit HTTPS requests to Django."
msgstr ""

#: ../../howto/deployment/checklist.txt:143
# 4d878d9a02d54333b4455dec5002a740
msgid "Once you've set up HTTPS, enable the following settings."
msgstr ""

#: ../../howto/deployment/checklist.txt:146
# 57d3caab646a4ec3b15c215f196cf648
msgid ":setting:`CSRF_COOKIE_SECURE`"
msgstr ""

#: ../../howto/deployment/checklist.txt:148
# fadf540393a64ac39d070a0bdda290f1
msgid "Set this to ``True`` to avoid transmitting the CSRF cookie over HTTP accidentally."
msgstr ""

#: ../../howto/deployment/checklist.txt:152
# 137ffec796214e8eb96a33372360e73d
msgid ":setting:`SESSION_COOKIE_SECURE`"
msgstr ""

#: ../../howto/deployment/checklist.txt:154
# d47ac4d738aa4cde9d7678e33be5be36
msgid "Set this to ``True`` to avoid transmitting the session cookie over HTTP accidentally."
msgstr ""

#: ../../howto/deployment/checklist.txt:158
# 042fc761e1d04060be5b76e30bfbbf05
msgid "Performance optimizations"
msgstr ""

#: ../../howto/deployment/checklist.txt:160
# 484e509dc69944ddb081eb3b85d4bbd5
msgid "Setting :setting:`DEBUG = False <DEBUG>` disables several features that are only useful in development. In addition, you can tune the following settings."
msgstr ""

#: ../../howto/deployment/checklist.txt:164
# 5d3b458d93bf461596943e2a32117d4b
msgid ":setting:`CONN_MAX_AGE`"
msgstr ""

#: ../../howto/deployment/checklist.txt:166
# 63e687be518d4db9b7169b3bd6460232
msgid "Enabling :ref:`persistent database connections <persistent-database-connections>` can result in a nice speed-up when connecting to the database accounts for a significant part of the request processing time."
msgstr ""

#: ../../howto/deployment/checklist.txt:171
# 54a09a74b5634b6fa300d05e69e36038
msgid "This helps a lot on virtualized hosts with limited network performance."
msgstr ""

#: ../../howto/deployment/checklist.txt:174
# 9c2ab50dd5304b40a0ea34b85c699082
msgid ":setting:`TEMPLATE_LOADERS`"
msgstr ""

#: ../../howto/deployment/checklist.txt:176
# e2acc4acbbd5455985611a22f8a23cfc
msgid "Enabling the cached template loader often improves performance drastically, as it avoids compiling each template every time it needs to be rendered. See the :ref:`template loaders docs <template-loaders>` for more information."
msgstr ""

#: ../../howto/deployment/checklist.txt:181
#: ../../howto/error-reporting.txt:2
# d67811246b244ad6ba8b907764fa61ce
# 9c9b763ad0d347abb8d07d2c202bd815
msgid "Error reporting"
msgstr ""

#: ../../howto/deployment/checklist.txt:183
# eef92c3ec3164bb991b4f477a411a7e7
msgid "By the time you push your code to production, it's hopefully robust, but you can't rule out unexpected errors. Thankfully, Django can capture errors and notify you accordingly."
msgstr ""

#: ../../howto/deployment/checklist.txt:188
# 774bfd34aaca422f9312786211f2f098
msgid ":setting:`LOGGING`"
msgstr ""

#: ../../howto/deployment/checklist.txt:190
# 045302804b2e4e51b162c9de6ac203fe
msgid "Review your logging configuration before putting your website in production, and check that it works as expected as soon as you have received some traffic."
msgstr ""

#: ../../howto/deployment/checklist.txt:193
# f92fc6ecbc5f40e4bfb3e5ca76110253
msgid "See :doc:`/topics/logging` for details on logging."
msgstr ""

#: ../../howto/deployment/checklist.txt:196
# 8ee7fc84e77742959cc7362828a2a003
msgid ":setting:`ADMINS` and :setting:`MANAGERS`"
msgstr ""

#: ../../howto/deployment/checklist.txt:198
# 8005c316e20247539d3413ea519db369
msgid ":setting:`ADMINS` will be notified of 500 errors by email."
msgstr ""

#: ../../howto/deployment/checklist.txt:200
# b8b2c464a75f4284a330b4bd8245e730
msgid ":setting:`MANAGERS` will be notified of 404 errors. :setting:`IGNORABLE_404_URLS` can help filter out spurious reports."
msgstr ""

#: ../../howto/deployment/checklist.txt:203
# fcb3315342984de78a197c8614c28349
msgid "See :doc:`/howto/error-reporting` for details on error reporting by email."
msgstr ""

#: ../../howto/deployment/checklist.txt:213
# f224cac042654a94aaa89001367509ef
msgid "Customize the default error views"
msgstr ""

#: ../../howto/deployment/checklist.txt:215
# df62b90d4ead45a087f2f6971ae2d3a8
msgid "Django includes default views and templates for several HTTP error codes. You may want to override the default templates by creating the following templates in your root template directory: ``404.html``, ``500.html``, ``403.html``, and ``400.html``. The default views should suffice for 99% of Web applications, but if you desire to customize them, see these instructions which also contain details about the default templates:"
msgstr ""

#: ../../howto/deployment/checklist.txt:222
# d959ff2125734f93afadd59a1154b643
msgid ":ref:`http_not_found_view`"
msgstr ""

#: ../../howto/deployment/checklist.txt:223
# e9ce1d55dc73420d86dd680abbe9bc45
msgid ":ref:`http_internal_server_error_view`"
msgstr ""

#: ../../howto/deployment/checklist.txt:224
# 0caf401126174148af4e3981047cf1a9
msgid ":ref:`http_forbidden_view`"
msgstr ""

#: ../../howto/deployment/checklist.txt:225
# c816274e098b4e34ab3efb1c9c98c823
msgid ":ref:`http_bad_request_view`"
msgstr ""

#: ../../howto/deployment/checklist.txt:228
# 8851c9cc1bd745af8778164fb8e2d272
msgid "Miscellaneous"
msgstr ""

#: ../../howto/deployment/checklist.txt:231
# bc5a7d879b1c4f8190a2a4897439b117
msgid ":setting:`ALLOWED_INCLUDE_ROOTS`"
msgstr ""

#: ../../howto/deployment/checklist.txt:233
# 239712e63d104e09899b3491f9a03290
msgid "This setting is required if you're using the :ttag:`ssi` template tag."
msgstr ""

#: ../../howto/deployment/checklist.txt:236
# fc6d5cec8b9743ea996f5c6210460165
msgid "Python Options"
msgstr ""

#: ../../howto/deployment/checklist.txt:238
# f1277c8161f64cffb508757f562b86ce
msgid "If you're using Python 2.6.8+, it's strongly recommended that you invoke the Python process running your Django application using the `-R`_ option or with the :envvar:`PYTHONHASHSEED` environment variable set to ``random``."
msgstr ""

#: ../../howto/deployment/checklist.txt:242
# 8e7d4a442626464996c0e7c112a68426
msgid "These options help protect your site from denial-of-service (DoS) attacks triggered by carefully crafted inputs. Such an attack can drastically increase CPU usage by causing worst-case performance when creating ``dict`` instances. See `oCERT advisory #2011-003 <http://www.ocert.org/advisories/ocert-2011-003.html>`_ for more information."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:3
# 44176e59ec2545978d25b6d7836fbe7c
msgid "How to use Django with FastCGI, SCGI, or AJP"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:7
# 6e4364b4ec00442fa2817303eb7c2ab0
msgid "Although :doc:`WSGI</howto/deployment/wsgi/index>` is the preferred deployment platform for Django, many people use shared hosting, on which protocols such as FastCGI, SCGI or AJP are the only viable options."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:11
#: ../../howto/deployment/fastcgi.txt:61
#: ../../howto/deployment/fastcgi.txt:335
# 46d5d2f90c4d472f88de94352ce272f7
# 9aa2795139464a5f82a9bd67cdff07a7
# fc4963ebdf4e47b284306f17f97f459d
msgid "Note"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:13
# 9aef649bfba545319a27270cd1b88362
msgid "This document primarily focuses on FastCGI. Other protocols, such as SCGI and AJP, are also supported, through the ``flup`` Python package. See the Protocols_ section below for specifics about SCGI and AJP."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:17
# 5fdb7ed1102a47ffb60e11f146621b08
msgid "Essentially, FastCGI is an efficient way of letting an external application serve pages to a Web server. The Web server delegates the incoming Web requests (via a socket) to FastCGI, which executes the code and passes the response back to the Web server, which, in turn, passes it back to the client's Web browser."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:22
# 1e0e7c411ee9406c94e44862ca3587e6
msgid "Like WSGI, FastCGI allows code to stay in memory, allowing requests to be served with no startup time. While e.g. :doc:`mod_wsgi</howto/deployment/wsgi/modwsgi>` can either be configured embedded in the Apache Web server process or as a separate daemon process, a FastCGI process never runs inside the Web server process, always in a separate, persistent process."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:31
# 6d1e8675c9744b69a88852b223680e08
msgid "Why run code in a separate process?"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:33
# 4e306012a1ef4e6785f348bdb37ec5ff
msgid "The traditional ``mod_*`` arrangements in Apache embed various scripting languages (most notably PHP, Python and Perl) inside the process space of your Web server. Although this lowers startup time -- because code doesn't have to be read off disk for every request -- it comes at the cost of memory use."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:39
# ff38d7228a7c4a02883a6cb08e8d950e
msgid "Due to the nature of FastCGI, it's even possible to have processes that run under a different user account than the Web server process. That's a nice security benefit on shared systems, because it means you can secure your code from other users."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:45
# 5aefc35dd9ec4ed68df1511f3d2a1f3d
msgid "Prerequisite: flup"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:47
# 142f978506874e90beef2ddc42aa87c4
msgid "Before you can start using FastCGI with Django, you'll need to install flup_, a Python library for dealing with FastCGI. Version 0.5 or newer should work fine."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:53
# 91ea6a0444a54c4aabbcb26d18b4ca53
msgid "Starting your FastCGI server"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:55
# 3fb5322fbae44abcaf20fc609e88446e
msgid "FastCGI operates on a client-server model, and in most cases you'll be starting the FastCGI process on your own. Your Web server (be it Apache, lighttpd, or otherwise) only contacts your Django-FastCGI process when the server needs a dynamic page to be loaded. Because the daemon is already running with the code in memory, it's able to serve the response very quickly."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:63
# ebdb499ad6774926baf8581179e15a22
msgid "If you're on a shared hosting system, you'll probably be forced to use Web server-managed FastCGI processes. See the section below on running Django with Web server-managed processes for more information."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:67
# eed585f49f3b4f9e9ed19c416cf71ea3
msgid "A Web server can connect to a FastCGI server in one of two ways: It can use either a Unix domain socket (a \"named pipe\" on Win32 systems), or it can use a TCP socket. What you choose is a manner of preference; a TCP socket is usually easier due to permissions issues."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:72
# ddebbede8e6349d9b56b821efd1a67c0
msgid "To start your server, first change into the directory of your project (wherever your :doc:`manage.py </ref/django-admin>` is), and then run the :djadmin:`runfcgi` command::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:78
# d84b5fcf456344c9927d1ef2b95a0797
msgid "If you specify ``help`` as the only option after :djadmin:`runfcgi`, it'll display a list of all the available options."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:81
# 1dc8e5ce4ef64e73b8202d7940143ef3
msgid "You'll need to specify either a :djadminopt:`socket`, a :djadminopt:`protocol` or both :djadminopt:`host` and :djadminopt:`port`. Then, when you set up your Web server, you'll just need to point it at the host/port or socket you specified when starting the FastCGI server. See the examples_, below."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:87
# cccdc4d9aacc4aa192f3c124f4c40c4a
msgid "Protocols"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:89
# 35ba106d59f8451aaa9c38f8e5891fca
msgid "Django supports all the protocols that flup_ does, namely fastcgi_, `SCGI`_ and `AJP1.3`_ (the Apache JServ Protocol, version 1.3). Select your preferred protocol by using the :djadminopt:`protocol=\\<protocol_name\\> <protocol>` option with ``./manage.py runfcgi`` -- where ``<protocol_name>`` may be one of: ``fcgi`` (the default), ``scgi`` or ``ajp``. For example::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:103
# ea096e1365b64de388f7feba306245c4
msgid "Examples"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:105
# 744c8499e7804359ba7c268bab3bd1aa
msgid "Running a threaded server on a TCP port::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:109
# f9ec319880ae451f8a54dc717665a7f5
msgid "Running a preforked server on a Unix domain socket::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:113
# f94e42f126ab470da68e709da10849f9
msgid "Socket security"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:115
# 19248b4a828b439ab08ce9996ea516ce
msgid "Django's default umask requires that the web server and the Django fastcgi process be run with the same group **and** user. For increased security, you can run them under the same group but as different users. If you do this, you will need to set the umask to 0002 using the ``umask`` argument to ``runfcgi``."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:121
# 7b02894058d24fed82b3e953c1079a40
msgid "Run without daemonizing (backgrounding) the process (good for debugging)::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:126
# 6e5ccd13683740879f2a82a49e038fd4
msgid "Stopping the FastCGI daemon"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:128
# ee7f41b2d18b4e529e6cdae207850ad7
msgid "If you have the process running in the foreground, it's easy enough to stop it: Simply hitting ``Ctrl-C`` will stop and quit the FastCGI server. However, when you're dealing with background processes, you'll need to resort to the Unix ``kill`` command."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:133
# 181782af85864c8786f4e0b57ba61753
msgid "If you specify the :djadminopt:`pidfile` option to :djadmin:`runfcgi`, you can kill the running FastCGI daemon like this::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:138
# 98f5d629946e43c4a17bbcef2e916e2f
msgid "...where ``$PIDFILE`` is the ``pidfile`` you specified."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:140
# 9b59db7fbea54f419fdb19b65ad6ab21
msgid "To easily restart your FastCGI daemon on Unix, try this small shell script::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:160
# 8619c4c89e0b43b2aea44ee294736c25
msgid "Apache setup"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:162
# da2d95a787cb4a90bf10a38653d17d36
msgid "To use Django with Apache and FastCGI, you'll need Apache installed and configured, with `mod_fastcgi`_ installed and enabled. Consult the Apache documentation for instructions."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:166
# cb41daf609694da594b9a232fc11d225
msgid "Once you've got that set up, point Apache at your Django FastCGI instance by editing the ``httpd.conf`` (Apache configuration) file. You'll need to do two things:"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:170
# 242c148f51da4798aaf4ed799be569ed
msgid "Use the ``FastCGIExternalServer`` directive to specify the location of your FastCGI server."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:172
# c6e1a82253b74e4da43c747995e94dec
msgid "Use ``mod_rewrite`` to point URLs at FastCGI as appropriate."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:177
# 2b019bfd6a2643fabdf55bf37302e713
msgid "Specifying the location of the FastCGI server"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:179
# 0fcd3eb72bb44033847acb340688429f
msgid "The ``FastCGIExternalServer`` directive tells Apache how to find your FastCGI server. As the `FastCGIExternalServer docs`_ explain, you can specify either a ``socket`` or a ``host``. Here are examples of both:"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:191
# 5caea5d6c70f4603a8f732d48918957c
msgid "In either case, the file ``/home/user/public_html/mysite.fcgi`` doesn't actually have to exist. It's just a URL used by the Web server internally -- a hook for signifying which requests at a URL should be handled by FastCGI. (More on this in the next section.)"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:199
# bf3448323f454985ae9906eb9c50fb68
msgid "Using mod_rewrite to point URLs at FastCGI"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:201
# 4ec37db7bd51472bb44c5da7ef449592
msgid "The second step is telling Apache to use FastCGI for URLs that match a certain pattern. To do this, use the `mod_rewrite`_ module and rewrite URLs to ``mysite.fcgi`` (or whatever you specified in the ``FastCGIExternalServer`` directive, as explained in the previous section)."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:206
# 855c248369264fae9dc69992ac6f798a
msgid "In this example, we tell Apache to use FastCGI to handle any request that doesn't represent a file on the filesystem and doesn't start with ``/media/``. This is probably the most common case, if you're using Django's admin site:"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:224
# 7e3127801fa942548d3583962f13f165
msgid "Django will automatically use the pre-rewrite version of the URL when constructing URLs with the :ttag:`{% url %}<url>` template tag (and similar methods)."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:229
# b8e4d73248734eac9c1955ea00ad987f
msgid "Using mod_fcgid as alternative to mod_fastcgi"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:231
# 0e7a6e5f70e14690bd66f8a07ea0f651
msgid "Another way to serve applications through FastCGI is by using Apache's `mod_fcgid`_ module. Compared to mod_fastcgi mod_fcgid handles FastCGI applications differently in that it manages the spawning of worker processes by itself and doesn't offer something like ``FastCGIExternalServer``. This means that the configuration looks slightly different."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:237
# 80729704e0d74af1b059105f782c82f7
msgid "In effect, you have to go the way of adding a script handler similar to what is described later on regarding running Django in a :ref:`shared-hosting environment <apache_shared_hosting>`. For further details please refer to the `mod_fcgid reference`_"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:246
# e911c196a0ea4d498dd500d8d60061f0
msgid "lighttpd setup"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:248
# 5ee4ffed412b49dba69495c2ddcdf07f
msgid "lighttpd_ is a lightweight Web server commonly used for serving static files. It supports FastCGI natively and, thus, is a good choice for serving both static and dynamic pages, if your site doesn't have any Apache-specific needs."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:254
# f86361708d6a47ed9368f4a074588ba1
msgid "Make sure ``mod_fastcgi`` is in your modules list, somewhere after ``mod_rewrite`` and ``mod_access``, but not after ``mod_accesslog``. You'll probably want ``mod_alias`` as well, for serving admin media."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:258
# ba96f8d2481a4020864395657ca77921
msgid "Add the following to your lighttpd config file:"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:285
# cec3cb7dae22490ab8d72cba5c62e032
msgid "Running multiple Django sites on one lighttpd"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:287
# 0254826b05a24f44bb3393c86c909ec5
msgid "lighttpd lets you use \"conditional configuration\" to allow configuration to be customized per host. To specify multiple FastCGI sites, just add a conditional block around your FastCGI config for each site::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:309
# 0a364c13e0514414b6fa0a6e3ec2e8e4
msgid "You can also run multiple Django installations on the same site simply by specifying multiple entries in the ``fastcgi.server`` directive. Add one FastCGI host for each."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:314
# 11ef3988089c40de8d8298341ca8606b
msgid "Cherokee setup"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:316
# 4a3f8b93253d4ae3b90448b56dd60798
msgid "Cherokee is a very fast, flexible and easy to configure Web Server. It supports the widespread technologies nowadays: FastCGI, SCGI, PHP, CGI, SSI, TLS and SSL encrypted connections, Virtual hosts, Authentication, on the fly encoding, Load Balancing, Apache compatible log files, Data Base Balancer, Reverse HTTP Proxy and much more."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:322
# 27a35627a90941908a6740a4d02ed41c
msgid "The Cherokee project provides a documentation to `setting up Django`_ with Cherokee."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:329
# c72c3156255f4511b973d88f03332326
msgid "Running Django on a shared-hosting provider with Apache"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:331
# 3ced046b9d2c416e9404a0a4acd6dc88
msgid "Many shared-hosting providers don't allow you to run your own server daemons or edit the ``httpd.conf`` file. In these cases, it's still possible to run Django using Web server-spawned processes."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:337
# b30a6bbe0d3d4877b6ee4765e5e36126
msgid "If you're using Web server-spawned processes, as explained in this section, there's no need for you to start the FastCGI server on your own. Apache will spawn a number of processes, scaling as it needs to."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:341
# f35643f227a84f70b1e2b0dbbb25a0ac
msgid "In your Web root directory, add this to a file named ``.htaccess``:"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:350
# 477f17855b544e7c9dd4d5be5e9ea40b
msgid "Then, create a small script that tells Apache how to spawn your FastCGI program. Create a file ``mysite.fcgi`` and place it in your Web directory, and be sure to make it executable:"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:371
# dfe1122ffa944dbb99120067a2d52940
msgid "This works if your server uses mod_fastcgi. If, on the other hand, you are using mod_fcgid the setup is mostly the same except for a slight change in the ``.htaccess`` file. Instead of adding a fastcgi-script handler, you have to add a fcgid-handler:"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:384
# 9f4e8c7e2221457f857a428a9798e039
msgid "Restarting the spawned server"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:386
# 0f5dfb97e9b3491b852cbb34962ab26c
msgid "If you change any Python code on your site, you'll need to tell FastCGI the code has changed. But there's no need to restart Apache in this case. Rather, just reupload ``mysite.fcgi``, or edit the file, so that the timestamp on the file will change. When Apache sees the file has been updated, it will restart your Django application for you."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:392
# 0b1d41616c154e7cb7f8dc0ba913bf8a
msgid "If you have access to a command shell on a Unix system, you can accomplish this easily by using the ``touch`` command::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:398
# 186e0bbefaf64f6287deecd2b755a348
msgid "Serving admin media files"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:400
# 612cb1a6b93f43439e5c53084d2c1367
msgid "Regardless of the server and configuration you eventually decide to use, you will also need to give some thought to how to serve the admin media files. The advice given in the :ref:`mod_wsgi <serving-the-admin-files>` documentation is also applicable in the setups detailed above."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:406
# fe802bb5dbfc4c429a3e9630f874e866
msgid "Forcing the URL prefix to a particular value"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:408
# fab0a3fd4f464e2f9968a1751ca408d5
msgid "Because many of these fastcgi-based solutions require rewriting the URL at some point inside the Web server, the path information that Django sees may not resemble the original URL that was passed in. This is a problem if the Django application is being served from under a particular prefix and you want your URLs from the :ttag:`{% url %}<url>` tag to look like the prefix, rather than the rewritten version, which might contain, for example, ``mysite.fcgi``."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:415
# 60fdd6812c654afcbfa33c85f3184e83
msgid "Django makes a good attempt to work out what the real script name prefix should be. In particular, if the Web server sets the ``SCRIPT_URL`` (specific to Apache's mod_rewrite), or ``REDIRECT_URL`` (set by a few servers, including Apache + mod_rewrite in some situations), Django will work out the original prefix automatically."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:421
# 3873a73aeb0d4903b91b6432cf7170f3
msgid "In the cases where Django cannot work out the prefix correctly and where you want the original value to be used in URLs, you can set the :setting:`FORCE_SCRIPT_NAME` setting in your main ``settings`` file. This sets the script name uniformly for every URL served via that settings file. Thus you'll need to use different settings files if you want different sets of URLs to have different script names in this case, but that is a rare situation."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:428
# dce01d86d8074e95876777e59fa4fc56
msgid "As an example of how to use it, if your Django configuration is serving all of the URLs under ``'/'`` and you wanted to use this setting, you would set ``FORCE_SCRIPT_NAME = ''`` in your settings file."
msgstr ""

#: ../../howto/deployment/index.txt:2
# 72addfccab8d4318bfa66de6afc1d91d
msgid "Deploying Django"
msgstr ""

#: ../../howto/deployment/index.txt:4
# 6ff260cec1c949f698802664d6e9fbb0
msgid "Django's chock-full of shortcuts to make Web developer's lives easier, but all those tools are of no use if you can't easily deploy your sites. Since Django's inception, ease of deployment has been a major goal. There's a number of good ways to easily deploy Django:"
msgstr ""

#: ../../howto/deployment/index.txt:16
# 3a679c367cff42698b5c9107c1527434
msgid "If you're new to deploying Django and/or Python, we'd recommend you try :doc:`mod_wsgi </howto/deployment/wsgi/modwsgi>` first. In most cases it'll be the easiest, fastest, and most stable deployment choice."
msgstr ""

#: ../../howto/deployment/index.txt:22
# ed017e586ce94a6c8d9d97ea02789ee2
msgid "`Chapter 12 of the Django Book (second edition)`_ discusses deployment and especially scaling in more detail. However, note that this edition was written against Django version 1.1 and has not been updated since `mod_python` was first deprecated, then completely removed in Django 1.5."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:3
#: ../../howto/deployment/wsgi/modwsgi.txt:204
# 7fca4324e4da4d40a65465f70176752f
# bc798f3d78694e03901b565cf1fe6d62
msgid "Authenticating against Django's user database from Apache"
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:5
# 5fc2f4d13abf4bb8afca264bde5d6deb
msgid "Since keeping multiple authentication databases in sync is a common problem when dealing with Apache, you can configure Apache to authenticate against Django's :doc:`authentication system </topics/auth/index>` directly. This requires Apache version >= 2.2 and mod_wsgi >= 2.0. For example, you could:"
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:10
# 6c037c2dadb5410589850ec8477eef1d
msgid "Serve static/media files directly from Apache only to authenticated users."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:12
# 274f526cdbf8481d8ba30c945f977a6d
msgid "Authenticate access to a Subversion_ repository against Django users with a certain permission."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:15
# fb4b3b23b76f4fba83d3bc7e3131e6c4
msgid "Allow certain users to connect to a WebDAV share created with mod_dav_."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:18
# cfef1d7aa75b4d2c9e9f3b6fd1bb54cc
msgid "If you have installed a :ref:`custom User model <auth-custom-user>` and want to use this default auth handler, it must support an `is_active` attribute. If you want to use group based authorization, your custom user must have a relation named 'groups', referring to a related object that has a 'name' field. You can also specify your own custom mod_wsgi auth handler if your custom cannot conform to these requirements."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:29
# 29e5b0a523a04254987d776ef88bfd96
msgid "Authentication with mod_wsgi"
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:31
# d382784c08a3451da95015f7bcbec275
msgid "Make sure that mod_wsgi is installed and activated and that you have followed the steps to setup :doc:`Apache with mod_wsgi </howto/deployment/wsgi/modwsgi>`"
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:35
# 8136aa2ccaa345a780f28c8c71af5c08
msgid "Next, edit your Apache configuration to add a location that you want only authenticated users to be able to view:"
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:53
# d3a7a3f194db4c36b42c2f1d46d760ca
msgid "The ``WSGIAuthUserScript`` directive tells mod_wsgi to execute the ``check_password`` function in specified wsgi script, passing the user name and password that it receives from the prompt. In this example, the ``WSGIAuthUserScript`` is the same as the ``WSGIScriptAlias`` that defines your application :doc:`that is created by django-admin.py startproject </howto/deployment/wsgi/index>`."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:60
# 9a62466938a34744b565484fadcd16ec
msgid "Using Apache 2.2 with authentication"
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:62
# 134ced96962848e08b3fc62120d629a1
msgid "Make sure that ``mod_auth_basic`` and ``mod_authz_user`` are loaded."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:64
# 5201c9c3cc3d4ed29315695456a3bc1b
msgid "These might be compiled statically into Apache, or you might need to use LoadModule to load them dynamically in your ``httpd.conf``:"
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:72
# efced53d1f3e4678a11384a760848d4f
msgid "Finally, edit your WSGI script ``mysite.wsgi`` to tie Apache's authentication to your site's authentication mechanisms by importing the ``check_password`` function:"
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:89
# dd9ef845850347349d536bb7ad4a9f45
msgid "Requests beginning with ``/secret/`` will now require a user to authenticate."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:91
# 99d76c5eb4294fa5a0d526e274c3f2c1
msgid "The mod_wsgi `access control mechanisms documentation`_ provides additional details and information about alternative methods of authentication."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:97
# f32a6273ba634abbbfe6e6491a54e587
msgid "Authorization with mod_wsgi and Django groups"
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:99
# 7f93603998b74115afca33aeffc0b0c9
msgid "mod_wsgi also provides functionality to restrict a particular location to members of a group."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:102
# 6fb1fccfdd3649c6a9d13157e569c701
msgid "In this case, the Apache configuration should look like this:"
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:121
# 588b9bd4d4b4463ca24beb05d2adf79f
msgid "To support the ``WSGIAuthGroupScript`` directive, the same WSGI script ``mysite.wsgi`` must also import the ``groups_for_user`` function which returns a list groups the given user belongs to."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:129
# 8b7d7d13b95d40ec9b3b7820d614ed18
msgid "Requests for ``/secret/`` will now also require user to be a member of the \"secret-agents\" group."
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:3
# 68b3a644fb70434cbeb929dfa1e3ed9e
msgid "How to use Django with Gunicorn"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:7
# 501f9e88e57649519747ea77c0f9538c
msgid "Gunicorn_ ('Green Unicorn') is a pure-Python WSGI server for UNIX. It has no dependencies and is easy to install and use."
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:12
# 309239f6dd90409789ce8ff51193ec4f
msgid "There are two ways to use Gunicorn with Django. One is to have Gunicorn treat Django as just another WSGI application. The second is to use Gunicorn's special `integration with Django`_."
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:19
# 3a9202897fdf4ef18579e26b3079af32
msgid "Installing Gunicorn"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:21
# fe164675bcf9482b927f50b7322742c7
msgid "Installing gunicorn is as easy as ``sudo pip install gunicorn``. For more details, see the `gunicorn documentation`_."
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:27
# 3002da7b9e8342afbe6b522919e2d42f
msgid "Running Django in Gunicorn as a generic WSGI application"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:29
# 2cb1f265186843a29810a41614d3cbb2
msgid "When Gunicorn is installed, a ``gunicorn`` command is available which starts the Gunicorn server process. At its simplest, gunicorn just needs to be called with a the location of a WSGI application object.::"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:35
# 174d9901cbfd4fe48a3451bc737076c7
msgid "Where ``APP_MODULE`` is of the pattern ``MODULE_NAME:VARIABLE_NAME``. The module name should be a full dotted path. The variable name refers to a WSGI callable that should be found in the specified module."
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:39
# befc36c7fc924002bcc297061af33800
msgid "So for a typical Django project, invoking gunicorn would look like::"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:43
# 48fe4cf159544f2eaafceaf2942fae50
msgid "(This requires that your project be on the Python path; the simplest way to ensure that is to run this command from the same directory as your ``manage.py`` file.)"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:49
# 8dc7a0de031747bb87622c38d06883a4
msgid "Using Gunicorn's Django integration"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:53
# 37ff8aba8410496f85a7176922a753da
msgid "If you are using Django 1.4 or newer, it’s highly recommended to simply run your application with the WSGI interface using the ``gunicorn`` command as described above."
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:57
# c549eea52c0b4b6683ee023e16ef8502
msgid "To use Gunicorn's built-in Django integration, first add ``\"gunicorn\"`` to :setting:`INSTALLED_APPS`. Then run ``python manage.py run_gunicorn``."
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:60
# df6b2ece6ae14c5ea5918845f38597fd
msgid "This provides a few Django-specific niceties:"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:62
# 90da110d95944f56934d87af1e4470fa
msgid "sets the gunicorn process name to be that of the project"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:64
# fd4dad4e873c451c8af0fbeb5e5eda43
msgid "validates installed models"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:66
# 62cede4b880d4f80b3a3d1372d92174b
msgid "allows an ``--adminmedia`` option for passing in the location of the admin media files."
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:69
# 21e2fa820bce46258651c7fe216f1221
msgid "See Gunicorn's `deployment documentation`_ for additional tips on starting and maintaining the Gunicorn server."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:3
# 3815e02695c84a928e0ba2f25f13fe63
msgid "How to deploy with WSGI"
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:5
# aff383e3cd7e43c9a4f659f4f6d36e11
msgid "Django's primary deployment platform is WSGI_, the Python standard for web servers and applications."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:10
# e875b453c25f495b80ed44de3e1dbc20
msgid "Django's :djadmin:`startproject` management command sets up a simple default WSGI configuration for you, which you can tweak as needed for your project, and direct any WSGI-compliant application server to use."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:14
# 7b546853785c4b079c73c44f50a6acfe
msgid "Django includes getting-started documentation for the following WSGI servers:"
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:25
# ebd98949ce974bb4a875540d50782786
msgid "The ``application`` object"
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:27
# 221fb4c0ddf74e2aa44a1c948c331d01
msgid "The key concept of deploying with WSGI is the ``application`` callable which the application server uses to communicate with your code. It's commonly provided as an object named ``application`` in a Python module accessible to the server."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:32
# ab49aa0c7acc4d8081c7f1656e1f45ec
msgid "The :djadmin:`startproject` command creates a file :file:`<project_name>/wsgi.py` that contains such an ``application`` callable."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:35
# 6db3fef7db34490b97b341496f8ffc3c
msgid "It's used both by Django's development server and in production WSGI deployments."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:38
# 863ed8557fed48809467f08d76567beb
msgid "WSGI servers obtain the path to the ``application`` callable from their configuration. Django's built-in servers, namely the :djadmin:`runserver` and :djadmin:`runfcgi` commands, read it from the :setting:`WSGI_APPLICATION` setting. By default, it's set to ``<project_name>.wsgi.application``, which points to the ``application`` callable in :file:`<project_name>/wsgi.py`."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:45
# ad38e88119204814bca7429126dba04b
msgid "Configuring the settings module"
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:47
# 168f3b09380749ac902d6935c487f675
msgid "When the WSGI server loads your application, Django needs to import the settings module — that's where your entire application is defined."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:50
# 16d1107502a746edbfdbafbe03ed5f9a
msgid "Django uses the :envvar:`DJANGO_SETTINGS_MODULE` environment variable to locate the appropriate settings module. It must contain the dotted path to the settings module. You can use a different value for development and production; it all depends on how you organize your settings."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:55
# 790ff4b4c4b64a819e3b33844009e1e8
msgid "If this variable isn't set, the default :file:`wsgi.py` sets it to ``mysite.settings``, where ``mysite`` is the name of your project. That's how :djadmin:`runserver` discovers the default settings file by default."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:61
# 03a9b239787448768b923ae12c42bcbb
msgid "Since environment variables are process-wide, this doesn't work when you run multiple Django sites in the same process. This happens with mod_wsgi."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:64
# 5739a747487f4c968e8ad2cd363446ec
msgid "To avoid this problem, use mod_wsgi's daemon mode with each site in its own daemon process, or override the value from the environment by enforcing ``os.environ[\"DJANGO_SETTINGS_MODULE\"] = \"mysite.settings\"`` in your :file:`wsgi.py`."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:71
# 9cec97cff8de42ce90d21773e70fce88
msgid "Applying WSGI middleware"
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:73
# f5767c6b32e04530a642ee969cf9d917
msgid "To apply `WSGI middleware`_ you can simply wrap the application object. For instance you could add these lines at the bottom of :file:`wsgi.py`::"
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:79
# 18e74fdbe6e945c1b0740f8016d724b0
msgid "You could also replace the Django WSGI application with a custom WSGI application that later delegates to the Django WSGI application, if you want to combine a Django application with a WSGI application of another framework."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:87
# 00b02ca29d0b42989729bb57cff83a91
msgid "Some third-party WSGI middleware do not call ``close`` on the response object after handling a request — most notably Sentry's error reporting middleware up to version 2.0.7. In those cases the :data:`~django.core.signals.request_finished` signal isn't sent. This can result in idle connections to database and memcache servers."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:94
# cb6383425283472eb9d476867582156e
msgid "Upgrading from Django < 1.4"
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:96
# fce0f000153542a691f72680c5215a1a
msgid "If you're upgrading from Django 1.3.x or earlier, you don't have a :file:`wsgi.py` file in your project."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:99
# 74f9e4d32766435d9b63ebf9117a3609
msgid "You can simply add one to your project's top-level Python package (probably next to :file:`settings.py` and :file:`urls.py`) with the contents below::"
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:108
# 885a1dbd570f4be8bf16fdcf7a5906e8
msgid "The ``os.environ.setdefault`` line just sets the default settings module to use, if you haven't explicitly set the :envvar:`DJANGO_SETTINGS_MODULE` environment variable. You'll need to edit this line to replace ``mysite`` with the name of your project package, so the path to your settings module is correct."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:114
# 72f2389b8b494de3b267be1515b7543a
msgid "Also add ``WSGI_APPLICATION = \"mysite.wsgi.application\"`` in your settings, so that :djadmin:`runserver` finds your ``application`` callable. Don't forget to replace ``mysite`` with the name of your project in this line."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:3
# 2ca84dda0aa440078e2ab6381ea00e58
msgid "How to use Django with Apache and mod_wsgi"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:5
# 8e6a643b46a14ae18932d89e979a084d
msgid "Deploying Django with Apache_ and `mod_wsgi`_ is a tried and tested way to get Django into production."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:11
# 4321cd3c439f4f53ab61e5193ec58d23
msgid "mod_wsgi is an Apache module which can host any Python WSGI_ application, including Django. Django will work with any version of Apache which supports mod_wsgi."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:17
# dade4abced0a43209cf148c0a0048a13
msgid "The `official mod_wsgi documentation`_ is fantastic; it's your source for all the details about how to use mod_wsgi. You'll probably want to start with the `installation and configuration documentation`_."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:25
# b3429c03e3ba4e47a701b13c2cfdb33d
msgid "Basic configuration"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:27
# 2feb3abf3b924d89b4b32d1b0f4ea747
msgid "Once you've got mod_wsgi installed and activated, edit your Apache server's ``httpd.conf`` file and add the following. If you are using a version of Apache older than 2.4, replace ``Require all granted`` with ``Allow from all``."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:43
# c82af90796144b999b2e88e1e378e3be
msgid "The first bit in the ``WSGIScriptAlias`` line is the base URL path you want to serve your application at (``/`` indicates the root url), and the second is the location of a \"WSGI file\" -- see below -- on your system, usually inside of your project package (``mysite`` in this example). This tells Apache to serve any request below the given URL using the WSGI application defined in that file."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:50
# 30165e71393c46d99163c5f50a816526
msgid "The ``WSGIPythonPath`` line ensures that your project package is available for import on the Python path; in other words, that ``import mysite`` works."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:53
# 6b6e277c70da4547bd8e78b217378bc9
msgid "The ``<Directory>`` piece just ensures that Apache can access your :file:`wsgi.py` file."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:56
# c6d9aac3abf146b6a6c0ed238741bad7
msgid "Next we'll need to ensure this :file:`wsgi.py` with a WSGI application object exists. As of Django version 1.4, :djadmin:`startproject` will have created one for you; otherwise, you'll need to create it. See the :doc:`WSGI overview documentation</howto/deployment/wsgi/index>` for the default contents you should put in this file, and what else you can add to it."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:64
# 3b508c463660440fa13ba0bb49eb33f6
msgid "If multiple Django sites are run in a single mod_wsgi process, all of them will use the settings of whichever one happens to run first. This can be solved with a minor edit to ``wsgi.py`` (see comment in the file for details), or by :ref:`using mod_wsgi daemon mode<daemon-mode>` and ensuring that each site runs in its own daemon process."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:72
# e8e7d42deb4843a1a5d2b1e13e67e979
msgid "Using a virtualenv"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:74
# 308b34ab28984cae9fe56fe01cb8e70c
msgid "If you install your project's Python dependencies inside a `virtualenv`_, you'll need to add the path to this virtualenv's ``site-packages`` directory to your Python path as well. To do this, add an additional path to your `WSGIPythonPath` directive, with multiple paths separated by a colon::"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:81
# ee7fc051cb73488b9ac845d8b5867fd4
msgid "Make sure you give the correct path to your virtualenv, and replace ``python2.X`` with the correct Python version (e.g. ``python2.7``)."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:89
# d811d451cc1644189bab85581abd8f71
msgid "Using mod_wsgi daemon mode"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:91
# 6fff18557cfe4d69adf59667f96fa417
msgid "\"Daemon mode\" is the recommended mode for running mod_wsgi (on non-Windows platforms). To create the required daemon process group and delegate the Django instance to run in it, you will need to add appropriate ``WSGIDaemonProcess`` and ``WSGIProcessGroup`` directives. A further change required to the above configuration if you use daemon mode is that you can't use ``WSGIPythonPath``; instead you should use the ``python-path`` option to ``WSGIDaemonProcess``, for example::"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:102
# c108bf01541a4023b06763ee9c8d0d16
msgid "See the official mod_wsgi documentation for `details on setting up daemon mode`_."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:110
# e6aeebad2caa467196d921f3a413a17f
msgid "Serving files"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:112
# 7256d845ace44a64ad35594c46d41081
msgid "Django doesn't serve files itself; it leaves that job to whichever Web server you choose."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:115
# cf7162c291764e969ed004f2a45158a4
msgid "We recommend using a separate Web server -- i.e., one that's not also running Django -- for serving media. Here are some good choices:"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:118
#: ../../howto/static-files/deployment.txt:73
# bf6d548c85ac42a291a29a30f1428b9c
# 69102ff9975f437197823fcf2235313b
msgid "lighttpd_"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:119
#: ../../howto/static-files/deployment.txt:74
# 5b652b1c0808495fb95517f1276513c0
# 17089b1f75d84972b3c106d39099e0f4
msgid "Nginx_"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:120
#: ../../howto/static-files/deployment.txt:75
# 73b982e5fbd649d2bd8999ef3624a07f
# 80a896baacd9405083a83d906d567a54
msgid "TUX_"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:121
#: ../../howto/static-files/deployment.txt:77
# a9ddc30b8c5f467c88ea25a25b89ca95
# 3fc115034c98443099574d1b4bdad2bb
msgid "A stripped-down version of Apache_"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:122
#: ../../howto/static-files/deployment.txt:76
# 16292f2710bd4b6981e83554a8df2a50
# de81bf51517b4bb3ae19db7de2027f54
msgid "Cherokee_"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:124
# 7680a2f2adb24de6b0de42eaae7403a1
msgid "If, however, you have no option but to serve media files on the same Apache ``VirtualHost`` as Django, you can set up Apache to serve some URLs as static media, and others using the mod_wsgi interface to Django."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:128
# a556340813ea4367a61c0a1216eabad9
msgid "This example sets up Django at the site root, but explicitly serves ``robots.txt``, ``favicon.ico``, any CSS file, and anything in the ``/static/`` and ``/media/`` URL space as a static file. All other URLs will be served using mod_wsgi::"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:174
# 075a2e5302844773ac7ec99aea988d57
msgid "Serving the admin files"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:176
# be89ac93d3104b979e60cadf4a9cb832
msgid "When :mod:`django.contrib.staticfiles` is in :setting:`INSTALLED_APPS`, the Django development server automatically serves the static files of the admin app (and any other installed apps). This is however not the case when you use any other server arrangement. You're responsible for setting up Apache, or whichever Web server you're using, to serve the admin files."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:182
# cb43091dcd724fecb40125514998f588
msgid "The admin files live in (:file:`django/contrib/admin/static/admin`) of the Django distribution."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:185
# 50410e84b0e0471fae9d05f8368c66c4
msgid "We **strongly** recommend using :mod:`django.contrib.staticfiles` to handle the admin files (along with a Web server as outlined in the previous section; this means using the :djadmin:`collectstatic` management command to collect the static files in :setting:`STATIC_ROOT`, and then configuring your Web server to serve :setting:`STATIC_ROOT` at :setting:`STATIC_URL`), but here are three other approaches:"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:192
# 941ea47582b74652a9212646bef13fd4
msgid "Create a symbolic link to the admin static files from within your document root (this may require ``+FollowSymLinks`` in your Apache configuration)."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:196
# afbde9904e6e4e1b8847e8f833fd78a0
msgid "Use an ``Alias`` directive, as demonstrated above, to alias the appropriate URL (probably :setting:`STATIC_URL` + `admin/`) to the actual location of the admin files."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:200
# e817a0ec2da340198e74bc56fb2af88b
msgid "Copy the admin static files so that they live within your Apache document root."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:206
# aea0b5d6f193495d82572f93608790a2
msgid "Django provides a handler to allow Apache to authenticate users directly against Django's authentication backends. See the :doc:`mod_wsgi authentication documentation </howto/deployment/wsgi/apache-auth>`."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:211
# 1a1f4138ed2a4c818d8654ae60b05008
msgid "If you get a UnicodeEncodeError"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:213
# dec098560f93417aaf01d31a3c66d555
msgid "If you're taking advantage of the internationalization features of Django (see :doc:`/topics/i18n/index`) and you intend to allow users to upload files, you must ensure that the environment used to start Apache is configured to accept non-ASCII file names. If your environment is not correctly configured, you will trigger ``UnicodeEncodeError`` exceptions when calling functions like ``os.path()`` on filenames that contain non-ASCII characters."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:220
# 1c0dd6477424405095a0acaa95ac5054
msgid "To avoid these problems, the environment used to start Apache should contain settings analogous to the following::"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:226
# f18d2e5952ef4ff7909135b18c186405
msgid "Consult the documentation for your operating system for the appropriate syntax and location to put these configuration items; ``/etc/apache2/envvars`` is a common location on Unix platforms. Once you have added these statements to your environment, restart Apache."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:3
# 5ac5533584e7460a857f13dd8d55ad2e
msgid "How to use Django with uWSGI"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:7
# 93b8b6b5526c42aeabf3e33c3197273a
msgid "uWSGI_ is a fast, self-healing and developer/sysadmin-friendly application container server coded in pure C."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:14
# 987b57496d124f4e902fed8065680234
msgid "The uWSGI docs offer a `tutorial`_ covering Django, nginx, and uWSGI (one possible deployment setup of many). The docs below are focused on how to integrate Django with uWSGI."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:21
# 95a01dfdf70644fc843ff2618be65ac6
msgid "Prerequisite: uWSGI"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:23
# f01560fd24a0499c923283949bf4cc02
msgid "The uWSGI wiki describes several `installation procedures`_. Using pip, the Python package manager, you can install any uWSGI version with a single command. For example:"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:39
# b214a9bf893e41f4a1b5204abfc7fbb5
msgid "Some distributions, including Debian and Ubuntu, ship an outdated version of uWSGI that does not conform to the WSGI specification. Versions prior to 1.2.6 do not call ``close`` on the response object after handling a request. In those cases the :data:`~django.core.signals.request_finished` signal isn't sent. This can result in idle connections to database and memcache servers."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:47
# 0af1c610fc674307979b212ee6161c68
msgid "uWSGI model"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:49
# 9ddf273e0b0541e5a9e313e56d3c8e97
msgid "uWSGI operates on a client-server model. Your Web server (e.g., nginx, Apache) communicates with a django-uwsgi \"worker\" process to serve dynamic content. See uWSGI's `background documentation`_ for more detail."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:56
# f795b97a28564148b3bb53736613aa1f
msgid "Configuring and starting the uWSGI server for Django"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:58
# f05b67f918a34e4c98b505639d08b752
msgid "uWSGI supports multiple ways to configure the process. See uWSGI's `configuration documentation`_ and `examples`_"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:64
# 3852ed50c8f44ae0b436f3cc0d4cf9d6
msgid "Here's an example command to start a uWSGI server::"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:79
# 69d894ffa3004353b6a0cc9cde0bc947
msgid "This assumes you have a top-level project package named ``mysite``, and within it a module :file:`mysite/wsgi.py` that contains a WSGI ``application`` object. This is the layout you'll have if you ran ``django-admin.py startproject mysite`` (using your own project name in place of ``mysite``) with a recent version of Django. If this file doesn't exist, you'll need to create it. See the :doc:`/howto/deployment/wsgi/index` documentation for the default contents you should put in this file and what else you can add to it."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:87
# 6eeb8906dc714d1c8126bf6a72f31e71
msgid "The Django-specific options here are:"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:89
# 0bd5e6ce99c34e989759ac1dbf576a49
msgid "``chdir``: The path to the directory that needs to be on Python's import path -- i.e., the directory containing the ``mysite`` package."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:91
# b930bbb54a6843a3916dd8488071abf8
msgid "``module``: The WSGI module to use -- probably the ``mysite.wsgi`` module that :djadmin:`startproject` creates."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:93
# 533ea1c6d6c140eaa1729b591ead2443
msgid "``env``: Should probably contain at least ``DJANGO_SETTINGS_MODULE``."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:94
# 15e776cd1ddc49738590ac2de915e628
msgid "``home``: Optional path to your project virtualenv."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:96
# b4a8a800b7194565889d07871e5a7927
msgid "Example ini configuration file::"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:107
# 86756156a4294131adb426f88d560653
msgid "Example ini configuration file usage::"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:111
# 630020b551ff4792b335948518849539
msgid "See the uWSGI docs on `managing the uWSGI process`_ for information on starting, stopping and reloading the uWSGI workers."
msgstr ""

#: ../../howto/error-reporting.txt:4
# 8655352231af4148b891336df8e31d50
msgid "When you're running a public site you should always turn off the :setting:`DEBUG` setting. That will make your server run much faster, and will also prevent malicious users from seeing details of your application that can be revealed by the error pages."
msgstr ""

#: ../../howto/error-reporting.txt:9
# b13fc76464404d3c83b99185a37267ad
msgid "However, running with :setting:`DEBUG` set to ``False`` means you'll never see errors generated by your site -- everyone will just see your public error pages. You need to keep track of errors that occur in deployed sites, so Django can be configured to create reports with details about those errors."
msgstr ""

#: ../../howto/error-reporting.txt:15
# 1c71ac99adbe42298e0eec7b70a3a10d
msgid "Email reports"
msgstr ""

#: ../../howto/error-reporting.txt:18
# 61b02f97e72344ca9fa22454a6dc199f
msgid "Server errors"
msgstr ""

#: ../../howto/error-reporting.txt:20
# 23d9189a4e4e4355a34197993c724f33
msgid "When :setting:`DEBUG` is ``False``, Django will email the users listed in the :setting:`ADMINS` setting whenever your code raises an unhandled exception and results in an internal server error (HTTP status code 500). This gives the administrators immediate notification of any errors. The :setting:`ADMINS` will get a description of the error, a complete Python traceback, and details about the HTTP request that caused the error."
msgstr ""

#: ../../howto/error-reporting.txt:29
# e762969459dd4114b64dfb10794b1326
msgid "In order to send email, Django requires a few settings telling it how to connect to your mail server. At the very least, you'll need to specify :setting:`EMAIL_HOST` and possibly :setting:`EMAIL_HOST_USER` and :setting:`EMAIL_HOST_PASSWORD`, though other settings may be also required depending on your mail server's configuration. Consult :doc:`the Django settings documentation </ref/settings>` for a full list of email-related settings."
msgstr ""

#: ../../howto/error-reporting.txt:38
# bf79575c5d294b79ba94ca625298da92
msgid "By default, Django will send email from root@localhost. However, some mail providers reject all email from this address. To use a different sender address, modify the :setting:`SERVER_EMAIL` setting."
msgstr ""

#: ../../howto/error-reporting.txt:42
# b19c724565bd449984ef93dfd2acf416
msgid "To activate this behavior, put the email addresses of the recipients in the :setting:`ADMINS` setting."
msgstr ""

#: ../../howto/error-reporting.txt:47
# e95f2fe106294f90b374a471acdba4a7
msgid "Server error emails are sent using the logging framework, so you can customize this behavior by :doc:`customizing your logging configuration </topics/logging>`."
msgstr ""

#: ../../howto/error-reporting.txt:52
# cecd67479c6546729219c6276cb3ce23
msgid "404 errors"
msgstr ""

#: ../../howto/error-reporting.txt:54
# 021697a7d870422c8580ba9d2c9f2d63
msgid "Django can also be configured to email errors about broken links (404 \"page not found\" errors). Django sends emails about 404 errors when:"
msgstr ""

#: ../../howto/error-reporting.txt:57
# 079936fc09714bb49d9244ee0489938a
msgid ":setting:`DEBUG` is ``False``;"
msgstr ""

#: ../../howto/error-reporting.txt:59
# cc499642bd774d0889cc3499e38cf54f
msgid "Your :setting:`MIDDLEWARE_CLASSES` setting includes :class:`django.middleware.common.BrokenLinkEmailsMiddleware`."
msgstr ""

#: ../../howto/error-reporting.txt:62
# c6f51528fe3240cfac0b7b8c40338f7b
msgid "If those conditions are met, Django will email the users listed in the :setting:`MANAGERS` setting whenever your code raises a 404 and the request has a referer. (It doesn't bother to email for 404s that don't have a referer -- those are usually just people typing in broken URLs or broken Web 'bots)."
msgstr ""

#: ../../howto/error-reporting.txt:69
# 4efaf706d85341fea3fc5f3d0e325e10
msgid ":class:`~django.middleware.common.BrokenLinkEmailsMiddleware` must appear before other middleware that intercepts 404 errors, such as :class:`~django.middleware.locale.LocaleMiddleware` or :class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware`. Put it towards the top of your :setting:`MIDDLEWARE_CLASSES` setting."
msgstr ""

#: ../../howto/error-reporting.txt:75
# eb53de0a1a0940c7a13a3b392607ae2f
msgid "You can tell Django to stop reporting particular 404s by tweaking the :setting:`IGNORABLE_404_URLS` setting. It should be a tuple of compiled regular expression objects. For example::"
msgstr ""

#: ../../howto/error-reporting.txt:85
# a3a0e7901dd64d00a9704bb8ff1dee61
msgid "In this example, a 404 to any URL ending with ``.php`` or ``.cgi`` will *not* be reported. Neither will any URL starting with ``/phpmyadmin/``."
msgstr ""

#: ../../howto/error-reporting.txt:88
# 0b835f0774dc4853b89aa9afe7f4e44c
msgid "The following example shows how to exclude some conventional URLs that browsers and crawlers often request::"
msgstr ""

#: ../../howto/error-reporting.txt:98
# ef7fbbb3106843c9b2a300dd15be365a
msgid "(Note that these are regular expressions, so we put a backslash in front of periods to escape them.)"
msgstr ""

#: ../../howto/error-reporting.txt:101
# 3c3eaa0414074b5aa59b7e8648349d05
msgid "If you'd like to customize the behavior of :class:`django.middleware.common.BrokenLinkEmailsMiddleware` further (for example to ignore requests coming from web crawlers), you should subclass it and override its methods."
msgstr ""

#: ../../howto/error-reporting.txt:108
# dec7d8589c5545ca91a1f454695255a4
msgid "404 errors are logged using the logging framework. By default, these log records are ignored, but you can use them for error reporting by writing a handler and :doc:`configuring logging </topics/logging>` appropriately."
msgstr ""

#: ../../howto/error-reporting.txt:115
# b8e121b2e8914159a8fb7b396934bf0f
msgid "Filtering error reports"
msgstr ""

#: ../../howto/error-reporting.txt:118
# c5c483759a2b4d38bdd6194b3859cd24
msgid "Filtering sensitive information"
msgstr ""

#: ../../howto/error-reporting.txt:122
# f13f9e5a469c488ea4118cb5e70460b9
msgid "Error reports are really helpful for debugging errors, so it is generally useful to record as much relevant information about those errors as possible. For example, by default Django records the `full traceback`_ for the exception raised, each `traceback frame`_'s local variables, and the :class:`~django.http.HttpRequest`'s :ref:`attributes<httprequest-attributes>`."
msgstr ""

#: ../../howto/error-reporting.txt:128
# f2422d1d2d4543c8bd094882de25971c
msgid "However, sometimes certain types of information may be too sensitive and thus may not be appropriate to be kept track of, for example a user's password or credit card number. So Django offers a set of function decorators to help you control which information should be filtered out of error reports in a production environment (that is, where :setting:`DEBUG` is set to ``False``): :func:`sensitive_variables` and :func:`sensitive_post_parameters`."
msgstr ""

#: ../../howto/error-reporting.txt:140
# b31c185a4f41473ca4434170ff9a7de0
msgid "If a function (either a view or any regular callback) in your code uses local variables susceptible to contain sensitive information, you may prevent the values of those variables from being included in error reports using the ``sensitive_variables`` decorator::"
msgstr ""

#: ../../howto/error-reporting.txt:154
# 44064911007741ed81ef9d39b59ea9c1
msgid "In the above example, the values for the ``user``, ``pw`` and ``cc`` variables will be hidden and replaced with stars (`**********`) in the error reports, whereas the value of the ``name`` variable will be disclosed."
msgstr ""

#: ../../howto/error-reporting.txt:159
# 8f323fffc573449e8122165251d756f8
msgid "To systematically hide all local variables of a function from error logs, do not provide any argument to the ``sensitive_variables`` decorator::"
msgstr ""

#: ../../howto/error-reporting.txt:166
# 5013c0d6a5f14725bb184c0dbe765abe
msgid "When using mutiple decorators"
msgstr ""

#: ../../howto/error-reporting.txt:168
# cb8a61f5db134666a705a5a1f63c1fa0
msgid "If the variable you want to hide is also a function argument (e.g. '``user``' in the following example), and if the decorated function has mutiple decorators, then make sure to place ``@sensitive_variables`` at the top of the decorator chain. This way it will also hide the function argument as it gets passed through the other decorators::"
msgstr ""

#: ../../howto/error-reporting.txt:182
# cf0ee1dd3eff40dc8abe7186cadd54e0
msgid "If one of your views receives an :class:`~django.http.HttpRequest` object with :attr:`POST parameters<django.http.HttpRequest.POST>` susceptible to contain sensitive information, you may prevent the values of those parameters from being included in the error reports using the ``sensitive_post_parameters`` decorator::"
msgstr ""

#: ../../howto/error-reporting.txt:198
# 5603289e1f134d7d99e08203343c062c
msgid "In the above example, the values for the ``pass_word`` and ``credit_card_number`` POST parameters will be hidden and replaced with stars (`**********`) in the request's representation inside the error reports, whereas the value of the ``name`` parameter will be disclosed."
msgstr ""

#: ../../howto/error-reporting.txt:203
# ca8155cef88b458f8c2baa5ee5203901
msgid "To systematically hide all POST parameters of a request in error reports, do not provide any argument to the ``sensitive_post_parameters`` decorator::"
msgstr ""

#: ../../howto/error-reporting.txt:210
# ca4730bf04d249bca32d0d5864c70466
msgid "All POST parameters are systematically filtered out of error reports for certain :mod:`django.contrib.auth.views` views (``login``, ``password_reset_confirm``, ``password_change``, and ``add_view`` and ``user_change_password`` in the ``auth`` admin) to prevent the leaking of sensitive information such as user passwords."
msgstr ""

#: ../../howto/error-reporting.txt:219
# 4c574e31103c4b47a91f2451ecfa746e
msgid "Custom error reports"
msgstr ""

#: ../../howto/error-reporting.txt:221
# 87912c355413435cbe4e2d798122b7a8
msgid "All :func:`sensitive_variables` and :func:`sensitive_post_parameters` do is, respectively, annotate the decorated function with the names of sensitive variables and annotate the ``HttpRequest`` object with the names of sensitive POST parameters, so that this sensitive information can later be filtered out of reports when an error occurs. The actual filtering is done by Django's default error reporter filter: :class:`django.views.debug.SafeExceptionReporterFilter`. This filter uses the decorators' annotations to replace the corresponding values with stars (`**********`) when the error reports are produced. If you wish to override or customize this default behavior for your entire site, you need to define your own filter class and tell Django to use it via the :setting:`DEFAULT_EXCEPTION_REPORTER_FILTER` setting::"
msgstr ""

#: ../../howto/error-reporting.txt:236
# 121e862fba634f26bef21cd698b8a28c
msgid "You may also control in a more granular way which filter to use within any given view by setting the ``HttpRequest``'s ``exception_reporter_filter`` attribute::"
msgstr ""

#: ../../howto/error-reporting.txt:247
# 9aec28ce7fa945b5a71b8918a3d7cb5d
msgid "Your custom filter class needs to inherit from :class:`django.views.debug.SafeExceptionReporterFilter` and may override the following methods:"
msgstr ""

#: ../../howto/error-reporting.txt:255
# 994a9946b5564b269cea300bb7d3b2a5
msgid "Returns ``True`` to activate the filtering operated in the other methods. By default the filter is active if :setting:`DEBUG` is ``False``."
msgstr ""

#: ../../howto/error-reporting.txt:260
# 3fba6aa4a5f243998c5ce1e48bdc2a2a
msgid "Returns the representation string of the request object, that is, the value that would be returned by ``repr(request)``, except it uses the filtered dictionary of POST parameters as determined by :meth:`SafeExceptionReporterFilter.get_post_parameters`."
msgstr ""

#: ../../howto/error-reporting.txt:267
# add3469c461f439b9f2a3da29898eb80
msgid "Returns the filtered dictionary of POST parameters. By default it replaces the values of sensitive parameters with stars (`**********`)."
msgstr ""

#: ../../howto/error-reporting.txt:272
# 87111adea0b4452da168c30e952eabf4
msgid "Returns the filtered dictionary of local variables for the given traceback frame. By default it replaces the values of sensitive variables with stars (`**********`)."
msgstr ""

#: ../../howto/error-reporting.txt:278
# 5e7c45f7bd9f4a0d8dd502dbe27b8cf5
msgid "You can also set up custom error reporting by writing a custom piece of :ref:`exception middleware <exception-middleware>`. If you do write custom error handling, it's a good idea to emulate Django's built-in error handling and only report/log errors if :setting:`DEBUG` is ``False``."
msgstr ""

#: ../../howto/index.txt:2
# 75b047145d6a4f3a88ed6b03e26e7bad
msgid "\"How-to\" guides"
msgstr ""

#: ../../howto/index.txt:4
# 030494a1d41544e8adb65d1b4e8f52db
msgid "Here you'll find short answers to \"How do I....?\" types of questions. These how-to guides don't cover topics in depth -- you'll find that material in the :doc:`/topics/index` and the :doc:`/ref/index`. However, these guides will help you quickly accomplish common tasks."
msgstr ""

#: ../../howto/index.txt:30
# 20c059ac6bd14a8288bac19abed23017
msgid "The `Django community aggregator`_, where we aggregate content from the global Django community. Many writers in the aggregator write this sort of how-to material."
msgstr ""

#: ../../howto/initial-data.txt:3
# 0191a40816034823bc2ce39777b26322
msgid "Providing initial data for models"
msgstr ""

#: ../../howto/initial-data.txt:5
# 38692ef7e85a40cbb8012dfd2d3eceff
msgid "It's sometimes useful to pre-populate your database with hard-coded data when you're first setting up an app. There's a couple of ways you can have Django automatically create this data: you can provide `initial data via fixtures`_, or you can provide `initial data as SQL`_."
msgstr ""

#: ../../howto/initial-data.txt:10
# a35e37243ae24c0aa3181bc1a85b40d5
msgid "In general, using a fixture is a cleaner method since it's database-agnostic, but initial SQL is also quite a bit more flexible."
msgstr ""

#: ../../howto/initial-data.txt:19
# 8fa4c6991fb842a987e291a4399f9e14
msgid "Providing initial data with fixtures"
msgstr ""

#: ../../howto/initial-data.txt:21
# 4f761db2b9924267a7ff6660c5fed2b1
msgid "A fixture is a collection of data that Django knows how to import into a database. The most straightforward way of creating a fixture if you've already got some data is to use the :djadmin:`manage.py dumpdata <dumpdata>` command. Or, you can write fixtures by hand; fixtures can be written as XML, YAML, or JSON documents. The :doc:`serialization documentation </topics/serialization>` has more details about each of these supported :ref:`serialization formats <serialization-formats>`."
msgstr ""

#: ../../howto/initial-data.txt:29
# f88795f2a005479296bef2d7f79cc0df
msgid "As an example, though, here's what a fixture for a simple ``Person`` model might look like in JSON:"
msgstr ""

#: ../../howto/initial-data.txt:53
# 4eb2d28063ac4f2997338f7730597f63
msgid "And here's that same fixture as YAML:"
msgstr ""

#: ../../howto/initial-data.txt:68
# 411fef3557734a7584c9ef7b25e9d415
msgid "You'll store this data in a ``fixtures`` directory inside your app."
msgstr ""

#: ../../howto/initial-data.txt:70
# 88f4aa782af4426f8ee48fa135980879
msgid "Loading data is easy: just call :djadmin:`manage.py loaddata <loaddata>` ``<fixturename>``, where ``<fixturename>`` is the name of the fixture file you've created. Each time you run :djadmin:`loaddata`, the data will be read from the fixture and re-loaded into the database. Note this means that if you change one of the rows created by a fixture and then run :djadmin:`loaddata` again, you'll wipe out any changes you've made."
msgstr ""

#: ../../howto/initial-data.txt:78
# 713215e8a61047eabfe3694a1edf3349
msgid "Automatically loading initial data fixtures"
msgstr ""

#: ../../howto/initial-data.txt:80
# 8e1b2831fb3849eb8816017488595dab
msgid "If you create a fixture named ``initial_data.[xml/yaml/json]``, that fixture will be loaded every time you run :djadmin:`syncdb`. This is extremely convenient, but be careful: remember that the data will be refreshed *every time* you run :djadmin:`syncdb`. So don't use ``initial_data`` for data you'll want to edit."
msgstr ""

#: ../../howto/initial-data.txt:86
# 0d8fde337127497690b64c9bc07d6d90
msgid "Where Django finds fixture files"
msgstr ""

#: ../../howto/initial-data.txt:88
# cf40db63f86c4e7bbc9d3863a101cd1d
msgid "By default, Django looks in the ``fixtures`` directory inside each app for fixtures. You can set the :setting:`FIXTURE_DIRS` setting to a list of additional directories where Django should look."
msgstr ""

#: ../../howto/initial-data.txt:92
# 6faa98d980e84b1bbe8a8301f1c423a3
msgid "When running :djadmin:`manage.py loaddata <loaddata>`, you can also specify a path to a fixture file, which overrides searching the usual directories."
msgstr ""

#: ../../howto/initial-data.txt:98
# ffeb4202c34e431483d4dcf73bf8b17b
msgid "Fixtures are also used by the :ref:`testing framework <topics-testing-fixtures>` to help set up a consistent test environment."
msgstr ""

#: ../../howto/initial-data.txt:104
# 7882436fdddd4de4be52ca757cee2208
msgid "Providing initial SQL data"
msgstr ""

#: ../../howto/initial-data.txt:106
# c8752a3cd7cb4f04be3170de7786775d
msgid "Django provides a hook for passing the database arbitrary SQL that's executed just after the CREATE TABLE statements when you run :djadmin:`syncdb`. You can use this hook to populate default records, or you could also create SQL functions, views, triggers, etc."
msgstr ""

#: ../../howto/initial-data.txt:111
# e838a156755d4b39b573939a8c635d84
msgid "The hook is simple: Django just looks for a file called ``sql/<modelname>.sql``, in your app directory, where ``<modelname>`` is the model's name in lowercase."
msgstr ""

#: ../../howto/initial-data.txt:114
# 03c9b93deab84e3cb9f2396cc51c11b2
msgid "So, if you had a ``Person`` model in an app called ``myapp``, you could add arbitrary SQL to the file ``sql/person.sql`` inside your ``myapp`` directory. Here's an example of what the file might contain:"
msgstr ""

#: ../../howto/initial-data.txt:123
# 7f42918c97554ddba9b5c0b465e52254
msgid "Each SQL file, if given, is expected to contain valid SQL statements which will insert the desired data (e.g., properly-formatted ``INSERT`` statements separated by semicolons)."
msgstr ""

#: ../../howto/initial-data.txt:127
# aa315850603c48fe8fcf18fcc8c4e144
msgid "The SQL files are read by the :djadmin:`sqlcustom` and :djadmin:`sqlall` commands in :doc:`manage.py </ref/django-admin>`. Refer to the :doc:`manage.py documentation </ref/django-admin>` for more information."
msgstr ""

#: ../../howto/initial-data.txt:131
# 4f0c511bbaa44983bd16808628b19dcc
msgid "Note that if you have multiple SQL data files, there's no guarantee of the order in which they're executed. The only thing you can assume is that, by the time your custom data files are executed, all the database tables already will have been created."
msgstr ""

#: ../../howto/initial-data.txt:136
# 9cc270fa0c414128aafbd646b7b3d32e
msgid "Initial SQL data and testing"
msgstr ""

#: ../../howto/initial-data.txt:138
# 73a1b6b58d524fa49259355f5555c71e
msgid "This technique *cannot* be used to provide initial data for testing purposes. Django's test framework flushes the contents of the test database after each test; as a result, any data added using the custom SQL hook will be lost."
msgstr ""

#: ../../howto/initial-data.txt:143
# 4b4fb61d737840e69027960c35d83fd7
msgid "If you require data for a test case, you should add it using either a :ref:`test fixture <topics-testing-fixtures>`, or programatically add it during the ``setUp()`` of your test case."
msgstr ""

#: ../../howto/initial-data.txt:148
# 53efab866403478f873087ab4c2e0d1c
msgid "Database-backend-specific SQL data"
msgstr ""

#: ../../howto/initial-data.txt:150
# 4c7a387505084739a91b41fa51925cf7
msgid "There's also a hook for backend-specific SQL data. For example, you can have separate initial-data files for PostgreSQL and SQLite. For each app, Django looks for a file called ``<appname>/sql/<modelname>.<backend>.sql``, where ``<appname>`` is your app directory, ``<modelname>`` is the model's name in lowercase and ``<backend>`` is the last part of the module name provided for the :setting:`ENGINE <DATABASE-ENGINE>` in your settings file (e.g., if you have defined a database with an :setting:`ENGINE <DATABASE-ENGINE>` value of ``django.db.backends.sqlite3``, Django will look for ``<appname>/sql/<modelname>.sqlite3.sql``)."
msgstr ""

#: ../../howto/initial-data.txt:161
# 5e09f1c13e3a4a118f5e997a0fcbee66
msgid "Backend-specific SQL data is executed before non-backend-specific SQL data. For example, if your app contains the files ``sql/person.sql`` and ``sql/person.sqlite3.sql`` and you're installing the app on SQLite, Django will execute the contents of ``sql/person.sqlite3.sql`` first, then ``sql/person.sql``."
msgstr ""

#: ../../howto/jython.txt:3
# 58db5fd5c0c84ad7940f13ae9519453b
msgid "Running Django on Jython"
msgstr ""

#: ../../howto/jython.txt:7
# bf8df78390724bc29befdbf9212718c9
msgid "Python 2.6 support"
msgstr ""

#: ../../howto/jython.txt:9
# 172f4d70d23848cbbd381965c5b9276b
msgid "Django 1.5 has dropped support for Python 2.5. Therefore, you have to use a Jython 2.7 alpha release if you want to use Django 1.5 with Jython. Please use Django 1.4 if you want to keep using Django on a stable Jython version."
msgstr ""

#: ../../howto/jython.txt:14
# 251adf3da5e54d8e88208a5be4d73f39
msgid "Jython_ is an implementation of Python that runs on the Java platform (JVM). Django runs cleanly on Jython version 2.5 or later, which means you can deploy Django on any Java platform."
msgstr ""

#: ../../howto/jython.txt:18
# 8d6d0bdedfa04a8e90d517c1410e72e9
msgid "This document will get you up and running with Django on top of Jython."
msgstr ""

#: ../../howto/jython.txt:23
# 7efec668d5e5490a8c2f7161fe2a6347
msgid "Installing Jython"
msgstr ""

#: ../../howto/jython.txt:25
# 288262dc7b544715bc1dafc06f8e98cb
msgid "Django works with Jython versions 2.5b3 and higher. Download Jython at http://www.jython.org/."
msgstr ""

#: ../../howto/jython.txt:29
# 7ff65ad2965045fe9db43c9145e931ad
msgid "Creating a servlet container"
msgstr ""

#: ../../howto/jython.txt:31
# e05b96cdae64480784f0210154925a02
msgid "If you just want to experiment with Django, skip ahead to the next section; Django includes a lightweight Web server you can use for testing, so you won't need to set up anything else until you're ready to deploy Django in production."
msgstr ""

#: ../../howto/jython.txt:35
# 614e0ede59e04cc6b5fb92e28efbddc1
msgid "If you want to use Django on a production site, use a Java servlet container, such as `Apache Tomcat`_. Full JavaEE applications servers such as `GlassFish`_ or `JBoss`_ are also OK, if you need the extra features they include."
msgstr ""

#: ../../howto/jython.txt:44
# 6bc66fe186034efbb63cf8be5382e2cc
msgid "Installing Django"
msgstr ""

#: ../../howto/jython.txt:46
# ca23b0ab1b8544aa8c450a46ceed5a18
msgid "The next step is to install Django itself. This is exactly the same as installing Django on standard Python, so see :ref:`removing-old-versions-of-django` and :ref:`install-django-code` for instructions."
msgstr ""

#: ../../howto/jython.txt:52
# 8fda63ccedcf4f2b8795be2f6a8c96c7
msgid "Installing Jython platform support libraries"
msgstr ""

#: ../../howto/jython.txt:54
# 18329c1da27e40798c9d3bc94e7f030f
msgid "The `django-jython`_ project contains database backends and management commands for Django/Jython development. Note that the builtin Django backends won't work on top of Jython."
msgstr ""

#: ../../howto/jython.txt:60
# 9ded5288bf6d49fe84472a94ca253775
msgid "To install it, follow the `installation instructions`_ detailed on the project Web site. Also, read the `database backends`_ documentation there."
msgstr ""

#: ../../howto/jython.txt:67
# 0b6406b02f484ac08ff8388428b8ab72
msgid "Differences with Django on Jython"
msgstr ""

#: ../../howto/jython.txt:71
# b1bc2e2f6aa447f58e79913caf484d48
msgid "At this point, Django on Jython should behave nearly identically to Django running on standard Python. However, are a few differences to keep in mind:"
msgstr ""

#: ../../howto/jython.txt:74
# eccb66173b8b486dba7461c606b8f363
msgid "Remember to use the ``jython`` command instead of ``python``. The documentation uses ``python`` for consistency, but if you're using Jython you'll want to mentally replace ``python`` with ``jython`` every time it occurs."
msgstr ""

#: ../../howto/jython.txt:79
# 53d524eb0d4745f483a01d5061a4d249
msgid "Similarly, you'll need to use the ``JYTHONPATH`` environment variable instead of ``PYTHONPATH``."
msgstr ""

#: ../../howto/jython.txt:5
# 1e86636262ad46d0a518270ff77ebeb0
msgid "Jython"
msgstr ""

#: ../../howto/jython.txt:5
# 1e86636262ad46d0a518270ff77ebeb0
msgid "Java"
msgstr ""

#: ../../howto/jython.txt:5
# 1e86636262ad46d0a518270ff77ebeb0
msgid "JVM"
msgstr ""

#: ../../howto/jython.txt:69
# f486b06223c4422496e79b93bbd5e68f
msgid "JYTHONPATH"
msgstr ""

#: ../../howto/legacy-databases.txt:3
# 86aef2c93698488fbb62f28110eb77b2
msgid "Integrating Django with a legacy database"
msgstr ""

#: ../../howto/legacy-databases.txt:5
# dcdb4c4ffc1946768cd9919363531ca2
msgid "While Django is best suited for developing new applications, it's quite possible to integrate it into legacy databases. Django includes a couple of utilities to automate as much of this process as possible."
msgstr ""

#: ../../howto/legacy-databases.txt:9
# db8bdaad7d774f6580630b9c1b7ae667
msgid "This document assumes you know the Django basics, as covered in the :doc:`tutorial </intro/tutorial01>`."
msgstr ""

#: ../../howto/legacy-databases.txt:12
# f41a8f1ad37f446fa7323b5aba1e1c72
msgid "Once you've got Django set up, you'll follow this general process to integrate with an existing database."
msgstr ""

#: ../../howto/legacy-databases.txt:16
# f8b60ae550fa4939b4de261b1346fd13
msgid "Give Django your database parameters"
msgstr ""

#: ../../howto/legacy-databases.txt:18
# b0b217d3095b494aa982723fbb44a63c
msgid "You'll need to tell Django what your database connection parameters are, and what the name of the database is. Do that by editing the :setting:`DATABASES` setting and assigning values to the following keys for the ``'default'`` connection:"
msgstr ""

#: ../../howto/legacy-databases.txt:23
# 1d81ce2d79344fb899781a78c9270319
msgid ":setting:`NAME`"
msgstr ""

#: ../../howto/legacy-databases.txt:24
# c3bcb93524404e5081adc540eb6f1a02
msgid ":setting:`ENGINE <DATABASE-ENGINE>`"
msgstr ""

#: ../../howto/legacy-databases.txt:25
# f132c1228a9a4d60a96c7e1560d7b4ad
msgid ":setting:`USER`"
msgstr ""

#: ../../howto/legacy-databases.txt:26
# 10b88160f75e4a6db3fc825cc7852c24
msgid ":setting:`PASSWORD`"
msgstr ""

#: ../../howto/legacy-databases.txt:27
# 965bb017d428450292c00d7f60dd554c
msgid ":setting:`HOST`"
msgstr ""

#: ../../howto/legacy-databases.txt:28
# b85c5788f2c14c8197c13e24bb5411e2
msgid ":setting:`PORT`"
msgstr ""

#: ../../howto/legacy-databases.txt:31
# 0b371a6b5eb0483db6184f24d48ee87c
msgid "Auto-generate the models"
msgstr ""

#: ../../howto/legacy-databases.txt:35
# 074ede48419f4ad49a8d90f06d2d271a
msgid "Django comes with a utility called :djadmin:`inspectdb` that can create models by introspecting an existing database. You can view the output by running this command::"
msgstr ""

#: ../../howto/legacy-databases.txt:41
# ec07ce110a7a46c18281a3b386c83586
msgid "Save this as a file by using standard Unix output redirection::"
msgstr ""

#: ../../howto/legacy-databases.txt:45
# 2b12efd3c0b346b99a090b758c680b7f
msgid "This feature is meant as a shortcut, not as definitive model generation. See the :djadmin:`documentation of inspectdb <inspectdb>` for more information."
msgstr ""

#: ../../howto/legacy-databases.txt:48
# 14290b0bb6a8473c8a76e658f288b705
msgid "Once you've cleaned up your models, name the file ``models.py`` and put it in the Python package that holds your app. Then add the app to your :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../howto/legacy-databases.txt:52
# 3a2d2198c47b457da6c68a04ea27257d
msgid "If your plan is that your Django application(s) modify data (i.e. edit, remove records and create new ones) in the existing database tables corresponding to any of the introspected models then one of the manual review and edit steps you need to perform on the resulting ``models.py`` file is to change the Python declaration of each one of these models to specify it is a :attr:`managed <django.db.models.Options.managed>` one. For example, consider this generated model definition:"
msgstr ""

#: ../../howto/legacy-databases.txt:69
# 41428fb65ddc47fc9c482a0fca5bd3c0
msgid "If you wanted to modify existing data on your ``CENSUS_PERSONS`` SQL table with Django you'd need to change the ``managed`` option highlighted above to ``True`` (or simply remove it to let it because ``True`` is its default value)."
msgstr ""

#: ../../howto/legacy-databases.txt:73
# b03ff3b8d78441dc95f82df996ba700b
msgid "This serves as an explicit opt-in to give your nascent Django project write access to your precious data on a model by model basis."
msgstr ""

#: ../../howto/legacy-databases.txt:78
# 0d38d356e5e64590bb3edb8c0e0ee2ed
msgid "The behavior by which introspected models are created as unmanaged ones is new in Django 1.6."
msgstr ""

#: ../../howto/legacy-databases.txt:82
# c5ee9731321b4d3ba597e789ff477967
msgid "Install the core Django tables"
msgstr ""

#: ../../howto/legacy-databases.txt:84
# 222ad536652348e3a9a9072c567ea214
msgid "Next, run the :djadmin:`syncdb` command to install any extra needed database records such as admin permissions and content types::"
msgstr ""

#: ../../howto/legacy-databases.txt:90
# cfc9fd10c7e940298cfb68502c530eb0
msgid "Test and tweak"
msgstr ""

#: ../../howto/legacy-databases.txt:92
# ef3512f6c6af4c1992458a8801bd3e70
msgid "Those are the basic steps -- from here you'll want to tweak the models Django generated until they work the way you'd like. Try accessing your data via the Django database API, and try editing objects via Django's admin site, and edit the models file accordingly."
msgstr ""

#: ../../howto/outputting-csv.txt:3
# cf4c8837e08445afb69d892c49d04d81
msgid "Outputting CSV with Django"
msgstr ""

#: ../../howto/outputting-csv.txt:5
# 6f37768a39584e5b851ea39d66706b18
msgid "This document explains how to output CSV (Comma Separated Values) dynamically using Django views. To do this, you can either use the Python CSV library or the Django template system."
msgstr ""

#: ../../howto/outputting-csv.txt:10
# a5667ad034be418b89a778d7a596f17c
msgid "Using the Python CSV library"
msgstr ""

#: ../../howto/outputting-csv.txt:12
# afac73c2d7ee4809a9e16f6b03206480
msgid "Python comes with a CSV library, :mod:`csv`. The key to using it with Django is that the :mod:`csv` module's CSV-creation capability acts on file-like objects, and Django's :class:`~django.http.HttpResponse` objects are file-like objects."
msgstr ""

#: ../../howto/outputting-csv.txt:16
# 443adc38eded4438933cfa1e332acaa9
msgid "Here's an example::"
msgstr ""

#: ../../howto/outputting-csv.txt:32
#: ../../howto/outputting-pdf.txt:69
# 1311eae3e17340d580592a006462d863
# 997b35fa18df46008a32f74f5745fedb
msgid "The code and comments should be self-explanatory, but a few things deserve a mention:"
msgstr ""

#: ../../howto/outputting-csv.txt:35
# df2209979b1045b6a8e76255b5579786
msgid "The response gets a special MIME type, :mimetype:`text/csv`. This tells browsers that the document is a CSV file, rather than an HTML file. If you leave this off, browsers will probably interpret the output as HTML, which will result in ugly, scary gobbledygook in the browser window."
msgstr ""

#: ../../howto/outputting-csv.txt:40
# 37f04f9a290d4d97ba81a2925d7b3649
msgid "The response gets an additional ``Content-Disposition`` header, which contains the name of the CSV file. This filename is arbitrary; call it whatever you want. It'll be used by browsers in the \"Save as...\" dialogue, etc."
msgstr ""

#: ../../howto/outputting-csv.txt:45
# aeabac40fa6a4747a522393719e1f262
msgid "Hooking into the CSV-generation API is easy: Just pass ``response`` as the first argument to ``csv.writer``. The ``csv.writer`` function expects a file-like object, and :class:`~django.http.HttpResponse` objects fit the bill."
msgstr ""

#: ../../howto/outputting-csv.txt:50
# 2675302281954c068482dcc9ff422f7e
msgid "For each row in your CSV file, call ``writer.writerow``, passing it an iterable object such as a list or tuple."
msgstr ""

#: ../../howto/outputting-csv.txt:53
# c456a52fc1e344caa815e72bb85c7d2b
msgid "The CSV module takes care of quoting for you, so you don't have to worry about escaping strings with quotes or commas in them. Just pass ``writerow()`` your raw strings, and it'll do the right thing."
msgstr ""

#: ../../howto/outputting-csv.txt:58
# 2c83cccbf54549d6bce957a1cb149c3d
msgid "Handling Unicode"
msgstr ""

#: ../../howto/outputting-csv.txt:60
# 28e45838498742219f26ae9d8171213d
msgid "Python's :mod:`csv` module does not support Unicode input. Since Django uses Unicode internally this means strings read from sources such as :class:`~django.http.HttpRequest` are potentially problematic. There are a few options for handling this:"
msgstr ""

#: ../../howto/outputting-csv.txt:65
# d354b7229f8d4e5a8898a310c2ecc995
msgid "Manually encode all Unicode objects to a compatible encoding."
msgstr ""

#: ../../howto/outputting-csv.txt:67
# 6b846803752942bba9ce13912dd07915
msgid "Use the ``UnicodeWriter`` class provided in the `csv module's examples section`_."
msgstr ""

#: ../../howto/outputting-csv.txt:70
# bd7b43cf16114b63888716223e129f61
msgid "Use the `python-unicodecsv module`_, which aims to be a drop-in replacement for :mod:`csv` that gracefully handles Unicode."
msgstr ""

#: ../../howto/outputting-csv.txt:73
# db83a6b7c92540c086cd091fe0763546
msgid "For more information, see the Python documentation of the :mod:`csv` module."
msgstr ""

#: ../../howto/outputting-csv.txt:79
# 64e387f8742b4c088af19e45c9511cc6
msgid "Using the template system"
msgstr ""

#: ../../howto/outputting-csv.txt:81
# 929b2f64e9324697b6dc619dda700bac
msgid "Alternatively, you can use the :doc:`Django template system </topics/templates>` to generate CSV. This is lower-level than using the convenient Python :mod:`csv` module, but the solution is presented here for completeness."
msgstr ""

#: ../../howto/outputting-csv.txt:85
# 7a76ffddc9b44859b0addfd1039f4825
msgid "The idea here is to pass a list of items to your template, and have the template output the commas in a :ttag:`for` loop."
msgstr ""

#: ../../howto/outputting-csv.txt:88
# 99e408f8975242378beb4a32cb8140d0
msgid "Here's an example, which generates the same CSV file as above::"
msgstr ""

#: ../../howto/outputting-csv.txt:112
# 8299914b1bc143caa682a6d649d58250
msgid "The only difference between this example and the previous example is that this one uses template loading instead of the CSV module. The rest of the code -- such as the ``content_type='text/csv'`` -- is the same."
msgstr ""

#: ../../howto/outputting-csv.txt:116
# 4097dcc204c0479c95e74454976edf2f
msgid "Then, create the template ``my_template_name.txt``, with this template code:"
msgstr ""

#: ../../howto/outputting-csv.txt:123
# 439dafd295c84818a012d1d25feae3df
msgid "This template is quite basic. It just iterates over the given data and displays a line of CSV for each row. It uses the :tfilter:`addslashes` template filter to ensure there aren't any problems with quotes."
msgstr ""

#: ../../howto/outputting-csv.txt:128
# 3b1ef478e80d4becba3f1028ea66c287
msgid "Other text-based formats"
msgstr ""

#: ../../howto/outputting-csv.txt:130
# c396543f4f144b91b4cb478046e6cffd
msgid "Notice that there isn't very much specific to CSV here -- just the specific output format. You can use either of these techniques to output any text-based format you can dream of. You can also use a similar technique to generate arbitrary binary data; see :doc:`/howto/outputting-pdf` for an example."
msgstr ""

#: ../../howto/outputting-pdf.txt:3
# 9001e96eaa99445aaf810a27f7dec59f
msgid "Outputting PDFs with Django"
msgstr ""

#: ../../howto/outputting-pdf.txt:5
# 81ab0821142346159f4a0e7318299130
msgid "This document explains how to output PDF files dynamically using Django views. This is made possible by the excellent, open-source ReportLab_ Python PDF library."
msgstr ""

#: ../../howto/outputting-pdf.txt:9
# 28b1455f580f4641b7cf1d4131c691da
msgid "The advantage of generating PDF files dynamically is that you can create customized PDFs for different purposes -- say, for different users or different pieces of content."
msgstr ""

#: ../../howto/outputting-pdf.txt:13
# f4240600a5534b699a93667f01df0aa3
msgid "For example, Django was used at kusports.com_ to generate customized, printer-friendly NCAA tournament brackets, as PDF files, for people participating in a March Madness contest."
msgstr ""

#: ../../howto/outputting-pdf.txt:21
# 5a51302fb0b3486fbf158a02fbbeaeaa
msgid "Install ReportLab"
msgstr ""

#: ../../howto/outputting-pdf.txt:23
# a0d9559b66b6430499cee05bb89159e0
msgid "Download and install the ReportLab library from http://www.reportlab.com/software/opensource/rl-toolkit/download/. The `user guide`_ (not coincidentally, a PDF file) explains how to install it. Alternatively, you can also install it with ``pip``:"
msgstr ""

#: ../../howto/outputting-pdf.txt:32
# 530b1716c60341589f6e43c6e0570f35
msgid "Test your installation by importing it in the Python interactive interpreter::"
msgstr ""

#: ../../howto/outputting-pdf.txt:36
# b73e2f0b6cd9447788f92ae9ed7c6358
msgid "If that command doesn't raise any errors, the installation worked."
msgstr ""

#: ../../howto/outputting-pdf.txt:41
# 5e443c88135b4ffa864c99d247eb4d3c
msgid "Write your view"
msgstr ""

#: ../../howto/outputting-pdf.txt:43
# aa1b025aa12f480e98e294dd15de83d2
msgid "The key to generating PDFs dynamically with Django is that the ReportLab API acts on file-like objects, and Django's :class:`~django.http.HttpResponse` objects are file-like objects."
msgstr ""

#: ../../howto/outputting-pdf.txt:47
# c22a0b687ef64da8a509309cc64efeb7
msgid "Here's a \"Hello World\" example::"
msgstr ""

#: ../../howto/outputting-pdf.txt:72
# 730ed17daa1a4990876c96a7264bc012
msgid "The response gets a special MIME type, :mimetype:`application/pdf`. This tells browsers that the document is a PDF file, rather than an HTML file. If you leave this off, browsers will probably interpret the output as HTML, which would result in ugly, scary gobbledygook in the browser window."
msgstr ""

#: ../../howto/outputting-pdf.txt:78
# a690cb8523514884b0fff504d8ec65bd
msgid "The response gets an additional ``Content-Disposition`` header, which contains the name of the PDF file. This filename is arbitrary: Call it whatever you want. It'll be used by browsers in the \"Save as...\" dialogue, etc."
msgstr ""

#: ../../howto/outputting-pdf.txt:83
# 0daf54675b6c4476b0e4216466a00ea7
msgid "The ``Content-Disposition`` header starts with ``'attachment; '`` in this example. This forces Web browsers to pop-up a dialog box prompting/confirming how to handle the document even if a default is set on the machine. If you leave off ``'attachment;'``, browsers will handle the PDF using whatever program/plugin they've been configured to use for PDFs. Here's what that code would look like::"
msgstr ""

#: ../../howto/outputting-pdf.txt:92
# deb1d76bd3d34b798225a8e937a16a34
msgid "Hooking into the ReportLab API is easy: Just pass ``response`` as the first argument to ``canvas.Canvas``. The ``Canvas`` class expects a file-like object, and :class:`~django.http.HttpResponse` objects fit the bill."
msgstr ""

#: ../../howto/outputting-pdf.txt:97
# 9acd6f4b8e8a4f15b46c1c356f674eec
msgid "Note that all subsequent PDF-generation methods are called on the PDF object (in this case, ``p``) -- not on ``response``."
msgstr ""

#: ../../howto/outputting-pdf.txt:100
# 3f6ddecc370d499c870baa75728b26c7
msgid "Finally, it's important to call ``showPage()`` and ``save()`` on the PDF file."
msgstr ""

#: ../../howto/outputting-pdf.txt:105
# 09b57ab030b94b97adabce41fea20c9f
msgid "ReportLab is not thread-safe. Some of our users have reported odd issues with building PDF-generating Django views that are accessed by many people at the same time."
msgstr ""

#: ../../howto/outputting-pdf.txt:110
# 997017828b8f45ba92fd92809a5e63ae
msgid "Complex PDFs"
msgstr ""

#: ../../howto/outputting-pdf.txt:112
# 5a828de5caf64cf4a6e534ea7a892c70
msgid "If you're creating a complex PDF document with ReportLab, consider using the :mod:`io` library as a temporary holding place for your PDF file. This library provides a file-like object interface that is particularly efficient. Here's the above \"Hello World\" example rewritten to use :mod:`io`::"
msgstr ""

#: ../../howto/outputting-pdf.txt:146
# 02ac28282e4b4fd9a53865eb5e4db0e9
msgid "Further resources"
msgstr ""

#: ../../howto/outputting-pdf.txt:148
# 50d125a3bb1e4da5a548bd9ccf7e66d7
msgid "PDFlib_ is another PDF-generation library that has Python bindings. To use it with Django, just use the same concepts explained in this article."
msgstr ""

#: ../../howto/outputting-pdf.txt:150
# 48c0de6bfbeb4d7a8042c2132f675f99
msgid "`Pisa XHTML2PDF`_ is yet another PDF-generation library. Pisa ships with an example of how to integrate Pisa with Django."
msgstr ""

#: ../../howto/outputting-pdf.txt:152
# 0fffe45ea3c0473293e5ab8897d55329
msgid "HTMLdoc_ is a command-line script that can convert HTML to PDF. It doesn't have a Python interface, but you can escape out to the shell using ``system`` or ``popen`` and retrieve the output in Python."
msgstr ""

#: ../../howto/outputting-pdf.txt:161
# b9309b5c2ad0436eb15b1114636b085b
msgid "Other formats"
msgstr ""

#: ../../howto/outputting-pdf.txt:163
# 704b5e26fca14e97a14e306ae5b51661
msgid "Notice that there isn't a lot in these examples that's PDF-specific -- just the bits using ``reportlab``. You can use a similar technique to generate any arbitrary format that you can find a Python library for. Also see :doc:`/howto/outputting-csv` for another example and some techniques you can use when generated text-based formats."
msgstr ""

#: ../../howto/static-files/deployment.txt:3
# b497a9ea6e0f4258b07b0d12ae02cc8a
msgid "Deploying static files"
msgstr ""

#: ../../howto/static-files/deployment.txt:7
# 7b13a948c88e470bb4990e2b5d5a8b78
msgid "For an introduction to the use of :mod:`django.contrib.staticfiles`, see :doc:`/howto/static-files/index`."
msgstr ""

#: ../../howto/static-files/deployment.txt:13
# 7f31aa38ddc548eaa4506db044eb9f38
msgid "Serving static files in production"
msgstr ""

#: ../../howto/static-files/deployment.txt:15
# 66b7c1b9b0d341f9a33fd56b40e903e9
msgid "The basic outline of putting static files into production is simple: run the :djadmin:`collectstatic` command when static files change, then arrange for the collected static files directory (:setting:`STATIC_ROOT`) to be moved to the static file server and served. Depending on :setting:`STATICFILES_STORAGE`, files may need to be moved to a new location manually or the :func:`post_process <django.contrib.staticfiles.storage.StaticFilesStorage.post_process>` method of the ``Storage`` class might take care of that."
msgstr ""

#: ../../howto/static-files/deployment.txt:23
# 2cc27156b9da499d9293537c58e7b992
msgid "Of course, as with all deployment tasks, the devil's in the details. Every production setup will be a bit different, so you'll need to adapt the basic outline to fit your needs. Below are a few common patterns that might help."
msgstr ""

#: ../../howto/static-files/deployment.txt:28
# c55c6542c6cd4db8a89c2571d8647410
msgid "Serving the site and your static files from the same server"
msgstr ""

#: ../../howto/static-files/deployment.txt:30
# f6fbe15a638d4559b51363f083196789
msgid "If you want to serve your static files from the same server that's already serving your site, the process may look something like:"
msgstr ""

#: ../../howto/static-files/deployment.txt:33
# d9223c510746475a81808a6052365d8c
msgid "Push your code up to the deployment server."
msgstr ""

#: ../../howto/static-files/deployment.txt:34
# 4ecc0a68f12e49d3ab8f874ae6b0c4e6
msgid "On the server, run :djadmin:`collectstatic` to copy all the static files into :setting:`STATIC_ROOT`."
msgstr ""

#: ../../howto/static-files/deployment.txt:36
# 07b7aa471d404620baaa72f88aeee18d
msgid "Configure your web server to serve the files in :setting:`STATIC_ROOT` under the URL :setting:`STATIC_URL`. For example, here's :ref:`how to do this with Apache and mod_wsgi <serving-files>`."
msgstr ""

#: ../../howto/static-files/deployment.txt:40
# cc208484181046b4a91ea325665a5b34
msgid "You'll probably want to automate this process, especially if you've got multiple web servers. There's any number of ways to do this automation, but one option that many Django developers enjoy is `Fabric <http://fabfile.org/>`_."
msgstr ""

#: ../../howto/static-files/deployment.txt:45
# 725fb83f707145a0bb58d63a5cf010b4
msgid "Below, and in the following sections, we'll show off a few example fabfiles (i.e. Fabric scripts) that automate these file deployment options. The syntax of a fabfile is fairly straightforward but won't be covered here; consult `Fabric's documentation <http://docs.fabfile.org/>`_, for a complete explanation of the syntax."
msgstr ""

#: ../../howto/static-files/deployment.txt:51
# 88da9a8caf504958897b9120ae0acd61
msgid "So, a fabfile to deploy static files to a couple of web servers might look something like::"
msgstr ""

#: ../../howto/static-files/deployment.txt:67
# 1baceb51afbc47af9e53db2cd4d22f61
msgid "Serving static files from a dedicated server"
msgstr ""

#: ../../howto/static-files/deployment.txt:69
# f0cae274f4444e448648bd0d05a9eac3
msgid "Most larger Django sites use a separate Web server -- i.e., one that's not also running Django -- for serving static files. This server often runs a different type of web server -- faster but less full-featured. Some common choices are:"
msgstr ""

#: ../../howto/static-files/deployment.txt:85
# 5a47f6e44d354bb086092124f61b4e96
msgid "Configuring these servers is out of scope of this document; check each server's respective documentation for instructions."
msgstr ""

#: ../../howto/static-files/deployment.txt:88
# 86b4e1af8a3d4d8f9c463f474ede2f72
msgid "Since your static file server won't be running Django, you'll need to modify the deployment strategy to look something like:"
msgstr ""

#: ../../howto/static-files/deployment.txt:91
# d79cb4b4d5f2405bb61aa636cf671e09
msgid "When your static files change, run :djadmin:`collectstatic` locally."
msgstr ""

#: ../../howto/static-files/deployment.txt:93
# cb8e4209238b4ee9960c7f64d944bf86
msgid "Push your local :setting:`STATIC_ROOT` up to the static file server into the directory that's being served. `rsync <https://rsync.samba.org/>`_ is a common choice for this step since it only needs to transfer the bits of static files that have changed."
msgstr ""

#: ../../howto/static-files/deployment.txt:98
# d9e0219c232e41e68d904db7a522b104
msgid "Here's how this might look in a fabfile::"
msgstr ""

#: ../../howto/static-files/deployment.txt:121
# 1f8fe80d60a94c5d9fc70eb39b4d641d
msgid "Serving static files from a cloud service or CDN"
msgstr ""

#: ../../howto/static-files/deployment.txt:123
# 365a128af714424e86ed98b8e4f600b7
msgid "Another common tactic is to serve static files from a cloud storage provider like Amazon's S3 and/or a CDN (content delivery network). This lets you ignore the problems of serving static files and can often make for faster-loading webpages (especially when using a CDN)."
msgstr ""

#: ../../howto/static-files/deployment.txt:128
# 9f3f3ad346934801a710fb38d451eb30
msgid "When using these services, the basic workflow would look a bit like the above, except that instead of using ``rsync`` to transfer your static files to the server you'd need to transfer the static files to the storage provider or CDN."
msgstr ""

#: ../../howto/static-files/deployment.txt:132
# cb355752b8984d9082b7614400f6765d
msgid "There's any number of ways you might do this, but if the provider has an API a :doc:`custom file storage backend </howto/custom-file-storage>` will make the process incredibly simple. If you've written or are using a 3rd party custom storage backend, you can tell :djadmin:`collectstatic` to use it by setting :setting:`STATICFILES_STORAGE` to the storage engine."
msgstr ""

#: ../../howto/static-files/deployment.txt:138
# 55591fb882c34cc6b0cb6cdb35883620
msgid "For example, if you've written an S3 storage backend in ``myproject.storage.S3Storage`` you could use it with::"
msgstr ""

#: ../../howto/static-files/deployment.txt:143
# 646e0621f4fe420d9ad37c69db3350c3
msgid "Once that's done, all you have to do is run :djadmin:`collectstatic` and your static files would be pushed through your storage package up to S3. If you later needed to switch to a different storage provider, it could be as simple as changing your :setting:`STATICFILES_STORAGE` setting."
msgstr ""

#: ../../howto/static-files/deployment.txt:148
# be507bfc919c4e6e860389b107ced753
msgid "For details on how you'd write one of these backends, see :doc:`/howto/custom-file-storage`. There are 3rd party apps available that provide storage backends for many common file storage APIs. A good starting point is the `overview at djangopackages.com <https://www.djangopackages.com/grids/g/storage-backends/>`_."
msgstr ""

#: ../../howto/static-files/deployment.txt:155
#: ../../howto/static-files/index.txt:160
# b7a8f4803cb047f0b3a9d51bd7b1c1b2
# 1a730c262f364c85a4022b3b0f249db1
msgid "Learn more"
msgstr ""

#: ../../howto/static-files/deployment.txt:157
# 6d43d175aad644e0b4e68a732ca9b33d
msgid "For complete details on all the settings, commands, template tags, and other pieces included in :mod:`django.contrib.staticfiles`, see :doc:`the staticfiles reference </ref/contrib/staticfiles>`."
msgstr ""

#: ../../howto/static-files/index.txt:3
# 7787b64949a14fb3ad812203d10f6df5
msgid "Managing static files (CSS, images)"
msgstr ""

#: ../../howto/static-files/index.txt:5
# 0f4414a9718b4b2b9392da8aae047177
msgid "Websites generally need to serve additional files such as images, JavaScript, or CSS. In Django, we refer to these files as \"static files\".  Django provides :mod:`django.contrib.staticfiles` to help you manage them."
msgstr ""

#: ../../howto/static-files/index.txt:9
# a0471251919f415d96421ba2b603f1ff
msgid "This page describes how you can serve these static files."
msgstr ""

#: ../../howto/static-files/index.txt:12
# 7a55748e5b7e49a3be0b0d8b58650989
msgid "Configuring static files"
msgstr ""

#: ../../howto/static-files/index.txt:14
# e0c9ca98b2b3434daaab9503af775899
msgid "Make sure that ``django.contrib.staticfiles`` is included in your :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../howto/static-files/index.txt:17
# 74c595448119443cbd8c131ed29b8386
msgid "In your settings file, define :setting:`STATIC_URL`, for example::"
msgstr ""

#: ../../howto/static-files/index.txt:21
# e19a172afd2744c698959a97441b07a3
msgid "In your templates, either hardcode the url like ``/static/my_app/myexample.jpg`` or, preferably, use the :ttag:`static<staticfiles-static>` template tag to build the URL for the given relative path by using the configured :setting:`STATICFILES_STORAGE` storage (this makes it much easier when you want to switch to a content delivery network (CDN) for serving static files)."
msgstr ""

#: ../../howto/static-files/index.txt:35
# 53b99a310b0a40b2b574f9973b5a3b8e
msgid "Store your static files in a folder called ``static`` in your app. For example ``my_app/static/my_app/myimage.jpg``."
msgstr ""

#: ../../howto/static-files/index.txt:38
# 707ae3f7f6a64a858a672413643f60c9
msgid "Serving the files"
msgstr ""

#: ../../howto/static-files/index.txt:40
# cef08a781bd54b73aa6fec1f4cfc46f0
msgid "In addition to these configuration steps, you'll also need to actually serve the static files."
msgstr ""

#: ../../howto/static-files/index.txt:43
# 820138bce1ca4b71a6438e55a5929760
msgid "During development, if you use :mod:`django.contrib.staticfiles`, this will be done automatically by :djadmin:`runserver` when :setting:`DEBUG` is set to ``True`` (see :func:`django.contrib.staticfiles.views.serve`)."
msgstr ""

#: ../../howto/static-files/index.txt:47
# 18e29b73030c4161abb38213dd7f2e3c
msgid "This method is **grossly inefficient** and probably **insecure**, so it is **unsuitable for production**."
msgstr ""

#: ../../howto/static-files/index.txt:50
# fbeabfe0e0024a4785311a77f49415e6
msgid "See :doc:`/howto/static-files/deployment` for proper strategies to serve static files in production environments."
msgstr ""

#: ../../howto/static-files/index.txt:53
# d100a1a7ea6b444dbdf9ad6b04aa4efe
msgid "Your project will probably also have static assets that aren't tied to a particular app. In addition to using a ``static/`` directory inside your apps, you can define a list of directories (:setting:`STATICFILES_DIRS`) in your settings file where Django will also look for static files. For example::"
msgstr ""

#: ../../howto/static-files/index.txt:63
# 324a5de2e4e042979d7884860132c150
msgid "See the documentation for the :setting:`STATICFILES_FINDERS` setting for details on how ``staticfiles`` finds your files."
msgstr ""

#: ../../howto/static-files/index.txt:66
# 7257fa6bbccd4d55ab08132d1e481181
msgid "Static file namespacing"
msgstr ""

#: ../../howto/static-files/index.txt:68
# 920baf3f4aae4dcd8fc2fe89ffce376d
msgid "Now we *might* be able to get away with putting our static files directly in ``my_app/static/`` (rather than creating another ``my_app`` subdirectory), but it would actually be a bad idea. Django will use the first static file it finds whose name matches, and if you had a static file with the same name in a *different* application, Django would be unable to distinguish between them. We need to be able to point Django at the right one, and the easiest way to ensure this is by *namespacing* them. That is, by putting those static files inside *another* directory named for the application itself."
msgstr ""

#: ../../howto/static-files/index.txt:80
# 88b605affb1e4fd7bfc80b28216c7e27
msgid "Serving static files during development."
msgstr ""

#: ../../howto/static-files/index.txt:82
# 7a6221165c2a42c3909e792d0336303a
msgid "If you use :mod:`django.contrib.staticfiles` as explained above, :djadmin:`runserver` will do this automatically when :setting:`DEBUG` is set to ``True``. If you don't have ``django.contrib.staticfiles`` in :setting:`INSTALLED_APPS`, you can still manually serve static files using the :func:`django.contrib.staticfiles.views.serve` view."
msgstr ""

#: ../../howto/static-files/index.txt:88
#: ../../howto/static-files/index.txt:118
# 97e0fa8892924091aa310b6a03bf36ed
# 9f544c84c7df4927a8818d1f4d95d875
msgid "This is not suitable for production use! For some common deployment strategies, see :doc:`/howto/static-files/deployment`."
msgstr ""

#: ../../howto/static-files/index.txt:91
# 35491ec2c6324971a01889373fc80f8c
msgid "For example, if your :setting:`STATIC_URL` is defined as ``/static/``, you can do this by adding the following snippet to your urls.py::"
msgstr ""

#: ../../howto/static-files/index.txt:103
# b8e80742e48b4681a6685efb64cb73da
msgid "This helper function works only in debug mode and only if the given prefix is local (e.g. ``/static/``) and not a URL (e.g. ``http://static.example.com/``)."
msgstr ""

#: ../../howto/static-files/index.txt:107
# f21ce04dffaa4b2e9446a3364f26f9ff
msgid "Also this helper function only serves the actual :setting:`STATIC_ROOT` folder; it doesn't perform static files discovery like :mod:`django.contrib.staticfiles`."
msgstr ""

#: ../../howto/static-files/index.txt:112
# 14b564a2fd584e5195d8ff7984cb401e
msgid "Serving files uploaded by a user during development."
msgstr ""

#: ../../howto/static-files/index.txt:114
# 13b161ef524d446d80e8ff8ee3f85437
msgid "During development, you can serve user-uploaded media files from :setting:`MEDIA_ROOT` using the :func:`django.contrib.staticfiles.views.serve` view."
msgstr ""

#: ../../howto/static-files/index.txt:121
# 9d1da178aeec40a5aadf3e7bfee85cad
msgid "For example, if your :setting:`MEDIA_URL` is defined as ``/media/``, you can do this by adding the following snippet to your urls.py::"
msgstr ""

#: ../../howto/static-files/index.txt:133
# e5561ce22e75461796791740eaac9fcc
msgid "This helper function works only in debug mode and only if the given prefix is local (e.g. ``/media/``) and not a URL (e.g. ``http://media.example.com/``)."
msgstr ""

#: ../../howto/static-files/index.txt:138
#: ../../howto/upgrade-version.txt:87
# d6ab9210d13e43a494c24aac2021c2b6
# c05e33f1d7184e60acccd7381dc01925
msgid "Deployment"
msgstr ""

#: ../../howto/static-files/index.txt:140
# a72189097713439080bc09de3d587e5b
msgid ":mod:`django.contrib.staticfiles` provides a convenience management command for gathering static files in a single directory so you can serve them easily."
msgstr ""

#: ../../howto/static-files/index.txt:143
# 6acb84354dcf4c17ba0d6b1a717079ca
msgid "Set the :setting:`STATIC_ROOT` setting to the directory from which you'd like to serve these files, for example::"
msgstr ""

#: ../../howto/static-files/index.txt:148
# b57ad1c847974b3e88400a03aa623ed8
msgid "Run the :djadmin:`collectstatic` management command::"
msgstr ""

#: ../../howto/static-files/index.txt:152
# 2099fec8c6954fb4a1295c5a7006155b
msgid "This will copy all files from your static folders into the :setting:`STATIC_ROOT` directory."
msgstr ""

#: ../../howto/static-files/index.txt:155
# 049ca33ef77846799538965fda114b0c
msgid "Use a web server of your choice to serve the files. :doc:`/howto/static-files/deployment` covers some common deployment strategies for static files."
msgstr ""

#: ../../howto/static-files/index.txt:162
# 8c46cdb3766e464e8ae702a5d0e8958c
msgid "This document has covered the basics and some common usage patterns. For complete details on all the settings, commands, template tags, and other pieces included in :mod:`django.contrib.staticfiles`, see :doc:`the staticfiles reference </ref/contrib/staticfiles>`."
msgstr ""

#: ../../howto/upgrade-version.txt:3
# aa8edc64ae414257af145355fa3c8ce0
msgid "Upgrading Django to a newer version"
msgstr ""

#: ../../howto/upgrade-version.txt:5
# b34d8ad7754847dc9a76f313c4f8fded
msgid "While it can be a complex process at times, upgrading to the latest Django version has several benefits:"
msgstr ""

#: ../../howto/upgrade-version.txt:8
# dac0c8f0df5b4ca1b69ea40bf1019ec1
msgid "New features and improvements are added."
msgstr ""

#: ../../howto/upgrade-version.txt:9
# ddc36729d07f4e5980916d8000e624a2
msgid "Bugs are fixed."
msgstr ""

#: ../../howto/upgrade-version.txt:10
# 8b864ed3c074448fb8978bc70a7f8269
msgid "Older version of Django will eventually no longer receive security updates. (see :ref:`backwards-compatibility-policy`)."
msgstr ""

#: ../../howto/upgrade-version.txt:12
# cc5e059db50d42a0be04a1748b87a241
msgid "Upgrading as each new Django release is available makes future upgrades less painful by keeping your code base up to date."
msgstr ""

#: ../../howto/upgrade-version.txt:15
# 5ebf2255cbdc46728d44bbc728056e3b
msgid "Here are some things to consider to help make your upgrade process as smooth as possible."
msgstr ""

#: ../../howto/upgrade-version.txt:19
# 19bf7f6e7c26418282b8bf1dcd89bd1e
msgid "Required Reading"
msgstr ""

#: ../../howto/upgrade-version.txt:21
# 89eca201df1b45d3be6bd28e015736d1
msgid "If it's your first time doing an upgrade, it is useful to read the :doc:`guide on the different release processes </internals/release-process>`."
msgstr ""

#: ../../howto/upgrade-version.txt:24
# 2d86c7ea74d6410cb1bb88ae7a9f8a12
msgid "Afterwards, you should familiarize yourself with the changes that were made in the new Django version(s):"
msgstr ""

#: ../../howto/upgrade-version.txt:27
# 917eab5c8113464496ab5e3b697ec264
msgid "Read the :doc:`release notes </releases/index>` for each 'final' release from the one after your current Django version, up to and including the version to which you plan to upgrade."
msgstr ""

#: ../../howto/upgrade-version.txt:30
# 12ea193897ea47ebabd2776a2f86cb21
msgid "Look at the :doc:`deprecation timeline</internals/deprecation>` for the relevant versions."
msgstr ""

#: ../../howto/upgrade-version.txt:33
# f2e759e74c8c4340bf543285b24c1e7f
msgid "Pay particular attention to backwards incompatible changes to get a clear idea of what will be needed for a successful upgrade."
msgstr ""

#: ../../howto/upgrade-version.txt:37
# 45c26894380b4dcca99a485889fdf2d7
msgid "Dependencies"
msgstr ""

#: ../../howto/upgrade-version.txt:39
# 793657a9ed234abebc5715c1cf933a64
msgid "In most cases it will be necessary to upgrade to the latest version of your Django-related dependencies as well. If the Django version was recently released or if some of your dependencies are not well-maintained, some of your dependencies may not yet support the new Django version. In these cases you may have to wait until new versions of your dependencies are released."
msgstr ""

#: ../../howto/upgrade-version.txt:46
# 455349a8a57543218646181eafde82ba
msgid "Installation"
msgstr ""

#: ../../howto/upgrade-version.txt:48
# 58ca737e7f4f4abeba1acbef40f9d2fa
msgid "Once you're ready, it is time to :doc:`install the new Django version </topics/install>`. If you are using virtualenv_ and it is a major upgrade, you might want to set up a new environment with all the dependencies first."
msgstr ""

#: ../../howto/upgrade-version.txt:52
# 2a420e433391446d8ef1e1d37df787e1
msgid "Exactly which steps you will need to take depends on your installation process. The most convenient way is to use pip_ with the ``--upgrade`` or ``-U`` flag:"
msgstr ""

#: ../../howto/upgrade-version.txt:59
# ad0c8f725d574b57846cd6464df47f2f
msgid "pip_ also automatically uninstalls the previous version of Django."
msgstr ""

#: ../../howto/upgrade-version.txt:61
# a4be7517881649609d7a9a936ff7a2fa
msgid "If you use some other installation process, you might have to manually :ref:`uninstall the old Django version <removing-old-versions-of-django>` and should look at the complete installation instructions."
msgstr ""

#: ../../howto/upgrade-version.txt:69
# 790b069092154da58c3f947b7f2a92ef
msgid "Testing"
msgstr ""

#: ../../howto/upgrade-version.txt:71
# 0264bda93df24b98ba512c26f8671daf
msgid "When the new environment is set up, :doc:`run the full test suite </topics/testing/overview>` for your application. In Python 2.7+, deprecation warnings are silenced by default. It is useful to turn the warnings on so they are shown in the test output (you can also use the flag if you test your app manually using ``manage.py runserver``):"
msgstr ""

#: ../../howto/upgrade-version.txt:81
# 232b93b8a3e04333a26604e0c305d457
msgid "After you have run the tests, fix any failures. While you have the release notes fresh in your mind, it may also be a good time to take advantage of new features in Django by refactoring your code to eliminate any deprecation warnings."
msgstr ""

#: ../../howto/upgrade-version.txt:89
# 64b52ee9a771480daaa3e26dcf8bec73
msgid "When you are sufficiently confident your app works with the new version of Django, you're ready to go ahead and :doc:`deploy </howto/deployment/index>` your upgraded Django project."
msgstr ""

#: ../../howto/upgrade-version.txt:93
# b480013a59004e60adaefba10bb0408f
msgid "If you are using caching provided by Django, you should consider clearing your cache after upgrading. Otherwise you may run into problems, for example, if you are caching pickled objects as these objects are not guaranteed to be pickle-compatible across Django versions. A past instance of incompatibility was caching pickled :class:`~django.http.HttpResponse` objects, either directly or indirectly via the :func:`~django.views.decorators.cache.cache_page` decorator."
msgstr ""

