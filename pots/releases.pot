# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Django 1.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-02 15:07+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../releases/0.95.txt:3
# 7bce7267c2854724ac8ac4a4d62c35be
msgid "Django version 0.95 release notes"
msgstr ""

#: ../../releases/0.95.txt:5
# c5d2671680704b1498b60d0e9c824815
msgid "Welcome to the Django 0.95 release."
msgstr ""

#: ../../releases/0.95.txt:7
# c7157ff569eb4ed89486bf617bcd0ba7
msgid "This represents a significant advance in Django development since the 0.91 release in January 2006. The details of every change in this release would be too extensive to list in full, but a summary is presented below."
msgstr ""

#: ../../releases/0.95.txt:12
# 7bc684770e0e434fbf58e2b8aee6696a
msgid "Suitability and API stability"
msgstr ""

#: ../../releases/0.95.txt:14
# db971f351e0c411b9022558b67db8629
msgid "This release is intended to provide a stable reference point for developers wanting to work on production-level applications that use Django."
msgstr ""

#: ../../releases/0.95.txt:17
# 2394e4cb343949b08e2045e9f9f408fd
msgid "However, it's not the 1.0 release, and we'll be introducing further changes before 1.0. For a clear look at which areas of the framework will change (and which ones will *not* change) before 1.0, see the api-stability.txt file, which lives in the docs/ directory of the distribution."
msgstr ""

#: ../../releases/0.95.txt:22
# 362d21bcc77947509338f868241857c9
msgid "You may have a need to use some of the features that are marked as \"subject to API change\" in that document, but that's OK with us as long as it's OK with you, and as long as you understand APIs may change in the future."
msgstr ""

#: ../../releases/0.95.txt:26
# a6706c2583b449f5bbef95ba5a448a84
msgid "Fortunately, most of Django's core APIs won't be changing before version 1.0. There likely won't be as big of a change between 0.95 and 1.0 versions as there was between 0.91 and 0.95."
msgstr ""

#: ../../releases/0.95.txt:31
# c8266fdb68e8438d9a78442e97e77b78
msgid "Changes and new features"
msgstr ""

#: ../../releases/0.95.txt:33
# 6f932a34bf27451a90d26ced01087e3a
msgid "The major changes in this release (for developers currently using the 0.91 release) are a result of merging the 'magic-removal' branch of development. This branch removed a number of constraints in the way Django code had to be written that were a consequence of decisions made in the early days of Django, prior to its open-source release. It's now possible to write more natural, Pythonic code that works as expected, and there's less \"black magic\" happening behind the scenes."
msgstr ""

#: ../../releases/0.95.txt:41
# 8f232f056ebc438a9b1cc8fc208fe8c2
msgid "Aside from that, another main theme of this release is a dramatic increase in usability. We've made countless improvements in error messages, documentation, etc., to improve developers' quality of life."
msgstr ""

#: ../../releases/0.95.txt:45
# b225d61c4fd54d529145c9df95a368c3
msgid "The new features and changes introduced in 0.95 include:"
msgstr ""

#: ../../releases/0.95.txt:47
# 5baff8f4d66f46f7b3c2d202382434aa
msgid "Django now uses a more consistent and natural filtering interface for retrieving objects from the database."
msgstr ""

#: ../../releases/0.95.txt:50
# ab6bfe8c4fd84e0f8db0bdca507734ef
msgid "User-defined models, functions and constants now appear in the module namespace they were defined in. (Previously everything was magically transferred to the django.models.* namespace.)"
msgstr ""

#: ../../releases/0.95.txt:54
# bcceeffc61e242acb65b92f2117d4c47
msgid "Some optional applications, such as the FlatPage, Sites and Redirects apps, have been decoupled and moved into django.contrib. If you don't want to use these applications, you no longer have to install their database tables."
msgstr ""

#: ../../releases/0.95.txt:59
# 2ed9a0dd7f1f4e8496cdc2b416ba2812
msgid "Django now has support for managing database transactions."
msgstr ""

#: ../../releases/0.95.txt:61
# 42e6707430974a4c93f13b6d9f1b7638
msgid "We've added the ability to write custom authentication and authorization backends for authenticating users against alternate systems, such as LDAP."
msgstr ""

#: ../../releases/0.95.txt:65
# 30b66674421b46f4aa4915fc9028a47b
msgid "We've made it easier to add custom table-level functions to models, through a new \"Manager\" API."
msgstr ""

#: ../../releases/0.95.txt:68
# 6d5ecd06abd1419386bae8e3ef9bc691
msgid "It's now possible to use Django without a database. This simply means that the framework no longer requires you to have a working database set up just to serve dynamic pages. In other words, you can just use URLconfs/views on their own. Previously, the framework required that a database be configured, regardless of whether you actually used it."
msgstr ""

#: ../../releases/0.95.txt:74
# a8aaaff0979248449f5bad57bed08d21
msgid "It's now more explicit and natural to override save() and delete() methods on models, rather than needing to hook into the pre_save() and post_save() method hooks."
msgstr ""

#: ../../releases/0.95.txt:78
# 983daf53a39b439c83a2013aa9db607d
msgid "Individual pieces of the framework now can be configured without requiring the setting of an environment variable. This permits use of, for example, the Django templating system inside other applications."
msgstr ""

#: ../../releases/0.95.txt:82
# 2747b02aba2a438ebd40a50db1a70f85
msgid "More and more parts of the framework have been internationalized, as we've expanded internationalization (i18n) support. The Django codebase, including code and templates, has now been translated, at least in part, into 31 languages. From Arabic to Chinese to Hungarian to Welsh, it is now possible to use Django's admin site in your native language."
msgstr ""

#: ../../releases/0.95.txt:88
# 8571d9a698cd49aa95ce94bcfa9850b3
msgid "The number of changes required to port from 0.91-compatible code to the 0.95 code base are significant in some cases. However, they are, for the most part, reasonably routine and only need to be done once. A list of the necessary changes is described in the `Removing The Magic`_ wiki page. There is also an easy checklist_ for reference when undertaking the porting operation."
msgstr ""

#: ../../releases/0.95.txt:98
# 870cc0ac7807492ea700ff1f16398a75
msgid "Problem reports and getting help"
msgstr ""

#: ../../releases/0.95.txt:100
# e2470595ede74849aa1746b0e5efecf0
msgid "Need help resolving a problem with Django? The documentation in the distribution is also available :doc:`online </index>` at the `Django Web site`_. The :doc:`FAQ </faq/index>` document is especially recommended, as it contains a number of issues that come up time and again."
msgstr ""

#: ../../releases/0.95.txt:105
# 4571524acfa44f8a88c5b31e5adbdfa4
msgid "For more personalized help, the `django-users`_ mailing list is a very active list, with more than 2,000 subscribers who can help you solve any sort of Django problem. We recommend you search the archives first, though, because many common questions appear with some regularity, and any particular problem may already have been answered."
msgstr ""

#: ../../releases/0.95.txt:111
# 307aed8dc5e04585b504c2aeaef195a0
msgid "Finally, for those who prefer the more immediate feedback offered by IRC, there's a #django channel on irc.freenode.net that is regularly populated by Django users and developers from around the world. Friendly people are usually available at any hour of the day -- to help, or just to chat."
msgstr ""

#: ../../releases/0.95.txt:119
# 05df6836e03141b49bc04de6c9440b7b
msgid "Thanks for using Django!"
msgstr ""

#: ../../releases/0.95.txt:121
# 6def0a1302734bde81fe421a079845fc
msgid "The Django Team July 2006"
msgstr ""

#: ../../releases/0.96.txt:3
# 4f6e0003506d40cd97edc1c572b88bf3
msgid "Django version 0.96 release notes"
msgstr ""

#: ../../releases/0.96.txt:5
# f6d52b457da94b1aa5d14604f29b7ecb
msgid "Welcome to Django 0.96!"
msgstr ""

#: ../../releases/0.96.txt:7
# 6dbec82203b84e73bbb89fcdda50e012
msgid "The primary goal for 0.96 is a cleanup and stabilization of the features introduced in 0.95. There have been a few small `backwards-incompatible changes`_ since 0.95, but the upgrade process should be fairly simple and should not require major changes to existing applications."
msgstr ""

#: ../../releases/0.96.txt:12
# 1b000d8242b145cfb28646e9062b4c9a
msgid "However, we're also releasing 0.96 now because we have a set of backwards-incompatible changes scheduled for the near future. Once completed, they will involve some code changes for application developers, so we recommend that you stick with Django 0.96 until the next official release; then you'll be able to upgrade in one step instead of needing to make incremental changes to keep up with the development version of Django."
msgstr ""

#: ../../releases/0.96.txt:21
#: ../../releases/1.0.txt:33
# c92e747e88fc491283c595b4e9b99c24
# ffd1e937a35e48c2992fc0d6f989548f
msgid "Backwards-incompatible changes"
msgstr ""

#: ../../releases/0.96.txt:23
# 4a51e12235d349cab670010d33776faa
msgid "The following changes may require you to update your code when you switch from 0.95 to 0.96:"
msgstr ""

#: ../../releases/0.96.txt:27
# 0acfc28833534aa0a7b500b033d10ee6
msgid "``MySQLdb`` version requirement"
msgstr ""

#: ../../releases/0.96.txt:29
# 48684ae375264fc3858074550e6ffb9f
msgid "Due to a bug in older versions of the ``MySQLdb`` Python module (which Django uses to connect to MySQL databases), Django's MySQL backend now requires version 1.2.1p2 or higher of ``MySQLdb``, and will raise exceptions if you attempt to use an older version."
msgstr ""

#: ../../releases/0.96.txt:34
# 329a32ccbdd242ba90171aef6cb30048
msgid "If you're currently unable to upgrade your copy of ``MySQLdb`` to meet this requirement, a separate, backwards-compatible backend, called \"mysql_old\", has been added to Django. To use this backend, change the ``DATABASE_ENGINE`` setting in your Django settings file from this::"
msgstr ""

#: ../../releases/0.96.txt:41
#: ../../releases/1.2.txt:596
# 9794a8ad11004f24adad67686ad5b4d7
# 61efd1fa4bd64c3080ac30aba3670225
msgid "to this::"
msgstr ""

#: ../../releases/0.96.txt:45
# 8bfa8b45f1694e04b833c0f16932f5b6
msgid "However, we strongly encourage MySQL users to upgrade to a more recent version of ``MySQLdb`` as soon as possible, The \"mysql_old\" backend is provided only to ease this transition, and is considered deprecated; aside from any necessary security fixes, it will not be actively maintained, and it will be removed in a future release of Django."
msgstr ""

#: ../../releases/0.96.txt:51
# 59a8dbd09261416fb68dd5db179fc3f4
msgid "Also, note that some features, like the new ``DATABASE_OPTIONS`` setting (see the :doc:`databases documentation </ref/databases>` for details), are only available on the \"mysql\" backend, and will not be made available for \"mysql_old\"."
msgstr ""

#: ../../releases/0.96.txt:57
# 07f24e619fdd4469b4375b3b0c04baab
msgid "Database constraint names changed"
msgstr ""

#: ../../releases/0.96.txt:59
# 88b2dea583a94d2997003a7dd208b400
msgid "The format of the constraint names Django generates for foreign key references have changed slightly. These names are generally only used when it is not possible to put the reference directly on the affected column, so they are not always visible."
msgstr ""

#: ../../releases/0.96.txt:64
# 730dac979a784dfab69aca1bb489eb09
msgid "The effect of this change is that running ``manage.py reset`` and similar commands against an existing database may generate SQL with the new form of constraint name, while the database itself contains constraints named in the old form; this will cause the database server to raise an error message about modifying non-existent constraints."
msgstr ""

#: ../../releases/0.96.txt:70
# b5ab244e711e4eb3a1d2aa9fc88ce35d
msgid "If you need to work around this, there are two methods available:"
msgstr ""

#: ../../releases/0.96.txt:72
# 74f0ac3d62e04d82b47de8a1b20156fe
msgid "Redirect the output of ``manage.py`` to a file, and edit the generated SQL to use the correct constraint names before executing it."
msgstr ""

#: ../../releases/0.96.txt:76
# b6b605848aa44fcda11993508f9a4323
msgid "Examine the output of ``manage.py sqlall`` to see the new-style constraint names, and use that as a guide to rename existing constraints in your database."
msgstr ""

#: ../../releases/0.96.txt:81
# 819f66d290e240d88449100af95b7663
msgid "Name changes in ``manage.py``"
msgstr ""

#: ../../releases/0.96.txt:83
# d69512be24644e478c7e7ba0e1783edb
msgid "A few of the options to ``manage.py`` have changed with the addition of fixture support:"
msgstr ""

#: ../../releases/0.96.txt:86
# 2e738428b6354e57b45c54aa1ad7057b
msgid "There are new ``dumpdata`` and ``loaddata`` commands which, as you might expect, will dump and load data to/from the database. These commands can operate against any of Django's supported serialization formats."
msgstr ""

#: ../../releases/0.96.txt:91
# c46d6e880c6d4cf497418f009a186365
msgid "The ``sqlinitialdata`` command has been renamed to ``sqlcustom`` to emphasize that ``loaddata`` should be used for data (and ``sqlcustom`` for other custom SQL -- views, stored procedures, etc.)."
msgstr ""

#: ../../releases/0.96.txt:95
# 6ab803fe969544b8bda57e858115d7ce
msgid "The vestigial ``install`` command has been removed. Use ``syncdb``."
msgstr ""

#: ../../releases/0.96.txt:98
# 3aa8e14eed494ae6afd17b7171e49b92
msgid "Backslash escaping changed"
msgstr ""

#: ../../releases/0.96.txt:100
# 2452be0d1b104a83b15513694c57cd07
msgid "The Django database API now escapes backslashes given as query parameters. If you have any database API code that matches backslashes, and it was working before (despite the lack of escaping), you'll have to change your code to \"unescape\" the slashes one level."
msgstr ""

#: ../../releases/0.96.txt:105
# aa396c423bc44d30b36f0f4129a91830
msgid "For example, this used to work::"
msgstr ""

#: ../../releases/0.96.txt:110
# b0520b73ed364449997330a6aabbe28a
msgid "The above is now incorrect, and should be rewritten as::"
msgstr ""

#: ../../releases/0.96.txt:116
# 4a8c180fb7b24075be665f570981ff74
msgid "Removed ENABLE_PSYCO setting"
msgstr ""

#: ../../releases/0.96.txt:118
# adf6939d531649ab9b84716b9cddffc9
msgid "The ``ENABLE_PSYCO`` setting no longer exists. If your settings file includes ``ENABLE_PSYCO`` it will have no effect; to use Psyco_, we recommend writing a middleware class to activate it."
msgstr ""

#: ../../releases/0.96.txt:125
# a99bdf37683449fca353cbe1aa34b151
msgid "What's new in 0.96?"
msgstr ""

#: ../../releases/0.96.txt:127
# 903930e3556d4e6fa5e5a329dd1932fc
msgid "This revision represents over a thousand source commits and over four hundred bug fixes, so we can't possibly catalog all the changes. Here, we describe the most notable changes in this release."
msgstr ""

#: ../../releases/0.96.txt:132
# ef2e71eeeb8545bea98d2a11fca3525c
msgid "New forms library"
msgstr ""

#: ../../releases/0.96.txt:134
# 22eee206320745c6b6c3537c6af685d2
msgid "``django.newforms`` is Django's new form-handling library. It's a replacement for ``django.forms``, the old form/manipulator/validation framework.  Both APIs are available in 0.96, but over the next two releases we plan to switch completely to the new forms system, and deprecate and remove the old system."
msgstr ""

#: ../../releases/0.96.txt:140
# c68c4e967255443d9d85657bddecc0e4
msgid "There are three elements to this transition:"
msgstr ""

#: ../../releases/0.96.txt:142
# ee070ad74200458b87701d3773c804f0
msgid "We've copied the current ``django.forms`` to ``django.oldforms``. This allows you to upgrade your code *now* rather than waiting for the backwards-incompatible change and rushing to fix your code after the fact.  Just change your import statements like this::"
msgstr ""

#: ../../releases/0.96.txt:151
# f5285968605d4b3b9a200731615cf965
msgid "The next official release of Django will move the current ``django.newforms`` to ``django.forms``. This will be a backwards-incompatible change, and anyone still using the old version of ``django.forms`` at that time will need to change their import statements as described above."
msgstr ""

#: ../../releases/0.96.txt:157
# 2f3ae6b03132444eb85c3b57eb9ab89a
msgid "The next release after that will completely remove ``django.oldforms``."
msgstr ""

#: ../../releases/0.96.txt:160
# a292ee474c824c8cbef735db4e72b13a
msgid "Although the ``newforms`` library will continue to evolve, it's ready for use for most common cases. We recommend that anyone new to form handling skip the old forms system and start with the new."
msgstr ""

#: ../../releases/0.96.txt:164
# c854f08009d840a78e2e3d708ec37530
msgid "For more information about ``django.newforms``, read the :doc:`newforms documentation </topics/forms/index>`."
msgstr ""

#: ../../releases/0.96.txt:168
# b8e188380be74e15b22a2bd2976a0462
msgid "URLconf improvements"
msgstr ""

#: ../../releases/0.96.txt:170
# 0c7ed3c4269a417eb98630f07b6930c4
msgid "You can now use any callable as the callback in URLconfs (previously, only strings that referred to callables were allowed). This allows a much more natural use of URLconfs. For example, this URLconf::"
msgstr ""

#: ../../releases/0.96.txt:180
# 031697dacf1e4ad38a73e9ae597fc1b2
msgid "can now be rewritten as::"
msgstr ""

#: ../../releases/0.96.txt:189
# c74ee896d30942e3a8b727b4706eae64
msgid "One useful application of this can be seen when using decorators; this change allows you to apply decorators to views *in your URLconf*. Thus, you can make a generic view require login very easily::"
msgstr ""

#: ../../releases/0.96.txt:207
# 27e1653c536d4dc4af28242358d7d6b5
msgid "Note that both syntaxes (strings and callables) are valid, and will continue to be valid for the foreseeable future."
msgstr ""

#: ../../releases/0.96.txt:211
# 7a7f9a76e74b43b6a51443ebc2dff4ec
msgid "The test framework"
msgstr ""

#: ../../releases/0.96.txt:213
# 06735331bf7d487c8c01c3d38b665003
msgid "Django now includes a test framework so you can start transmuting fear into boredom (with apologies to Kent Beck). You can write tests based on :mod:`doctest` or :mod:`unittest` and test your views with a simple test client."
msgstr ""

#: ../../releases/0.96.txt:217
# 00fd87d0e07c474fa8d008150de42c17
msgid "There is also new support for \"fixtures\" -- initial data, stored in any of the supported :doc:`serialization formats </topics/serialization>`, that will be loaded into your database at the start of your tests. This makes testing with real data much easier."
msgstr ""

#: ../../releases/0.96.txt:222
# 49814e6ace3f442999b8dcfcd24cfcd5
msgid "See :doc:`the testing documentation </topics/testing/index>` for the full details."
msgstr ""

#: ../../releases/0.96.txt:225
# b85793a9b7884bb09dd116aaf0773bf3
msgid "Improvements to the admin interface"
msgstr ""

#: ../../releases/0.96.txt:227
# 92dbf00a533143d6b85875d11cdcaa41
msgid "A small change, but a very nice one: dedicated views for adding and updating users have been added to the admin interface, so you no longer need to worry about working with hashed passwords in the admin."
msgstr ""

#: ../../releases/0.96.txt:232
# 0dce05a78bc246009d5cf993e54d47c0
msgid "Thanks"
msgstr ""

#: ../../releases/0.96.txt:234
# abea7d3e17da453bb3aa86ee1627b1c0
msgid "Since 0.95, a number of people have stepped forward and taken a major new role in Django's development. We'd like to thank these people for all their hard work:"
msgstr ""

#: ../../releases/0.96.txt:238
# b2b5e7bebc71462fbaf010d6c6bf3fd7
msgid "Russell Keith-Magee and Malcolm Tredinnick for their major code contributions. This release wouldn't have been possible without them."
msgstr ""

#: ../../releases/0.96.txt:241
# baaa1e856a00470899d41105206a65fc
msgid "Our new release manager, James Bennett, for his work in getting out 0.95.1, 0.96, and (hopefully) future release."
msgstr ""

#: ../../releases/0.96.txt:244
# 21ddff58387f4f8ea8c8438a53fb2f0f
msgid "Our ticket managers Chris Beaven (aka SmileyChris), Simon Greenhill, Michael Radziej, and Gary Wilson. They agreed to take on the monumental task of wrangling our tickets into nicely cataloged submission. Figuring out what to work on is now about a million times easier; thanks again, guys."
msgstr ""

#: ../../releases/0.96.txt:250
# c3b0b92e627941569402f9f4f611d365
msgid "Everyone who submitted a bug report, patch or ticket comment. We can't possibly thank everyone by name -- over 200 developers submitted patches that went into 0.96 -- but everyone who's contributed to Django is listed in AUTHORS_."
msgstr ""

#: ../../releases/1.0.txt:3
# 588e19f8c18c4a8884273900f28c065c
msgid "Django 1.0 release notes"
msgstr ""

#: ../../releases/1.0.txt:5
# a1b5a99ea791446b9532f83086837f29
msgid "Welcome to Django 1.0!"
msgstr ""

#: ../../releases/1.0.txt:7
# 482adbe5227f403e936beff8ec236016
msgid "We've been looking forward to this moment for over three years, and it's finally here. Django 1.0 represents a the largest milestone in Django's development to date: a Web framework that a group of perfectionists can truly be proud of."
msgstr ""

#: ../../releases/1.0.txt:11
# de5c22bcacf9499c98d0efe82439c39b
msgid "Django 1.0 represents over three years of community development as an Open Source project. Django's received contributions from hundreds of developers, been translated into fifty languages, and today is used by developers on every continent and in every kind of job."
msgstr ""

#: ../../releases/1.0.txt:16
# 8f11375105934e2cad06d18d7b7ecad8
msgid "An interesting historical note: when Django was first released in July 2005, the initial released version of Django came from an internal repository at revision number 8825. Django 1.0 represents revision 8961 of our public repository. It seems fitting that our 1.0 release comes at the moment where community contributions overtake those made privately."
msgstr ""

#: ../../releases/1.0.txt:23
# a6736eb59023445885586feebf64467c
msgid "Stability and forwards-compatibility"
msgstr ""

#: ../../releases/1.0.txt:25
# de0a7ade8ace42a19da7ec07b5bc84eb
msgid ":doc:`The release of Django 1.0 </releases/1.0>` comes with a promise of API stability and forwards-compatibility. In a nutshell, this means that code you develop against Django 1.0 will continue to work against 1.1 unchanged, and you should need to make only minor changes for any 1.X release."
msgstr ""

#: ../../releases/1.0.txt:30
# a4db6b00d8144ee3b2696da923c07a5f
msgid "See the :doc:`API stability guide </misc/api-stability>` for full details."
msgstr ""

#: ../../releases/1.0.txt:35
# 0f560f80c5f140ee8744567066182660
msgid "Django 1.0 has a number of backwards-incompatible changes from Django 0.96. If you have apps written against Django 0.96 that you need to port, see our detailed porting guide:"
msgstr ""

#: ../../releases/1.0.txt:44
# c30fc4f05acc4defae1694c961f9e6ef
msgid "A complete list of backwards-incompatible changes can be found at https://code.djangoproject.com/wiki/BackwardsIncompatibleChanges."
msgstr ""

#: ../../releases/1.0.txt:48
# 77f3c2b90a6e4c2da289078a99e4dd07
msgid "What's new in Django 1.0"
msgstr ""

#: ../../releases/1.0.txt:50
# 205d27d794de45559d809fd85e051af0
msgid "A *lot*!"
msgstr ""

#: ../../releases/1.0.txt:52
# 88eb93cc14d54687b48ceb9663547e32
msgid "Since Django 0.96, we've made over 4,000 code commits, fixed more than 2,000 bugs, and edited, added, or removed around 350,000 lines of code. We've also added 40,000 lines of new documentation, and greatly improved what was already there."
msgstr ""

#: ../../releases/1.0.txt:57
# 60dc6ef7fed24839b3176768972dea71
msgid "In fact, new documentation is one of our favorite features of Django 1.0, so we might as well start there. First, there's a new documentation site:"
msgstr ""

#: ../../releases/1.0.txt:60
# 2cfe41cb03c145fe8cf2dd1d7b86acbd
msgid "https://docs.djangoproject.com/"
msgstr ""

#: ../../releases/1.0.txt:62
# 4ea7ba103ba04cc1870222bf404fbed6
msgid "The documentation has been greatly improved, cleaned up, and generally made awesome. There's now dedicated search, indexes, and more."
msgstr ""

#: ../../releases/1.0.txt:65
# 935c22ef24704818affc1bb38e6de411
msgid "We can't possibly document everything that's new in 1.0, but the documentation will be your definitive guide. Anywhere you see something like:"
msgstr ""

#: ../../releases/1.0.txt:70
# 53a8eca4c56042388e99a40ddcf803f9
msgid "This feature is new in Django 1.0"
msgstr ""

#: ../../releases/1.0.txt:72
# 9322670dbbfe47508dd8e682b766179b
msgid "You'll know that you're looking at something new or changed."
msgstr ""

#: ../../releases/1.0.txt:74
# 819cbc506788432f8a19729c86502195
msgid "The other major highlights of Django 1.0 are:"
msgstr ""

#: ../../releases/1.0.txt:77
# 04797d9e2eda4104a0883fd469215649
msgid "Re-factored admin application"
msgstr ""

#: ../../releases/1.0.txt:79
#: ../../releases/1.0-alpha-1.txt:25
# f04fe01743514b82a6ba0d38a6558912
# f6f7ef2c068846eba1d9cf5aaae98818
msgid "The Django administrative interface (``django.contrib.admin``) has been completely refactored; admin definitions are now completely decoupled from model definitions (no more ``class Admin`` declaration in models!), rewritten to use Django's new form-handling library (introduced in the 0.96 release as ``django.newforms``, and now available as simply ``django.forms``) and redesigned with extensibility and customization in mind. Full documentation for the admin application is available online in the official Django documentation:"
msgstr ""

#: ../../releases/1.0.txt:87
# 9635d454d0df4480949cf220bcdde621
msgid "See the :doc:`admin reference </ref/contrib/admin/index>` for details"
msgstr ""

#: ../../releases/1.0.txt:90
#: ../../releases/1.0-alpha-1.txt:46
# 3198a1a5f1374b1f822f5fa9bc0a612b
# 9a82837066004f87bf6a3e5e3da45f39
msgid "Improved Unicode handling"
msgstr ""

#: ../../releases/1.0.txt:92
# f0dca51c193b47b7a5c80e56c7145959
msgid "Django's internals have been refactored to use Unicode throughout; this drastically simplifies the task of dealing with non-Western-European content and data in Django. Additionally, utility functions have been provided to ease interoperability with third-party libraries and systems which may or may not handle Unicode gracefully. Details are available in Django's Unicode-handling documentation."
msgstr ""

#: ../../releases/1.0.txt:99
# 34f9e02ac41944cbbe797b45efefee21
msgid "See :doc:`/ref/unicode`."
msgstr ""

#: ../../releases/1.0.txt:102
# 81dc698eba3a4121a245ff7217aea0ba
msgid "An improved ORM"
msgstr ""

#: ../../releases/1.0.txt:104
# 72f8e89d43e94d289fae882d5b3c78b4
msgid "Django's object-relational mapper -- the component which provides the mapping between Django model classes and your database, and which mediates your database queries -- has been dramatically improved by a massive refactoring. For most users of Django this is backwards-compatible; the public-facing API for database querying underwent a few minor changes, but most of the updates took place in the ORM's internals. A guide to the changes, including backwards-incompatible modifications and mentions of new features opened up by this refactoring, is `available on the Django wiki`__."
msgstr ""

#: ../../releases/1.0.txt:116
#: ../../releases/1.0-alpha-1.txt:69
# 631d3f29c0a947f9b3166c6039a8ee9a
# 254f29394937428f81e75b3264df2b41
msgid "Automatic escaping of template variables"
msgstr ""

#: ../../releases/1.0.txt:118
#: ../../releases/1.0-alpha-1.txt:63
# f7d055a3f4c84f598c83ea3266059122
# c19a51ffde3f44c89865f3bc6778faac
msgid "To provide improved security against cross-site scripting (XSS) vulnerabilities, Django's template system now automatically escapes the output of variables. This behavior is configurable, and allows both variables and larger template constructs to be marked as safe (requiring no escaping) or unsafe (requiring escaping). A full guide to this feature is in the documentation for the :ttag:`autoescape` tag."
msgstr ""

#: ../../releases/1.0.txt:126
# 07e84eeaec3e4046999e75883d9256da
msgid "``django.contrib.gis`` (GeoDjango)"
msgstr ""

#: ../../releases/1.0.txt:128
# d709fdf99b0b4b7f920ed3c38de643ad
msgid "A project over a year in the making, this adds world-class GIS (`Geographic Information Systems`_) support to Django, in the form of a ``contrib`` application. Its documentation is currently being maintained externally, and will be merged into the main Django documentation shortly. Huge thanks go to Justin Bronn, Jeremy Dunck, Brett Hoerner and Travis Pinney for their efforts in creating and completing this feature."
msgstr ""

#: ../../releases/1.0.txt:135
# 97ddf10126a34057ba7bde1ae15b62a9
msgid "See http://geodjango.org/ for details."
msgstr ""

#: ../../releases/1.0.txt:140
#: ../../releases/1.0-alpha-2.txt:40
# 3cab59f5721d4ca7bf0519761bc33e92
# 48ecd4eb6c41485b8d96c3d18d2064ce
msgid "Pluggable file storage"
msgstr ""

#: ../../releases/1.0.txt:142
#: ../../releases/1.0-alpha-2.txt:36
# c531b1ff7f924db981ee465169586ed9
# cf552ca998604b6fad11d75f2ca531f8
msgid "Django's built-in ``FileField`` and ``ImageField`` now can take advantage of pluggable file-storage backends, allowing extensive customization of where and how uploaded files get stored by Django. For details, see :doc:`the files documentation </topics/files>`; big thanks go to Marty Alchin for putting in the hard work to get this completed."
msgstr ""

#: ../../releases/1.0.txt:149
#: ../../releases/1.0-alpha-2.txt:48
# 5fed186993df4f54b3077284ab67f389
# f57953c89bfd4f3c8877c759202e6ee0
msgid "Jython compatibility"
msgstr ""

#: ../../releases/1.0.txt:151
#: ../../releases/1.0-alpha-2.txt:43
# 92428dde6e864334b9008434c9651a04
# ffd8c050fa0e478d92b431ce32da6e93
msgid "Thanks to a lot of work from Leo Soto during a Google Summer of Code project, Django's codebase has been refactored to remove incompatibilities with `Jython`_, an implementation of Python written in Java, which runs Python code on the Java Virtual Machine. Django is now compatible with the forthcoming Jython 2.5 release."
msgstr ""

#: ../../releases/1.0.txt:157
# 2ddb8bda4df448bcbb3f3bf54c408929
msgid "See :doc:`/howto/jython`."
msgstr ""

#: ../../releases/1.0.txt:162
#: ../../releases/1.0-beta.txt:32
# a0d2349e9fa946479c6ec82a92c833f3
# 528e784803e84aee9d1790b60f9f1e9b
msgid "Generic relations in forms and admin"
msgstr ""

#: ../../releases/1.0.txt:164
#: ../../releases/1.0-beta.txt:29
# 826212a6b25648e2ad6849bdda3f4409
# e6c27d5c6b0542dd80a7ccc581e97841
msgid "Classes are now included in ``django.contrib.contenttypes`` which can be used to support generic relations in both the admin interface and in end-user forms. See :ref:`the documentation for generic relations <generic-relations>` for details."
msgstr ""

#: ../../releases/1.0.txt:169
#: ../../releases/1.0-beta.txt:49
# 47bb4f5215d44f028fcac2976586173a
# ee43e4ec48e540d8b776b8a058b9a63c
msgid "``INSERT``/``UPDATE`` distinction"
msgstr ""

#: ../../releases/1.0.txt:171
# 2865ccb83ff648d0934ebe12af1ffe11
msgid "Although Django's default behavior of having a model's ``save()`` method automatically determine whether to perform an ``INSERT`` or an ``UPDATE`` at the SQL level is suitable for the majority of cases, there are occasional situations where forcing one or the other is useful. As a result, models can now support an additional parameter to ``save()`` which can force a specific operation."
msgstr ""

#: ../../releases/1.0.txt:177
# 220029a21a9848ebac9e2f72d6c6cb80
msgid "See :ref:`ref-models-force-insert` for details."
msgstr ""

#: ../../releases/1.0.txt:180
#: ../../releases/1.0-beta.txt:60
# 564d890840724e0dae10844bd28071f6
# 130c0a6cdd4e47d39710f9a0a1e997c4
msgid "Split ``CacheMiddleware``"
msgstr ""

#: ../../releases/1.0.txt:182
# 06683b4bd842474283c53102d1e7a04b
msgid "Django's ``CacheMiddleware`` has been split into three classes: ``CacheMiddleware`` itself still exists and retains all of its previous functionality, but it is now built from two separate middleware classes which handle the two parts of caching (inserting into and reading from the cache) separately, offering additional flexibility for situations where combining these functions into a single middleware posed problems."
msgstr ""

#: ../../releases/1.0.txt:189
# 1c2e123effb840f994927313f17531e7
msgid "Full details, including updated notes on appropriate use, are in :doc:`the caching documentation </topics/cache>`."
msgstr ""

#: ../../releases/1.0.txt:193
#: ../../releases/1.0-beta-2.txt:37
# b3149867e3b240fe8008b512ab4f2bd0
# 3122a778a3a64c5e86333a9906e179c9
msgid "Refactored ``django.contrib.comments``"
msgstr ""

#: ../../releases/1.0.txt:195
# 9d8a834e7d1440f0b3e78d8e29c53659
msgid "As part of a Google Summer of Code project, Thejaswi Puthraya carried out a major rewrite and refactoring of Django's bundled comment system, greatly increasing its flexibility and customizability. :doc:`Full documentation </ref/contrib/comments/index>` is available, as well as an upgrade guide if you were using the previous incarnation of the comments application."
msgstr ""

#: ../../releases/1.0.txt:203
#: ../../releases/1.0-beta.txt:73
# 8391541a63d64c729cfa2b7008a0466b
# a88bbc6612c84bfab04dc93dae8dbc4e
msgid "Removal of deprecated features"
msgstr ""

#: ../../releases/1.0.txt:205
# 081ab3d4ea75443cb52577b30a3c3dc2
msgid "A number of features and methods which had previously been marked as deprecated, and which were scheduled for removal prior to the 1.0 release, are no longer present in Django. These include imports of the form library from ``django.newforms`` (now located simply at ``django.forms``), the ``form_for_model`` and ``form_for_instance`` helper functions (which have been replaced by ``ModelForm``) and a number of deprecated features which were replaced by the dispatcher, file-uploading and file-storage refactorings introduced in the Django 1.0 alpha releases."
msgstr ""

#: ../../releases/1.0.txt:215
# bc0c3651252140a2adc5fb083804a754
msgid "Known issues"
msgstr ""

#: ../../releases/1.0.txt:217
# ab4556c1b9884a1eac06afc5fb3b6317
msgid "We've done our best to make Django 1.0 as solid as possible, but unfortunately there are a couple of issues that we know about in the release."
msgstr ""

#: ../../releases/1.0.txt:221
# 3e124cd41eeb410ea762c019ae3d3713
msgid "Multi-table model inheritance with ``to_field``"
msgstr ""

#: ../../releases/1.0.txt:223
# 6164ed4266004fb996da62f7a1958027
msgid "If you're using :ref:`multiple table model inheritance <multi-table-inheritance>`, be aware of this caveat: child models using a custom ``parent_link`` and ``to_field`` will cause database integrity errors. A set of models like the following are **not valid**::"
msgstr ""

#: ../../releases/1.0.txt:236
# 726a2bc7adee4defb77c36e6bb647ba2
msgid "This bug will be fixed in the next release of Django."
msgstr ""

#: ../../releases/1.0.txt:239
# 9db8c8a12a7243d7a657484b75b17a0f
msgid "Caveats with support of certain databases"
msgstr ""

#: ../../releases/1.0.txt:241
# 1c47a5d6c0cc435b9b80793189ef8d94
msgid "Django attempts to support as many features as possible on all database backends. However, not all database backends are alike, and in particular many of the supported database differ greatly from version to version. It's a good idea to checkout our :doc:`notes on supported database </ref/databases>`:"
msgstr ""

#: ../../releases/1.0.txt:244
# edc8289fb61d43df8fdb4a12727d8386
msgid ":ref:`mysql-notes`"
msgstr ""

#: ../../releases/1.0.txt:245
# c9f2c5ca17d349009b8d3dfb565444c4
msgid ":ref:`sqlite-notes`"
msgstr ""

#: ../../releases/1.0.txt:246
# 721be5398d2b434ea5c9fa5bee874e55
msgid ":ref:`oracle-notes`"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:3
# 7303217abd684944adb3163e6995fc40
msgid "Django 1.0 alpha release notes"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:5
# 6c5edb61642a4e8da5b9e4158e31c97d
msgid "Welcome to Django 1.0 alpha!"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:7
# 28fc5cf1db9949d0a70bf60ce0717093
msgid "This is the first in a series of preview/development releases leading up to the eventual release of Django 1.0, currently scheduled to take place in early September 2008. This release is primarily targeted at developers who are interested in testing the Django codebase and helping to identify and resolve bugs prior to the final 1.0 release."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:13
#: ../../releases/1.0-alpha-2.txt:13
# 063f1516833f4a77b4cf578f73b695e6
# feeabc855844447480af80a34fe44732
msgid "As such, this release is *not* intended for production use, and any such use is strongly discouraged."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:18
# 1c4bab81ebf541dfb9aa002ee5bb1cc0
msgid "What's new in Django 1.0 alpha"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:20
# 531786bcb60d41a2a5522ce925543c02
msgid "Django's development trunk has been the site of nearly constant activity over the past year, with several major new features landing since the 0.96 release. Some of the highlights include:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:35
# b16e3317dffc4e61b13ef45df49902dd
msgid "Refactored admin application (newforms-admin)"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:35
# 514b992d19744dc192e100ab8f8ef8df
msgid ":doc:`admin reference </ref/contrib/admin/index>`"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:38
# 2362a134e5804349b6bf7fc77af6c28f
msgid "Django's internals have been refactored to use Unicode throughout; this drastically simplifies the task of dealing with non-Western-European content and data in Django. Additionally, utility functions have been provided to ease interoperability with third-party libraries and systems which may or may not handle Unicode gracefully. Details are available in Django's Unicode-handling documentation:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:46
# ffd78aa9fd0b42b0a758f61e6195f693
msgid ":doc:`unicode reference </ref/unicode>`"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:60
# 29b1080198594d7f8e737bf8c5662187
msgid "An improved Django ORM"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:49
# 17baeaf3f5234cb2a969c1e8f72d82b4
msgid "Django's object-relational mapper -- the component which provides the mapping between Django model classes and your database, and which mediates your database queries -- has been dramatically improved by a massive refactoring. For most users of Django this is backwards-compatible; the public-facing API for database querying underwent a few minor changes, but most of the updates took place in the ORM's internals. A guide to the changes, including backwards-incompatible modifications and mentions of new features opened up by this refactoring, is available on the Django wiki:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:60
# 7e3c0deb509240989b00e10da95d69c0
msgid "https://code.djangoproject.com/wiki/QuerysetRefactorBranch"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:71
# 9e685bb303474f6586c7b390d3d3a94c
msgid "There are many more new features, many bugfixes and many enhancements to existing features from previous releases. The ``newforms`` library, for example, has undergone massive improvements including several useful add-ons in ``django.contrib`` which complement and build on Django's form-handling capabilities, and Django's file-uploading handlers have been refactored to allow finer-grained control over the uploading process as well as streaming uploads of large files."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:79
# a4f1673bd3d94af4bd6c2e9c3fb491c7
msgid "Along with these improvements and additions, we've made a number of of backwards-incompatible changes to the framework, as features have been fleshed out and APIs have been finalized for the 1.0 release. A complete guide to these changes will be available as part of the final Django 1.0 release, and a comprehensive list of backwards-incompatible changes is also available on the Django wiki for those who want to begin developing and testing their upgrade process:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:87
# b4f8205500d343d184cfa22bc75d4620
msgid "https://code.djangoproject.com/wiki/BackwardsIncompatibleChanges"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:91
#: ../../releases/1.0-alpha-2.txt:64
#: ../../releases/1.0-beta.txt:86
#: ../../releases/1.0-beta-2.txt:65
# 8d1181373f99407ca5815f60d83234c2
# 203575c100134ea4ae735f56412d1c5a
# ea7b50ec4dd14ad0a135d7469e34fc19
# 9048d8400f14410cb38555909d85af61
msgid "The Django 1.0 roadmap"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:93
# e16ec52c1e854484ba62be87deef7981
msgid "One of the primary goals of this alpha release is to focus attention on the remaining features to be implemented for Django 1.0, and on the bugs that need to be resolved before the final release. Following this release, we'll be conducting a series of sprints building up to a series of beta releases and a release-candidate stage, followed soon after by Django 1.0. The timeline is projected to be:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:100
# 62fde8bba696447a945ab465a7e8b446
msgid "August 1, 2008: Sprint (based in Washington, DC, and online)."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:102
# 09fdd835de91482d86ef95402bde574e
msgid "August 5, 2008: Django 1.0 beta 1 release. This will also constitute the feature freeze for 1.0. Any feature to be included in 1.0 must be completed and in trunk by this time."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:106
# 26d3aa10da554f99b1f81d9345753dc3
msgid "August 8, 2008: Sprint (based in Lawrence, KS, and online)."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:108
# c9157ce5331547beb97af18f0402d3af
msgid "August 12, 2008: Django 1.0 beta 2 release."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:110
# cd37a8472fd54264aedebfde07f5efbf
msgid "August 15, 2008: Sprint (based in Austin, TX, and online)."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:112
# ab37b892b055428696b3734918e45846
msgid "August 19, 2008: Django 1.0 release candidate 1."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:114
# 831a6d2324794687a84253dae7fa6842
msgid "August 22, 2008: Sprint (based in Portland, OR, and online)."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:116
# 517bb818b19a4901ba88a2b2dc27c805
msgid "August 26, 2008: Django 1.0 release candidate 2."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:118
# 3efc954bee7a4e969271a2519d4cc275
msgid "September 2, 2008: Django 1.0 final release. The official Django 1.0 release party will take place during the first-ever DjangoCon, to be held in Mountain View, CA, September 6-7."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:122
#: ../../releases/1.0-alpha-2.txt:97
#: ../../releases/1.0-beta.txt:114
# ebae6f69c93747b4b29b49e6f771b545
# 9cc63cc32cbe4f25afa14bfbfa49f768
# 267006ea7667486985f70c328becd805
msgid "Of course, like any estimated timeline, this is subject to change as requirements dictate. The latest information will always be available on the Django project wiki:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:126
#: ../../releases/1.0-alpha-2.txt:101
#: ../../releases/1.0-beta.txt:118
# f051f56488a54bde927cebff280851fc
# c7b48a6bc13141a69de39603da8bcd02
# 50dd759382de42f588994d2f6ccab032
msgid "https://code.djangoproject.com/wiki/VersionOneRoadmap"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:130
#: ../../releases/1.0-alpha-2.txt:105
#: ../../releases/1.0-beta.txt:122
#: ../../releases/1.0-beta-2.txt:88
#: ../../releases/1.1-alpha-1.txt:131
#: ../../releases/1.1-beta-1.txt:174
#: ../../releases/1.1-rc-1.txt:78
#: ../../releases/1.2-alpha-1.txt:554
#: ../../releases/1.2-beta-1.txt:137
#: ../../releases/1.2-rc-1.txt:70
#: ../../releases/1.3-alpha-1.txt:363
#: ../../releases/1.3-beta-1.txt:203
#: ../../releases/1.4-alpha-1.txt:1092
#: ../../releases/1.4-beta-1.txt:1164
# 3e172f80a0fa4f4fb18d0c6a4fc0d57a
# e19d5161a60747468a5f8258d9517230
# 8b9ba52781774ca5b10859684a0d43f3
# edf346acd8414670acb773c08efb314d
# 9d33b712debb4ba698903b0e2e73aa4f
# 9ba1c4b1aac24ad685fd45815b68fc08
# 7ce6385a3aee4d8d80b3240b36a60aaa
# 133bd3546b2c4301af4bc49e3f229259
# d96fb377b8314ea2a82dd8248374321e
# 025d9f36b4bc40d286825011a9fb6904
# 3e1423fbf3fb478b92a3d0987fcc100b
# 3d7d33e960b74cf3b30b2ab58c1b98b6
# f6f96c44d3a5472d95b7da34eab7f827
# 3f8e505805504e12903f051dc03e8aec
msgid "What you can do to help"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:132
#: ../../releases/1.0-alpha-2.txt:107
# b030289fc1774706a8910cec60183422
# 6c48071413374f83993487998d651961
msgid "In order to provide a high-quality 1.0 release, we need your help. Although this alpha release is, again, *not* intended for production use, you can help the Django team by trying out the alpha codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:139
#: ../../releases/1.0-alpha-2.txt:114
#: ../../releases/1.0-beta.txt:131
#: ../../releases/1.0-beta-2.txt:97
#: ../../releases/1.1-alpha-1.txt:139
#: ../../releases/1.1-beta-1.txt:182
#: ../../releases/1.1-rc-1.txt:87
#: ../../releases/1.2-alpha-1.txt:562
#: ../../releases/1.2-beta-1.txt:146
#: ../../releases/1.2-rc-1.txt:79
#: ../../releases/1.3-alpha-1.txt:371
#: ../../releases/1.3-beta-1.txt:211
#: ../../releases/1.4-alpha-1.txt:1100
#: ../../releases/1.4-beta-1.txt:1172
# 57e692c7d6f54f7f9cd5b0d7e5e766e7
# ebda07fcdb3c4be7aa9ce0ef781b9352
# 2ca69f33db1547a091f78b67fbe0f5fe
# 19fcae2592e9471689bf0faf3d6854e8
# 0c4ed074ffd547e1a8669d720c724517
# 9b2fe064348549fda07b5462a000fcd7
# cc0a9754641748db8ff195009adbf1f7
# 82528486df5e4794b195978123fbafa7
# 4e8e6bda547948f3bc37088a1a6d3b46
# 834700e1554f4d1e938c50b80e1a94d6
# 806b3609f73b4d0bbba0c033e97ac7d6
# 21919c1e3513480b8822f978b7f8fa36
# f0a8d454918444a2bcb66bdecb437816
# 0cb14f84e6384d48ac9637d6af67cf85
msgid "https://code.djangoproject.com/timeline"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:141
#: ../../releases/1.0-alpha-2.txt:116
#: ../../releases/1.0-beta.txt:133
#: ../../releases/1.0-beta-2.txt:99
#: ../../releases/1.1-alpha-1.txt:141
#: ../../releases/1.1-beta-1.txt:184
#: ../../releases/1.2-alpha-1.txt:564
#: ../../releases/1.2-beta-1.txt:148
#: ../../releases/1.3-alpha-1.txt:373
#: ../../releases/1.3-beta-1.txt:213
#: ../../releases/1.4-alpha-1.txt:1102
#: ../../releases/1.4-beta-1.txt:1174
# 5fa976c0839c45b3884af9967054794d
# f3fcb9b8f6334c46bf1ce000c18f707b
# 38215f0c0a4e4f8e90278c06f27aa960
# 3d9cbe340b7d43eca27111f8cda9891d
# b72f8115238f436cae871ed2a44c5e7f
# 8984fe7e85e74481ac03918bb349847f
# 62522d2fa5b547ad979d705740dbebae
# 1d4a8594732e4703832e1828e1ceac23
# ed3b1628cd5d4929813d475d1d634927
# eb50e6bc720449a39097eb952691f3a1
# 2e26e22542be4ccc9192fcc8336aae53
# 86f42e407a1e4dc5917ddb2c8f2bc929
msgid "Please open new tickets if no existing ticket corresponds to a problem you're running into."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:144
#: ../../releases/1.0-alpha-2.txt:119
#: ../../releases/1.0-beta.txt:136
#: ../../releases/1.0-beta-2.txt:102
# 859eed8f16df4ecc89d6b6ce4c5960e9
# 3c18ac5275dc4ad5885c75631ea60100
# 02bd9f94e2b74b51ade2a997213dcba7
# 7c741f36aa994a51842a4164f43bb69c
msgid "Additionally, discussion of Django development, including progress toward the 1.0 release, takes place daily on the django-developers mailing list:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:148
#: ../../releases/1.0-alpha-2.txt:123
#: ../../releases/1.0-beta.txt:140
#: ../../releases/1.0-beta-2.txt:106
#: ../../releases/1.1.txt:450
#: ../../releases/1.1-alpha-1.txt:147
#: ../../releases/1.1-beta-1.txt:190
#: ../../releases/1.1-rc-1.txt:96
#: ../../releases/1.2-alpha-1.txt:570
#: ../../releases/1.2-beta-1.txt:155
#: ../../releases/1.2-rc-1.txt:88
#: ../../releases/1.3-alpha-1.txt:379
#: ../../releases/1.3-beta-1.txt:219
#: ../../releases/1.4-alpha-1.txt:1108
#: ../../releases/1.4-beta-1.txt:1180
# fa847f66f59a4ff9a2a96c3e33fc7f42
# 685b4a6afc5348ce994e43abcc918ffc
# f4a664ef80a245b4b4f6278443adc2cb
# 967843852b974c44b6361daf09dc92a2
# 837aeafe26d948b983fe6591d2dfb36d
# 525d3477aedc47b2bb389b050b2e2995
# 5a120bc5b1d643cfbcaf7067ac2b51a6
# 83fae1586f054902b1493499e43f581b
# f56689a0b28742689140acb65d759c46
# bd927374977447589502a68b75925046
# dcd5fe4ae2b54a4686867d16fbdee68f
# d2c9840767ad4bd0a5e6defc9c4db985
# c9bed80d1b9d41c2a80dc5a7a29321ab
# cb2dcee9a677424c9610011c5cca9490
# 7719701818eb475aacec674f536df0a0
msgid "http://groups.google.com/group/django-developers"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:150
#: ../../releases/1.0-alpha-2.txt:125
#: ../../releases/1.0-beta.txt:142
#: ../../releases/1.0-beta-2.txt:108
# 82374254ab494e7fa48ae6f05e674f61
# 0e66a91e2bc043f49590cece3b722862
# ec63f8ba4e984bcb8fa68b04032ba3d0
# e9a347ae295f436eb2cdb617a01b5d29
msgid "...and in the ``#django-dev`` IRC channel on ``irc.freenode.net``. If you're interested in helping out with Django's development, feel free to join the discussions there."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:154
#: ../../releases/1.0-alpha-2.txt:129
#: ../../releases/1.0-beta.txt:146
#: ../../releases/1.0-beta-2.txt:112
#: ../../releases/1.1.txt:455
#: ../../releases/1.1-alpha-1.txt:153
#: ../../releases/1.1-beta-1.txt:196
#: ../../releases/1.1-rc-1.txt:102
#: ../../releases/1.2-alpha-1.txt:576
#: ../../releases/1.2-beta-1.txt:161
#: ../../releases/1.2-rc-1.txt:94
#: ../../releases/1.3-alpha-1.txt:385
#: ../../releases/1.3-beta-1.txt:225
#: ../../releases/1.4-alpha-1.txt:1114
#: ../../releases/1.4-beta-1.txt:1186
# 6c166af3f87f4dd5a1c860b6e68b0f46
# 82948e100d564911a1c97b5dec30d205
# 645bdb670e744401b02fa9b8ee92df4c
# bfa8425da2f54cf3aa1d2e72a82ae2a7
# acdd12a009b44d02910ac76218ea843c
# f323ff5552e0454980c7170b97a1568d
# 690a1efc11ea4605b65108934e992f0c
# 223f0bea956f462486ad37062fd2c27e
# 5fe51c6f7ffc4a8a97a48abc0db7bf1c
# c6098d954ebd4e889cf20340c282c27e
# 4bc3cb490bce46368599897d31a28daf
# 597e58aa96f344a8a683d225ffd51388
# 2a939d925e59433dbae14156ed5e6875
# 3fe0f6e11e2746a7974422cda126cc4b
# 9e28f3e9db4b43e88a3a6f3d65248bdf
msgid "Django's online documentation also includes pointers on how to contribute to Django:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:157
#: ../../releases/1.0-alpha-2.txt:132
#: ../../releases/1.0-beta.txt:149
#: ../../releases/1.0-beta-2.txt:115
# bc783308217449ebb36f81db82661334
# a29882ee7fb54a859bce78656e03a240
# 7dd5e25c65864a7aa8656b97a756361c
# 57953e0786b84ef58e272a0779fe143e
msgid ":doc:`contributing to Django </internals/contributing/index>`"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:159
#: ../../releases/1.0-alpha-2.txt:134
#: ../../releases/1.0-beta.txt:151
#: ../../releases/1.0-beta-2.txt:117
#: ../../releases/1.1.txt:460
#: ../../releases/1.1-alpha-1.txt:158
#: ../../releases/1.1-beta-1.txt:201
#: ../../releases/1.1-rc-1.txt:107
#: ../../releases/1.2-alpha-1.txt:581
#: ../../releases/1.2-beta-1.txt:166
#: ../../releases/1.2-rc-1.txt:99
#: ../../releases/1.3-alpha-1.txt:390
#: ../../releases/1.3-beta-1.txt:230
#: ../../releases/1.4-alpha-1.txt:1119
#: ../../releases/1.4-beta-1.txt:1191
# 583a639e64e5491a8e85fa33a2f6d2cc
# 6545a379f59944a181152575119aefe7
# af145b53ef78499caba3d4abcb296de8
# f73f07b25fe14112923a2ec9e156735f
# a4f2d59a92de4f7eba890b5c19d91d41
# 9a69dc0615454d59b985b726ebf0f9e0
# 9ea0da81f19f46e0a066c209a82eefa8
# 8fbd5e1334234e08a56f961b767c7b14
# 3448d3aedf4e453397580c6a73a30618
# 593b93c074d944c2be72f6197fbbb218
# 70eda3b49af14c61941c282fcfc9e11e
# 191b80beebcb418e9492f54df44dfc44
# aecbb9d6aca44ee0a44bb5e96c27492d
# 0b83aa08642046239294a44836af11ff
# bb0649b024c240e3b9877192d0ae54f6
msgid "Contributions on any level -- developing code, writing documentation or simply triaging tickets and helping to test proposed bugfixes -- are always welcome and appreciated."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:3
# 3c349c8320c148299b4de012264c31f9
msgid "Django 1.0 alpha 2 release notes"
msgstr ""

#: ../../releases/1.0-alpha-2.txt:5
# 8f00f8d77b74436e823c4c20f79208c9
msgid "Welcome to Django 1.0 alpha 2!"
msgstr ""

#: ../../releases/1.0-alpha-2.txt:7
# 870b7d0b2e954902a52f101bdc443d3b
msgid "This is the second in a series of preview/development releases leading up to the eventual release of Django 1.0, currently scheduled to take place in early September 2008. This releases is primarily targeted at developers who are interested in testing the Django codebase and helping to identify and resolve bugs prior to the final 1.0 release."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:18
# 6eff9f255fd1495893647fa910a6fbb0
msgid "What's new in Django 1.0 alpha 2"
msgstr ""

#: ../../releases/1.0-alpha-2.txt:20
# aaff0f024f684cd09085f860db71d1ad
msgid "Django's development trunk has been the site of nearly constant activity over the past year, with several major new features landing since the 0.96 release. For features which were new as of Django 1.0 alpha 1, see :doc:`the 1.0 alpha 1 release notes </releases/1.0-alpha-1>`. Since the 1.0 alpha 1 release several new features have landed, including:"
msgstr ""

#: ../../releases/1.0-alpha-2.txt:33
# 94ce18014ec44a71b4a37991dbcd12a6
msgid "``django.contrib.gis`` (`GeoDjango`_)"
msgstr ""

#: ../../releases/1.0-alpha-2.txt:27
# 6ba0754cc61747cc8dd89e34977182b3
msgid "A project over a year in the making, this adds world-class GIS (`Geographic Information Systems`_) support to Django, in the form of a ``contrib`` application.  `Its documentation`_ is currently being maintained externally, and will be merged into the main Django documentation prior to the final 1.0 release. Huge thanks go to Justin Bronn, Jeremy Dunck, Brett Hoerner and Travis Pinney for their efforts in creating and completing this feature."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:50
# 7506ca26ebbb48f7b2543e9044571a74
msgid "There are many other new features and improvements in this release, including two major performance boosts: strings marked for translation using :doc:`Django's internationalization system </topics/i18n/index>` now consume far less memory, and Django's internal dispatcher -- which is invoked frequently during request/response processing and when working with Django's object-relational mapper -- is now significantly faster."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:66
# 1c2a804d8e9f4da3aae6ca40ffc7b7d9
msgid "One of the primary goals of this alpha release is to focus attention on the remaining features to be implemented for Django 1.0, and on the bugs that need to be resolved before the final release. Following this release, we'll be conducting a series of development sprints building up to the beta and release-candidate stages, followed soon after by Django 1.0. The timeline is projected to be:"
msgstr ""

#: ../../releases/1.0-alpha-2.txt:73
# e75e6e208d0e499684ef2ac02101a7f3
msgid "**August 14, 2008: Django 1.0 beta release.** Past this point Django will be in a \"feature freeze\" for the 1.0 release; after Django 1.0 beta, the development focus will be solely on bug fixes and stabilization."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:78
#: ../../releases/1.0-beta.txt:95
# 2ea8e9beaac042ebb8933678df2c4f38
# a854381231754ad38b894041fa2343d4
msgid "August 15, 2008: Sprint (based in Austin, Texas, USA, and online)."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:80
#: ../../releases/1.0-beta.txt:97
# 842df916444b47c9b99df9677117a2c0
# 5415634283674f5cbdec69951660b38e
msgid "August 17, 2008: Sprint (based in Tel Aviv, Israel, and online)."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:82
#: ../../releases/1.0-beta.txt:99
# 024ab7e1d76c4422bc0784cbc201b420
# 418dc77847be48599c3104aa94ed8392
msgid "**August 21, 2008: Django 1.0 release candidate 1.** At this point, all strings marked for translation within Django's codebase will be frozen, to provide contributors time to check and finalize all of Django's bundled translation files prior to the final 1.0 release."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:87
#: ../../releases/1.0-beta.txt:104
# fdc4344afb2a48acbc8fdbcb71ae8de7
# 29741e15b2134351815f81cfbed5cb85
msgid "August 22, 2008: Sprint (based in Portland, Oregon, USA, and online)."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:89
#: ../../releases/1.0-beta.txt:106
# aca020058eb542ef8ce9e74d8c62691a
# 38fdd8d6068649399a7d8673041305f7
msgid "**August 26, 2008: Django 1.0 release candidate 2.**"
msgstr ""

#: ../../releases/1.0-alpha-2.txt:91
#: ../../releases/1.0-beta.txt:108
# 35ef177d854c42fdab1543ccdb2ac330
# 5df04d93a707481b97777e8ea1a1b5fe
msgid "August 30, 2008: Sprint (based in London, England, UK, and online)."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:93
#: ../../releases/1.0-beta.txt:110
# 7780f0e4139045758fd82fcece618f9c
# e366c9976a364681a92f40f3d0ef5a64
msgid "**September 2, 2008: Django 1.0 final release.** The official Django 1.0 release party will take place during the first-ever DjangoCon, to be held in Mountain View, California, USA, September 6-7."
msgstr ""

#: ../../releases/1.0-beta.txt:3
# 0043fb30c70a43f8b37f895219504136
msgid "Django 1.0 beta 1 release notes"
msgstr ""

#: ../../releases/1.0-beta.txt:5
# 6c625e978cb248ac8244cb07b0e26d8f
msgid "Welcome to Django 1.0 beta 1!"
msgstr ""

#: ../../releases/1.0-beta.txt:7
# 4095a29cdd6641faaf5a970cf25f8f58
msgid "This is the third in a series of preview/development releases leading up to the eventual release of Django 1.0, currently scheduled to take place in early September 2008. This releases is primarily targeted at developers who are interested in testing the Django codebase and helping to identify and resolve bugs prior to the final 1.0 release."
msgstr ""

#: ../../releases/1.0-beta.txt:13
#: ../../releases/1.0-beta-2.txt:13
#: ../../releases/1.1-alpha-1.txt:15
#: ../../releases/1.1-beta-1.txt:15
#: ../../releases/1.2-alpha-1.txt:15
#: ../../releases/1.2-beta-1.txt:16
#: ../../releases/1.3-alpha-1.txt:15
#: ../../releases/1.3-beta-1.txt:13
#: ../../releases/1.4-alpha-1.txt:15
#: ../../releases/1.4-beta-1.txt:15
#: ../../releases/1.5-alpha-1.txt:15
#: ../../releases/1.5-beta-1.txt:15
# 602429dada5548628f245493dc042f12
# 7411bb6348a44ae68b340238f1de8cb5
# 5c6c5ed9709643f2a4c907e0cdc6e0b2
# 6100adaa77a54cbdaab9b17af907de94
# 2f04bd9545d64f568cfe9cf23dadca17
# cc40cca61c39439cbdd778c85dfb16d7
# 32cdc13bd8164e71b3839b9e43df6eb5
# 22b7645bd282497e9e9e67719d06328c
# 0b6c8fee2f0a4396b6e4baedc69ba3cb
# bb5dea3e818e44d6ad5543a33e6a40fc
# 82172f1402f54f718bf6ea396c3f8735
# 2d68e93459894b8888d9b9d0c841266b
msgid "As such, this release is *not* intended for production use, and any such use is discouraged."
msgstr ""

#: ../../releases/1.0-beta.txt:17
# 2e5a580b9a5343ab85be1b8c0954e52b
msgid "What's new in Django 1.0 beta 1"
msgstr ""

#: ../../releases/1.0-beta.txt:19
# 9d1ed37bec424418ae08b654007e445c
msgid "Django's development trunk has been the site of nearly constant activity over the past year, with several major new features landing since the 0.96 release. For features which were new as of Django 1.0 alpha 1, see :doc:`the 1.0 alpha 1 release notes </releases/1.0-alpha-1>`. For features which were new as of Django 1.0 alpha 2, see :doc:`the 1.0 alpha 2 release notes </releases/1.0-alpha-2>`."
msgstr ""

#: ../../releases/1.0-beta.txt:25
# 4c2d7bc9deb94ed79a4f10327db714dd
msgid "This beta release does not contain any major new features, but does include several smaller updates and improvements to Django:"
msgstr ""

#: ../../releases/1.0-beta.txt:39
# 654e1a52744d4610aa51bc39a9b4fb13
msgid "Improved flexibility in the admin"
msgstr ""

#: ../../releases/1.0-beta.txt:35
# d9e8789299e44c039db7a69531457eb3
msgid "Following up on the refactoring of Django's administrative interface (``django.contrib.admin``), introduced in Django 1.0 alpha 1, two new hooks have been added to allow customized pre- and post-save handling of model instances in the admin. Full details are in :doc:`the admin documentation </ref/contrib/admin/index>`."
msgstr ""

#: ../../releases/1.0-beta.txt:42
# af4c9920472c4178a21764f531464c95
msgid "Although Django's default behavior of having a model's ``save()`` method automatically determine whether to perform an ``INSERT`` or an ``UPDATE`` at the SQL level is suitable for the majority of cases, there are occasional situations where forcing one or the other is useful. As a result, models can now support an additional parameter to ``save()`` which can force a specific operation. Consult the database API documentation for details and important notes about appropriate use of this parameter."
msgstr ""

#: ../../releases/1.0-beta.txt:52
# 91e981127ec440c0835fffb440fc20d4
msgid "Django's ``CacheMiddleware`` has been split into three classes: ``CacheMiddleware`` itself still exists and retains all of its previous functionality, but it is now built from two separate middleware classes which handle the two parts of caching (inserting into and reading from the cache) separately, offering additional flexibility for situations where combining these functions into a single middleware posed problems. Full details, including updated notes on appropriate use, are in :doc:`the caching documentation </topics/cache>`."
msgstr ""

#: ../../releases/1.0-beta.txt:63
# 80ae45822978400e9e8aa42d601e4cbe
msgid "A number of features and methods which had previously been marked as deprecated, and which were scheduled for removal prior to the 1.0 release, are no longer present in Django. These include imports of the form library from ``django.newforms`` (now located simply at ``django.forms``), the ``form_for_model`` and ``form_for_instance`` helper functions (which have been replaced by ``ModelForm``) and a number of deprecated features which were replaced by the dispatcher, file-uploading and file-storage refactorings introduced in the Django 1.0 alpha releases. A full list of these and all other backwards-incompatible changes is available on `the Django wiki`_."
msgstr ""

#: ../../releases/1.0-beta.txt:75
# 6963426be94343d0a7438462abb6de34
msgid "A number of other improvements and bugfixes have also been included: some tricky cases involving case-sensitivity in differing MySQL collations have been resolved, Windows packaging and installation has been improved and the method by which Django generates unique session identifiers has been made much more robust."
msgstr ""

#: ../../releases/1.0-beta.txt:88
# f137788fe8c747de9d166f6d49d5bbed
msgid "One of the primary goals of this beta release is to focus attention on the remaining features to be implemented for Django 1.0, and on the bugs that need to be resolved before the final release. Following this release, we'll be conducting a series of development sprints building up to the release-candidate stage, followed soon after by Django 1.0. The timeline is projected to be:"
msgstr ""

#: ../../releases/1.0-beta.txt:124
#: ../../releases/1.0-beta-2.txt:90
# a75b4cd5f7134c87b988c10aa2d6dfcf
# aeb7817adfda4f5e86f10bd99034fc0a
msgid "In order to provide a high-quality 1.0 release, we need your help. Although this beta release is, again, *not* intended for production use, you can help the Django team by trying out the beta codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.0-beta-2.txt:3
# 820bcd70972f4551aad2e35d95870cd5
msgid "Django 1.0 beta 2 release notes"
msgstr ""

#: ../../releases/1.0-beta-2.txt:5
# b29872fad2394693b2a148b806352660
msgid "Welcome to Django 1.0 beta 2!"
msgstr ""

#: ../../releases/1.0-beta-2.txt:7
# f1ae7079e1fd418789d7acc6f14fb6a9
msgid "This is the fourth in a series of preview/development releases leading up to the eventual release of Django 1.0, currently scheduled to take place in early September 2008. This releases is primarily targeted at developers who are interested in testing the Django codebase and helping to identify and resolve bugs prior to the final 1.0 release."
msgstr ""

#: ../../releases/1.0-beta-2.txt:17
# 3675ac07abb94ee4a11a684f10667cdd
msgid "What's new in Django 1.0 beta 2"
msgstr ""

#: ../../releases/1.0-beta-2.txt:19
# ed3fbd82bdb14f8c869d48a955d73070
msgid "Django's development trunk has been the site of nearly constant activity over the past year, with several major new features landing since the 0.96 release.  For features which were new as of Django 1.0 alpha 1, see :doc:`the 1.0 alpha 1 release notes </releases/1.0-alpha-1>`. For features which were new as of Django 1.0 alpha 2, see :doc:`the 1.0 alpha 2 release notes </releases/1.0-alpha-2>`. For features which were new as of Django 1.0 beta 1, see :doc:`the 1.0 beta 1 release notes </releases/1.0-beta>`."
msgstr ""

#: ../../releases/1.0-beta-2.txt:28
# ccf41e209a9b4b6ca1dfb674216581b7
msgid "This beta release includes two major features:"
msgstr ""

#: ../../releases/1.0-beta-2.txt:31
# 0a0132ccf9d14977bd5417e5f39230b8
msgid "As part of a Google Summer of Code project, Thejaswi Puthraya carried out a major rewrite and refactoring of Django's bundled comment system, greatly increasing its flexibility and customizability. :doc:`Full documentation </ref/contrib/comments/index>` is available, as well as an upgrade guide if you were using the previous incarnation of the comments application.."
msgstr ""

#: ../../releases/1.0-beta-2.txt:46
# 8c74b8a9b9144be795009a3f0fbae95e
msgid "Refactored documentation"
msgstr ""

#: ../../releases/1.0-beta-2.txt:40
# 4cf97bff895248d3a12df69111fd6e61
msgid "Django's bundled and online documentation has also been significantly refactored; the new documentation system uses `Sphinx`_ to build the docs and handle such niceties as topical indexes, reference documentation and cross-references within the docs. You can check out the new documentation `online`_ or, if you have Sphinx installed, build the HTML yourself from the documentation files bundled with Django."
msgstr ""

#: ../../releases/1.0-beta-2.txt:51
# c84aef6197cb479198e015cf917a5db1
msgid "Along with these new features, the Django team has also been hard at work polishing Django's codebase for the final 1.0 release; this beta release contains a large number of smaller improvements and bugfixes from the ongoing push to 1.0."
msgstr ""

#: ../../releases/1.0-beta-2.txt:56
# 7c2eb21ecc164fd4bd1c85fb83e386f4
msgid "Also, as part of its ongoing deprecation process, Django's old form-handling system has been removed; this means ``django.oldforms`` no longer exists, and its various API hooks (such as automatic manipulators) are no longer present in Django. This system has been completely replaced by :doc:`the new form-handling system </topics/forms/index>` in ``django.forms``."
msgstr ""

#: ../../releases/1.0-beta-2.txt:67
# 5d4dd2dd73ad4cc8a08f7769dd4ab1e4
msgid "One of the primary goals of this beta release is to focus attention on the remaining features to be implemented for Django 1.0, and on the bugs that need to be resolved before the final release. As of this beta release, Django is in its final \"feature freeze\" for 1.0; feature requests will be deferred to later releases, and the development effort will be focused solely on bugfixing and stability. Django is also now in a \"string freeze\"; translatable strings (labels, error messages, etc.) in Django's codebase will not be changed prior to the release, in order to allow our translators to produce the final 1.0 version of Django's translation files."
msgstr ""

#: ../../releases/1.0-beta-2.txt:78
# 99d71e58b9c2487e87f04e1da29c7550
msgid "Following this release, we'll be conducting a final development sprint on August 30, 2008, based in London and coordinated online; the goal of this sprint will be to squash as many bugs as possible in anticipation of the final 1.0 release, which is currently targeted for **September 2, 2008**. The official Django 1.0 release party will take place during the first-ever DjangoCon, to be held in Mountain View, California, USA, September 6-7."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:3
# de9457456da947a6830d1121697cb3ed
msgid "Porting your apps from Django 0.96 to 1.0"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:7
# 8a87a395d78844b88bd553a8d4f5b34e
msgid "Django 1.0 breaks compatibility with 0.96 in some areas."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:9
# 2ab57682451d472db1106a60dece2ba5
msgid "This guide will help you port 0.96 projects and apps to 1.0. The first part of this document includes the common changes needed to run with 1.0. If after going through the first part your code still breaks, check the section `Less-common Changes`_ for a list of a bunch of less-common compatibility issues."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:16
# cca6ffce8ae34e28b78a0efdfb484769
msgid "The :doc:`1.0 release notes </releases/1.0>`. That document explains the new features in 1.0 more deeply; the porting guide is more concerned with helping you quickly update your code."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:21
# d43d186a96394024b506c057ae16f265
msgid "Common changes"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:23
# 3b77072aa7274bf1b64cb25c29e45273
msgid "This section describes the changes between 0.96 and 1.0 that most users will need to make."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:27
# 39fe287058634769b182bc7f496d57d6
msgid "Use Unicode"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:29
# 7673fef151aa4e32b58cdc4a4b1ee4cc
msgid "Change string literals (``'foo'``) into Unicode literals (``u'foo'``). Django now uses Unicode strings throughout. In most places, raw strings will continue to work, but updating to use Unicode literals will prevent some obscure problems."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:34
# 77dff25834a34877954fb565ceaa73c3
msgid "See :doc:`/ref/unicode` for full details."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:37
# d2c6fd0c8c8a40babbfbae92fd144791
msgid "Models"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:39
# 8e02539e54d446fcb4042f16a8d8849f
msgid "Common changes to your models file:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:42
# fa47c66564b7402fa5632772b72819f5
msgid "Rename ``maxlength`` to ``max_length``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:44
# 72550d82daf54eb4bcc56fe53c73ee80
msgid "Rename your ``maxlength`` argument to ``max_length`` (this was changed to be consistent with form fields):"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:48
# dfc08afc28b94b8eadee4d4680203286
msgid "Replace ``__str__`` with ``__unicode__``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:50
# 73995ea8ed664833a471732761caa4b6
msgid "Replace your model's ``__str__`` function with a ``__unicode__`` method, and make sure you `use Unicode`_ (``u'foo'``) in that method."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:54
# 2c8954e7d82d49929941e222ee25f0de
msgid "Remove ``prepopulated_from``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:56
# 008912e51f1c4e15b0f6fe26b008b878
msgid "Remove the ``prepopulated_from`` argument on model fields. It's no longer valid and has been moved to the ``ModelAdmin`` class in ``admin.py``. See `the admin`_, below, for more details about changes to the admin."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:61
# 7ba35f6e0add4cc5997447460fcac1f2
msgid "Remove ``core``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:63
# 625d48d780404028b1f0589359adc1bc
msgid "Remove the ``core`` argument from your model fields. It is no longer necessary, since the equivalent functionality (part of :ref:`inline editing <admin-inlines>`) is handled differently by the admin interface now. You don't have to worry about inline editing until you get to `the admin`_ section, below. For now, remove all references to ``core``."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:70
# 6a6635d03fa14887866821892cd20942
msgid "Replace ``class Admin:`` with ``admin.py``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:72
# fb31f1eae4a24f13847c6649915da253
msgid "Remove all your inner ``class Admin`` declarations from your models. They won't break anything if you leave them, but they also won't do anything. To register apps with the admin you'll move those declarations to an ``admin.py`` file; see `the admin`_ below for more details."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:79
# 129a66a082a3418b815bb7b770cd4273
msgid "A contributor to djangosnippets__ has written a script that'll `scan your models.py and generate a corresponding admin.py`__."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:86
# 5ffa2c4c0cc7499e9f689a53ceb6c933
msgid "Example"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:88
# 75683406910945a7be99317a330c7c64
msgid "Below is an example ``models.py`` file with all the changes you'll need to make:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:90
# 503f079c7232493abc7caeaa39b5d2e2
msgid "Old (0.96) ``models.py``::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:103
# 57c61c4f748a4b21bf34fa9bc56b7c58
msgid "New (1.0) ``models.py``::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:113
# 471d9d0148ab41829f5490c820d90b61
msgid "New (1.0) ``admin.py``::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:127
# 72f05223e7c74a8d80c46f3377768089
msgid "The Admin"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:129
# c957fedd1db54184a2eee9cc377a8868
msgid "One of the biggest changes in 1.0 is the new admin. The Django administrative interface (``django.contrib.admin``) has been completely refactored; admin definitions are now completely decoupled from model definitions, the framework has been rewritten to use Django's new form-handling library and redesigned with extensibility and customization in mind."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:135
# 858961413cff44658f3e749e71061bee
msgid "Practically, this means you'll need to rewrite all of your ``class Admin`` declarations. You've already seen in `models`_ above how to replace your ``class Admin`` with a ``admin.site.register()`` call in an ``admin.py`` file. Below are some more details on how to rewrite that ``Admin`` declaration into the new syntax."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:142
# 8eb8fdaef13f47498f8cfaab14eb3397
msgid "Use new inline syntax"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:144
# d7cfa9e5cba44a08a2d7ae7be8cee0f7
msgid "The new ``edit_inline`` options have all been moved to ``admin.py``. Here's an example:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:147
#: ../../releases/1.0-porting-guide.txt:176
#: ../../releases/1.0-porting-guide.txt:484
#: ../../releases/1.0-porting-guide.txt:506
#: ../../releases/1.0-porting-guide.txt:523
#: ../../releases/1.0-porting-guide.txt:649
# b0597305902547318b7e710f94aaad7c
# 1ffed04d6c724595b280121903fd6e85
# 034b0804c4df4cd8afb83cf104ea41df
# 8a969393edb84131b98e1fab1c3097c6
# b21612db4f364d43b410928f35eb0f29
# cf9c6d12b5db4c9bab435d5a119613aa
msgid "Old (0.96)::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:156
#: ../../releases/1.0-porting-guide.txt:196
#: ../../releases/1.0-porting-guide.txt:491
#: ../../releases/1.0-porting-guide.txt:512
#: ../../releases/1.0-porting-guide.txt:529
#: ../../releases/1.0-porting-guide.txt:655
# 3f526870984341cb8f0925cc1a6c776e
# a558da7cc5544aa7a12b0db2642045ca
# feca4eb08f9c40aabcaa2f18f67980bd
# 3807046b58ff430daf294d61496e20a8
# 7e2e8ee2f95a4c88ae0f25ba9b096889
# a31d67495c7f4133ae899b13cddbd1d8
msgid "New (1.0)::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:168
# 65908ccbfa874ff090556f52a59029de
msgid "See :ref:`admin-inlines` for more details."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:171
# 2a18729b8209444b91891e52df3dbf99
msgid "Simplify ``fields``, or use ``fieldsets``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:173
# f41938c532c24afdb6f4a98ed703a4a1
msgid "The old ``fields`` syntax was quite confusing, and has been simplified. The old syntax still works, but you'll need to use ``fieldsets`` instead."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:210
# b9c6256d06204d79bd614265c4c35fca
msgid "More detailed information about the changes and the reasons behind them can be found on the `NewformsAdminBranch wiki page`__"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:213
# 098551bf4c3d4229bc438dc3e69a9376
msgid "The new admin comes with a ton of new features; you can read about them in the :doc:`admin documentation </ref/contrib/admin/index>`."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:219
# 64e19bfffce94f8e9214278dbe6cd004
msgid "URLs"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:222
# 635408937d83438685b137a2c69e2184
msgid "Update your root ``urls.py``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:224
# f2c7f042d3704dbfb331cf5ce1f6c69d
msgid "If you're using the admin site, you need to update your root ``urls.py``."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:226
# daad38598c0d48b19f8b4a9f13aa14da
msgid "Old (0.96) ``urls.py``::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:236
# c7f8b4ef212f420abfaab5a4e9433102
msgid "New (1.0) ``urls.py``::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:251
# 5eac100300f44d9b8ca6ff9e134d61b0
msgid "Views"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:254
# 8624b2ce828743aca1ea4b9f48b20a09
msgid "Use ``django.forms`` instead of ``newforms``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:256
# 8f6de9702b354240919c716d1fcf7af8
msgid "Replace ``django.newforms`` with ``django.forms`` -- Django 1.0 renamed the ``newforms`` module (introduced in 0.96) to plain old ``forms``. The ``oldforms`` module was also removed."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:260
# a5cbae83e9ed4493af1703343d7abafb
msgid "If you're already using the ``newforms`` library, and you used our recommended ``import`` statement syntax, all you have to do is change your import statements."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:264
# b2dcfca54e8d42119e2d165da3bbeddc
msgid "Old::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:268
# 1e204e3ff23d41e19a44334fbeb1298b
msgid "New::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:272
# fbede45b30c746809193bed3daf299cd
msgid "If you're using the old forms system (formerly known as ``django.forms`` and ``django.oldforms``), you'll have to rewrite your forms. A good place to start is the :doc:`forms documentation </topics/forms/index>`"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:277
# bedd2f7f49924eacb856ec13f1dfa2b5
msgid "Handle uploaded files using the new API"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:279
# 610c849a92be4173a3bb993939143ccc
msgid "Replace use of uploaded files -- that is, entries in ``request.FILES`` -- as simple dictionaries with the new :class:`~django.core.files.uploadedfile.UploadedFile`. The old dictionary syntax no longer works."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:284
# 6a816f16a9c34069bd076a1103fdad3e
msgid "Thus, in a view like::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:290
# cbc9eb32b4f44a34bab6733559e13c81
msgid "...you'd need to make the following changes:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:293
#: ../../releases/1.0-porting-guide.txt:310
#: ../../releases/1.0-porting-guide.txt:382
#: ../../releases/1.0-porting-guide.txt:741
# 3dce86ea45964fbfb1db58ea95af018d
# ed8004ceb4894ce1b643916ab7c2b6d1
# 20f01448466048f298023710265b8ca9
# 7f4cf175fdfd492d8b7b1690421ea1c7
msgid "Old (0.96)"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:293
#: ../../releases/1.0-porting-guide.txt:310
#: ../../releases/1.0-porting-guide.txt:382
#: ../../releases/1.0-porting-guide.txt:741
# 3589ae2228a64b3f84dc16d09ac07a16
# 60c72b0d369b4bdb99a4d2b7d15a7907
# 9e5463100a5c48599b429598b4c9d875
# 32f77f9d86334065b0a390ad0b4f77c1
msgid "New (1.0)"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:295
# 011b825804ec4414a1ae26a4087a201f
msgid "``f['content']``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:295
# bf05677f4c9045b4a105b85a99e10fe0
msgid "``f.read()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:296
# 75c2e81713c54edd94de78d1e6526893
msgid "``f['filename']``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:296
# 6ef19be4e43c403aa3eb9199ed126cf8
msgid "``f.name``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:297
# 389b835307c841a9842a7806f81202e5
msgid "``f['content-type']``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:297
# d40e96b196ec446f92cb5906f006b9db
msgid "``f.content_type``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:301
# 9ff01a76078443fe86ef295baa7ba892
msgid "Work with file fields using the new API"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:303
# 7bbd9ed2ff824db7b0ca04871a836c72
msgid "The internal implementation of :class:`django.db.models.FileField` have changed. A visible result of this is that the way you access special attributes (URL, filename, image size, etc) of these model fields has changed. You will need to make the following changes, assuming your model's :class:`~django.db.models.FileField` is called ``myfile``:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:312
# 603d274dcc7048a08ca7083cf659ed83
msgid "``myfile.get_content_filename()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:312
# 2b60af1d07b648cd9e898b75c0288d1f
msgid "``myfile.content.path``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:313
# 0f41ff12809546d1bf12214fb988ed40
msgid "``myfile.get_content_url()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:313
# 2fbb3cd05a8a4d29ab7774db0fce9673
msgid "``myfile.content.url``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:314
# 765080b2c7b74148955bc338c249ba1d
msgid "``myfile.get_content_size()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:314
# 8805b9274a6f457ca8e99b1fd1a377b9
msgid "``myfile.content.size``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:315
# b0854b13b1ba4dbd873a3978d4ec20f7
msgid "``myfile.save_content_file()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:315
# 74a5c7956d454592b676d1668afacb85
msgid "``myfile.content.save()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:316
# 89341c49f10845cab21627201b361bb9
msgid "``myfile.get_content_width()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:316
# 151b8180d3284d79b5597c19fd81da86
msgid "``myfile.content.width``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:317
# 64ba33d74d9441498177419cda28b0e5
msgid "``myfile.get_content_height()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:317
# 669dde6ccec44cc1a98628db4679df29
msgid "``myfile.content.height``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:320
# 4e61d679bd9e42e483a711a5d232894e
msgid "Note that the ``width`` and ``height`` attributes only make sense for :class:`~django.db.models.ImageField` fields. More details can be found in the :doc:`model API </ref/models/fields>` documentation."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:325
# 117b7c31adfb42a08e3c627c8a75822d
msgid "Use ``Paginator`` instead of ``ObjectPaginator``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:327
# 4c08160ca7194ef5b504e674d7e124df
msgid "The ``ObjectPaginator`` in 0.96 has been removed and replaced with an improved version, :class:`django.core.paginator.Paginator`."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:331
# ca4364d359604170b9e64c02882f1ea4
msgid "Templates"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:334
# 9a026337919140e78ac43781e0cf406f
msgid "Learn to love autoescaping"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:336
# 90abc46a9ada432895ffc6fcf6444dc3
msgid "By default, the template system now automatically HTML-escapes the output of every variable. To learn more, see :ref:`automatic-html-escaping`."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:339
# de713b3e0dea40bc9e33c92c8f5276f6
msgid "To disable auto-escaping for an individual variable, use the :tfilter:`safe` filter:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:347
# e8fe20153e644d919c7988fc60862a32
msgid "To disable auto-escaping for an entire template, wrap the template (or just a particular section of the template) in the :ttag:`autoescape` tag:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:357
# 9b399b9754874b4bb16e098bd09c38bf
msgid "Less-common changes"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:359
# 5e012062e3b24c12a67dc20be7ee423a
msgid "The following changes are smaller, more localized changes. They should only affect more advanced users, but it's probably worth reading through the list and checking your code for these things."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:364
# c72e962181084bf3912dcc305e4e5fe9
msgid "Signals"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:366
# 0a77bde292aa4122a261e3c2ea6461e1
msgid "Add ``**kwargs`` to any registered signal handlers."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:368
# 252e62fcfbf84d5e95782a5a1308b03a
msgid "Connect, disconnect, and send signals via methods on the :class:`~django.dispatch.Signal` object instead of through module methods in ``django.dispatch.dispatcher``."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:372
# 7aaadef5667a4bda99421e56397b8397
msgid "Remove any use of the ``Anonymous`` and ``Any`` sender options; they no longer exist. You can still receive signals sent by any sender by using ``sender=None``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:376
# 95a1c9f1438d4faebd6702916fbdab90
msgid "Make any custom signals you've declared into instances of :class:`django.dispatch.Signal` instead of anonymous objects."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:379
# ccded2cff8a94aa7ae3836d868444dd9
msgid "Here's quick summary of the code changes you'll need to make:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:384
# 0f56f14778764f31b733a970ff2c2644
msgid "``def callback(sender)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:384
# bb34d7fe31f94961ac3ec3bbf6bea3de
msgid "``def callback(sender, **kwargs)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:385
# f6a9b171086442569cd32b9d9d0329d1
msgid "``sig = object()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:385
# adb90941146a4575aa1c56df967b1827
msgid "``sig = django.dispatch.Signal()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:386
# 4566a11e7ce147f797ee66c6f29dcf79
msgid "``dispatcher.connect(callback, sig)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:386
# 1affec87de0e4a7ea06aeff845d1b23f
msgid "``sig.connect(callback)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:387
# cce9d1b9570f4f84b91b4d5e4c42de92
msgid "``dispatcher.send(sig, sender)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:387
# 75bc9f0339ad42489e75e77361d8a2be
msgid "``sig.send(sender)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:388
# 0711084c70344c0ab7576c41cf18e755
msgid "``dispatcher.connect(callback, sig, sender=Any)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:388
# 784b3d024cd04aaf9719dc8b1e31f970
msgid "``sig.connect(callback, sender=None)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:392
# 22e526e9a5c34dab9958801600fd90c7
msgid "Comments"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:394
# 2f2b5d9a6a5545a8b3a5d35c2be3730e
msgid "If you were using Django 0.96's ``django.contrib.comments`` app, you'll need to upgrade to the new comments app introduced in 1.0. See the upgrade guide for details."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:399
# 138608d4cdd343638dad6cc226c660a9
msgid "Template tags"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:402
# 3d9bc831d250437bbeeb48e89e8ed1f9
msgid ":ttag:`spaceless` tag"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:404
# 1390d50d4af144c9a77f2d8e2900b396
msgid "The spaceless template tag now removes *all* spaces between HTML tags, instead of preserving a single space."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:408
# e686de9e4e454e1398a99ab68335e9d8
msgid "Local flavors"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:411
# 716ab14a84204184bf1e3c6862b1ba8f
msgid "U.S. local flavor"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:413
# 70288b6ab6e544d1acf1cf2851145ec4
msgid "``django.contrib.localflavor.usa`` has been renamed to ``django.contrib.localflavor.us``. This change was made to match the naming scheme of other local flavors. To migrate your code, all you need to do is change the imports."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:419
# d9eab0b5868f49399303d40c4d8f2d8b
msgid "Sessions"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:422
# b772978b0ebf402aa5d0aa7a8efe79c3
msgid "Getting a new session key"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:424
# b6dbff3907574247a7f7c525a95a8b4f
msgid "``SessionBase.get_new_session_key()`` has been renamed to ``_get_new_session_key()``. ``get_new_session_object()`` no longer exists."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:428
# 67b217eef9af4524a842d66a3183c21e
msgid "Fixtures"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:431
# 52b9fef72af340229b3cd01a158eee99
msgid "Loading a row no longer calls ``save()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:433
# 7ea5d76ebea84e5381bb67f0fd725583
msgid "Previously, loading a row automatically ran the model's ``save()`` method. This is no longer the case, so any fields (for example: timestamps) that were auto-populated by a ``save()`` now need explicit values in any fixture."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:438
# 874f789cdff64343b967d8a243ca0a43
msgid "Settings"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:441
# 3362a9ac304f4e58925d67973f170a26
msgid "Better exceptions"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:443
# 3bd0ab09d5db4cd3af8bda383396071c
msgid "The old :exc:`~exceptions.EnvironmentError` has split into an :exc:`~exceptions.ImportError` when Django fails to find the settings module and a :exc:`~exceptions.RuntimeError` when you try to reconfigure settings after having already used them."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:449
# 847836539dbe4445b9bf2dbdb342365e
msgid ":setting:`LOGIN_URL` has moved"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:451
# 3656576792d24ede8ab6b6ed085247d1
msgid "The :setting:`LOGIN_URL` constant moved from ``django.contrib.auth`` into the ``settings`` module. Instead of using ``from django.contrib.auth import LOGIN_URL`` refer to :setting:`settings.LOGIN_URL <LOGIN_URL>`."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:456
# ae8ca4edd0af466b9e7a453388559cb7
msgid ":setting:`APPEND_SLASH` behavior has been updated"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:458
# 10b36ae3e509448d882b5d02f0b09122
msgid "In 0.96, if a URL didn't end in a slash or have a period in the final component of its path, and :setting:`APPEND_SLASH` was True, Django would redirect to the same URL, but with a slash appended to the end. Now, Django checks to see whether the pattern without the trailing slash would be matched by something in your URL patterns. If so, no redirection takes place, because it is assumed you deliberately wanted to catch that pattern."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:465
# 669b6d78ff084a56a8692cc6d8f4f818
msgid "For most people, this won't require any changes. Some people, though, have URL patterns that look like this::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:470
# d6a6a20b137f40fd931d7eeb278c527d
msgid "Previously, those patterns would have been redirected to have a trailing slash. If you always want a slash on such URLs, rewrite the pattern as::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:476
# 9122f705fc7f4f5baf9723c3102c3ae7
msgid "Smaller model changes"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:479
# 93527efdae6142bb97c0db50f98cd77a
msgid "Different exception from ``get()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:481
# 76d5e0d9b49e4f9083b6ac20f87652b0
msgid "Managers now return a :exc:`~django.core.exceptions.MultipleObjectsReturned` exception instead of :exc:`~exceptions.AssertionError`:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:499
# 000035feec8f49b79795dbfdaa07fd0d
msgid "``LazyDate`` has been fired"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:501
# f354227c916b41e99d61c20dc9ab8e0b
msgid "The ``LazyDate`` helper class no longer exists."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:503
# 1600e4fee7aa4581aa8c283819c843ac
msgid "Default field values and query arguments can both be callable objects, so instances of ``LazyDate`` can be replaced with a reference to ``datetime.datetime.now``:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:521
# 773f88c25793475195409c737fbec220
msgid "``DecimalField`` is new, and ``FloatField`` is now a proper float"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:535
# 792daf4a5adf4387b6fbef000040096a
msgid "If you forget to make this change, you will see errors about ``FloatField`` not taking a ``max_digits`` attribute in ``__init__``, because the new ``FloatField`` takes no precision-related arguments."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:539
# 343c3a231c884591af1ead45e619b62b
msgid "If you're using MySQL or PostgreSQL, no further changes are needed. The database column types for ``DecimalField`` are the same as for the old ``FloatField``."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:543
# ccf6405189d1413dab134d117b006462
msgid "If you're using SQLite, you need to force the database to view the appropriate columns as decimal types, rather than floats. To do this, you'll need to reload your data. Do this after you have made the change to using ``DecimalField`` in your code and updated the Django code."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:550
# 92708520f9be4fe89c4fda4754c7f4f0
msgid "**Back up your database first!**"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:552
# bda63f57830e4429be0e52b994618b5e
msgid "For SQLite, this means making a copy of the single file that stores the database (the name of that file is the ``DATABASE_NAME`` in your settings.py file)."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:556
# ca12edac25054c6288f775054d649b54
msgid "To upgrade each application to use a ``DecimalField``, you can do the following, replacing ``<app>`` in the code below with each app's name:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:565
# 7af19416fd0642fc91afad746068814e
msgid "Notes:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:567
# 7d609c5502c14333bc5c8946b39117b2
msgid "It's important that you remember to use XML format in the first step of this process. We are exploiting a feature of the XML data dumps that makes porting floats to decimals with SQLite possible."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:571
# 650febc51a3b4daab1e3e2587b34f5d1
msgid "In the second step you will be asked to confirm that you are prepared to lose the data for the application(s) in question. Say yes; we'll restore this data in the third step, of course."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:575
# 14760f0dd8eb4683883add2a87294033
msgid "``DecimalField`` is not used in any of the apps shipped with Django prior to this change being made, so you do not need to worry about performing this procedure for any of the standard Django models."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:579
# e7bb2643a6e849c6897facc2c6fd73a9
msgid "If something goes wrong in the above process, just copy your backed up database file over the original file and start again."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:583
# f8c57ccd8c5d4d31bff348508b263c6d
msgid "Internationalization"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:586
# 0c18f74c637949f799d86bae42bf41d2
msgid ":func:`django.views.i18n.set_language` now requires a POST request"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:588
# 3049800064774ac1b8e875e9549d27fd
msgid "Previously, a GET request was used. The old behavior meant that state (the locale used to display the site) could be changed by a GET request, which is against the HTTP specification's recommendations. Code calling this view must ensure that a POST request is now made, instead of a GET. This means you can no longer use a link to access the view, but must use a form submission of some kind (e.g. a button)."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:596
# 72edcd58bf414e988d1dfd50b68e2af6
msgid "``_()`` is no longer in builtins"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:598
# 2ce26922b73b4d9a813b488a7ed54d16
msgid "``_()`` (the callable object whose name is a single underscore) is no longer monkeypatched into builtins -- that is, it's no longer available magically in every module."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:602
# 2d3c350d1f244eaf9e8b08b6d9895d5b
msgid "If you were previously relying on ``_()`` always being present, you should now explicitly import ``ugettext`` or ``ugettext_lazy``, if appropriate, and alias it to ``_`` yourself::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:609
# 449d2ed772c0435eb01b67ec1f5b8eb2
msgid "HTTP request/response objects"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:612
# 62132b594f9940c7b4d296afe29ffe22
msgid "Dictionary access to ``HttpRequest``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:614
# 3864b69bc1e748a9a47c21affbd588d7
msgid "``HttpRequest`` objects no longer directly support dictionary-style access; previously, both ``GET`` and ``POST`` data were directly available on the ``HttpRequest`` object (e.g., you could check for a piece of form data by using ``if 'some_form_key' in request`` or by reading ``request['some_form_key']``. This is no longer supported; if you need access to the combined ``GET`` and ``POST`` data, use ``request.REQUEST`` instead."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:622
# 02e76c5e9bf74aa98cfb85623767015a
msgid "It is strongly suggested, however, that you always explicitly look in the appropriate dictionary for the type of request you expect to receive (``request.GET`` or ``request.POST``); relying on the combined ``request.REQUEST`` dictionary can mask the origin of incoming data."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:628
# b65147059020462cb589e9b104c2416c
msgid "Accessing ``HTTPResponse`` headers"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:630
# d7bd7f58cd294d97bab0b6deb5c15129
msgid "``django.http.HttpResponse.headers`` has been renamed to ``_headers`` and :class:`~django.http.HttpResponse` now supports containment checking directly. So use ``if header in response:`` instead of ``if header in response.headers:``."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:635
# 541699f0dcb9455fa30721f1ff645bac
msgid "Generic relations"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:638
# d1c2a5b396e448938a66392a2d40f42d
msgid "Generic relations have been moved out of core"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:640
# 16511f3020c343a78544c9608837967a
msgid "The generic relation classes -- ``GenericForeignKey`` and ``GenericRelation`` -- have moved into the :mod:`django.contrib.contenttypes` module."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:644
# 19de0708cd8246c190536b7d261cbeae
msgid "Testing"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:647
# 5c32f170a4314954b320dfdc369b34f3
msgid ":meth:`django.test.client.Client.login` has changed"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:661
# d59432335c0849768f0382beaeb8511d
msgid "Management commands"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:664
# d4645fa54f224d09ba81b825d8f16586
msgid "Running management commands from your code"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:666
# 67a81a6017a745309040d95494895e56
msgid ":mod:`django.core.management` has been greatly refactored."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:668
# 96667f4dce2a45ee98b3eb78911f300e
msgid "Calls to management services in your code now need to use ``call_command``. For example, if you have some test code that calls flush and load_data::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:676
# 2bcf775ccbe24dffa519f12d51aa52b2
msgid "...you'll need to change this code to read::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:683
# c4353e666a8a416fb06243b2ec0d560b
msgid "Subcommands must now precede options"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:685
# 5d57dc4da7754f9cad9c3ab3382bccc6
msgid "``django-admin.py`` and ``manage.py`` now require subcommands to precede options. So:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:692
# 9221d566d48c4b31a439880e22aab1fb
msgid "...no longer works and should be changed to:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:699
# 410812dc409a4ca882f73a416f6b81d5
msgid "Syndication"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:702
# 6b551ffc93c744508e9c574a7ce45efa
msgid "``Feed.__init__`` has changed"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:704
# 7c1ae31ac2fc425882e988c4a670cfe4
msgid "The ``__init__()`` method of the syndication framework's ``Feed`` class now takes an ``HttpRequest`` object as its second parameter, instead of the feed's URL. This allows the syndication framework to work without requiring the sites framework. This only affects code that subclasses ``Feed`` and overrides the ``__init__()`` method, and code that calls ``Feed.__init__()`` directly."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:711
# 713fc29ede56455ab835134594821f5a
msgid "Data structures"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:714
# 76a957f580af42d187e2065b670d348f
msgid "``SortedDictFromList`` is gone"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:716
# 319665fe8c134b91a13d64ab7fde7336
msgid "``django.newforms.forms.SortedDictFromList`` was removed. :class:`django.utils.datastructures.SortedDict` can now be instantiated with a sequence of tuples."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:720
# c54f2f2245454dbba7b5fefab5d2f53c
msgid "To update your code:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:722
# 0384c88241df41a0b9f5257a06059c5b
msgid "Use :class:`django.utils.datastructures.SortedDict` wherever you were using ``django.newforms.forms.SortedDictFromList``."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:725
# 3fafff556a7e43298f1ce34861ae9dec
msgid "Because ``django.utils.datastructures.SortedDict.copy`` doesn't return a deepcopy as ``SortedDictFromList.copy()`` did, you will need to update your code if you were relying on a deepcopy. Do this by using ``copy.deepcopy`` directly."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:731
# a6ab4228c4a14436892b20864250d989
msgid "Database backend functions"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:734
# c6c86e24199d445b916e786a52092b71
msgid "Database backend functions have been renamed"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:736
# 077c4634c1d94c6f94a5323ae2a73161
msgid "Almost *all* of the database backend-level functions have been renamed and/or relocated. None of these were documented, but you'll need to change your code if you're using any of these functions, all of which are in :mod:`django.db`:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:743
# 42de38c84eb14110a3f1920082f92948
msgid "``backend.get_autoinc_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:743
# df4ebf54c8de430bb53b617f3d4b0c14
msgid "``connection.ops.autoinc_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:744
# b0cfdbf5dd4e4d779207d46da2eb4c75
msgid "``backend.get_date_extract_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:744
# 82b7e3d260614210ba2d99605e599f7c
msgid "``connection.ops.date_extract_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:745
# 8d5e3ebbe74c4ee192a013146a04a50e
msgid "``backend.get_date_trunc_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:745
# d791abe040134727bc109bc07b188432
msgid "``connection.ops.date_trunc_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:746
# a499e9d437e1417284ee8ae39a2eadf0
msgid "``backend.get_datetime_cast_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:746
# 428ac2b41c2149129c307889474ec572
msgid "``connection.ops.datetime_cast_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:747
# c8966b9bd13046e2ae48cd2513bb9f72
msgid "``backend.get_deferrable_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:747
# 6f77c28ef4fe4bdd92d1d52e0c1ab191
msgid "``connection.ops.deferrable_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:748
# f3822a87cd4e425cbc9b17f9179bb6b9
msgid "``backend.get_drop_foreignkey_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:748
# 29124a0a2f984389b5c19d1c496758d3
msgid "``connection.ops.drop_foreignkey_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:749
# a17fae900f0a481e819f863fb16ccb03
msgid "``backend.get_fulltext_search_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:749
# 390fc13aaaac4a4fa8fe3bb59a62597e
msgid "``connection.ops.fulltext_search_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:750
# 151b8e0c9bbf4ce99883f45c5af3a658
msgid "``backend.get_last_insert_id``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:750
# ec4e68dcf0134fa28c1854246eaaf0b2
msgid "``connection.ops.last_insert_id``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:751
# a95b139ec1cf4d8e82ba056a62c6248f
msgid "``backend.get_limit_offset_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:751
# 81fc06974c584654bad0f2f76f10ec55
msgid "``connection.ops.limit_offset_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:752
# 8a36ef7bb1d74d4b9a2e7a166cdbac96
msgid "``backend.get_max_name_length``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:752
# 6f642a25ae834e9289766a934acca93c
msgid "``connection.ops.max_name_length``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:753
# 1031652c4e9d4c26a88caf2d62c99251
msgid "``backend.get_pk_default_value``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:753
# 2d6be0cb519441e89707cfc1e683f8d8
msgid "``connection.ops.pk_default_value``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:754
# b29136fee2e3450fbbcb89e2ee0007e9
msgid "``backend.get_random_function_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:754
# cab610d778ff4666ac3f626aff919c05
msgid "``connection.ops.random_function_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:755
# eb288bab1e5c49caa21d312231920fe0
msgid "``backend.get_sql_flush``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:755
# d1bcb9ecfd094b8ca6f249612fe97981
msgid "``connection.ops.sql_flush``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:756
# ad774c7c5ab5463c8ea137474c9a8447
msgid "``backend.get_sql_sequence_reset``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:756
# c41596e64ea340f89ff98d40cfe82839
msgid "``connection.ops.sequence_reset_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:757
# 4fe2f1092e574e0681248e1c79e1125f
msgid "``backend.get_start_transaction_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:757
# 64211c43100e445d80d74ab0b199e401
msgid "``connection.ops.start_transaction_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:758
# 4b59b650418f4c52b56436f0600b6505
msgid "``backend.get_tablespace_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:758
# e8f532d8274743ec8140463c60102342
msgid "``connection.ops.tablespace_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:759
# 0f02c69754154bf98b2969b2ecd08d6a
msgid "``backend.quote_name``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:759
# bbee07cb1c704f5087075b6577d5c2f4
msgid "``connection.ops.quote_name``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:760
# d5e2633a75af434e8f9bf5f5b04eeeb5
msgid "``backend.get_query_set_class``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:760
# b70edec46bda4729a1db55c7c6fc71f7
msgid "``connection.ops.query_set_class``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:761
# 7febaa25dd2146a7b7bf299e747727a7
msgid "``backend.get_field_cast_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:761
# 3de9986fd2824ccd92af61990b43c0cf
msgid "``connection.ops.field_cast_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:762
# d497a93bbc0a4244b1065cff9ee3d7bf
msgid "``backend.get_drop_sequence``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:762
# 4e91f1ec91534b8e9913ed91066bcf56
msgid "``connection.ops.drop_sequence_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:763
# bc3599fa73d642cbbc305823d08f1956
msgid "``backend.OPERATOR_MAPPING``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:763
# de1ea9e3c6f743b396dad2165c9572dc
msgid "``connection.operators``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:764
# 8a9a858e7a5f44d6955099ca7f0b62c3
msgid "``backend.allows_group_by_ordinal``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:764
# 44715aaf73314504bc54e02a64be218b
msgid "``connection.features.allows_group_by_ordinal``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:765
# eb7a2c9acd9f4e8bbc3bfd8b68782252
msgid "``backend.allows_unique_and_pk``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:765
# 6959f5d80efc421a987441ed6f118094
msgid "``connection.features.allows_unique_and_pk``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:766
# 6ec1f497dd1c47ffa28a08b959dd9707
msgid "``backend.autoindexes_primary_keys``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:766
# 02c7057660e44449a6d1a00c394feb7f
msgid "``connection.features.autoindexes_primary_keys``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:767
# 4ba0a0217b5d4b7aade72c56b0c1e52e
msgid "``backend.needs_datetime_string_cast``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:767
# 6090ede7b6c8488c974aed736eba055f
msgid "``connection.features.needs_datetime_string_cast``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:768
# bbefc1ec858e4bff8d94909b0f1a6744
msgid "``backend.needs_upper_for_iops``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:768
# adf5734c01814477aa5c9c2ed5e76ae6
msgid "``connection.features.needs_upper_for_iops``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:769
# 27215bce838a47afa6576a395f92f4c6
msgid "``backend.supports_constraints``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:769
# 5cb9ea694def499b8f7fe09b017c65ff
msgid "``connection.features.supports_constraints``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:770
# 2722550ad0b84b49b3cddedf5a4e3d1a
msgid "``backend.supports_tablespaces``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:770
# a9495e8ce3f24d0b8479ab8f23c11367
msgid "``connection.features.supports_tablespaces``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:771
# 487fa682aaff46f2b7b21ae607cf3ce1
msgid "``backend.uses_case_insensitive_names``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:771
# e867b41a90414e6cbbd024e139f2b2b9
msgid "``connection.features.uses_case_insensitive_names``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:772
# 493b15bbd7e54ae1a9a794d865d2d638
msgid "``backend.uses_custom_queryset``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:772
# 4132b475675c447480197a67977b442d
msgid "``connection.features.uses_custom_queryset``"
msgstr ""

#: ../../releases/1.0.1.txt:3
# 8b421a9d8f4c495f99c0606d729192f0
msgid "Django 1.0.1 release notes"
msgstr ""

#: ../../releases/1.0.1.txt:5
# 33702fdb3f7241308ab27a3ace6cb51f
msgid "Welcome to Django 1.0.1!"
msgstr ""

#: ../../releases/1.0.1.txt:7
# 175bd5b0c54d459298ed926c9651e1ef
msgid "This is the first \"bugfix\" release in the Django 1.0 series, improving the stability and performance of the Django 1.0 codebase. As such, Django 1.0.1 contains no new features (and, pursuant to :doc:`our compatibility policy </misc/api-stability/>`, maintains backwards compatibility with Django 1.0), but does contain a number of fixes and other improvements. Django 1.0.1 is a recommended upgrade for any development or deployment currently using or targeting Django 1.0."
msgstr ""

#: ../../releases/1.0.1.txt:17
# d446dc48e474434ea222760164b47806
msgid "Fixes and improvements in Django 1.0.1"
msgstr ""

#: ../../releases/1.0.1.txt:19
# 4addec480f2d45d2aaf4e4330abe4e25
msgid "Django 1.0.1 contains over two hundred fixes to the original Django 1.0 codebase; full details of every fix are available in `the history of the 1.0.X branch`_, but here are some of the highlights:"
msgstr ""

#: ../../releases/1.0.1.txt:24
# 104e3aea0e084c5ebba403acff3d5ed0
msgid "Several fixes in ``django.contrib.comments``, pertaining to RSS feeds of comments, default ordering of comments and the XHTML and internationalization of the default templates for comments."
msgstr ""

#: ../../releases/1.0.1.txt:28
# 98652ad894594ddcafd33124b47940b2
msgid "Multiple fixes for Django's support of Oracle databases, including pagination support for GIS QuerySets, more efficient slicing of results and improved introspection of existing databases."
msgstr ""

#: ../../releases/1.0.1.txt:32
# f7127a25ee694d7b8702da893ea13655
msgid "Several fixes for query support in the Django object-relational mapper, including repeated setting and resetting of ordering and fixes for working with ``INSERT``-only queries."
msgstr ""

#: ../../releases/1.0.1.txt:36
# 3c78e019e42c46e180728815f4045909
msgid "Multiple fixes for inline forms in formsets."
msgstr ""

#: ../../releases/1.0.1.txt:38
# 2aefcf2161e8426abda65f80b7d90bba
msgid "Multiple fixes for ``unique`` and ``unique_together`` model constraints in automatically-generated forms."
msgstr ""

#: ../../releases/1.0.1.txt:41
# 200c49c0c65e41eab2d1685e4454583f
msgid "Fixed support for custom callable ``upload_to`` declarations when handling file uploads through automatically-generated forms."
msgstr ""

#: ../../releases/1.0.1.txt:44
# 8a25b89449544cbfb28972528464e2f3
msgid "Fixed support for sorting an admin change list based on a callable attributes in ``list_display``."
msgstr ""

#: ../../releases/1.0.1.txt:47
# 07edfa89d4764d029136995ed604cfc3
msgid "A fix to the application of autoescaping for literal strings passed to the ``join`` template filter. Previously, literal strings passed to ``join`` were automatically escaped, contrary to :ref:`the documented behavior for autoescaping and literal strings <string-literals-and-automatic-escaping>`. Literal strings passed to ``join`` are no longer automatically escaped, meaning you must now manually escape them; this is an incompatibility if you were relying on this bug, but not if you were relying on escaping behaving as documented."
msgstr ""

#: ../../releases/1.0.1.txt:57
# a8e0436fa1254926a97cfc6eba579264
msgid "Improved and expanded translation files for many of the languages Django supports by default."
msgstr ""

#: ../../releases/1.0.1.txt:60
# 42d0af19203842829e56376ca07fc81b
msgid "And as always, a large number of improvements to Django's documentation, including both corrections to existing documents and expanded and new documentation."
msgstr ""

#: ../../releases/1.0.2.txt:3
# 1376316882f94267aeebbe2d725326ff
msgid "Django 1.0.2 release notes"
msgstr ""

#: ../../releases/1.0.2.txt:5
# 3f24a925c1a447a7900ed0cb92200e84
msgid "Welcome to Django 1.0.2!"
msgstr ""

#: ../../releases/1.0.2.txt:7
# 0d6d1dd6681c4c79a93f156dedd8b42a
msgid "This is the second \"bugfix\" release in the Django 1.0 series, improving the stability and performance of the Django 1.0 codebase. As such, Django 1.0.2 contains no new features (and, pursuant to :doc:`our compatibility policy </misc/api-stability>`, maintains backwards compatibility with Django 1.0.0), but does contain a number of fixes and other improvements. Django 1.0.2 is a recommended upgrade for any development or deployment currently using or targeting Django 1.0."
msgstr ""

#: ../../releases/1.0.2.txt:17
# 55be297c7c7246c7891f1ac0d1672d97
msgid "Fixes and improvements in Django 1.0.2"
msgstr ""

#: ../../releases/1.0.2.txt:19
# 0fa659cc30d24804a77f279bbd0496c5
msgid "The primary reason behind this release is to remedy an issue in the recently-released Django 1.0.1; the packaging scripts used for Django 1.0.1 omitted some directories from the final release package, including one directory required by ``django.contrib.gis`` and part of Django's unit-test suite."
msgstr ""

#: ../../releases/1.0.2.txt:25
# 31ae0cf4634547219f13427f288b781a
msgid "Django 1.0.2 contains updated packaging scripts, and the release package contains the directories omitted from Django 1.0.1. As such, this release contains all of the fixes and improvements from Django 1.0.1; see :doc:`the Django 1.0.1 release notes </releases/1.0.1>` for details."
msgstr ""

#: ../../releases/1.0.2.txt:31
# 6766fd1b95574490a72d711f7f5e2b7e
msgid "Additionally, in the period since Django 1.0.1 was released:"
msgstr ""

#: ../../releases/1.0.2.txt:33
# b95f7d7a9c624fbea73b981fe6e7e58e
msgid "Updated Hebrew and Danish translations have been added."
msgstr ""

#: ../../releases/1.0.2.txt:35
# 26d084a526ca4ab08e5f4b6b008b204e
msgid "The default ``__repr__`` method of Django models has been made more robust in the face of bad Unicode data coming from the ``__unicode__`` method; rather than raise an exception in such cases, ``repr()`` will now contain the string \"[Bad Unicode data]\" in place of the invalid Unicode."
msgstr ""

#: ../../releases/1.0.2.txt:41
# b3afa8063a2e470e9e1824a001c77605
msgid "A bug involving the interaction of Django's ``SafeUnicode`` class and the MySQL adapter has been resolved; ``SafeUnicode`` instances (generated, for example, by template rendering) can now be assigned to model attributes and saved to MySQL without requiring an explicit intermediate cast to ``unicode``."
msgstr ""

#: ../../releases/1.0.2.txt:47
# a41c16f8cea64c989afd4e704931be09
msgid "A bug affecting filtering on a nullable ``DateField`` in SQLite has been resolved."
msgstr ""

#: ../../releases/1.0.2.txt:50
# d0597de9437048d0890c0bc425fc7666
msgid "Several updates and improvements have been made to Django's documentation."
msgstr ""

#: ../../releases/1.1.txt:3
# c5babca20b9847558a1864830c47ac43
msgid "Django 1.1 release notes"
msgstr ""

#: ../../releases/1.1.txt:6
# 7f346ab6632340a385566a67b0a6a5c9
msgid "July 29, 2009"
msgstr ""

#: ../../releases/1.1.txt:8
# 9871e2bc7e534a4dbbefb0879219a724
msgid "Welcome to Django 1.1!"
msgstr ""

#: ../../releases/1.1.txt:10
# aefac6c373a849c68ee5e7edaf2e5d14
msgid "Django 1.1 includes a number of nifty `new features`_, lots of bug fixes, and an easy upgrade path from Django 1.0."
msgstr ""

#: ../../releases/1.1.txt:18
# 657c39a23a0d4053a84755c511d41d3d
msgid "Backwards-incompatible changes in 1.1"
msgstr ""

#: ../../releases/1.1.txt:20
# dcd855493ab24c9299403c4f683bd06c
msgid "Django has a policy of :doc:`API stability </misc/api-stability>`. This means that, in general, code you develop against Django 1.0 should continue to work against 1.1 unchanged. However, we do sometimes make backwards-incompatible changes if they're necessary to resolve bugs, and there are a handful of such (minor) changes between Django 1.0 and Django 1.1."
msgstr ""

#: ../../releases/1.1.txt:26
# ff88a50921814581b8a4c979fe05843e
msgid "Before upgrading to Django 1.1 you should double-check that the following changes don't impact you, and upgrade your code if they do."
msgstr ""

#: ../../releases/1.1.txt:30
# 8bd63febd0d8404680f5299f8743896b
msgid "Changes to constraint names"
msgstr ""

#: ../../releases/1.1.txt:32
# c995bdc2318f4f9e9706985798b82528
msgid "Django 1.1 modifies the method used to generate database constraint names so that names are consistent regardless of machine word size. This change is backwards incompatible for some users."
msgstr ""

#: ../../releases/1.1.txt:36
# 01321da3ce794322b8d4bd933db10424
msgid "If you are using a 32-bit platform, you're off the hook; you'll observe no differences as a result of this change."
msgstr ""

#: ../../releases/1.1.txt:39
# 48757d22f3cb47fd8fa1ca7b585abf74
msgid "However, **users on 64-bit platforms may experience some problems** using the ``reset`` management command. Prior to this change, 64-bit platforms would generate a 64-bit, 16 character digest in the constraint name; for example::"
msgstr ""

#: ../../releases/1.1.txt:46
# 1691aaaa00324af4b7b449e51f1e1671
msgid "Following this change, all platforms, regardless of word size, will generate a 32-bit, 8 character digest in the constraint name; for example::"
msgstr ""

#: ../../releases/1.1.txt:51
# 3b2cab97a4094338996919ad26296362
msgid "As a result of this change, you will not be able to use the ``reset`` management command on any table made by a 64-bit machine. This is because the the new generated name will not match the historically generated name; as a result, the SQL constructed by the reset command will be invalid."
msgstr ""

#: ../../releases/1.1.txt:56
# 21c2229f9b664a029f7b04b4efc4fe62
msgid "If you need to reset an application that was created with 64-bit constraints, you will need to manually drop the old constraint prior to invoking ``reset``."
msgstr ""

#: ../../releases/1.1.txt:61
# 9f423413b99e486ab5e085b5ddb91d5c
msgid "Test cases are now run in a transaction"
msgstr ""

#: ../../releases/1.1.txt:63
# 220e556b023740b3b2f27e3b36dbf532
msgid "Django 1.1 runs tests inside a transaction, allowing better test performance (see `test performance improvements`_ for details)."
msgstr ""

#: ../../releases/1.1.txt:66
# 4915e31b50ba462293741d67b5fd251e
msgid "This change is slightly backwards incompatible if existing tests need to test transactional behavior, if they rely on invalid assumptions about the test environment, or if they require a specific test case ordering."
msgstr ""

#: ../../releases/1.1.txt:70
# 508fa56958434bc7a43544bf73f0b867
msgid "For these cases, :class:`~django.test.TransactionTestCase` can be used instead. This is a just a quick fix to get around test case errors revealed by the new rollback approach; in the long-term tests should be rewritten to correct the test case."
msgstr ""

#: ../../releases/1.1.txt:78
# 188003af5d6e470985e59e11388f3081
msgid "Removed ``SetRemoteAddrFromForwardedFor`` middleware"
msgstr ""

#: ../../releases/1.1.txt:80
# c44a5a7b13b542acab0855acc831ba0a
msgid "For convenience, Django 1.0 included an optional middleware class -- ``django.middleware.http.SetRemoteAddrFromForwardedFor`` -- which updated the value of ``REMOTE_ADDR`` based on the HTTP ``X-Forwarded-For`` header commonly set by some proxy configurations."
msgstr ""

#: ../../releases/1.1.txt:85
# f27b3d1691fd491ea3c492058f49c9ce
msgid "It has been demonstrated that this mechanism cannot be made reliable enough for general-purpose use, and that (despite documentation to the contrary) its inclusion in Django may lead application developers to assume that the value of ``REMOTE_ADDR`` is \"safe\" or in some way reliable as a source of authentication."
msgstr ""

#: ../../releases/1.1.txt:90
# 644c1911be9c48c19e3e5c963c82ed9a
msgid "While not directly a security issue, we've decided to remove this middleware with the Django 1.1 release. It has been replaced with a class that does nothing other than raise a ``DeprecationWarning``."
msgstr ""

#: ../../releases/1.1.txt:94
# 0687f7ad291b4431a1c14c3961b54bec
msgid "If you've been relying on this middleware, the easiest upgrade path is:"
msgstr ""

#: ../../releases/1.1.txt:96
# e8f4af8e2c4841ed9a33068881228608
msgid "Examine `the code as it existed before it was removed`__."
msgstr ""

#: ../../releases/1.1.txt:98
# dfe1e25e4a624cd985d219745cfccb08
msgid "Verify that it works correctly with your upstream proxy, modifying it to support your particular proxy (if necessary)."
msgstr ""

#: ../../releases/1.1.txt:101
# 3e090744a57f414a86a9bede1582a69a
msgid "Introduce your modified version of ``SetRemoteAddrFromForwardedFor`` as a piece of middleware in your own project."
msgstr ""

#: ../../releases/1.1.txt:107
# 72765d17ab9e4982a7fab3eb339ba64f
msgid "Names of uploaded files are available later"
msgstr ""

#: ../../releases/1.1.txt:111
# fab4955c032947bf8f515fcc148147b6
msgid "In Django 1.0, files uploaded and stored in a model's :class:`FileField` were saved to disk before the model was saved to the database. This meant that the actual file name assigned to the file was available before saving. For example, it was available in a model's pre-save signal handler."
msgstr ""

#: ../../releases/1.1.txt:116
# f3cd9b511e5540f3bfb56454434d5e19
msgid "In Django 1.1 the file is saved as part of saving the model in the database, so the actual file name used on disk cannot be relied on until *after* the model has been saved."
msgstr ""

#: ../../releases/1.1.txt:121
# f26a3a5855ed4a2ebeca52a9b76236dc
msgid "Changes to how model formsets are saved"
msgstr ""

#: ../../releases/1.1.txt:123
# ffe36940326443578d23894dfb46ebfd
msgid "In Django 1.1, :class:`~django.forms.models.BaseModelFormSet` now calls ``ModelForm.save()``."
msgstr ""

#: ../../releases/1.1.txt:126
# 0974ee2424af4798ac9735ed28b300ac
msgid "This is backwards-incompatible if you were modifying ``self.initial`` in a model formset's ``__init__``, or if you relied on the internal ``_total_form_count`` or ``_initial_form_count`` attributes of BaseFormSet. Those attributes are now public methods."
msgstr ""

#: ../../releases/1.1.txt:132
# 0bc50eae49ca40dbb84460e26714c2a3
msgid "Fixed the ``join`` filter's escaping behavior"
msgstr ""

#: ../../releases/1.1.txt:134
# 5dbe12f0eb634639bacb9ebb7902e7e9
msgid "The :tfilter:`join` filter no longer escapes the literal value that is passed in for the connector."
msgstr ""

#: ../../releases/1.1.txt:137
# 28dd81f5c0b04ef5a6b24b17a21741cc
msgid "This is backwards incompatible for the special situation of the literal string containing one of the five special HTML characters. Thus, if you were writing ``{{ foo|join:\"&\" }}``, you now have to write ``{{ foo|join:\"&amp;\" }}``."
msgstr ""

#: ../../releases/1.1.txt:141
# a8cbc199fea64e9e8522608929769085
msgid "The previous behavior was a bug and contrary to what was documented and expected."
msgstr ""

#: ../../releases/1.1.txt:145
# dd43f4b3d9be44aba07b9948ab7b493a
msgid "Permanent redirects and the ``redirect_to()`` generic view"
msgstr ""

#: ../../releases/1.1.txt:147
# fe0622310b3f4652b9bd7db50bfab8ab
msgid "Django 1.1 adds a ``permanent`` argument to the ``django.views.generic.simple.redirect_to()`` view. This is technically backwards-incompatible if you were using the ``redirect_to`` view with a format-string key called 'permanent', which is highly unlikely."
msgstr ""

#: ../../releases/1.1.txt:155
# ea98de25fdc4414cb57b22ec1c89b8ab
msgid "Features deprecated in 1.1"
msgstr ""

#: ../../releases/1.1.txt:157
# 5e4633f128c548d6991947cd23ab96f2
msgid "One feature has been marked as deprecated in Django 1.1:"
msgstr ""

#: ../../releases/1.1.txt:159
# 38ba3b87d81f422c990766a6a0cfc751
msgid "You should no longer use ``AdminSite.root()`` to register that admin views. That is, if your URLconf contains the line::"
msgstr ""

#: ../../releases/1.1.txt:164
# 4215e9c08c044e74b48e63de76464dbb
msgid "You should change it to read::"
msgstr ""

#: ../../releases/1.1.txt:168
# ee9a159a6ab54700b21c1aef373c61ba
msgid "You should begin to remove use of this feature from your code immediately."
msgstr ""

#: ../../releases/1.1.txt:170
# 3473588a0edf4a7f8ccd64dbc4a486e8
msgid "``AdminSite.root`` will raise a ``PendingDeprecationWarning`` if used in Django 1.1. This warning is hidden by default. In Django 1.2, this warning will be upgraded to a ``DeprecationWarning``, which will be displayed loudly. Django 1.3 will remove ``AdminSite.root()`` entirely."
msgstr ""

#: ../../releases/1.1.txt:175
# 7d68258dc8c84de3b73fe768cf37566a
msgid "For more details on our deprecation policies and strategy, see :doc:`/internals/release-process`."
msgstr ""

#: ../../releases/1.1.txt:179
# 61480715442a4e83b066927b5079dfee
msgid "What's new in Django 1.1"
msgstr ""

#: ../../releases/1.1.txt:181
# 314525d8f9cc402685880f1bebd3f2b0
msgid "Quite a bit: since Django 1.0, we've made 1,290 code commits, fixed 1,206 bugs, and added roughly 10,000 lines of documentation."
msgstr ""

#: ../../releases/1.1.txt:184
# 2f6205b82fbc4507b2367a532aee9154
msgid "The major new features in Django 1.1 are:"
msgstr ""

#: ../../releases/1.1.txt:187
#: ../../releases/1.1-alpha-1.txt:22
# da15a00137874d709043ade5d504f0dc
# 0747306d187e4b18ba6ec5eccf91c5c4
msgid "ORM improvements"
msgstr ""

#: ../../releases/1.1.txt:191
# 67f64f6415f741b8989ffb5c949fdb38
msgid "Two major enhancements have been added to Django's object-relational mapper (ORM): aggregate support, and query expressions."
msgstr ""

#: ../../releases/1.1.txt:195
#: ../../releases/1.1-alpha-1.txt:28
# e7af426306154fb6ab2aa23b4af9360c
# 69ac2adefb9e44b3a4d3663bd90f8722
msgid "Aggregate support"
msgstr ""

#: ../../releases/1.1.txt:197
#: ../../releases/1.1-alpha-1.txt:32
# 1e931dd78ded4f76989bed70f61fb6e3
# ca71942895dd455fac89d2968fd40b0c
msgid "It's now possible to run SQL aggregate queries (i.e. ``COUNT()``, ``MAX()``, ``MIN()``, etc.) from within Django's ORM. You can choose to either return the results of the aggregate directly, or else annotate the objects in a :class:`~django.db.models.query.QuerySet` with the results of the aggregate query."
msgstr ""

#: ../../releases/1.1.txt:203
#: ../../releases/1.1-alpha-1.txt:38
# 9a81fac9d4e948e1a48223da133358ff
# 726c7947e454420b843b83a702cae62b
msgid "This feature is available as new :meth:`~django.db.models.query.QuerySet.aggregate` and :meth:`~django.db.models.query.QuerySet.annotate` methods, and is covered in detail in :doc:`the ORM aggregation documentation </topics/db/aggregation>`."
msgstr ""

#: ../../releases/1.1.txt:209
#: ../../releases/1.1-alpha-1.txt:44
# f50506197ff24adda3ccb3dff0caf49e
# 1088e99f966540649352b7f960be9f55
msgid "Query expressions"
msgstr ""

#: ../../releases/1.1.txt:211
# 6ba8adeb52d14deeab5874b26e9567a1
msgid "Queries can now refer to a another field on the query and can traverse relationships to refer to fields on related models. This is implemented in the new :class:`~django.db.models.F` object; for full details, including examples, consult the :ref:`documentation for F expressions <query-expressions>`."
msgstr ""

#: ../../releases/1.1.txt:217
#: ../../releases/1.1-beta-1.txt:27
# 20eeafd9b4044c86b6838f5518c315ac
# 9ade77c476eb49938b4b6f82da704499
msgid "Model improvements"
msgstr ""

#: ../../releases/1.1.txt:219
#: ../../releases/1.1-beta-1.txt:31
# 7e4c8399ec9f4622a222e107cbd06020
# d40e46d209294a3cabf8a8c1dabf9cc3
msgid "A number of features have been added to Django's model layer:"
msgstr ""

#: ../../releases/1.1.txt:222
#: ../../releases/1.1-beta-1.txt:34
# c041f5369a30430fbcc101525aec7642
# 623df3ace64a428a88b338248f33d1f8
msgid "\"Unmanaged\" models"
msgstr ""

#: ../../releases/1.1.txt:224
# cf41a98af1434c86871cbdff243b64bf
msgid "You can now control whether or not Django manages the life-cycle of the database tables for a model using the :attr:`~Options.managed` model option. This defaults to ``True``, meaning that Django will create the appropriate database tables in :djadmin:`syncdb` and remove them as part of the ``reset`` command. That is, Django *manages* the database table's lifecycle."
msgstr ""

#: ../../releases/1.1.txt:230
#: ../../releases/1.1-beta-1.txt:42
# ef65a082b45c45e1835421d8e98854e5
# be3101b574064d3ebb4ad4af453a6de7
msgid "If you set this to ``False``, however, no database table creating or deletion will be automatically performed for this model. This is useful if the model represents an existing table or a database view that has been created by some other means."
msgstr ""

#: ../../releases/1.1.txt:235
#: ../../releases/1.1-beta-1.txt:47
# a6ea942f58784b6dbd248734f0bd0f36
# 8a279b887f4242cd811cf521c9c6a141
msgid "For more details, see the documentation for the :attr:`~Options.managed` option."
msgstr ""

#: ../../releases/1.1.txt:239
#: ../../releases/1.1-beta-1.txt:51
# eb52582b1f2e435b866dfc1becc7ec84
# e911ef8a27a049ccac2e0be47061eca1
msgid "Proxy models"
msgstr ""

#: ../../releases/1.1.txt:241
# d8f6764bfc40462d98132f11f9b176b9
msgid "You can now create :ref:`proxy models <proxy-models>`: subclasses of existing models that only add Python-level (rather than database-level) behavior and aren't represented by a new table. That is, the new model is a *proxy* for some underlying model, which stores all the real data."
msgstr ""

#: ../../releases/1.1.txt:246
#: ../../releases/1.1-beta-1.txt:58
# d769e518526945e5a5f02cbe2263157b
# 5adebeaf499949da95c73b1d9032ad61
msgid "All the details can be found in the :ref:`proxy models documentation <proxy-models>`. This feature is similar on the surface to unmanaged models, so the documentation has an explanation of :ref:`how proxy models differ from unmanaged models <proxy-vs-unmanaged-models>`."
msgstr ""

#: ../../releases/1.1.txt:252
#: ../../releases/1.1-beta-1.txt:64
# 07ecff12ef4e4054a085e411113da6f3
# 8d881538d821442a94887c39b9c63ea2
msgid "Deferred fields"
msgstr ""

#: ../../releases/1.1.txt:254
#: ../../releases/1.1-beta-1.txt:66
# 6a4bd0d83f0b4dc69dc2ef8981e79414
# a2ed37a975e349fea2a5373382a27a7d
msgid "In some complex situations, your models might contain fields which could contain a lot of data (for example, large text fields), or require expensive processing to convert them to Python objects. If you know you don't need those particular fields, you can now tell Django not to retrieve them from the database."
msgstr ""

#: ../../releases/1.1.txt:260
#: ../../releases/1.1-beta-1.txt:72
# eb10bc73f3554181971496e162ab6174
# d4df6705becb4b95a5dc25931dd2c06c
msgid "You'll do this with the new queryset methods :meth:`~django.db.models.query.QuerySet.defer` and :meth:`~django.db.models.query.QuerySet.only`."
msgstr ""

#: ../../releases/1.1.txt:265
#: ../../releases/1.1-beta-1.txt:100
# b7060f2167f94064a7ed7dda001b3bd6
# d3f7fcee225e406c8cd8939f4cb5da7c
msgid "Testing improvements"
msgstr ""

#: ../../releases/1.1.txt:267
# 24a76758b04a45a4b557d18bb872098c
msgid "A few notable improvements have been made to the :doc:`testing framework </topics/testing/index>`."
msgstr ""

#: ../../releases/1.1.txt:271
# b412162720864d87a76c12b172ad4cd5
msgid "Test performance improvements"
msgstr ""

#: ../../releases/1.1.txt:275
#: ../../releases/1.1-alpha-1.txt:56
# 07f8451164614e358de74903d6490d9a
# c9baa2d6b8484872a7aad5e95f92b1e2
msgid "Tests written using Django's :doc:`testing framework </topics/testing/index>` now run dramatically faster (as much as 10 times faster in many cases)."
msgstr ""

#: ../../releases/1.1.txt:278
#: ../../releases/1.1-alpha-1.txt:59
# d74b678ee36a4aba9aa889545c50b779
# 76ead59d381243949dd5c6abf4f77dd7
msgid "This was accomplished through the introduction of transaction-based tests: when using :class:`django.test.TestCase`, your tests will now be run in a transaction which is rolled back when finished, instead of by flushing and re-populating the database. This results in an immense speedup for most types of unit tests. See the documentation for :class:`TestCase` and :class:`TransactionTestCase` for a full description, and some important notes on database support."
msgstr ""

#: ../../releases/1.1.txt:286
# ee57a0aa2da94de689eb920170e5f90a
msgid "Test client improvements"
msgstr ""

#: ../../releases/1.1.txt:290
# 4a7fa0023d1f4acda5f65bc8f3bcfe50
msgid "A couple of small -- but highly useful -- improvements have been made to the test client:"
msgstr ""

#: ../../releases/1.1.txt:293
#: ../../releases/1.1-beta-1.txt:107
# 6699fef5431c44039c0532bc9de65fbe
# 2b138e38107b4898bdc0981d4fb9e59b
msgid "The test :class:`Client` now can automatically follow redirects with the ``follow`` argument to :meth:`Client.get` and :meth:`Client.post`. This makes testing views that issue redirects simpler."
msgstr ""

#: ../../releases/1.1.txt:297
# 8d1f0c842f4c41c0975642a5e40f412d
msgid "It's now easier to get at the template context in the response returned the test client: you'll simply access the context as ``request.context[key]``. The old way, which treats ``request.context`` as a list of contexts, one for each rendered template in the inheritance chain, is still available if you need it."
msgstr ""

#: ../../releases/1.1.txt:304
#: ../../releases/1.1-beta-1.txt:77
# 22e944889fbb454b9cfa386853e219bc
# cad7f123ad244371a199a73a1e899001
msgid "New admin features"
msgstr ""

#: ../../releases/1.1.txt:306
# 11d980725f3e43afb8b1597d0825d26b
msgid "Django 1.1 adds a couple of nifty new features to Django's admin interface:"
msgstr ""

#: ../../releases/1.1.txt:309
#: ../../releases/1.1-beta-1.txt:83
# e22639a1081448bdb2ae9704be429fc5
# 871f7217c3dc4cdf9d27b71685c25cf1
msgid "Editable fields on the change list"
msgstr ""

#: ../../releases/1.1.txt:311
#: ../../releases/1.1-beta-1.txt:85
# 072ddbd5d04148ee8c7f37433efa8f48
# a1eed653d4264005b71f870fab7b74e4
msgid "You can now make fields editable on the admin list views via the new :ref:`list_editable <admin-list-editable>` admin option. These fields will show up as form widgets on the list pages, and can be edited and saved in bulk."
msgstr ""

#: ../../releases/1.1.txt:316
#: ../../releases/1.1-beta-1.txt:90
# 3d6630adf470456995868549a0105c8c
# 7a87390ca9cf44d2932f094e000daf95
msgid "Admin \"actions\""
msgstr ""

#: ../../releases/1.1.txt:318
#: ../../releases/1.1-beta-1.txt:92
# 160fed41c9b8439ebfebc14bed889447
# bd51e436b8f545438ffff84f4a20d46d
msgid "You can now define :doc:`admin actions </ref/contrib/admin/actions>` that can perform some action to a group of models in bulk. Users will be able to select objects on the change list page and then apply these bulk actions to all selected objects."
msgstr ""

#: ../../releases/1.1.txt:323
#: ../../releases/1.1-beta-1.txt:96
# d386c0a773ad4270b4d49b1705b4a72a
# 4cfe994b77964501a7eebed487c1789a
msgid "Django ships with one pre-defined admin action to delete a group of objects in one fell swoop."
msgstr ""

#: ../../releases/1.1.txt:327
#: ../../releases/1.1-beta-1.txt:118
# 593854244e1e46d8bda184c1635db2bb
# 70134ed57cee4773979b72bc790c54de
msgid "Conditional view processing"
msgstr ""

#: ../../releases/1.1.txt:329
#: ../../releases/1.1-beta-1.txt:120
# 03341dd5fe504c07b7f915a79c0eda21
# 5b69d82daf8e4fea953b58c9aeeb8ced
msgid "Django now has much better support for :doc:`conditional view processing </topics/conditional-view-processing>` using the standard ``ETag`` and ``Last-Modified`` HTTP headers. This means you can now easily short-circuit view processing by testing less-expensive conditions. For many views this can lead to a serious improvement in speed and reduction in bandwidth."
msgstr ""

#: ../../releases/1.1.txt:336
#: ../../releases/1.1-rc-1.txt:36
# 2c1467eb02404217b5f7c0c44f166a51
# 0dbe0cad08bb4b80a048cdc4d3fd93a7
msgid "URL namespaces"
msgstr ""

#: ../../releases/1.1.txt:338
# f1d8af3c4f1b43848c5c41e2afaff6a3
msgid "Django 1.1 improves :ref:`named URL patterns <naming-url-patterns>` with the introduction of URL \"namespaces.\""
msgstr ""

#: ../../releases/1.1.txt:341
# 1939c47974874f39811a194b55e7d2e5
msgid "In short, this feature allows the same group of URLs, from the same application, to be included in a Django URLConf multiple times, with varying (and potentially nested) named prefixes which will be used when performing reverse resolution. In other words, reusable applications like Django's admin interface may be registered multiple times without URL conflicts."
msgstr ""

#: ../../releases/1.1.txt:347
# f86f57f62a9e41b0aec643e495eac90f
msgid "For full details, see :ref:`the documentation on defining URL namespaces <topics-http-defining-url-namespaces>`."
msgstr ""

#: ../../releases/1.1.txt:351
#: ../../releases/1.2.txt:341
#: ../../releases/1.2.txt:1084
#: ../../releases/1.2.4.txt:76
#: ../../releases/1.3.txt:259
#: ../../releases/1.3.txt:806
#: ../../releases/1.5.txt:219
#: ../../releases/1.5-alpha-1.txt:222
#: ../../releases/1.5-beta-1.txt:220
# 992fcfe0ff2c46d2ba22d70ef2ab508b
# 922cd875c76b43fa9f2766cccc4162d3
# 7539a1d1078e49ac953f5edd5b671d8e
# 5ffe047f3d664d44a9f326fe66b76617
# 92c3d5842c084300b9b724c798309792
# caa3cb8c9e1140c3b4f67c959cc8ca43
# 5c727694d78440cba464212c6a478258
# dadcfda3c8d14c09819adda382f050d4
# 1db5df2c50734b8eaf7ffb5a35db7800
msgid "GeoDjango"
msgstr ""

#: ../../releases/1.1.txt:353
# 26039b70b5a64868aa599a70e484cd89
msgid "In Django 1.1, GeoDjango_ (i.e. ``django.contrib.gis``) has several new features:"
msgstr ""

#: ../../releases/1.1.txt:356
# 27bf46c9b19d4a5a91c7d8902ebf8e2d
msgid "Support for SpatiaLite_ -- a spatial database for SQLite -- as a spatial backend."
msgstr ""

#: ../../releases/1.1.txt:359
# 96c27152102143c5b0267438bad7c324
msgid "Geographic aggregates (``Collect``, ``Extent``, ``MakeLine``, ``Union``) and ``F`` expressions."
msgstr ""

#: ../../releases/1.1.txt:362
# d225f1ed358643829d2ae647fa85de8c
msgid "New ``GeoQuerySet`` methods: ``collect``, ``geojson``, and ``snap_to_grid``."
msgstr ""

#: ../../releases/1.1.txt:365
# 7cd418fc0b4d4e18945dcb8f4cab8e10
msgid "A new list interface methods for ``GEOSGeometry`` objects."
msgstr ""

#: ../../releases/1.1.txt:367
# a11c956d5d7448e5b8e92805b94afaca
msgid "For more details, see the `GeoDjango documentation`_."
msgstr ""

#: ../../releases/1.1.txt:374
#: ../../releases/1.1-alpha-1.txt:67
#: ../../releases/1.1-beta-1.txt:127
# 5e61da42fd9f4f1990f9556905d2c7cf
# 80ffc475d4aa475b9fc6e6b665ea6965
# 906baa42fd0c490c879341af881ed3ae
msgid "Other improvements"
msgstr ""

#: ../../releases/1.1.txt:376
#: ../../releases/1.1-alpha-1.txt:69
# 11406f88e7004a59bcd2c96a0e74fec1
# cc958d28431e41de83ec7e1b85ba9ab0
msgid "Other new features and changes introduced since Django 1.0 include:"
msgstr ""

#: ../../releases/1.1.txt:378
#: ../../releases/1.1-alpha-1.txt:71
# 2924091498794e359a7a1aa4f3c51a33
# 779b672eccfd4139bc5b933b9b2d2e12
msgid "The :doc:`CSRF protection middleware </ref/contrib/csrf>` has been split into two classes -- ``CsrfViewMiddleware`` checks incoming requests, and ``CsrfResponseMiddleware`` processes outgoing responses. The combined ``CsrfMiddleware`` class (which does both) remains for backwards-compatibility, but using the split classes is now recommended in order to allow fine-grained control of when and where the CSRF processing takes place."
msgstr ""

#: ../../releases/1.1.txt:386
#: ../../releases/1.1-alpha-1.txt:79
# 2b97db1ac9f44694ab82adbdd1269334
# 4543fe8e111a4d5182b279120d4dbe19
msgid ":func:`~django.core.urlresolvers.reverse` and code which uses it (e.g., the ``{% url %}`` template tag) now works with URLs in Django's administrative site, provided that the admin URLs are set up via ``include(admin.site.urls)`` (sending admin requests to the ``admin.site.root`` view still works, but URLs in the admin will not be \"reversible\" when configured this way)."
msgstr ""

#: ../../releases/1.1.txt:392
#: ../../releases/1.1-alpha-1.txt:85
# 7f5c11f87e85483cb2320f8f995fe366
# a8e76b60b42247168276b554fafcbe9d
msgid "The ``include()`` function in Django URLconf modules can now accept sequences of URL patterns (generated by ``patterns()``) in addition to module names."
msgstr ""

#: ../../releases/1.1.txt:395
#: ../../releases/1.1-alpha-1.txt:88
# 4d5d8392796d463e997ccf26bed25f42
# 1097a176f2ef4659a374e42bbbbe873b
msgid "Instances of Django forms (see :doc:`the forms overview </topics/forms/index>`) now have two additional methods, ``hidden_fields()`` and ``visible_fields()``, which return the list of hidden -- i.e., ``<input type=\"hidden\">`` -- and visible fields on the form, respectively."
msgstr ""

#: ../../releases/1.1.txt:400
#: ../../releases/1.1-alpha-1.txt:93
# 595819767bb3440c8ea38f3a8838edef
# 1e35f4a8c41d4962a9d7245fab1a6617
msgid "The ``redirect_to`` generic view now accepts an additional keyword argument ``permanent``. If ``permanent`` is ``True``, the view will emit an HTTP permanent redirect (status code 301). If ``False``, the view will emit an HTTP temporary redirect (status code 302)."
msgstr ""

#: ../../releases/1.1.txt:406
#: ../../releases/1.1-alpha-1.txt:99
# f30cc409bb2641338034f8f5e3d13213
# 5c2c8b9ad699454da278c6b3dfe90c19
msgid "A new database lookup type -- ``week_day`` -- has been added for ``DateField`` and ``DateTimeField``. This type of lookup accepts a number between 1 (Sunday) and 7 (Saturday), and returns objects where the field value matches that day of the week. See :ref:`the full list of lookup types <field-lookups>` for details."
msgstr ""

#: ../../releases/1.1.txt:412
#: ../../releases/1.1-alpha-1.txt:105
# eed83f74ec96494ea37fce217721cdc4
# 2223e6936c4b4fcca3d3551c09d10760
msgid "The ``{% for %}`` tag in Django's template language now accepts an optional ``{% empty %}`` clause, to be displayed when ``{% for %}`` is asked to loop over an empty sequence. See :doc:`the list of built-in template tags </ref/templates/builtins>` for examples of this."
msgstr ""

#: ../../releases/1.1.txt:417
#: ../../releases/1.1-beta-1.txt:132
# b28eb259f86b42eea9df37a46a1f4197
# 4e55abb3ad1f407f8e88416e942c4530
msgid "The :djadmin:`dumpdata` management command now accepts individual model names as arguments, allowing you to export the data just from particular models."
msgstr ""

#: ../../releases/1.1.txt:421
#: ../../releases/1.1-beta-1.txt:136
# 18136eea9a4843b9af888418ef4450c2
# 3270401d277b42f4bcfb9cb6f79baadf
msgid "There's a new :tfilter:`safeseq` template filter which works just like :tfilter:`safe` for lists, marking each item in the list as safe."
msgstr ""

#: ../../releases/1.1.txt:424
#: ../../releases/1.1-beta-1.txt:139
# bc2f76fb9bd24c17bd5374f9a65c8d64
# e566010ed03d4e1bb40df6bf31cd9454
msgid ":doc:`Cache backends </topics/cache>` now support ``incr()`` and ``decr()`` commands to increment and decrement the value of a cache key. On cache backends that support atomic increment/decrement -- most notably, the memcached backend -- these operations will be atomic, and quite fast."
msgstr ""

#: ../../releases/1.1.txt:430
#: ../../releases/1.1-beta-1.txt:145
# 0f654a16d8794a0883bc3edda7228b37
# 88ef03e709094e26aa34c5811c680b7e
msgid "Django now can :doc:`easily delegate authentication to the Web server </howto/auth-remote-user>` via a new authentication backend that supports the standard ``REMOTE_USER`` environment variable used for this purpose."
msgstr ""

#: ../../releases/1.1.txt:434
#: ../../releases/1.1-beta-1.txt:149
# ab7e5b2263164493a53e25f4bef0f95b
# 5e10eef6ba8447aaaf99b00e9f36ee2d
msgid "There's a new :func:`django.shortcuts.redirect` function that makes it easier to issue redirects given an object, a view name, or a URL."
msgstr ""

#: ../../releases/1.1.txt:437
#: ../../releases/1.1-beta-1.txt:152
# 6327e27eab654e9cb64cb82aad33a6fc
# 2f289da0ebd6425390c1ea2a261b47da
msgid "The ``postgresql_psycopg2`` backend now supports :ref:`native PostgreSQL autocommit <postgresql-notes>`. This is an advanced, PostgreSQL-specific feature, that can make certain read-heavy applications a good deal faster."
msgstr ""

#: ../../releases/1.1.txt:443
# c917e8d0048b43e7bb5c957ebebd4ceb
msgid "What's next?"
msgstr ""

#: ../../releases/1.1.txt:445
# 785e59afaa054e8591cb495cb5147b23
msgid "We'll take a short break, and then work on Django 1.2 will begin -- no rest for the weary! If you'd like to help, discussion of Django development, including progress toward the 1.2 release, takes place daily on the django-developers mailing list:"
msgstr ""

#: ../../releases/1.1.txt:452
# 3e8a3bd796884acf8094c335d0953683
msgid "... and in the ``#django-dev`` IRC channel on ``irc.freenode.net``. Feel free to join the discussions!"
msgstr ""

#: ../../releases/1.1.txt:458
#: ../../releases/1.1-alpha-1.txt:156
#: ../../releases/1.1-beta-1.txt:199
#: ../../releases/1.1-rc-1.txt:105
#: ../../releases/1.2-alpha-1.txt:579
#: ../../releases/1.2-beta-1.txt:164
#: ../../releases/1.2-rc-1.txt:97
#: ../../releases/1.3-alpha-1.txt:388
#: ../../releases/1.3-beta-1.txt:228
#: ../../releases/1.4-alpha-1.txt:1117
#: ../../releases/1.4-beta-1.txt:1189
# e6414f734dda46dc926863d8db858ace
# 80441111e63b4ef286d3ec62f9abeeb5
# 5c67ef3c84cf4fa3920bf22411ac8930
# 44eb0e03d41a4878867631dc9d45d684
# d522be436f154fdaa7f1f31377cda502
# 4bcf9099dc214d84b665f4976032a2ae
# 3b5e79e348374c31b8e1ccdcb380f082
# 7f63a789c8934d93a914c846a2550351
# 3297dcf88dfd45bdbc49f2602a9f57a1
# 11b8ebd2b68e4637b1fae6a6427db8cc
# c2d53fef352643769cd3b94d36699378
msgid ":doc:`How to contribute to Django </internals/contributing/index>`"
msgstr ""

#: ../../releases/1.1.txt:464
# 3959c7d834e842d19ef401e9bf72211d
msgid "And that's the way it is."
msgstr ""

#: ../../releases/1.1-alpha-1.txt:3
# 438a9c01dc3d48ec8c70b3ceecdf80ac
msgid "Django 1.1 alpha 1 release notes"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:5
# 79487bab415347f88f7a560f9abe61e1
msgid "February 23, 2009"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:7
# 885b384835904b79b2fa02cab2211643
msgid "Welcome to Django 1.1 alpha 1!"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:9
# 599359fa1ff14308bb662bec77b1ae98
msgid "This is the first in a series of preview/development releases leading up to the eventual release of Django 1.1, currently scheduled to take place in April 2009. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.1 release."
msgstr ""

#: ../../releases/1.1-alpha-1.txt:19
# 3a80b9870752457caa9260a5b5af0d3a
msgid "What's new in Django 1.1 alpha 1"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:24
# eb62a1bb334a47f397ee66ec065a60fe
msgid "Two major enhancements have been added to Django's object-relational mapper (ORM):"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:46
# 01eddc7eaf6448189b71c77bc02eac14
msgid "Queries can now refer to a another field on the query and can traverse relationships to refer to fields on related models. This is implemented in the new :class:`F` object; for full details, including examples, consult the :ref:`documentation for F expressions <query-expressions>`."
msgstr ""

#: ../../releases/1.1-alpha-1.txt:52
# 41d965bb8fab41dda93c8c15d5c93467
msgid "Performance improvements"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:111
#: ../../releases/1.1-beta-1.txt:158
#: ../../releases/1.1-rc-1.txt:64
# 29e27bf9a27c479fa673f837d3f58010
# b03ddf7d7fd14f7180b67f61d1438545
# fa67ec3384614430a0c1aced1a070741
msgid "The Django 1.1 roadmap"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:113
# 8c7c39a443094211bac183f656822451
msgid "Before Django 1.1 goes final, several other preview/development releases will be made available. The current schedule consists of at least the following:"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:116
# d9b6c68ff60a42d7b6f2dad32ceff43f
msgid "Week of *March 20, 2009:* Django 1.1 beta 1, at which point Django 1.1 will be in \"feature freeze\": no new features will be implemented for 1.1 past that point, and all new feature work will be deferred to Django 1.2."
msgstr ""

#: ../../releases/1.1-alpha-1.txt:121
#: ../../releases/1.1-beta-1.txt:164
# 87e1e9d3e9f749f5bdcffab97047f07d
# fa923e65549d4f7b91fad2b64673b00f
msgid "Week of *April 2, 2009:* Django 1.1 release candidate. At this point all strings marked for translation must freeze to allow translations to be submitted in advance of the final release."
msgstr ""

#: ../../releases/1.1-alpha-1.txt:125
#: ../../releases/1.1-beta-1.txt:168
# bbb858446b9347ed949ad70a27b71154
# 54996ef38e5641e298a0401bdbbd39fb
msgid "Week of *April 13, 2009:* Django 1.1 final."
msgstr ""

#: ../../releases/1.1-alpha-1.txt:127
# 49d5a674f0a0424697277dc8bb8ffa09
msgid "If deemed necessary, additional alpha, beta or release candidate packages will be issued prior to the final 1.1 release."
msgstr ""

#: ../../releases/1.1-alpha-1.txt:133
# c96ea2138e0e41b78cadec670a520b0a
msgid "In order to provide a high-quality 1.1 release, we need your help. Although this alpha release is, again, *not* intended for production use, you can help the Django team by trying out the alpha codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:144
#: ../../releases/1.1-beta-1.txt:187
#: ../../releases/1.1-rc-1.txt:92
# af80a569442e4db4ae8b4d6d32d37c2a
# bf3db95763bf4bb3a3e0de916781e26c
# 417a8d05af50460da90d5676d78c4855
msgid "Additionally, discussion of Django development, including progress toward the 1.1 release, takes place daily on the django-developers mailing list:"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:149
#: ../../releases/1.1-beta-1.txt:192
#: ../../releases/1.1-rc-1.txt:98
#: ../../releases/1.2-alpha-1.txt:572
#: ../../releases/1.2-beta-1.txt:157
#: ../../releases/1.2-rc-1.txt:90
#: ../../releases/1.3-alpha-1.txt:381
#: ../../releases/1.3-beta-1.txt:221
#: ../../releases/1.4-alpha-1.txt:1110
#: ../../releases/1.4-beta-1.txt:1182
# 7246d05473f24260acb0b706124a4807
# f983c8be89f249f48973e341beaad467
# 37a76fdf325b48e79ee85b15ac45c725
# 659a3cdeba6640aba4f3209cc289697f
# 61615dd688704909a2c88388c59f3ebe
# bffcc3118b2c44c887b4bdfd45928980
# 975fb89c7bce494aa64091d0794727c4
# cc17cd1c2d0b40debcd6a8b94ecde996
# abc48f86207c47c7a31d5330157269d0
# a521f0ac98e544aaadf9631c5b927f5a
msgid "... and in the ``#django-dev`` IRC channel on ``irc.freenode.net``. If you're interested in helping out with Django's development, feel free to join the discussions there."
msgstr ""

#: ../../releases/1.1-alpha-1.txt:162
#: ../../releases/1.1-beta-1.txt:205
# f3cd00d0890b451ea6bb7f60fa552a92
# fcb0758c186541adb9bf1b18918a3226
msgid "Development sprints for Django 1.1 will also be taking place at PyCon US 2009, on the dedicated sprint days (March 30 through April 2), and anyone who wants to help out is welcome to join in, either in person at PyCon or virtually in the IRC channel or on the mailing list."
msgstr ""

#: ../../releases/1.1-beta-1.txt:3
# 6bf25d0e752b47cb84f00cfe2b673b0e
msgid "Django 1.1 beta 1 release notes"
msgstr ""

#: ../../releases/1.1-beta-1.txt:5
# e1ce87de633a43b1b4a0a17ca588c6a3
msgid "March 23, 2009"
msgstr ""

#: ../../releases/1.1-beta-1.txt:7
# f7be0e2c7bf54c35be676bc0f3b4cadd
msgid "Welcome to Django 1.1 beta 1!"
msgstr ""

#: ../../releases/1.1-beta-1.txt:9
# 58f08c22b9eb4e4c964f4074a2f396b0
msgid "This is the second in a series of preview/development releases leading up to the eventual release of Django 1.1, currently scheduled to take place in April 2009. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.1 release."
msgstr ""

#: ../../releases/1.1-beta-1.txt:19
# c4c910a34abd463ab472059c1d0d7d32
msgid "What's new in Django 1.1 beta 1"
msgstr ""

#: ../../releases/1.1-beta-1.txt:23
# 24d73e1ed313400c8eb9dd0ec17bc6db
msgid "The :doc:`1.1 alpha release notes </releases/1.1-alpha-1>`, which has a list of everything new between Django 1.0 and Django 1.1 alpha."
msgstr ""

#: ../../releases/1.1-beta-1.txt:36
# ce60099289cf424b899e5bc4e438e5e2
msgid "You can now control whether or not Django creates database tables for a model using the :attr:`~Options.managed` model option. This defaults to ``True``, meaning that Django will create the appropriate database tables in :djadmin:`syncdb` and remove them as part of ``reset`` command. That is, Django *manages* the database table's lifecycle."
msgstr ""

#: ../../releases/1.1-beta-1.txt:53
# c8f34389f43843a38abb401aa864e71a
msgid "You can now create :ref:`proxy models <proxy-models>`: subclasses of existing models that only add Python behavior and aren't represented by a new table. That is, the new model is a *proxy* for some underlying model, which stores all the real data."
msgstr ""

#: ../../releases/1.1-beta-1.txt:79
# 6de8e2d9a68a4c0da99aa8819bcc648b
msgid "Since 1.1 alpha, a couple of new features have been added to Django's admin application:"
msgstr ""

#: ../../releases/1.1-beta-1.txt:104
# d34ce72a68c04e5ca843827cc0fd9db4
msgid "A couple of small but very useful improvements have been made to the :doc:`testing framework </topics/testing/index>`:"
msgstr ""

#: ../../releases/1.1-beta-1.txt:111
# d11af0a5676d431c83a3265777e94de8
msgid "It's now easier to get at the template context in the response returned the test client: you'll simply access the context as ``request.context[key]``. The old way, which treats ``request.context`` as a list of contexts, one for each rendered template, is still available if you need it."
msgstr ""

#: ../../releases/1.1-beta-1.txt:129
# 411ac098644d4d418b3549db9fd56fda
msgid "Finally, a grab-bag of other neat features made their way into this beta release, including:"
msgstr ""

#: ../../releases/1.1-beta-1.txt:160
# 0013d3718a1145b59471d94bccb507ac
msgid "Before Django 1.1 goes final, at least one other preview/development release will be made available. The current schedule consists of at least the following:"
msgstr ""

#: ../../releases/1.1-beta-1.txt:170
# 4409fa0e75db4713b65755e1bd7806eb
msgid "If deemed necessary, additional beta or release candidate packages will be issued prior to the final 1.1 release."
msgstr ""

#: ../../releases/1.1-beta-1.txt:176
# b7345714fb554ca9936af2b195c9fece
msgid "In order to provide a high-quality 1.1 release, we need your help. Although this beta release is, again, *not* intended for production use, you can help the Django team by trying out the beta codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.1-rc-1.txt:3
# 12adbe033da84901836302de9754ac74
msgid "Django 1.1 RC 1 release notes"
msgstr ""

#: ../../releases/1.1-rc-1.txt:6
# 2a82f50a0e074aca8c783516afa0ee08
msgid "July 21, 2009"
msgstr ""

#: ../../releases/1.1-rc-1.txt:8
# 09e01c03bba44094bedb3ef0fa54146a
msgid "Welcome to the first Django 1.1 release candidate!"
msgstr ""

#: ../../releases/1.1-rc-1.txt:10
# b798cd54c12641f6b19e659d9c45ac89
msgid "This is the third -- and likely last -- in a series of preview/development releases leading up to the eventual release of Django 1.1, currently scheduled to take place approximately one week after this release candidate. This release is targeted primarily at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve any critical bugs prior to the final 1.1 release."
msgstr ""

#: ../../releases/1.1-rc-1.txt:18
#: ../../releases/1.2-rc-1.txt:17
# b78b356f613e4a409add1e3917ef2b6b
# fdfa8f121e414a63a8b3f45671652381
msgid "As such, this release is not yet intended for production use, and any such use is discouraged."
msgstr ""

#: ../../releases/1.1-rc-1.txt:23
# 8c4b82a9a82a456699012da8b95b0cc3
msgid "What's new in Django 1.1 RC 1"
msgstr ""

#: ../../releases/1.1-rc-1.txt:25
# 68b61051be6c4eadb34c404b3ecb8301
msgid "The Django codebase has -- with one exception -- been in feature freeze since the first 1.1 beta release, and so this release candidate contains only one new feature (see below); work leading up to this release candidate has instead been focused on bugfixing, particularly on the new features introduced prior to the 1.1 beta."
msgstr ""

#: ../../releases/1.1-rc-1.txt:31
# 49ef5281305b4de0af34bff2701a0f64
msgid "For an overview of those features, consult :doc:`the Django 1.1 beta release notes </releases/1.1-beta-1>`."
msgstr ""

#: ../../releases/1.1-rc-1.txt:38
# 3b2b6d15d9d048b9aadc50d18605ddbe
msgid "The 1.1 beta release introduced the ability to use reverse URL resolution with Django's admin application, which exposed a set of :ref:`named URLs <naming-url-patterns>`. Unfortunately, achieving consistent and correct reverse resolution for admin URLs proved extremely difficult, and so one additional feature was added to Django to resolve this issue: URL namespaces."
msgstr ""

#: ../../releases/1.1-rc-1.txt:45
# 6412945dabd2482fa465cc30e7c112cb
msgid "In short, this feature allows the same group of URLs, from the same application, to be included in a Django URLConf multiple times, with varying (and potentially nested) named prefixes which will be used when performing reverse resolution. For full details, see :ref:`the documentation on defining URL namespaces <topics-http-defining-url-namespaces>`."
msgstr ""

#: ../../releases/1.1-rc-1.txt:52
# 40ab2adb2fb24af8a3327c8eb59f1d83
msgid "Due to the changes needed to support this feature, the URL pattern names used when reversing admin URLs have changed since the 1.1 beta release; if you were developing applications which took advantage of this new feature, you will need to update your code to reflect the new names (for most purposes, changing ``admin_`` to ``admin:`` in names to be reversed will suffice). For a full list of URL pattern names used by the admin and information on how namespaces are applied to them, consult the documentation on :ref:`reversing admin URLs <admin-reverse-urls>`."
msgstr ""

#: ../../releases/1.1-rc-1.txt:66
# 4685fde9257b4f2d9eb6ac7336993075
msgid "As of this release candidate, Django 1.1 is in both feature freeze and \"string freeze\" -- all strings marked for translation in the Django codebase will retain their current form in the final Django 1.1 release. Only critical release-blocking bugs will receive attention between now and the final 1.1 release."
msgstr ""

#: ../../releases/1.1-rc-1.txt:72
# 0e5bc7354e99440ba7b6221e74ee8d37
msgid "If no such bugs are discovered, Django 1.1 will be released approximately one week after this release candidate, on or about July 28, 2009."
msgstr ""

#: ../../releases/1.1-rc-1.txt:80
# a72eece9bbfd487a9eeeec6652a8df99
msgid "In order to provide a high-quality 1.1 release, we need your help. Although this release candidate is, again, *not* intended for production use, you can help the Django team by trying out this release candidate in a safe testing environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.1-rc-1.txt:89
#: ../../releases/1.2-rc-1.txt:81
# d0b094c3c08e4c8f823bc02717eb9d0b
# b93f118a7e2847dd9cfa2b64cf7a9b20
msgid "Please open a new ticket only if no existing ticket corresponds to a problem you're running into."
msgstr ""

#: ../../releases/1.1.2.txt:3
# 67c4908454db432293c90d5144cf3e02
msgid "Django 1.1.2 release notes"
msgstr ""

#: ../../releases/1.1.2.txt:5
# 528562d1138b41d784fb30102cb5c7a7
msgid "Welcome to Django 1.1.2!"
msgstr ""

#: ../../releases/1.1.2.txt:7
# 494a3df802cc467db03c960a619616c2
msgid "This is the second \"bugfix\" release in the Django 1.1 series, improving the stability and performance of the Django 1.1 codebase."
msgstr ""

#: ../../releases/1.1.2.txt:10
# c7fd09cac79948059a7aee8c95a1d1da
msgid "Django 1.1.2 maintains backwards compatibility with Django 1.1.0, but contain a number of fixes and other improvements. Django 1.1.2 is a recommended upgrade for any development or deployment currently using or targeting Django 1.1."
msgstr ""

#: ../../releases/1.1.2.txt:15
#: ../../releases/1.1.3.txt:15
#: ../../releases/1.1.4.txt:15
# fe069c670e964139b7e67564ef18dd80
# 372fac332ab44e8b8218112c170c6214
# e6265514a2d14a8e8726e3bdd1c9b399
msgid "For full details on the new features, backwards incompatibilities, and deprecated features in the 1.1 branch, see the :doc:`/releases/1.1`."
msgstr ""

#: ../../releases/1.1.2.txt:19
# 58342b93ab844557b13fa41ad059b5ed
msgid "Backwards-incompatible changes in 1.1.2"
msgstr ""

#: ../../releases/1.1.2.txt:22
#: ../../releases/1.2.txt:675
#: ../../releases/1.2-alpha-1.txt:181
# 777b8115982a46c1a2dabfd57e520c37
# bcdfdbb010354e718ab4ff7ba11b4f1d
# b0f1c2425e4b4d74a94e912d54eb1b3e
msgid "Test runner exit status code"
msgstr ""

#: ../../releases/1.1.2.txt:24
#: ../../releases/1.2-alpha-1.txt:183
# 944ef7308379463caa5ab8996416f8f1
# dbc0d314584e46bab93892e5a5baf7e9
msgid "The exit status code of the test runners (``tests/runtests.py`` and ``python manage.py test``) no longer represents the number of failed tests, since a failure of 256 or more tests resulted in a wrong exit status code.  The exit status code for the test runner is now 0 for success (no failing tests) and 1 for any number of test failures.  If needed, the number of test failures can be found at the end of the test runner's output."
msgstr ""

#: ../../releases/1.1.2.txt:32
#: ../../releases/1.2.txt:685
#: ../../releases/1.2-beta-1.txt:66
# 5c3fc319e687445a9c6dc9237c2f091a
# 54695973b55e404c95d1b4fd1312574a
# 044da953c3504b18b0af2484c0492b65
msgid "Cookie encoding"
msgstr ""

#: ../../releases/1.1.2.txt:34
# 8d06b62ea1194e2a96588025faa3114b
msgid "To fix bugs with cookies in Internet Explorer, Safari, and possibly other browsers, our encoding of cookie values was changed so that the characters comma and semi-colon are treated as non-safe characters, and are therefore encoded as ``\\054`` and ``\\073`` respectively.  This could produce backwards incompatibilities, especially if you are storing comma or semi-colon in cookies and have javascript code that parses and manipulates cookie values client-side."
msgstr ""

#: ../../releases/1.1.2.txt:43
#: ../../releases/1.2.2.txt:19
#: ../../releases/1.2.4.txt:53
# 0c8dca3eefbd4256ac43bc5ed50cecfb
# 53f9e55d2cd4469e812b443db3cf3387
# fc4701cdd8954fd58f073eb80b986ed7
msgid "One new feature"
msgstr ""

#: ../../releases/1.1.2.txt:45
# 9e8aa26d4222420aaf44ae27d5fb88c0
msgid "Ordinarily, a point release would not include new features, but in the case of Django 1.1.2, we have made an exception to this rule. Django 1.2 (the next major release of Django) will contain a feature that will improve protection against Cross-Site Request Forgery (CSRF) attacks. This feature requires the use of a new :ttag:`csrf_token` template tag in all forms that Django renders."
msgstr ""

#: ../../releases/1.1.2.txt:52
# cb13d8ee473d4c6c9321194ae69c32f2
msgid "To make it easier to support both 1.1.X and 1.2.X versions of Django with the same templates, we have decided to introduce the :ttag:`csrf_token` template tag to the 1.1.X branch. In the 1.1.X branch, :ttag:`csrf_token` does nothing - it has no effect on templates or form processing. However, it means that the same template will work with Django 1.2."
msgstr ""

#: ../../releases/1.1.3.txt:3
# 8a769ca5cd34466c81231cc4e3a4f6e9
msgid "Django 1.1.3 release notes"
msgstr ""

#: ../../releases/1.1.3.txt:5
# 90e7abec2ed94ed78dbe6bf0307dd3c8
msgid "Welcome to Django 1.1.3!"
msgstr ""

#: ../../releases/1.1.3.txt:7
# 8bdf4abe2c584d4bbecaffc8a45aca22
msgid "This is the third \"bugfix\" release in the Django 1.1 series, improving the stability and performance of the Django 1.1 codebase."
msgstr ""

#: ../../releases/1.1.3.txt:10
# fe42e3ec7e0649ff840e3b770b8737d2
msgid "With one exception, Django 1.1.3 maintains backwards compatibility with Django 1.1.2. It also contains a number of fixes and other improvements. Django 1.1.2 is a recommended upgrade for any development or deployment currently using or targeting Django 1.1."
msgstr ""

#: ../../releases/1.1.3.txt:19
#: ../../releases/1.1.4.txt:19
#: ../../releases/1.2.4.txt:19
#: ../../releases/1.2.5.txt:19
#: ../../releases/1.4.2.txt:40
#: ../../releases/1.5.5.txt:36
# c62e808dec2c48b6857488e73260d003
# 689e02e66e74478599a637b90a1c4a4e
# 7b3ec34243fd40af8bf0b929ed800f49
# 03ace8d660004e1dace0b6fd61899317
# 47bd995f8bf549e4b825df569fda7638
# 30850bbd27ff491489fc46c5f4b46360
msgid "Backwards incompatible changes"
msgstr ""

#: ../../releases/1.1.3.txt:22
#: ../../releases/1.2.4.txt:22
#: ../../releases/1.3.txt:350
# 09f6c85fa44d4ef7a289702edd324982
# dab8e683dc4945d0a53db72a7304c83d
# a7d6007a97ae4401a0a618fba8ba357a
msgid "Restricted filters in admin interface"
msgstr ""

#: ../../releases/1.1.3.txt:24
#: ../../releases/1.2.4.txt:24
# 718bf0194d2840bb9562c8441341d727
# f6db581084bf447c8a0bf1362f95a280
msgid "The Django administrative interface, django.contrib.admin, supports filtering of displayed lists of objects by fields on the corresponding models, including across database-level relationships. This is implemented by passing lookup arguments in the querystring portion of the URL, and options on the ModelAdmin class allow developers to specify particular fields or relationships which will generate automatic links for filtering."
msgstr ""

#: ../../releases/1.1.3.txt:32
#: ../../releases/1.2.4.txt:32
# 1f56612874f34e108a76ddb930df53bd
# 9594e2442e7c474d938cfd08474fcafc
msgid "One historically-undocumented and -unofficially-supported feature has been the ability for a user with sufficient knowledge of a model's structure and the format of these lookup arguments to invent useful new filters on the fly by manipulating the querystring."
msgstr ""

#: ../../releases/1.1.3.txt:37
#: ../../releases/1.2.4.txt:37
# 511c417533424bea94f871a5ff8cfce5
# cb7b9a67336848bfb01920b9b886cd6a
msgid "However, it has been demonstrated that this can be abused to gain access to information outside of an admin user's permissions; for example, an attacker with access to the admin and sufficient knowledge of model structure and relations could construct query strings which -- with repeated use of regular-expression lookups supported by the Django database API -- expose sensitive information such as users' password hashes."
msgstr ""

#: ../../releases/1.1.3.txt:45
#: ../../releases/1.2.4.txt:45
# 02ddec36e01748d4ab4b94083fd7d562
# 69928d60089041c99d297f3797e61ba1
msgid "To remedy this, django.contrib.admin will now validate that querystring lookup arguments either specify only fields on the model being viewed, or cross relations which have been explicitly whitelisted by the application developer using the pre-existing mechanism mentioned above. This is backwards-incompatible for any users relying on the prior ability to insert arbitrary lookups."
msgstr ""

#: ../../releases/1.1.4.txt:3
# 5543cbc8cebd4b53a237d2cee500e1a7
msgid "Django 1.1.4 release notes"
msgstr ""

#: ../../releases/1.1.4.txt:5
# 734143f122864df8871c4865fc4098e1
msgid "Welcome to Django 1.1.4!"
msgstr ""

#: ../../releases/1.1.4.txt:7
# 361d1fa903104b258d951616d1e76018
msgid "This is the fourth \"bugfix\" release in the Django 1.1 series, improving the stability and performance of the Django 1.1 codebase."
msgstr ""

#: ../../releases/1.1.4.txt:10
# 804949f70cea4c1a94e5d9659cffd2df
msgid "With one exception, Django 1.1.4 maintains backwards compatibility with Django 1.1.3. It also contains a number of fixes and other improvements. Django 1.1.4 is a recommended upgrade for any development or deployment currently using or targeting Django 1.1."
msgstr ""

#: ../../releases/1.1.4.txt:22
#: ../../releases/1.2.5.txt:22
# 3d008fe7effb49e184bd67cd2de5641c
# c9ac5e5383fb44ceab641a44ae4a6dec
msgid "CSRF exception for AJAX requests"
msgstr ""

#: ../../releases/1.1.4.txt:24
#: ../../releases/1.2.5.txt:24
# 0d9a7e45de194c7f8764daa88cff34f4
# c0285095dbc0484b98f947b9fb7bf329
msgid "Django includes a CSRF-protection mechanism, which makes use of a token inserted into outgoing forms. Middleware then checks for the token's presence on form submission, and validates it."
msgstr ""

#: ../../releases/1.1.4.txt:28
#: ../../releases/1.2.5.txt:28
# 279731139c644b4ea84500983c9e657f
# 4e240ef40b4b4712a44292ec0b66475a
msgid "Prior to Django 1.2.5, our CSRF protection made an exception for AJAX requests, on the following basis:"
msgstr ""

#: ../../releases/1.1.4.txt:31
#: ../../releases/1.2.5.txt:31
# e838132fc0d044e592d98a1be28a2ee1
# 75de846d126f447b8df295018bf3bcd2
msgid "Many AJAX toolkits add an X-Requested-With header when using XMLHttpRequest."
msgstr ""

#: ../../releases/1.1.4.txt:34
#: ../../releases/1.2.5.txt:34
# 64d71b18c9324d9081abe00232a8ca3f
# 5d5dd2ab64ae4ae88c5aef1c0c055096
msgid "Browsers have strict same-origin policies regarding XMLHttpRequest."
msgstr ""

#: ../../releases/1.1.4.txt:37
#: ../../releases/1.2.5.txt:37
# 8f534d5a774a4d23b5a1cccc1723bbc3
# 77daab7b0c2744d49e69eadd791f8392
msgid "In the context of a browser, the only way that a custom header of this nature can be added is with XMLHttpRequest."
msgstr ""

#: ../../releases/1.1.4.txt:40
#: ../../releases/1.2.5.txt:40
# 1d54bade25d944dd93c3f25aa2b9c296
# 9f410d209a704202b23db1e48765c7e5
msgid "Therefore, for ease of use, we did not apply CSRF checks to requests that appeared to be AJAX on the basis of the X-Requested-With header. The Ruby on Rails web framework had a similar exemption."
msgstr ""

#: ../../releases/1.1.4.txt:44
#: ../../releases/1.2.5.txt:44
# d6d0e2335afb484b8be93d668c9cdb91
# 254b01972aca430faf9384326fe31f53
msgid "Recently, engineers at Google made members of the Ruby on Rails development team aware of a combination of browser plugins and redirects which can allow an attacker to provide custom HTTP headers on a request to any website. This can allow a forged request to appear to be an AJAX request, thereby defeating CSRF protection which trusts the same-origin nature of AJAX requests."
msgstr ""

#: ../../releases/1.1.4.txt:51
#: ../../releases/1.2.5.txt:51
# 80d3273c277243fc9c2cc3b77c1ae488
# 8590a494e90a4f1fb5a17e07e9e8a69b
msgid "Michael Koziarski of the Rails team brought this to our attention, and we were able to produce a proof-of-concept demonstrating the same vulnerability in Django's CSRF handling."
msgstr ""

#: ../../releases/1.1.4.txt:55
#: ../../releases/1.2.5.txt:55
# 8b0027306c4e454798905d3a28a96db3
# 163917b393444ab68d166980259bec54
msgid "To remedy this, Django will now apply full CSRF validation to all requests, regardless of apparent AJAX origin. This is technically backwards-incompatible, but the security risks have been judged to outweigh the compatibility concerns in this case."
msgstr ""

#: ../../releases/1.1.4.txt:60
#: ../../releases/1.2.5.txt:60
# 41efd779f8364ba2ad7110d1f1bd48a5
# 3023230875b643308e707f36075a1e66
msgid "Additionally, Django will now accept the CSRF token in the custom HTTP header X-CSRFTOKEN, as well as in the form submission itself, for ease of use with popular JavaScript toolkits which allow insertion of custom headers into all AJAX requests."
msgstr ""

#: ../../releases/1.1.4.txt:65
#: ../../releases/1.2.5.txt:65
# c9dadaeb54214491b152ef36a7708daa
# 27d4855664264e62bf36c06c679b34cd
msgid "Please see the :ref:`CSRF docs for example jQuery code <csrf-ajax>` that demonstrates this technique, ensuring that you are looking at the documentation for your version of Django, as the exact code necessary is different for some older versions of Django."
msgstr ""

#: ../../releases/1.2.txt:3
# 814acbc433a345a4ad326ad2d152b9a2
msgid "Django 1.2 release notes"
msgstr ""

#: ../../releases/1.2.txt:5
# 27bba315a5f0408793612361493f2826
msgid "*May 17, 2010.*"
msgstr ""

#: ../../releases/1.2.txt:7
# f333b496de4f4697b1ab925fd7865957
msgid "Welcome to Django 1.2!"
msgstr ""

#: ../../releases/1.2.txt:9
# 0001cd3f66e34dd9a1c21bcc54039c82
msgid "Nearly a year in the making, Django 1.2 packs an impressive list of `new features`_ and lots of bug fixes. These release notes cover the new features, as well as important changes you'll want to be aware of when upgrading from Django 1.1 or older versions."
msgstr ""

#: ../../releases/1.2.txt:17
#: ../../releases/1.3.txt:16
#: ../../releases/1.4.txt:21
#: ../../releases/1.5.txt:21
#: ../../releases/1.5-alpha-1.txt:34
#: ../../releases/1.5-beta-1.txt:30
# 731fc2faaa6d4d919df739cd7acf9fec
# 083c616efb6e4c3e9b60e01f58f9be0e
# a2dce9b7df6741f69d7ab662ff720007
# 57e14c479d914af7be97786a4327d149
# 297311f6644c4c019c67fe2048c4cbb6
# ff361806406648a7909ab57eebae33fd
msgid "Overview"
msgstr ""

#: ../../releases/1.2.txt:19
# f76794b7226948518684c84a2cc53c4d
msgid "Django 1.2 introduces several large, important new features, including:"
msgstr ""

#: ../../releases/1.2.txt:21
# 2e7f9ceb6e254a79bb04a9115f1c42f5
msgid "Support for `multiple database connections`_ in a single Django instance."
msgstr ""

#: ../../releases/1.2.txt:23
# 459665894c17406790a2aaaa4a08a5cc
msgid "`Model validation`_ inspired by Django's form validation."
msgstr ""

#: ../../releases/1.2.txt:25
# 4cfb253df8bd48ec82a33f7f5b6cfe65
msgid "Vastly `improved protection against Cross-Site Request Forgery`_ (CSRF)."
msgstr ""

#: ../../releases/1.2.txt:27
# be075efc155548609e1eadacab3cffe4
msgid "A new `user \"messages\" framework`_ with support for cookie- and session-based message for both anonymous and authenticated users."
msgstr ""

#: ../../releases/1.2.txt:30
# 53fa6314c9644e84a01c59c101906875
msgid "Hooks for `object-level permissions`_, `permissions for anonymous users`_, and `more flexible username requirements`_."
msgstr ""

#: ../../releases/1.2.txt:33
# 2f711d1593fe4215ab9eeeb17c127356
msgid "Customization of email sending via `email backends`_."
msgstr ""

#: ../../releases/1.2.txt:35
# 0b0cbd00da744b99a2b691751b2abe6d
msgid "New :ref:`\"smart\" if template tag <new-in-1.2-smart-if>` which supports comparison operators."
msgstr ""

#: ../../releases/1.2.txt:43
# b9afc04c58364fe2bcd30767d322bfe7
msgid "These are just the highlights; full details and a complete list of features `may be found below`_."
msgstr ""

#: ../../releases/1.2.txt:50
# 1f9dbccfc22147309e6bc160cb85e44a
msgid "`Django Advent`_ covered the release of Django 1.2 with a series of articles and tutorials that cover some of the new features in depth."
msgstr ""

#: ../../releases/1.2.txt:55
# 0e45a5df0bd94aaa9192d4b5fe819d9a
msgid "Wherever possible these features have been introduced in a backwards-compatible manner per :doc:`our API stability policy </misc/api-stability>` policy."
msgstr ""

#: ../../releases/1.2.txt:58
# e9b97082ff5743aa8414bb0461e2cd83
msgid "However, a handful of features *have* changed in ways that, for some users, will be backwards-incompatible. The big changes are:"
msgstr ""

#: ../../releases/1.2.txt:61
# 44e059ca85ba4c9d9bc89f1b52eec79b
msgid "Support for Python 2.3 has been dropped. See the full notes below."
msgstr ""

#: ../../releases/1.2.txt:64
# 24fd514966c443fe86f48d1f5749484d
msgid "The new CSRF protection framework is not backwards-compatible with the old system. Users of the old system will not be affected until the old system is removed in Django 1.4."
msgstr ""

#: ../../releases/1.2.txt:68
# 04ade881fa3148b9b87346c7b0bb7138
msgid "However, upgrading to the new CSRF protection framework requires a few important backwards-incompatible changes, detailed in `CSRF Protection`_, below."
msgstr ""

#: ../../releases/1.2.txt:72
# 975add5cddf74ee7bbf8f124db035d99
msgid "Authors of custom :class:`~django.db.models.Field` subclasses should be aware that a number of methods have had a change in prototype, detailed under `get_db_prep_*() methods on Field`_, below."
msgstr ""

#: ../../releases/1.2.txt:76
# c32a4c13d3ef4cb3b0ef8712e63b9859
msgid "The internals of template tags have changed somewhat; authors of custom template tags that need to store state (e.g. custom control flow tags) should ensure that their code follows the new rules for `stateful template tags`_"
msgstr ""

#: ../../releases/1.2.txt:81
# 349b0a46fd8c4a7391b7c25e510a2ddc
msgid "The :func:`~django.contrib.auth.decorators.user_passes_test`, :func:`~django.contrib.auth.decorators.login_required`, and :func:`~django.contrib.auth.decorators.permission_required`, decorators from :mod:`django.contrib.auth` only apply to functions and no longer work on methods. There's a simple one-line fix `detailed below`_."
msgstr ""

#: ../../releases/1.2.txt:89
# d38a1cba4e564a20883752a9bf5239a6
msgid "Again, these are just the big features that will affect the most users. Users upgrading from previous versions of Django are heavily encouraged to consult the complete list of :ref:`backwards-incompatible changes <backwards-incompatible-changes-1.2>` and the list of :ref:`deprecated features <deprecated-features-1.2>`."
msgstr ""

#: ../../releases/1.2.txt:96
#: ../../releases/1.2-rc-1.txt:28
#: ../../releases/1.3.txt:54
#: ../../releases/1.4.txt:63
#: ../../releases/1.4-alpha-1.txt:28
#: ../../releases/1.4-beta-1.txt:44
#: ../../releases/1.5.txt:70
#: ../../releases/1.5-alpha-1.txt:83
#: ../../releases/1.5-beta-1.txt:79
#: ../../releases/1.6.txt:36
# b1ee471fddf044c5b493f393c94436cc
# 5c73dbc367ec4c41a9096dc1981d1a77
# 0e5fcda1b9704184a83831598b949689
# b63ab65bd3af4c82a6aa4d9df034d33c
# f45b688493c94b4e8a4308651aae40b5
# 1464308f14964909b5104d07fe2b7146
# 5d20d33aa5234fbcb2ea0289c0bc9820
# ff64127d08c54c608cb30cb78b51e8a5
# 323a3c43fe4f44e89476a1c39138f4bc
# 461695fd204b499797dcfde9d8b3a047
msgid "Python compatibility"
msgstr ""

#: ../../releases/1.2.txt:98
#: ../../releases/1.2-rc-1.txt:30
# 24f6177470aa48a7b6e2914a45770bda
# ac59a90fcce84ee29c5aac7908f52d96
msgid "While not a new feature, it's important to note that Django 1.2 introduces the first shift in our Python compatibility policy since Django's initial public debut. Previous Django releases were tested and supported on 2.x Python versions from 2.3 up; Django 1.2, however, drops official support for Python 2.3. As such, the minimum Python version required for Django is now 2.4, and Django is tested and supported on Python 2.4, 2.5 and 2.6, and will be supported on the as-yet-unreleased Python 2.7."
msgstr ""

#: ../../releases/1.2.txt:107
#: ../../releases/1.2-rc-1.txt:39
# 8524c296a681460e9cd09d831032aacb
# c5b569cb21434af6bd19efec032fa03b
msgid "This change should affect only a small number of Django users, as most operating-system vendors today are shipping Python 2.4 or newer as their default version. If you're still using Python 2.3, however, you'll need to stick to Django 1.1 until you can upgrade; per :doc:`our support policy </internals/release-process>`, Django 1.1 will continue to receive security support until the release of Django 1.3."
msgstr ""

#: ../../releases/1.2.txt:114
#: ../../releases/1.2-rc-1.txt:46
# 7efd68dda9fe43fea720b411c2829564
# 1238f90a729c409c83bbd6bb343f678b
msgid "A roadmap for Django's overall 2.x Python support, and eventual transition to Python 3.x, is currently being developed, and will be announced prior to the release of Django 1.3."
msgstr ""

#: ../../releases/1.2.txt:119
# ab34d5cfa4664806b877261a659b5590
msgid "What's new in Django 1.2"
msgstr ""

#: ../../releases/1.2.txt:122
#: ../../releases/1.2-alpha-1.txt:427
# b8d826fb7bd6453caad7c73d0fce841b
# 0d183caf55a842718cfc03d2fba6e17c
msgid "Support for multiple databases"
msgstr ""

#: ../../releases/1.2.txt:124
# 1c7858a583b74ed9a3145356260191f8
msgid "Django 1.2 adds the ability to use :doc:`more than one database </topics/db/multi-db>` in your Django project. Queries can be issued at a specific database with the ``using()`` method on ``QuerySet`` objects. Individual objects can be saved to a specific database by providing a ``using`` argument when you call ``save()``."
msgstr ""

#: ../../releases/1.2.txt:131
# db4e4783e0834b8585476866788bbf18
msgid "Model validation"
msgstr ""

#: ../../releases/1.2.txt:133
# 70188278845d4c69b0a91a147bacb73e
msgid "Model instances now have support for :ref:`validating their own data <validating-objects>`, and both model and form fields now accept configurable lists of :doc:`validators </ref/validators>` specifying reusable, encapsulated validation behavior. Note, however, that validation must still be performed explicitly. Simply invoking a model instance's ``save()`` method will not perform any validation of the instance's data."
msgstr ""

#: ../../releases/1.2.txt:141
# 85e4b0386f804538b16c6834d8994fb5
msgid "Improved CSRF protection"
msgstr ""

#: ../../releases/1.2.txt:143
# 3249e32bddbf4b69ac6822f5fab518c9
msgid "Django now has much improved protection against :doc:`Cross-Site Request Forgery (CSRF) attacks</ref/contrib/csrf>`. This type of attack occurs when a malicious Web site contains a link, a form button or some JavaScript that is intended to perform some action on your Web site, using the credentials of a logged-in user who visits the malicious site in their browser. A related type of attack, \"login CSRF,\" where an attacking site tricks a user's browser into logging into a site with someone else's credentials, is also covered."
msgstr ""

#: ../../releases/1.2.txt:152
# 610ee69e488842479b310e20e2200480
msgid "Messages framework"
msgstr ""

#: ../../releases/1.2.txt:154
#: ../../releases/1.2-alpha-1.txt:419
# 091e9c40d7c143d5a3bdc93df0951711
# b3af3defa15548d3b95a1fdc6ab2bd2c
msgid "Django now includes a robust and configurable :doc:`messages framework </ref/contrib/messages>` with built-in support for cookie- and session-based messaging, for both anonymous and authenticated clients. The messages framework replaces the deprecated user message API and allows you to temporarily store messages in one request and retrieve them for display in a subsequent request (usually the next one)."
msgstr ""

#: ../../releases/1.2.txt:162
#: ../../releases/1.2-beta-1.txt:87
# 0251e151b59c425ca67db53f84009cce
# bf262cffdf104a3c85f98e5d2f9e178a
msgid "Object-level permissions"
msgstr ""

#: ../../releases/1.2.txt:164
# 6cf6853c3cb34d24ad296daf9d626fd3
msgid "A foundation for specifying permissions at the per-object level has been added. Although there is no implementation of this in core, a custom authentication backend can provide this implementation and it will be used by :class:`django.contrib.auth.models.User`. See the :doc:`authentication docs </topics/auth/index>` for more information."
msgstr ""

#: ../../releases/1.2.txt:171
#: ../../releases/1.2-beta-1.txt:99
# 7af22913a5e749e397fe1fa3d0f53ebd
# dd7235557299418da1ac5fe5d1adb827
msgid "Permissions for anonymous users"
msgstr ""

#: ../../releases/1.2.txt:173
# f4824868424d4b1bb526d1ab77b97d8a
msgid "If you provide a custom auth backend with ``supports_anonymous_user`` set to ``True``, AnonymousUser will check the backend for permissions, just like User already did.  This is useful for centralizing permission handling - apps can always delegate the question of whether something is allowed or not to the authorization/authentication backend. See the :doc:`authentication docs </topics/auth/index>` for more details."
msgstr ""

#: ../../releases/1.2.txt:181
# 826d22c130274a25a9a0f031350242f3
msgid "Relaxed requirements for usernames"
msgstr ""

#: ../../releases/1.2.txt:183
# 754a0346895840c4aa651391d7f81ba3
msgid "The built-in :class:`~django.contrib.auth.models.User` model's :attr:`~django.contrib.auth.models.User.username` field now allows a wider range of characters, including ``@``, ``+``, ``.`` and ``-`` characters."
msgstr ""

#: ../../releases/1.2.txt:188
# 9a6418bc50b448b6b97a5f9949c13910
msgid "Email backends"
msgstr ""

#: ../../releases/1.2.txt:190
#: ../../releases/1.2-alpha-1.txt:401
# 0a345247c5b34b0daa5ded9228244bfe
# 57f589260bcc44dfaa966c1493c3f645
msgid "You can now :ref:`configure the way that Django sends email <topic-email-backends>`. Instead of using SMTP to send all email, you can now choose a configurable email backend to send messages. If your hosting provider uses a sandbox or some other non-SMTP technique for sending mail, you can now construct an email backend that will allow Django's standard :doc:`mail sending methods</topics/email>` to use those facilities."
msgstr ""

#: ../../releases/1.2.txt:198
# 06971489aedb463780e1c9356768f7c1
msgid "This also makes it easier to debug mail sending. Django ships with backend implementations that allow you to send email to a :ref:`file<topic-email-file-backend>`, to the :ref:`console<topic-email-console-backend>`, or to :ref:`memory<topic-email-memory-backend>`. You can even configure all email to be :ref:`thrown away<topic-email-dummy-backend>`."
msgstr ""

#: ../../releases/1.2.txt:208
# 6cbe0c46535344449a44606e4d47616d
msgid "\"Smart\" :ttag:`if` tag"
msgstr ""

#: ../../releases/1.2.txt:210
# 0a4a5414f7f84347b09595f4c810f0db
msgid "The :ttag:`if` tag has been upgraded to be much more powerful. First, we've added support for comparison operators. No longer will you have to type:"
msgstr ""

#: ../../releases/1.2.txt:219
# 8121857101fe47feb853a600cc2ef6eb
msgid "You can now do this:"
msgstr ""

#: ../../releases/1.2.txt:227
# 51f193b8c26c4ae89f8de67501e8fad3
msgid "There's really no reason to use ``{% ifequal %}`` or ``{% ifnotequal %}`` anymore, unless you're the nostalgic type."
msgstr ""

#: ../../releases/1.2.txt:230
# 9653507339644624978ee6d0776fd3e5
msgid "The operators supported are ``==``, ``!=``, ``<``, ``>``, ``<=``, ``>=``, ``in`` and ``not in``, all of which work like the Python operators, in addition to ``and``, ``or`` and ``not``, which were already supported."
msgstr ""

#: ../../releases/1.2.txt:234
#: ../../releases/1.2-alpha-1.txt:459
# b0f69752f4cd4c3080e39e53fb78e0a1
# def35212ed794950b8b28fab00faf0f3
msgid "Also, filters may now be used in the ``if`` expression. For example:"
msgstr ""

#: ../../releases/1.2.txt:245
#: ../../releases/1.2-alpha-1.txt:470
# 1fe7a5cb94b14fdba4b0a04f3acc7c77
# db1b4141d4f44fcbbbee6acbcd075e56
msgid "Template caching"
msgstr ""

#: ../../releases/1.2.txt:247
# 2491b8239e47470a93de8963bd3e072b
msgid "In previous versions of Django, every time you rendered a template, it would be reloaded from disk. In Django 1.2, you can use a :ref:`cached template loader <template-loaders>` to load templates once, then cache the result for every subsequent render. This can lead to a significant performance improvement if your templates are broken into lots of smaller subtemplates (using the ``{% extends %}`` or ``{% include %}`` tags)."
msgstr ""

#: ../../releases/1.2.txt:255
#: ../../releases/1.2-alpha-1.txt:480
# 251c6e0399724ea4b13a96429030de18
# 8ffeab93187c4dacb5ef0fd7f99ac37a
msgid "As a side effect, it is now much easier to support non-Django template languages. For more details, see the :ref:`notes on supporting non-Django template languages<topic-template-alternate-language>`."
msgstr ""

#: ../../releases/1.2.txt:260
# 49d62e8c005e4118b1352ec7bd77ee69
msgid "Class-based template loaders"
msgstr ""

#: ../../releases/1.2.txt:262
# b32604b285bd4c8e970816227458bcf2
msgid "As part of the changes made to introduce `Template caching`_  and following a general trend in Django, the template loaders API has been modified to use template loading mechanisms that are encapsulated in Python classes as opposed to functions, the only method available until Django 1.1."
msgstr ""

#: ../../releases/1.2.txt:267
# 291db47e44744b44a6fee47f34fa60ea
msgid "All the template loaders :ref:`shipped with Django <template-loaders>` have been ported to the new API but they still implement the function-based API and the template core machinery still accepts function-based loaders (builtin or third party) so there is no immediate need to modify your :setting:`TEMPLATE_LOADERS` setting in existing projects, things will keep working if you leave it untouched up to and including the Django 1.3 release."
msgstr ""

#: ../../releases/1.2.txt:274
# beba183b1a10400d8cfe2911399f178f
msgid "If you have developed your own custom template loaders we suggest to consider porting them to a class-based implementation because the code for backwards compatibility with function-based loaders starts its deprecation process in Django 1.2 and will be removed in Django 1.4.  There is a description of the API these loader classes must implement :ref:`here <topic-template-alternate-language>` and you can also examine the source code of the loaders shipped with Django."
msgstr ""

#: ../../releases/1.2.txt:283
#: ../../releases/1.2-alpha-1.txt:485
# c683191fa0154adb87a35cbef102b287
# 248be674999842be8664d44fd04642d7
msgid "Natural keys in fixtures"
msgstr ""

#: ../../releases/1.2.txt:285
# aae6e4e325be446b95cf5aa9a4711928
msgid "Fixtures can now refer to remote objects using :ref:`topics-serialization-natural-keys`. This lookup scheme is an alternative to the normal primary-key based object references in a fixture, improving readability and resolving problems referring to objects whose primary key value may not be predictable or known."
msgstr ""

#: ../../releases/1.2.txt:292
# 6d2b3eac06c74ebaa82f0d55c1409a43
msgid "Fast failure for tests"
msgstr ""

#: ../../releases/1.2.txt:294
# 83571d97d8b947e7a34c3cffce7f9aa0
msgid "Both the :djadmin:`test` subcommand of ``django-admin.py`` and the ``runtests.py`` script used to run Django's own test suite now support a ``--failfast`` option. When specified, this option causes the test runner to exit after encountering a failure instead of continuing with the test run. In addition, the handling of ``Ctrl-C`` during a test run has been improved to trigger a graceful exit from the test run that reports details of the tests that were run before the interruption."
msgstr ""

#: ../../releases/1.2.txt:303
#: ../../releases/1.2-alpha-1.txt:494
# d9535f21331b4b3597721c72683f02ca
# 356486cc66014581bb6e875aa94d84ec
msgid "``BigIntegerField``"
msgstr ""

#: ../../releases/1.2.txt:305
# 9fba5911976744f489dccc1bba5011f5
msgid "Models can now use a 64-bit :class:`~django.db.models.BigIntegerField` type."
msgstr ""

#: ../../releases/1.2.txt:308
#: ../../releases/1.2-alpha-1.txt:509
# cca5132986b44e5693c782dc7a3821ed
# d5f16a1d8a574a7ca31b89e97a7af868
msgid "Improved localization"
msgstr ""

#: ../../releases/1.2.txt:310
# 4218414a38374c6ebcc4baa41cf102a4
msgid "Django's :doc:`internationalization framework </topics/i18n/index>` has been expanded with locale-aware formatting and form processing. That means, if enabled, dates and numbers on templates will be displayed using the format specified for the current locale. Django will also use localized formats when parsing data in forms. See :ref:`Format localization <format-localization>` for more details."
msgstr ""

#: ../../releases/1.2.txt:317
# 5cb05975a86a4cc3918ac81680323611
msgid "``readonly_fields`` in ``ModelAdmin``"
msgstr ""

#: ../../releases/1.2.txt:319
# 2e8d9aa2801a42b69f56f02e7efb6d8c
msgid ":attr:`django.contrib.admin.ModelAdmin.readonly_fields` has been added to enable non-editable fields in add/change pages for models and inlines. Field and calculated values can be displayed alongside editable fields."
msgstr ""

#: ../../releases/1.2.txt:324
#: ../../releases/1.2-alpha-1.txt:526
# 58fcac81090c4ba7adca3eda3f24b1a9
# 72256287e441411fa7e093bbb8cde15b
msgid "Customizable syntax highlighting"
msgstr ""

#: ../../releases/1.2.txt:326
# 5e5dea7ff01f446abcf529cf699289f8
msgid "You can now use a ``DJANGO_COLORS`` environment variable to modify or disable the colors used by ``django-admin.py`` to provide :ref:`syntax highlighting <syntax-coloring>`."
msgstr ""

#: ../../releases/1.2.txt:331
# 70336ac19f45449eba3b17710cf77a4e
msgid "Syndication feeds as views"
msgstr ""

#: ../../releases/1.2.txt:333
# 1c0c1171606a4505be98d1ceb229b2e4
msgid ":doc:`Syndication feeds </ref/contrib/syndication>` can now be used directly as views in your :doc:`URLconf </topics/http/urls>`. This means that you can maintain complete control over the URL structure of your feeds. Like any other view, feeds views are passed a ``request`` object, so you can do anything you would normally do with a view, like user based access control, or making a feed a named URL."
msgstr ""

#: ../../releases/1.2.txt:343
# 7b57d62c922444eca8860e67aabb2ab0
msgid "The most significant new feature for :doc:`GeoDjango </ref/contrib/gis/index>` in 1.2 is support for multiple spatial databases.  As a result, the following :ref:`spatial database backends <spatial-backends>` are now included:"
msgstr ""

#: ../../releases/1.2.txt:348
# 3d35de0c898f4a7785b8ea62aab34a71
msgid "``django.contrib.gis.db.backends.postgis``"
msgstr ""

#: ../../releases/1.2.txt:349
# 431ce55c122044558a590fa8af8c58e2
msgid "``django.contrib.gis.db.backends.mysql``"
msgstr ""

#: ../../releases/1.2.txt:350
# c7fe41cb2cf64da98604f2e40c331d1d
msgid "``django.contrib.gis.db.backends.oracle``"
msgstr ""

#: ../../releases/1.2.txt:351
# 6be5c1852d7140828a495c96aa809e85
msgid "``django.contrib.gis.db.backends.spatialite``"
msgstr ""

#: ../../releases/1.2.txt:353
# 50c38f54d36d420e837fb8e05f3a624b
msgid "GeoDjango now supports the rich capabilities added in the `PostGIS 1.5 release <http://postgis.refractions.net/documentation/manual-1.5/>`_. New features include suppport for the :ref:`geography type <geography-type>` and enabling of :ref:`distance queries <distance-queries>` with non-point geometries on geographic coordinate systems."
msgstr ""

#: ../../releases/1.2.txt:359
# d6b319f6174141e1b782991dacb7507f
msgid "Support for 3D geometry fields was added, and may be enabled by setting the :attr:`~django.contrib.gis.db.models.GeometryField.dim` keyword to 3 in your :class:`~django.contrib.gis.db.models.GeometryField`. The :class:`~django.contrib.gis.db.models.Extent3D` aggregate and :meth:`~django.contrib.gis.db.models.GeoQuerySet.extent3d` ``GeoQuerySet`` method were added as a part of this feature."
msgstr ""

#: ../../releases/1.2.txt:366
# 25a55ffac998438882ed2c8f864de9a4
msgid "The following :class:`~django.contrib.gis.db.models.GeoQuerySet` methods are new in 1.2:"
msgstr ""

#: ../../releases/1.2.txt:369
# 89856d6afb1d496b86adb33ca7e33cf1
msgid ":meth:`~django.contrib.gis.db.models.GeoQuerySet.force_rhr`"
msgstr ""

#: ../../releases/1.2.txt:370
# ad529c4a2ca845be89844d5ebb838b89
msgid ":meth:`~django.contrib.gis.db.models.GeoQuerySet.reverse_geom`"
msgstr ""

#: ../../releases/1.2.txt:371
# ca33d56f3b4946478e20c833e0a297cb
msgid ":meth:`~django.contrib.gis.db.models.GeoQuerySet.geohash`"
msgstr ""

#: ../../releases/1.2.txt:373
# 2071403fe21e4f7a81f0001335c26828
msgid "The :ref:`GEOS interface <ref-geos>` was updated to use thread-safe C library functions when available on the platform."
msgstr ""

#: ../../releases/1.2.txt:376
# 4ebe97c351f54fdbaaf4accc906c01f2
msgid "The :ref:`GDAL interface <ref-gdal>` now allows the user to set a :attr:`~django.contrib.gis.gdal.Layer.spatial_filter` on the features returned when iterating over a :class:`~django.contrib.gis.gdal.Layer`."
msgstr ""

#: ../../releases/1.2.txt:381
# c804f2e4fda04feab33717c0f060abbf
msgid "Finally, :doc:`GeoDjango's documentation </ref/contrib/gis/index>` is now included with Django's and is no longer hosted separately at `geodjango.org <http://geodjango.org/>`_."
msgstr ""

#: ../../releases/1.2.txt:388
# ff3a2aeeeafb4456b6a8c80d70bf3d2a
msgid "JavaScript-assisted handling of inline related objects in the admin"
msgstr ""

#: ../../releases/1.2.txt:390
# 820a86a7564e4e8b81be3dfdefd5f575
msgid "If a user has JavaScript enabled in their browser, the interface for inline objects in the admin now allows inline objects to be dynamically added and removed. Users without JavaScript-enabled browsers will see no change in the behavior of inline objects."
msgstr ""

#: ../../releases/1.2.txt:396
# 39ce71321ebe4c6bb7d7e6faf1fa619a
msgid "New ``now`` template tag format specifier characters: ``c`` and ``u``"
msgstr ""

#: ../../releases/1.2.txt:398
# c8c66c76f4174cde943a8a5512d31833
msgid "The argument to the :ttag:`now` has gained two new format characters: ``c`` to specify that a datetime value should be formatted in ISO 8601 format, and ``u`` that allows output of the microseconds part of a datetime or time value."
msgstr ""

#: ../../releases/1.2.txt:403
# 651384d009704d8c8ea9df7787a08b0c
msgid "These are also available in others parts like the :tfilter:`date` and :tfilter:`time` template filters, the ``humanize`` template tag library and the new `format localization`_ framework."
msgstr ""

#: ../../releases/1.2.txt:412
#: ../../releases/1.2-alpha-1.txt:20
# 6c6e2c2c78104b97a750b58a911d2615
# 614699e103f04a76b8c005d27ed855b4
msgid "Backwards-incompatible changes in 1.2"
msgstr ""

#: ../../releases/1.2.txt:414
# 8600a7b6469b4b8b8fc0d9934a57c285
msgid "Wherever possible the new features above have been introduced in a backwards-compatible manner per :doc:`our API stability policy </misc/api-stability>` policy. This means that practically all existing code which worked with Django 1.1 will continue to work with Django 1.2; such code will, however, begin issuing warnings (see below for details)."
msgstr ""

#: ../../releases/1.2.txt:421
# 058798cc37944cc7ac879d7532b428a0
msgid "However, a handful of features *have* changed in ways that, for some users, will be immediately backwards-incompatible. Those changes are detailed below."
msgstr ""

#: ../../releases/1.2.txt:426
#: ../../releases/1.2-alpha-1.txt:23
# 94171ea8a13e4672804c02df88a0c42f
# 1e903318576d4ab696d4d60552f28cef
msgid "CSRF Protection"
msgstr ""

#: ../../releases/1.2.txt:428
# 51381aa5ac7849c69c9713b5070c5788
msgid "We've made large changes to the way CSRF protection works, detailed in :doc:`the CSRF documentation </ref/contrib/csrf>`. Here are the major changes you should be aware of:"
msgstr ""

#: ../../releases/1.2.txt:432
# 6bdcf9b269114c1988fe903f0e8792b4
msgid "``CsrfResponseMiddleware`` and ``CsrfMiddleware`` have been deprecated and will be removed completely in Django 1.4, in favor of a template tag that should be inserted into forms."
msgstr ""

#: ../../releases/1.2.txt:436
# 19d24e9a07c44cf8bce08f55a111f57c
msgid "All contrib apps use a ``csrf_protect`` decorator to protect the view. This requires the use of the ``csrf_token`` template tag in the template. If you have used custom templates for contrib views, you MUST READ THE UPGRADE INSTRUCTIONS to fix those templates."
msgstr ""

#: ../../releases/1.2.txt:441
#: ../../releases/1.2.txt:869
#: ../../releases/1.2-alpha-1.txt:38
#: ../../releases/1.2-alpha-1.txt:206
# b629038d0bed499f8655b383f78dc6e3
# b12b7a27882043d9810f63861ffb2b7d
# 81fd2feae6b746558ffa05d529ea32ad
# 6dc787c21b01448ea9b7e2fd213db4fb
msgid "Documentation removed"
msgstr ""

#: ../../releases/1.2.txt:443
#: ../../releases/1.2.txt:871
#: ../../releases/1.2-alpha-1.txt:40
#: ../../releases/1.2-alpha-1.txt:208
# fe2c30ab16e24df2a7a11fa33c6ec68b
# 6c3c941f46e3499ca2641b213d53ce2b
# 07b9f4bcee964cdb9fa76a67e1b91238
# 59a4753cb9bf48e995c1624756051cdc
msgid "The upgrade notes have been removed in current Django docs. Please refer to the docs for Django 1.3 or older to find these instructions."
msgstr ""

#: ../../releases/1.2.txt:446
# 9fc2b721110a4d799bd78a3447f87695
msgid "``CsrfViewMiddleware`` is included in :setting:`MIDDLEWARE_CLASSES` by default. This turns on CSRF protection by default, so views that accept POST requests need to be written to work with the middleware. Instructions on how to do this are found in the CSRF docs."
msgstr ""

#: ../../releases/1.2.txt:451
# 4b8815a9e41343f2a1a3c127e783c691
msgid "All of the CSRF has moved from contrib to core (with backwards compatible imports in the old locations, which are deprecated and will cease to be supported in Django 1.4)."
msgstr ""

#: ../../releases/1.2.txt:456
# 2925a7bdc50e425c8ec1256c9cafbfe3
msgid "``get_db_prep_*()`` methods on ``Field``"
msgstr ""

#: ../../releases/1.2.txt:458
# 720348a9a30540dda549183f34aa5ee3
msgid "Prior to Django 1.2, a custom ``Field`` had the option of defining several functions to support conversion of Python values into database-compatible values. A custom field might look something like::"
msgstr ""

#: ../../releases/1.2.txt:476
#: ../../releases/1.2-alpha-1.txt:117
# 10e6c8a3b80040a6a9347eaae7aff768
# 783f94750ab3406c99c888b597e4cf59
msgid "In 1.2, these three methods have undergone a change in prototype, and two extra methods have been introduced::"
msgstr ""

#: ../../releases/1.2.txt:500
# 7d5aac3d82ad48b6a5cca6a8eeb2a946
msgid "These changes are required to support multiple databases -- ``db_type`` and ``get_db_prep_*`` can no longer make any assumptions regarding the database for which it is preparing. The ``connection`` argument now provides the preparation methods with the specific connection for which the value is being prepared."
msgstr ""

#: ../../releases/1.2.txt:506
# ca46308bfb7349ffab057cd6152e8708
msgid "The two new methods exist to differentiate general data-preparation requirements from requirements that are database-specific. The ``prepared`` argument is used to indicate to the database-preparation methods whether generic value preparation has been performed. If an unprepared (i.e., ``prepared=False``) value is provided to the ``get_db_prep_*()`` calls, they should invoke the corresponding ``get_prep_*()`` calls to perform generic data preparation."
msgstr ""

#: ../../releases/1.2.txt:514
# 6836e74eee48496e9b5bd37787bd5587
msgid "We've provided conversion functions that will transparently convert functions adhering to the old prototype into functions compatible with the new prototype. However, these conversion functions will be removed in Django 1.4, so you should upgrade your ``Field`` definitions to use the new prototype as soon as possible."
msgstr ""

#: ../../releases/1.2.txt:520
# ded47d718420490588cec49d4a4d43cc
msgid "If your ``get_db_prep_*()`` methods made no use of the database connection, you should be able to upgrade by renaming ``get_db_prep_value()`` to ``get_prep_value()`` and ``get_db_prep_lookup()`` to ``get_prep_lookup()``. If you require database specific conversions, then you will need to provide an implementation ``get_db_prep_*`` that uses the ``connection`` argument to resolve database-specific values."
msgstr ""

#: ../../releases/1.2.txt:529
#: ../../releases/1.2-alpha-1.txt:167
# 5b47b12fbc5942e18eb50f48b944156e
# bb4a85170bae40d784939f7b507f15a5
msgid "Stateful template tags"
msgstr ""

#: ../../releases/1.2.txt:531
# edc4c9a9c31f4dd0a70157a155839c9f
msgid "Template tags that store rendering state on their ``Node`` subclass have always been vulnerable to thread-safety and other issues; as of Django 1.2, however, they may also cause problems when used with the new :ref:`cached template loader<template-loaders>`."
msgstr ""

#: ../../releases/1.2.txt:536
# 33c2abdf8a3744dc92db0b023b5d812f
msgid "All of the built-in Django template tags are safe to use with the cached loader, but if you're using custom template tags that come from third party packages, or from your own code, you should ensure that the ``Node`` implementation for each tag is thread-safe. For more information, see :ref:`template tag thread safety considerations<template_tag_thread_safety>`."
msgstr ""

#: ../../releases/1.2.txt:543
# c6fca0f2fa9d4dec9832cb68208ca767
msgid "You may also need to update your templates if you were relying on the implementation of Django's template tags *not* being thread safe. The :ttag:`cycle` tag is the most likely to be affected in this way, especially when used in conjunction with the :ttag:`include` tag. Consider the following template fragment::"
msgstr ""

#: ../../releases/1.2.txt:553
# 322d7d836be64d189d523365794ce3ef
msgid "with a ``subtemplate.html`` that reads::"
msgstr ""

#: ../../releases/1.2.txt:557
# 517833de52b34eb39f20a3e7bf7e462e
msgid "Using the non-thread-safe, pre-Django 1.2 renderer, this would output::"
msgstr ""

#: ../../releases/1.2.txt:561
# 049c35b2e6db408ca12945fdc97ebbae
msgid "Using the thread-safe Django 1.2 renderer, you will instead get::"
msgstr ""

#: ../../releases/1.2.txt:565
# ad9fec8957cf44209ba69bf766bea238
msgid "This is because each rendering of the :ttag:`include` tag is an independent rendering. When the :ttag:`cycle` tag was not thread safe, the state of the :ttag:`cycle` tag would leak between multiple renderings of the same :ttag:`include`. Now that the :ttag:`cycle` tag is thread safe, this leakage no longer occurs."
msgstr ""

#: ../../releases/1.2.txt:572
# 815056ade983472db01ed28f32593364
msgid "``user_passes_test``, ``login_required`` and ``permission_required``"
msgstr ""

#: ../../releases/1.2.txt:574
# 4fa54c9a24aa4f2aac3db3f4f6f26c91
msgid "``django.contrib.auth.decorators`` provides the decorators ``login_required``, ``permission_required`` and ``user_passes_test``. Previously it was possible to use these decorators both on functions (where the first argument is 'request') and on methods (where the first argument is 'self', and the second argument is 'request'). Unfortunately, flaws were discovered in the code supporting this: it only works in limited circumstances, and produces errors that are very difficult to debug when it does not work."
msgstr ""

#: ../../releases/1.2.txt:584
# 930b8c02814d464aa1568f255bc91820
msgid "For this reason, the 'auto adapt' behavior has been removed, and if you are using these decorators on methods, you will need to manually apply :func:`django.utils.decorators.method_decorator` to convert the decorator to one that works with methods. For example, you would change code from this::"
msgstr ""

#: ../../releases/1.2.txt:606
#: ../../releases/1.6.txt:971
# f8f38113cbe746169fe3810a28382994
# ebd236e7db1342158cc679b53084a11e
msgid "or::"
msgstr ""

#: ../../releases/1.2.txt:618
# 6aaf5bbe39574baaba519528754d2a4c
msgid "For those of you who've been following the development trunk, this change also applies to other decorators introduced since 1.1, including ``csrf_protect``, ``cache_control`` and anything created using ``decorator_from_middleware``."
msgstr ""

#: ../../releases/1.2.txt:624
#: ../../releases/1.2-alpha-1.txt:53
# 32172d3f943c40448bebd570d0400c98
# 5d299bc390e24a9aa5f48555719e5e04
msgid ":ttag:`if` tag changes"
msgstr ""

#: ../../releases/1.2.txt:626
# 962e5e0417624e67b12c6081f09ba3c7
msgid "Due to new features in the :ttag:`if` template tag, it no longer accepts 'and', 'or' and 'not' as valid **variable** names. Previously, these strings could be used as variable names. Now, the keyword status is always enforced, and template code such as ``{% if not %}`` or ``{% if and %}`` will throw a ``TemplateSyntaxError``. Also, ``in`` is a new keyword and so is not a valid variable name in this tag."
msgstr ""

#: ../../releases/1.2.txt:634
#: ../../releases/1.2-alpha-1.txt:62
# 711f2af43bfb4674b2dda1615de28ee0
# db2e5f1d75cb46d8835988333c78d23a
msgid "``LazyObject``"
msgstr ""

#: ../../releases/1.2.txt:636
# 2195b5ef748f44afa85e81a7bd41204e
msgid "``LazyObject`` is an undocumented-but-often-used utility class used for lazily wrapping other objects of unknown type."
msgstr ""

#: ../../releases/1.2.txt:639
# ba2df1378157468dbc0dbc1869d115e1
msgid "In Django 1.1 and earlier, it handled introspection in a non-standard way, depending on wrapped objects implementing a public method named ``get_all_members()``. Since this could easily lead to name clashes, it has been changed to use the standard Python introspection method, involving ``__members__`` and ``__dir__()``."
msgstr ""

#: ../../releases/1.2.txt:645
# 975ed8502d374774ac7a0e1734f6dfcb
msgid "If you used ``LazyObject`` in your own code and implemented the ``get_all_members()`` method for wrapped objects, you'll need to make a couple of changes:"
msgstr ""

#: ../../releases/1.2.txt:649
# 4d6d1e4642b14f9888be4a48fe1db222
msgid "First, if your class does not have special requirements for introspection (i.e., you have not implemented ``__getattr__()`` or other methods that allow for attributes not discoverable by normal mechanisms), you can simply remove the ``get_all_members()`` method. The default implementation on ``LazyObject`` will do the right thing."
msgstr ""

#: ../../releases/1.2.txt:655
# 7d36e78df4944ca28fc7efdf469480dc
msgid "If you have more complex requirements for introspection, first rename the ``get_all_members()`` method to ``__dir__()``. This is the standard introspection method for Python 2.6 and above. If you require support for Python versions earlier than 2.6, add the following code to the class::"
msgstr ""

#: ../../releases/1.2.txt:663
# 1e1e57916513409ab2534e6a2f769d43
msgid "``__dict__`` on model instances"
msgstr ""

#: ../../releases/1.2.txt:665
#: ../../releases/1.2-alpha-1.txt:89
# 06d1577b383a45ca869db1f1907dfca4
# d16c970da5d8498a85277e0a14a78750
msgid "Historically, the ``__dict__`` attribute of a model instance has only contained attributes corresponding to the fields on a model."
msgstr ""

#: ../../releases/1.2.txt:668
# 390bab461f6a46d3a26b1817f2a7f513
msgid "In order to support multiple database configurations, Django 1.2 has added a ``_state`` attribute to object instances. This attribute will appear in ``__dict__`` for a model instance. If your code relies on iterating over ``__dict__`` to obtain a list of fields, you must now be prepared to handle or filter out the ``_state`` attribute."
msgstr ""

#: ../../releases/1.2.txt:677
# d0ddfbb597184c18bb379233724e4039
msgid "The exit status code of the test runners (``tests/runtests.py`` and ``python manage.py test``) no longer represents the number of failed tests, because a failure of 256 or more tests resulted in a wrong exit status code. The exit status code for the test runner is now 0 for success (no failing tests) and 1 for any number of test failures. If needed, the number of test failures can be found at the end of the test runner's output."
msgstr ""

#: ../../releases/1.2.txt:687
# 492cd952ffd5445c8c46864efde256bf
msgid "To fix bugs with cookies in Internet Explorer, Safari, and possibly other browsers, our encoding of cookie values was changed so that the comma and semicolon are treated as non-safe characters, and are therefore encoded as ``\\054`` and ``\\073`` respectively.  This could produce backwards incompatibilities, especially if you are storing comma or semi-colon in cookies and have javascript code that parses and manipulates cookie values client-side."
msgstr ""

#: ../../releases/1.2.txt:696
# 33e479a42a794e01af4e196ed8410592
msgid "``ModelForm.is_valid()`` and ``ModelForm.errors``"
msgstr ""

#: ../../releases/1.2.txt:698
# 6e7d4c4419f1435991bb18eb1f2f2c95
msgid "Much of the validation work for ModelForms has been moved down to the model level. As a result, the first time you call ``ModelForm.is_valid()``, access ``ModelForm.errors`` or otherwise trigger form validation, your model will be cleaned in-place. This conversion used to happen when the model was saved. If you need an unmodified instance of your model, you should pass a copy to the ``ModelForm`` constructor."
msgstr ""

#: ../../releases/1.2.txt:706
# 985bd679346344889149c3af55b8b431
msgid "``BooleanField`` on MySQL"
msgstr ""

#: ../../releases/1.2.txt:708
# 58668fda76044df6b560589ee7dbb8c7
msgid "In previous versions of Django, a model's ``BooleanField`` under MySQL would return its value as either ``1`` or ``0``, instead of ``True`` or ``False``; for most people this wasn't a problem because ``bool`` is a subclass of ``int`` in Python. In Django 1.2, however, ``BooleanField`` on MySQL correctly returns a real ``bool``.  The only time this should ever be an issue is if you were expecting the ``repr`` of a ``BooleanField`` to print ``1`` or ``0``."
msgstr ""

#: ../../releases/1.2.txt:717
# 9ff6c867afd046968e01152e4c62a2e4
msgid "Changes to the interpretation of ``max_num`` in FormSets"
msgstr ""

#: ../../releases/1.2.txt:719
# 3544a62749ac40479c7d809386f023f4
msgid "As part of enhancements made to the handling of FormSets, the default value and interpretation of the ``max_num`` parameter to the :ref:`django.forms.formsets.formset_factory() <formsets-max-num>` and :ref:`django.forms.models.modelformset_factory() <model-formsets-max-num>` functions has changed slightly. This change also affects the way the ``max_num`` argument is :ref:`used for inline admin objects <ref-contrib-admin-inline-max-num>`"
msgstr ""

#: ../../releases/1.2.txt:727
# 74abf8cae4fc4176babb63669c94e496
msgid "Previously, the default value for ``max_num`` was ``0`` (zero). FormSets then used the boolean value of ``max_num`` to determine if a limit was to be imposed on the number of generated forms. The default value of ``0`` meant that there was no default limit on the number of forms in a FormSet."
msgstr ""

#: ../../releases/1.2.txt:733
# 1b160ef30ec540708a13453bf4dd4e49
msgid "Starting with 1.2, the default value for ``max_num`` has been changed to ``None``, and FormSets will differentiate between a value of ``None`` and a value of ``0``. A value of ``None`` indicates that no limit on the number of forms is to be imposed; a value of ``0`` indicates that a maximum of 0 forms should be imposed. This doesn't necessarily mean that no forms will be displayed -- see the :ref:`ModelFormSet documentation <model-formsets-max-num>` for more details."
msgstr ""

#: ../../releases/1.2.txt:742
# d6bd2e3bfa4c47ba87706a85abfb6b96
msgid "If you were manually specifying a value of ``0`` for ``max_num``, you will need to update your FormSet and/or admin definitions."
msgstr ""

#: ../../releases/1.2.txt:747
# fbec1247e9c448a0bf3c1042cdfaa316
msgid ":ref:`1.2-js-assisted-inlines`"
msgstr ""

#: ../../releases/1.2.txt:750
# 65d3ce26afa14413a1cbfb3f41bb8782
msgid "``email_re``"
msgstr ""

#: ../../releases/1.2.txt:752
# 66b1b6bc9af1453f864e7ef77c325525
msgid "An undocumented regular expression for validating email addresses has been moved from ``django.form.fields`` to ``django.core.validators``. You will need to update your imports if you are using it."
msgstr ""

#: ../../releases/1.2.txt:759
#: ../../releases/1.2-alpha-1.txt:191
# 3b1e3797fbf84b1fb0bdfe3a389f9c24
# 620750081c7f4783b4e7521af58a0e3c
msgid "Features deprecated in 1.2"
msgstr ""

#: ../../releases/1.2.txt:761
# 278204103bee43d4ba3817b8070c2610
msgid "Finally, Django 1.2 deprecates some features from earlier releases. These features are still supported, but will be gradually phased out over the next few release cycles."
msgstr ""

#: ../../releases/1.2.txt:765
# e8011f55b46240edb50317b3e7b08a8a
msgid "Code taking advantage of any of the features below will raise a ``PendingDeprecationWarning`` in Django 1.2. This warning will be silent by default, but may be turned on using Python's :mod:`warnings` module, or by running Python with a ``-Wd`` or ``-Wall`` flag."
msgstr ""

#: ../../releases/1.2.txt:770
# 1289d49ccf9d4485ba2262ab56ebb236
msgid "In Django 1.3, these warnings will become a ``DeprecationWarning``, which is *not* silent. In Django 1.4 support for these features will be removed entirely."
msgstr ""

#: ../../releases/1.2.txt:776
# 5de980ac6e0348d9b2f87b83d47a9f34
msgid "For more details, see the documentation :doc:`Django's release process </internals/release-process>` and our :doc:`deprecation timeline </internals/deprecation>`.`"
msgstr ""

#: ../../releases/1.2.txt:783
#: ../../releases/1.2-alpha-1.txt:248
# 5410bd43e83d4b0a8855f1a204241384
# d9497932b9244659a353aed8306dee69
msgid "Specifying databases"
msgstr ""

#: ../../releases/1.2.txt:785
# 398cf42e15974891b9da56c655ed5224
msgid "Prior to Django 1.2, Django used a number of settings to control access to a single database. Django 1.2 introduces support for multiple databases, and as a result the way you define database settings has changed."
msgstr ""

#: ../../releases/1.2.txt:790
# 92126c10e53f4895829d347e4c58fe0a
msgid "Any existing Django settings file will continue to work as expected until Django 1.4. Until then, old-style database settings will be automatically translated to the new-style format."
msgstr ""

#: ../../releases/1.2.txt:794
# 80f88557c0ab483ba4c4a05a0ea07bea
msgid "In the old-style (pre 1.2) format, you had a number of ``DATABASE_`` settings in your settings file. For example::"
msgstr ""

#: ../../releases/1.2.txt:802
# f64d68434b4f41e2816e9529b9cdcd3a
msgid "These settings are now in a dictionary named :setting:`DATABASES`. Each item in the dictionary corresponds to a single database connection, with the name ``'default'`` describing the default database connection. The setting names have also been shortened. The previous sample settings would now look like this::"
msgstr ""

#: ../../releases/1.2.txt:817
#: ../../releases/1.2-alpha-1.txt:283
# 973699cf3e1241dc888bd4be2dc67b65
# 6603ef8d964242a68026b704ed1fe445
msgid "This affects the following settings:"
msgstr ""

#: ../../releases/1.2.txt:820
#: ../../releases/1.2-alpha-1.txt:286
# d9611ea20dd94e0285185137ad9dab81
# fc971239ded84567aa0dc2e99235d399
msgid "Old setting"
msgstr ""

#: ../../releases/1.2.txt:820
#: ../../releases/1.2-alpha-1.txt:286
# ba72dcaa36614ea783154bcc20eb8d8d
# 7790a84a846545849928f99b8057a7a4
msgid "New Setting"
msgstr ""

#: ../../releases/1.2.txt:822
#: ../../releases/1.2-alpha-1.txt:288
# e943178725c94d74b567d2be41b4ae21
# 800b84bb24ca4659a4d840603cbcccf6
msgid "`DATABASE_ENGINE`"
msgstr ""

#: ../../releases/1.2.txt:822
#: ../../releases/1.2-alpha-1.txt:288
# 6cfc29fe95844282966dbaeb82e792ca
# f9289f4ddad046719f7356eba0edab2a
msgid ":setting:`ENGINE <DATABASE-ENGINE>`"
msgstr ""

#: ../../releases/1.2.txt:823
#: ../../releases/1.2-alpha-1.txt:289
# 428ae7e49c174cfcb8b4db76a2e4220c
# c6d9ed902c2b468eb3bd51690d670257
msgid "`DATABASE_HOST`"
msgstr ""

#: ../../releases/1.2.txt:823
#: ../../releases/1.2-alpha-1.txt:289
# 54e058b66c3a42d085e30d9d2918a372
# 39315ef43eb744a69cd81d9bd176e050
msgid ":setting:`HOST`"
msgstr ""

#: ../../releases/1.2.txt:824
#: ../../releases/1.2-alpha-1.txt:290
# 6a3ef8d6db9a412790f00d560c72c880
# 0c0948cf3919428dafa49cac5759c746
msgid "`DATABASE_NAME`"
msgstr ""

#: ../../releases/1.2.txt:824
#: ../../releases/1.2-alpha-1.txt:290
# 7a4269dfdd9c4ad588d6d4fef4afb082
# 685fab40657c4f82b950db9d5a733161
msgid ":setting:`NAME`"
msgstr ""

#: ../../releases/1.2.txt:825
#: ../../releases/1.2-alpha-1.txt:291
# bc9b40f41ec449a8aee74f56a5166c21
# fc9fc2970f0e4f54bb27cfcf26d10095
msgid "`DATABASE_OPTIONS`"
msgstr ""

#: ../../releases/1.2.txt:825
#: ../../releases/1.2-alpha-1.txt:291
# 3163ab04e98a424c94e8a00e9c9796f0
# 0d656c385ae14fee9591baadf4f28815
msgid ":setting:`OPTIONS`"
msgstr ""

#: ../../releases/1.2.txt:826
#: ../../releases/1.2-alpha-1.txt:292
# 54a4143d7039467a8fd3ec3f1082c205
# 3d906a0679854f129578aa6e672c8b6a
msgid "`DATABASE_PASSWORD`"
msgstr ""

#: ../../releases/1.2.txt:826
#: ../../releases/1.2-alpha-1.txt:292
# 6ede43b844504bf9b259a1cae27af5fb
# 0b27a3bc251446f3a69e2d5cf4ef0fd3
msgid ":setting:`PASSWORD`"
msgstr ""

#: ../../releases/1.2.txt:827
#: ../../releases/1.2-alpha-1.txt:293
# 2b7069dfec3d4803b94995b100ec2158
# 2f794814645e46faab3dfb0cf3e8108e
msgid "`DATABASE_PORT`"
msgstr ""

#: ../../releases/1.2.txt:827
#: ../../releases/1.2-alpha-1.txt:293
# 2fa0fb0e2d544d78bb8bfc8bf1e6e7be
# d32779ef26eb49baa44c1f5741329ea5
msgid ":setting:`PORT`"
msgstr ""

#: ../../releases/1.2.txt:828
#: ../../releases/1.2-alpha-1.txt:294
# 7dc47e1e8b43411d9a36d3104938104c
# 4e485c315b5a4a2da4ae2b8bcc3b6ff5
msgid "`DATABASE_USER`"
msgstr ""

#: ../../releases/1.2.txt:828
#: ../../releases/1.2-alpha-1.txt:294
# 5af4ec06f1ce4e30aba309ea800f8dfa
# 3e1a09d6635a4f889a4b68c40dd35093
msgid ":setting:`USER`"
msgstr ""

#: ../../releases/1.2.txt:829
#: ../../releases/1.2-alpha-1.txt:295
# e236123b981f45b08eb84dde683ab0cc
# bb31fc3f82b34893b8fc505b51e06c53
msgid "`TEST_DATABASE_CHARSET`"
msgstr ""

#: ../../releases/1.2.txt:829
#: ../../releases/1.2-alpha-1.txt:295
# 4a6486e838274a4296c08ec6665c5f15
# fd1b5a50c24a4d90b777aa233c0a0720
msgid ":setting:`TEST_CHARSET`"
msgstr ""

#: ../../releases/1.2.txt:830
#: ../../releases/1.2-alpha-1.txt:296
# f0c4f24587994f90936b0fae5606706b
# 73f4350ea6a74fd28a4b5455daf90414
msgid "`TEST_DATABASE_COLLATION`"
msgstr ""

#: ../../releases/1.2.txt:830
#: ../../releases/1.2-alpha-1.txt:296
# a14e906701444cd0bfac1a11e16fc110
# 3a43221590e64cbaa6ceed8338fbed47
msgid ":setting:`TEST_COLLATION`"
msgstr ""

#: ../../releases/1.2.txt:831
#: ../../releases/1.2-alpha-1.txt:297
# 0c0cc2d9e47540faaaf5237aadcb5752
# 948f34a05ab04472813f12713ba9f3a1
msgid "`TEST_DATABASE_NAME`"
msgstr ""

#: ../../releases/1.2.txt:831
#: ../../releases/1.2-alpha-1.txt:297
# 688df77d04f94fa0b4341a557243eb3c
# 7d2a824733db4123b4ff5e4db6ee7e23
msgid ":setting:`TEST_NAME`"
msgstr ""

#: ../../releases/1.2.txt:834
#: ../../releases/1.2-alpha-1.txt:300
# ffa80bf902364b4c9d22f91014106fa8
# 5a930c05578d48daa21be3fad524c350
msgid "These changes are also required if you have manually created a database connection using ``DatabaseWrapper()`` from your database backend of choice."
msgstr ""

#: ../../releases/1.2.txt:837
#: ../../releases/1.2-alpha-1.txt:303
# db77f79631e844eca17de3153328c2df
# 8bbdf66f3f4246ce90a27007105b478e
msgid "In addition to the change in structure, Django 1.2 removes the special handling for the built-in database backends. All database backends must now be specified by a fully qualified module name (i.e., ``django.db.backends.postgresql_psycopg2``, rather than just ``postgresql_psycopg2``)."
msgstr ""

#: ../../releases/1.2.txt:844
# a3c72f56ebd0445cb2b3e80ac31f1cee
msgid "``postgresql`` database backend"
msgstr ""

#: ../../releases/1.2.txt:846
# 865b969a497b40e9aaceb8a97a7b23bf
msgid "The ``psycopg1`` library has not been updated since October 2005. As a result, the ``postgresql`` database backend, which uses this library, has been deprecated."
msgstr ""

#: ../../releases/1.2.txt:850
# c79fe044c4534d11992b17ee81a51494
msgid "If you are currently using the ``postgresql`` backend, you should migrate to using the ``postgresql_psycopg2`` backend. To update your code, install the ``psycopg2`` library and change the :setting:`ENGINE <DATABASE-ENGINE>` setting to use ``django.db.backends.postgresql_psycopg2``."
msgstr ""

#: ../../releases/1.2.txt:857
# 87585953050f4bd1b205a198bf3a1c0b
msgid "CSRF response-rewriting middleware"
msgstr ""

#: ../../releases/1.2.txt:859
# 08601703c19c4eab94f1a6ca8d79ff5d
msgid "``CsrfResponseMiddleware``, the middleware that automatically inserted CSRF tokens into ``POST`` forms in outgoing pages, has been deprecated in favor of a template tag method (see above), and will be removed completely in Django 1.4. ``CsrfMiddleware``, which includes the functionality of ``CsrfResponseMiddleware`` and ``CsrfViewMiddleware``, has likewise been deprecated."
msgstr ""

#: ../../releases/1.2.txt:866
#: ../../releases/1.2-alpha-1.txt:203
# ffe6573fd8ff43b9b24bbea2c6468ad9
# 276436837d05456da0b6dae6bf61589b
msgid "Also, the CSRF module has moved from contrib to core, and the old imports are deprecated, as described in the upgrading notes."
msgstr ""

#: ../../releases/1.2.txt:875
#: ../../releases/1.2-alpha-1.txt:212
# ceb0f80150e3418c8608069bcc14cb8b
# 7432a821dacd447d865eaf67528d5025
msgid "``SMTPConnection``"
msgstr ""

#: ../../releases/1.2.txt:877
# 980d993104e24bdeaab014aaabc6d612
msgid "The ``SMTPConnection`` class has been deprecated in favor of a generic email backend API. Old code that explicitly instantiated an instance of an SMTPConnection::"
msgstr ""

#: ../../releases/1.2.txt:886
# 46c8c887bfe5485095379376632911b3
msgid "...should now call :meth:`~django.core.mail.get_connection()` to instantiate a generic email connection::"
msgstr ""

#: ../../releases/1.2.txt:894
#: ../../releases/1.2-alpha-1.txt:231
# 813518dab0b9405a867aac698b0b5e3e
# 0c630ffad1c1400fae84907876d98907
msgid "Depending on the value of the :setting:`EMAIL_BACKEND` setting, this may not return an SMTP connection. If you explicitly require an SMTP connection with which to send email, you can explicitly request an SMTP connection::"
msgstr ""

#: ../../releases/1.2.txt:904
#: ../../releases/1.2-alpha-1.txt:241
# ba9582bfaaa840ebb3bf8cbf146fad24
# d9442046deea4da7b5fa8c0203fb6bcd
msgid "If your call to construct an instance of ``SMTPConnection`` required additional arguments, those arguments can be passed to the :meth:`~django.core.mail.get_connection()` call::"
msgstr ""

#: ../../releases/1.2.txt:911
#: ../../releases/1.2-alpha-1.txt:310
# a56128a52eb54bba80e10b1ce68408d2
# 94ba6cb5e81e46aa826259e8601848cd
msgid "User Messages API"
msgstr ""

#: ../../releases/1.2.txt:913
#: ../../releases/1.2-alpha-1.txt:312
# ad1c97b817634a33b6d5017f0786391c
# fb704fd76c184985ac8ba328190aa5f3
msgid "The API for storing messages in the user ``Message`` model (via ``user.message_set.create``) is now deprecated and will be removed in Django 1.4 according to the standard :doc:`release process </internals/release-process>`."
msgstr ""

#: ../../releases/1.2.txt:917
# 36ce5cc394b046b188f6d45992da8e37
msgid "To upgrade your code, you need to replace any instances of this::"
msgstr ""

#: ../../releases/1.2.txt:921
# 43803da769a54e1a9ff8af8d9feed32f
msgid "...with the following::"
msgstr ""

#: ../../releases/1.2.txt:926
#: ../../releases/1.2-alpha-1.txt:325
# d86000ab089140f18348d4303c53c401
# 07288b51239044e293ca3f49951486e9
msgid "Additionally, if you make use of the method, you need to replace the following::"
msgstr ""

#: ../../releases/1.2.txt:932
# 31eb9fa99b3148589c6a88565fcdf047
msgid "...with::"
msgstr ""

#: ../../releases/1.2.txt:938
#: ../../releases/1.2-alpha-1.txt:337
# a138c551491d43f4bb8c70ad8fcd25cb
# 3ba1759755ca42988e5c55703f7e3c59
msgid "For more information, see the full :doc:`messages documentation </ref/contrib/messages>`. You should begin to update your code to use the new API immediately."
msgstr ""

#: ../../releases/1.2.txt:943
#: ../../releases/1.2-alpha-1.txt:342
# e9fa5d80493d4ddb9a3aaa15c581a500
# d88717ede00f438a9cec877e59af07eb
msgid "Date format helper functions"
msgstr ""

#: ../../releases/1.2.txt:945
# 3d86dabd9b5b4d35a4ca2c6d482b48ad
msgid "``django.utils.translation.get_date_formats()`` and ``django.utils.translation.get_partial_date_formats()`` have been deprecated in favor of the appropriate calls to ``django.utils.formats.get_format()``, which is locale-aware when :setting:`USE_L10N` is set to ``True``, and falls back to default settings if set to ``False``."
msgstr ""

#: ../../releases/1.2.txt:951
# af9cbdce092143d7a1210bd5f9c794fc
msgid "To get the different date formats, instead of writing this::"
msgstr ""

#: ../../releases/1.2.txt:956
# d6fec73890cc40d28a7f41c79445abe1
msgid "...use::"
msgstr ""

#: ../../releases/1.2.txt:963
# df48be5787ac48d394645dbac5503e98
msgid "Or, when directly formatting a date value::"
msgstr ""

#: ../../releases/1.2.txt:968
#: ../../releases/1.2-alpha-1.txt:368
# 99db488d7f0948bcb6abf88774e053d7
# 3c93b87753a2433e8cd4774c0d4a81d9
msgid "The same applies to the globals found in ``django.forms.fields``:"
msgstr ""

#: ../../releases/1.2.txt:970
#: ../../releases/1.2-alpha-1.txt:370
# 77e513bff6b44246842f8ba02d35a335
# 1c12f6793cb5457d92d0c25302f83d94
msgid "``DEFAULT_DATE_INPUT_FORMATS``"
msgstr ""

#: ../../releases/1.2.txt:971
#: ../../releases/1.2-alpha-1.txt:371
# 8974f34a52fe4618b02a9d2e8411ada8
# 5ea07f0d42a244519cc549d11883e09d
msgid "``DEFAULT_TIME_INPUT_FORMATS``"
msgstr ""

#: ../../releases/1.2.txt:972
#: ../../releases/1.2-alpha-1.txt:372
# 93151dd80a8f4cb5be1be2b919eb9184
# f1cfacda824440d68d3de1d1d119be0f
msgid "``DEFAULT_DATETIME_INPUT_FORMATS``"
msgstr ""

#: ../../releases/1.2.txt:974
#: ../../releases/1.2-alpha-1.txt:374
# b01afb060de741c9b11b82aeea651b1d
# b5bdb6c46a8b4ca7a7e02e994afa7a25
msgid "Use ``django.utils.formats.get_format()`` to get the appropriate formats."
msgstr ""

#: ../../releases/1.2.txt:977
# b1afb765126a4dd08eb5a2957e991ab3
msgid "Function-based test runners"
msgstr ""

#: ../../releases/1.2.txt:979
#: ../../releases/1.2-beta-1.txt:41
# c782aae35ab448e4a43c90e7192017c7
# 261871b51c3b4a2b94f20692aebcf150
msgid "Django 1.2 changes the test runner tools to use a class-based approach. Old style function-based test runners will still work, but should be updated to use the new :ref:`class-based runners <topics-testing-test_runner>`."
msgstr ""

#: ../../releases/1.2.txt:987
# 73335a39f08d4479bc89c176c168346c
msgid "``Feed`` in ``django.contrib.syndication.feeds``"
msgstr ""

#: ../../releases/1.2.txt:989
# 2b7388502b4e47ed88e0b8122cd7590c
msgid "The ``django.contrib.syndication.feeds.Feed`` class has been replaced by the :class:`django.contrib.syndication.views.Feed` class. The old ``feeds.Feed`` class is deprecated, and will be removed in Django 1.4."
msgstr ""

#: ../../releases/1.2.txt:994
# 971b958427a846b1872d342727861628
msgid "The new class has an almost identical API, but allows instances to be used as views. For example, consider the use of the old framework in the following :doc:`URLconf </topics/http/urls>`::"
msgstr ""

#: ../../releases/1.2.txt:1013
# 85dcd1b5428446b29b3abd2ec33b12a7
msgid "Using the new Feed class, these feeds can be deployed directly as views::"
msgstr ""

#: ../../releases/1.2.txt:1025
# 957c1897cc9349f3ad3a82ca5f8558c8
msgid "If you currently use the ``feed()`` view, the ``LatestEntries`` class would often not need to be modified apart from subclassing the new :class:`~django.contrib.syndication.views.Feed` class. The exception is if Django was automatically working out the name of the template to use to render the feed's description and title elements (if you were not specifying the ``title_template`` and ``description_template`` attributes). You should ensure that you always specify ``title_template`` and ``description_template`` attributes, or provide ``item_title()`` and ``item_description()`` methods."
msgstr ""

#: ../../releases/1.2.txt:1034
# a3b524d50c154f1cb34e526e4d9d02c1
msgid "However, ``LatestEntriesByCategory`` uses the ``get_object()`` method with the ``bits`` argument to specify a specific category to show. In the new :class:`~django.contrib.syndication.views.Feed` class, ``get_object()`` method takes a ``request`` and arguments from the URL, so it would look like this::"
msgstr ""

#: ../../releases/1.2.txt:1050
# 5c64b53fe807401e8d0a6eb5b8467e42
msgid "Additionally, the ``get_feed()`` method on ``Feed`` classes now take different arguments, which may impact you if you use the ``Feed`` classes directly. Instead of just taking an optional ``url`` argument, it now takes two arguments: the object returned by its own ``get_object()`` method, and the current ``request`` object."
msgstr ""

#: ../../releases/1.2.txt:1056
# 909efc77d18f4605aa184756965e2b85
msgid "To take into account ``Feed`` classes not being initialized for each request, the ``__init__()`` method now takes no arguments by default. Previously it would have taken the ``slug`` from the URL and the ``request`` object."
msgstr ""

#: ../../releases/1.2.txt:1061
# 8c5a1b14a5f0498ea7eacdba7ca8bc91
msgid "In accordance with `RSS best practices`_, RSS feeds will now include an ``atom:link`` element. You may need to update your tests to take this into account."
msgstr ""

#: ../../releases/1.2.txt:1065
#: ../../releases/1.2-beta-1.txt:59
# 4c345a5cb0ab412f908437b930bfdedb
# 1de9605997f342e68f3a122ed6dcf8f8
msgid "For more information, see the full :doc:`syndication framework documentation </ref/contrib/syndication>`."
msgstr ""

#: ../../releases/1.2.txt:1071
# f2e133ae9c264beb8a95db469c8b99c6
msgid "Technical message IDs"
msgstr ""

#: ../../releases/1.2.txt:1073
# ba6eb767479e461e809e1261d70e7fce
msgid "Up to version 1.1 Django used technical message IDs to provide localizers the possibility to translate date and time formats. They were translatable :term:`translation strings <translation string>` that could be recognized because they were all upper case (for example :setting:`DATETIME_FORMAT`, :setting:`DATE_FORMAT`, :setting:`TIME_FORMAT`). They have been deprecated in favor of the new :ref:`Format localization <format-localization>` infrastructure that allows localizers to specify that information in a ``formats.py`` file in the corresponding ``django/conf/locale/<locale name>/`` directory."
msgstr ""

#: ../../releases/1.2.txt:1086
# b46b124032d94fdcbd9671f0b1c47ddb
msgid "To allow support for multiple databases, the GeoDjango database internals were changed substantially.  The largest backwards-incompatible change is that the module ``django.contrib.gis.db.backend`` was renamed to :mod:`django.contrib.gis.db.backends`, where the full-fledged :ref:`spatial database backends <spatial-backends>` now exist.  The following sections provide information on the most-popular APIs that were affected by these changes."
msgstr ""

#: ../../releases/1.2.txt:1095
# f22d1f6a809b486792b174997e73092f
msgid "``SpatialBackend``"
msgstr ""

#: ../../releases/1.2.txt:1097
# ac811083d2a94fe2bb3fb2fdc218804f
msgid "Prior to the creation of the separate spatial backends, the ``django.contrib.gis.db.backend.SpatialBackend`` object was provided as an abstraction to introspect on the capabilities of the spatial database.  All of the attributes and routines provided by ``SpatialBackend`` are now a part of the ``ops`` attribute of the database backend."
msgstr ""

#: ../../releases/1.2.txt:1104
# 83aad2c26a2e4adf86df851a760660a8
msgid "The old module ``django.contrib.gis.db.backend`` is still provided for backwards-compatibility access to a ``SpatialBackend`` object, which is just an alias to the ``ops`` module of the *default* spatial database connection."
msgstr ""

#: ../../releases/1.2.txt:1109
# 177e575cdc7b4628808dca80d536a28e
msgid "Users that were relying on undocumented modules and objects within ``django.contrib.gis.db.backend``, rather the abstractions provided by ``SpatialBackend``, are required to modify their code. For example, the following import which would work in 1.1 and below::"
msgstr ""

#: ../../releases/1.2.txt:1117
# 36e7977d55364ea89b0def755b42780f
msgid "Would need to be changed::"
msgstr ""

#: ../../releases/1.2.txt:1123
# 38d21202061644a2bf9025056b8bd171
msgid "``SpatialRefSys`` and ``GeometryColumns`` models"
msgstr ""

#: ../../releases/1.2.txt:1125
# 0afcc7c9989c4e31856a43596bcb5705
msgid "In previous versions of GeoDjango, :mod:`django.contrib.gis.db.models` had ``SpatialRefSys`` and ``GeometryColumns`` models for querying the OGC spatial metadata tables ``spatial_ref_sys`` and ``geometry_columns``, respectively."
msgstr ""

#: ../../releases/1.2.txt:1130
# c39a031bf6a64e04a98bec8cf30c8e79
msgid "While these aliases are still provided, they are only for the *default* database connection and exist only if the default connection is using a supported spatial database backend."
msgstr ""

#: ../../releases/1.2.txt:1136
# b1026f037f4f49f4b79da48ab2528acf
msgid "Because the table structure of the OGC spatial metadata tables differs across spatial databases, the ``SpatialRefSys`` and ``GeometryColumns`` models can no longer be associated with the ``gis`` application name.  Thus, no models will be returned when using the ``get_models`` method in the following example::"
msgstr ""

#: ../../releases/1.2.txt:1146
# 29ceb8b813334504ab37ede88c4b893d
msgid "To get the correct ``SpatialRefSys`` and ``GeometryColumns`` for your spatial database use the methods provided by the spatial backend::"
msgstr ""

#: ../../releases/1.2.txt:1155
# 77336614307d4b9b8e724849993ac898
msgid "When using the models returned from the ``spatial_ref_sys()`` and ``geometry_columns()`` method, you'll still need to use the correct database alias when querying on the non-default connection. In other words, to ensure that the models in the example above use the correct database::"
msgstr ""

#: ../../releases/1.2.txt:1165
# 4b8c54d2969145feb78eff665b9b5101
msgid "Language code ``no``"
msgstr ""

#: ../../releases/1.2.txt:1167
# d53a20bf6e5c48f5adb70739bddd3c74
msgid "The currently used language code for Norwegian Bokmål ``no`` is being replaced by the more common language code ``nb``."
msgstr ""

#: ../../releases/1.2.txt:1171
# 4192d8c6ea5e444598dcb026adf935b5
msgid "Function-based template loaders"
msgstr ""

#: ../../releases/1.2.txt:1173
# eaeb84682e8545d79b82b12eb601effd
msgid "Django 1.2 changes the template loading mechanism to use a class-based approach. Old style function-based template loaders will still work, but should be updated to use the new :ref:`class-based template loaders <topic-template-alternate-language>`."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:3
# 9373b0a22ca24a01a5398cdfe4fb6993
msgid "Django 1.2 alpha 1 release notes"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:5
# 0ce466bc04a34b1cb7e075802094ece1
msgid "January 5, 2010"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:7
# 68c9ce52cdf94afa8d454d5fde929d81
msgid "Welcome to Django 1.2 alpha 1!"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:9
# 14d6d2ae0439477685131c08f1c9eb67
msgid "This is the first in a series of preview/development releases leading up to the eventual release of Django 1.2, currently scheduled to take place in March 2010. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.2 release."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:25
# b0b0d3c5b7784960874e483f3337b2c1
msgid "There have been large changes to the way that CSRF protection works, detailed in :doc:`the CSRF documentation </ref/contrib/csrf>`.  The following are the major changes that developers must be aware of:"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:29
# e0171a3f9a3c4e7fb9815a0ec6c13c6f
msgid "``CsrfResponseMiddleware`` and ``CsrfMiddleware`` have been deprecated, and **will be removed completely in Django 1.4**, in favor of a template tag that should be inserted into forms."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:33
# 1769555168934e36a2ed0392dbe7fb61
msgid "All contrib apps use a ``csrf_protect`` decorator to protect the view. This requires the use of the ``csrf_token`` template tag in the template, so if you have used custom templates for contrib views, you MUST READ THE UPGRADE INSTRUCTIONS to fix those templates."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:43
# d24bd93063ac48b48fade612fdb5fc2a
msgid "``CsrfViewMiddleware`` is included in :setting:`MIDDLEWARE_CLASSES` by default. This turns on CSRF protection by default, so that views that accept POST requests need to be written to work with the middleware. Instructions on how to do this are found in the CSRF docs."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:48
# f2ddd4f96042404e81e53b876ebc4a31
msgid "CSRF-related code has moved from ``contrib`` to ``core`` (with backwards compatible imports in the old locations, which are deprecated)."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:55
# 1340bc024f8c43d0b9540c52c711ef24
msgid "Due to new features in the :ttag:`if` template tag, it no longer accepts 'and', 'or' and 'not' as valid **variable** names.  Previously that worked in some cases even though these strings were normally treated as keywords.  Now, the keyword status is always enforced, and template code like ``{% if not %}`` or ``{% if and %}`` will throw a TemplateSyntaxError."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:64
# 1ef2d2a1026e41f992abf4b261e076d9
msgid "``LazyObject`` is an undocumented utility class used for lazily wrapping other objects of unknown type.  In Django 1.1 and earlier, it handled introspection in a non-standard way, depending on wrapped objects implementing a public method ``get_all_members()``. Since this could easily lead to name clashes, it has been changed to use the standard method, involving ``__members__`` and ``__dir__()``. If you used ``LazyObject`` in your own code, and implemented the ``get_all_members()`` method for wrapped objects, you need to make the following changes:"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:73
# 984b0e44f06a4c2893a3119318fd7328
msgid "If your class does not have special requirements for introspection (i.e. you have not implemented ``__getattr__()`` or other methods that allow for attributes not discoverable by normal mechanisms), you can simply remove the ``get_all_members()`` method.  The default implementation on ``LazyObject`` will do the right thing."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:79
# 18e40671d98347c6bbd20ce497b9088d
msgid "If you have more complex requirements for introspection, first rename the ``get_all_members()`` method to ``__dir__()``.  This is the standard method, from Python 2.6 onwards, for supporting introspection.  If you are require support for Python < 2.6, add the following code to the class::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:87
# 006810d5825e4495adc7b84aebf9a687
msgid "``__dict__`` on Model instances"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:92
# cbd8d43e736247ebba68f73e67ae607d
msgid "In order to support multiple database configurations, Django 1.2 has added a ``_state`` attribute to object instances. This attribute will appear in ``__dict__`` for a model instance. If your code relies on iterating over __dict__ to obtain a list of fields, you must now filter the ``_state`` attribute of out ``__dict__``."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:99
# 28a9bcce4d87470c8a4a434cf3e09fd4
msgid "``get_db_prep_*()`` methods on Field"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:101
# 7e354fb0acc94e75b907d2690a45161d
msgid "Prior to v1.2, a custom field had the option of defining several functions to support conversion of Python values into database-compatible values. A custom field might look something like::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:138
# 58885f7caf0e446f8117cea440015fb2
msgid "These changes are required to support multiple databases: ``get_db_prep_*`` can no longer make any assumptions regarding the database for which it is preparing. The ``connection`` argument now provides the preparation methods with the specific connection for which the value is being prepared."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:144
# b9ecf7e394e54d31b02ca705ec05646f
msgid "The two new methods exist to differentiate general data preparation requirements, and requirements that are database-specific. The ``prepared`` argument is used to indicate to the database preparation methods whether generic value preparation has been performed. If an unprepared (i.e., ``prepared=False``) value is provided to the ``get_db_prep_*()`` calls, they should invoke the corresponding ``get_prep_*()`` calls to perform generic data preparation."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:152
# 2e39e76bffe242b2bb7a1df5a091a94e
msgid "Conversion functions has been provided which will transparently convert functions adhering to the old prototype into functions compatible with the new prototype. However, this conversion function will be removed in Django 1.4, so you should upgrade your Field definitions to use the new prototype."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:158
# 79cd3b8f79b64002be88aee08f967816
msgid "If your ``get_db_prep_*()`` methods made no use of the database connection, you should be able to upgrade by renaming ``get_db_prep_value()`` to ``get_prep_value()`` and ``get_db_prep_lookup()`` to ``get_prep_lookup()`. If you require database specific conversions, then you will need to provide an implementation ``get_db_prep_*`` that uses the ``connection`` argument to resolve database-specific values."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:169
# 41382116615b4561a853f7d65e0c0e9d
msgid "Template tags that store rendering state on the node itself may experience problems if they are used with the new :ref:`cached template loader<template-loaders>`."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:173
# 4bbb692084e5431fa0f5a621ec85f164
msgid "All of the built-in Django template tags are safe to use with the cached loader, but if you're using custom template tags that come from third party packages, or that you wrote yourself, you should ensure that the ``Node`` implementation for each tag is thread-safe. For more information, see :ref:`template tag thread safety considerations<template_tag_thread_safety>`."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:194
# b5cfd3ca50ba4dabba37e4c475e21b34
msgid "CSRF response rewriting middleware"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:196
# 83f1e815b21a4c6b871a17b02a4f869b
msgid "``CsrfResponseMiddleware``, the middleware that automatically inserted CSRF tokens into POST forms in outgoing pages, has been deprecated in favor of a template tag method (see above), and will be removed completely in Django 1.4. ``CsrfMiddleware``, which includes the functionality of ``CsrfResponseMiddleware`` and ``CsrfViewMiddleware`` has likewise been deprecated."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:214
# 5392692fccf44d50a6715a0497aa6f16
msgid "The ``SMTPConnection`` class has been deprecated in favor of a generic Email backend API. Old code that explicitly instantiated an instance of an SMTPConnection::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:223
# a95cc0cf0612454fb2f401c3d3fb0ca5
msgid "should now call :meth:`~django.core.mail.get_connection()` to instantiate a generic email connection::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:250
# 903983b425ec43f58ec9a81ac7303806
msgid "Prior to Django 1.1, Django used a number of settings to control access to a single database. Django 1.2 introduces support for multiple databases, and as a result, the way you define database settings has changed."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:254
# fb1b4ed062044fe5961e755a6cc1f7eb
msgid "**Any existing Django settings file will continue to work as expected until Django 1.4.** Old-style database settings will be automatically translated to the new-style format."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:258
# a5443d29ed404890a238a6a454cdc46c
msgid "In the old-style (pre 1.2) format, there were a number of ``DATABASE_`` settings at the top level of your settings file. For example::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:267
# 79aeafe87b3947a594c789abf83bb90f
msgid "These settings are now contained inside a dictionary named :setting:`DATABASES`. Each item in the dictionary corresponds to a single database connection, with the name ``'default'`` describing the default database connection. The setting names have also been shortened to reflect the fact that they are stored in a dictionary. The sample settings given previously would now be stored using::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:316
# 9d08837b1ed344aea1e67383f6babd5e
msgid "To upgrade your code, you need to replace any instances of::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:320
# f4323145a91e46deb5adb2e484e90a4e
msgid "with the following::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:331
#: ../../releases/1.6.txt:1057
# b4540d3d969b49838ad54e602e41e1f2
# f52daf972d884d52b6283e7c19962494
msgid "with::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:344
# b88c0b47859840ee9e05d65c10915f90
msgid "``django.utils.translation.get_date_formats()`` and ``django.utils.translation.get_partial_date_formats()`` have been deprecated in favor of the appropriate calls to ``django.utils.formats.get_format()`` which is locale aware when :setting:`USE_L10N` is set to ``True``, and falls back to default settings if set to ``False``."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:350
# 359766b4235e44ce8c636dd7bb14c7f6
msgid "To get the different date formats, instead of writing::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:355
# 5a1da5ba08044a86964a316941c487a3
msgid "use::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:363
# 7a0a65f2b3f44544aff0da770f941638
msgid "or, when directly formatting a date value::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:378
# b1df33da31a548fcbcc53dabd1941cb0
msgid "What's new in Django 1.2 alpha 1"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:380
# dd6d4b0f91664db3a44c8337622c0bc0
msgid "The following new features are present as of this alpha release; this release also marks the end of major feature development for the 1.2 release cycle. Some minor features will continue development until the 1.2 beta release, however."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:387
# fa090a24d5624e09aca1e638826626df
msgid "CSRF support"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:389
# 821058f841c94648902431197ad87f1f
msgid "Django now has much improved protection against :doc:`Cross-Site Request Forgery (CSRF) attacks</ref/contrib/csrf>`. This type of attack occurs when a malicious Web site contains a link, a form button or some javascript that is intended to perform some action on your Web site, using the credentials of a logged-in user who visits the malicious site in their browser. A related type of attack, 'login CSRF', where an attacking site tricks a user's browser into logging into a site with someone else's credentials, is also covered."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:399
# 5dc3c6b1fe47463289f6ed628e091241
msgid "Email Backends"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:409
# e1e76743dd65450a967bc1a6add8b076
msgid "This also makes it easier to debug mail sending - Django ships with backend implementations that allow you to send email to a :ref:`file<topic-email-file-backend>`, to the :ref:`console<topic-email-console-backend>`, or to :ref:`memory<topic-email-memory-backend>` - you can even configure all email to be :ref:`thrown away<topic-email-dummy-backend>`."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:417
# 701ce45566cf4ab1b72f47eabcd8f2d1
msgid "Messages Framework"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:429
# c2604a64b3d447a482260777917c419a
msgid "Django 1.2 adds the ability to use :doc:`more than one database </topics/db/multi-db>` in your Django project. Queries can be issued at a specific database with the ``using()`` method on querysets; individual objects can be saved to a specific database by providing a ``using`` argument when you save the instance."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:436
# d3c864863ccb4c5c8718f36fc5ddbac5
msgid "'Smart' if tag"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:438
# fc4720036dd9459bab8e31bf395a253d
msgid "The :ttag:`if` tag has been upgraded to be much more powerful.  First, support for comparison operators has been added. No longer will you have to type:"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:447
# 61994a9ab20f4373a4aaa7d25b629cd7
msgid "...as you can now do:"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:455
# 60a2854302554c46940ed46f5a1b1797
msgid "The operators supported are ``==``, ``!=``, ``<``, ``>``, ``<=``, ``>=`` and ``in``, all of which work like the Python operators, in addition to ``and``, ``or`` and ``not`` which were already supported."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:472
# a905dd4c3faf4976b5466db8c517c3b8
msgid "In previous versions of Django, every time you rendered a template it would be reloaded from disk. In Django 1.2, you can use a :ref:`cached template loader <template-loaders>` to load templates once, then use the cached result for every subsequent render. This can lead to a significant performance improvement if your templates are broken into lots of smaller subtemplates (using the ``{% extends %}`` or ``{% include %}`` tags)."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:487
# 1ef2ac344fc44d38bf86fd0e91041499
msgid "Fixtures can refer to remote objects using :ref:`topics-serialization-natural-keys`. This lookup scheme is an alternative to the normal primary-key based object references in a fixture, improving readability, and resolving problems referring to objects whose primary key value may not be predictable or known."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:496
# bb43c5839604469db6e8daf4e2436738
msgid "Models can now use a 64 bit :class:`~django.db.models.BigIntegerField` type."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:499
# ba2c86d4d9934db4811bd477f3aafcbd
msgid "Fast Failure for Tests"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:501
# e2dcfab8b67341e3b52122cc1e0c9593
msgid "The :djadmin:`test` subcommand of ``django-admin.py``, and the ``runtests.py`` script used to run Django's own test suite, support a new ``--failfast`` option. When specified, this option causes the test runner to exit after encountering a failure instead of continuing with the test run.  In addition, the handling of ``Ctrl-C`` during a test run has been improved to trigger a graceful exit from the test run that reports details of the tests run before the interruption."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:511
# 089dc465215640afafda9ab775c438d4
msgid "Django's :doc:`internationalization framework </topics/i18n/index>` has been expanded by locale aware formatting and form processing. That means, if enabled, dates and numbers on templates will be displayed using the format specified for the current locale. Django will also use localized formats when parsing data in forms. See :ref:`Format localization <format-localization>` for more details."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:519
# 86e98a1000224e8ca45ecede78751656
msgid "Added ``readonly_fields`` to ``ModelAdmin``"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:521
# 80d80df1868d4eb5a7d9ccec748e9867
msgid ":attr:`django.contrib.admin.ModelAdmin.readonly_fields` has been added to enable non-editable fields in add/change pages for models and inlines. Field and calculated values can be displayed along side editable fields."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:528
# 48398d61a4b447bd85cc4e4d1fe4ff9f
msgid "You can now use the ``DJANGO_COLORS`` environment variable to modify or disable the colors used by ``django-admin.py`` to provide :ref:`syntax highlighting <syntax-coloring>`."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:534
#: ../../releases/1.2-beta-1.txt:120
#: ../../releases/1.2-rc-1.txt:52
# ed2e73730a9c49ffb6e283494fc2455c
# 182340ad6c114c7ab319078c943c5f99
# a52b15d7dbf34624a8db33a0a2a8ab5b
msgid "The Django 1.2 roadmap"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:536
# 9c8256004dfb4e6389007f1c7cee1410
msgid "Before the final Django 1.2 release, several other preview/development releases will be made available. The current schedule consists of at least the following:"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:540
# 1d6fb668657c4dedaddfa45807a81abf
msgid "Week of **January 26, 2010**: First Django 1.2 beta release. Final feature freeze for Django 1.2."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:543
#: ../../releases/1.2-beta-1.txt:126
# 3d1da3d6006e4994b5ad39816f500a8c
# 57567a049cbd401da390e6f915a0bd74
msgid "Week of **March 2, 2010**: First Django 1.2 release candidate. String freeze for translations."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:546
#: ../../releases/1.2-beta-1.txt:129
# 619d06d62a0d492fbde9511f0ef2ab75
# 8ddc2a81ce314ad59e12c2686ff26043
msgid "Week of **March 9, 2010**: Django 1.2 final release."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:548
# 3eff044635cf43dc9f53ca1da428a119
msgid "If necessary, additional alpha, beta or release-candidate packages will be issued prior to the final 1.2 release. Django 1.2 will be released approximately one week after the final release candidate."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:556
# d62d56bd1a234f30a7a3bdac1ecad684
msgid "In order to provide a high-quality 1.2 release, we need your help. Although this alpha release is, again, *not* intended for production use, you can help the Django team by trying out the alpha codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:567
#: ../../releases/1.2-beta-1.txt:151
#: ../../releases/1.2-rc-1.txt:84
# 0020783695284e65bd068720a6eed194
# 7280c1232bb245c2a6dc4ec8be67bb91
# 99c7e7e02a5c40d381fd65b34d5e088f
msgid "Additionally, discussion of Django development, including progress toward the 1.2 release, takes place daily on the django-developers mailing list:"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:585
#: ../../releases/1.2-beta-1.txt:170
# 7ed6d63f6ba244ce9ac3502b2ac311db
# d9c11513810e478c87057a66e3547434
msgid "Development sprints for Django 1.2 will also be taking place at PyCon US 2010, on the dedicated sprint days (February 22 through 25), and anyone who wants to help out is welcome to join in, either in person at PyCon or virtually in the IRC channel or on the mailing list."
msgstr ""

#: ../../releases/1.2-beta-1.txt:3
# 7d89777e62bb48cb9551427de8a3fe61
msgid "Django 1.2 beta 1 release notes"
msgstr ""

#: ../../releases/1.2-beta-1.txt:5
# da0840bfce4f40f29599bb561315a4ca
msgid "February 5, 2010"
msgstr ""

#: ../../releases/1.2-beta-1.txt:7
# 7c31edfe1f8546e19a68dbe6911ea76b
msgid "Welcome to Django 1.2 beta 1!"
msgstr ""

#: ../../releases/1.2-beta-1.txt:9
# e4372e6b94464d6e8644502ce927c62f
msgid "This is the second in a series of preview/development releases leading up to the eventual release of Django 1.2, currently scheduled to take place in March 2010. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.2 release."
msgstr ""

#: ../../releases/1.2-beta-1.txt:19
# a29aa4b8a11c40f7b658aae2847a4dfb
msgid "This document covers changes since the Django 1.2 alpha release; the :doc:`1.2 alpha release notes </releases/1.2-alpha-1>` cover new and updated features in Django between 1.1 and 1.2 alpha."
msgstr ""

#: ../../releases/1.2-beta-1.txt:25
# 8ce4bb3220a845c884ac70d83353eca8
msgid "Deprecations and other changes in 1.2 beta"
msgstr ""

#: ../../releases/1.2-beta-1.txt:27
# 2bdb1efea979499d9b61e385a755d596
msgid "This beta release deprecates two portions of public API, and introduces a potentially backwards-incompatible change to another. Under :doc:`our API stability policy </misc/api-stability>`, deprecation proceeds over multiple release cycles: initially, the deprecated API will raise ``PendingDeprecationWarning``, followed by raising ``DeprecationWarning`` in the next release, and finally removal of the deprecated API in the release after that. APIs beginning the deprecation process in Django 1.2 will be removed in the Django 1.4 release."
msgstr ""

#: ../../releases/1.2-beta-1.txt:39
# e3fd2b2aa971499e91f3440e2e34c45a
msgid "Unit test runners"
msgstr ""

#: ../../releases/1.2-beta-1.txt:48
# 4e1fa269d11a49bb8bc090dacc917dcc
msgid "Syndication feeds"
msgstr ""

#: ../../releases/1.2-beta-1.txt:50
# ef892d41b31946dfa7e621d201ba83fe
msgid "The ``django.contrib.syndication.feeds.Feed`` class is being replaced by the :class:`django.contrib.syndication.views.Feed` class. The old ``feeds.Feed`` class is deprecated. The new class has an almost identical API, but allows instances to be used as views."
msgstr ""

#: ../../releases/1.2-beta-1.txt:55
# cb17ac83c3294b6198e9e470212c7f6b
msgid "Also, in accordance with `RSS best practices`_, RSS feeds will now include an ``atom:link`` element. You may need to update your tests to take this into account."
msgstr ""

#: ../../releases/1.2-beta-1.txt:68
# aac5dda464504df596a97440da276174
msgid "Due to cookie-handling bugs in Internet Explorer, Safari, and possibly other browsers, Django's encoding of cookie values was changed so that the characters comma (',') and semi-colon (';') are treated as non-safe characters, and are therefore encoded as ``\\054`` and ``\\073`` respectively. This could produce backwards incompatibilities if you are relying on the ability to set these characters directly in cookie values."
msgstr ""

#: ../../releases/1.2-beta-1.txt:78
# 28ea72483c3b418a9dbf43c4fd7facfa
msgid "What's new in 1.2 beta"
msgstr ""

#: ../../releases/1.2-beta-1.txt:80
# 0ceb167ccd9c42e48b8bea7913c3fae0
msgid "This 1.2 beta release marks the final feature freeze for Django 1.2; while most feature development was completed for 1.2 alpha (which constituted a freeze on major features), a few other new features were added afterward and so are new as of 1.2 beta."
msgstr ""

#: ../../releases/1.2-beta-1.txt:89
# 168dcd25da2c449fa881cc78390e43c5
msgid "A foundation for specifying permissions at the per-object level was added in Django 1.2 alpha but not documented with the alpha release."
msgstr ""

#: ../../releases/1.2-beta-1.txt:92
# 5aa69c5fdcce4f67bfcb2b8415d27228
msgid "The default authentication backends shipped with Django do not currently make use of this, but third-party authentication backends are free to do so. See the :doc:`authentication docs </topics/auth/index>` for more information."
msgstr ""

#: ../../releases/1.2-beta-1.txt:101
# 3914fd53563d4c8399ade31f268a99f1
msgid "If you provide a custom authentication backend with the attribute ``supports_anonymous_user`` set to ``True``, the ``AnonymousUser`` class will check the backend for permissions, just as the normal ``User`` does. This is intended to help centralize permission handling; apps can always delegate the question of whether something is allowed or not to the authorization/authentication system. See the :doc:`authentication docs </topics/auth/index>` for more details."
msgstr ""

#: ../../releases/1.2-beta-1.txt:111
# f6ede5af03db499194802149f6a9ee7f
msgid "``select_related()`` improvements"
msgstr ""

#: ../../releases/1.2-beta-1.txt:113
# 017fa350b2a74cf6974e43ac23daeb65
msgid "The ``select_related()`` method of ``QuerySet`` now accepts the ``related_name`` of a reverse one-to-one relation in the list of fields to select. One-to-one relations will not, however, be traversed by a depth-based ``select_related()`` call."
msgstr ""

#: ../../releases/1.2-beta-1.txt:122
# 69ce38d5bc7a456888a7cd9aa005fd81
msgid "Before the final Django 1.2 release, at least one additional preview/development releases will be made available. The current schedule consists of at least the following:"
msgstr ""

#: ../../releases/1.2-beta-1.txt:131
# 16c913e7d78f48f29643f91dc36329b9
msgid "If necessary, additional beta or release-candidate packages will be issued prior to the final 1.2 release. Django 1.2 will be released approximately one week after the final release candidate."
msgstr ""

#: ../../releases/1.2-beta-1.txt:139
# 46d05cd8119f4fe59364e932b3600e8b
msgid "In order to provide a high-quality 1.2 release, we need your help. Although this beta release is, again, *not* intended for production use, you can help the Django team by trying out the beta codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.2-rc-1.txt:3
# d0c678c4fbac4a37b86975100037db08
msgid "Django 1.2 RC 1 release notes"
msgstr ""

#: ../../releases/1.2-rc-1.txt:6
# b9fb29bc363b41568f649a4a33e1273a
msgid "May 5, 2010"
msgstr ""

#: ../../releases/1.2-rc-1.txt:8
# f7025660056547f5b71e3c8794b6bf74
msgid "Welcome to the first Django 1.2 release candidate!"
msgstr ""

#: ../../releases/1.2-rc-1.txt:10
# 3823ae84f99947188d887f4332beb83b
msgid "This is the third -- and likely last -- in a series of preview/development releases leading up to the eventual release of Django 1.2. This release is targeted primarily at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve any critical bugs prior to the final 1.2 release."
msgstr ""

#: ../../releases/1.2-rc-1.txt:20
# e38563816d8a425887b54e1776ed08fa
msgid "Django has been feature frozen since the 1.2 beta release, so this release candidate contains no new features, only bugfixes; for a summary of features new to Django 1.2, consult the :doc:`1.2 alpha </releases/1.2-alpha-1>` and :doc:`1.2 beta </releases/1.2-beta-1>` release notes."
msgstr ""

#: ../../releases/1.2-rc-1.txt:54
# 78eb7d6b767c491182a23c8dfcfe5f94
msgid "As of this release candidate, Django 1.2 is in both feature freeze and \"string freeze\" -- all strings marked for translation in the Django codebase will retain their current form in the final Django 1.2 release. Only critical release-blocking bugs, documentation and updated translation files will receive attention between now and the final 1.2 release. Note that Django's localization infrastructure has been expanded for 1.2, and translation packages should now include a ``formats.py`` file containing data for localized formatting of numbers and dates."
msgstr ""

#: ../../releases/1.2-rc-1.txt:64
# f681a1a4b2ff454194f58688389b07e0
msgid "If no critical bugs are discovered, Django 1.2 will be released approximately one week after this release candidate, on or about May 12, 2010."
msgstr ""

#: ../../releases/1.2-rc-1.txt:72
# 634e9190646a47f2819f58f9328a0812
msgid "In order to provide a high-quality 1.2 release, we need your help. Although this release candidate is, again, *not* intended for production use, you can help the Django team by trying out this release candidate in a safe testing environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.2.1.txt:3
# 18752d0fc9134169af79518d17c1ccdc
msgid "Django 1.2.1 release notes"
msgstr ""

#: ../../releases/1.2.1.txt:5
# 2900c045110b46709f72305bb35c753e
msgid "Django 1.2.1 was released almost immediately after 1.2.0 to correct two small bugs: one was in the documentation packaging script, the other was a bug_ that affected datetime form field widgets when localisation was enabled."
msgstr ""

#: ../../releases/1.2.2.txt:3
# 6b01a64b13544fe69b363d46f0d6de40
msgid "Django 1.2.2 release notes"
msgstr ""

#: ../../releases/1.2.2.txt:5
# c461149f31614a58857c86373fade549
msgid "Welcome to Django 1.2.2!"
msgstr ""

#: ../../releases/1.2.2.txt:7
# ae2b51fb89e84ad89792c3ad83e87049
msgid "This is the second \"bugfix\" release in the Django 1.2 series, improving the stability and performance of the Django 1.2 codebase."
msgstr ""

#: ../../releases/1.2.2.txt:10
# 8a9f5cd1dd15467b97fe47777eed8c70
msgid "Django 1.2.2 maintains backwards compatibility with Django 1.2.1, but contain a number of fixes and other improvements. Django 1.2.2 is a recommended upgrade for any development or deployment currently using or targeting Django 1.2."
msgstr ""

#: ../../releases/1.2.2.txt:15
#: ../../releases/1.2.4.txt:15
#: ../../releases/1.2.5.txt:15
# 777823461be6415cb5a924ea3ff09c6f
# 16a14fa4843b4ae799f50735f85f4ba1
# a5a2abf802f44bb0ade8f21a1b0eb524
msgid "For full details on the new features, backwards incompatibilities, and deprecated features in the 1.2 branch, see the :doc:`/releases/1.2`."
msgstr ""

#: ../../releases/1.2.2.txt:21
# 1ad262299ad349d987118b5612370fc7
msgid "Ordinarily, a point release would not include new features, but in the case of Django 1.2.2, we have made an exception to this rule."
msgstr ""

#: ../../releases/1.2.2.txt:24
# aa5a4270c4414cedac53998e5f483f0c
msgid "In order to test a bug fix that forms part of the 1.2.2 release, it was necessary to add a feature -- the ``enforce_csrf_checks`` flag -- to the :mod:`test client <django.test.client>`. This flag forces the test client to perform full CSRF checks on forms. The default behavior of the test client hasn't changed, but if you want to do CSRF checks with the test client, it is now possible to do so."
msgstr ""

#: ../../releases/1.2.3.txt:3
# 754518d847d14f5fb7638456e7e3cf20
msgid "Django 1.2.3 release notes"
msgstr ""

#: ../../releases/1.2.3.txt:5
# a1a6802416654ab88d1ca644e34c72dc
msgid "Django 1.2.3 fixed a couple of release problems in the 1.2.2 release and was released two days after 1.2.2."
msgstr ""

#: ../../releases/1.2.3.txt:8
# 247e7ae4882a4d6086b2bda08c72adf3
msgid "This release corrects the following problems:"
msgstr ""

#: ../../releases/1.2.3.txt:10
# 66f6aea105634bb6a83a14ad3786232c
msgid "The patch_ applied for the security issue covered in Django 1.2.2 caused issues with non-ASCII responses using CSRF tokens."
msgstr ""

#: ../../releases/1.2.3.txt:13
# e10ccecc00ba4cfe9014c4542ba619a1
msgid "The patch also caused issues with some forms, most notably the user-editing forms in the Django administrative interface."
msgstr ""

#: ../../releases/1.2.3.txt:16
# e03dc6c17e8b438cbb23f89d5c82d402
msgid "The packaging manifest did not contain the full list of required files."
msgstr ""

#: ../../releases/1.2.4.txt:3
# 3593db5829484cba9eaafdc142face96
msgid "Django 1.2.4 release notes"
msgstr ""

#: ../../releases/1.2.4.txt:5
# d8cd40e29fec4dfcba5de81e8721add9
msgid "Welcome to Django 1.2.4!"
msgstr ""

#: ../../releases/1.2.4.txt:7
# fe4a5bbc77e948d3928abe867b0b12a4
msgid "This is the fourth \"bugfix\" release in the Django 1.2 series, improving the stability and performance of the Django 1.2 codebase."
msgstr ""

#: ../../releases/1.2.4.txt:10
# 829419abd4f44c42a2afa2154d26a353
msgid "With one exception, Django 1.2.4 maintains backwards compatibility with Django 1.2.3. It also contains a number of fixes and other improvements. Django 1.2.4 is a recommended upgrade for any development or deployment currently using or targeting Django 1.2."
msgstr ""

#: ../../releases/1.2.4.txt:55
# 2b7d3842dc41448d91bb2bbda379aa61
msgid "Ordinarily, a point release would not include new features, but in the case of Django 1.2.4, we have made an exception to this rule."
msgstr ""

#: ../../releases/1.2.4.txt:58
# 4aebd1b1f5c14a0dbef64b308872b1de
msgid "One of the bugs fixed in Django 1.2.4 involves a set of circumstances whereby a running a test suite on a multiple database configuration could cause the original source database (i.e., the actual production database) to be dropped, causing catastrophic loss of data. In order to provide a fix for this problem, it was necessary to introduce a new setting -- :setting:`TEST_DEPENDENCIES` -- that allows you to define any creation order dependencies in your database configuration."
msgstr ""

#: ../../releases/1.2.4.txt:67
# 4a770cabb89b4bc5bbc11d3da15c113f
msgid "Most users -- even users with multiple-database configurations -- need not be concerned about the data loss bug, or the manual configuration of :setting:`TEST_DEPENDENCIES`. See the `original problem report`_ documentation on :ref:`controlling the creation order of test databases <topics-testing-creation-dependencies>` for details."
msgstr ""

#: ../../releases/1.2.4.txt:78
# ae5b28fbdbbf4cfaad8c0fa991e4f23b
msgid "The function-based :setting:`TEST_RUNNER` previously used to execute the GeoDjango test suite, ``django.contrib.gis.tests.run_gis_tests``, was finally deprecated in favor of a class-based test runner, ``django.contrib.gis.tests.GeoDjangoTestSuiteRunner``, added in this release."
msgstr ""

#: ../../releases/1.2.4.txt:84
# c7c7b298beb04d52b68d16a2ced65f28
msgid "In addition, the GeoDjango test suite is now included when :ref:`running the Django test suite <running-unit-tests>` with ``runtests.py`` and using :ref:`spatial database backends <spatial-backends>`."
msgstr ""

#: ../../releases/1.2.5.txt:3
# ac5d706d89884b548c638d589f8f3c0b
msgid "Django 1.2.5 release notes"
msgstr ""

#: ../../releases/1.2.5.txt:5
# 2b11f1f63e45433c8c56a8726c5a0894
msgid "Welcome to Django 1.2.5!"
msgstr ""

#: ../../releases/1.2.5.txt:7
# da132a360b09402ab500a03d66dd27ce
msgid "This is the fifth \"bugfix\" release in the Django 1.2 series, improving the stability and performance of the Django 1.2 codebase."
msgstr ""

#: ../../releases/1.2.5.txt:10
# 3e579eceb84145818421b3146b6c8ef5
msgid "With four exceptions, Django 1.2.5 maintains backwards compatibility with Django 1.2.4. It also contains a number of fixes and other improvements. Django 1.2.5 is a recommended upgrade for any development or deployment currently using or targeting Django 1.2."
msgstr ""

#: ../../releases/1.2.5.txt:71
# 001ecc2e1bdd4e22a3e437c9a9a8181b
msgid "FileField no longer deletes files"
msgstr ""

#: ../../releases/1.2.5.txt:73
# bb98bf69140c462e98361892b34db6aa
msgid "In earlier Django versions, when a model instance containing a :class:`~django.db.models.FileField` was deleted, :class:`~django.db.models.FileField` took it upon itself to also delete the file from the backend storage. This opened the door to several potentially serious data-loss scenarios, including rolled-back transactions and fields on different models referencing the same file. In Django 1.2.5, :class:`~django.db.models.FileField` will never delete files from the backend storage. If you need cleanup of orphaned files, you'll need to handle it yourself (for instance, with a custom management command that can be run manually or scheduled to run periodically via e.g. cron)."
msgstr ""

#: ../../releases/1.2.5.txt:85
#: ../../releases/1.3.txt:534
# 39aacc4ef527463492cff97d0d5812a5
# ad71e8d88ce94e679a7b1a26c75fbce8
msgid "Use of custom SQL to load initial data in tests"
msgstr ""

#: ../../releases/1.2.5.txt:87
#: ../../releases/1.3.txt:536
# e5ab36f80a8c46a6aae8cded0c282bf4
# 91a3f76b2239464a808d3f568a52aa6e
msgid "Django provides a custom SQL hooks as a way to inject hand-crafted SQL into the database synchronization process. One of the possible uses for this custom SQL is to insert data into your database. If your custom SQL contains ``INSERT`` statements, those insertions will be performed every time your database is synchronized. This includes the synchronization of any test databases that are created when you run a test suite."
msgstr ""

#: ../../releases/1.2.5.txt:95
#: ../../releases/1.3.txt:544
# f8f86b46b2d14e0aa597b457b8485ad8
# f6786ffebb5d4054a3de6d72e06e0ec8
msgid "However, in the process of testing the Django 1.3, it was discovered that this feature has never completely worked as advertised. When using database backends that don't support transactions, or when using a TransactionTestCase, data that has been inserted using custom SQL will not be visible during the testing process."
msgstr ""

#: ../../releases/1.2.5.txt:101
#: ../../releases/1.3.txt:550
# 7478ccfe926543ec8c9cae686a8fd17a
# f38e943f4d1b430a8ffa0d6af044c785
msgid "Unfortunately, there was no way to rectify this problem without introducing a backwards incompatibility. Rather than leave SQL-inserted initial data in an uncertain state, Django now enforces the policy that data inserted by custom SQL will *not* be visible during testing."
msgstr ""

#: ../../releases/1.2.5.txt:107
#: ../../releases/1.3.txt:556
# 7c3cafd6af104d12a12e1d8755252851
# 124e7f2b4a40490daf36e1dcae14d159
msgid "This change only affects the testing process. You can still use custom SQL to load data into your production database as part of the syncdb process. If you require data to exist during test conditions, you should either insert it using :ref:`test fixtures <topics-testing-fixtures>`, or using the ``setUp()`` method of your test case."
msgstr ""

#: ../../releases/1.2.5.txt:115
# 0c8921151a5c46db9891764296e7c8c1
msgid "ModelAdmin.lookup_allowed signature changed"
msgstr ""

#: ../../releases/1.2.5.txt:117
# 5ee39ff6e6d144509f928d26576f025e
msgid "Django 1.2.4 introduced a method ``lookup_allowed`` on ``ModelAdmin``, to cope with a security issue (changeset `[15033] <https://code.djangoproject.com/changeset/15033>`_). Although this method was never documented, it seems some people have overridden ``lookup_allowed``, especially to cope with regressions introduced by that changeset. While the method is still undocumented and not marked as stable, it may be helpful to know that the signature of this function has changed."
msgstr ""

#: ../../releases/1.2.6.txt:3
# 6400e802de864e7892dde86420272ef4
msgid "Django 1.2.6 release notes"
msgstr ""

#: ../../releases/1.2.6.txt:5
#: ../../releases/1.3.1.txt:5
# a065a07d8d4a42f09cef03e9d49132ef
# 52b659ccb040457d80f07429c594e731
msgid "*September 9, 2011*"
msgstr ""

#: ../../releases/1.2.6.txt:7
# 29946b2e12ce479897de7cbd0ba9e522
msgid "Welcome to Django 1.2.6!"
msgstr ""

#: ../../releases/1.2.6.txt:9
# 420496ac0f894459881460f2ba3f6e30
msgid "This is the sixth bugfix/security release in the Django 1.2 series, fixing several security issues present in Django 1.2.5.  Django 1.2.6 is a recommended upgrade for all users of any Django release in the 1.2.X series."
msgstr ""

#: ../../releases/1.2.6.txt:13
#: ../../releases/1.3.1.txt:13
#: ../../releases/1.3.2.txt:11
#: ../../releases/1.4.1.txt:11
# 2a152483980e42b59888b236eb1d354b
# 5bd77473c3eb47bd93a347fac1614d32
# 383a6aaf9e3f4a43aae52be1e796d8d8
# db211155bd0c4d459399487082533182
msgid "For a full list of issues addressed in this release, see the `security advisory`_."
msgstr ""

#: ../../releases/1.2.7.txt:3
# 406e12118e474c9d94372989cc6b51d4
msgid "Django 1.2.7 release notes"
msgstr ""

#: ../../releases/1.2.7.txt:5
# dcea108159104dd88f489086e7a8e019
msgid "*September 10, 2011*"
msgstr ""

#: ../../releases/1.2.7.txt:7
# 9217cab2eb124157a505f28b852d3093
msgid "Welcome to Django 1.2.7!"
msgstr ""

#: ../../releases/1.2.7.txt:9
# de08243dedf24b22bf79cb91e49326ef
msgid "This is the seventh bugfix/security release in the Django 1.2 series. It replaces Django 1.2.6 due to problems with the 1.2.6 release tarball. Django 1.2.7 is a recommended upgrade for all users of any Django release in the 1.2.X series."
msgstr ""

#: ../../releases/1.2.7.txt:14
# 77f6ab50858f4841b0e0261046195d9e
msgid "For more information, see the `release advisory`_."
msgstr ""

#: ../../releases/1.3.txt:3
# 9b6515cd0e214eeaa9eb4096d521f4ff
msgid "Django 1.3 release notes"
msgstr ""

#: ../../releases/1.3.txt:5
# 3b7f8e5e8ad94e8bb07fca93c47113a1
msgid "*March 23, 2011*"
msgstr ""

#: ../../releases/1.3.txt:7
# b6e5845ed94646b5a55252c61c225969
msgid "Welcome to Django 1.3!"
msgstr ""

#: ../../releases/1.3.txt:9
# bc717bca40d241ec9f9339080f81df57
msgid "Nearly a year in the making, Django 1.3 includes quite a few `new features`_ and plenty of bug fixes and improvements to existing features. These release notes cover the new features in 1.3, as well as some `backwards-incompatible changes`_ you'll want to be aware of when upgrading from Django 1.2 or older versions."
msgstr ""

#: ../../releases/1.3.txt:18
# 46cec7becbcf454aa901034767043162
msgid "Django 1.3's focus has mostly been on resolving smaller, long-standing feature requests, but that hasn't prevented a few fairly significant new features from landing, including:"
msgstr ""

#: ../../releases/1.3.txt:22
# 609a1bf42e4f4a6eafbbc5438f4664f4
msgid "A framework for writing `class-based views`_."
msgstr ""

#: ../../releases/1.3.txt:24
# efc3804f9e75455782e682f25d6869f6
msgid "Built-in support for `using Python's logging facilities`_."
msgstr ""

#: ../../releases/1.3.txt:26
# dba8bf7d657d419ea43e046dadf95d3d
msgid "Contrib support for `easy handling of static files`_."
msgstr ""

#: ../../releases/1.3.txt:28
# 5d0efff96a8040bf85ce510208621c3c
msgid "Django's testing framework now supports (and ships with a copy of) `the unittest2 library`_."
msgstr ""

#: ../../releases/1.3.txt:31
# 83e448d529294635be005c41a850ddcc
msgid "There's plenty more, of course; see the coverage of `new features`_ below for a full rundown and details."
msgstr ""

#: ../../releases/1.3.txt:34
# 174ebffb281d498cb6de250f3a5355e5
msgid "Wherever possible, of course, new features are introduced in a backwards-compatible manner per :doc:`our API stability policy </misc/api-stability>` policy. As a result of this policy, Django 1.3 `begins the deprecation process for some features`_."
msgstr ""

#: ../../releases/1.3.txt:39
# 0e0b6eea07b4492c958aa733526ff5eb
msgid "Some changes, unfortunately, are genuinely backwards-incompatible; in most cases these are due to security issues or bugs which simply couldn't be fixed any other way. Django 1.3 includes a few of these, and descriptions of them -- along with the (minor) modifications you'll need to make to handle them -- are documented in the list of `backwards-incompatible changes`_ below."
msgstr ""

#: ../../releases/1.3.txt:56
# e7088bbb6f8848e2ad3b96352fd7add2
msgid "The release of Django 1.2 was notable for having the first shift in Django's Python compatibility policy; prior to Django 1.2, Django supported any 2.x version of Python from 2.3 up. As of Django 1.2, the minimum requirement was raised to Python 2.4."
msgstr ""

#: ../../releases/1.3.txt:61
# e4c6a72e2f764a19ac6cbb16c483c3f2
msgid "Django 1.3 continues to support Python 2.4, but will be the final Django release series to do so; beginning with Django 1.4, the minimum supported Python version will be 2.5. A document outlining our full timeline for deprecating Python 2.x and moving to Python 3.x will be published shortly after the release of Django 1.3."
msgstr ""

#: ../../releases/1.3.txt:68
# 76b365f2076c459188d1d45dc98434ef
msgid "What's new in Django 1.3"
msgstr ""

#: ../../releases/1.3.txt:71
#: ../../releases/1.3-alpha-1.txt:30
# be25b1f62da144e0b80a2f565d5f0fc3
# 3d164497e4be483f8ccc9cf0e225d7fd
msgid "Class-based views"
msgstr ""

#: ../../releases/1.3.txt:73
#: ../../releases/1.3-alpha-1.txt:32
# c2131ec45cae454dae1c67b849156068
# b151f3e80e3c4f92bfd6fcba373260aa
msgid "Django 1.3 adds a framework that allows you to use a class as a view. This means you can compose a view out of a collection of methods that can be subclassed and overridden to provide common views of data without having to write too much code."
msgstr ""

#: ../../releases/1.3.txt:78
#: ../../releases/1.3-alpha-1.txt:37
# 04463f2dbbf94adf8396e213707b9ea3
# 301a03538f054e67b05cb88eb9d52160
msgid "Analogs of all the old function-based generic views have been provided, along with a completely generic view base class that can be used as the basis for reusable applications that can be easily extended."
msgstr ""

#: ../../releases/1.3.txt:83
# 8e59c75c212546ec92894c4299e64779
msgid "See :doc:`the documentation on class-based generic views</topics/class-based-views/index>` for more details. There is also a document to help you `convert your function-based generic views to class-based views <https://docs.djangoproject.com/en/1.4/topics/generic-views-migration/>`_."
msgstr ""

#: ../../releases/1.3.txt:89
#: ../../releases/1.3-alpha-1.txt:47
# 9f6a24ec4bec4892b61d7c14dfd862c4
# 6212d0e955474a1d8265945f95e038a6
msgid "Logging"
msgstr ""

#: ../../releases/1.3.txt:91
# fadd8f6247d24eafaad8fd930227cfb5
msgid "Django 1.3 adds framework-level support for Python's ``logging`` module.  This means you can now easily configure and control logging as part of your Django project. A number of logging handlers and logging calls have been added to Django's own code as well -- most notably, the error emails sent on a HTTP 500 server error are now handled as a logging activity. See :doc:`the documentation on Django's logging interface </topics/logging>` for more details."
msgstr ""

#: ../../releases/1.3.txt:100
#: ../../releases/1.3-alpha-1.txt:58
# 8d873bb519a640c48298217dbf6a03a7
# d5c015a689d04317a2bd71bbe7b4f0fd
msgid "Extended static files handling"
msgstr ""

#: ../../releases/1.3.txt:102
# b47a26755c61433abbe21f2a29a4a5c8
msgid "Django 1.3 ships with a new contrib app -- ``django.contrib.staticfiles`` -- to help developers handle the static media files (images, CSS, Javascript, etc.) that are needed to render a complete web page."
msgstr ""

#: ../../releases/1.3.txt:107
#: ../../releases/1.3-alpha-1.txt:64
# 3c398ba842074bffb6cf91115a9f0c8c
# 6b0ae8447ece4f37b55d309fe69b5c50
msgid "In previous versions of Django, it was common to place static assets in :setting:`MEDIA_ROOT` along with user-uploaded files, and serve them both at :setting:`MEDIA_URL`. Part of the purpose of introducing the ``staticfiles`` app is to make it easier to keep static files separate from user-uploaded files. Static assets should now go in ``static/`` subdirectories of your apps or in other static assets directories listed in :setting:`STATICFILES_DIRS`, and will be served at :setting:`STATIC_URL`."
msgstr ""

#: ../../releases/1.3.txt:116
#: ../../releases/1.3-alpha-1.txt:73
# 44ca3013e4a44b4da20dc248f62417f9
# 32115b3419ce4307826c9e1a52955673
msgid "See the :doc:`reference documentation of the app </ref/contrib/staticfiles>` for more details or learn how to :doc:`manage static files </howto/static-files/index>`."
msgstr ""

#: ../../releases/1.3.txt:121
# acbc74ffa6ae4649b1e8f73b9852abab
msgid "unittest2 support"
msgstr ""

#: ../../releases/1.3.txt:123
# cd34f24abb3b48a08b29c474ae0e2a2f
msgid "Python 2.7 introduced some major changes to the ``unittest`` library, adding some extremely useful features. To ensure that every Django project can benefit from these new features, Django ships with a copy of unittest2_, a copy of the Python 2.7 unittest library, backported for Python 2.4 compatibility."
msgstr ""

#: ../../releases/1.3.txt:129
# 27b9b3b8ea3847fb9ee8263fa01dfe26
msgid "To access this library, Django provides the ``django.utils.unittest`` module alias. If you are using Python 2.7, or you have installed ``unittest2`` locally, Django will map the alias to the installed version of the unittest library. Otherwise, Django will use its own bundled version of unittest2."
msgstr ""

#: ../../releases/1.3.txt:135
# 57bf2ece48224ed9a74415080bde33c0
msgid "To take advantage of this alias, simply use::"
msgstr ""

#: ../../releases/1.3.txt:139
#: ../../releases/1.3-alpha-1.txt:96
# 4cbe691d438a41b99fbbc29355f303c6
# 684be83bdcfa4dbf8b8954a7c1191184
msgid "wherever you would have historically used::"
msgstr ""

#: ../../releases/1.3.txt:143
# c8ad2e41fd7b4e709ad0018e2ce8cbd2
msgid "If you want to continue to use the base unittest library, you can -- you just won't get any of the nice new unittest2 features."
msgstr ""

#: ../../releases/1.3.txt:149
#: ../../releases/1.3-alpha-1.txt:106
# 774b87782ab148f085126ca48bfb611b
# a60f662b23304cda913b8d139459778f
msgid "Transaction context managers"
msgstr ""

#: ../../releases/1.3.txt:151
#: ../../releases/1.3-alpha-1.txt:108
# d92852449b58474e9b6119e2e6c99724
# e16a4bff11624e4f8734e5d3ceee3068
msgid "Users of Python 2.5 and above may now use transaction management functions as `context managers`_. For example::"
msgstr ""

#: ../../releases/1.3.txt:160
#: ../../releases/1.3-alpha-1.txt:117
# e78a7cc323ea41c18756c3841b760632
# 71b45dbfe48b468298d9e95957229310
msgid "Configurable delete-cascade"
msgstr ""

#: ../../releases/1.3.txt:162
#: ../../releases/1.3-alpha-1.txt:119
# 1e4a922736174ec1924236462620f876
# d8549113b0ee4b65bdaa236d9fcf1d5e
msgid ":class:`~django.db.models.ForeignKey` and :class:`~django.db.models.OneToOneField` now accept an :attr:`~django.db.models.ForeignKey.on_delete` argument to customize behavior when the referenced object is deleted. Previously, deletes were always cascaded; available alternatives now include set null, set default, set to any value, protect, or do nothing."
msgstr ""

#: ../../releases/1.3.txt:169
#: ../../releases/1.3-alpha-1.txt:126
# a68f57a9e83c4b79aed3215feee2ca83
# 7a214b69a46040b8842c39e462794fff
msgid "For more information, see the :attr:`~django.db.models.ForeignKey.on_delete` documentation."
msgstr ""

#: ../../releases/1.3.txt:173
# e3f4e3b9b9ec415c907ff44d4bf68522
msgid "Contextual markers and comments for translatable strings"
msgstr ""

#: ../../releases/1.3.txt:175
#: ../../releases/1.3-alpha-1.txt:132
# f8e36abb85a34d979ab97ebba92b2185
# b1356a7205c346a3b9bcbafeda35c897
msgid "For translation strings with ambiguous meaning, you can now use the ``pgettext`` function to specify the context of the string."
msgstr ""

#: ../../releases/1.3.txt:178
# 00dbe183cf0b44e4879476361119bc37
msgid "And if you just want to add some information for translators, you can also add special translator comments in the source."
msgstr ""

#: ../../releases/1.3.txt:181
# 92701a5e7b8243b6b4732b538f37f4e3
msgid "For more information, see :ref:`contextual-markers` and :ref:`translator-comments`."
msgstr ""

#: ../../releases/1.3.txt:185
# 84ce2a569ccc4f8d9edf5adfdc61b985
msgid "Improvements to built-in template tags"
msgstr ""

#: ../../releases/1.3.txt:187
# 7567aec266574d5dbae60d6cfcd57160
msgid "A number of improvements have been made to Django's built-in template tags:"
msgstr ""

#: ../../releases/1.3.txt:189
# fe5963d073234bd7a2091f8e04728c61
msgid "The :ttag:`include` tag now accepts a ``with`` option, allowing you to specify context variables to the included template"
msgstr ""

#: ../../releases/1.3.txt:192
# ce6e8e5e1a68460e885992b3a0086c13
msgid "The :ttag:`include` tag now accepts an ``only`` option, allowing you to exclude the current context from the included context"
msgstr ""

#: ../../releases/1.3.txt:195
# 2135fb82ac414b72ba33145e6a76019f
msgid "The :ttag:`with` tag now allows you to define multiple context variables in a single :ttag:`with` block."
msgstr ""

#: ../../releases/1.3.txt:198
# 87334190d04f411d84e948615f5a47a0
msgid "The :ttag:`load` tag now accepts a ``from`` argument, allowing you to load a single tag or filter from a library."
msgstr ""

#: ../../releases/1.3.txt:202
# 918b271e82a54da193bbfbf680ecbd82
msgid "TemplateResponse"
msgstr ""

#: ../../releases/1.3.txt:204
# 8496c13d3a7c433e9641a20d30897d9a
msgid "It can sometimes be beneficial to allow decorators or middleware to modify a response *after* it has been constructed by the view. For example, you may want to change the template that is used, or put additional data into the context."
msgstr ""

#: ../../releases/1.3.txt:209
# c28d2423a9ce431695312a1b2ee28768
msgid "However, you can't (easily) modify the content of a basic :class:`~django.http.HttpResponse` after it has been constructed. To overcome this limitation, Django 1.3 adds a new :class:`~django.template.response.TemplateResponse` class. Unlike basic :class:`~django.http.HttpResponse` objects, :class:`~django.template.response.TemplateResponse` objects retain the details of the template and context that was provided by the view to compute the response. The final output of the response is not computed until it is needed, later in the response process."
msgstr ""

#: ../../releases/1.3.txt:219
# ea90a7ff2f1446b0bfa84c6b90877a01
msgid "For more details, see the :doc:`documentation </ref/template-response>` on the :class:`~django.template.response.TemplateResponse` class."
msgstr ""

#: ../../releases/1.3.txt:223
# b9d3e312b6f6445e940d0171990e3255
msgid "Caching changes"
msgstr ""

#: ../../releases/1.3.txt:225
# 09c054a8929447f4beb6cbc19d13a3f9
msgid "Django 1.3 sees the introduction of several improvements to the Django's caching infrastructure."
msgstr ""

#: ../../releases/1.3.txt:228
# 3cab9b17d5044a13b28e7cc462266bcb
msgid "Firstly, Django now supports multiple named caches. In the same way that Django 1.2 introduced support for multiple database connections, Django 1.3 allows you to use the new :setting:`CACHES` setting to define multiple named cache connections."
msgstr ""

#: ../../releases/1.3.txt:233
# ece80ebfc3a04917b9c3a59262e3fc4a
msgid "Secondly, :ref:`versioning <cache_versioning>`, :ref:`site-wide prefixing <cache_key_prefixing>` and :ref:`transformation <cache_key_transformation>` have been added to the cache API."
msgstr ""

#: ../../releases/1.3.txt:237
# 02f1f449272942a49c05995dc20294bc
msgid "Thirdly, :ref:`cache key creation <using-vary-headers>` has been updated to take the request query string into account on ``GET`` requests."
msgstr ""

#: ../../releases/1.3.txt:241
# 94898567b12f4918a32bb98ba5a02601
msgid "Finally, support for pylibmc_ has been added to the memcached cache backend."
msgstr ""

#: ../../releases/1.3.txt:244
# 1125ca7b050f4c3f8b557656c0f9285c
msgid "For more details, see the :doc:`documentation on caching in Django</topics/cache>`."
msgstr ""

#: ../../releases/1.3.txt:250
#: ../../releases/1.3-beta-1.txt:59
# 86e525c4d757452fbb02d31725327549
# 865d33d8cd934817aecf8c800d78c516
msgid "Permissions for inactive users"
msgstr ""

#: ../../releases/1.3.txt:252
# 7dd75c72c6c74f378d68715eacda41cd
msgid "If you provide a custom auth backend with ``supports_inactive_user`` set to ``True``, an inactive ``User`` instance will check the backend for permissions.  This is useful for further centralizing the permission handling. See the :doc:`authentication docs </topics/auth/index>` for more details."
msgstr ""

#: ../../releases/1.3.txt:261
# 5bcbad7b34ac4598a146dd0655d1bbe3
msgid "The GeoDjango test suite is now included when :ref:`running the Django test suite <running-unit-tests>` with ``runtests.py`` when using :ref:`spatial database backends <spatial-backends>`."
msgstr ""

#: ../../releases/1.3.txt:266
# 93b743555c324472bf782128d93d9e4b
msgid ":setting:`MEDIA_URL` and :setting:`STATIC_URL` must end in a slash"
msgstr ""

#: ../../releases/1.3.txt:268
# a76280af22a847ecb94dbfa4863bf048
msgid "Previously, the :setting:`MEDIA_URL` setting only required a trailing slash if it contained a suffix beyond the domain name."
msgstr ""

#: ../../releases/1.3.txt:271
# 21f0b1b645fa4418ba97aee048fbe809
msgid "A trailing slash is now *required* for :setting:`MEDIA_URL` and the new :setting:`STATIC_URL` setting as long as it is not blank. This ensures there is a consistent way to combine paths in templates."
msgstr ""

#: ../../releases/1.3.txt:275
# c519879501634795a97b922ed4d8f055
msgid "Project settings which provide either of both settings without a trailing slash will now raise a ``PendingDeprecationWarning``."
msgstr ""

#: ../../releases/1.3.txt:278
# 66e6e10bd2664902b8b1ff2b75c8b2fb
msgid "In Django 1.4 this same condition will raise ``DeprecationWarning``, and in Django 1.5 will raise an ``ImproperlyConfigured`` exception."
msgstr ""

#: ../../releases/1.3.txt:282
#: ../../releases/1.3-alpha-1.txt:138
# 4814a6834d7b4126ba55a894239b9070
# 8dda175151624c3d8909c288aaa825ec
msgid "Everything else"
msgstr ""

#: ../../releases/1.3.txt:284
#: ../../releases/1.3-alpha-1.txt:140
# 40d9a52e4ede499cb094c738d1ec95ef
# c35f31aedf98465fa12dda3d94c5b666
msgid "Django :doc:`1.1 <1.1>` and :doc:`1.2 <1.2>` added lots of big ticket items to Django, like multiple-database support, model validation, and a session-based messages framework. However, this focus on big features came at the cost of lots of smaller features."
msgstr ""

#: ../../releases/1.3.txt:290
#: ../../releases/1.3-alpha-1.txt:146
# 7dfda03431c04831840df750429a4382
# bf1529195e084dc6903326311f493123
msgid "To compensate for this, the focus of the Django 1.3 development process has been on adding lots of smaller, long standing feature requests. These include:"
msgstr ""

#: ../../releases/1.3.txt:294
# 810eaf3a019447b79a9608e3bc2d23e0
msgid "Improved tools for accessing and manipulating the current :class:`~django.contrib.sites.models.Site` object in :doc:`the sites framework </ref/contrib/sites>`."
msgstr ""

#: ../../releases/1.3.txt:298
#: ../../releases/1.3-alpha-1.txt:153
# 806566489d2f4bb7919967c8eba33b4d
# a6dc39cccf8c4f8db235a9e67c6185ec
msgid "A :class:`~django.test.client.RequestFactory` for mocking requests in tests."
msgstr ""

#: ../../releases/1.3.txt:301
#: ../../releases/1.3-alpha-1.txt:156
# 48391f0917524afd975871c34abcb598
# 27f1329a9f654cd69e4bb90a9197a5a7
msgid "A new test assertion -- :meth:`~django.test.TransactionTestCase.assertNumQueries` -- making it easier to test the database activity associated with a view."
msgstr ""

#: ../../releases/1.3.txt:305
# f63e8d6294204e809a252e7a905d07eb
msgid "Support for lookups spanning relations in admin's :attr:`~django.contrib.admin.ModelAdmin.list_filter`."
msgstr ""

#: ../../releases/1.3.txt:308
# 6494db3666054479a8a9896a62692968
msgid "Support for HTTPOnly_ cookies."
msgstr ""

#: ../../releases/1.3.txt:310
# 6aa7d994b1bd4f19a8f208065190fcbf
msgid ":meth:`~django.core.mail.mail_admins()` and :meth:`~django.core.mail.mail_managers()` now support easily attaching HTML content to messages."
msgstr ""

#: ../../releases/1.3.txt:314
# 96477ea5211e4abf9c8877ce11686b4f
msgid ":class:`~django.core.mail.EmailMessage` now supports CC's."
msgstr ""

#: ../../releases/1.3.txt:316
# b20d745a460845f3810aab1b9b56312f
msgid "Error emails now include more of the detail and formatting of the debug server error page."
msgstr ""

#: ../../releases/1.3.txt:319
# 82806cc09b9a401db4cbe5c0e07b149b
msgid ":meth:`~django.template.Library.simple_tag` now accepts a ``takes_context`` argument, making it easier to write simple template tags that require access to template context."
msgstr ""

#: ../../releases/1.3.txt:323
# 53b3af8aecd84df3945dbc73863faeac
msgid "A new :meth:`~django.shortcuts.render()` shortcut -- an alternative to :meth:`~django.shortcuts.render_to_response()` providing a :class:`~django.template.RequestContext` by default."
msgstr ""

#: ../../releases/1.3.txt:327
# 4dd0f97ee5d94b2b855587cf33d5b831
msgid "Support for combining :ref:`F() expressions <query-expressions>` with timedelta values when retrieving or updating database values."
msgstr ""

#: ../../releases/1.3.txt:335
# 0437319bb8fd4de1b4ecd61e9ab53536
msgid "Backwards-incompatible changes in 1.3"
msgstr ""

#: ../../releases/1.3.txt:338
# eab3f3315ac748238f6ca96b59973bfa
msgid "CSRF validation now applies to AJAX requests"
msgstr ""

#: ../../releases/1.3.txt:340
# fa46fa6897cf484bb01a4f8ca9cb9038
msgid "Prior to Django 1.2.5, Django's CSRF-prevention system exempted AJAX requests from CSRF verification; due to `security issues`_ reported to us, however, *all* requests are now subjected to CSRF verification. Consult :doc:`the Django CSRF documentation </ref/contrib/csrf>` for details on how to handle CSRF verification in AJAX requests."
msgstr ""

#: ../../releases/1.3.txt:352
# ed275d9128e84180a84836500a1db214
msgid "Prior to Django 1.2.5, the Django administrative interface allowed filtering on any model field or relation -- not just those specified in ``list_filter`` -- via query string manipulation. Due to security issues reported to us, however, query string lookup arguments in the admin must be for fields or relations specified in ``list_filter`` or ``date_hierarchy``."
msgstr ""

#: ../../releases/1.3.txt:360
# eb244152bc9e452282c07c6219b6fdb4
msgid "Deleting a model doesn't delete associated files"
msgstr ""

#: ../../releases/1.3.txt:362
# 0bf3412f6db54ef9a047e03178df34d7
msgid "In earlier Django versions, when a model instance containing a :class:`~django.db.models.FileField` was deleted, :class:`~django.db.models.FileField` took it upon itself to also delete the file from the backend storage. This opened the door to several data-loss scenarios, including rolled-back transactions and fields on different models referencing the same file. In Django 1.3, when a model is deleted the :class:`~django.db.models.FileField`'s ``delete()`` method won't be called. If you need cleanup of orphaned files, you'll need to handle it yourself (for instance, with a custom management command that can be run manually or scheduled to run periodically via e.g. cron)."
msgstr ""

#: ../../releases/1.3.txt:374
#: ../../releases/1.3-alpha-1.txt:167
# 8aa538758f2b4ed3a44284f3df2ec888
# c8332c2dbb7d498d9fa40224222ef68f
msgid "PasswordInput default rendering behavior"
msgstr ""

#: ../../releases/1.3.txt:376
#: ../../releases/1.3-alpha-1.txt:169
# b9a7c3a0ffee443798481f0a3ea12e85
# d877af94fffa48e2b71f2a74a7bffe48
msgid "The :class:`~django.forms.PasswordInput` form widget, intended for use with form fields which represent passwords, accepts a boolean keyword argument ``render_value`` indicating whether to send its data back to the browser when displaying a submitted form with errors. Prior to Django 1.3, this argument defaulted to ``True``, meaning that the submitted password would be sent back to the browser as part of the form. Developers who wished to add a bit of additional security by excluding that value from the redisplayed form could instantiate a :class:`~django.forms.PasswordInput` passing ``render_value=False`` ."
msgstr ""

#: ../../releases/1.3.txt:386
#: ../../releases/1.3-alpha-1.txt:179
# 78044f034d5743128ad7e8acb19a3d6e
# f4f5d8d4769f47d4a69ecd94b525a891
msgid "Due to the sensitive nature of passwords, however, Django 1.3 takes this step automatically; the default value of ``render_value`` is now ``False``, and developers who want the password value returned to the browser on a submission with errors (the previous behavior) must now explicitly indicate this. For example::"
msgstr ""

#: ../../releases/1.3.txt:397
#: ../../releases/1.3-alpha-1.txt:191
# 57b1ee6946204c4986f3c4cc16d4bdfe
# 3bd141ab7ce34604a854064a8f37268a
msgid "Clearable default widget for FileField"
msgstr ""

#: ../../releases/1.3.txt:399
# 6298e959aec447ad9a5b70c8c4f53fc0
msgid "Django 1.3 now includes a :class:`~django.forms.ClearableFileInput` form widget in addition to :class:`~django.forms.FileInput`. ``ClearableFileInput`` renders with a checkbox to clear the field's value (if the field has a value and is not required); ``FileInput`` provided no means for clearing an existing file from a ``FileField``."
msgstr ""

#: ../../releases/1.3.txt:405
#: ../../releases/1.3-alpha-1.txt:198
# 04d8cbdd897143da9ed5923ed14dda72
# bf3eb280364040dda3c82e4ff4b44acf
msgid "``ClearableFileInput`` is now the default widget for a ``FileField``, so existing forms including ``FileField`` without assigning a custom widget will need to account for the possible extra checkbox in the rendered form output."
msgstr ""

#: ../../releases/1.3.txt:409
#: ../../releases/1.3-alpha-1.txt:202
# 4172d032bf20444b90dba07716f37c47
# c52237947e7542f3ac68b76214d951ff
msgid "To return to the previous rendering (without the ability to clear the ``FileField``), use the ``FileInput`` widget in place of ``ClearableFileInput``. For instance, in a ``ModelForm`` for a hypothetical ``Document`` model with a ``FileField`` named ``document``::"
msgstr ""

#: ../../releases/1.3.txt:423
#: ../../releases/1.3-alpha-1.txt:216
# dd7f6285a24e44a5b48aaaf82e35eba0
# 4e67a9a4a5d742e3a82dfdcefedd0585
msgid "New index on database session table"
msgstr ""

#: ../../releases/1.3.txt:425
#: ../../releases/1.3-alpha-1.txt:218
# 57bff6fbf96f40d8a362faad2fdf466f
# 8aa520702d0f46f7a91426b9b89c8253
msgid "Prior to Django 1.3, the database table used by the database backend for the :doc:`sessions </topics/http/sessions>` app had no index on the ``expire_date`` column. As a result, date-based queries on the session table -- such as the query that is needed to purge old sessions -- would be very slow if there were lots of sessions."
msgstr ""

#: ../../releases/1.3.txt:431
#: ../../releases/1.3-alpha-1.txt:224
# 2397b94b4f4e495eaeed126b9300bf51
# f3e38766800b4e7d8aa65cadcfebf512
msgid "If you have an existing project that is using the database session backend, you don't have to do anything to accommodate this change. However, you may get a significant performance boost if you manually add the new index to the session table. The SQL that will add the index can be found by running the :djadmin:`sqlindexes` admin command::"
msgstr ""

#: ../../releases/1.3.txt:441
#: ../../releases/1.3-alpha-1.txt:234
# a7ab8b9611424084a533d67e7932a46f
# 70c65595251e4223bef741f239ac3101
msgid "No more naughty words"
msgstr ""

#: ../../releases/1.3.txt:443
#: ../../releases/1.3-alpha-1.txt:236
# df4fb0c5b623457a9f560ebe51c9b400
# d99520c6616a4992aab598160cbacc4a
msgid "Django has historically provided (and enforced) a list of profanities. The :doc:`comments app </ref/contrib/comments/index>` has enforced this list of profanities, preventing people from submitting comments that contained one of those profanities."
msgstr ""

#: ../../releases/1.3.txt:448
# c69c37b0edfd419688a3c09686b8bf76
msgid "Unfortunately, the technique used to implement this profanities list was woefully naive, and prone to the `Scunthorpe problem`_. Improving the built-in filter to fix this problem would require significant effort, and since natural language processing isn't the normal domain of a web framework, we have \"fixed\" the problem by making the list of prohibited words an empty list."
msgstr ""

#: ../../releases/1.3.txt:455
#: ../../releases/1.3-alpha-1.txt:248
# 98efb4f364504a12bb0e08048b737170
# 79367a1c22a14016b45d3108d89609b5
msgid "If you want to restore the old behavior, simply put a :setting:`PROFANITIES_LIST` setting in your settings file that includes the words that you want to prohibit (see the `commit that implemented this change`_ if you want to see the list of words that was historically prohibited). However, if avoiding profanities is important to you, you would be well advised to seek out a better, less naive approach to the problem."
msgstr ""

#: ../../releases/1.3.txt:467
#: ../../releases/1.3-alpha-1.txt:260
# 7c4b3f1a972e4020af1fd8212a559806
# 2535177db75d4fba9bc4cfe9a5cc2a70
msgid "Localflavor changes"
msgstr ""

#: ../../releases/1.3.txt:469
#: ../../releases/1.3-alpha-1.txt:262
# 7af013121baa4189b439495713c686c3
# 816da828270c412da995e270295f633c
msgid "Django 1.3 introduces the following backwards-incompatible changes to local flavors:"
msgstr ""

#: ../../releases/1.3.txt:472
# 8c830eb78e5045e88a424d5669e42998
msgid "Canada (ca) -- The province \"Newfoundland and Labrador\" has had its province code updated to \"NL\", rather than the older \"NF\". In addition, the Yukon Territory has had its province code corrected to \"YT\", instead of \"YK\"."
msgstr ""

#: ../../releases/1.3.txt:477
#: ../../releases/1.3-alpha-1.txt:265
# b70f89f284454527921886620caa69c0
# e193ac1dc216421b92f74a4c010ab67a
msgid "Indonesia (id) -- The province \"Nanggroe Aceh Darussalam (NAD)\" has been removed from the province list in favor of the new official designation \"Aceh (ACE)\"."
msgstr ""

#: ../../releases/1.3.txt:481
# 9d67af558ca54adca7474770d899d898
msgid "United States of America (us) -- The list of \"states\" used by ``USStateField`` has expanded to include Armed Forces postal codes. This is backwards-incompatible if you were relying on ``USStateField`` not including them."
msgstr ""

#: ../../releases/1.3.txt:487
# d961264effeb40e2b18f6494b210e8fb
msgid "FormSet updates"
msgstr ""

#: ../../releases/1.3.txt:489
# 83ddf75c5502486ebf2d74fe4754224a
msgid "In Django 1.3 ``FormSet`` creation behavior is modified slightly. Historically the class didn't make a distinction between not being passed data and being passed empty dictionary. This was inconsistent with behavior in other parts of the framework. Starting with 1.3 if you pass in empty dictionary the ``FormSet`` will raise a ``ValidationError``."
msgstr ""

#: ../../releases/1.3.txt:495
# 9ada1458df904bb3af2d349308bf33cb
msgid "For example with a ``FormSet``::"
msgstr ""

#: ../../releases/1.3.txt:502
# 6d4549adba354c7cb374795269db585a
msgid "the following code will raise a ``ValidationError``::"
msgstr ""

#: ../../releases/1.3.txt:509
# ae94e4fcbad545109bdd8d90fc690e4d
msgid "if you need to instantiate an empty ``FormSet``, don't pass in the data or use ``None``::"
msgstr ""

#: ../../releases/1.3.txt:516
# 487d2c2586f64f7ab3d7b23babb5d61b
msgid "Callables in templates"
msgstr ""

#: ../../releases/1.3.txt:518
# 9f59319b48db4c798559afcc5e4691bc
msgid "Previously, a callable in a template would only be called automatically as part of the variable resolution process if it was retrieved via attribute lookup. This was an inconsistency that could result in confusing and unhelpful behavior::"
msgstr ""

#: ../../releases/1.3.txt:528
# 6c3d371b2bcd478d99464006f590b9c7
msgid "This has been resolved in Django 1.3 - the result in both cases will be ``u'Joe Bloggs'``. Although the previous behavior was not useful for a template language designed for web designers, and was never deliberately supported, it is possible that some templates may be broken by this change."
msgstr ""

#: ../../releases/1.3.txt:564
# a3ba356f413842cca974cdf6710f7da4
msgid "Changed priority of translation loading"
msgstr ""

#: ../../releases/1.3.txt:566
# c5c9bfacf2ad4c6b9ab2bf77ec034883
msgid "Work has been done to simplify, rationalize and properly document the algorithm used by Django at runtime to build translations from the different translations found on disk, namely:"
msgstr ""

#: ../../releases/1.3.txt:570
# 33d39756bc7c4781a50686c4dcf2361d
msgid "For translatable literals found in Python code and templates (``'django'`` gettext domain):"
msgstr ""

#: ../../releases/1.3.txt:573
# 6908e4dbfe0e4131bc86aa8d580d9cb8
msgid "Priorities of translations included with applications listed in the :setting:`INSTALLED_APPS` setting were changed. To provide a behavior consistent with other parts of Django that also use such setting (templates, etc.) now, when building the translation that will be made available, the apps listed first have higher precedence than the ones listed later."
msgstr ""

#: ../../releases/1.3.txt:579
# b0ec236e471e41d58e08b2b2359ecd81
msgid "Now it is possible to override the translations shipped with applications by using the :setting:`LOCALE_PATHS` setting whose translations have now higher precedence than the translations of :setting:`INSTALLED_APPS` applications. The relative priority among the values listed in this setting has also been modified so the paths listed first have higher precedence than the ones listed later."
msgstr ""

#: ../../releases/1.3.txt:586
# 897d142f5959479f93e83c850135ee3b
msgid "The ``locale`` subdirectory of the directory containing the settings, that usually coincides with and is known as the *project directory* is being deprecated in this release as a source of translations. (the precedence of these translations is intermediate between applications and :setting:`LOCALE_PATHS` translations). See the `corresponding deprecated features section`_ of this document."
msgstr ""

#: ../../releases/1.3.txt:593
# 3f50720568ba47b8b9ad7f27747914dd
msgid "For translatable literals found in Javascript code (``'djangojs'`` gettext domain):"
msgstr ""

#: ../../releases/1.3.txt:596
# 81eb7fc712ab450b920311021ae4f010
msgid "Similarly to the ``'django'`` domain translations: Overriding of translations shipped with applications by using the :setting:`LOCALE_PATHS` setting is now possible for this domain too. These translations have higher precedence than the translations of Python packages passed to the :ref:`javascript_catalog view <javascript_catalog-view>`.  Paths listed first have higher precedence than the ones listed later."
msgstr ""

#: ../../releases/1.3.txt:603
# 6027cb595df14d9b8e1943109bc316b7
msgid "Translations under the ``locale`` subdirectory of the *project directory* have never been taken in account for JavaScript translations and remain in the same situation considering the deprecation of such location."
msgstr ""

#: ../../releases/1.3.txt:610
# 16162bced1be4201b9508f2d84c7f390
msgid "Transaction management"
msgstr ""

#: ../../releases/1.3.txt:612
# f680221cbd06444b8472c0d4c54f87b3
msgid "When using managed transactions -- that is, anything but the default autocommit mode -- it is important when a transaction is marked as \"dirty\". Dirty transactions are committed by the :func:`~django.db.transaction.commit_on_success` decorator or the :class:`~django.middleware.transaction.TransactionMiddleware`, and :func:`~django.db.transaction.commit_manually` forces them to be closed explicitly; clean transactions \"get a pass\", which means they are usually rolled back at the end of a request when the connection is closed."
msgstr ""

#: ../../releases/1.3.txt:622
# 4d72a4421e704897b68d9e204e0234fd
msgid "Until Django 1.3, transactions were only marked dirty when Django was aware of a modifying operation performed in them; that is, either some model was saved, some bulk update or delete was performed, or the user explicitly called ``transaction.set_dirty()``. In Django 1.3, a transaction is marked dirty when *any* database operation is performed."
msgstr ""

#: ../../releases/1.3.txt:629
# 12110f1776804d59a519a31f46cc7baf
msgid "As a result of this change, you no longer need to set a transaction dirty explicitly when you execute raw SQL or use a data-modifying ``SELECT``. However, you *do* need to explicitly close any read-only transactions that are being managed using :func:`~django.db.transaction.commit_manually`. For example::"
msgstr ""

#: ../../releases/1.3.txt:640
# f34d16c43f9b4d52bd685a6763023c11
msgid "Prior to Django 1.3, this would work without error. However, under Django 1.3, this will raise a :class:`~django.db.transaction.TransactionManagementError` because the read operation that retrieves the ``MyObject`` instance leaves the transaction in a dirty state."
msgstr ""

#: ../../releases/1.3.txt:647
# beccff2862154ffda7084d043644bd6f
msgid "No password reset for inactive users"
msgstr ""

#: ../../releases/1.3.txt:649
# eb31b5ab53864d059d296f0764777cc2
msgid "Prior to Django 1.3, inactive users were able to request a password reset email and reset their password. In Django 1.3 inactive users will receive the same message as a nonexistent account."
msgstr ""

#: ../../releases/1.3.txt:654
# 147cf0967e9f4b9798aca18222af3bf4
msgid "Password reset view now accepts ``from_email``"
msgstr ""

#: ../../releases/1.3.txt:656
# 0f4c4177daaf484599d4eb330c4f35cb
msgid "The :func:`django.contrib.auth.views.password_reset` view now accepts a ``from_email`` parameter, which is passed to the ``password_reset_form``'s ``save()`` method as a keyword argument. If you are using this view with a custom password reset form, then you will need to ensure your form's ``save()`` method accepts this keyword argument."
msgstr ""

#: ../../releases/1.3.txt:665
#: ../../releases/1.3-alpha-1.txt:271
# 159bfb45a11d4f65ac13092a59176cb8
# c98181006aad45e39a41e5c336a682bd
msgid "Features deprecated in 1.3"
msgstr ""

#: ../../releases/1.3.txt:667
#: ../../releases/1.3-alpha-1.txt:273
# 543d09da792349b38f27888b7e3ae3ae
# b65d5fbbcb57439592a234563738dd61
msgid "Django 1.3 deprecates some features from earlier releases. These features are still supported, but will be gradually phased out over the next few release cycles."
msgstr ""

#: ../../releases/1.3.txt:671
#: ../../releases/1.3-alpha-1.txt:277
# 6c3446ad53754054b87b188f087848b7
# 44e56b273b6042ef9f9390cf6ce6e2bd
msgid "Code taking advantage of any of the features below will raise a ``PendingDeprecationWarning`` in Django 1.3. This warning will be silent by default, but may be turned on using Python's :mod:`warnings` module, or by running Python with a ``-Wd`` or ``-Wall`` flag."
msgstr ""

#: ../../releases/1.3.txt:676
#: ../../releases/1.3-alpha-1.txt:282
# 2c65d830df0340ffab9d33f4f07d6d02
# 6766a62e945f46ea93258caba02331a8
msgid "In Django 1.4, these warnings will become a ``DeprecationWarning``, which is *not* silent. In Django 1.5 support for these features will be removed entirely."
msgstr ""

#: ../../releases/1.3.txt:682
#: ../../releases/1.3-alpha-1.txt:288
# 4146b95e52ce4eaf8a4d81b73905d6b8
# 2ffbf6c6e21448618d74ce2f31e93097
msgid "For more details, see the documentation :doc:`Django's release process </internals/release-process>` and our :doc:`deprecation timeline </internals/deprecation>`."
msgstr ""

#: ../../releases/1.3.txt:687
#: ../../releases/1.3-alpha-1.txt:293
# 830e3659ffdf4cb689de93fe858a99ff
# 9671504c3a294c0d94af8e5d8515d2f1
msgid "``mod_python`` support"
msgstr ""

#: ../../releases/1.3.txt:689
#: ../../releases/1.3-alpha-1.txt:295
# 55ee05fae2ed49fb8e68e657658e8e43
# e2352e0be7e340a2b6bcd7dfefd043a9
msgid "The ``mod_python`` library has not had a release since 2007 or a commit since 2008. The Apache Foundation board voted to remove ``mod_python`` from the set of active projects in its version control repositories, and its lead developer has shifted all of his efforts toward the lighter, slimmer, more stable, and more flexible ``mod_wsgi`` backend."
msgstr ""

#: ../../releases/1.3.txt:695
# 3943fd1fb88241549f041bc5f1e78d8a
msgid "If you are currently using the ``mod_python`` request handler, you should redeploy your Django projects using another request handler. :doc:`mod_wsgi </howto/deployment/wsgi/modwsgi>` is the request handler recommended by the Django project, but :doc:`FastCGI </howto/deployment/fastcgi>` is also supported. Support for ``mod_python`` deployment will be removed in Django 1.5."
msgstr ""

#: ../../releases/1.3.txt:703
#: ../../releases/1.3-alpha-1.txt:306
# 2f917df6bf034c8ca658b0deaef9cbf5
# 60dc8a36220942fb97f34a5cf3fe57ed
msgid "Function-based generic views"
msgstr ""

#: ../../releases/1.3.txt:705
#: ../../releases/1.3-alpha-1.txt:308
# 20039e55e0854268ac41adfb8e0a3a7f
# 67624a37db5d4ff7bc7c2d6c8c594016
msgid "As a result of the introduction of class-based generic views, the function-based generic views provided by Django have been deprecated. The following modules and the views they contain have been deprecated:"
msgstr ""

#: ../../releases/1.3.txt:709
#: ../../releases/1.3-alpha-1.txt:312
# 32e8fe53a9c54611871f389349bf24ad
# 7fe9eecab5a04cd2a71b4be6e8ded8ce
msgid "``django.views.generic.create_update``"
msgstr ""

#: ../../releases/1.3.txt:710
#: ../../releases/1.3-alpha-1.txt:313
# c733792e2d1640b798648f273a1ef975
# 8b32869561d543f58897275fddd1be1c
msgid "``django.views.generic.date_based``"
msgstr ""

#: ../../releases/1.3.txt:711
#: ../../releases/1.3-alpha-1.txt:314
# d33543eda22b4d9690330c7d2aaf3aee
# 58ffc7f3ffb644a5879e21421d44ddbd
msgid "``django.views.generic.list_detail``"
msgstr ""

#: ../../releases/1.3.txt:712
#: ../../releases/1.3-alpha-1.txt:315
# bf1016d244f14066abea7dd435a19a8a
# 55678f54622248d699d3bdb6f48f0d1a
msgid "``django.views.generic.simple``"
msgstr ""

#: ../../releases/1.3.txt:715
#: ../../releases/1.3-alpha-1.txt:318
# 796416c485944caea66d6c4174714b50
# 9fbabef759944d399c8173110808a8ca
msgid "Test client response ``template`` attribute"
msgstr ""

#: ../../releases/1.3.txt:717
#: ../../releases/1.3-alpha-1.txt:320
# 26c70f685d154b3e8112e54cb45b8f4f
# 1bde4d5a3d084e6dbbed00856e70d075
msgid "Django's :ref:`test client <test-client>` returns :class:`~django.test.client.Response` objects annotated with extra testing information. In Django versions prior to 1.3, this included a ``template`` attribute containing information about templates rendered in generating the response: either None, a single :class:`~django.template.Template` object, or a list of :class:`~django.template.Template` objects. This inconsistency in return values (sometimes a list, sometimes not) made the attribute difficult to work with."
msgstr ""

#: ../../releases/1.3.txt:726
#: ../../releases/1.3-alpha-1.txt:329
# 33554cc3a9d94e8b81e3dfb2a9d660c1
# 61a8f4dd9c9d44d4903527485752fa04
msgid "In Django 1.3 the ``template`` attribute is deprecated in favor of a new :attr:`~django.test.client.Response.templates` attribute, which is always a list, even if it has only a single element or no elements."
msgstr ""

#: ../../releases/1.3.txt:731
#: ../../releases/1.3-alpha-1.txt:334
# 8f17de91c7ec45c580e769355e6c6dfc
# a20c16b701384681b75fe9d5658e9b63
msgid "``DjangoTestRunner``"
msgstr ""

#: ../../releases/1.3.txt:733
#: ../../releases/1.3-alpha-1.txt:336
# 649338a6e41a4a2b92f6606e17a7a8b0
# 54b40bce733e4957a331839c3b00d916
msgid "As a result of the introduction of support for unittest2, the features of ``django.test.simple.DjangoTestRunner`` (including fail-fast and Ctrl-C test termination) have been made redundant. In view of this redundancy, ``DjangoTestRunner`` has been turned into an empty placeholder class, and will be removed entirely in Django 1.5."
msgstr ""

#: ../../releases/1.3.txt:740
# d1e277caa887415da47e47655385f012
msgid "Changes to :ttag:`url` and :ttag:`ssi`"
msgstr ""

#: ../../releases/1.3.txt:742
# e80c680725d64c89af1c007963d6362d
msgid "Most template tags will allow you to pass in either constants or variables as arguments -- for example::"
msgstr ""

#: ../../releases/1.3.txt:747
# 31cb0cdcd8994ed0924e02320bca510c
msgid "allows you to specify a base template as a constant, but if you have a context variable ``templ`` that contains the value ``base.html``::"
msgstr ""

#: ../../releases/1.3.txt:752
# 57db04d99d11417aba75b38192351b35
msgid "is also legal."
msgstr ""

#: ../../releases/1.3.txt:754
# 263d9b759cda42d98e335bb84da5bf63
msgid "However, due to an accident of history, the :ttag:`url` and :ttag:`ssi` are different. These tags use the second, quoteless syntax, but interpret the argument as a constant. This means it isn't possible to use a context variable as the target of a :ttag:`url` and :ttag:`ssi` tag."
msgstr ""

#: ../../releases/1.3.txt:760
# 3552dabd13ba41f1ac0db5435b170e3f
msgid "Django 1.3 marks the start of the process to correct this historical accident. Django 1.3 adds a new template library -- ``future`` -- that provides alternate implementations of the :ttag:`url` and :ttag:`ssi` template tags. This ``future`` library implement behavior that makes the handling of the first argument consistent with the handling of all other variables. So, an existing template that contains::"
msgstr ""

#: ../../releases/1.3.txt:769
# e423ecba21e14aa1ac916c481e9f235d
msgid "should be replaced with::"
msgstr ""

#: ../../releases/1.3.txt:774
# af99fea05205448e986134cd73699ce3
msgid "The tags implementing the old behavior have been deprecated, and in Django 1.5, the old behavior will be replaced with the new behavior. To ensure compatibility with future versions of Django, existing templates should be modified to use the new ``future`` libraries and syntax."
msgstr ""

#: ../../releases/1.3.txt:781
#: ../../releases/1.3-beta-1.txt:124
# c181b9f7be3a4e49947664c156f11e79
# e8aed872fd3e404caed8ce5803d328d0
msgid "Changes to the login methods of the admin"
msgstr ""

#: ../../releases/1.3.txt:783
#: ../../releases/1.3-beta-1.txt:126
# 747b45af770249fe82b93a740d6dac9e
# 4b33fe0c6353480ca649bd25a59e5d03
msgid "In previous version the admin app defined login methods in multiple locations and ignored the almost identical implementation in the already used auth app. A side effect of this duplication was the missing adoption of the changes made in r12634_ to support a broader set of characters for usernames."
msgstr ""

#: ../../releases/1.3.txt:788
#: ../../releases/1.3-beta-1.txt:131
# 09f637928f564accb4d6704146b6486d
# a2d1ff5e0880450c9a683b2aa472be96
msgid "This release refactors the admin's login mechanism to use a subclass of the :class:`~django.contrib.auth.forms.AuthenticationForm` instead of a manual form validation. The previously undocumented method ``'django.contrib.admin.sites.AdminSite.display_login_form'`` has been removed in favor of a new :attr:`~django.contrib.admin.AdminSite.login_form` attribute."
msgstr ""

#: ../../releases/1.3.txt:798
# 4af85d40eb144cf3b09a4e711f5dc9df
msgid "``reset`` and ``sqlreset`` management commands"
msgstr ""

#: ../../releases/1.3.txt:800
# 179815df7bbd4fe0b9887cf4fe0f6d0a
msgid "Those commands have been deprecated. The ``flush`` and ``sqlflush`` commands can be used to delete everything. You can also use ALTER TABLE or DROP TABLE statements manually."
msgstr ""

#: ../../releases/1.3.txt:808
# 53f3d81137d7402ba89633248b3bd5ed
msgid "The function-based :setting:`TEST_RUNNER` previously used to execute the GeoDjango test suite, ``django.contrib.gis.tests.run_gis_tests``, was deprecated for the class-based runner, ``django.contrib.gis.tests.GeoDjangoTestSuiteRunner``."
msgstr ""

#: ../../releases/1.3.txt:813
# 9f209a8ec59d49c48b0d1e42079c2472
msgid "Previously, calling :meth:`~django.contrib.gis.geos.GEOSGeometry.transform` would silently do nothing when GDAL wasn't available.  Now, a :class:`~django.contrib.gis.geos.GEOSException` is properly raised to indicate possible faulty application code.  A warning is now raised if :meth:`~django.contrib.gis.geos.GEOSGeometry.transform` is called when the SRID of the geometry is less than 0 or ``None``."
msgstr ""

#: ../../releases/1.3.txt:822
# e6de300023a1426988c0840f6b10309c
msgid "``CZBirthNumberField.clean``"
msgstr ""

#: ../../releases/1.3.txt:824
# 3c459951e5da4fd595d76aeeed649852
msgid "Previously this field's ``clean()`` method accepted a second, gender, argument which allowed stronger validation checks to be made, however since this argument could never actually be passed from the Django form machinery it is now pending deprecation."
msgstr ""

#: ../../releases/1.3.txt:830
# 26ebc149fd6d439aa4f41edd834b9f9f
msgid "``CompatCookie``"
msgstr ""

#: ../../releases/1.3.txt:832
# 86b35ddf8bde478b82a8ff4cf31c1147
msgid "Previously, ``django.http`` exposed an undocumented ``CompatCookie`` class, which was a bugfix wrapper around the standard library ``SimpleCookie``. As the fixes are moving upstream, this is now deprecated - you should use ``from django.http import SimpleCookie`` instead."
msgstr ""

#: ../../releases/1.3.txt:840
# 05b5b28c74b64c0aa4a62925c19e2d9b
msgid "Loading of *project-level* translations"
msgstr ""

#: ../../releases/1.3.txt:842
# 03b2f7bd492f45d0a28fdaaf27510caa
msgid "This release of Django starts the deprecation process for inclusion of translations located under the so-called *project path* in the translation building process performed at runtime. The :setting:`LOCALE_PATHS` setting can be used for the same task by adding the filesystem path to a ``locale`` directory containing project-level translations to the value of that setting."
msgstr ""

#: ../../releases/1.3.txt:848
# 7b5e4b5ff5f641ea906c12acd84e0075
msgid "Rationale for this decision:"
msgstr ""

#: ../../releases/1.3.txt:850
# 1c537aa5e0bd4bf3828a5002e22957a2
msgid "The *project path* has always been a loosely defined concept (actually, the directory used for locating project-level translations is the directory containing the settings module) and there has been a shift in other parts of the framework to stop using it as a reference for location of assets at runtime."
msgstr ""

#: ../../releases/1.3.txt:856
# 2d9822acf1cf4d8b923c3a835b94105d
msgid "Detection of the ``locale`` subdirectory tends to fail when the deployment scenario is more complex than the basic one. e.g. it fails when the settings module is a directory (ticket #10765)."
msgstr ""

#: ../../releases/1.3.txt:860
# c49a6c3b084a4988bd248c6565167cb2
msgid "There are potential strange development- and deployment-time problems like the fact that the ``project_dir/locale/`` subdir can generate spurious error messages when the project directory is added to the Python path (``manage.py runserver`` does this) and then it clashes with the equally named standard library module, this is a typical warning message::"
msgstr ""

#: ../../releases/1.3.txt:870
# 392ea203e15746469e9cecd1b1970b75
msgid "This location wasn't included in the translation building process for JavaScript literals. This deprecation removes such inconsistency."
msgstr ""

#: ../../releases/1.3.txt:875
# fabd2c9be5814503a097da2bc4e8e8ba
msgid "``PermWrapper`` moved to ``django.contrib.auth.context_processors``"
msgstr ""

#: ../../releases/1.3.txt:877
# 745886bdb82f4022baad66ac29b0e990
msgid "In Django 1.2, we began the process of changing the location of the ``auth`` context processor from ``django.core.context_processors`` to ``django.contrib.auth.context_processors``. However, the ``PermWrapper`` support class was mistakenly omitted from that migration. In Django 1.3, the ``PermWrapper`` class has also been moved to ``django.contrib.auth.context_processors``, along with the ``PermLookupDict`` support class. The new classes are functionally identical to their old versions; only the module location has changed."
msgstr ""

#: ../../releases/1.3.txt:887
# 50be0a5181414abba0921f40ba1a334e
msgid "Removal of ``XMLField``"
msgstr ""

#: ../../releases/1.3.txt:889
# 9cdde4a1e2244093b1f012f7fa3e7f05
msgid "When Django was first released, Django included an ``XMLField`` that performed automatic XML validation for any field input. However, this validation function hasn't been performed since the introduction of ``newforms``, prior to the 1.0 release. As a result, ``XMLField`` as currently implemented is functionally indistinguishable from a simple :class:`~django.db.models.TextField`."
msgstr ""

#: ../../releases/1.3.txt:895
# 6afa9b4849e6492683551ae6fdd21059
msgid "For this reason, Django 1.3 has fast-tracked the deprecation of ``XMLField`` -- instead of a two-release deprecation, ``XMLField`` will be removed entirely in Django 1.4."
msgstr ""

#: ../../releases/1.3.txt:899
# 2ac1f2c087b74b5fb8778c6cfbaa5a30
msgid "It's easy to update your code to accommodate this change -- just replace all uses of ``XMLField`` with ``TextField``, and remove the ``schema_path`` keyword argument (if it is specified)."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:3
# b30ce7c90e114294a15f3a081818f269
msgid "Django 1.3 alpha 1 release notes"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:5
# a424cc6f29044f89b2d1b8682bd48756
msgid "November 11, 2010"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:7
# 32775ec04f444386974e56835bb8109b
msgid "Welcome to Django 1.3 alpha 1!"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:9
# 6edacce30a0643218aa47cac88b39b0f
msgid "This is the first in a series of preview/development releases leading up to the eventual release of Django 1.3. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.3 release."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:18
# d88cb002365141979b77b0969c3fc0a0
msgid "As of this alpha release, Django 1.3 contains a number of nifty `new features`_, lots of bug fixes, some minor `backwards incompatible changes`_ and an easy upgrade path from Django 1.2."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:27
# cf5a4d2fbb9745809c2ec5ae58d1502d
msgid "What's new in Django 1.3 alpha 1"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:41
# b20824e13fe24f4c87ab1d4bfef19203
msgid "See :doc:`the documentation on Class-based Generic Views </topics/class-based-views/index>` for more details. There is also a document to help you `convert your function-based generic views to class-based views <https://docs.djangoproject.com/en/1.4/topics/generic-views-migration/>`_."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:49
# 192b5a00633d412da9cd3f8bda4a7351
msgid "Django 1.3 adds framework-level support for Python's logging module. This means you can now easily configure and control logging as part of your Django project. A number of logging handlers and logging calls have been added to Django's own code as well -- most notably, the error emails sent on a HTTP 500 server error are now handled as a logging activity. See :doc:`the documentation on Django's logging interface </topics/logging>` for more details."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:60
# cea6b02ed5a047478c82ddf3cc7aca36
msgid "Django 1.3 ships with a new contrib app ``'django.contrib.staticfiles'`` to help developers handle the static media files (images, CSS, Javascript, etc.) that are needed to render a complete web page."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:78
# 7cfef92ef48740b681469f0fb2cd2d16
msgid "``unittest2`` support"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:80
# e8634b9fd6a841348b91a600eb3146ea
msgid "Python 2.7 introduced some major changes to the unittest library, adding some extremely useful features. To ensure that every Django project can benefit from these new features, Django ships with a copy of unittest2_, a copy of the Python 2.7 unittest library, backported for Python 2.4 compatibility."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:86
# 48e0f8b8471b4e718b0105f53aa41055
msgid "To access this library, Django provides the ``django.utils.unittest`` module alias. If you are using Python 2.7, or you have installed unittest2 locally, Django will map the alias to the installed version of the unittest library. Otherwise, Django will use its own bundled version of unittest2."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:92
# 382a9476df94445a943a6e2d15e706c5
msgid "To use this alias, simply use::"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:100
# e8f3f08b2f804ee992d48bbff3920a6c
msgid "If you want to continue to use the base unittest libary, you can -- you just won't get any of the nice new unittest2 features."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:130
# 80d033148996401caed475e2b7b8c893
msgid "Contextual markers in translatable strings"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:135
# ea4caf33a5cb408c9ee403c900c44170
msgid "For more information, see :ref:`contextual-markers`"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:150
# 99b3ea42b2724c05a3a6d0e8fb2b1d45
msgid "Improved tools for accessing and manipulating the current Site via ``django.contrib.sites.models.get_current_site()``."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:164
# 2bf4135fd5934a1d9324530d4806cba6
msgid "Backwards-incompatible changes in 1.3 alpha 1"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:193
# acd68c1cbc074c33aee5ff242f6e230c
msgid "Django 1.3 now includes a ``ClearableFileInput`` form widget in addition to ``FileInput``. ``ClearableFileInput`` renders with a checkbox to clear the field's value (if the field has a value and is not required); ``FileInput`` provided no means for clearing an existing file from a ``FileField``."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:241
# 5f67d6749c214c54a2b50908da075f1d
msgid "Unfortunately, the technique used to implement this profanities list was woefully naive, and prone to the `Scunthorpe problem`_. Fixing the built in filter to fix this problem would require significant effort, and since natural language processing isn't the normal domain of a web framework, we have \"fixed\" the problem by making the list of prohibited words an empty list."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:301
# bb555092d1cf47f3807a52fd36ac88b0
msgid "If you are currently using the ``mod_python`` request handler, you are strongly encouraged to redeploy your Django instances using :doc:`mod_wsgi </howto/deployment/wsgi/modwsgi>`."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:343
#: ../../releases/1.3-beta-1.txt:186
# 9c83fd4bf6c84afbbb78684bcbc8712d
# f811aa04f75b408987b251a887a2616e
msgid "The Django 1.3 roadmap"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:345
#: ../../releases/1.3-beta-1.txt:188
# e6c725bb211c478fb3365903d5b610de
# 48dab5b9e6ad4281ba1ff56f567fd8c3
msgid "Before the final Django 1.3 release, several other preview/development releases will be made available. The current schedule consists of at least the following:"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:349
# cf36a73919454fc9bc4c9e11873f963d
msgid "Week of **November 29, 2010**: First Django 1.3 beta release. Final feature freeze for Django 1.3."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:352
# f1ceba72185043b2aed3b13371ef706e
msgid "Week of **January 10, 2011**: First Django 1.3 release candidate. String freeze for translations."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:355
# d6826f916ac84d97b3e8ba85d6b9ddb0
msgid "Week of **January 17, 2011**: Django 1.3 final release."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:357
# ebc19120e7b84654b14a5b9e40eb15d9
msgid "If necessary, additional alpha, beta or release-candidate packages will be issued prior to the final 1.3 release. Django 1.3 will be released approximately one week after the final release candidate."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:365
# 92bc89b9029241069d172fc6124771e4
msgid "In order to provide a high-quality 1.3 release, we need your help. Although this alpha release is, again, *not* intended for production use, you can help the Django team by trying out the alpha codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:376
#: ../../releases/1.3-beta-1.txt:216
#: ../../releases/1.4-alpha-1.txt:1105
# 6f985c592ab243dbbbc2e984642bb0cc
# 0633b69c75524b089a73fbbdd94f9c80
# 5c8d467ffe1e4a7994a0ba369fa0c0c7
msgid "Additionally, discussion of Django development, including progress toward the 1.3 release, takes place daily on the django-developers mailing list:"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:394
# f15d1c75c7f54bb1aa0188269df6caf7
msgid "Several development sprints will also be taking place before the 1.3 release; these will typically be announced in advance on the django-developers mailing list, and anyone who wants to help is welcome to join in."
msgstr ""

#: ../../releases/1.3-beta-1.txt:3
# 62b0e37bdb5e419fa5188398a56277eb
msgid "Django 1.3 beta 1 release notes"
msgstr ""

#: ../../releases/1.3-beta-1.txt:5
# 59c87646fd5948229c1457df990da64e
msgid "Welcome to Django 1.3 beta 1!"
msgstr ""

#: ../../releases/1.3-beta-1.txt:7
# ddfa0c45af564cfcbc4fab9f0263db94
msgid "This is the second in a series of preview/development releases leading up to the eventual release of Django 1.3. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.3 release."
msgstr ""

#: ../../releases/1.3-beta-1.txt:17
# b2a3af2d8d3f415b81e52487e6def4db
msgid "What's new in Django 1.3 beta 1"
msgstr ""

#: ../../releases/1.3-beta-1.txt:20
# 6fbc32fc6f6d49c29a303151549539f2
msgid "Further tweaks to the staticfiles app"
msgstr ""

#: ../../releases/1.3-beta-1.txt:22
# 6623403f50fd450ead1c09f4468cd52e
msgid "Django 1.3 ships with a new contrib app :mod:`django.contrib.staticfiles` to help developers handle the static media files (images, CSS, JavaScript, etc.) that are needed to render a complete web page."
msgstr ""

#: ../../releases/1.3-beta-1.txt:26
# b00771177adc48c8ace45f343a24e3cc
msgid "The :mod:`~django.contrib.staticfiles` app ships with the ability to automatically serve static files during development (if the :setting:`DEBUG` setting is ``True``) when using the :djadmin:`runserver` management command. Based on feedback from the community this release adds two new options to the :djadmin:`runserver` command to modify this behavior:"
msgstr ""

#: ../../releases/1.3-beta-1.txt:32
# 45d5499bf6ec4ab68af96cf17943a107
msgid "``--nostatic``: prevents the :djadmin:`runserver` command from serving files completely."
msgstr ""

#: ../../releases/1.3-beta-1.txt:35
# a410f759f83741f58f47bf07cd67b534
msgid "``--insecure``: enables serving of static files even if running with :setting:`DEBUG` set to False. (This is **not** recommended!)"
msgstr ""

#: ../../releases/1.3-beta-1.txt:38
# 40cb628297c04258a57138102166fe44
msgid "See the :doc:`staticfiles reference documentation </ref/contrib/staticfiles>` for more details, or learn :doc:`how to manage static files </howto/static-files/index>`."
msgstr ""

#: ../../releases/1.3-beta-1.txt:43
# ea8d93e0b7a042688d89764618980aa6
msgid "Translation comments"
msgstr ""

#: ../../releases/1.3-beta-1.txt:45
# 18e41bccbac44c80a685c97b2e3d52b6
msgid "If you would like to give translators hints about a translatable string, you can add a comment prefixed with the ``Translators`` keyword on the line preceding the string, e.g.::"
msgstr ""

#: ../../releases/1.3-beta-1.txt:53
# da9aac6f4df44f4a99e5e24165e92983
msgid "The comment will appear in the resulting .po file and should also be displayed by most translation tools."
msgstr ""

#: ../../releases/1.3-beta-1.txt:56
# a99e35f5ef804508b1d14483b985bef6
msgid "For more information, see :ref:`translator-comments`."
msgstr ""

#: ../../releases/1.3-beta-1.txt:61
# 9ca0ffd83aad4d779665b924528a6d02
msgid "If you provide a custom auth backend with ``supports_inactive_user`` set to ``True``, an inactive user model will check the backend for permissions. This is useful for further centralizing the permission handling. See the :doc:`authentication docs </topics/auth/index>` for more details."
msgstr ""

#: ../../releases/1.3-beta-1.txt:67
# eb3dd8ae36c844dfa5a3d4232a53bdd6
msgid "Backwards-incompatible changes in 1.3 alpha 2"
msgstr ""

#: ../../releases/1.3-beta-1.txt:70
# 412d93b076434e93bbb6cd2e07a58db4
msgid "Change to admin lookup filters"
msgstr ""

#: ../../releases/1.3-beta-1.txt:72
# d4030aeb3f364e8aa13c55d4c841a1ec
msgid "The Django admin has long had an undocumented \"feature\" allowing savvy users to manipulate the query string of changelist pages to filter the list of objects displayed. However, this also creates a security issue, as a staff user with sufficient knowledge of model structure could use this \"feature\" to gain access to information he or she would not normally have."
msgstr ""

#: ../../releases/1.3-beta-1.txt:79
# 5c943d00d8ed4c19a7f5454f82abd834
msgid "As a result, changelist filtering now explicitly validates all lookup arguments in the query string, and permits only fields which are directly on the model, or relations explicitly permitted by the ``ModelAdmin`` definition. If you were relying on this undocumented feature, you will need to update your ``ModelAdmin`` definitions to whitelist the relations you choose to expose for filtering."
msgstr ""

#: ../../releases/1.3-beta-1.txt:87
# f8cbdd9aff3344219f465e848fa9d0fe
msgid "Introduction of STATIC_URL and STATIC_ROOT settings"
msgstr ""

#: ../../releases/1.3-beta-1.txt:89
# e23887b84f474d0bb837a486eb1c7c04
msgid "The newly introduced :mod:`~django.contrib.staticfiles` app -- which extends Django's abilities to handle static files for apps and projects -- required the additon of two new settings to refer to those files in templates and code, especially in contrast to the :setting:`MEDIA_URL` and :setting:`MEDIA_ROOT` settings that refer to user-uploaded files."
msgstr ""

#: ../../releases/1.3-beta-1.txt:95
# 44db42d24adc4393aafcc58cdb65b957
msgid "Prior to 1.3 alpha 2 these settings were called ``STATICFILES_URL`` and ``STATICFILES_ROOT`` to follow the naming scheme for app-centric settings. Based on feedback from the community it became apparent that those settings created confusion, especially given the fact that handling static files is also desired outside the use of the optional :mod:`~django.contrib.staticfiles` app."
msgstr ""

#: ../../releases/1.3-beta-1.txt:101
# 4cfa23196b98486dab81058494befcf7
msgid "As a result, we took the following steps to rectify the issue:"
msgstr ""

#: ../../releases/1.3-beta-1.txt:103
# c7c7dba4bb9e465a8adb50ddd51d8480
msgid "Two new global settings were added that will be used by, **but are not limited to**, the :doc:`staticfiles</ref/contrib/staticfiles>` app:"
msgstr ""

#: ../../releases/1.3-beta-1.txt:106
# d3358e3c510e491d9aea625ddd360224
msgid ":setting:`STATIC_ROOT` (formally ``STATICFILES_ROOT``)"
msgstr ""

#: ../../releases/1.3-beta-1.txt:108
# 6cced408623943f4b77fb88325de0dbd
msgid ":setting:`STATIC_URL` (formally ``STATICFILES_URL``)"
msgstr ""

#: ../../releases/1.3-beta-1.txt:110
# 2f6ebb68ebea412cb3ebd1354a1b2021
msgid "The ``django.contrib.staticfiles.templatetags.staticfiles.get_staticfiles_prefix`` template tag was moved to Django's core (``django.templatetags.static``) and renamed to :ttag:`get_static_prefix`."
msgstr ""

#: ../../releases/1.3-beta-1.txt:114
# f25d11b2fc0f4400b0775ea120f8460c
msgid "The ``django.contrib.staticfiles.context_processors.staticfiles`` context processor was moved to Django's core (``django.core.context_processors.static``) and renamed to :func:`~django.core.context_processors.static`."
msgstr ""

#: ../../releases/1.3-beta-1.txt:119
# 51fcccbe47814efc95361c79284f3012
msgid ":ref:`form-asset-paths` now uses :setting:`STATIC_URL` as the prefix **if the value is not None**, and falls back to the previously used :setting:`MEDIA_URL` setting otherwise."
msgstr ""

#: ../../releases/1.3-beta-1.txt:141
# b4f539e2f553485aa8ead32945a96ba4
msgid "Changes to ``USStateField``"
msgstr ""

#: ../../releases/1.3-beta-1.txt:143
# 907f65de93f340ffb41c53a5cfb178a8
msgid "The ``django.contrib.localflavor`` application contains collections of code relevant to specific countries or cultures. One such is ``USStateField``, which provides a field for storing the two-letter postal abbreviation of a U.S. state. This field has consistently caused problems, however, because it is often used to store the state portion of a U.S postal address, but not all \"states\" recognized by the U.S Postal Service are actually states of the U.S. or even U.S. territory. Several compromises over the list of choices resulted in some users feeling the field supported too many locations, while others felt it supported too few."
msgstr ""

#: ../../releases/1.3-beta-1.txt:154
# ee8eb63fa55e489fa60405a888fac9e2
msgid "In Django 1.3 we're taking a new approach to this problem, implemented as a pair of changes:"
msgstr ""

#: ../../releases/1.3-beta-1.txt:157
# c1d8fe9e630742269e406f707280b46c
msgid "The choice list for ``USStateField`` has changed. Previously, it consisted of the 50 U.S. states, the District of Columbia and U.S. overseas territories. As of Django 1.3 it includes all previous choices, plus the U.S. Armed Forces postal codes."
msgstr ""

#: ../../releases/1.3-beta-1.txt:162
# 6a48ffee9b4643c58e70353aec63fbcf
msgid "A new model field, ``django.contrib.localflavor.us.models.USPostalCodeField``, has been added which draws its choices from a list of all postal abbreviations recognized by the U.S Postal Service. This includes all abbreviations recognized by ``USStateField``, plus three independent nations -- the Federated States of Micronesia, the Republic of the Marshall Islands and the Republic of Palau -- which are serviced under treaty by the U.S. postal system. A new form widget, ``django.contrib.localflavor.us.forms.USPSSelect``, is also available and provides the same set of choices."
msgstr ""

#: ../../releases/1.3-beta-1.txt:173
# 1d6ccf503e234467a232322f1168ccdb
msgid "Additionally, several finer-grained choice tuples are provided which allow mixing and matching of subsets of the U.S. states and territories, and other locations serviced by the U.S. postal system. Consult the ``django.contrib.localflavor`` documentation for more details."
msgstr ""

#: ../../releases/1.3-beta-1.txt:179
# 3a445568b4d34e28a9a68a80bf1f8fa7
msgid "The change to ``USStateField`` is technically backwards-incompatible for users who expect this field to exclude Armed Forces locations. If you need to support U.S. mailing addresses without Armed Forces locations, see the list of choice tuples available in the localflavor documentation."
msgstr ""

#: ../../releases/1.3-beta-1.txt:192
# 491173b5374d4cfaaa84230004af435e
msgid "Week of **January 24, 2011**: First Django 1.3 release candidate. String freeze for translations."
msgstr ""

#: ../../releases/1.3-beta-1.txt:195
# 41eedbba7cae4d8a81b3f55bd7da4fe6
msgid "Week of **January 31, 2011**: Django 1.3 final release."
msgstr ""

#: ../../releases/1.3-beta-1.txt:197
# e4ee8d7b34864826a7297f210f11a1ce
msgid "If necessary, additional beta or release-candidate packages will be issued prior to the final 1.3 release. Django 1.3 will be released approximately one week after the final release candidate."
msgstr ""

#: ../../releases/1.3-beta-1.txt:205
# 4fb4919707c7426d942b513b80d21d03
msgid "In order to provide a high-quality 1.3 release, we need your help. Although this beta release is, again, *not* intended for production use, you can help the Django team by trying out the beta codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.3.1.txt:3
# de0efd8f30bb4528a643b239243b6143
msgid "Django 1.3.1 release notes"
msgstr ""

#: ../../releases/1.3.1.txt:7
# e811e5e7691c4d47a78cc77f535785fc
msgid "Welcome to Django 1.3.1!"
msgstr ""

#: ../../releases/1.3.1.txt:9
# 04a28c39930449a4946e1667a37ce48b
msgid "This is the first security release in the Django 1.3 series, fixing several security issues in Django 1.3.  Django 1.3.1 is a recommended upgrade for all users of Django 1.3."
msgstr ""

#: ../../releases/1.3.2.txt:3
# 67d7b88bf71a48308aa6d50c3a3159c3
msgid "Django 1.3.2 release notes"
msgstr ""

#: ../../releases/1.3.2.txt:5
#: ../../releases/1.4.1.txt:5
# 83bbd630a0e347bf91432ae4df20f9a2
# 0e0c84e1913d41009422df86c90b43a6
msgid "*July 30, 2012*"
msgstr ""

#: ../../releases/1.3.2.txt:7
# 94a7643b088d4274b66777c75f19bfdb
msgid "This is the second security release in the Django 1.3 series, fixing several security issues in Django 1.3. Django 1.3.2 is a recommended upgrade for all users of Django 1.3."
msgstr ""

#: ../../releases/1.3.3.txt:3
# 8b14a421f4a743699cd1d0e4721c702a
msgid "Django 1.3.3 release notes"
msgstr ""

#: ../../releases/1.3.3.txt:5
# 67804db02e2a4f669a0f30917ba2e8dc
msgid "*August 1, 2012*"
msgstr ""

#: ../../releases/1.3.3.txt:7
# aabde09e295444adb1d1557c34e5f542
msgid "Following Monday's security release of :doc:`Django 1.3.2 </releases/1.3.2>`, we began receiving reports that one of the fixes applied was breaking Python 2.4 compatibility for Django 1.3. Since Python 2.4 is a supported Python version for that release series, this release fixes compatibility with Python 2.4."
msgstr ""

#: ../../releases/1.3.4.txt:3
# a36e3c53c05d4bc8a8fd96b7de9b80aa
msgid "Django 1.3.4 release notes"
msgstr ""

#: ../../releases/1.3.4.txt:5
#: ../../releases/1.4.2.txt:5
# b8c0e2ea214d4d50b38a2375818521f4
# 5f16eb17d5a54a05ae8d28b78fc203ca
msgid "*October 17, 2012*"
msgstr ""

#: ../../releases/1.3.4.txt:7
# d4a194fcbf1c470895e180d83a3e4670
msgid "This is the fourth release in the Django 1.3 series."
msgstr ""

#: ../../releases/1.3.4.txt:10
#: ../../releases/1.3.5.txt:17
#: ../../releases/1.3.6.txt:14
#: ../../releases/1.4.2.txt:10
#: ../../releases/1.4.3.txt:17
#: ../../releases/1.4.4.txt:15
# 4375f2a5056043fc8b6da73b3e7dda80
# 660d00038b7c4ea59873b1e32c028db0
# bb9a6756f3d34c7e81b163ae3e4cd805
# 3d72537466274f9e994deb721e979378
# d3d970895fd4464184e78d2ed4c9c690
# 01286b43dfc54f64a0f70dac6d3a06df
msgid "Host header poisoning"
msgstr ""

#: ../../releases/1.3.4.txt:12
#: ../../releases/1.4.2.txt:12
# 0ad01d7d0a8046bca999370871da4111
# b84d82f2ad4d4912a04c1011dfcec21f
msgid "Some parts of Django -- independent of end-user-written applications -- make use of full URLs, including domain name, which are generated from the HTTP Host header. Some attacks against this are beyond Django's ability to control, and require the web server to be properly configured; Django's documentation has for some time contained notes advising users on such configuration."
msgstr ""

#: ../../releases/1.3.4.txt:18
#: ../../releases/1.4.2.txt:18
# fb42d922938946669e90f4de1f54c457
# a5ed08f53383438a9201bd645a40b517
msgid "Django's own built-in parsing of the Host header is, however, still vulnerable, as was reported to us recently. The Host header parsing in Django 1.3.3 and Django 1.4.1 -- specifically, ``django.http.HttpRequest.get_host()`` -- was incorrectly handling username/password information in the header. Thus, for example, the following Host header would be accepted by Django when running on \"validsite.com\"::"
msgstr ""

#: ../../releases/1.3.4.txt:27
#: ../../releases/1.4.2.txt:27
# a14d22546f7642fd9017e843674189a0
# 302dffc3d56c4377a9bd70ac2505c536
msgid "Using this, an attacker can cause parts of Django -- particularly the password-reset mechanism -- to generate and display arbitrary URLs to users."
msgstr ""

#: ../../releases/1.3.4.txt:30
#: ../../releases/1.4.2.txt:30
# 842b2e6392f74c1f98c15692e08e04f5
# add2a83bc2004a8ea9d24095a42f0f90
msgid "To remedy this, the parsing in ``HttpRequest.get_host()`` is being modified; Host headers which contain potentially dangerous content (such as username/password pairs) now raise the exception :exc:`django.core.exceptions.SuspiciousOperation`."
msgstr ""

#: ../../releases/1.3.4.txt:35
#: ../../releases/1.4.2.txt:35
# 8f9fcd2813394cf9afaa5673a7ebee87
# 21c510ec2c6f40c2910e334fff39dd92
msgid "Details of this issue were initially posted online as a `security advisory`_."
msgstr ""

#: ../../releases/1.3.5.txt:3
# 80e75ac451634a209aa18fe1485f4c29
msgid "Django 1.3.5 release notes"
msgstr ""

#: ../../releases/1.3.5.txt:5
#: ../../releases/1.4.3.txt:5
# 1e411658211b47629bd4a353239ca96a
# f6d59e03654f423cb623fa12be97fcca
msgid "*December 10, 2012*"
msgstr ""

#: ../../releases/1.3.5.txt:7
# 2d215eec8b634e38a252d72a49fecb0a
msgid "Django 1.3.5 addresses two security issues present in previous Django releases in the 1.3 series."
msgstr ""

#: ../../releases/1.3.5.txt:10
#: ../../releases/1.4.3.txt:10
# 44b75638a0344011a6232bbe99a91a1d
# b622b37231d84b9e8415c00ac790c4ca
msgid "Please be aware that this security release is slightly different from previous ones. Both issues addressed here have been dealt with in prior security updates to Django. In one case, we have received ongoing reports of problems, and in the other we've chosen to take further steps to tighten up Django's code in response to independent discovery of potential problems from multiple sources."
msgstr ""

#: ../../releases/1.3.5.txt:19
#: ../../releases/1.4.3.txt:19
# 329dc224ef5945988e418d7ec8ee1ab6
# 29a06422564a45478cc1fb4b0d1c0983
msgid "Several earlier Django security releases focused on the issue of poisoning the HTTP Host header, causing Django to generate URLs pointing to arbitrary, potentially-malicious domains."
msgstr ""

#: ../../releases/1.3.5.txt:23
#: ../../releases/1.4.3.txt:23
# 17cf46f94e3a48e19d87193de3b008f7
# f50d1cd8df6346419447477455f89f63
msgid "In response to further input received and reports of continuing issues following the previous release, we're taking additional steps to tighten Host header validation. Rather than attempt to accommodate all features HTTP supports here, Django's Host header validation attempts to support a smaller, but far more common, subset:"
msgstr ""

#: ../../releases/1.3.5.txt:29
#: ../../releases/1.4.3.txt:29
# da5c55c66ac747d686680282d02d3bb0
# 26d994a9ddf04bb4bd5a8ca718a6a143
msgid "Hostnames must consist of characters [A-Za-z0-9] plus hyphen ('-') or dot ('.')."
msgstr ""

#: ../../releases/1.3.5.txt:31
#: ../../releases/1.4.3.txt:31
# f196d54da782462bb758b238f8287bb4
# 30a8722727c94f328666476a687f9a10
msgid "IP addresses -- both IPv4 and IPv6 -- are permitted."
msgstr ""

#: ../../releases/1.3.5.txt:32
#: ../../releases/1.4.3.txt:32
# 8d14d86992c14d3888db5398ddc5db78
# ef3e2bb707904fbca84850ff002ae8a0
msgid "Port, if specified, is numeric."
msgstr ""

#: ../../releases/1.3.5.txt:34
#: ../../releases/1.4.3.txt:34
# 1125f2fc26dd43c0a12011e2c7318eb4
# 5e933f3a51bd4e4d81764aba684be46d
msgid "Any deviation from this will now be rejected, raising the exception :exc:`django.core.exceptions.SuspiciousOperation`."
msgstr ""

#: ../../releases/1.3.5.txt:38
#: ../../releases/1.4.3.txt:38
# 9aced229b5ff4e4f9289994b5aee6236
# c0b2e464c8a84924aa1c6d468c150dca
msgid "Redirect poisoning"
msgstr ""

#: ../../releases/1.3.5.txt:40
#: ../../releases/1.4.3.txt:40
# 3eb78ac7797f46c8a0e09b2d1dfd9505
# 0aa187a619dd4039bcfe15f8e222b046
msgid "Also following up on a previous issue: in July of this year, we made changes to Django's HTTP redirect classes, performing additional validation of the scheme of the URL to redirect to (since, both within Django's own supplied applications and many third-party applications, accepting a user-supplied redirect target is a common pattern)."
msgstr ""

#: ../../releases/1.3.5.txt:46
#: ../../releases/1.4.3.txt:46
# 72e65591db164fd0855b6c1d78717371
# 4179112faff546fdb162ae912559124d
msgid "Since then, two independent audits of the code turned up further potential problems. So, similar to the Host-header issue, we are taking steps to provide tighter validation in response to reported problems (primarily with third-party applications, but to a certain extent also within Django itself). This comes in two parts:"
msgstr ""

#: ../../releases/1.3.5.txt:52
#: ../../releases/1.4.3.txt:52
# 65a2688934ee45e591eb56689d77cb77
# f0285bb381bb474886b7a50778850a21
msgid "1. A new utility function, ``django.utils.http.is_safe_url``, is added; this function takes a URL and a hostname, and checks that the URL is either relative, or if absolute matches the supplied hostname. This function is intended for use whenever user-supplied redirect targets are accepted, to ensure that such redirects cannot lead to arbitrary third-party sites."
msgstr ""

#: ../../releases/1.3.5.txt:58
#: ../../releases/1.4.3.txt:58
# 2bc09956bde34ef590c255abc5333c9a
# d32e33d59d3448499a5d79fdcc2f33f4
msgid "2. All of Django's own built-in views -- primarily in the authentication system -- which allow user-supplied redirect targets now use ``is_safe_url`` to validate the supplied URL."
msgstr ""

#: ../../releases/1.3.6.txt:3
# 9c87b8d9604b442087a23064c08a9772
msgid "Django 1.3.6 release notes"
msgstr ""

#: ../../releases/1.3.6.txt:5
#: ../../releases/1.4.4.txt:5
# 0a845d36de424882a43af90bc4d5465f
# da0b8788cfc44490b1f793039ac4b8eb
msgid "*February 19, 2013*"
msgstr ""

#: ../../releases/1.3.6.txt:7
# 0f442cc984e34f90b98449947b085b71
msgid "Django 1.3.6 fixes four security issues present in previous Django releases in the 1.3 series."
msgstr ""

#: ../../releases/1.3.6.txt:10
# c981fa2177bb47f692ee62823e351def
msgid "This is the sixth bugfix/security release in the Django 1.3 series."
msgstr ""

#: ../../releases/1.3.6.txt:16
#: ../../releases/1.4.4.txt:17
# a33b8fb8cccb4abf99bfc08b44b84424
# 760442f9f3a74d0cb89265edb6aa8627
msgid "Some parts of Django -- independent of end-user-written applications -- make use of full URLs, including domain name, which are generated from the HTTP Host header. Django's documentation has for some time contained notes advising users on how to configure webservers to ensure that only valid Host headers can reach the Django application. However, it has been reported to us that even with the recommended webserver configurations there are still techniques available for tricking many common webservers into supplying the application with an incorrect and possibly malicious Host header."
msgstr ""

#: ../../releases/1.3.6.txt:25
# b3d4da455c194584a9b347112c64e2eb
msgid "For this reason, Django 1.3.6 adds a new setting, ``ALLOWED_HOSTS``, which should contain an explicit list of valid host/domain names for this site. A request with a Host header not matching an entry in this list will raise ``SuspiciousOperation`` if ``request.get_host()`` is called. For full details see the documentation for the :setting:`ALLOWED_HOSTS` setting."
msgstr ""

#: ../../releases/1.3.6.txt:31
# 5832f4407dff4a2b8a8070a70cec18d8
msgid "The default value for this setting in Django 1.3.6 is ``['*']`` (matching any host), for backwards-compatibility, but we strongly encourage all sites to set a more restrictive value."
msgstr ""

#: ../../releases/1.3.6.txt:35
#: ../../releases/1.4.4.txt:36
# c369f70ecd5f4b42a5d4218f76008ebe
# a5f928a4c42b4f2eac305289932a20df
msgid "This host validation is disabled when ``DEBUG`` is ``True`` or when running tests."
msgstr ""

#: ../../releases/1.3.6.txt:39
#: ../../releases/1.4.4.txt:40
# e3100e3a1e57467c9a4b71da84a1fd64
# d72c43bd0f4b47d6a24c7930ed2149b7
msgid "XML deserialization"
msgstr ""

#: ../../releases/1.3.6.txt:41
# 7161f120dfaf4418ad74d502f90b440b
msgid "The XML parser in the Python standard library is vulnerable to a number of attacks via external entities and entity expansion. Django uses this parser for deserializing XML-formatted database fixtures. The fixture deserializer is not intended for use with untrusted data, but in order to err on the side of safety in Django 1.3.6 the XML deserializer refuses to parse an XML document with a DTD (DOCTYPE definition), which closes off these attack avenues."
msgstr ""

#: ../../releases/1.3.6.txt:48
#: ../../releases/1.4.4.txt:49
# ae1c942e981e4f6f950cfe9435a122cc
# af77a6b3bb284d329b92dcc43ad02cfc
msgid "These issues in the Python standard library are CVE-2013-1664 and CVE-2013-1665. More information available `from the Python security team`_."
msgstr ""

#: ../../releases/1.3.6.txt:51
#: ../../releases/1.4.4.txt:52
# cd4a301cf33844fa9fdc0852681b6c2f
# 475fb3c6a6424bfca740b625191a594a
msgid "Django's XML serializer does not create documents with a DTD, so this should not cause any issues with the typical round-trip from ``dumpdata`` to ``loaddata``, but if you feed your own XML documents to the ``loaddata`` management command, you will need to ensure they do not contain a DTD."
msgstr ""

#: ../../releases/1.3.6.txt:60
#: ../../releases/1.4.4.txt:61
# cfaf36f7e2264e5fb6ae636a3dccfb21
# 299c8baafbbe416bba95f1063fbf92dc
msgid "Formset memory exhaustion"
msgstr ""

#: ../../releases/1.3.6.txt:62
#: ../../releases/1.4.4.txt:63
# 7d02cfd6d60f4560a38fc22636afda4f
# 38b333f65e5049d9b7e6c64ea1461474
msgid "Previous versions of Django did not validate or limit the form-count data provided by the client in a formset's management form, making it possible to exhaust a server's available memory by forcing it to create very large numbers of forms."
msgstr ""

#: ../../releases/1.3.6.txt:67
# fa89fccdd81d44ce91210736a79e9bae
msgid "In Django 1.3.6, all formsets have a strictly-enforced maximum number of forms (1000 by default, though it can be set higher via the ``max_num`` formset factory argument)."
msgstr ""

#: ../../releases/1.3.6.txt:73
#: ../../releases/1.4.4.txt:74
# cbe22db74ccf4ada9eb8e2889bad9b5a
# 98343d72011d4d57ab859f1b654bb848
msgid "Admin history view information leakage"
msgstr ""

#: ../../releases/1.3.6.txt:75
# fc36520ecefb4e06acbee53e9ba52169
msgid "In previous versions of Django, an admin user without change permission on a model could still view the unicode representation of instances via their admin history log. Django 1.3.6 now limits the admin history log view for an object to users with change permission for that model."
msgstr ""

#: ../../releases/1.3.7.txt:3
# 7cae410a125f4fd980d741145b777cd9
msgid "Django 1.3.7 release notes"
msgstr ""

#: ../../releases/1.3.7.txt:5
#: ../../releases/1.4.5.txt:5
# 47ab2ebb9d56423bb446da9103cc0ebd
# c3f17904d4b5431eaaffb4ba24e10cf6
msgid "*February 20, 2013*"
msgstr ""

#: ../../releases/1.3.7.txt:7
# 990bc4fadb2e4c9c8017158ac51142e4
msgid "Django 1.3.7 corrects a packaging problem with yesterday's :doc:`1.3.6 release </releases/1.3.6>`."
msgstr ""

#: ../../releases/1.3.7.txt:10
#: ../../releases/1.4.5.txt:10
# e3f63848e51b4c3aa86509f2e19bb331
# c9443c8627b9427a8642fe9a91e1644e
msgid "The release contained stray ``.pyc`` files that caused \"bad magic number\" errors when running with some versions of Python. This releases corrects this, and also fixes a bad documentation link in the project template ``settings.py`` file generated by ``manage.py startproject``."
msgstr ""

#: ../../releases/1.4.txt:3
# 19ce411f775248b5b46b35f34acef086
msgid "Django 1.4 release notes"
msgstr ""

#: ../../releases/1.4.txt:5
# 54ca2e84e443492a83fe12fd8664e48a
msgid "*March 23, 2012*"
msgstr ""

#: ../../releases/1.4.txt:7
# a510b09c3d56483080af7819bfc9079d
msgid "Welcome to Django 1.4!"
msgstr ""

#: ../../releases/1.4.txt:9
# fcb92641ea784afa93adc30d56841a0b
msgid "These release notes cover the `new features`_, as well as some `backwards incompatible changes`_ you'll want to be aware of when upgrading from Django 1.3 or older versions. We've also dropped some features, which are detailed in :doc:`our deprecation plan </internals/deprecation>`, and we've `begun the deprecation process for some features`_."
msgstr ""

#: ../../releases/1.4.txt:23
# 79443af4dc56425ca46399715ce39e55
msgid "The biggest new feature in Django 1.4 is `support for time zones`_ when handling date/times. When enabled, this Django will store date/times in UTC, use timezone-aware objects internally, and translate them to users' local timezones for display."
msgstr ""

#: ../../releases/1.4.txt:28
# 582baf2d509745f597eefae16716f0d9
msgid "If you're upgrading an existing project to Django 1.4, switching to the time- zone aware mode may take some care: the new mode disallows some rather sloppy behavior that used to be accepted. We encourage anyone who's upgrading to check out the :ref:`timezone migration guide <time-zones-migration-guide>` and the :ref:`timezone FAQ <time-zones-faq>` for useful pointers."
msgstr ""

#: ../../releases/1.4.txt:34
# 2709d48eeb26446b9bf08a2c54f5ec57
msgid "Other notable new features in Django 1.4 include:"
msgstr ""

#: ../../releases/1.4.txt:36
# abc58030cfe644ea9ab24da92c702717
msgid "A number of ORM improvements, including `SELECT FOR UPDATE support`_, the ability to `bulk insert <#model-objects-bulk-create-in-the-orm>`_ large datasets for improved performance, and `QuerySet.prefetch_related`_, a method to batch-load related objects in areas where :meth:`~django.db.models.query.QuerySet.select_related` doesn't work."
msgstr ""

#: ../../releases/1.4.txt:43
# dcafb3b258d8428facb4cd76567e2454
msgid "Some nice security additions, including `improved password hashing`_ (featuring PBKDF2_ and bcrypt_ support), new `tools for cryptographic signing`_, several `CSRF improvements`_, and `simple clickjacking protection`_."
msgstr ""

#: ../../releases/1.4.txt:48
# 7b94dcbdf6394c62897bcb8141547064
msgid "An `updated default project layout and manage.py`_ that removes the \"magic\" from prior versions. And for those who don't like the new layout, you can use `custom project and app templates`_ instead!"
msgstr ""

#: ../../releases/1.4.txt:52
# 33fe000b0f8148f1af2caadd36935494
msgid "`Support for in-browser testing frameworks`_ (like Selenium_)."
msgstr ""

#: ../../releases/1.4.txt:54
# e5ecf48d491c4198b8c3be29b9f1dd73
msgid "... and a whole lot more; `see below <#what-s-new-in-django-1-4>`_!"
msgstr ""

#: ../../releases/1.4.txt:56
# 7c1eab6bbbd742c580d538cde73b68dc
msgid "Wherever possible we try to introduce new features in a backwards-compatible manner per :doc:`our API stability policy </misc/api-stability>` policy. However, as with previous releases, Django 1.4 ships with some minor `backwards incompatible changes`_; people upgrading from previous versions of Django should read that list carefully."
msgstr ""

#: ../../releases/1.4.txt:65
# 5d4b82153f024d828ae122ad3c674d32
msgid "Django 1.4 has dropped support for Python 2.4. Python 2.5 is now the minimum required Python version. Django is tested and supported on Python 2.5, 2.6 and 2.7."
msgstr ""

#: ../../releases/1.4.txt:69
# 0ff4b635ffc243d8860b0394d3e7b122
msgid "This change should affect only a small number of Django users, as most operating-system vendors today are shipping Python 2.5 or newer as their default version. If you're still using Python 2.4, however, you'll need to stick to Django 1.3 until you can upgrade. Per :doc:`our support policy </internals/release-process>`, Django 1.3 will continue to receive security support until the release of Django 1.5."
msgstr ""

#: ../../releases/1.4.txt:76
# 7169c11137e14d4898376e77623c4148
msgid "Django does not support Python 3.x at this time. At some point before the release of Django 1.4, we plan to publish a document outlining our full timeline for deprecating Python 2.x and moving to Python 3.x."
msgstr ""

#: ../../releases/1.4.txt:81
#: ../../releases/1.4-alpha-1.txt:48
#: ../../releases/1.4-beta-1.txt:64
# 450dcf8630154183b3cddd18752fcbb1
# 6ebd2466a99c45168330b203417105be
# e6ef42f931b14c82b2a59024a86e99a2
msgid "What's new in Django 1.4"
msgstr ""

#: ../../releases/1.4.txt:84
#: ../../releases/1.4-alpha-1.txt:471
#: ../../releases/1.4-beta-1.txt:509
# 428235c28db046a1be999630aa4e3846
# b99ba89caa0e4ac7a65832ddb9d155ff
# d0d0eb8deba3466fa076bcbe084a97c1
msgid "Support for time zones"
msgstr ""

#: ../../releases/1.4.txt:86
# d083b775ebd1450d89d5578b72562fbe
msgid "In previous versions, Django used \"naive\" date/times (that is, date/times without an associated time zone), leaving it up to each developer to interpret what a given date/time \"really means\". This can cause all sorts of subtle timezone-related bugs."
msgstr ""

#: ../../releases/1.4.txt:91
# 5c35856f02a1424cb0c78094bb714c31
msgid "In Django 1.4, you can now switch Django into a more correct, time-zone aware mode. In this mode, Django stores date and  time information in UTC in the database, uses time-zone-aware datetime objects internally and translates them to the end user's time zone in templates and forms. Reasons for using this feature include:"
msgstr ""

#: ../../releases/1.4.txt:97
#: ../../releases/1.4-alpha-1.txt:480
#: ../../releases/1.4-beta-1.txt:518
# e97d7a076582427b90411a7b7e852f59
# 82f739b65ed04f8da75e8bf4a50366ec
# 60e12f7badee49e58b6f681f4cda1629
msgid "Customizing date and time display for users around the world."
msgstr ""

#: ../../releases/1.4.txt:99
#: ../../releases/1.4-alpha-1.txt:481
#: ../../releases/1.4-beta-1.txt:519
# b4e552794e014169baedc5300bf9d72f
# 1acc99a72e9e4fc888e116ba8043e3bf
# 895e76e745f14e8d8e6e54604e233b84
msgid "Storing datetimes in UTC for database portability and interoperability. (This argument doesn't apply to PostgreSQL, because it already stores timestamps with time zone information in Django 1.3.)"
msgstr ""

#: ../../releases/1.4.txt:103
#: ../../releases/1.4-alpha-1.txt:484
#: ../../releases/1.4-beta-1.txt:522
# 94d7494da9ea43fc809ca2b98085d18e
# e8604c36a07e48af8871c0e88fc515b1
# ee58fb3f0dab43a88106555ab798f2e5
msgid "Avoiding data corruption problems around DST transitions."
msgstr ""

#: ../../releases/1.4.txt:105
# 26f9500da402443c800bb88bd0b1fb90
msgid "Time zone support is enabled by default in new projects created with :djadmin:`startproject`. If you want to use this feature in an existing project, read the :ref:`migration guide <time-zones-migration-guide>`. If you encounter problems, there's a helpful :ref:`FAQ <time-zones-faq>`."
msgstr ""

#: ../../releases/1.4.txt:111
#: ../../releases/1.4-alpha-1.txt:51
#: ../../releases/1.4-beta-1.txt:67
# cb7be701ff3f4d799b94f5a69a678c46
# 8301dabb13794f77b0cc31294226f567
# b946111ee00b4aceab9248e1e50510d4
msgid "Support for in-browser testing frameworks"
msgstr ""

#: ../../releases/1.4.txt:113
#: ../../releases/1.4-alpha-1.txt:53
#: ../../releases/1.4-beta-1.txt:69
# 39182efcb74f4b2f8a5deddb74ab24d0
# 9b8966d74a1e416c983cf67fe7ea4190
# f054aedbd5194bda93e463708b6ba957
msgid "Django 1.4 supports integration with in-browser testing frameworks like Selenium_. The new :class:`django.test.LiveServerTestCase` base class lets you test the interactions between your site's front and back ends more comprehensively. See the :class:`documentation<django.test.LiveServerTestCase>` for more details and concrete examples."
msgstr ""

#: ../../releases/1.4.txt:123
#: ../../releases/1.4-alpha-1.txt:367
#: ../../releases/1.4-beta-1.txt:405
# 14b7cc1005174c059774cadc24dcce48
# b8829635d1e8461fbb3b999ed656e158
# 59918c563bd04f0aa61715b8111ca480
msgid "Updated default project layout and ``manage.py``"
msgstr ""

#: ../../releases/1.4.txt:125
#: ../../releases/1.4-alpha-1.txt:369
#: ../../releases/1.4-beta-1.txt:407
# 6a33388e7ffc4009abebcdf2f2dfad48
# 08d74a213708443e860a9d2c4705ca49
# a8a769be252c421bb15e215559cbab4a
msgid "Django 1.4 ships with an updated default project layout and ``manage.py`` file for the :djadmin:`startproject` management command. These fix some issues with the previous ``manage.py`` handling of Python import paths that caused double imports, trouble moving from development to deployment, and other difficult-to-debug path issues."
msgstr ""

#: ../../releases/1.4.txt:131
# a502f98dee7446528e7fa46c596d2a27
msgid "The previous ``manage.py`` called functions that are now deprecated, and thus projects upgrading to Django 1.4 should update their ``manage.py``. (The old-style ``manage.py`` will continue to work as before until Django 1.6. In 1.5 it will raise ``DeprecationWarning``)."
msgstr ""

#: ../../releases/1.4.txt:136
#: ../../releases/1.4-alpha-1.txt:380
#: ../../releases/1.4-beta-1.txt:418
# 407e475d6caf4a838dcd45581deb40a5
# 23b36ce370994681815a5cba7004d21e
# 929c1d9aaf02478595aaa6a29e572443
msgid "The new recommended ``manage.py`` file should look like this::"
msgstr ""

#: ../../releases/1.4.txt:148
#: ../../releases/1.4-alpha-1.txt:392
#: ../../releases/1.4-beta-1.txt:430
# d8e7523235074b16be37003b830e885d
# 8d835ce4d8d0466180faddb45aad2bf0
# 6c5117bf0f354ed7a4f38e61b8e1cda7
msgid "``{{ project_name }}`` should be replaced with the Python package name of the actual project."
msgstr ""

#: ../../releases/1.4.txt:151
# a69f3510863848d2a1a12cd8c0aa0177
msgid "If settings, URLconfs and apps within the project are imported or referenced using the project name prefix (e.g. ``myproject.settings``, ``ROOT_URLCONF = \"myproject.urls\"``, etc), the new ``manage.py`` will need to be moved one directory up, so it is outside the project package rather than adjacent to ``settings.py`` and ``urls.py``."
msgstr ""

#: ../../releases/1.4.txt:157
#: ../../releases/1.4-alpha-1.txt:401
#: ../../releases/1.4-beta-1.txt:439
# f72b70e5da6a47f5a2efbc590c8d31d9
# 385d2a7842954dc4addf2ee7de1be4ec
# 71c77b5285d24ec58a274ed777dc8a95
msgid "For instance, with the following layout::"
msgstr ""

#: ../../releases/1.4.txt:168
#: ../../releases/1.4-alpha-1.txt:412
#: ../../releases/1.4-beta-1.txt:450
# 73349f85385346e0953859e9e1366a1c
# fc4e5c93b61a472e8982434b27b852db
# 624b4d349f084ea9809cdb6cec19fb89
msgid "You could import ``mysite.settings``, ``mysite.urls``, and ``mysite.myapp``, but not ``settings``, ``urls``, or ``myapp`` as top-level modules."
msgstr ""

#: ../../releases/1.4.txt:171
#: ../../releases/1.4-alpha-1.txt:415
#: ../../releases/1.4-beta-1.txt:453
# 4f3a21f84cc54fe1a644c5690c2a3260
# 3fb911cbe80043a79eecec6b86b92e99
# 7bb68a75732c4142a225407e151106a8
msgid "Anything imported as a top-level module can be placed adjacent to the new ``manage.py``. For instance, to decouple \"myapp\" from the project module and import it as just ``myapp``, place it outside the ``mysite/`` directory::"
msgstr ""

#: ../../releases/1.4.txt:184
#: ../../releases/1.4-alpha-1.txt:428
#: ../../releases/1.4-beta-1.txt:466
# ee8e32ca54cd431f91b3fd17c5cff206
# 725c6c2100fc43dd89df6ccc39a85ba3
# 203b11e3db444e00a0583b98d707090f
msgid "If the same code is imported inconsistently (some places with the project prefix, some places without it), the imports will need to be cleaned up when switching to the new ``manage.py``."
msgstr ""

#: ../../releases/1.4.txt:189
#: ../../releases/1.4-alpha-1.txt:450
#: ../../releases/1.4-beta-1.txt:488
# 524612112ef6493ebce123ceaa0a58ec
# bb7504d68d174e2aa2995f42a677ac5f
# 147cf5286b6447e780f594ce61df7f51
msgid "Custom project and app templates"
msgstr ""

#: ../../releases/1.4.txt:191
# c4f9fb30e05c447f99ca45fe82779bd6
msgid "The :djadmin:`startapp` and :djadmin:`startproject` management commands now have a ``--template`` option for specifying a path or URL to a custom app or project template."
msgstr ""

#: ../../releases/1.4.txt:195
# f5e5b5d94a614a3ca2d502135c50668b
msgid "For example, Django will use the ``/path/to/my_project_template`` directory when you run the following command::"
msgstr ""

#: ../../releases/1.4.txt:200
#: ../../releases/1.4-alpha-1.txt:461
#: ../../releases/1.4-beta-1.txt:499
# cdc3a19e86714255a54d855ba76a5c1f
# 9488a3b49b944690addb082229af48d1
# abf11b0161a94192ae8cac33bbd0c43a
msgid "You can also now provide a destination directory as the second argument to both :djadmin:`startapp` and :djadmin:`startproject`::"
msgstr ""

#: ../../releases/1.4.txt:206
#: ../../releases/1.4-alpha-1.txt:467
#: ../../releases/1.4-beta-1.txt:505
# 8560e9d93acb46d88bfc440ad583e809
# 72f6be0917294209920567ce7957ab14
# f7a37d3c5bf2485c9af3b9a71aff0c61
msgid "For more information, see the :djadmin:`startapp` and :djadmin:`startproject` documentation."
msgstr ""

#: ../../releases/1.4.txt:210
#: ../../releases/1.4-alpha-1.txt:433
#: ../../releases/1.4-beta-1.txt:471
# a128651f23c9469cbca2dfde20cbcab7
# a5e4bc6b08cd498181db71fd40d29ab5
# 5e876289fde44566a890d879773a77a3
msgid "Improved WSGI support"
msgstr ""

#: ../../releases/1.4.txt:212
#: ../../releases/1.4-alpha-1.txt:435
#: ../../releases/1.4-beta-1.txt:473
# 10f191af8a32459db18fe10a92602265
# 35115700806c40d391393752c5235d7c
# 975cf3ef04e84eba8ec14d810bc0859a
msgid "The :djadmin:`startproject` management command now adds a :file:`wsgi.py` module to the initial project layout, containing a simple WSGI application that can be used for :doc:`deploying with WSGI app servers</howto/deployment/wsgi/index>`."
msgstr ""

#: ../../releases/1.4.txt:217
# e83dcffc42db4153bcd95c1f2099ab6f
msgid "The :djadmin:`built-in development server<runserver>` now supports using an externally-defined WSGI callable, which makes it possible to run runserver with the same WSGI configuration that is used for deployment. The new :setting:`WSGI_APPLICATION` setting lets you configure which WSGI callable :djadmin:`runserver` uses."
msgstr ""

#: ../../releases/1.4.txt:223
#: ../../releases/1.4-alpha-1.txt:446
#: ../../releases/1.4-beta-1.txt:484
# 376e2bd7219144148eded048dc11c5db
# 634ace536eb54634ab8505195c397127
# 756f3aeb59be4fecbe9de68948509f55
msgid "(The :djadmin:`runfcgi` management command also internally wraps the WSGI callable configured via :setting:`WSGI_APPLICATION`.)"
msgstr ""

#: ../../releases/1.4.txt:227
#: ../../releases/1.4-alpha-1.txt:63
#: ../../releases/1.4-beta-1.txt:79
# 516584a4afa14174b1265de85fa3fd0e
# 36549ac37e374866a861a36e091c2ee2
# 44ff17a60d25482f88b71e8476fa9fc5
msgid "``SELECT FOR UPDATE`` support"
msgstr ""

#: ../../releases/1.4.txt:229
# e323914977934d19a5fcce9dcd89fe4f
msgid "Django 1.4 includes a :meth:`QuerySet.select_for_update() <django.db.models.query.QuerySet.select_for_update>` method, which generates a ``SELECT ... FOR UPDATE`` SQL query. This will lock rows until the end of the transaction, meaning other transactions cannot modify or delete rows matched by a ``FOR UPDATE`` query."
msgstr ""

#: ../../releases/1.4.txt:235
#: ../../releases/1.4-alpha-1.txt:71
#: ../../releases/1.4-beta-1.txt:87
# deb4787aabf544b599f53d61d146b887
# cf85ab1959c54499b168b9aa2f4c48fa
# f51cd2a46e5c49d99c6796c8925a0892
msgid "For more details, see the documentation for :meth:`~django.db.models.query.QuerySet.select_for_update`."
msgstr ""

#: ../../releases/1.4.txt:239
#: ../../releases/1.4-alpha-1.txt:75
#: ../../releases/1.4-beta-1.txt:91
# 52dcaf0f48bf480a8f264f3dbc81a2cf
# c32c12fd5e65409685643d94eb04e541
# 44ecd607763e49ca9b828f58d75e282f
msgid "``Model.objects.bulk_create`` in the ORM"
msgstr ""

#: ../../releases/1.4.txt:241
# 699106de12d0443eb6acfd52632dc25f
msgid "This method lets you create multiple objects more efficiently. It can result in significant performance increases if you have many objects."
msgstr ""

#: ../../releases/1.4.txt:244
# 689196e1bd594842937582fda2ce35af
msgid "Django makes use of this internally, meaning some operations (such as database setup for test suites) have seen a performance benefit as a result."
msgstr ""

#: ../../releases/1.4.txt:247
#: ../../releases/1.4-alpha-1.txt:82
#: ../../releases/1.4-beta-1.txt:98
# e06b19fb8b9b45c79c811303c91ea925
# 293e2e3024d74c7faa4d0c982d50ffa2
# ede725d77ad14dffac10f676b22e480c
msgid "See the :meth:`~django.db.models.query.QuerySet.bulk_create` docs for more information."
msgstr ""

#: ../../releases/1.4.txt:251
#: ../../releases/1.4-alpha-1.txt:86
#: ../../releases/1.4-beta-1.txt:102
# 37fca09438d044969782c95b891f3bc0
# d59fd3b3f2ba4fd79612b22e12a97e77
# b72b6f74c83d419d8629cfa111106ac2
msgid "``QuerySet.prefetch_related``"
msgstr ""

#: ../../releases/1.4.txt:253
# 7a22767e89ee4498850d23084ca303b1
msgid "Similar to :meth:`~django.db.models.query.QuerySet.select_related` but with a different strategy and broader scope, :meth:`~django.db.models.query.QuerySet.prefetch_related` has been added to :class:`~django.db.models.query.QuerySet`. This method returns a new ``QuerySet`` that will prefetch each of the specified related lookups in a single batch as soon as the query begins to be evaluated. Unlike ``select_related``, it does the joins in Python, not in the database, and supports many-to-many relationships, :class:`~django.contrib.contenttypes.generic.GenericForeignKey` and more. This allows you to fix a very common performance problem in which your code ends up doing O(n) database queries (or worse) if objects on your primary ``QuerySet`` each have many related objects that you also need to fetch."
msgstr ""

#: ../../releases/1.4.txt:267
#: ../../releases/1.4-alpha-1.txt:102
#: ../../releases/1.4-beta-1.txt:118
# c987d52a5918402b8d186607651798fc
# 7c0590b4db7841fbb4e4e0bc0858aa32
# 28d738b8665b455694b68c6793417c79
msgid "Improved password hashing"
msgstr ""

#: ../../releases/1.4.txt:269
#: ../../releases/1.4-alpha-1.txt:104
#: ../../releases/1.4-beta-1.txt:120
# d80f515220044ec983ab9d9cf903c27c
# 749ebfc063e94a41b926e1d1cb57444f
# 106dc0dd9f214b29af1fc46714e41812
msgid "Django's auth system (``django.contrib.auth``) stores passwords using a one-way algorithm. Django 1.3 uses the SHA1_ algorithm, but increasing processor speeds and theoretical attacks have revealed that SHA1 isn't as secure as we'd like. Thus, Django 1.4 introduces a new password storage system: by default Django now uses the PBKDF2_ algorithm (as recommended by NIST_). You can also easily choose a different algorithm (including the popular bcrypt_ algorithm). For more details, see :ref:`auth_password_storage`."
msgstr ""

#: ../../releases/1.4.txt:283
# e1aad2d6604846a0bf2bbc8e608c3dfd
msgid "HTML5 doctype"
msgstr ""

#: ../../releases/1.4.txt:285
#: ../../releases/1.4-alpha-1.txt:121
#: ../../releases/1.4-beta-1.txt:152
# 6a0847b311a4454c882ac39040bf5f4e
# b91f8bffabb44ef7b1691c9b2fdaf55d
# 907f443efce0450f8994e0ba2fa340aa
msgid "We've switched the admin and other bundled templates to use the HTML5 doctype. While Django will be careful to maintain compatibility with older browsers, this change means that you can use any HTML5 features you need in admin pages without having to lose HTML validity or override the provided templates to change the doctype."
msgstr ""

#: ../../releases/1.4.txt:292
#: ../../releases/1.4-alpha-1.txt:128
#: ../../releases/1.4-beta-1.txt:159
# 4d32daac120c4175a2e0c9407512536d
# 0918db10f5a04c82adde1ce0bb3e906c
# f48e14c2850141c4b8cc2bb25cb620d6
msgid "List filters in admin interface"
msgstr ""

#: ../../releases/1.4.txt:294
# badf9aba6bb0415b84fd61eb07e775e5
msgid "Prior to Django 1.4, the :mod:`~django.contrib.admin` app let you specify change list filters by specifying a field lookup, but it didn't allow you to create custom filters. This has been rectified with a simple API (previously used internally and known as \"FilterSpec\"). For more details, see the documentation for :attr:`~django.contrib.admin.ModelAdmin.list_filter`."
msgstr ""

#: ../../releases/1.4.txt:301
#: ../../releases/1.4-alpha-1.txt:137
#: ../../releases/1.4-beta-1.txt:168
# 629c79f602924146b50468f304986208
# 26cfc63210e942c0aeeb14a8702735df
# 2c9638ff311a47b980dc0e1f2423c23f
msgid "Multiple sort in admin interface"
msgstr ""

#: ../../releases/1.4.txt:303
# dbaaab3eb89d4011bc9d0fd47c6a874d
msgid "The admin change list now supports sorting on multiple columns. It respects all elements of the :attr:`~django.contrib.admin.ModelAdmin.ordering` attribute, and sorting on multiple columns by clicking on headers is designed to mimic the behavior of desktop GUIs. We also added a :meth:`~django.contrib.admin.ModelAdmin.get_ordering` method for specifying the ordering dynamically (i.e., depending on the request)."
msgstr ""

#: ../../releases/1.4.txt:311
#: ../../releases/1.4-alpha-1.txt:147
#: ../../releases/1.4-beta-1.txt:178
# 4b26d844120448dabe1e096e2a216f14
# e1a71f70ab794c9587445386517006ae
# 5c7cafb831b042c19140837fa6438caa
msgid "New ``ModelAdmin`` methods"
msgstr ""

#: ../../releases/1.4.txt:313
# 722736c05dc648529138fe272e5e17e4
msgid "We added a :meth:`~django.contrib.admin.ModelAdmin.save_related` method to :mod:`~django.contrib.admin.ModelAdmin` to ease customization of how related objects are saved in the admin."
msgstr ""

#: ../../releases/1.4.txt:317
# bfb598d1a32c416e9c5681dc6ef327f2
msgid "Two other new :class:`~django.contrib.admin.ModelAdmin` methods, :meth:`~django.contrib.admin.ModelAdmin.get_list_display` and :meth:`~django.contrib.admin.ModelAdmin.get_list_display_links` enable dynamic customization of fields and links displayed on the admin change list."
msgstr ""

#: ../../releases/1.4.txt:324
#: ../../releases/1.4-alpha-1.txt:160
#: ../../releases/1.4-beta-1.txt:191
# 659e0d6b93d246b7830a97e02956d707
# fa4306d8aeb246d09fb4ccf1c7597edc
# ac6745930f414314864922a66449ba44
msgid "Admin inlines respect user permissions"
msgstr ""

#: ../../releases/1.4.txt:326
# 948abb977c504e89ad3f26c86b910ebd
msgid "Admin inlines now only allow those actions for which the user has permission. For ``ManyToMany`` relationships with an auto-created intermediate model (which does not have its own permissions), the change permission for the related model determines if the user has the permission to add, change or delete relationships."
msgstr ""

#: ../../releases/1.4.txt:333
#: ../../releases/1.4-alpha-1.txt:169
#: ../../releases/1.4-beta-1.txt:200
# d15e5cbf5f5c4115af47354f5e589508
# 0b8117637dab4d63b370ee96095e0e0d
# 03d686ae476f4255b393d60adfd0703f
msgid "Tools for cryptographic signing"
msgstr ""

#: ../../releases/1.4.txt:335
#: ../../releases/1.4-alpha-1.txt:171
#: ../../releases/1.4-beta-1.txt:202
# f04fd2bb8b614ce0bacfea19becc53b3
# cd22b8c824d54722b02bd463e5d21d4c
# 3f6fce61cf81410ba483dab18c7519dc
msgid "Django 1.4 adds both a low-level API for signing values and a high-level API for setting and reading signed cookies, one of the most common uses of signing in Web applications."
msgstr ""

#: ../../releases/1.4.txt:339
#: ../../releases/1.4-alpha-1.txt:175
#: ../../releases/1.4-beta-1.txt:206
# fbb705c1edc34e7d8246867ddcba6b3b
# 1d5a1b92080d4783b391327cf1c221a8
# 6a5297724a3043118d673b6f5500cdc1
msgid "See the :doc:`cryptographic signing </topics/signing>` docs for more information."
msgstr ""

#: ../../releases/1.4.txt:343
#: ../../releases/1.4-alpha-1.txt:179
#: ../../releases/1.4-beta-1.txt:210
# 4d4dd6b210e2499e83da398cc5b54a11
# 82961f5ad26048e388c17abfd52b40f6
# b6b37cca50fe4800b97d8024b1c54c8a
msgid "Cookie-based session backend"
msgstr ""

#: ../../releases/1.4.txt:345
# 16f901f2210f4beab37df61119ddb3a5
msgid "Django 1.4 introduces a cookie-based session backend that uses the tools for :doc:`cryptographic signing </topics/signing>` to store the session data in the client's browser."
msgstr ""

#: ../../releases/1.4.txt:351
# e2ae896c29564be6b7569a644eb67678
msgid "Session data is signed and validated by the server, but it's not encrypted. This means a user can view any data stored in the session but cannot change it. Please read the documentation for further clarification before using this backend."
msgstr ""

#: ../../releases/1.4.txt:356
#: ../../releases/1.4-alpha-1.txt:185
#: ../../releases/1.4-beta-1.txt:223
# 723e5c8240e84496922fa2cbe8457c79
# 64409ee38f2a47d3828e1c6463f30337
# 8c5562017c014c95bf4a8632f89752fd
msgid "See the :ref:`cookie-based session backend <cookie-session-backend>` docs for more information."
msgstr ""

#: ../../releases/1.4.txt:360
#: ../../releases/1.4-alpha-1.txt:189
#: ../../releases/1.4-beta-1.txt:227
# e95e8b064eaa4c4bae53b1b4100d6f33
# 9b05299622794bf485f5fa782f7cddbc
# 07587c0f9a734a4fa34a54b1442586aa
msgid "New form wizard"
msgstr ""

#: ../../releases/1.4.txt:362
# 8751f7c6f95d45e4963655b2046e0f47
msgid "The previous ``FormWizard`` from :mod:`django.contrib.formtools` has been replaced with a new implementation based on the class-based views introduced in Django 1.3. It features a pluggable storage API and doesn't require the wizard to pass around hidden fields for every previous step."
msgstr ""

#: ../../releases/1.4.txt:367
#: ../../releases/1.4-alpha-1.txt:196
#: ../../releases/1.4-beta-1.txt:234
# 274aa91585344313ba6fe61a65eb9dad
# 6dcba2c9173340d39e98aa2721c082a7
# ebf5830a5846406594aee19b8c6448da
msgid "Django 1.4 ships with a session-based storage backend and a cookie-based storage backend. The latter uses the tools for :doc:`cryptographic signing </topics/signing>` also introduced in Django 1.4 to store the wizard's state in the user's cookies."
msgstr ""

#: ../../releases/1.4.txt:372
#: ../../releases/1.4-alpha-1.txt:201
#: ../../releases/1.4-beta-1.txt:239
# 31189fb16d804e64988572a62184fae3
# 7e92ca9b3c7846e89244241bfd5359c5
# 715e70cc260f471dae7444cfa09318d7
msgid "See the :doc:`form wizard </ref/contrib/formtools/form-wizard>` docs for more information."
msgstr ""

#: ../../releases/1.4.txt:376
#: ../../releases/1.4-alpha-1.txt:205
#: ../../releases/1.4-beta-1.txt:243
# 163ddec455c142f290ea8acdd7b76b72
# 7846ce2bd1314cd4b5bd8f447cc94fb6
# 134d8f1ce6834122a21c35620a55bbf1
msgid "``reverse_lazy``"
msgstr ""

#: ../../releases/1.4.txt:378
# 57bb63a8f24c49d1a74fe231c5c7df5c
msgid "A lazily evaluated version of :func:`django.core.urlresolvers.reverse` was added to allow using URL reversals before the project's URLconf gets loaded."
msgstr ""

#: ../../releases/1.4.txt:382
#: ../../releases/1.4-alpha-1.txt:211
#: ../../releases/1.4-beta-1.txt:249
# a6c5491dbaec45198d79e34b4c463594
# 3f6a59a35981446d9bd3a006bea4d953
# 8569cb6b7a854b97b2adfd6bf1433163
msgid "Translating URL patterns"
msgstr ""

#: ../../releases/1.4.txt:384
# 4d3beed07b384abca364c0f0b404acb6
msgid "Django can now look for a language prefix in the URLpattern when using the new :func:`~django.conf.urls.i18n.i18n_patterns` helper function. It's also now possible to define translatable URL patterns using :func:`~django.utils.translation.ugettext_lazy`. See :ref:`url-internationalization` for more information about the language prefix and how to internationalize URL patterns."
msgstr ""

#: ../../releases/1.4.txt:392
#: ../../releases/1.4-alpha-1.txt:221
#: ../../releases/1.4-beta-1.txt:259
# 9044988ee3e24114ab0ac30ed0d90a60
# e7adb448cf3747c29fcda601f68c4ff9
# bb256c6cf3284e4eb166631f9a089f04
msgid "Contextual translation support for ``{% trans %}`` and ``{% blocktrans %}``"
msgstr ""

#: ../../releases/1.4.txt:394
#: ../../releases/1.4-alpha-1.txt:223
#: ../../releases/1.4-beta-1.txt:261
# babf766923f741a887287ecb5d8f94fa
# c0c07f8efa724ff89c15525d06d38471
# 90e87efe29cd41d48c01a89fedf6f980
msgid "The :ref:`contextual translation<contextual-markers>` support introduced in Django 1.3 via the ``pgettext`` function has been extended to the :ttag:`trans` and :ttag:`blocktrans` template tags using the new ``context`` keyword."
msgstr ""

#: ../../releases/1.4.txt:400
#: ../../releases/1.4-alpha-1.txt:229
#: ../../releases/1.4-beta-1.txt:267
# c54594b2f8a048efac6cddaf194f0193
# ca54cb44ef064284b704c05b33f5ecec
# 78f8fff36b5943d7b6a0d3eb0cf4e3d3
msgid "Customizable ``SingleObjectMixin`` URLConf kwargs"
msgstr ""

#: ../../releases/1.4.txt:402
# 2ef882f74b244017802f2a031ef81f71
msgid "Two new attributes, :attr:`pk_url_kwarg<django.views.generic.detail.SingleObjectMixin.pk_url_kwarg>` and :attr:`slug_url_kwarg<django.views.generic.detail.SingleObjectMixin.slug_url_kwarg>`, have been added to :class:`~django.views.generic.detail.SingleObjectMixin` to enable the customization of URLconf keyword arguments used for single object generic views."
msgstr ""

#: ../../releases/1.4.txt:411
#: ../../releases/1.4-alpha-1.txt:240
#: ../../releases/1.4-beta-1.txt:278
# 3076ad90853a4ec48431cc50c07fad5e
# 553258835a884245b12844fc95ca3af9
# b12d3421b0104a93ba3e0bd3c49a2beb
msgid "Assignment template tags"
msgstr ""

#: ../../releases/1.4.txt:413
#: ../../releases/1.4-alpha-1.txt:242
#: ../../releases/1.4-beta-1.txt:280
# 2858c4124e0e4800992346f282852ad5
# becb89181383430f87b00f0e91dbbabf
# 7834ba5f3bc54d7494b17372ba73fe24
msgid "A new :ref:`assignment_tag<howto-custom-template-tags-assignment-tags>` helper function was added to ``template.Library`` to ease the creation of template tags that store data in a specified context variable."
msgstr ""

#: ../../releases/1.4.txt:418
#: ../../releases/1.4-alpha-1.txt:247
#: ../../releases/1.4-beta-1.txt:285
# ce0b268030ac4213bcfc59da9d00d835
# c239dcbe35534ea98cc3553bd701320e
# bf9bb186128d4edba563543eeb3ab241
msgid "``*args`` and ``**kwargs`` support for template tag helper functions"
msgstr ""

#: ../../releases/1.4.txt:420
#: ../../releases/1.4-alpha-1.txt:249
#: ../../releases/1.4-beta-1.txt:287
# 2c5f2a66601c42f9b2840d1cde3742bf
# 19d09c9f2f2c4221a3321e21e612af36
# 8a5183cc422648a98ee8d54131270f15
msgid "The :ref:`simple_tag<howto-custom-template-tags-simple-tags>`, :ref:`inclusion_tag <howto-custom-template-tags-inclusion-tags>` and newly introduced :ref:`assignment_tag<howto-custom-template-tags-assignment-tags>` template helper functions may now accept any number of positional or keyword arguments. For example:"
msgstr ""

#: ../../releases/1.4.txt:436
# 95844cb08a024a5882fc3d076aa4f5cb
msgid "Then, in the template, any number of arguments may be passed to the template tag. For example:"
msgstr ""

#: ../../releases/1.4.txt:444
#: ../../releases/1.4-alpha-1.txt:273
#: ../../releases/1.4-beta-1.txt:311
# 6b6bacacdbb74c5c921c2ccba2128fb3
# f168f919f5334a8d812ffe5db3ea1f28
# 993d9a2a816941b5bbdc3574dca9d563
msgid "No wrapping of exceptions in ``TEMPLATE_DEBUG`` mode"
msgstr ""

#: ../../releases/1.4.txt:446
#: ../../releases/1.4-alpha-1.txt:275
#: ../../releases/1.4-beta-1.txt:313
# 3ec4826b12bf4e2aad19323ab9523491
# 73f8a3f87d704867bbd049f31633f3ff
# c1db2cb71ad64391b16d275a7d5a79da
msgid "In previous versions of Django, whenever the :setting:`TEMPLATE_DEBUG` setting was ``True``, any exception raised during template rendering (even exceptions unrelated to template syntax) were wrapped in ``TemplateSyntaxError`` and re-raised. This was done in order to provide detailed template source location information in the debug 500 page."
msgstr ""

#: ../../releases/1.4.txt:452
#: ../../releases/1.4-alpha-1.txt:281
#: ../../releases/1.4-beta-1.txt:319
# 696ecd74ac8e4593ad3991c342a4b7ae
# e97f15a4874d403fa57eda22bd7b4bad
# c6134437e86340278d9a03a649cf6981
msgid "In Django 1.4, exceptions are no longer wrapped. Instead, the original exception is annotated with the source information. This means that catching exceptions from template rendering is now consistent regardless of the value of :setting:`TEMPLATE_DEBUG`, and there's no need to catch and unwrap ``TemplateSyntaxError`` in order to catch other errors."
msgstr ""

#: ../../releases/1.4.txt:459
#: ../../releases/1.4-alpha-1.txt:288
#: ../../releases/1.4-beta-1.txt:326
# f58634279bc8420e913a9273019e6973
# 94ad1b5d3206474f909dae499222a98d
# 859f8123c53f465f890cc1ef07811bd6
msgid "``truncatechars`` template filter"
msgstr ""

#: ../../releases/1.4.txt:461
# b85c39f36cb2405da3aa5951ea7df6f1
msgid "This new filter truncates a string to be no longer than the specified number of characters. Truncated strings end with a translatable ellipsis sequence (\"...\"). See the documentation for :tfilter:`truncatechars` for more details."
msgstr ""

#: ../../releases/1.4.txt:467
#: ../../releases/1.4-alpha-1.txt:296
#: ../../releases/1.4-beta-1.txt:334
# e2fa01c8a2a844699e7ddd6902d0ee45
# 1e5bac9409fb49c8ac676b2bdc70d92a
# e3c5561e7a3f478eafaa2f94b446305c
msgid "``static`` template tag"
msgstr ""

#: ../../releases/1.4.txt:469
#: ../../releases/1.4-alpha-1.txt:298
#: ../../releases/1.4-beta-1.txt:336
# 14d47631c96143ee85f0b88860be33bd
# 92ad108213e74a048628d14999b719d2
# 497eb58343c44c78b0b36a1d7b1ab72c
msgid "The :mod:`staticfiles<django.contrib.staticfiles>` contrib app has a new :ttag:`static<staticfiles-static>` template tag to refer to files saved with the :setting:`STATICFILES_STORAGE` storage backend. It uses the storage backend's ``url`` method and therefore supports advanced features such as :ref:`serving files from a cloud service<staticfiles-from-cdn>`."
msgstr ""

#: ../../releases/1.4.txt:476
#: ../../releases/1.4-alpha-1.txt:305
#: ../../releases/1.4-beta-1.txt:343
# de7b1203426b493784e610a4131a2044
# b4c5240d5aa048db9e11b5f27c35cc9d
# d045acde3fac4f388427a3b2460e02af
msgid "``CachedStaticFilesStorage`` storage backend"
msgstr ""

#: ../../releases/1.4.txt:478
# 3eb5e11d48684772b9ecf296a7d55083
msgid "The :mod:`staticfiles<django.contrib.staticfiles>` contrib app now has a :class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` backend that caches the files it saves (when running the :djadmin:`collectstatic` management command) by appending the MD5 hash of the file's content to the filename. For example, the file ``css/styles.css`` would also be saved as ``css/styles.55e7cbb9ba48.css``"
msgstr ""

#: ../../releases/1.4.txt:485
#: ../../releases/1.4-alpha-1.txt:315
#: ../../releases/1.4-beta-1.txt:353
# fddf412d89a24c4f8d04fbcfbf62c801
# a22a742d011d4c10a8bd2653cf8dbfcf
# 539010c4b00a4d3a97c978c540986fc7
msgid "See the :class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` docs for more information."
msgstr ""

#: ../../releases/1.4.txt:489
#: ../../releases/1.4-alpha-1.txt:319
#: ../../releases/1.4-beta-1.txt:357
# da035a73ca864214ab182fbbcdf66800
# 213d033a641943f2b43acbfb055ca98c
# ad7aa6d9b323426393dcfefef2a2ab92
msgid "Simple clickjacking protection"
msgstr ""

#: ../../releases/1.4.txt:491
#: ../../releases/1.4-alpha-1.txt:321
#: ../../releases/1.4-beta-1.txt:359
# e0353e833cfd47369abc876cbcb7705c
# e80f15e4812146dfb313f08db7b2eb5b
# 2da173cb0a4e497b9cdf7105ecf7d7db
msgid "We've added a middleware to provide easy protection against `clickjacking <http://en.wikipedia.org/wiki/Clickjacking>`_ using the ``X-Frame-Options`` header. It's not enabled by default for backwards compatibility reasons, but you'll almost certainly want to :doc:`enable it </ref/clickjacking/>` to help plug that security hole for browsers that support the header."
msgstr ""

#: ../../releases/1.4.txt:498
#: ../../releases/1.4-alpha-1.txt:328
#: ../../releases/1.4-beta-1.txt:366
# f3fde9ea87814fa1b33723260fc45fcd
# da16ff70a92f40468d6ffeec8933819e
# cd96ad8292424306b663c776521c489e
msgid "CSRF improvements"
msgstr ""

#: ../../releases/1.4.txt:500
# b176ebed11d4431c803cedb9f3b76b6c
msgid "We've made various improvements to our CSRF features, including the :func:`~django.views.decorators.csrf.ensure_csrf_cookie` decorator, which can help with AJAX-heavy sites; protection for PUT and DELETE requests; and the :setting:`CSRF_COOKIE_SECURE` and :setting:`CSRF_COOKIE_PATH` settings, which can improve the security and usefulness of CSRF protection. See the :doc:`CSRF docs </ref/contrib/csrf>` for more information."
msgstr ""

#: ../../releases/1.4.txt:508
#: ../../releases/1.4-alpha-1.txt:338
#: ../../releases/1.4-beta-1.txt:376
# 92cf49ae169c46848c2daa1f6c9fcb84
# 7725c9b3a4c645d285ebf00705f97fd9
# 6cdd14d7e31c499d95c79a9329645c03
msgid "Error report filtering"
msgstr ""

#: ../../releases/1.4.txt:510
#: ../../releases/1.4-alpha-1.txt:340
#: ../../releases/1.4-beta-1.txt:378
# c08f1174c9eb467c89e83007cc49f2ed
# 794117e43ef241d7b60c3c14eb3c19b7
# 23fc64ee9f8949eabb53520ea55292e0
msgid "We added two function decorators, :func:`~django.views.decorators.debug.sensitive_variables` and :func:`~django.views.decorators.debug.sensitive_post_parameters`, to allow designating the local variables and POST parameters that may contain sensitive information and should be filtered out of error reports."
msgstr ""

#: ../../releases/1.4.txt:516
# 27100db6201e4969989175b3516d6e2d
msgid "All POST parameters are now systematically filtered out of error reports for certain views (``login``, ``password_reset_confirm``, ``password_change`` and ``add_view`` in :mod:`django.contrib.auth.views`, as well as ``user_change_password`` in the admin app) to prevent the leaking of sensitive information such as user passwords."
msgstr ""

#: ../../releases/1.4.txt:522
# ac18c1d867114d2499ced6e7d92c4e7f
msgid "You can override or customize the default filtering by writing a :ref:`custom filter<custom-error-reports>`. For more information see the docs on :ref:`Filtering error reports<filtering-error-reports>`."
msgstr ""

#: ../../releases/1.4.txt:527
#: ../../releases/1.4-alpha-1.txt:357
#: ../../releases/1.4-beta-1.txt:395
# 3df3ba0ca55f406c85516f1a684604fa
# cad2698a33a640fe989d427d988e661c
# d64f6e31c9c34ff5983b10f23b087f17
msgid "Extended IPv6 support"
msgstr ""

#: ../../releases/1.4.txt:529
# 6787de379b9d46e68b27ad125b01ac5b
msgid "Django 1.4 can now better handle IPv6 addresses with the new :class:`~django.db.models.GenericIPAddressField` model field, :class:`~django.forms.GenericIPAddressField` form field and the validators :data:`~django.core.validators.validate_ipv46_address` and :data:`~django.core.validators.validate_ipv6_address`."
msgstr ""

#: ../../releases/1.4.txt:536
# 21f973f73ef74dfc9105f88248f3b578
msgid "HTML comparisons in tests"
msgstr ""

#: ../../releases/1.4.txt:538
# 6fe15f83749f4a259ebd8a8135d9eb8f
msgid "The base classes in :mod:`django.test` now have some helpers to compare HTML without tripping over irrelevant differences in whitespace, argument quoting/ordering and closing of self-closing tags. You can either compare HTML directly with the new :meth:`~django.test.SimpleTestCase.assertHTMLEqual` and :meth:`~django.test.SimpleTestCase.assertHTMLNotEqual` assertions, or use the ``html=True`` flag with :meth:`~django.test.SimpleTestCase.assertContains` and :meth:`~django.test.SimpleTestCase.assertNotContains` to test whether the client's response contains a given HTML fragment. See the :ref:`assertions documentation <assertions>` for more."
msgstr ""

#: ../../releases/1.4.txt:551
#: ../../releases/1.4-beta-1.txt:529
# e365936b59e84a27a021691791b8b722
# e84d227df73047f782750840abcc55b6
msgid "Two new date format strings"
msgstr ""

#: ../../releases/1.4.txt:553
#: ../../releases/1.4-beta-1.txt:531
# a01e134d7b2e45e8ba36b1b7fee2d017
# f27375a368784085928cb305d2811cea
msgid "Two new :tfilter:`date` formats were added for use in template filters, template tags and :ref:`format-localization`:"
msgstr ""

#: ../../releases/1.4.txt:556
#: ../../releases/1.4-beta-1.txt:534
# fb74e8d603ec49b3afffad0deb4f79eb
# 6d41803ade2149558917055646a2b306
msgid "``e`` -- the name of the timezone of the given datetime object"
msgstr ""

#: ../../releases/1.4.txt:557
#: ../../releases/1.4-beta-1.txt:535
# ba48bdf2457445649a142b5e6c54acb6
# 75b9279f7beb4b9b9d4d8d9cf7c66939
msgid "``o`` -- the ISO 8601 year number"
msgstr ""

#: ../../releases/1.4.txt:559
#: ../../releases/1.4-beta-1.txt:537
# 8991e6972c8742368cd57ccd9ef3f568
# 4586ecc8236648e0ba1c58e68906e42f
msgid "Please make sure to update your :ref:`custom format files <custom-format-files>` if they contain either ``e`` or ``o`` in a format string. For example a Spanish localization format previously only escaped the ``d`` format character::"
msgstr ""

#: ../../releases/1.4.txt:566
#: ../../releases/1.4-beta-1.txt:544
# 67ed581f5872482085b5d6552fad1585
# 03caaa0f55534a8ba866a852a8425207
msgid "But now it needs to also escape ``e`` and ``o``::"
msgstr ""

#: ../../releases/1.4.txt:570
#: ../../releases/1.4-beta-1.txt:548
# e828782f86d3480f82452247f0c54bd4
# a49ebbbc6a2842879297e743e1ff227e
msgid "For more information, see the :tfilter:`date` documentation."
msgstr ""

#: ../../releases/1.4.txt:573
#: ../../releases/1.4-alpha-1.txt:491
#: ../../releases/1.4-beta-1.txt:551
#: ../../releases/1.5.txt:244
#: ../../releases/1.5-alpha-1.txt:238
#: ../../releases/1.5-beta-1.txt:236
#: ../../releases/1.6.txt:158
# 019a8c2e06f3461fb1ebe956e4d3b883
# 9cbef2833cf14d7db1ae326e9909f0e8
# 4c27093d07d547ddbfdf5064825944e7
# 271ea6f0f89c4efea4924748fe183012
# 82306444d46541df9072efdc060057df
# aeebca4681c84f4a909c09f7fefb1b8c
# 433c33f2a7e7436f92d0a4813b6edc0b
msgid "Minor features"
msgstr ""

#: ../../releases/1.4.txt:575
#: ../../releases/1.4-alpha-1.txt:493
#: ../../releases/1.4-beta-1.txt:553
# 82640b6d414c49ee8f973fbb594cb30e
# c08e2db9d4894411b5764fb9b537c7dc
# 97c8e7e43ff04a99966e1947e7bfb0d4
msgid "Django 1.4 also includes several smaller improvements worth noting:"
msgstr ""

#: ../../releases/1.4.txt:577
# 0e4b2f8ac17048ad98c689e0278aa371
msgid "A more usable stacktrace in the technical 500 page. Frames in the stack trace that reference Django's framework code are dimmed out, while frames in application code are slightly emphasized. This change makes it easier to scan a stacktrace for issues in application code."
msgstr ""

#: ../../releases/1.4.txt:582
#: ../../releases/1.4-alpha-1.txt:500
#: ../../releases/1.4-beta-1.txt:560
# 42f0445201eb4a10898f7c72650142ec
# 0006c2f9aac04c16a549b8100cb78db3
# 1265ca9dfe464fb98d485d5b4727c790
msgid ":doc:`Tablespace support </topics/db/tablespaces>` in PostgreSQL."
msgstr ""

#: ../../releases/1.4.txt:584
#: ../../releases/1.4-alpha-1.txt:502
#: ../../releases/1.4-beta-1.txt:562
# 2fecb9370c394f0498d589af722acf33
# 8cd2734458f04bd7bd775cfb0f7af759
# cedaf9075e214edfb63478af78a3d97f
msgid "Customizable names for :meth:`~django.template.Library.simple_tag`."
msgstr ""

#: ../../releases/1.4.txt:586
#: ../../releases/1.4-alpha-1.txt:504
#: ../../releases/1.4-beta-1.txt:564
# 2f17ff07396e426799ecec783e0a8d91
# abd50c7f45f94c49a7438a906d55b63f
# a7f1d2fba6ec4795b85cc5c3345cd9a9
msgid "In the documentation, a helpful :doc:`security overview </topics/security>` page."
msgstr ""

#: ../../releases/1.4.txt:589
# 543306f58edd46ae9eb76a3b2d77a14a
msgid "The ``django.contrib.auth.models.check_password`` function has been moved to the :mod:`django.contrib.auth.hashers` module. Importing it from the old location will still work, but you should update your imports."
msgstr ""

#: ../../releases/1.4.txt:593
# d3a343d3297d47039b8ecd9471cb8747
msgid "The :djadmin:`collectstatic` management command now has a ``--clear`` option to delete all files at the destination before copying or linking the static files."
msgstr ""

#: ../../releases/1.4.txt:597
# e15b3f772bf64eb6816694716ff62d57
msgid "It's now possible to load fixtures containing forward references when using MySQL with the InnoDB database engine."
msgstr ""

#: ../../releases/1.4.txt:600
#: ../../releases/1.4-alpha-1.txt:518
#: ../../releases/1.4-beta-1.txt:578
# b20614e30dc347459b3f68ab8267a03b
# e6c302f181ff4109ae3a8735c9aeae77
# d3b2d0452495460483eab5376d55e509
msgid "A new 403 response handler has been added as ``'django.views.defaults.permission_denied'``. You can set your own handler by setting the value of :data:`django.conf.urls.handler403`. See the documentation about :ref:`the 403 (HTTP Forbidden) view<http_forbidden_view>` for more information."
msgstr ""

#: ../../releases/1.4.txt:606
# 02a769dae9e7456283458f19bba86437
msgid "The :djadmin:`makemessages` command uses a new and more accurate lexer, `JsLex`_, for extracting translatable strings from JavaScript files."
msgstr ""

#: ../../releases/1.4.txt:611
#: ../../releases/1.4-alpha-1.txt:524
#: ../../releases/1.4-beta-1.txt:584
# dc5be9fb8fc5414fb3744bf570250037
# 9519a4a238094b84a2da293a10d79c5d
# bccf9198176643598d9b0bd1557e0d31
msgid "The :ttag:`trans` template tag now takes an optional ``as`` argument to be able to retrieve a translation string without displaying it but setting a template context variable instead."
msgstr ""

#: ../../releases/1.4.txt:615
#: ../../releases/1.4-alpha-1.txt:528
#: ../../releases/1.4-beta-1.txt:588
# db262959911c480bb2cee1f08cf3db46
# a9cce2a20a3545c48f70ccd3b8e18014
# 086375e015744a4dbe991c67a880f320
msgid "The :ttag:`if` template tag now supports ``{% elif %}`` clauses."
msgstr ""

#: ../../releases/1.4.txt:617
# 94b4ac9383e04e41a1e1b9f3dcce0122
msgid "If your Django app is behind a proxy, you might find the new :setting:`SECURE_PROXY_SSL_HEADER` setting useful. It solves the problem of your proxy \"eating\" the fact that a request came in via HTTPS. But only use this setting if you know what you're doing."
msgstr ""

#: ../../releases/1.4.txt:622
# 3646f315b44f4633b72ebf82b9cd3c0d
msgid "A new, plain-text, version of the HTTP 500 status code internal error page served when :setting:`DEBUG` is ``True`` is now sent to the client when Django detects that the request has originated in JavaScript code. (:meth:`~django.http.HttpRequest.is_ajax` is used for this.)"
msgstr ""

#: ../../releases/1.4.txt:627
# e832bbc15f134af5a17d922697b3353d
msgid "Like its HTML counterpart, it contains a collection of different pieces of information about the state of the application."
msgstr ""

#: ../../releases/1.4.txt:630
# 3c5847afa66f4746ab6abc742092d0ad
msgid "This should make it easier to read when debugging interaction with client-side JavaScript."
msgstr ""

#: ../../releases/1.4.txt:633
#: ../../releases/1.4-alpha-1.txt:541
#: ../../releases/1.4-beta-1.txt:601
# fe6e3ab69e2647ccad18c98036423006
# 376ff6bbe8334ceaaab883a149e814bb
# fb89d7affc5145d582ae97bb5438f4a0
msgid "Added the :djadminopt:`--no-location` option to the :djadmin:`makemessages` command."
msgstr ""

#: ../../releases/1.4.txt:636
#: ../../releases/1.4-alpha-1.txt:544
#: ../../releases/1.4-beta-1.txt:604
# 07d6ddee726e4cda8fcb7ab17c0f4954
# 1ee378ad5e2c4fb59267b0307d858cc7
# b275d2131f234d5daf391864bc56aed2
msgid "Changed the ``locmem`` cache backend to use ``pickle.HIGHEST_PROTOCOL`` for better compatibility with the other cache backends."
msgstr ""

#: ../../releases/1.4.txt:640
#: ../../releases/1.4-alpha-1.txt:548
#: ../../releases/1.4-beta-1.txt:608
# 732a0f948cc9442eb374f7da36192ab6
# 6a68d59f8df14500aaddee9151a8045c
# b9a4b37a472a4f058bf6bedadc0d310c
msgid "Added support in the ORM for generating ``SELECT`` queries containing ``DISTINCT ON``."
msgstr ""

#: ../../releases/1.4.txt:643
#: ../../releases/1.4-alpha-1.txt:551
#: ../../releases/1.4-beta-1.txt:611
# 78a0522b79ef4225b1b7c569d946b175
# 02a8792485ed434c9bc3376856505b78
# 8223dd81fc03469d8da3a1c742dce8fa
msgid "The ``distinct()`` ``QuerySet`` method now accepts an optional list of model field names. If specified, then the ``DISTINCT`` statement is limited to these fields. This is only supported in PostgreSQL."
msgstr ""

#: ../../releases/1.4.txt:647
#: ../../releases/1.4-alpha-1.txt:555
#: ../../releases/1.4-beta-1.txt:615
# a31765e1ec3f46c8bab1f7b7c8b3e461
# 18e5688227614907bf2f718ecba05718
# 1c2f8f79d2064b45a999052e6a22106d
msgid "For more details, see the documentation for :meth:`~django.db.models.query.QuerySet.distinct`."
msgstr ""

#: ../../releases/1.4.txt:650
# edbf34e01f38482380fcbf5ffef764c1
msgid "The admin login page will add a password reset link if you include a URL with the name `'admin_password_reset'` in your urls.py, so plugging in the built-in password reset mechanism and making it available is now much easier. For details, see :ref:`auth_password_reset`."
msgstr ""

#: ../../releases/1.4.txt:655
# d20c3ffc2ab24e2bb7d77740105d055e
msgid "The MySQL database backend can now make use of the savepoint feature implemented by MySQL version 5.0.3 or newer with the InnoDB storage engine."
msgstr ""

#: ../../releases/1.4.txt:658
# 79d89fc169e04ff991348853965dbd94
msgid "It's now possible to pass initial values to the model forms that are part of both model formsets and inline model formsets as returned from factory functions ``modelformset_factory`` and ``inlineformset_factory`` respectively just like with regular formsets. However, initial values only apply to extra forms, i.e. those which are not bound to an existing model instance."
msgstr ""

#: ../../releases/1.4.txt:664
# 0c02386c4479417690469290f56b928b
msgid "The sitemaps framework can now handle HTTPS links using the new :attr:`Sitemap.protocol <django.contrib.sitemaps.Sitemap.protocol>` class attribute."
msgstr ""

#: ../../releases/1.4.txt:668
# adb0af94d2304b38ac495018c59c400e
msgid "A new :class:`django.test.SimpleTestCase` subclass of :class:`unittest.TestCase` that's lighter than :class:`django.test.TestCase` and company. It can be useful in tests that don't need to hit a database. See :ref:`testcase_hierarchy_diagram`."
msgstr ""

#: ../../releases/1.4.txt:675
#: ../../releases/1.4-alpha-1.txt:559
#: ../../releases/1.4-beta-1.txt:627
# 2f7bd23193a347c9814aaf293683705e
# afd8b2170e0c4793a8f2243fbf33d872
# ba6265bf43a24528b0e0ef030f3d0773
msgid "Backwards incompatible changes in 1.4"
msgstr ""

#: ../../releases/1.4.txt:678
# c596fb13c7fc4d5495555ebfc27a110b
msgid "SECRET_KEY setting is required"
msgstr ""

#: ../../releases/1.4.txt:680
# 42fc977a6b1b431598c7ac1523030059
msgid "Running Django with an empty or known :setting:`SECRET_KEY` disables many of Django's security protections and can lead to remote-code-execution vulnerabilities. No Django site should ever be run without a :setting:`SECRET_KEY`."
msgstr ""

#: ../../releases/1.4.txt:685
# aa71c800e9af4541aac344989f5b13bc
msgid "In Django 1.4, starting Django with an empty :setting:`SECRET_KEY` will raise a `DeprecationWarning`. In Django 1.5, it will raise an exception and Django will refuse to start. This is slightly accelerated from the usual deprecation path due to the severity of the consequences of running Django with no :setting:`SECRET_KEY`."
msgstr ""

#: ../../releases/1.4.txt:692
#: ../../releases/1.4-alpha-1.txt:562
#: ../../releases/1.4-beta-1.txt:630
# 0ddb6abcabaf487eaa41c82d4fffbb97
# bcde3512d10b416c94b91b0fa5a163a8
# 7bc9042a223f48e498f1baf917005017
msgid "django.contrib.admin"
msgstr ""

#: ../../releases/1.4.txt:694
#: ../../releases/1.4-alpha-1.txt:564
#: ../../releases/1.4-beta-1.txt:632
# 9eff7b274f6d4f369497284df651ae0e
# 6d031f7737a44b8c889375068ad611ad
# d53ab72e87d64984b592a204bacaedb3
msgid "The included administration app ``django.contrib.admin`` has for a long time shipped with a default set of static files such as JavaScript, images and stylesheets. Django 1.3 added a new contrib app ``django.contrib.staticfiles`` to handle such files in a generic way and defined conventions for static files included in apps."
msgstr ""

#: ../../releases/1.4.txt:700
# 58971e7b2a384db7bb4cec3f871765c0
msgid "Starting in Django 1.4, the admin's static files also follow this convention, to make the files easier to deploy. In previous versions of Django, it was also common to define an ``ADMIN_MEDIA_PREFIX`` setting to point to the URL where the admin's static files live on a Web server. This setting has now been deprecated and replaced by the more general setting :setting:`STATIC_URL`. Django will now expect to find the admin static files under the URL ``<STATIC_URL>/admin/``."
msgstr ""

#: ../../releases/1.4.txt:708
# 29b2ee58ab97490f8e83a278f21935c6
msgid "If you've previously used a URL path for ``ADMIN_MEDIA_PREFIX`` (e.g. ``/media/``) simply make sure :setting:`STATIC_URL` and :setting:`STATIC_ROOT` are configured and your Web server serves those files correctly. The development server continues to serve the admin files just like before. Read the :doc:`static files howto </howto/static-files/index>` for more details."
msgstr ""

#: ../../releases/1.4.txt:714
# 1b1dca3a86a84ec392c6333ebbe4eee2
msgid "If your ``ADMIN_MEDIA_PREFIX`` is set to an specific domain (e.g. ``http://media.example.com/admin/``), make sure to also set your :setting:`STATIC_URL` setting to the correct URL -- for example, ``http://media.example.com/``."
msgstr ""

#: ../../releases/1.4.txt:721
# 67986ed56d0c4948bd8f9e598d04904c
msgid "If you're implicitly relying on the path of the admin static files within Django's source code, you'll need to update that path. The files were moved from :file:`django/contrib/admin/media/` to :file:`django/contrib/admin/static/admin/`."
msgstr ""

#: ../../releases/1.4.txt:727
#: ../../releases/1.4-alpha-1.txt:598
#: ../../releases/1.4-beta-1.txt:666
# d6a4f11e9473468da8c713d6aedea788
# 03c390e3fce54fcfad6cbf7d859b3b4e
# a1ceea312b264fdc9d084e89db7e9127
msgid "Supported browsers for the admin"
msgstr ""

#: ../../releases/1.4.txt:729
# fbca235b4f054addb294acb3c6ba9ba3
msgid "Django hasn't had a clear policy on which browsers are supported by the admin app. Our new policy formalizes existing practices: `YUI's A-grade`_ browsers should provide a fully-functional admin experience, with the notable exception of Internet Explorer 6, which is no longer supported."
msgstr ""

#: ../../releases/1.4.txt:734
# 04afcd2316da477a931cad9929555359
msgid "Released over 10 years ago, IE6 imposes many limitations on modern Web development. The practical implications of this policy are that contributors are free to improve the admin without consideration for these limitations."
msgstr ""

#: ../../releases/1.4.txt:738
# 4f930eb08d73486c8f957f8f7186f5eb
msgid "Obviously, this new policy **has no impact** on sites you develop using Django. It only applies to the Django admin. Feel free to develop apps compatible with any range of browsers."
msgstr ""

#: ../../releases/1.4.txt:745
#: ../../releases/1.4-alpha-1.txt:615
#: ../../releases/1.4-beta-1.txt:683
# 17fb76ba943f4f988f9b0b769a7baee3
# 393363dfeb6a4e5bac792de1354ed656
# c03268c1ab844f6a8844c0b0a3967c2e
msgid "Removed admin icons"
msgstr ""

#: ../../releases/1.4.txt:747
# d88cca8ee6be476ab61a64637a85e61f
msgid "As part of an effort to improve the performance and usability of the admin's change-list sorting interface and :attr:`horizontal <django.contrib.admin.ModelAdmin.filter_horizontal>` and :attr:`vertical <django.contrib.admin.ModelAdmin.filter_vertical>` \"filter\" widgets, some icon files were removed and grouped into two sprite files."
msgstr ""

#: ../../releases/1.4.txt:753
#: ../../releases/1.4-alpha-1.txt:623
#: ../../releases/1.4-beta-1.txt:691
# d2fb3538803944e080506e96fbe52f43
# f9dc2fd60df0415ea9260d3a77df42bf
# c915b84a21d244ffab0caa431e0b5c92
msgid "Specifically: ``selector-add.gif``, ``selector-addall.gif``, ``selector-remove.gif``, ``selector-removeall.gif``, ``selector_stacked-add.gif`` and ``selector_stacked-remove.gif`` were combined into ``selector-icons.gif``; and ``arrow-up.gif`` and ``arrow-down.gif`` were combined into ``sorting-icons.gif``."
msgstr ""

#: ../../releases/1.4.txt:759
# 72219a7cb5074fc8af49cb447d1aeda6
msgid "If you used those icons to customize the admin, then you'll need to replace them with your own icons or get the files from a previous release."
msgstr ""

#: ../../releases/1.4.txt:763
#: ../../releases/1.4-alpha-1.txt:633
#: ../../releases/1.4-beta-1.txt:701
# 8183f33267c340bdb5b4eb67d43c6570
# cc5f8ee245b0476db40a3073ccc7bff5
# 3d3ad707a25c42fab92a2af421c8c8eb
msgid "CSS class names in admin forms"
msgstr ""

#: ../../releases/1.4.txt:765
# 3536a8adca46404ea54aed0a7a923c07
msgid "To avoid conflicts with other common CSS class names (e.g. \"button\"), we added a prefix (\"field-\") to all CSS class names automatically generated from the form field names in the main admin forms, stacked inline forms and tabular inline cells. You'll need to take that prefix into account in your custom style sheets or JavaScript files if you previously used plain field names as selectors for custom styles or JavaScript transformations."
msgstr ""

#: ../../releases/1.4.txt:773
#: ../../releases/1.4-alpha-1.txt:643
#: ../../releases/1.4-beta-1.txt:711
# acea2ea414194450b25258af8e7bcd12
# 4c78e7e1ab14485da8968ae5f5c7f985
# fdc7c14adba64292983aa2491f3e3212
msgid "Compatibility with old signed data"
msgstr ""

#: ../../releases/1.4.txt:775
#: ../../releases/1.4-alpha-1.txt:645
#: ../../releases/1.4-beta-1.txt:713
# aef771d7092644f38e0ef9f9d9ab2fdf
# 65bd908abeb84fa393bad87610f5ec23
# 783835929d3646e0a4ce6f8d4d85a5c0
msgid "Django 1.3 changed the cryptographic signing mechanisms used in a number of places in Django. While Django 1.3 kept fallbacks that would accept hashes produced by the previous methods, these fallbacks are removed in Django 1.4."
msgstr ""

#: ../../releases/1.4.txt:779
#: ../../releases/1.4-alpha-1.txt:649
#: ../../releases/1.4-beta-1.txt:717
# 1a2dedef40be45b7a0a869ddf2c3bced
# 7c7ed8eabd3d4c7bb3a7b00c62a4a7e8
# f6a0bc324dae41c5a667bd8f86194532
msgid "So, if you upgrade to Django 1.4 directly from 1.2 or earlier, you may lose/invalidate certain pieces of data that have been cryptographically signed using an old method. To avoid this, use Django 1.3 first for a period of time to allow the signed data to expire naturally. The affected parts are detailed below, with 1) the consequences of ignoring this advice and 2) the amount of time you need to run Django 1.3 for the data to expire or become irrelevant."
msgstr ""

#: ../../releases/1.4.txt:786
#: ../../releases/1.4-alpha-1.txt:656
#: ../../releases/1.4-beta-1.txt:724
# 86a4773aaf6049cd93de2ddb15894383
# 5a665b62196d40dab574bb22c1b258be
# 77ead4eadd864a4ba442476d284dff7f
msgid "``contrib.sessions`` data integrity check"
msgstr ""

#: ../../releases/1.4.txt:788
# 7f1392fdd64345219e6b5450f6c60b46
msgid "Consequences: The user will be logged out, and session data will be lost."
msgstr ""

#: ../../releases/1.4.txt:790
# 5a368626e3a6459f9b7c48816b88886f
msgid "Time period: Defined by :setting:`SESSION_COOKIE_AGE`."
msgstr ""

#: ../../releases/1.4.txt:792
#: ../../releases/1.4-alpha-1.txt:662
#: ../../releases/1.4-beta-1.txt:730
# 349da9e796a04642ad8f9c8a1dc0d912
# 52f970138ba34a7092a79bb3f950d341
# 205c30ce484b4ef19adaaa2c8a52e600
msgid "``contrib.auth`` password reset hash"
msgstr ""

#: ../../releases/1.4.txt:794
# 498a9370aa16418ab3016c199b332549
msgid "Consequences: Password reset links from before the upgrade will not work."
msgstr ""

#: ../../releases/1.4.txt:796
# 29db4640dd964689bccf6c26cc9e9296
msgid "Time period: Defined by :setting:`PASSWORD_RESET_TIMEOUT_DAYS`."
msgstr ""

#: ../../releases/1.4.txt:798
# 26c265fba9a04a84b578ec13e594c925
msgid "Form-related hashes: these have a are much shorter lifetime and are relevant only for the short window where a user might fill in a form generated by the pre-upgrade Django instance and try to submit it to the upgraded Django instance:"
msgstr ""

#: ../../releases/1.4.txt:803
#: ../../releases/1.4-alpha-1.txt:672
#: ../../releases/1.4-beta-1.txt:740
# 55e6daca13a244b9a62aa5042edb1597
# 6c19023963fd41d49a7d2a9b3ab0a5f3
# cb1a180b40dc4d67ba2309fa945d530b
msgid "``contrib.comments`` form security hash"
msgstr ""

#: ../../releases/1.4.txt:805
# a2e4457c1a3e47fdb0cdc5e936863b57
msgid "Consequences: The user will see the validation error \"Security hash failed.\""
msgstr ""

#: ../../releases/1.4.txt:807
# 49bbc5b8885f4e349027881592eb8c93
msgid "Time period: The amount of time you expect users to take filling out comment forms."
msgstr ""

#: ../../releases/1.4.txt:810
#: ../../releases/1.4-alpha-1.txt:679
#: ../../releases/1.4-beta-1.txt:747
# 0795b9cb5fc24c55885baeb98569c873
# 473c08e2a57348909c8864215de2e895
# 7d78fed6fdb142e989deedd48e650079
msgid "``FormWizard`` security hash"
msgstr ""

#: ../../releases/1.4.txt:812
# 30b4cc22680344c5b63f042dca7148fc
msgid "Consequences: The user will see an error about the form having expired and will be sent back to the first page of the wizard, losing the data he has entered so far."
msgstr ""

#: ../../releases/1.4.txt:816
# d566a4e3746b454ca9d029814ecb0eae
msgid "Time period: The amount of time you expect users to take filling out the affected forms."
msgstr ""

#: ../../releases/1.4.txt:819
#: ../../releases/1.4-alpha-1.txt:688
#: ../../releases/1.4-beta-1.txt:756
# 085db934ca4347c6ac0cc1678efbb58d
# e3b880f74f7f4e50bcacc7227614c849
# 0a9a8c71d0bb41e08aa56d9b65759970
msgid "CSRF check"
msgstr ""

#: ../../releases/1.4.txt:821
# 9088b2f8a90549e88855d510120ba170
msgid "Note: This is actually a Django 1.1 fallback, not Django 1.2, and it applies only if you're upgrading from 1.1."
msgstr ""

#: ../../releases/1.4.txt:824
# 1656c530801349fc8941290e71c60c5d
msgid "Consequences: The user will see a 403 error with any CSRF-protected POST form."
msgstr ""

#: ../../releases/1.4.txt:827
# 4d981c86b9cc4be79e9e9ba3bebd12fa
msgid "Time period: The amount of time you expect user to take filling out such forms."
msgstr ""

#: ../../releases/1.4.txt:830
# cc48e6806b954ce59b578856e9bb2d4d
msgid "``contrib.auth`` user password hash-upgrade sequence"
msgstr ""

#: ../../releases/1.4.txt:832
# fbd1fa2e2acc4dafa5fc700f55624726
msgid "Consequences: Each user's password will be updated to a stronger password hash when it's written to the database in 1.4. This means that if you upgrade to 1.4 and then need to downgrade to 1.3, version 1.3 won't be able to read the updated passwords."
msgstr ""

#: ../../releases/1.4.txt:837
# 673d121fc3644318b4387f435892f155
msgid "Remedy: Set :setting:`PASSWORD_HASHERS` to use your original password hashing when you initially upgrade to 1.4. After you confirm your app works well with Django 1.4 and you won't have to roll back to 1.3, enable the new password hashes."
msgstr ""

#: ../../releases/1.4.txt:843
#: ../../releases/1.4-alpha-1.txt:700
#: ../../releases/1.4-beta-1.txt:768
# 0b417b48a3d94a7cbfc77006183d4e56
# cabe44df29434c11b6b0993d7bea45ba
# c993828df9ba42bd943d1a7eee474fec
msgid "django.contrib.flatpages"
msgstr ""

#: ../../releases/1.4.txt:845
# f25f9cb882fe4027b1fc22e704fc91c7
msgid "Starting in 1.4, the :class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` only adds a trailing slash and redirects if the resulting URL refers to an existing flatpage. For example, requesting ``/notaflatpageoravalidurl`` in a previous version would redirect to ``/notaflatpageoravalidurl/``, which would subsequently raise a 404. Requesting ``/notaflatpageoravalidurl`` now will immediately raise a 404."
msgstr ""

#: ../../releases/1.4.txt:853
# 97dacdc567f94169b67cfb38cdf136a2
msgid "Also, redirects returned by flatpages are now permanent (with 301 status code), to match the behavior of :class:`~django.middleware.common.CommonMiddleware`."
msgstr ""

#: ../../releases/1.4.txt:857
#: ../../releases/1.4-alpha-1.txt:713
#: ../../releases/1.4-beta-1.txt:781
# 9c7c9e54cb034fb08c813b19ae8b526f
# 5f2cb75bd264439aaf51e00170da48e3
# aa29bcbab1ae4998be44b8c68083f6d9
msgid "Serialization of :class:`~datetime.datetime` and :class:`~datetime.time`"
msgstr ""

#: ../../releases/1.4.txt:859
# d6642069d29246ac822b609b38ec0c09
msgid "As a consequence of time-zone support, and according to the ECMA-262 specification, we made changes to the JSON serializer:"
msgstr ""

#: ../../releases/1.4.txt:862
#: ../../releases/1.4-alpha-1.txt:718
#: ../../releases/1.4-beta-1.txt:786
# 4ce343b88c924249a7c8a2faa510ec71
# b7b2637d3b0e48939829e6b7dca581b6
# f57cd5dccabb404696fa3f5def5640b6
msgid "It includes the time zone for aware datetime objects. It raises an exception for aware time objects."
msgstr ""

#: ../../releases/1.4.txt:864
#: ../../releases/1.4-alpha-1.txt:720
#: ../../releases/1.4-beta-1.txt:788
# 0d0ededc028946348f24feafe1c4ba41
# a483cdfe206e4c619b2e905dbe41ca09
# e041c7a3bcec4f9cac1fd037dd29dc56
msgid "It includes milliseconds for datetime and time objects. There is still some precision loss, because Python stores microseconds (6 digits) and JSON only supports milliseconds (3 digits). However, it's better than discarding microseconds entirely."
msgstr ""

#: ../../releases/1.4.txt:869
# a051ddc2219f4dadb6e94727a3674865
msgid "We changed the XML serializer to use the ISO8601 format for datetimes. The letter ``T`` is used to separate the date part from the time part, instead of a space. Time zone information is included in the ``[+-]HH:MM`` format."
msgstr ""

#: ../../releases/1.4.txt:873
# ae1768bfdb2a4aa3ac7b79cc534465dd
msgid "Though the serializers now use these new formats when creating fixtures, they can still load fixtures that use the old format."
msgstr ""

#: ../../releases/1.4.txt:877
#: ../../releases/1.4-alpha-1.txt:733
#: ../../releases/1.4-beta-1.txt:801
# be60459cf63c43578cfdf6e2923167df
# a26cbd1de0954fa88c12ac78753fe3bf
# bdebccedd111471f9e8a98d70a1281bb
msgid "``supports_timezone`` changed to ``False`` for SQLite"
msgstr ""

#: ../../releases/1.4.txt:879
#: ../../releases/1.4-alpha-1.txt:735
#: ../../releases/1.4-beta-1.txt:803
# 3e6557afe34e4938a56657395c7ae8c4
# 1f1b384d56fc462685e792b541ab0f64
# 061d45221fcf4f87b0517d25817b211b
msgid "The database feature ``supports_timezone`` used to be ``True`` for SQLite. Indeed, if you saved an aware datetime object, SQLite stored a string that included an UTC offset. However, this offset was ignored when loading the value back from the database, which could corrupt the data."
msgstr ""

#: ../../releases/1.4.txt:884
# 0bcfb31b872d4d02b0b419678a0b8dc8
msgid "In the context of time-zone support, this flag was changed to ``False``, and datetimes are now stored without time-zone information in SQLite. When :setting:`USE_TZ` is ``False``, if you attempt to save an aware datetime object, Django raises an exception."
msgstr ""

#: ../../releases/1.4.txt:890
# 08054a2be0b242f1b1b1557e279152a2
msgid "``MySQLdb``-specific exceptions"
msgstr ""

#: ../../releases/1.4.txt:892
# 894c89dc1d3545f4a6b4246815391859
msgid "The MySQL backend historically has raised ``MySQLdb.OperationalError`` when a query triggered an exception. We've fixed this bug, and we now raise :exc:`django.db.DatabaseError` instead. If you were testing for ``MySQLdb.OperationalError``, you'll need to update your ``except`` clauses."
msgstr ""

#: ../../releases/1.4.txt:899
#: ../../releases/1.4-alpha-1.txt:746
#: ../../releases/1.4-beta-1.txt:814
# 7a158ea7c2e944aeaa1e7fd77d04ad11
# 9c4d847a830048dbb4923a015652623c
# 2d3d23f0a91648fea2d074245c82f8b7
msgid "Database connection's thread-locality"
msgstr ""

#: ../../releases/1.4.txt:901
#: ../../releases/1.4-alpha-1.txt:748
#: ../../releases/1.4-beta-1.txt:816
# 9cc8449fa68a48ba89a11a403d3b145f
# a4cda011975f469c92fbcc6841fcefa0
# 9448709435244c2c8cf986ac4ff11cb2
msgid "``DatabaseWrapper`` objects (i.e. the connection objects referenced by ``django.db.connection`` and ``django.db.connections[\"some_alias\"]``) used to be thread-local. They are now global objects in order to be potentially shared between multiple threads. While the individual connection objects are now global, the ``django.db.connections`` dictionary referencing those objects is still thread-local. Therefore if you just use the ORM or ``DatabaseWrapper.cursor()`` then the behavior is still the same as before. Note, however, that ``django.db.connection`` does not directly reference the default ``DatabaseWrapper`` object anymore and is now a proxy to access that object's attributes. If you need to access the actual ``DatabaseWrapper`` object, use ``django.db.connections[DEFAULT_DB_ALIAS]`` instead."
msgstr ""

#: ../../releases/1.4.txt:913
#: ../../releases/1.4-alpha-1.txt:760
#: ../../releases/1.4-beta-1.txt:828
# aaa2a0d1c80c4122842e98863b746f60
# b6f2e6c5f7484f468809d770301e5660
# 83089b4262504dbe8fd2f359b178952a
msgid "As part of this change, all underlying SQLite connections are now enabled for potential thread-sharing (by passing the ``check_same_thread=False`` attribute to pysqlite). ``DatabaseWrapper`` however preserves the previous behavior by disabling thread-sharing by default, so this does not affect any existing code that purely relies on the ORM or on ``DatabaseWrapper.cursor()``."
msgstr ""

#: ../../releases/1.4.txt:919
# 66a57c38435c4ad0be0a5aa6b03f1f38
msgid "Finally, while it's now possible to pass connections between threads, Django doesn't make any effort to synchronize access to the underlying backend. Concurrency behavior is defined by the underlying backend implementation. Check their documentation for details."
msgstr ""

#: ../../releases/1.4.txt:925
#: ../../releases/1.4-alpha-1.txt:772
#: ../../releases/1.4-beta-1.txt:840
# 279cb0306d8a44a18a956898c22b7ea7
# e2878e5b17b44b1d935d6c79edec5851
# bc4ad46e00684b67b746ee37cbda2912
msgid "`COMMENTS_BANNED_USERS_GROUP` setting"
msgstr ""

#: ../../releases/1.4.txt:927
#: ../../releases/1.4-alpha-1.txt:774
#: ../../releases/1.4-beta-1.txt:842
# cdb6ab5e0d7a4528a6ff32b44b561c05
# acaef8310e834e3e9d3e9c10a2dab49e
# f2848f92ede84f79acd2b24ca66f397b
msgid "Django's :doc:`comments app </ref/contrib/comments/index>` has historically supported excluding the comments of a special user group, but we've never documented the feature properly and didn't enforce the exclusion in other parts of the app such as the template tags. To fix this problem, we removed the code from the feed class."
msgstr ""

#: ../../releases/1.4.txt:933
# b2384cc4d7c048b69b347e1b248e643e
msgid "If you rely on the feature and want to restore the old behavior, use a custom comment model manager to exclude the user group, like this::"
msgstr ""

#: ../../releases/1.4.txt:948
# fbe3756a4cf5440c8647a52576499b54
msgid "Save this model manager in your custom comment app (e.g., in ``my_comments_app/managers.py``) and add it your :ref:`custom comment app model <custom-comment-app-api>`::"
msgstr ""

#: ../../releases/1.4.txt:962
#: ../../releases/1.4-alpha-1.txt:809
#: ../../releases/1.4-beta-1.txt:877
# fdfcc9ccc00a4de2a28124fe1d7d0002
# b28bd2e69c4644ff9c4f8912c3796e16
# 94cfa6f6c7154cd681b2d10845aaf6cf
msgid "For more details, see the documentation about :doc:`customizing the comments framework </ref/contrib/comments/custom>`."
msgstr ""

#: ../../releases/1.4.txt:966
#: ../../releases/1.4-alpha-1.txt:813
#: ../../releases/1.4-beta-1.txt:881
# 69f01e73b9d24fd3aa4173670c3a764d
# 395fc87decee4b9b9396b5a99e351faa
# 4ca807148c224d92a28241512a4bbfcc
msgid "`IGNORABLE_404_STARTS` and `IGNORABLE_404_ENDS` settings"
msgstr ""

#: ../../releases/1.4.txt:968
#: ../../releases/1.4-alpha-1.txt:815
#: ../../releases/1.4-beta-1.txt:883
# a60b1ae5844d4f1cbaded7e427e7a7b4
# 4134eeb4443d4f1ea3d39bc7d4b477b7
# fbcc0217446a4ef29898eba546bdfcac
msgid "Until Django 1.3, it was possible to exclude some URLs from Django's :doc:`404 error reporting</howto/error-reporting>` by adding prefixes to ``IGNORABLE_404_STARTS`` and suffixes to ``IGNORABLE_404_ENDS``."
msgstr ""

#: ../../releases/1.4.txt:972
#: ../../releases/1.4-alpha-1.txt:819
#: ../../releases/1.4-beta-1.txt:887
# 4fb45506b4fb499d9cd9a849f2f2586b
# 8aa5d56975694f1aac1e0653b9fbac7e
# 79c76a2c4f164666bea5353b55e1843b
msgid "In Django 1.4, these two settings are superseded by :setting:`IGNORABLE_404_URLS`, which is a list of compiled regular expressions. Django won't send an email for 404 errors on URLs that match any of them."
msgstr ""

#: ../../releases/1.4.txt:977
#: ../../releases/1.4-alpha-1.txt:824
#: ../../releases/1.4-beta-1.txt:892
# e88ce9a82ac74cd7801b75b3d8e18feb
# d36fd9511fe74bb49818e262ada60a0c
# 168631705e684defb2974ee08ae9eb11
msgid "Furthermore, the previous settings had some rather arbitrary default values::"
msgstr ""

#: ../../releases/1.4.txt:983
#: ../../releases/1.4-alpha-1.txt:830
#: ../../releases/1.4-beta-1.txt:898
# 561f05459151490c8cfc239f2dedec08
# 30426cb333ec4149a9eb645cac275b1b
# 9d2e78d4bf3943fe820adf827e6748e0
msgid "It's not Django's role to decide if your website has a legacy ``/cgi-bin/`` section or a ``favicon.ico``. As a consequence, the default values of :setting:`IGNORABLE_404_URLS`, ``IGNORABLE_404_STARTS``, and ``IGNORABLE_404_ENDS`` are all now empty."
msgstr ""

#: ../../releases/1.4.txt:988
#: ../../releases/1.4-alpha-1.txt:835
#: ../../releases/1.4-beta-1.txt:903
# 793331c0a8d441d6b553761b524a67f3
# a86587cf68f04317b19729566743b916
# 34b8b55435a44b80947286b70756cdfe
msgid "If you have customized ``IGNORABLE_404_STARTS`` or ``IGNORABLE_404_ENDS``, or if you want to keep the old default value, you should add the following lines in your settings file::"
msgstr ""

#: ../../releases/1.4.txt:1000
# c514750e81cb4670b316613760f469fe
msgid "Don't forget to escape characters that have a special meaning in a regular expression, such as periods."
msgstr ""

#: ../../releases/1.4.txt:1004
#: ../../releases/1.4-alpha-1.txt:851
#: ../../releases/1.4-beta-1.txt:919
# f17f74ed7e8a48f49ed34be14d87adc0
# cf857ed5c5c3403eb3b3ef37f7e2cd3e
# e94a3ddc7de34a1d8074516499584b5b
msgid "CSRF protection extended to PUT and DELETE"
msgstr ""

#: ../../releases/1.4.txt:1006
# 69ac9d720c194d259dc312442cce12e3
msgid "Previously, Django's :doc:`CSRF protection </ref/contrib/csrf/>` provided protection only against POST requests. Since use of PUT and DELETE methods in AJAX applications is becoming more common, we now protect all methods not defined as safe by :rfc:`2616` -- i.e., we exempt GET, HEAD, OPTIONS and TRACE, and we enforce protection on everything else."
msgstr ""

#: ../../releases/1.4.txt:1012
# abfddc4c5b5a4771b7f6beff393a7e3f
msgid "If you're using PUT or DELETE methods in AJAX applications, please see the :ref:`instructions about using AJAX and CSRF <csrf-ajax>`."
msgstr ""

#: ../../releases/1.4.txt:1016
# 33aadea1c85940b9826d6c35e8631451
msgid "Password reset view now accepts ``subject_template_name``"
msgstr ""

#: ../../releases/1.4.txt:1018
# 747bd2364f2b414ba4a1d020061e0130
msgid "The ``password_reset`` view in ``django.contrib.auth`` now accepts a ``subject_template_name`` parameter, which is passed to the password save form as a keyword argument. If you are using this view with a custom password reset form, then you will need to ensure your form's ``save()`` method accepts this keyword argument."
msgstr ""

#: ../../releases/1.4.txt:1025
#: ../../releases/1.4-alpha-1.txt:863
#: ../../releases/1.4-beta-1.txt:931
# ebc2a29ad1344f158f79c8c7ac60708a
# b04a2b3956354717bad1bfef77ac46c0
# a789422c18ca4fb6ad83034960e810f9
msgid "``django.core.template_loaders``"
msgstr ""

#: ../../releases/1.4.txt:1027
# 471ba5a91d544de0b1412cd51b0a8ae7
msgid "This was an alias to ``django.template.loader`` since 2005, and we've removed it without emitting a warning due to the length of the deprecation. If your code still referenced this, please use ``django.template.loader`` instead."
msgstr ""

#: ../../releases/1.4.txt:1032
#: ../../releases/1.4-alpha-1.txt:870
#: ../../releases/1.4-beta-1.txt:938
# 74243e7d09a14035ab2d14064b6581d0
# e389ab15d1924257be8dac7f9c4e6221
# 9a2a21757c644c7d8ec7e879bcf872c6
msgid "``django.db.models.fields.URLField.verify_exists``"
msgstr ""

#: ../../releases/1.4.txt:1034
#: ../../releases/1.4-alpha-1.txt:872
#: ../../releases/1.4-beta-1.txt:940
# facca606ce314c969ec8e656939b6359
# 4e04a10adf5e4e5989ba23ad4468e970
# 81d66f854c984ccd9fda7028b112c8dc
msgid "This functionality has been removed due to intractable performance and security issues. Any existing usage of ``verify_exists`` should be removed."
msgstr ""

#: ../../releases/1.4.txt:1039
#: ../../releases/1.4-alpha-1.txt:877
#: ../../releases/1.4-beta-1.txt:945
# 49e10425d16a45cebb7cbb0977b0c4dc
# 643b7d29261241ed94cd3cbc11c2a09b
# 6af2a28e4ef74f40acfd07b6c2b582e0
msgid "``django.core.files.storage.Storage.open``"
msgstr ""

#: ../../releases/1.4.txt:1041
# a86e15b5a96c41e68627261f788b49a5
msgid "The ``open`` method of the base Storage class used to take an obscure parameter ``mixin`` that allowed you to dynamically change the base classes of the returned file object. This has been removed. In the rare case you relied on the ``mixin`` parameter, you can easily achieve the same by overriding the ``open`` method, like this::"
msgstr ""

#: ../../releases/1.4.txt:1065
#: ../../releases/1.4-alpha-1.txt:903
#: ../../releases/1.4-beta-1.txt:971
# cd16b7f1b2b640298ba4980edf332d58
# cec139aa77364a9a89b99e488f9fc231
# a2ed70ef24f0420daa9ea65157c448f0
msgid "YAML deserializer now uses ``yaml.safe_load``"
msgstr ""

#: ../../releases/1.4.txt:1067
# 3ce4ecc7ab9b4d389614cf35b1b73612
msgid "``yaml.load`` is able to construct any Python object, which may trigger arbitrary code execution if you process a YAML document that comes from an untrusted source. This feature isn't necessary for Django's YAML deserializer, whose primary use is to load fixtures consisting of simple objects. Even though fixtures are trusted data, the YAML deserializer now uses ``yaml.safe_load`` for additional security."
msgstr ""

#: ../../releases/1.4.txt:1075
#: ../../releases/1.4-alpha-1.txt:1046
#: ../../releases/1.4-beta-1.txt:1114
# eb9be745566747e3b4a01f9690a0dfa5
# 3f9451854e2a4ac0ad82f621eb135736
# 5179006864554b34bc666530ce27c980
msgid "Session cookies now have the ``httponly`` flag by default"
msgstr ""

#: ../../releases/1.4.txt:1077
# ae5ff763eb5f4959a8f38a67d4c7b83e
msgid "Session cookies now include the ``httponly`` attribute by default to help reduce the impact of potential XSS attacks. As a consequence of this change, session cookie data, including sessionid, is no longer accessible from JavaScript in many browsers. For strict backwards compatibility, use ``SESSION_COOKIE_HTTPONLY = False`` in your settings file."
msgstr ""

#: ../../releases/1.4.txt:1085
# b2e79eed1219465dbcae908caa73e36d
msgid "The :tfilter:`urlize` filter no longer escapes every URL"
msgstr ""

#: ../../releases/1.4.txt:1087
# 9d9442c5417746c883752aebbbb9d32f
msgid "When a URL contains a ``%xx`` sequence, where ``xx`` are two hexadecimal digits, :tfilter:`urlize` now assumes that the URL is already escaped and doesn't apply URL escaping again. This is wrong for URLs whose unquoted form contains a ``%xx`` sequence, but such URLs are very unlikely to happen in the wild, because they would confuse browsers too."
msgstr ""

#: ../../releases/1.4.txt:1094
# ad7aee48bb8841a9a7bb9cc15a5e25fe
msgid "``assertTemplateUsed`` and ``assertTemplateNotUsed`` as context manager"
msgstr ""

#: ../../releases/1.4.txt:1096
# 3c5604920fdd4ebb8e765bb13f7101f5
msgid "It's now possible to check whether a template was used within a block of code with :meth:`~django.test.SimpleTestCase.assertTemplateUsed` and :meth:`~django.test.SimpleTestCase.assertTemplateNotUsed`. And they can be used as a context manager::"
msgstr ""

#: ../../releases/1.4.txt:1106
# 4ab4a830ca5b412e8715f3812eaa7226
msgid "See the :ref:`assertion documentation<assertions>` for more."
msgstr ""

#: ../../releases/1.4.txt:1109
# 58d9750701694fe8878643beef82fa6a
msgid "Database connections after running the test suite"
msgstr ""

#: ../../releases/1.4.txt:1111
# 83a52288b5d84ea1bb9acb6c19601d5e
msgid "The default test runner no longer restores the database connections after tests' execution. This prevents the production database from being exposed to potential threads that would still be running and attempting to create new connections."
msgstr ""

#: ../../releases/1.4.txt:1116
# ff64384e5e2d4df5a55424cbefdda8ce
msgid "If your code relied on connections to the production database being created after tests' execution, then you can restore the previous behavior by subclassing ``DjangoTestRunner`` and overriding its ``teardown_databases()`` method."
msgstr ""

#: ../../releases/1.4.txt:1122
# 25ac0da7657847ae99daa27dcea38b0e
msgid "Output of :djadmin:`manage.py help <help>`"
msgstr ""

#: ../../releases/1.4.txt:1124
# db2c45b3086d476ca00d9ac0a5a68a4f
msgid ":djadmin:`manage.py help <help>` now groups available commands by application. If you depended on the output of this command -- if you parsed it, for example -- then you'll need to update your code. To get a list of all available management commands in a script, use :djadmin:`manage.py help --commands <help>` instead."
msgstr ""

#: ../../releases/1.4.txt:1131
# b0edbaa58031467eb03716a9a582c84f
msgid "``extends`` template tag"
msgstr ""

#: ../../releases/1.4.txt:1133
# 45c020b46bad4e77b4e2cdd961dfa9f8
msgid "Previously, the :ttag:`extends` tag used a buggy method of parsing arguments, which could lead to it erroneously considering an argument as a string literal when it wasn't. It now uses ``parser.compile_filter``, like other tags."
msgstr ""

#: ../../releases/1.4.txt:1137
# 9f450b793301440bab2180452c89e597
msgid "The internals of the tag aren't part of the official stable API, but in the interests of full disclosure, the ``ExtendsNode.__init__`` definition has changed, which may break any custom tags that use this class."
msgstr ""

#: ../../releases/1.4.txt:1142
# 74d21fef1d5344a0902d6a7aa471e6cc
msgid "Loading some incomplete fixtures no longer works"
msgstr ""

#: ../../releases/1.4.txt:1144
# 86de466f4aaf4a21add328bb63d0da4c
msgid "Prior to 1.4, a default value was inserted for fixture objects that were missing a specific date or datetime value when auto_now or auto_now_add was set for the field. This was something that should not have worked, and in 1.4 loading such incomplete fixtures will fail. Because fixtures are a raw import, they should explicitly specify all field values, regardless of field options on the model."
msgstr ""

#: ../../releases/1.4.txt:1151
# c4a7ac8e2bff4ba8831d8261e9c30c69
msgid "Development Server Multithreading"
msgstr ""

#: ../../releases/1.4.txt:1153
# 1037eae5727d4aacb0b9014c4f807b60
msgid "The development server is now is multithreaded by default. Use the :djadminopt:`--nothreading` option to disable the use of threading in the development server::"
msgstr ""

#: ../../releases/1.4.txt:1160
# 21676213dfc142a999947bf2058a5836
msgid "Attributes disabled in markdown when safe mode set"
msgstr ""

#: ../../releases/1.4.txt:1162
# 852390bedb1b47318dcf969aedc6d629
msgid "Prior to Django 1.4, attributes were included in any markdown output regardless of safe mode setting of the filter. With version > 2.1 of the Python-Markdown library, an enable_attributes option was added. When the safe argument is passed to the markdown filter, both the ``safe_mode=True`` and ``enable_attributes=False`` options are set. If using a version of the Python-Markdown library less than 2.1, a warning is issued that the output is insecure."
msgstr ""

#: ../../releases/1.4.txt:1171
# 22c9cc8e1517474b8dc85bd82d6cbc00
msgid "FormMixin get_initial returns an instance-specific dictionary"
msgstr ""

#: ../../releases/1.4.txt:1173
# b3fc934378e84bd0b5326dabab2f36fc
msgid "In Django 1.3, the ``get_initial`` method of the :class:`django.views.generic.edit.FormMixin` class was returning the class ``initial`` dictionary. This has been fixed to return a copy of this dictionary, so form instances can modify their initial data without messing with the class variable."
msgstr ""

#: ../../releases/1.4.txt:1180
#: ../../releases/1.4-alpha-1.txt:913
#: ../../releases/1.4-beta-1.txt:981
# 60876a03b47840aab206ec89867631a2
# 8d414218010040fc8ee563f55e962ceb
# 83c9b48561874e418f41bf46a292d685
msgid "Features deprecated in 1.4"
msgstr ""

#: ../../releases/1.4.txt:1183
#: ../../releases/1.4-alpha-1.txt:916
#: ../../releases/1.4-beta-1.txt:984
# 581c298fa2774b34b774db4f2809eaa2
# 616ae6ba77d14366a49639465e4be601
# 7077a35c5ee44eada9a8c3c25f3f5f3f
msgid "Old styles of calling ``cache_page`` decorator"
msgstr ""

#: ../../releases/1.4.txt:1185
# fe52b0c4b8794e09b31feeb6970f53d5
msgid "Some legacy ways of calling :func:`~django.views.decorators.cache.cache_page` have been deprecated. Please see the documentation for the correct way to use this decorator."
msgstr ""

#: ../../releases/1.4.txt:1190
#: ../../releases/1.4-alpha-1.txt:923
#: ../../releases/1.4-beta-1.txt:991
# 7390333f247a45a1b27cce0269a78d78
# e4ed0358d5e4482ab687e7adabd80350
# 05005337b71d425ba6d2a7fd9687accf
msgid "Support for PostgreSQL versions older than 8.2"
msgstr ""

#: ../../releases/1.4.txt:1192
# 4f8982d0f703407c93a00b5f60327a2f
msgid "Django 1.3 dropped support for PostgreSQL versions older than 8.0, and we suggested using a more recent version because of performance improvements and, more importantly, the end of upstream support periods for 8.0 and 8.1 was near (November 2010)."
msgstr ""

#: ../../releases/1.4.txt:1197
#: ../../releases/1.4-alpha-1.txt:930
#: ../../releases/1.4-beta-1.txt:998
# 6d31d7a6db244188aef8437738a9b8b5
# 057f48d55f6f4414a21dca950aaf768d
# bd47af3dde63459ba968987f721ed974
msgid "Django 1.4 takes that policy further and sets 8.2 as the minimum PostgreSQL version it officially supports."
msgstr ""

#: ../../releases/1.4.txt:1201
#: ../../releases/1.4-alpha-1.txt:934
#: ../../releases/1.4-beta-1.txt:1002
# 2c13ab4eaaf74a9b9846b9dfc5c356f2
# 1d2ce1c6eb144d9d8d2d7256e1735564
# 6398fa21ca3943bc8cf53c376aa1afe6
msgid "Request exceptions are now always logged"
msgstr ""

#: ../../releases/1.4.txt:1203
# 4b1a52521708425abf0084beb3038610
msgid "When we added :doc:`logging support </topics/logging/>` in Django in 1.3, the admin error email support was moved into the :class:`django.utils.log.AdminEmailHandler`, attached to the ``'django.request'`` logger. In order to maintain the established behavior of error emails, the ``'django.request'`` logger was called only when :setting:`DEBUG` was ``False``."
msgstr ""

#: ../../releases/1.4.txt:1210
#: ../../releases/1.4-alpha-1.txt:943
#: ../../releases/1.4-beta-1.txt:1011
# 2db9cf4c5cba45b9858fe2c55876f5c2
# 16b97d1e1d074d06ac197da43d533b78
# 2e94321bef0d4788a502a28dba7ccdf2
msgid "To increase the flexibility of error logging for requests, the ``'django.request'`` logger is now called regardless of the value of :setting:`DEBUG`, and the default settings file for new projects now includes a separate filter attached to :class:`django.utils.log.AdminEmailHandler` to prevent admin error emails in ``DEBUG`` mode::"
msgstr ""

#: ../../releases/1.4.txt:1229
# 0763cd2bed5d497bacf8cc7e9d351c8e
msgid "If your project was created prior to this change, your :setting:`LOGGING` setting will not include this new filter. In order to maintain backwards-compatibility, Django will detect that your ``'mail_admins'`` handler configuration includes no ``'filters'`` section and will automatically add this filter for you and issue a pending-deprecation warning. This will become a deprecation warning in Django 1.5, and in Django 1.6 the backwards-compatibility shim will be removed entirely."
msgstr ""

#: ../../releases/1.4.txt:1237
#: ../../releases/1.4-alpha-1.txt:970
#: ../../releases/1.4-beta-1.txt:1038
# 006269d737bf430bbc3e4f5ff49013b5
# dcdda81281b64bc193c755a107b9ce11
# 70d1d2cad51f4944befd20c3cc276558
msgid "The existence of any ``'filters'`` key under the ``'mail_admins'`` handler will disable this backward-compatibility shim and deprecation warning."
msgstr ""

#: ../../releases/1.4.txt:1241
#: ../../releases/1.4-alpha-1.txt:974
#: ../../releases/1.4-beta-1.txt:1042
# e1d99ee6f8704995bde598b833d136d2
# acff233ddab84c419c2412529083a972
# fc76e988ecc04def9428997a625897d3
msgid "``django.conf.urls.defaults``"
msgstr ""

#: ../../releases/1.4.txt:1243
# 4c5cc96b22b1483ea5e968ce54611e0f
msgid "Until Django 1.3, the functions :func:`~django.conf.urls.include`, :func:`~django.conf.urls.patterns` and :func:`~django.conf.urls.url` plus :data:`~django.conf.urls.handler404`, :data:`~django.conf.urls.handler500` were located in a ``django.conf.urls.defaults`` module."
msgstr ""

#: ../../releases/1.4.txt:1248
# 304a105afea2430eb555b4e8796c539a
msgid "In Django 1.4, they live in :mod:`django.conf.urls`."
msgstr ""

#: ../../releases/1.4.txt:1251
#: ../../releases/1.4-alpha-1.txt:984
#: ../../releases/1.4-beta-1.txt:1052
# 5ae957ba54874145aae4198e6faf0d2e
# 17d5c6e6711749c8b93c6a2285c503ff
# f937a6e1411840c4b8b5b8694629a8e9
msgid "``django.contrib.databrowse``"
msgstr ""

#: ../../releases/1.4.txt:1253
#: ../../releases/1.4-alpha-1.txt:986
#: ../../releases/1.4-beta-1.txt:1054
# f62d598c93f74c61816e8e6349585fd7
# 2311d9f88c424ea790d63a033cc75914
# b8c1432cc3a44c0e978af112ed48133d
msgid "Databrowse has not seen active development for some time, and this does not show any sign of changing. There had been a suggestion for a `GSOC project`_ to integrate the functionality of databrowse into the admin, but no progress was made. While Databrowse has been deprecated, an enhancement of ``django.contrib.admin`` providing a similar feature set is still possible."
msgstr ""

#: ../../releases/1.4.txt:1261
# b8af89aede83400d84e31cac42d1e837
msgid "The code that powers Databrowse is licensed under the same terms as Django itself, so it's available to be adopted by an individual or group as a third-party project."
msgstr ""

#: ../../releases/1.4.txt:1266
#: ../../releases/1.4-alpha-1.txt:999
#: ../../releases/1.4-beta-1.txt:1067
# 5c07bd432af24bf485d07e8105df0eb8
# 20680bc9bab545d98464882e47f6fa0b
# ed68886cadbe42d3aec19a20e72cf4b0
msgid "``django.core.management.setup_environ``"
msgstr ""

#: ../../releases/1.4.txt:1268
#: ../../releases/1.4-alpha-1.txt:1001
#: ../../releases/1.4-beta-1.txt:1069
# 079b8a7f34534a25992043cc56afbcb1
# 974db06215e14b849e905fc0ac8a64d1
# da5b4606cb6f4f2d9d5d3fae5313097d
msgid "This function temporarily modified ``sys.path`` in order to make the parent \"project\" directory importable under the old flat :djadmin:`startproject` layout. This function is now deprecated, as its path workarounds are no longer needed with the new ``manage.py`` and default project layout."
msgstr ""

#: ../../releases/1.4.txt:1273
# daaa8bdb8c8e45d6a09f3d353535e895
msgid "This function was never documented or part of the public API, but it was widely recommended for use in setting up a \"Django environment\" for a user script. These uses should be replaced by setting the ``DJANGO_SETTINGS_MODULE`` environment variable or using :func:`django.conf.settings.configure`."
msgstr ""

#: ../../releases/1.4.txt:1279
#: ../../releases/1.4-alpha-1.txt:1012
#: ../../releases/1.4-beta-1.txt:1080
# 102e6ac6feac416db58cc6d48ff7ef93
# 6e613b3165a64b91980cab382d7f2107
# 9e7815b620df47c88c691abd711bd051
msgid "``django.core.management.execute_manager``"
msgstr ""

#: ../../releases/1.4.txt:1281
#: ../../releases/1.4-alpha-1.txt:1014
#: ../../releases/1.4-beta-1.txt:1082
# a6791e96718340378d4d699ae893c798
# bb41ea1e1ed740179fad8c35ebd40e38
# 3e91d596ffd24a8fa6b5ba904da604ba
msgid "This function was previously used by ``manage.py`` to execute a management command. It is identical to ``django.core.management.execute_from_command_line``, except that it first calls ``setup_environ``, which is now deprecated. As such, ``execute_manager`` is also deprecated; ``execute_from_command_line`` can be used instead. Neither of these functions is documented as part of the public API, but a deprecation path is needed due to use in existing ``manage.py`` files."
msgstr ""

#: ../../releases/1.4.txt:1290
#: ../../releases/1.4-alpha-1.txt:1023
#: ../../releases/1.4-beta-1.txt:1091
# 5543469c1d2645ea997bb645058708f7
# 0fd52c51b3884bacb9f7ccb1a6b75e4d
# 2fa5c52bd13f49d5a84bfe5e30a82188
msgid "``is_safe`` and ``needs_autoescape`` attributes of template filters"
msgstr ""

#: ../../releases/1.4.txt:1292
#: ../../releases/1.4-alpha-1.txt:1025
#: ../../releases/1.4-beta-1.txt:1093
# 731bb6b58ad84bdaa08223c725a0d56b
# aacb0378021344e1875fdf991b12e23e
# 6a032507eacc4a63af9b630f9e11c53a
msgid "Two flags, ``is_safe`` and ``needs_autoescape``, define how each template filter interacts with Django's auto-escaping behavior. They used to be attributes of the filter function::"
msgstr ""

#: ../../releases/1.4.txt:1301
#: ../../releases/1.4-alpha-1.txt:1034
#: ../../releases/1.4-beta-1.txt:1102
# e0de4de2b1864661953ca731ced88a93
# 1bb151e5a05042ca9ee23015e446df97
# efec94db65f44ab1a4ce0ce3c2a25d99
msgid "However, this technique caused some problems in combination with decorators, especially :func:`@stringfilter <django.template.defaultfilters.stringfilter>`. Now, the flags are keyword arguments of :meth:`@register.filter <django.template.Library.filter>`::"
msgstr ""

#: ../../releases/1.4.txt:1310
#: ../../releases/1.4-alpha-1.txt:1043
#: ../../releases/1.4-beta-1.txt:1111
# 1ea0552e9f2f4806ba2e38e1b4508179
# c715ed1735ac4349aa9b172af9114759
# 080a1c02c5bd4e9d8b8806fe900b52a2
msgid "See :ref:`filters and auto-escaping <filters-auto-escaping>` for more information."
msgstr ""

#: ../../releases/1.4.txt:1313
#: ../../releases/1.4-alpha-1.txt:1053
#: ../../releases/1.4-beta-1.txt:1124
# eb0156b77d76442b83e2bc1f8bdd3564
# cf90916ac02a4a8098ff8273761be9aa
# f29d43c208864840b47b6333a1627aaf
msgid "Wildcard expansion of application names in `INSTALLED_APPS`"
msgstr ""

#: ../../releases/1.4.txt:1315
#: ../../releases/1.4-alpha-1.txt:1055
#: ../../releases/1.4-beta-1.txt:1126
# 012555a698f441eaadbad72c6bb3ef10
# 1ebbdda834d74246ad5e5f37732011c1
# 4e1ae9294fa6459c93be1f2bd3d022cd
msgid "Until Django 1.3, :setting:`INSTALLED_APPS` accepted wildcards in application names, like ``django.contrib.*``. The expansion was performed by a filesystem-based implementation of ``from <package> import *``. Unfortunately, `this can't be done reliably`_."
msgstr ""

#: ../../releases/1.4.txt:1320
#: ../../releases/1.4-alpha-1.txt:1060
#: ../../releases/1.4-beta-1.txt:1131
# 924284e28351461da0d48d7ddafeb3a5
# 5449ed5d34e84c7e8effcebbccd35695
# 9d9ed9564f934dea921189f25b54169b
msgid "This behavior was never documented. Since it is un-pythonic and not obviously useful, it was removed in Django 1.4. If you relied on it, you must edit your settings file to list all your applications explicitly."
msgstr ""

#: ../../releases/1.4.txt:1327
#: ../../releases/1.4-alpha-1.txt:1067
#: ../../releases/1.4-beta-1.txt:1138
# fee8aaf4d12e4bf585a1eef8dff1c60c
# 5c52467f3fab45449330f583b5493fac
# 68efeed632d6410b859ff2f8296b084b
msgid "``HttpRequest.raw_post_data`` renamed to ``HttpRequest.body``"
msgstr ""

#: ../../releases/1.4.txt:1329
#: ../../releases/1.4-alpha-1.txt:1069
#: ../../releases/1.4-beta-1.txt:1140
# 6e853245c2a24099ab9afccb2af08591
# dd842d2184cf4110be03c84cbf3eb5d5
# cd255097a0e34184a8f937a11328388b
msgid "This attribute was confusingly named ``HttpRequest.raw_post_data``, but it actually provided the body of the HTTP request. It's been renamed to ``HttpRequest.body``, and ``HttpRequest.raw_post_data`` has been deprecated."
msgstr ""

#: ../../releases/1.4.txt:1334
# 3acf6844129142ef891fbec8c3ea25db
msgid "``django.contrib.sitemaps`` bug fix with potential performance implications"
msgstr ""

#: ../../releases/1.4.txt:1336
# 1ccf4ca169e0451a87174ec439f542f7
msgid "In previous versions, ``Paginator`` objects used in sitemap classes were cached, which could result in stale site maps. We've removed the caching, so each request to a site map now creates a new Paginator object and calls the :attr:`~django.contrib.sitemaps.Sitemap.items()` method of the :class:`~django.contrib.sitemaps.Sitemap` subclass. Depending on what your ``items()`` method is doing, this may have a negative performance impact. To mitigate the performance impact, consider using the :doc:`caching framework </topics/cache>` within your ``Sitemap`` subclass."
msgstr ""

#: ../../releases/1.4.txt:1346
# 603f6129030b4eecb7ed68772c30ad9c
msgid "Versions of Python-Markdown earlier than 2.1"
msgstr ""

#: ../../releases/1.4.txt:1348
# 14cd652ff2dc4dadadbfe2bf196f66a5
msgid "Versions of Python-Markdown earlier than 2.1 do not support the option to disable attributes. As a security issue, earlier versions of this library will not be supported by the markup contrib app in 1.5 under an accelerated deprecation timeline."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:3
# be30256b0bb34a3fb34f0d70b3fadc20
msgid "Django 1.4 alpha release notes"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:5
# 7b7f3c7c079a45978230ac487d9f4c07
msgid "December 22, 2011."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:7
# 5f095560c68746d280794a6382153f6f
msgid "Welcome to Django 1.4 alpha!"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:9
# 13f99dd198c34654a3c25db84f0fdf24
msgid "This is the first in a series of preview/development releases leading up to the eventual release of Django 1.4, scheduled for March 2012. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.4 release."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:18
# 3849c4c6dea34afa92120a51e8372cf2
msgid "Django 1.4 alpha includes various `new features`_ and some minor `backwards incompatible changes`_. There are also some features that have been dropped, which are detailed in :doc:`our deprecation plan </internals/deprecation>`, and we've `begun the deprecation process for some features`_."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:30
#: ../../releases/1.4-beta-1.txt:46
# 062f2bf4793b44adaee96422d0d904ca
# d98beecad9f442029679c51ec9fdaf2f
msgid "While not a new feature, it's important to note that Django 1.4 introduces the second shift in our Python compatibility policy since Django's initial public debut. Django 1.2 dropped support for Python 2.3; now Django 1.4 drops support for Python 2.4. As such, the minimum Python version required for Django is now 2.5, and Django is tested and supported on Python 2.5, 2.6 and 2.7."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:36
#: ../../releases/1.4-beta-1.txt:52
# f0cddbc480384dc48e97a5f5b9261184
# d8def5fc09ca4a0daa1f4f3ccf48c903
msgid "This change should affect only a small number of Django users, as most operating-system vendors today are shipping Python 2.5 or newer as their default version. If you're still using Python 2.4, however, you'll need to stick to Django 1.3 until you can upgrade; per :doc:`our support policy </internals/release-process>`, Django 1.3 will continue to receive security support until the release of Django 1.5."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:43
#: ../../releases/1.4-beta-1.txt:59
# 114024dc848946da9b7a25948712ffa9
# 4291f05bc73846618b0ccdc3ffc68a0a
msgid "Django does not support Python 3.x at this time. A document outlining our full timeline for deprecating Python 2.x and moving to Python 3.x will be published before the release of Django 1.4."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:65
#: ../../releases/1.4-beta-1.txt:81
# 9807448ba1964c03b5e3e52fef694f2e
# 15a8377854d9456e9d781f845b025a9c
msgid "Django 1.4 now includes a :meth:`QuerySet.select_for_update() <django.db.models.query.QuerySet.select_for_update>` method which generates a ``SELECT ... FOR UPDATE`` SQL query. This will lock rows until the end of the transaction, meaning that other transactions cannot modify or delete rows matched by a ``FOR UPDATE`` query."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:77
#: ../../releases/1.4-beta-1.txt:93
# d378bf5d44dd4cddb20be082ab5a8826
# 8b81aa3c4a3044fcb3a0a7c299628b00
msgid "This method allows for more efficient creation of multiple objects in the ORM. It can provide significant performance increases if you have many objects. Django makes use of this internally, meaning some operations (such as database setup for test suites) have seen a performance benefit as a result."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:88
#: ../../releases/1.4-beta-1.txt:104
# 25cfae7798014b0daf088cb056b7d650
# 6e69b8ba207a4ba6a206303b54945bc6
msgid "Similar to :meth:`~django.db.models.query.QuerySet.select_related` but with a different strategy and broader scope, :meth:`~django.db.models.query.QuerySet.prefetch_related` has been added to :class:`~django.db.models.query.QuerySet`. This method returns a new ``QuerySet`` that will prefetch each of the specified related lookups in a single batch as soon as the query begins to be evaluated. Unlike ``select_related``, it does the joins in Python, not in the database, and supports many-to-many relationships, :class:`~django.contrib.contenttypes.generic.GenericForeignKey` and more. This allows you to fix a very common performance problem in which your code ends up doing O(n) database queries (or worse) if objects on your primary ``QuerySet`` each have many related objects that you also need."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:119
#: ../../releases/1.4-beta-1.txt:150
# df370bbb76ed4fc1a1eea2306854845c
# 4f1a998613ae4d94bd1049ed0ad19ce5
msgid "HTML5 Doctype"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:130
#: ../../releases/1.4-beta-1.txt:161
# 5b020b5ff3514e08b7b33eb0b8032b9a
# b8584a8fd2e24fd6a9c84ec5c63df7e3
msgid "Prior to Django 1.4, the :mod:`~django.contrib.admin` app allowed you to specify change list filters by specifying a field lookup, but didn't allow you to create custom filters. This has been rectified with a simple API (previously used internally and known as \"FilterSpec\"). For more details, see the documentation for :attr:`~django.contrib.admin.ModelAdmin.list_filter`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:139
#: ../../releases/1.4-beta-1.txt:170
# 22eaab9ec299453e8f91fbe67d305d2f
# ffe7ff5f9e37419e97189733b749ad33
msgid "The admin change list now supports sorting on multiple columns. It respects all elements of the :attr:`~django.contrib.admin.ModelAdmin.ordering` attribute, and sorting on multiple columns by clicking on headers is designed to mimic the behavior of desktop GUIs. The :meth:`~django.contrib.admin.ModelAdmin.get_ordering` method for specifying the ordering dynamically (e.g. depending on the request) has also been added."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:149
#: ../../releases/1.4-beta-1.txt:180
# 06e51b05602a415293193d5c06f0c594
# 8a912e8b806b44b4a2cccbb6c2f3a882
msgid "A new :meth:`~django.contrib.admin.ModelAdmin.save_related` method was added to :mod:`~django.contrib.admin.ModelAdmin` to ease customization of how related objects are saved in the admin."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:153
#: ../../releases/1.4-beta-1.txt:184
# 3c069eb9bb784bfca4705a41fbbeb14c
# 466718fbb97f466f8567598ef9d3a3bc
msgid "Two other new methods, :meth:`~django.contrib.admin.ModelAdmin.get_list_display` and :meth:`~django.contrib.admin.ModelAdmin.get_list_display_links` were added to :class:`~django.contrib.admin.ModelAdmin` to enable the dynamic customization of fields and links displayed on the admin change list."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:162
#: ../../releases/1.4-beta-1.txt:193
# bf41509948ea4877a687391f7b2ce16d
# 3b2e315c8c9f4f3caea71e4a710e7c7a
msgid "Admin inlines will now only allow those actions for which the user has permission. For ``ManyToMany`` relationships with an auto-created intermediate model (which does not have its own permissions), the change permission for the related model determines if the user has the permission to add, change or delete relationships."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:181
#: ../../releases/1.4-beta-1.txt:212
# 632135f80a144b31bbd708a4e2796db0
# 5ee17c3a872a4192822358751c7ca325
msgid "Django 1.4 introduces a new cookie-based backend for the session framework which uses the tools for :doc:`cryptographic signing </topics/signing>` to store the session data in the client's browser."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:191
#: ../../releases/1.4-beta-1.txt:229
# 849b6c60e38849d1abe172ac0a7f3bb7
# 7b978c9b681648c59f03d4007c9a498a
msgid "The previous ``FormWizard`` from the formtools contrib app has been replaced with a new implementation based on the class-based views introduced in Django 1.3. It features a pluggable storage API and doesn't require the wizard to pass around hidden fields for every previous step."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:207
#: ../../releases/1.4-beta-1.txt:245
# 282464e309b34fd2b877a0416e00ee9b
# f89fbeede0ed407fb8f99a89d1d6329d
msgid "A lazily evaluated version of :func:`django.core.urlresolvers.reverse` was added to allow using URL reversals before the project's URLConf gets loaded."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:213
#: ../../releases/1.4-beta-1.txt:251
# 25b533003cb24909bc8279b477889adb
# 44b14ed3a6da4d89b2890a60fe1f4235
msgid "Django 1.4 gained the ability to look for a language prefix in the URL pattern when using the new :func:`~django.conf.urls.i18n.i18n_patterns` helper function. Additionally, it's now possible to define translatable URL patterns using :func:`~django.utils.translation.ugettext_lazy`. See :ref:`url-internationalization` for more information about the language prefix and how to internationalize URL patterns."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:231
#: ../../releases/1.4-beta-1.txt:269
# ce903d2e56e546a28ac9fe24ff0658ff
# 05dff0bbb27141f1884d8d9239026c94
msgid "Two new attributes, :attr:`pk_url_kwarg<django.views.generic.detail.SingleObjectMixin.pk_url_kwarg>` and :attr:`slug_url_kwarg<django.views.generic.detail.SingleObjectMixin.slug_url_kwarg>`, have been added to :class:`~django.views.generic.detail.SingleObjectMixin` to enable the customization of URLConf keyword arguments used for single object generic views."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:265
#: ../../releases/1.4-beta-1.txt:303
# d602f512dd94491dbc31d347aa79fa68
# 8181022532c54c7e945c79d47deb09ee
msgid "Then in the template any number of arguments may be passed to the template tag. For example:"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:290
#: ../../releases/1.4-beta-1.txt:328
# 4382bd1b54b346f383436f7a639f75d0
# 32d15c574b4d4b16b4202dd5afed8b40
msgid "Added a filter which truncates a string to be no longer than the specified number of characters. Truncated strings end with a translatable ellipsis sequence (\"...\"). See the documentation for :tfilter:`truncatechars` for more details."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:307
#: ../../releases/1.4-beta-1.txt:345
# 63efb36451e540fab996aa0a5e4d04fd
# bb306a7138154a9c85e6451ab2230956
msgid "In addition to the `static template tag`_, the :mod:`staticfiles<django.contrib.staticfiles>` contrib app now has a :class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` backend which caches the files it saves (when running the :djadmin:`collectstatic` management command) by appending the MD5 hash of the file's content to the filename. For example, the file ``css/styles.css`` would also be saved as ``css/styles.55e7cbb9ba48.css``"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:330
#: ../../releases/1.4-beta-1.txt:368
# 4073a3577ab14f7ba76a07aac11b7233
# b5ea0633f1b446dca346af8b5eef48d6
msgid "We've made various improvements to our CSRF features, including the :func:`~django.views.decorators.csrf.ensure_csrf_cookie` decorator which can help with AJAX heavy sites, protection for PUT and DELETE requests, and the :setting:`CSRF_COOKIE_SECURE` and :setting:`CSRF_COOKIE_PATH` settings which can improve the security and usefulness of the CSRF protection. See the :doc:`CSRF docs </ref/contrib/csrf>` for more information."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:346
#: ../../releases/1.4-beta-1.txt:384
# 41d2addefdd9445f8f5fdfb55211e005
# 1a8cc07436674eb8800b2f1302b59608
msgid "All POST parameters are now systematically filtered out of error reports for certain views (``login``, ``password_reset_confirm``, ``password_change``, and ``add_view`` in :mod:`django.contrib.auth.views`, as well as ``user_change_password`` in the admin app) to prevent the leaking of sensitive information such as user passwords."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:352
#: ../../releases/1.4-beta-1.txt:390
# dffb8ba5887a4b2396a20b10ab862ec3
# d0ac5cf8787f485eb30a62b62fbeac06
msgid "You may override or customize the default filtering by writing a :ref:`custom filter<custom-error-reports>`. For more information see the docs on :ref:`Filtering error reports<filtering-error-reports>`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:359
#: ../../releases/1.4-beta-1.txt:397
# 50ee06287a854fa181498eae33c32a50
# 82803eea8bd348da8af9539b93e2c0b8
msgid "The previously added support for IPv6 addresses when using the runserver management command in Django 1.3 has now been further extended by adding a :class:`~django.db.models.GenericIPAddressField` model field, a :class:`~django.forms.GenericIPAddressField` form field and the validators :data:`~django.core.validators.validate_ipv46_address` and :data:`~django.core.validators.validate_ipv6_address`"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:375
#: ../../releases/1.4-beta-1.txt:413
# 64fa6372076e4f20aec86c626e0796c5
# 1f8c679087c042578fa7253fa6f024d4
msgid "The previous ``manage.py`` called functions that are now deprecated, and thus projects upgrading to Django 1.4 should update their ``manage.py``. (The old-style ``manage.py`` will continue to work as before until Django 1.6; in 1.5 it will raise ``DeprecationWarning``)."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:395
#: ../../releases/1.4-beta-1.txt:433
# 72fa2281f3cc43c8b65be632557e7acb
# 507944100f6c4aaa86d4112acbd289b4
msgid "If settings, URLconfs, and apps within the project are imported or referenced using the project name prefix (e.g. ``myproject.settings``, ``ROOT_URLCONF = \"myproject.urls\"``, etc), the new ``manage.py`` will need to be moved one directory up, so it is outside the project package rather than adjacent to ``settings.py`` and ``urls.py``."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:440
#: ../../releases/1.4-beta-1.txt:478
# a21afc61e0ea438ca95e55d8dadbdf34
# 45cb5330a3d3421b872763529c4e704c
msgid "The :djadmin:`built-in development server<runserver>` now supports using an externally-defined WSGI callable, so as to make it possible to run runserver with the same WSGI configuration that is used for deployment. A new :setting:`WSGI_APPLICATION` setting is available to configure which WSGI callable :djadmin:`runserver` uses."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:452
#: ../../releases/1.4-beta-1.txt:490
# 45d852d856fd48d2a4c588eb1a61cb69
# 5ba6d5aa4f2143bf8bd0ea5c082488c7
msgid "The :djadmin:`startapp` and :djadmin:`startproject` management commands got a ``--template`` option for specifying a path or URL to a custom app or project template."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:456
#: ../../releases/1.4-beta-1.txt:494
# 24c9cf3bc23941638cb78d9dbbbb57e6
# 2932525cebf74e4da4576b445adcd38d
msgid "For example, Django will use the ``/path/to/my_project_template`` directory when running the following command::"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:473
#: ../../releases/1.4-beta-1.txt:511
# a8ab947073284212b4cffb881181cee8
# 13e2fcb2fe184624a6cfbd5f8448a58d
msgid "Django 1.4 adds :ref:`support for time zones <time-zones>`. When it's enabled, Django stores date and time information in UTC in the database, uses time zone-aware datetime objects internally, and translates them to the end user's time zone in templates and forms."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:478
#: ../../releases/1.4-beta-1.txt:516
# 12d306f16c6146659b9a9f204684fc64
# b5bdfa15be9f4aacadcf7e3a6becda8f
msgid "Reasons for using this feature include:"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:486
#: ../../releases/1.4-beta-1.txt:524
# 12a786d4880d4a0a9e756c750ea1c81b
# 63014f34143f47ccba2939445964a468
msgid "Time zone support is enabled by default in new projects created with :djadmin:`startproject`. If you want to use this feature in an existing project, there is a :ref:`migration guide <time-zones-migration-guide>`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:495
#: ../../releases/1.4-beta-1.txt:555
# 56fc3803090945c3b763fc848424e57f
# 61172d015cbc4423b48993088bf96e91
msgid "A more usable stacktrace in the technical 500 page: frames in the stack trace which reference Django's code are dimmed out, while frames in user code are slightly emphasized. This change makes it easier to scan a stacktrace for issues in user code."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:507
#: ../../releases/1.4-beta-1.txt:567
# 1f17fd57c9364c4face5c0eac2c4d6cc
# 6af4fe8d33fb4f70950f18c0325bc852
msgid "The ``django.contrib.auth.models.check_password`` function has been moved to the ``django.contrib.auth.utils`` module. Importing it from the old location will still work, but you should update your imports."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:511
#: ../../releases/1.4-beta-1.txt:571
# 15823b1c4eed4478ba4d7d3e2ef5ddf6
# a386028fab9849a3979aaf668b554aa3
msgid "The :djadmin:`collectstatic` management command gained a ``--clear`` option to delete all files at the destination before copying or linking the static files."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:515
#: ../../releases/1.4-beta-1.txt:575
# 7ef59fc0e5c34327a44f56522b286dd1
# 7f532192ecf64c0d9374b1b2c7aca65d
msgid "It is now possible to load fixtures containing forward references when using MySQL with the InnoDB database engine."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:530
#: ../../releases/1.4-beta-1.txt:590
# b9920f1eb99a4c2d98b76066be925db6
# 20c36a41fd22449a9861721dfecdc137
msgid "A new plain text version of the HTTP 500 status code internal error page served when :setting:`DEBUG` is ``True`` is now sent to the client when Django detects that the request has originated in JavaScript code (:meth:`~django.http.HttpRequest.is_ajax` is used for this)."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:535
#: ../../releases/1.4-beta-1.txt:595
# cc0f1bfa63e44b458fe1e3ea32664799
# 7422979ae96a4d41ba91e6bfcd9ec233
msgid "Similarly to its HTML counterpart, it contains a collection of different pieces of information about the state of the web application."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:538
#: ../../releases/1.4-beta-1.txt:598
# 9ca00f683d024464a08b4268d03a4226
# 7dcf39905a824c3f9e77535cd4f8c13f
msgid "This should make it easier to read when debugging interaction with client-side Javascript code."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:570
#: ../../releases/1.4-beta-1.txt:638
# 0f0b86aad1f24c44b2f6c957c5c9b6b0
# cf08e0e5acce464c928d5059f0734b50
msgid "Starting in Django 1.4 the admin's static files also follow this convention to make it easier to deploy the included files. In previous versions of Django, it was also common to define an ``ADMIN_MEDIA_PREFIX`` setting to point to the URL where the admin's static files are served by a web server. This setting has now been deprecated and replaced by the more general setting :setting:`STATIC_URL`. Django will now expect to find the admin static files under the URL ``<STATIC_URL>/admin/``."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:578
#: ../../releases/1.4-beta-1.txt:646
# 505fc93e5de84d0789f7e10603272b1b
# 829794c227794ed6b8d9a25053075785
msgid "If you've previously used a URL path for ``ADMIN_MEDIA_PREFIX`` (e.g. ``/media/``) simply make sure :setting:`STATIC_URL` and :setting:`STATIC_ROOT` are configured and your web server serves the files correctly. The development server continues to serve the admin files just like before. Don't hesitate to consult the :doc:`static files howto </howto/static-files/index>` for further details."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:585
#: ../../releases/1.4-beta-1.txt:653
# 3551c9dbc09c48c5b84fd10295a9b5d7
# 1698f2daf3554d61a5d16ffb4c59fe64
msgid "In case your ``ADMIN_MEDIA_PREFIX`` is set to an specific domain (e.g. ``http://media.example.com/admin/``) make sure to also set your :setting:`STATIC_URL` setting to the correct URL, for example ``http://media.example.com/``."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:592
#: ../../releases/1.4-beta-1.txt:660
# d2fe9aef8c234a1d8d3f9502a84af73c
# 2784e60146254007bae53a880f4a9ef0
msgid "If you're implicitly relying on the path of the admin static files on your server's file system when you deploy your site, you have to update that path. The files were moved from :file:`django/contrib/admin/media/` to :file:`django/contrib/admin/static/admin/`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:600
#: ../../releases/1.4-beta-1.txt:668
# 87bb3b1aa28f43f18fe584c3967d7343
# b3c5d5784b4c418a941f1e569e33d8e9
msgid "Django hasn't had a clear policy on which browsers are supported for using the admin app. Django's new policy formalizes existing practices: `YUI's A-grade`_ browsers should provide a fully-functional admin experience, with the notable exception of IE6, which is no longer supported."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:605
#: ../../releases/1.4-beta-1.txt:673
# a2e2148510724b7eaad920a52a2a9375
# 8972f327afe3484482574ed3dbd5f16e
msgid "Released over ten years ago, IE6 imposes many limitations on modern web development. The practical implications of this policy are that contributors are free to improve the admin without consideration for these limitations."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:609
#: ../../releases/1.4-beta-1.txt:677
# 8e14d7618e7943958841b96c26d360fd
# e387226cc7d846f9b750f00e4c2b4517
msgid "This new policy **has no impact** on development outside of the admin. Users of Django are free to develop webapps compatible with any range of browsers."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:617
#: ../../releases/1.4-beta-1.txt:685
# 10d1c03d6c9f42fb87650b9b108f43e0
# 5d05caf1857943649a6c020e0dac4ee3
msgid "As part of an effort to improve the performance and usability of the admin's changelist sorting interface and of the admin's :attr:`horizontal <django.contrib.admin.ModelAdmin.filter_horizontal>` and :attr:`vertical <django.contrib.admin.ModelAdmin.filter_vertical>` \"filter\" widgets, some icon files were removed and grouped into two sprite files."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:629
#: ../../releases/1.4-beta-1.txt:697
# ad7b1b5dc1ae422ab14758f7507bb508
# 8dc4e5492ad64ec6bbda97600c115d43
msgid "If you used those icons to customize the admin then you will want to replace them with your own icons or retrieve them from a previous release."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:635
#: ../../releases/1.4-beta-1.txt:703
# c4087b7e5b54462a92ee28859e44c234
# 4b1766ab632e4fb8b665875e0b8accbc
msgid "To avoid conflicts with other common CSS class names (e.g. \"button\"), a prefix \"field-\" has been added to all CSS class names automatically generated from the form field names in the main admin forms, stacked inline forms and tabular inline cells. You will need to take that prefix into account in your custom style sheets or javascript files if you previously used plain field names as selectors for custom styles or javascript transformations."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:658
#: ../../releases/1.4-beta-1.txt:726
# ef620117f8b148488ba33ffc2726aa71
# bbf9a62ce0e54b91a7a0e66de2449d75
msgid "consequences: the user will be logged out, and session data will be lost."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:660
#: ../../releases/1.4-beta-1.txt:728
# b77c4dbcbc2f488b8ac9c10f23a4d755
# 7f3c993451a84106807fdd055db7117e
msgid "time period: defined by :setting:`SESSION_COOKIE_AGE`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:664
#: ../../releases/1.4-beta-1.txt:732
# 9ff853dd4ae140288a8b3851520f202d
# 8215c2b1fb4940b0bc7b7d3a92c95d7a
msgid "consequences: password reset links from before the upgrade will not work."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:666
#: ../../releases/1.4-beta-1.txt:734
# f2ddfc069353484fa801aea7fec11cb5
# 38d0e3ffdfed4a05be86d7b9624923bf
msgid "time period: defined by :setting:`PASSWORD_RESET_TIMEOUT_DAYS`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:668
#: ../../releases/1.4-beta-1.txt:736
# b4d1a93b49284935826dd237ccb9cc3a
# 15056720be764db182e632ad08e814ef
msgid "Form-related hashes — these are much shorter lifetime, and are relevant only for the short window where a user might fill in a form generated by the pre-upgrade Django instance, and try to submit it to the upgraded Django instance:"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:674
#: ../../releases/1.4-beta-1.txt:742
# d17be3fb5be54e488f1c5b5d7ea610b5
# cc6a049c1e7f4fadacf2b949c1e06985
msgid "consequences: the user will see a validation error \"Security hash failed\"."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:676
#: ../../releases/1.4-beta-1.txt:744
# 2de2b8c4dbf44027bdc10ba9c00f5f78
# 0124228f1ef141c482ffddd8a4968320
msgid "time period: the amount of time you expect users to take filling out comment forms."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:681
#: ../../releases/1.4-beta-1.txt:749
# 577788f124c642b09216f9ec27ddca79
# 9af87a16451d423695a8057074e2e841
msgid "consequences: the user will see an error about the form having expired, and will be sent back to the first page of the wizard, losing the data they have entered so far."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:685
#: ../../releases/1.4-beta-1.txt:753
# a3fe490837884dfa9faf6ed2525f2bb8
# b0dababf1cd34f198aeb3f99254a0238
msgid "time period: the amount of time you expect users to take filling out the affected forms."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:690
#: ../../releases/1.4-beta-1.txt:758
# 4e046c1266ef4c9f920c243ee89932ff
# 9cbd0ec51939438f81d9450839029f70
msgid "Note: This is actually a Django 1.1 fallback, not Django 1.2, and applies only if you are upgrading from 1.1."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:693
#: ../../releases/1.4-beta-1.txt:761
# 660d8ad3ecf442d099ecec06ef54a7a6
# bad98240dabe4cb3b55bab8e9ac8aa4d
msgid "consequences: the user will see a 403 error with any CSRF protected POST form."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:696
#: ../../releases/1.4-beta-1.txt:764
# 89309a51f78c4b32a6e3d7eb7423e757
# 19f7378438e94cf6b08e745ca3b4aed8
msgid "time period: the amount of time you expect user to take filling out such forms."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:702
#: ../../releases/1.4-beta-1.txt:770
# 92cef609a04547ba81db5a79bf4b4ee1
# bc2e6664c2cf48debf215f2afa0a321c
msgid "Starting in the 1.4 release the :class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` only adds a trailing slash and redirects if the resulting URL refers to an existing flatpage. For example, requesting ``/notaflatpageoravalidurl`` in a previous version would redirect to ``/notaflatpageoravalidurl/``, which would subsequently raise a 404. Requesting ``/notaflatpageoravalidurl`` now will immediately raise a 404. Additionally redirects returned by flatpages are now permanent (301 status code) to match the behavior of the :class:`~django.middleware.common.CommonMiddleware`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:715
#: ../../releases/1.4-beta-1.txt:783
# 9619069bbba944f596f75250deab7004
# 37aeadb3a5044b50abd5ddfdd36bd9b4
msgid "As a consequence of time zone support, and according to the ECMA-262 specification, some changes were made to the JSON serializer:"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:725
#: ../../releases/1.4-beta-1.txt:793
# 39c3951dbeb742d99f30d0529857d70d
# 9746ae95bb3348c380737135d18826b8
msgid "The XML serializer was also changed to use the ISO8601 format for datetimes. The letter ``T`` is used to separate the date part from the time part, instead of a space. Time zone information is included in the ``[+-]HH:MM`` format."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:729
#: ../../releases/1.4-beta-1.txt:797
# 50df84644ef4418086d67ca23af1169a
# 61092b82bbc84909a6425e2dabd118ce
msgid "The serializers will dump datetimes in fixtures with these new formats. They can still load fixtures that use the old format."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:740
#: ../../releases/1.4-beta-1.txt:808
# e093343ba5de41e6b234c8998d68a3e1
# 263a60095a7a4cafac61c1e2fff32f2e
msgid "In the context of time zone support, this flag was changed to ``False``, and datetimes are now stored without time zone information in SQLite. When :setting:`USE_TZ` is ``False``, if you attempt to save an aware datetime object, Django raises an exception."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:766
#: ../../releases/1.4-beta-1.txt:834
# aa1b1873566540e8a8ac158185085529
# 9bb8b2701d03445ea1ca5fbbfa87fe80
msgid "Finally, while it is now possible to pass connections between threads, Django does not make any effort to synchronize access to the underlying backend. Concurrency behavior is defined by the underlying backend implementation. Check their documentation for details."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:780
#: ../../releases/1.4-beta-1.txt:848
# 18d6176f99bd4abc8092661557ec4940
# 3624e5c3fe994b5fa78c9b56d2ecb35d
msgid "If you rely on the feature and want to restore the old behavior, simply use a custom comment model manager to exclude the user group, like this::"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:795
#: ../../releases/1.4-beta-1.txt:863
# 42acbeaee0ae4eec9af48f830e04a85a
# 96e245a1d1b04f13b592ccbe1b32d3ee
msgid "Save this model manager in your custom comment app (e.g. in ``my_comments_app/managers.py``) and add it your :ref:`custom comment app model <custom-comment-app-api>`::"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:847
#: ../../releases/1.4-beta-1.txt:915
# 099f43c5a4da4411ace356bb0679658c
# 22b3a02d84ad4c47860ce7c25b4dce98
msgid "Don't forget to escape characters that have a special meaning in a regular expression."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:853
#: ../../releases/1.4-beta-1.txt:921
# 675d474ab13a49ae8b936f52cd6ad26a
# aa635beb466d497589205a2f8d0149a2
msgid "Previously, Django's :doc:`CSRF protection </ref/contrib/csrf/>` provided protection against only POST requests. Since use of PUT and DELETE methods in AJAX applications is becoming more common, we now protect all methods not defined as safe by :rfc:`2616` i.e. we exempt GET, HEAD, OPTIONS and TRACE, and enforce protection on everything else."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:859
#: ../../releases/1.4-beta-1.txt:927
# 149b3c83803949129b95c5f106285030
# e9cbbc2677924ab891093ed572e8ea0f
msgid "If you are using PUT or DELETE methods in AJAX applications, please see the :ref:`instructions about using AJAX and CSRF <csrf-ajax>`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:865
#: ../../releases/1.4-beta-1.txt:933
# 7538e3898fed4a40858e04c08562f55e
# c4fae263ab8548178602f5bdfa660d91
msgid "This was an alias to ``django.template.loader`` since 2005, it has been removed without emitting a warning due to the length of the deprecation. If your code still referenced this please use ``django.template.loader`` instead."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:879
#: ../../releases/1.4-beta-1.txt:947
# b61f256e560e40c296a5b36cd53e5b6d
# 4a7a4e9bf9fc41d4b7e77ad9c2fa84db
msgid "The ``open`` method of the base Storage class took an obscure parameter ``mixin`` which allowed you to dynamically change the base classes of the returned file object. This has been removed. In the rare case you relied on the ``mixin`` parameter, you can easily achieve the same by overriding the ``open`` method, e.g.::"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:905
#: ../../releases/1.4-beta-1.txt:973
# 2544126ba03b41ddafa89f2f605d3cc4
# 2c9cff08f9964bb2a6a3f1101d4c41b1
msgid "``yaml.load`` is able to construct any Python object, which may trigger arbitrary code execution if you process a YAML document that comes from an untrusted source. This feature isn't necessary for Django's YAML deserializer, whose primary use is to load fixtures consisting of simple objects. Even though fixtures are trusted data, for additional security, the YAML deserializer now uses ``yaml.safe_load``."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:918
#: ../../releases/1.4-beta-1.txt:986
# 3c736d353df841418209f04f361a3bea
# 722d5641aba144ac97ed7267bbf454fe
msgid "Some legacy ways of calling :func:`~django.views.decorators.cache.cache_page` have been deprecated, please see the docs for the correct way to use this decorator."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:925
#: ../../releases/1.4-beta-1.txt:993
# 6a7a5621ebb54fc4b2b64f6ec48df54e
# 4af1d48de6bb48c0b40905d3b5d44554
msgid "Django 1.3 dropped support for PostgreSQL versions older than 8.0 and the relevant documents suggested to use a recent version because of performance reasons but more importantly because end of the upstream support periods for releases 8.0 and 8.1 was near (November 2010)."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:936
#: ../../releases/1.4-beta-1.txt:1004
# b41854e8f6734f9d9dec5d6600f4a50f
# 0d76f9ca67674c27af7c82f7ead44dab
msgid "When :doc:`logging support </topics/logging/>` was added to Django in 1.3, the admin error email support was moved into the :class:`django.utils.log.AdminEmailHandler`, attached to the ``'django.request'`` logger. In order to maintain the established behavior of error emails, the ``'django.request'`` logger was called only when :setting:`DEBUG` was ``False``."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:962
#: ../../releases/1.4-beta-1.txt:1030
# 1e554f6c343f4bb28f05ee5da7ec5ffd
# dacd63c49797481f9c2725c323073a38
msgid "If your project was created prior to this change, your :setting:`LOGGING` setting will not include this new filter. In order to maintain backwards-compatibility, Django will detect that your ``'mail_admins'`` handler configuration includes no ``'filters'`` section, and will automatically add this filter for you and issue a pending-deprecation warning. This will become a deprecation warning in Django 1.5, and in Django 1.6 the backwards-compatibility shim will be removed entirely."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:976
#: ../../releases/1.4-beta-1.txt:1044
# 3555f19286db461186d49f4cf9fa65c3
# dadc7470613a4cb5b71c37d009cea87f
msgid "Until Django 1.3 the functions :func:`~django.conf.urls.include`, :func:`~django.conf.urls.patterns` and :func:`~django.conf.urls.url` plus :data:`~django.conf.urls.handler404`, :data:`~django.conf.urls.handler500` were located in a ``django.conf.urls.defaults`` module."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:981
#: ../../releases/1.4-beta-1.txt:1049
# 49275ae2b29d48e3be7143349f2ee184
# 97904832bdfa4f1ebc97ea14dd511a9a
msgid "Starting with Django 1.4 they are now available in :mod:`django.conf.urls`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:994
#: ../../releases/1.4-beta-1.txt:1062
# c993db9fa1524cd181849f79ae624cab
# 4f1b48cb94504a59ae33a18fb38c19fd
msgid "The code that powers Databrowse is licensed under the same terms as Django itself, and so is available to be adopted by an individual or group as a third-party project."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1006
#: ../../releases/1.4-beta-1.txt:1074
# 2e1aa166c4974b6f8b8301c97ce33e9b
# a881696b502149c9a1f135d9078cf5be
msgid "This function was never documented or part of the public API, but was widely recommended for use in setting up a \"Django environment\" for a user script. These uses should be replaced by setting the ``DJANGO_SETTINGS_MODULE`` environment variable or using :func:`django.conf.settings.configure`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1048
# 81296baa79914c1c82393884f337bf32
msgid "Session cookies now include the ``httponly`` attribute by default to help reduce the impact of potential XSS attacks. For strict backwards compatibility, use ``SESSION_COOKIE_HTTPONLY = False`` in your settings file."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1074
#: ../../releases/1.4-beta-1.txt:1146
# 92736094af4d4a5aa6ad71a7f62636d8
# 60afe38801bf43209ea33129bd840dab
msgid "The Django 1.4 roadmap"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1076
#: ../../releases/1.4-beta-1.txt:1148
# ae58437cc68341248c6b41f2ea74af44
# 841bbbe76ede480ca0b3ce95f74bf028
msgid "Before the final Django 1.4 release, several other preview/development releases will be made available. The current schedule consists of at least the following:"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1079
# 2494615da0074a26bb1331a3ca56c121
msgid "Week of **January 30, 2012**: First Django 1.4 beta release; final feature freeze for Django 1.4."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1082
#: ../../releases/1.4-beta-1.txt:1154
# 6213c01c8f58488cbd8525a9eae3d5fd
# 080e7b6a4afe4be2a013cb13fa491199
msgid "Week of **February 27, 2012**: First Django 1.4 release candidate; string freeze for translations."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1085
#: ../../releases/1.4-beta-1.txt:1157
# 674facd5743048659e97877e7d17df18
# e83ae3fc360241509e911a1c9f7785d2
msgid "Week of **March 5, 2012**: Django 1.4 final release."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1087
#: ../../releases/1.4-beta-1.txt:1159
# bc317feadf23482783fc37707e8903b0
# dd00b4cbcd074caa92f453e6e4fc0d9f
msgid "If necessary, additional alpha, beta or release-candidate packages will be issued prior to the final 1.4 release. Django 1.4 will be released approximately one week after the final release candidate."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1094
# d509876236fc4f268517bb8e4ca5e29e
msgid "In order to provide a high-quality 1.4 release, we need your help. Although this alpha release is, again, *not* intended for production use, you can help the Django team by trying out the alpha codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1123
#: ../../releases/1.4-beta-1.txt:1195
# 0ec897c9aab14308a403f3112a2c1d46
# a97c7c91883a4d89a3f5ec43c2528c1e
msgid "Several development sprints will also be taking place before the 1.4 release; these will typically be announced in advance on the django-developers mailing list, and anyone who wants to help is welcome to join in."
msgstr ""

#: ../../releases/1.4-beta-1.txt:3
# a6f541f463e44e7f84ff04d90830bf68
msgid "Django 1.4 beta release notes"
msgstr ""

#: ../../releases/1.4-beta-1.txt:5
# 3be3db9be3c44cf4a0b4e2cc9d83f159
msgid "February 15, 2012."
msgstr ""

#: ../../releases/1.4-beta-1.txt:7
# fdfd8dc0a18841558c5854c32b2e6a1c
msgid "Welcome to Django 1.4 beta!"
msgstr ""

#: ../../releases/1.4-beta-1.txt:9
# f02846ceb80b41c79e969f5fed1e8cd0
msgid "This is the second in a series of preview/development releases leading up to the eventual release of Django 1.4, scheduled for March 2012. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.4 release."
msgstr ""

#: ../../releases/1.4-beta-1.txt:18
# 51a241a63c2a48fc94975d78c192bd39
msgid "Django 1.4 beta includes various `new features`_ and some minor `backwards incompatible changes`_. There are also some features that have been dropped, which are detailed in :doc:`our deprecation plan </internals/deprecation>`, and we've `begun the deprecation process for some features`_."
msgstr ""

#: ../../releases/1.4-beta-1.txt:29
# 378d5840a24746b081ae41a4563e8d10
msgid "Version numbering"
msgstr ""

#: ../../releases/1.4-beta-1.txt:31
# ad24187a1cc149e182017e4cadf5bbf3
msgid "Internally, Django's version number is represented by the tuple ``django.VERSION``. This is used to generate human-readable version number strings; as of Django 1.4 beta 1, the algorithm for generating these strings has been changed to match the recommendations of :pep:`386`. This only affects the human-readable strings identifying Django alphas, betas and release candidates, and should not affect end users in any way."
msgstr ""

#: ../../releases/1.4-beta-1.txt:38
# f4f23846f5934ab78caa1ccfa6f82c1a
msgid "For example purposes, the old algorithm would give Django 1.4 beta 1 a version string of the form \"1.4 beta 1\". The new algorithm generates the version string \"1.4b1\"."
msgstr ""

#: ../../releases/1.4-beta-1.txt:135
# 7c3fbade46244dbdbe3ae75de9c77238
msgid "Django 1.4 alpha contained a bug that corrupted PBKDF2 hashes. To determine which accounts are affected, run :djadmin:`manage.py shell <shell>` and paste this snippet::"
msgstr ""

#: ../../releases/1.4-beta-1.txt:147
# 54a58e59843340c89374be1177c8a9dc
msgid "These users should reset their passwords."
msgstr ""

#: ../../releases/1.4-beta-1.txt:218
# 8b41a75a161847b89949256699050476
msgid "Session data is signed and validated by the server, but is not encrypted.  This means that a user can view any data stored in the session, but cannot change it. Please read the documentation for further clarification before using this backend."
msgstr ""

#: ../../releases/1.4-beta-1.txt:618
# 389dc1aaf18c45ca9d3a1a44344e32de
msgid "New phrases added to ``HIDDEN_SETTINGS`` regex in `django/views/debug.py`_."
msgstr ""

#: ../../releases/1.4-beta-1.txt:620
# 7a69eaa546264bedb94038371c274e32
msgid "``'API'``, ``'TOKEN'``, ``'KEY'`` were added, ``'PASSWORD'`` was changed to ``'PASS'``."
msgstr ""

#: ../../releases/1.4-beta-1.txt:1116
# 822e132358794696bb48e9228f77bdbd
msgid "Session cookies now include the ``httponly`` attribute by default to help reduce the impact of potential XSS attacks. As a consequence of this change, session cookie data, including sessionid, is no longer accessible from Javascript in many browsers. For strict backwards compatibility, use ``SESSION_COOKIE_HTTPONLY = False`` in your settings file."
msgstr ""

#: ../../releases/1.4-beta-1.txt:1151
# 579b482adaa94acfbf6f532ca3f0a321
msgid "Week of **January 13, 2012**: First Django 1.4 beta release; final feature freeze for Django 1.4."
msgstr ""

#: ../../releases/1.4-beta-1.txt:1166
# c2d986e05000492e9eba93231ee1d080
msgid "In order to provide a high-quality 1.4 release, we need your help. Although this beta release is, again, *not* intended for production use, you can help the Django team by trying out the beta codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.4-beta-1.txt:1177
# 2e0e06c2e2f0484abacd16d019063948
msgid "Additionally, discussion of Django development, including progress toward the 1.4 release, takes place daily on the django-developers mailing list:"
msgstr ""

#: ../../releases/1.4.1.txt:3
# f833ef29318e425aaa2c96c6b343158c
msgid "Django 1.4.1 release notes"
msgstr ""

#: ../../releases/1.4.1.txt:7
# e574515b5e0a43358683a5f83dcad48f
msgid "This is the first security release in the Django 1.4 series, fixing several security issues in Django 1.4. Django 1.4.1 is a recommended upgrade for all users of Django 1.4."
msgstr ""

#: ../../releases/1.4.2.txt:3
# 6d8e03dc2be2422e993fc26713655c31
msgid "Django 1.4.2 release notes"
msgstr ""

#: ../../releases/1.4.2.txt:7
# fc570051a06b4e87987c10d4fa3b24d1
msgid "This is the second security release in the Django 1.4 series."
msgstr ""

#: ../../releases/1.4.2.txt:42
# d05962311d7c4281b294bdeb4e2918ff
msgid "The newly introduced :class:`~django.db.models.GenericIPAddressField` constructor arguments have been adapted to match those of all other model fields. The first two keyword arguments are now verbose_name and name."
msgstr ""

#: ../../releases/1.4.2.txt:47
#: ../../releases/1.4.4.txt:83
# bd4e746dfc2743e9adc31894373f05f6
# 13ab0320ceaa447483da35da4ad67a6c
msgid "Other bugfixes and changes"
msgstr ""

#: ../../releases/1.4.2.txt:49
# ee8a46964df3455e8daa81d970eac730
msgid "Subclass HTMLParser only for appropriate Python versions (#18239)."
msgstr ""

#: ../../releases/1.4.2.txt:50
# 50314e574bb8489584b825245604d3ff
msgid "Added batch_size argument to qs.bulk_create() (#17788)."
msgstr ""

#: ../../releases/1.4.2.txt:51
# 0df45f8dcbe74d04883e77ddfc7def67
msgid "Fixed a small regression in the admin filters where wrongly formatted dates passed as url parameters caused an unhandled ValidationError (#18530)."
msgstr ""

#: ../../releases/1.4.2.txt:52
# a93cd3d8a8b04ecbaf2fae0bf257aa1a
msgid "Fixed an endless loop bug when accessing permissions in templates (#18979)"
msgstr ""

#: ../../releases/1.4.2.txt:53
# 2e2adc0fb3134222a023ad75aa99875d
msgid "Fixed some Python 2.5 compatibility issues"
msgstr ""

#: ../../releases/1.4.2.txt:54
# 54141ea9023e40ad849d44dbf1410421
msgid "Fixed an issue with quoted filenames in Content-Disposition header (#19006)"
msgstr ""

#: ../../releases/1.4.2.txt:55
# 9e26afacb5db474cbaa70108c57d4444
msgid "Made the context option in ``trans`` and ``blocktrans`` tags accept literals wrapped in single quotes (#18881)."
msgstr ""

#: ../../releases/1.4.2.txt:56
#: ../../releases/1.4.4.txt:88
# 3bed44720e7b4f1fb35a5270bd996026
# f2eaee67240849dbb68a436c5840d315
msgid "Numerous documentation improvements and fixes."
msgstr ""

#: ../../releases/1.4.3.txt:3
# 36352d3252304b6987718c14869eda8d
msgid "Django 1.4.3 release notes"
msgstr ""

#: ../../releases/1.4.3.txt:7
# 9f25f73e1dcc4dada2b612611f5f3293
msgid "Django 1.4.3 addresses two security issues present in previous Django releases in the 1.4 series."
msgstr ""

#: ../../releases/1.4.4.txt:3
# d8a10c6e1ee34f3e8394c86f8181d09c
msgid "Django 1.4.4 release notes"
msgstr ""

#: ../../releases/1.4.4.txt:7
# bd287869473c4dad8fef5fda1ec5b265
msgid "Django 1.4.4 fixes four security issues present in previous Django releases in the 1.4 series, as well as several other bugs and numerous documentation improvements."
msgstr ""

#: ../../releases/1.4.4.txt:11
# cec5bef6c2a6471897540d6c512cc84b
msgid "This is the fourth bugfix/security release in the Django 1.4 series."
msgstr ""

#: ../../releases/1.4.4.txt:26
# bbc07a6e27d84803b7d29568ffe0f6a5
msgid "For this reason, Django 1.4.4 adds a new setting, ``ALLOWED_HOSTS``, containing an explicit list of valid host/domain names for this site. A request with a Host header not matching an entry in this list will raise ``SuspiciousOperation`` if ``request.get_host()`` is called. For full details see the documentation for the :setting:`ALLOWED_HOSTS` setting."
msgstr ""

#: ../../releases/1.4.4.txt:32
# f9d0535a355d41c994587097a0bcf997
msgid "The default value for this setting in Django 1.4.4 is ``['*']`` (matching any host), for backwards-compatibility, but we strongly encourage all sites to set a more restrictive value."
msgstr ""

#: ../../releases/1.4.4.txt:42
# 3275bf203fc048cab7c0e5cf5528a109
msgid "The XML parser in the Python standard library is vulnerable to a number of attacks via external entities and entity expansion. Django uses this parser for deserializing XML-formatted database fixtures. This deserializer is not intended for use with untrusted data, but in order to err on the side of safety in Django 1.4.4 the XML deserializer refuses to parse an XML document with a DTD (DOCTYPE definition), which closes off these attack avenues."
msgstr ""

#: ../../releases/1.4.4.txt:68
# 89ae609733324602a9354133dd59f3d5
msgid "In Django 1.4.4, all formsets have a strictly-enforced maximum number of forms (1000 by default, though it can be set higher via the ``max_num`` formset factory argument)."
msgstr ""

#: ../../releases/1.4.4.txt:76
# 0855d7ee875f4132a1cd494622b36601
msgid "In previous versions of Django, an admin user without change permission on a model could still view the unicode representation of instances via their admin history log. Django 1.4.4 now limits the admin history log view for an object to users with change permission for that model."
msgstr ""

#: ../../releases/1.4.4.txt:85
# 2e1b2a7f433d42b8b80f48ded3e135d5
msgid "Prevented transaction state from leaking from one request to the next (#19707)."
msgstr ""

#: ../../releases/1.4.4.txt:86
# 2472d65d44aa442fb05505a33f032100
msgid "Changed an SQL command syntax to be MySQL 4 compatible (#19702)."
msgstr ""

#: ../../releases/1.4.4.txt:87
# bbd8d7f6a9924b0a995b616aa6bdcca4
msgid "Added backwards-compatibility with old unsalted MD5 passwords (#18144)."
msgstr ""

#: ../../releases/1.4.5.txt:3
# 84bfab6d74f64257811915ba46cbfc09
msgid "Django 1.4.5 release notes"
msgstr ""

#: ../../releases/1.4.5.txt:7
# c5fac745a9894d4b84a012be8ea16bf5
msgid "Django 1.4.5 corrects a packaging problem with yesterday's :doc:`1.4.4 release </releases/1.4.4>`."
msgstr ""

#: ../../releases/1.4.6.txt:3
# d1190645bedf483f8c7133c0c647a2fc
msgid "Django 1.4.6 release notes"
msgstr ""

#: ../../releases/1.4.6.txt:5
#: ../../releases/1.5.2.txt:5
# be982f80a8e0468082895c8f84850acc
# b2bd4f3367c54822936c75a7e68705ca
msgid "*August 13, 2013*"
msgstr ""

#: ../../releases/1.4.6.txt:7
# 1658e775ef1445f09b19a9cb6f82bc3c
msgid "Django 1.4.6 fixes one security issue present in previous Django releases in the 1.4 series, as well as one other bug."
msgstr ""

#: ../../releases/1.4.6.txt:10
# 7541463cb79e48e1ba4bb13f22b182ad
msgid "This is the sixth bugfix/security release in the Django 1.4 series."
msgstr ""

#: ../../releases/1.4.6.txt:13
#: ../../releases/1.5.2.txt:10
# 54437ed47de3482eace9558c2a0b9da3
# a486b8620fbb4e2c8744a1c8791bdf37
msgid "Mitigated possible XSS attack via user-supplied redirect URLs"
msgstr ""

#: ../../releases/1.4.6.txt:15
#: ../../releases/1.5.2.txt:12
# 0dabb950cd7f4e829965b2fd48cd69d7
# 6644d6d0046e4bd1a28c0e870c98b2e9
msgid "Django relies on user input in some cases (e.g. :func:`django.contrib.auth.views.login`, :mod:`django.contrib.comments`, and :doc:`i18n </topics/i18n/index>`) to redirect the user to an \"on success\" URL. The security checks for these redirects (namely ``django.util.http.is_safe_url()``) didn't check if the scheme is ``http(s)`` and as such allowed ``javascript:...`` URLs to be entered. If a developer relied on ``is_safe_url()`` to provide safe redirect targets and put such a URL into a link, he could suffer from a XSS attack. This bug doesn't affect Django currently, since we only put this URL into the ``Location`` response header and browsers seem to ignore JavaScript there."
msgstr ""

#: ../../releases/1.4.6.txt:27
#: ../../releases/1.4.9.txt:19
#: ../../releases/1.5.2.txt:31
#: ../../releases/1.5.4.txt:35
#: ../../releases/1.5.5.txt:25
# 187ac7ccea0440f7a22fc7ce972e03bb
# 2b4852aad05e41f1bed45048d1c22050
# 1e39970ea6634079b71648bce4bcb971
# 623ac6c3815f4756af5a7ec772dbaa29
# caf7c245739e43e0b80ef48c198d6331
msgid "Bugfixes"
msgstr ""

#: ../../releases/1.4.6.txt:29
#: ../../releases/1.5.2.txt:60
# 7e5ebb6dd5264cfd9243b89a5160dd93
# bc397d68d9e64d658e58537231b28a2b
msgid "Fixed an obscure bug with the :func:`~django.test.utils.override_settings` decorator. If you hit an ``AttributeError: 'Settings' object has no attribute '_original_allowed_hosts'`` exception, it's probably fixed (#20636)."
msgstr ""

#: ../../releases/1.4.7.txt:3
# 5c9a99923bc8427fa48f99f5033a99fa
msgid "Django 1.4.7 release notes"
msgstr ""

#: ../../releases/1.4.7.txt:5
#: ../../releases/1.5.3.txt:5
# ad93848f28ef4a519af66fef2d602a72
# 596e1e30553045a1a26cc48f2cb0d581
msgid "*September 10, 2013*"
msgstr ""

#: ../../releases/1.4.7.txt:7
# 7df4b11686e84bc4a8cd3b52ea6e83e6
msgid "Django 1.4.7 fixes one security issue present in previous Django releases in the 1.4 series."
msgstr ""

#: ../../releases/1.4.7.txt:11
#: ../../releases/1.5.3.txt:12
# 734c2db69c3e4688b71a181f17e83666
# 1834e648a9a34586beca701d3d5a05a3
msgid "Directory traversal vulnerability in :ttag:`ssi` template tag"
msgstr ""

#: ../../releases/1.4.7.txt:13
#: ../../releases/1.5.3.txt:14
# 39d778870d9643d89136cda3106e7a8a
# b8fd50558cf14dea8d734deffda37675
msgid "In previous versions of Django it was possible to bypass the :setting:`ALLOWED_INCLUDE_ROOTS` setting used for security with the :ttag:`ssi` template tag by specifying a relative path that starts with one of the allowed roots. For example, if ``ALLOWED_INCLUDE_ROOTS = (\"/var/www\",)`` the following would be possible:"
msgstr ""

#: ../../releases/1.4.7.txt:23
#: ../../releases/1.5.3.txt:24
# d246fe7097c649fa95d4c58fa9d3a95a
# 14a61d4da7144019896e09939adee522
msgid "In practice this is not a very common problem, as it would require the template author to put the :ttag:`ssi` file in a user-controlled variable, but it's possible in principle."
msgstr ""

#: ../../releases/1.4.8.txt:3
# cf7a61a9261d436a958f53b64805ec6d
msgid "Django 1.4.8 release notes"
msgstr ""

#: ../../releases/1.4.8.txt:5
#: ../../releases/1.5.4.txt:5
# 9c7eee6b18e1460c9b67306a0980b7e3
# 90a9b491b2b54565a52fd4033e30953d
msgid "*September 14, 2013*"
msgstr ""

#: ../../releases/1.4.8.txt:7
# 1f5557e9a7db4d779f386133d5318c99
msgid "Django 1.4.8 fixes two security issues present in previous Django releases in the 1.4 series."
msgstr ""

#: ../../releases/1.4.8.txt:11
#: ../../releases/1.5.4.txt:11
# 638aaee11525435aa57b69a46bf2d814
# 970bdfc9397a42cca7111dc92395c9ff
msgid "Denial-of-service via password hashers"
msgstr ""

#: ../../releases/1.4.8.txt:13
#: ../../releases/1.5.4.txt:13
# d17cfcab1c9349848d13ea62e2ee3672
# 85da3dc502414e39b2dc41803bdc01f2
msgid "In previous versions of Django, no limit was imposed on the plaintext length of a password. This allowed a denial-of-service attack through submission of bogus but extremely large passwords, tying up server resources performing the (expensive, and increasingly expensive with the length of the password) calculation of the corresponding hash."
msgstr ""

#: ../../releases/1.4.8.txt:19
# af708da5299e42aba683cc1b35716707
msgid "As of 1.4.8, Django's authentication framework imposes a 4096-byte limit on passwords and will fail authentication with any submitted password of greater length."
msgstr ""

#: ../../releases/1.4.8.txt:24
#: ../../releases/1.5.4.txt:24
# c8753b5571b0459d89d95e79dab73da4
# 6c0221f2eed249b687b3b24516ece062
msgid "Corrected usage of :func:`~django.views.decorators.debug.sensitive_post_parameters` in :mod:`django.contrib.auth`’s admin"
msgstr ""

#: ../../releases/1.4.8.txt:26
#: ../../releases/1.5.4.txt:26
# c2acf3334de04a87afab307a0c3fdff3
# dbd72390467948aaabfac0439f98bebb
msgid "The decoration of the ``add_view`` and ``user_change_password`` user admin views with :func:`~django.views.decorators.debug.sensitive_post_parameters` did not include :func:`~django.utils.decorators.method_decorator` (required since the views are methods) resulting in the decorator not being properly applied. This usage has been fixed and :func:`~django.views.decorators.debug.sensitive_post_parameters` will now throw an exception if it's improperly used."
msgstr ""

#: ../../releases/1.4.9.txt:3
# f50a1128c4cc4bf691d0f31e57c1d19d
msgid "Django 1.4.9 release notes"
msgstr ""

#: ../../releases/1.4.9.txt:5
#: ../../releases/1.5.5.txt:5
# 8cebff27a7834097bec7f8d1f7637f52
# 0c8ef62efd924963ba5d4f33b640785e
msgid "*October 23, 2013*"
msgstr ""

#: ../../releases/1.4.9.txt:7
# d4e40206467a4af88a8cd39e49c4b550
msgid "Django 1.4.9 fixes a security-related bug in the 1.4 series and one other data corruption bug."
msgstr ""

#: ../../releases/1.4.9.txt:11
#: ../../releases/1.5.5.txt:11
# 0756ef25ff5c4eaaa1a9baa82b9ae0f9
# ac43f169a7034638bd1c66f84ac2b40c
msgid "Readdressed denial-of-service via password hashers"
msgstr ""

#: ../../releases/1.4.9.txt:13
# c45b673ccf3f42f9a76bc2ad1037578d
msgid "Django 1.4.8 imposes a 4096-byte limit on passwords in order to mitigate a denial-of-service attack through submission of bogus but extremely large passwords. In Django 1.4.9, we've reverted this change and instead improved the speed of our PBKDF2 algorithm by not rehashing the key on every iteration."
msgstr ""

#: ../../releases/1.4.9.txt:21
#: ../../releases/1.5.5.txt:27
# 9999711421de48b38d044535ef4bee23
# f8f72c4c807844ec9a514ee2e59b98f6
msgid "Fixed a data corruption bug with ``datetime_safe.datetime.combine`` (#21256)."
msgstr ""

#: ../../releases/1.5.txt:3
# c15c8a0196f74aaab045f706a1d511a8
msgid "Django 1.5 release notes"
msgstr ""

#: ../../releases/1.5.txt:5
# 2b85b718f7bf4770a031c6b4cf131fe5
msgid "*February 26, 2013*"
msgstr ""

#: ../../releases/1.5.txt:7
# a0dc72380ee344058fd28ba0c3858190
msgid "Welcome to Django 1.5!"
msgstr ""

#: ../../releases/1.5.txt:9
#: ../../releases/1.5-beta-1.txt:18
# b04e85714db14c5e9eb08a2d353c56e2
# d9d8b5c8fc024677b380815dcbf5650c
msgid "These release notes cover the `new features`_, as well as some `backwards incompatible changes`_ you'll want to be aware of when upgrading from Django 1.4 or older versions. We've also dropped some features, which are detailed in :doc:`our deprecation plan </internals/deprecation>`, and we've `begun the deprecation process for some features`_."
msgstr ""

#: ../../releases/1.5.txt:23
#: ../../releases/1.5-alpha-1.txt:36
#: ../../releases/1.5-beta-1.txt:32
# 95f5ce2418ed4f37b63a4053a95ca31f
# aa63517245684b6bb9410fc467e0ff40
# c99c0761578a43418157dba81fb2a0d4
msgid "The biggest new feature in Django 1.5 is the `configurable User model`_. Before Django 1.5, applications that wanted to use Django's auth framework (:mod:`django.contrib.auth`) were forced to use Django's definition of a \"user\". In Django 1.5, you can now swap out the ``User`` model for one that you write yourself. This could be a simple extension to the existing ``User`` model -- for example, you could add a Twitter or Facebook ID field -- or you could completely replace the ``User`` with one totally customized for your site."
msgstr ""

#: ../../releases/1.5.txt:31
#: ../../releases/1.5-alpha-1.txt:44
#: ../../releases/1.5-beta-1.txt:40
# ed5b29c1c1f94af79f4c0f76e46f3209
# e7025066055e459185e67b59c3ee6779
# bf3d8f74697b4fcabd3d1a10248846ca
msgid "Django 1.5 is also the first release with `Python 3 support`_! We're labeling this support \"experimental\" because we don't yet consider it production-ready, but everything's in place for you to start porting your apps to Python 3. Our next release, Django 1.6, will support Python 3 without reservations."
msgstr ""

#: ../../releases/1.5.txt:36
#: ../../releases/1.5-alpha-1.txt:49
#: ../../releases/1.5-beta-1.txt:45
# 83aad8e3377d4d7baac78ac5148821ed
# ec6f8fda88df4f38a875a8a62cecdb15
# 6baa2e210167465d85f381cb0c768737
msgid "Other notable new features in Django 1.5 include:"
msgstr ""

#: ../../releases/1.5.txt:38
#: ../../releases/1.5-alpha-1.txt:51
#: ../../releases/1.5-beta-1.txt:47
# 668de8948a624532826f6cad8a34f6fc
# 22370fe7d041499fb985dea0ce8a7360
# 8ab78447bf4a4988a6be949649a00d78
msgid "`Support for saving a subset of model's fields`_ - :meth:`Model.save() <django.db.models.Model.save()>` now accepts an ``update_fields`` argument, letting you specify which fields are written back to the database when you call ``save()``. This can help in high-concurrency operations, and can improve performance."
msgstr ""

#: ../../releases/1.5.txt:44
#: ../../releases/1.5-alpha-1.txt:57
# 5a5a39456ca24ccab8c8389b69c06215
# d608f0175e7642038d810945a44eafcc
msgid "Better `support for streaming responses <#explicit-streaming-responses>`_ via the new  :class:`~django.http.StreamingHttpResponse` response class."
msgstr ""

#: ../../releases/1.5.txt:47
#: ../../releases/1.5-alpha-1.txt:60
#: ../../releases/1.5-beta-1.txt:56
# b986c94dd93f4cf5a0e65d1b0688ad16
# 1d0c5c1b9ae348ddb721e03494c43120
# 53abf1c5e4864ecc9256b7cf1277ec9a
msgid "`GeoDjango`_ now supports PostGIS 2.0."
msgstr ""

#: ../../releases/1.5.txt:49
#: ../../releases/1.5-alpha-1.txt:62
#: ../../releases/1.5-beta-1.txt:58
# 1dac766f83254624b460eb4d58b3f494
# ceb2b80a40a246ac822341b9c01270be
# a39c47f10bbc4cb1bd0d41ecfdbf54c3
msgid "... and more; `see below <#what-s-new-in-django-1-5>`_."
msgstr ""

#: ../../releases/1.5.txt:51
#: ../../releases/1.5-beta-1.txt:60
# 3ac35a1617f449f09a04751a0f586509
# a9337ffe423143ae805ad93efbb4a0bb
msgid "Wherever possible we try to introduce new features in a backwards-compatible manner per :doc:`our API stability policy </misc/api-stability>`. However, as with previous releases, Django 1.5 ships with some minor `backwards incompatible changes`_; people upgrading from previous versions of Django should read that list carefully."
msgstr ""

#: ../../releases/1.5.txt:57
#: ../../releases/1.5-alpha-1.txt:70
#: ../../releases/1.5-beta-1.txt:66
# 718765a2fecf44519f15d152e144963f
# 77a6c60c98e043a898756cc4194fb632
# 17cecfb950974e3a91a56f7ac3d0083a
msgid "One deprecated feature worth noting is the shift to \"new-style\" :ttag:`url` tag. Prior to Django 1.3, syntax like ``{% url myview %}`` was interpreted incorrectly (Django considered ``\"myview\"`` to be a literal name of a view, not a template variable named ``myview``). Django 1.3 and above introduced the ``{% load url from future %}`` syntax to bring in the corrected behavior where ``myview`` was seen as a variable."
msgstr ""

#: ../../releases/1.5.txt:64
#: ../../releases/1.5-alpha-1.txt:77
#: ../../releases/1.5-beta-1.txt:73
# c069f927772440dbac87ea65ea3bf5f7
# f6718d80047f4f7e8031492c36fbf017
# 318f14ff54a446119e7eeca4ca216c4f
msgid "The upshot of this is that if you are not using ``{% load url from future %}`` in your templates, you'll need to change tags like ``{% url myview %}`` to ``{% url \"myview\" %}``. If you *were* using ``{% load url from future %}`` you can simply remove that line under Django 1.5"
msgstr ""

#: ../../releases/1.5.txt:72
#: ../../releases/1.5-beta-1.txt:81
# 77e46cf9b82b445e9d3fed9a42d82b1e
# 32e513b3b86d419cab1faf1fe480dbce
msgid "Django 1.5 requires Python 2.6.5 or above, though we **highly recommend** Python 2.7.3 or above. Support for Python 2.5 and below has been dropped."
msgstr ""

#: ../../releases/1.5.txt:75
#: ../../releases/1.5-alpha-1.txt:88
#: ../../releases/1.5-beta-1.txt:84
# 7fe5a4097d8f49489e61420f42afa8bd
# 72cf5e40796d4a42a89d8c249109c391
# d6203fe236fe48c188915220233d6100
msgid "This change should affect only a small number of Django users, as most operating-system vendors today are shipping Python 2.6 or newer as their default version. If you're still using Python 2.5, however, you'll need to stick to Django 1.4 until you can upgrade your Python version. Per :doc:`our support policy </internals/release-process>`, Django 1.4 will continue to receive security support until the release of Django 1.6."
msgstr ""

#: ../../releases/1.5.txt:82
#: ../../releases/1.5-alpha-1.txt:95
#: ../../releases/1.5-beta-1.txt:91
# 737d695d93374b3b8ae92433fd8e021f
# 5cc839eee36541d9ac43c9cc40f21183
# 28fde2f580534b72bed4b5b0ac5b2b70
msgid "Django 1.5 does not run on a Jython final release, because Jython's latest release doesn't currently support Python 2.6. However, Jython currently does offer an alpha release featuring 2.7 support, and Django 1.5 supports that alpha release."
msgstr ""

#: ../../releases/1.5.txt:88
#: ../../releases/1.5-alpha-1.txt:101
#: ../../releases/1.5-beta-1.txt:97
# fe45e89ac3ad48c99892ffd6b789271e
# 474b48dadebb41209aad21d577ff02d8
# 0715f3b9ebcc49e4bacfdf04afb2d17c
msgid "Python 3 support"
msgstr ""

#: ../../releases/1.5.txt:90
#: ../../releases/1.5-beta-1.txt:99
# db73cccd679945bc9d015829f5b7de81
# 7dfe01fb5f304776a3e10ab8661503ca
msgid "Django 1.5 introduces support for Python 3 - specifically, Python 3.2 and above. This comes in the form of a **single** codebase; you don't need to install a different version of Django on Python 3. This means that you can write applications targeted for just Python 2, just Python 3, or single applications that support both platforms."
msgstr ""

#: ../../releases/1.5.txt:96
# 60b04d6d4274450c8a996bdcd31380f9
msgid "However, we're labeling this support \"experimental\" for now: although it's received extensive testing via our automated test suite, it's received very little real-world testing. We've done our best to eliminate bugs, but we can't be sure we covered all possible uses of Django."
msgstr ""

#: ../../releases/1.5.txt:101
# 2ce369050c5c49978c0381ced99a4603
msgid "Some features of Django aren't available because they depend on third-party software that hasn't been ported to Python 3 yet, including:"
msgstr ""

#: ../../releases/1.5.txt:104
# 7ab5ba756f2e4a2fa85b95ed508c0f85
msgid "the MySQL database backend (depends on MySQLdb)"
msgstr ""

#: ../../releases/1.5.txt:105
# 5ff6309141ab40cbaa88beaa275415d6
msgid ":class:`~django.db.models.ImageField` (depends on PIL)"
msgstr ""

#: ../../releases/1.5.txt:106
# af7d4267a5e54d3880aea88cff7fcf3f
msgid ":class:`~django.test.LiveServerTestCase` (depends on Selenium WebDriver)"
msgstr ""

#: ../../releases/1.5.txt:108
# f5ee268d827144a5ba9ab4d46c516fc5
msgid "Further, Django's more than a web framework; it's an ecosystem of pluggable components. At this point, very few third-party applications have been ported to Python 3, so it's unlikely that a real-world application will have all its dependencies satisfied under Python 3."
msgstr ""

#: ../../releases/1.5.txt:113
#: ../../releases/1.5-alpha-1.txt:118
#: ../../releases/1.5-beta-1.txt:114
# 87a8374f44e24a27b2f491efd73f9e6a
# c9f70dc315fd4339a251d1bd16b3f7cc
# c6fcbc4c5ab3482eabf04ee9a0a44b85
msgid "Thus, we're recommending that Django 1.5 not be used in production under Python 3. Instead, use this opportunity to begin :doc:`porting applications to Python 3 </topics/python3>`. If you're an author of a pluggable component, we encourage you to start porting now."
msgstr ""

#: ../../releases/1.5.txt:118
#: ../../releases/1.5-alpha-1.txt:123
#: ../../releases/1.5-beta-1.txt:119
# f915421706c24fd9a6597a9897c0c3ea
# 549d4edc8f2c4d34b44e446ab7dabf7e
# 36b6fda218a040868a4855e55badc855
msgid "We plan to offer first-class, production-ready support for Python 3 in our next release, Django 1.6."
msgstr ""

#: ../../releases/1.5.txt:122
#: ../../releases/1.5-alpha-1.txt:127
#: ../../releases/1.5-beta-1.txt:123
# 571afd2363ad4603992c7a06ecac90fc
# 6e386b2efa7849ccae4b34eae6aac936
# cd03af87d450439f8dbdc2ea593127e9
msgid "What's new in Django 1.5"
msgstr ""

#: ../../releases/1.5.txt:125
#: ../../releases/1.5-alpha-1.txt:130
#: ../../releases/1.5-beta-1.txt:126
# 7640e1ae3ec14b8ebd88b6cdd89d549c
# 22c8045cc831495b82b72ef3580e050a
# 78cf4de9ead04d978066cd8d8b6d295b
msgid "Configurable User model"
msgstr ""

#: ../../releases/1.5.txt:127
#: ../../releases/1.5-beta-1.txt:128
# 70b73d5135354f21957220d21ae7cd0b
# 115384a0da9a44d3b51c11452e87dd08
msgid "In Django 1.5, you can now use your own model as the store for user-related data. If your project needs a username with more than 30 characters, or if you want to store user's names in a format other than first name/last name, or you want to put custom profile information onto your User object, you can now do so."
msgstr ""

#: ../../releases/1.5.txt:133
#: ../../releases/1.5-alpha-1.txt:138
#: ../../releases/1.5-beta-1.txt:134
# 2336f5a68f86445e8d088dc968360fcf
# c3b114cc25d042d892b7df4d3fb3ec4d
# 63af15f65ff94c0685a280ff708b9b6a
msgid "If you have a third-party reusable application that references the User model, you may need to make some changes to the way you reference User instances. You should also document any specific features of the User model that your application relies upon."
msgstr ""

#: ../../releases/1.5.txt:138
#: ../../releases/1.5-alpha-1.txt:143
#: ../../releases/1.5-beta-1.txt:139
# 0754e180322a491fb52945716559ac87
# db36acb2414e49e3848e8840643d6d1f
# 6ba6d34742c2437b8c6a8381bd342fc1
msgid "See the :ref:`documentation on custom User models <auth-custom-user>` for more details."
msgstr ""

#: ../../releases/1.5.txt:142
#: ../../releases/1.5-alpha-1.txt:147
#: ../../releases/1.5-beta-1.txt:143
# 5ffbde272bd749d389b0adf7dad83d44
# c25d81dafc2c43779082297a146b0085
# 6b9a1329b8d54a1a8530e928d4547570
msgid "Support for saving a subset of model's fields"
msgstr ""

#: ../../releases/1.5.txt:144
#: ../../releases/1.5-alpha-1.txt:149
#: ../../releases/1.5-beta-1.txt:145
# e8fce2e3ab3b4165a3f1be5d9d47a952
# 488f84029845437bb38cf69cf6c09271
# 4b67ae83036f4d9ea0d34af0477f1ac6
msgid "The method :meth:`Model.save() <django.db.models.Model.save()>` has a new keyword argument ``update_fields``. By using this argument it is possible to save only a select list of model's fields. This can be useful for performance reasons or when trying to avoid overwriting concurrent changes."
msgstr ""

#: ../../releases/1.5.txt:149
# df8828ebb1ec41b59995ffc345f18312
msgid "Deferred instances (those loaded by ``.only()`` or ``.defer()``) will automatically save just the loaded fields. If any field is set manually after load, that field will also get updated on save."
msgstr ""

#: ../../releases/1.5.txt:153
#: ../../releases/1.5-alpha-1.txt:158
#: ../../releases/1.5-beta-1.txt:154
# 79c0aec25edd455fb975f555e9fdbc22
# 5d3ae5257cd74e4f89b2943f3b17fd17
# f3bd015f46ed44099893793cfb3f22f7
msgid "See the :meth:`Model.save() <django.db.models.Model.save()>` documentation for more details."
msgstr ""

#: ../../releases/1.5.txt:157
#: ../../releases/1.5-alpha-1.txt:162
#: ../../releases/1.5-beta-1.txt:158
# 1d5c1fc7d4544f32a1675fe3bedb81ee
# 5110ac7460b44283b79d0eb77d3b6b7a
# 13e4356e860940ccac8b0d9ca0b61214
msgid "Caching of related model instances"
msgstr ""

#: ../../releases/1.5.txt:159
#: ../../releases/1.5-alpha-1.txt:164
#: ../../releases/1.5-beta-1.txt:160
# 3328655d69634b8995b7e7ef9fbbff1c
# 3c12cca0619f4d1aa5a5be37f46777f1
# 7c92ae23c50549e6bedb93b83b0d99f3
msgid "When traversing relations, the ORM will avoid re-fetching objects that were previously loaded. For example, with the tutorial's models::"
msgstr ""

#: ../../releases/1.5.txt:167
#: ../../releases/1.5-alpha-1.txt:172
#: ../../releases/1.5-beta-1.txt:168
# b4a59b1f8ea340358b93364f7e0c6496
# 296fdfbf7df5424abecf8b2d9fba1c29
# b613805259094faa80750a33d061dfbe
msgid "In Django 1.5, the third line no longer triggers a new SQL query to fetch ``first_choice.poll``; it was set by the second line."
msgstr ""

#: ../../releases/1.5.txt:170
#: ../../releases/1.5-alpha-1.txt:175
#: ../../releases/1.5-beta-1.txt:171
# 0005976db7c9407d8a8bba00542821f5
# abb0e3e5d7c44b62b2a02423da1cda45
# a81b58adb87a4f1f9e75b7eb35456950
msgid "For one-to-one relationships, both sides can be cached. For many-to-one relationships, only the single side of the relationship can be cached. This is particularly helpful in combination with ``prefetch_related``."
msgstr ""

#: ../../releases/1.5.txt:177
#: ../../releases/1.5-alpha-1.txt:180
#: ../../releases/1.5-beta-1.txt:178
# 76a15cd7714b458aba8131b33cb243da
# 06717965c8cd4e19b6cd0010946246ac
# b2bb4d3c9f1e492f8a5b2b54b76a27a4
msgid "Explicit support for streaming responses"
msgstr ""

#: ../../releases/1.5.txt:179
#: ../../releases/1.5-alpha-1.txt:182
#: ../../releases/1.5-beta-1.txt:180
# 4c97942cc67a4e31a0ad2f2828884189
# 5cbee8abf34c408a944d6cef62d2eb75
# d662123807a040e38a1844f760385795
msgid "Before Django 1.5, it was possible to create a streaming response by passing an iterator to :class:`~django.http.HttpResponse`. But this was unreliable: any middleware that accessed the :attr:`~django.http.HttpResponse.content` attribute would consume the iterator prematurely."
msgstr ""

#: ../../releases/1.5.txt:184
#: ../../releases/1.5-alpha-1.txt:187
#: ../../releases/1.5-beta-1.txt:185
# f3cf34cf2e1a4b459f5280528660f508
# e39e0662ea2a4b1b9342035a820e8383
# f8eb35bf86194943a4348249f7d4480b
msgid "You can now explicitly generate a streaming response with the new :class:`~django.http.StreamingHttpResponse` class. This class exposes a :class:`~django.http.StreamingHttpResponse.streaming_content` attribute which is an iterator."
msgstr ""

#: ../../releases/1.5.txt:189
#: ../../releases/1.5-alpha-1.txt:192
#: ../../releases/1.5-beta-1.txt:190
# f0baed3333f64801931b4d0a46e4f3c7
# d5b88564371042e2b083ef89d850f8bc
# be93addc28ef4d538bcd762d531c986a
msgid "Since :class:`~django.http.StreamingHttpResponse` does not have a ``content`` attribute, middleware that needs access to the response content must test for streaming responses and behave accordingly. See :ref:`response-middleware` for more information."
msgstr ""

#: ../../releases/1.5.txt:195
#: ../../releases/1.5-alpha-1.txt:198
#: ../../releases/1.5-beta-1.txt:196
# 000706a4aa204769b91541adfad22c81
# 48c14c0eea0549c8a2f0eb31e23c4282
# 5e1800302d7745db9008cd29b80544da
msgid "``{% verbatim %}`` template tag"
msgstr ""

#: ../../releases/1.5.txt:197
#: ../../releases/1.5-alpha-1.txt:200
#: ../../releases/1.5-beta-1.txt:198
# 7aa727d83a1c425db39d021b52744ff3
# 4fe75690677b4c1e91a0cc27a9f5427d
# a4a3c1d1d94040759e17a8781d7ac6d3
msgid "To make it easier to deal with javascript templates which collide with Django's syntax, you can now use the :ttag:`verbatim` block tag to avoid parsing the tag's content."
msgstr ""

#: ../../releases/1.5.txt:202
#: ../../releases/1.5-alpha-1.txt:205
#: ../../releases/1.5-beta-1.txt:203
# 5515bfb109df4fb8b6fb183c11bba010
# d09019ea855b4828a7b2000dd3ff4cf9
# 00154c0bc4294c2e856a003a3f3e997c
msgid "Retrieval of ``ContentType`` instances associated with proxy models"
msgstr ""

#: ../../releases/1.5.txt:204
#: ../../releases/1.5-alpha-1.txt:207
#: ../../releases/1.5-beta-1.txt:205
# 2c54a52c57414006bea91fe159c9c441
# 65b457ccf0d44298991114600a69800d
# 39c20395d96d4b9a9305c74abd76d9e1
msgid "The methods :meth:`ContentTypeManager.get_for_model() <django.contrib.contenttypes.models.ContentTypeManager.get_for_model()>` and :meth:`ContentTypeManager.get_for_models() <django.contrib.contenttypes.models.ContentTypeManager.get_for_models()>` have a new keyword argument – respectively ``for_concrete_model`` and ``for_concrete_models``. By passing ``False`` using this argument it is now possible to retrieve the :class:`ContentType <django.contrib.contenttypes.models.ContentType>` associated with proxy models."
msgstr ""

#: ../../releases/1.5.txt:212
#: ../../releases/1.5-alpha-1.txt:215
#: ../../releases/1.5-beta-1.txt:213
# 4f1314d333c242dba47fbcdded907c13
# 213b459c410843daad65437b1eded947
# 1cceab7478f44a26b10124634a09cd75
msgid "New ``view`` variable in class-based views context"
msgstr ""

#: ../../releases/1.5.txt:214
#: ../../releases/1.5-alpha-1.txt:217
#: ../../releases/1.5-beta-1.txt:215
# f39cb08bdd2c4655bfb05a73da68d300
# 22be0c1f94c045ac9f174f9f944dab56
# f80a3d2ace9d4a0ab73819f1728f0e36
msgid "In all :doc:`generic class-based views </topics/class-based-views/index>` (or any class-based view inheriting from ``ContextMixin``), the context dictionary contains a ``view`` variable that points to the ``View`` instance."
msgstr ""

#: ../../releases/1.5.txt:221
#: ../../releases/1.5-alpha-1.txt:224
#: ../../releases/1.5-beta-1.txt:222
# 393e9f1c5aa646a48452185d5654b9ec
# 569a05aa519141698f7cd4acf69d7196
# 742601a4e2164ee78abf4fd848b5c964
msgid ":class:`~django.contrib.gis.geos.LineString` and :class:`~django.contrib.gis.geos.MultiLineString` GEOS objects now support the :meth:`~django.contrib.gis.geos.GEOSGeometry.interpolate()` and :meth:`~django.contrib.gis.geos.GEOSGeometry.project()` methods (so-called linear referencing)."
msgstr ""

#: ../../releases/1.5.txt:227
#: ../../releases/1.5-alpha-1.txt:230
#: ../../releases/1.5-beta-1.txt:228
# 538bc3002ee64e4eaa296b23220807b2
# 9cb86b0b0a764567aea4ad705864db67
# ae91c012713944ed8c08998920b76f9f
msgid "The ``wkb`` and ``hex`` properties of :class:`~django.contrib.gis.geos.GEOSGeometry` objects preserve the Z dimension."
msgstr ""

#: ../../releases/1.5.txt:231
#: ../../releases/1.5-alpha-1.txt:234
#: ../../releases/1.5-beta-1.txt:232
# 79c83d4c6bdd4d6694d64550912fc579
# a799a09c29584f77a4e36dc2eee4c61e
# 1b8534cb397c407d990aab4c7e1bb814
msgid "Support for PostGIS 2.0 has been added and support for GDAL < 1.5 has been dropped."
msgstr ""

#: ../../releases/1.5.txt:235
# 9a8bc44566314a66a6b154562a48b5b5
msgid "New tutorials"
msgstr ""

#: ../../releases/1.5.txt:237
# 7bcc344fd68243d5b62886f72018483e
msgid "Additions to the docs include a revamped :doc:`Tutorial 3</intro/tutorial03>` and a new :doc:`tutorial on testing</intro/tutorial05>`. A new section, \"Advanced Tutorials\", offers :doc:`How to write reusable apps </intro/reusable-apps>` as well as a step-by-step guide for new contributors in :doc:`Writing your first patch for Django </intro/contributing>`."
msgstr ""

#: ../../releases/1.5.txt:246
#: ../../releases/1.5-alpha-1.txt:240
#: ../../releases/1.5-beta-1.txt:238
# 4d7f7210f2af4bddb3fa13ac0c5bd110
# 300c8d96afa7412d886155a828c0597a
# 44f7eb8a3a8f4e00a106e35cff6a054a
msgid "Django 1.5 also includes several smaller improvements worth noting:"
msgstr ""

#: ../../releases/1.5.txt:248
#: ../../releases/1.5-alpha-1.txt:242
#: ../../releases/1.5-beta-1.txt:240
# e75a5ce4e4f343cd80fad8bf48c9def7
# 49ea8291c8c14c2ab6cc6d8fb8577ffc
# b6d81569345f41ba9cbe15dfbe25b542
msgid "The template engine now interprets ``True``, ``False`` and ``None`` as the corresponding Python objects."
msgstr ""

#: ../../releases/1.5.txt:251
#: ../../releases/1.5-alpha-1.txt:245
#: ../../releases/1.5-beta-1.txt:243
# 289cb5a84c3a4990b36bfb6739e0c0ad
# 84cd206620c94b2e911bc819a0705163
# dd86907f36274f7191bf7cfcece6710d
msgid ":mod:`django.utils.timezone` provides a helper for converting aware datetimes between time zones. See :func:`~django.utils.timezone.localtime`."
msgstr ""

#: ../../releases/1.5.txt:254
#: ../../releases/1.5-alpha-1.txt:248
#: ../../releases/1.5-beta-1.txt:246
# 53d946beeb3845c08c5a4642408b4a5a
# 41eacb97dd974323a4c361cb06850b8c
# 4e2e3ba549cf4c9ab18e010cabbe2cc1
msgid "The generic views support OPTIONS requests."
msgstr ""

#: ../../releases/1.5.txt:256
#: ../../releases/1.5-alpha-1.txt:250
#: ../../releases/1.5-beta-1.txt:248
# 76691130b63b463ba1107b3e4f9dcd06
# 44f0057638c141a1b9992231141fe093
# c56e491c8f374c9d8dbf6344f6f27d0c
msgid "Management commands do not raise ``SystemExit`` any more when called by code from :ref:`call_command <call-command>`. Any exception raised by the command (mostly :ref:`CommandError <ref-command-exceptions>`) is propagated."
msgstr ""

#: ../../releases/1.5.txt:260
# c24f397108674f5b8447c9da84fdd673
msgid "Moreover, when you output errors or messages in your custom commands, you should now use ``self.stdout.write('message')`` and ``self.stderr.write('error')`` (see the note on :ref:`management commands output <management-commands-output>`)."
msgstr ""

#: ../../releases/1.5.txt:265
#: ../../releases/1.5-alpha-1.txt:254
#: ../../releases/1.5-beta-1.txt:252
# 1d88bf1cd190473ca608b13d803c355e
# 6be41cd48e1c4b1fb0bf2f6b086a4b5f
# 7e2a207c57754394bd6e3c868d380fde
msgid "The dumpdata management command outputs one row at a time, preventing out-of-memory errors when dumping large datasets."
msgstr ""

#: ../../releases/1.5.txt:268
#: ../../releases/1.5-alpha-1.txt:257
#: ../../releases/1.5-beta-1.txt:255
# f629ab916c294b39938642d112069644
# 3a666fb6d3534967bb4ad7902c0edd50
# 97010b62e1e945f0a32fa9c8c4760491
msgid "In the localflavor for Canada, \"pq\" was added to the acceptable codes for Quebec. It's an old abbreviation."
msgstr ""

#: ../../releases/1.5.txt:271
#: ../../releases/1.5-alpha-1.txt:260
#: ../../releases/1.5-beta-1.txt:258
# 41c1424500a94cfea987ebe1bc21f5ce
# 451837bfeb044339ada51b204d706479
# fe7851ebfc4c4b3a84613036e6daa65d
msgid "The :ref:`receiver <connecting-receiver-functions>` decorator is now able to connect to more than one signal by supplying a list of signals."
msgstr ""

#: ../../releases/1.5.txt:274
#: ../../releases/1.5-alpha-1.txt:263
#: ../../releases/1.5-beta-1.txt:261
# a5712e45c96e4af89eab7c779aaf7057
# 9cd6c5fa3ce044249298b5f863968892
# 1dd2bc91a3cd4eec921b84148970c2e2
msgid "In the admin, you can now filter users by groups which they are members of."
msgstr ""

#: ../../releases/1.5.txt:276
#: ../../releases/1.5-alpha-1.txt:265
#: ../../releases/1.5-beta-1.txt:263
# 6a6577d0b52a49a4b9b8c8eb458b88ee
# ce554416206d497eac79604a8344da19
# 78784d3e462444798d41ac3089bf65b9
msgid ":meth:`QuerySet.bulk_create() <django.db.models.query.QuerySet.bulk_create>` now has a batch_size argument. By default the batch_size is unlimited except for SQLite where single batch is limited so that 999 parameters per query isn't exceeded."
msgstr ""

#: ../../releases/1.5.txt:281
#: ../../releases/1.5-alpha-1.txt:270
#: ../../releases/1.5-beta-1.txt:268
# a1e9b31ae7524487a1956a4f345ad309
# 09d6549f8bd54a62a6bfa4cb68194883
# cb86f62e182140dfb7129678e3bb2992
msgid "The :setting:`LOGIN_URL` and :setting:`LOGIN_REDIRECT_URL` settings now also accept view function names and :ref:`named URL patterns <naming-url-patterns>`. This allows you to reduce configuration duplication. More information can be found in the :func:`~django.contrib.auth.decorators.login_required` documentation."
msgstr ""

#: ../../releases/1.5.txt:287
#: ../../releases/1.5-alpha-1.txt:276
#: ../../releases/1.5-beta-1.txt:274
# 69c15190cd244c5baa84a7e7c3b5f59b
# e2c6e1ee92a44f1f9847119240965cf0
# 8aaba7718497400aa3e7e178f756dad0
msgid "Django now provides a mod_wsgi :doc:`auth handler </howto/deployment/wsgi/apache-auth>`."
msgstr ""

#: ../../releases/1.5.txt:290
#: ../../releases/1.5-alpha-1.txt:279
#: ../../releases/1.5-beta-1.txt:277
# 96a179eba3b84aba8cf836b0088bd69e
# cd0991522d9946ce93fc5b2bd9c03c71
# 52f3c9cc592d45c586261fa5510849c2
msgid "The :meth:`QuerySet.delete() <django.db.models.query.QuerySet.delete>` and :meth:`Model.delete() <django.db.models.Model.delete()>` can now take fast-path in some cases. The fast-path allows for less queries and less objects fetched into memory. See :meth:`QuerySet.delete() <django.db.models.query.QuerySet.delete>` for details."
msgstr ""

#: ../../releases/1.5.txt:296
#: ../../releases/1.5-alpha-1.txt:285
#: ../../releases/1.5-beta-1.txt:283
# 78b03ba3c27740268f5ae4ff28bf5f48
# af4a60f4452d4c5d9785a54f6e03e6c3
# 993db789131b4eb9acea7206ed98024a
msgid "An instance of :class:`~django.core.urlresolvers.ResolverMatch` is stored on the request as ``resolver_match``."
msgstr ""

#: ../../releases/1.5.txt:299
#: ../../releases/1.5-alpha-1.txt:288
#: ../../releases/1.5-beta-1.txt:286
# 588eab2658fe487788f7095b60be2723
# 1221769fba0846e0b8fdbc67281fc060
# a0f8e1c1ea9b4456a0d12c70aaf19164
msgid "By default, all logging messages reaching the ``django`` logger when :setting:`DEBUG` is ``True`` are sent to the console (unless you redefine the logger in your :setting:`LOGGING` setting)."
msgstr ""

#: ../../releases/1.5.txt:303
#: ../../releases/1.5-alpha-1.txt:292
#: ../../releases/1.5-beta-1.txt:290
# 6de004d788c9477d87c9726b8a4e9dd3
# 0e06ef9b17c844369397e675f83c02dc
# f89937e611004c9dafe80cd41a7e6fcd
msgid "When using :class:`~django.template.RequestContext`, it is now possible to look up permissions by using ``{% if 'someapp.someperm' in perms %}`` in templates."
msgstr ""

#: ../../releases/1.5.txt:307
#: ../../releases/1.5-alpha-1.txt:296
#: ../../releases/1.5-beta-1.txt:294
# b378bcce9c614f79b5828ccd0b27c2e1
# 0501621ce5e8446dab1fa0cff5490a26
# 798fbbe96a604b0780bd87a2be42f6bf
msgid "It's not required any more to have ``404.html`` and ``500.html`` templates in the root templates directory. Django will output some basic error messages for both situations when those templates are not found. Of course, it's still recommended as good practice to provide those templates in order to present pretty error pages to the user."
msgstr ""

#: ../../releases/1.5.txt:313
#: ../../releases/1.5-alpha-1.txt:302
#: ../../releases/1.5-beta-1.txt:300
# 5effc3934d7941389d0e581a806d4aae
# 59f8f1e7362c41e4b118092909f58abc
# 3be359f53d394f6bacc4e2b8cefe5492
msgid ":mod:`django.contrib.auth` provides a new signal that is emitted whenever a user fails to login successfully. See :data:`~django.contrib.auth.signals.user_login_failed`"
msgstr ""

#: ../../releases/1.5.txt:317
#: ../../releases/1.5-alpha-1.txt:306
#: ../../releases/1.5-beta-1.txt:304
# 66182f7a7b2c4a48a72373d1e955f97f
# 896ea49ff66f47bf8cd287c7f8ac3671
# 455f827b70d54f1682eab31ba6246515
msgid "The loaddata management command now supports an :djadminopt:`--ignorenonexistent` option to ignore data for fields that no longer exist."
msgstr ""

#: ../../releases/1.5.txt:321
#: ../../releases/1.5-alpha-1.txt:310
#: ../../releases/1.5-beta-1.txt:308
# 57b63133af714847aa0c6809180d00ac
# 0504e9ab7b0b4d94b48d753e22d2b669
# e5ea92ab73ea457c9abc88f611299abb
msgid ":meth:`~django.test.SimpleTestCase.assertXMLEqual` and :meth:`~django.test.SimpleTestCase.assertXMLNotEqual` new assertions allow you to test equality for XML content at a semantic level, without caring for syntax differences (spaces, attribute order, etc.)."
msgstr ""

#: ../../releases/1.5.txt:326
#: ../../releases/1.5-beta-1.txt:313
# 1d1b2a1a846648cb8d03249ad4cd4914
# 3f8f44ffef3c4a7ea8dfe29d77a928bd
msgid "RemoteUserMiddleware now forces logout when the REMOTE_USER header disappears during the same browser session."
msgstr ""

#: ../../releases/1.5.txt:329
#: ../../releases/1.5-beta-1.txt:316
# fe6147503cd941958edf2ca2dd79409f
# 6f850f0ac3cf4d52b217df5a4ec36c7b
msgid "The :ref:`cache-based session backend <cached-sessions-backend>` can store session data in a non-default cache."
msgstr ""

#: ../../releases/1.5.txt:332
#: ../../releases/1.5-beta-1.txt:319
# cc4383f4f0534e6b80d1a7a7899ef90c
# ee0464482894455bb3b0c9c7589eb91b
msgid "Multi-column indexes can now be created on models. Read the :attr:`~django.db.models.Options.index_together` documentation for more information."
msgstr ""

#: ../../releases/1.5.txt:336
#: ../../releases/1.5-beta-1.txt:323
# 32b8331623064bd29c59c45ac905492b
# c78cb7834769498e9ab893bed9d8e675
msgid "During Django's logging configuration verbose Deprecation warnings are enabled and warnings are captured into the logging system. Logged warnings are routed through the ``console`` logging handler, which by default requires :setting:`DEBUG` to be True for output to be generated. The result is that DeprecationWarnings should be printed to the console in development environments the way they have been in Python versions < 2.7."
msgstr ""

#: ../../releases/1.5.txt:343
#: ../../releases/1.5-beta-1.txt:330
# 7673eaa842854964a5c26394c6e3b3a7
# 51094f1e8b984f809c6be2209727a1a3
msgid "The API for :meth:`django.contrib.admin.ModelAdmin.message_user` method has been modified to accept additional arguments adding capabilities similar to :func:`django.contrib.messages.add_message`. This is useful for generating error messages from admin actions."
msgstr ""

#: ../../releases/1.5.txt:348
#: ../../releases/1.5-beta-1.txt:335
# 6a1f9261271345148eddee9cbf5d74f8
# 20d683ab5d864e6688838871d892156a
msgid "The admin's list filters can now be customized per-request thanks to the new :meth:`django.contrib.admin.ModelAdmin.get_list_filter` method."
msgstr ""

#: ../../releases/1.5.txt:352
#: ../../releases/1.5-alpha-1.txt:316
#: ../../releases/1.5-beta-1.txt:339
# 5a78b30dda2145ef9518cde2a4a3d6c3
# 67e4eaca32884674827cbe07b9403ec3
# 50725b85b62c4a66b5dc264d5f380bb0
msgid "Backwards incompatible changes in 1.5"
msgstr ""

#: ../../releases/1.5.txt:356
#: ../../releases/1.5-alpha-1.txt:320
#: ../../releases/1.5-beta-1.txt:343
#: ../../releases/1.6.txt:380
# 8d8b159251ad4c50b66fca2a2b0dc1cb
# 95048d16e73a4053aae81ed8883a482c
# 05a08f5c1fcd4c6683e2416e71d25cd5
# 9c910fa1c0d745d39656810219e752e4
msgid "In addition to the changes outlined in this section, be sure to review the :doc:`deprecation plan </internals/deprecation>` for any features that have been removed. If you haven't updated your code within the deprecation timeline for a given feature, its removal may appear as a backwards incompatible change."
msgstr ""

#: ../../releases/1.5.txt:363
# b611c5f212cd4766a2cac6c40aaef9e1
msgid "``ALLOWED_HOSTS`` required in production"
msgstr ""

#: ../../releases/1.5.txt:365
# 47b1309e139c45ceb243fe4267ec7310
msgid "The new :setting:`ALLOWED_HOSTS` setting validates the request's ``Host`` header and protects against host-poisoning attacks. This setting is now required whenever :setting:`DEBUG` is ``False``, or else :meth:`django.http.HttpRequest.get_host()` will raise :exc:`~django.core.exceptions.SuspiciousOperation`. For more details see the :setting:`full documentation<ALLOWED_HOSTS>` for the new setting."
msgstr ""

#: ../../releases/1.5.txt:373
# e41d67fa78b34388ad86f59443ad2728
msgid "Managers on abstract models"
msgstr ""

#: ../../releases/1.5.txt:375
# ddb48ababeb84fc78ed1fdade433b716
msgid "Abstract models are able to define a custom manager, and that manager :ref:`will be inherited by any concrete models extending the abstract model <custom-managers-and-inheritance>`. However, if you try to use the abstract model to call a method on the manager, an exception will now be raised. Previously, the call would have been permitted, but would have failed as soon as any database operation was attempted (usually with a \"table does not exist\" error from the database)."
msgstr ""

#: ../../releases/1.5.txt:383
# 2fdce8a052444c3599e33ad763de1399
msgid "If you have functionality on a manager that you have been invoking using the abstract class, you should migrate that logic to a Python ``staticmethod`` or ``classmethod`` on the abstract class."
msgstr ""

#: ../../releases/1.5.txt:388
#: ../../releases/1.5-alpha-1.txt:327
#: ../../releases/1.5-beta-1.txt:350
# ceb8a6dbe4f446f2b6dfafadb6105105
# 0c762ea08ef94b6db59468d009ab64d5
# 008f0172a30c4da6bfc485a4137698c6
msgid "Context in year archive class-based views"
msgstr ""

#: ../../releases/1.5.txt:390
#: ../../releases/1.5-alpha-1.txt:329
#: ../../releases/1.5-beta-1.txt:352
# 5c00216fdaf5475790b37626be5b3aec
# e3d683f5de1243459fc5ed9f9f0c3b1b
# e08d66742fcb47df80d3516c5f5c2ffe
msgid "For consistency with the other date-based generic views, :class:`~django.views.generic.dates.YearArchiveView` now passes ``year`` in the context as a :class:`datetime.date` rather than a string.  If you are using ``{{ year }}`` in your templates, you must replace it with ``{{ year|date:\"Y\" }}``."
msgstr ""

#: ../../releases/1.5.txt:396
#: ../../releases/1.5-alpha-1.txt:335
#: ../../releases/1.5-beta-1.txt:358
# 394ab9f8eb9c479fb6f7dd2ea65fc542
# d13ccbcf065448d38560e9afb492d70e
# 4894246dc45e4dd58e5abe7ca3603a0c
msgid "``next_year`` and ``previous_year`` were also added in the context. They are calculated according to ``allow_empty`` and ``allow_future``."
msgstr ""

#: ../../releases/1.5.txt:400
#: ../../releases/1.5-alpha-1.txt:339
#: ../../releases/1.5-beta-1.txt:362
# 988d540980a3462c86f4cd1922deb97e
# 298f8e9b78ff4784a7109fb592ccee99
# fa0bf4c9687d41d79d3c4d965d5df17b
msgid "Context in year and month archive class-based views"
msgstr ""

#: ../../releases/1.5.txt:402
#: ../../releases/1.5-alpha-1.txt:341
#: ../../releases/1.5-beta-1.txt:364
# 52ad9a24f17446c7b264059c27c39809
# eae0851064c74278ab7483a9dd1d0d19
# fb10e36333b047d2b0f9b6324fd47bf2
msgid ":class:`~django.views.generic.dates.YearArchiveView` and :class:`~django.views.generic.dates.MonthArchiveView` were documented to provide a ``date_list`` sorted in ascending order in the context, like their function-based predecessors, but it actually was in descending order. In 1.5, the documented order was restored. You may want to add (or remove) the ``reversed`` keyword when you're iterating on ``date_list`` in a template::"
msgstr ""

#: ../../releases/1.5.txt:411
#: ../../releases/1.5-alpha-1.txt:350
#: ../../releases/1.5-beta-1.txt:373
# 168f5d20cbed492fa9c61438db2b7c84
# bb6d2280f95f43538043e47ecbf41488
# 475b446280504f3dabc1160b4422fa12
msgid ":class:`~django.views.generic.dates.ArchiveIndexView` still provides a ``date_list`` in descending order."
msgstr ""

#: ../../releases/1.5.txt:415
#: ../../releases/1.5-alpha-1.txt:354
#: ../../releases/1.5-beta-1.txt:377
# 5ee9a73e2a554a359725024761c1eb2d
# 8bccc8f98aa743fa97ea1ab24ce02842
# c695c782f54e49b29b4d748311b4936f
msgid "Context in TemplateView"
msgstr ""

#: ../../releases/1.5.txt:417
#: ../../releases/1.5-alpha-1.txt:356
#: ../../releases/1.5-beta-1.txt:379
# ca1461f908734d35b219873c6c5b9088
# 8781bfbed7a64d4aaed5eca3a8f005f5
# ec7cc5d199454f8c899f38fd06f4b638
msgid "For consistency with the design of the other generic views, :class:`~django.views.generic.base.TemplateView` no longer passes a ``params`` dictionary into the context, instead passing the variables from the URLconf directly into the context."
msgstr ""

#: ../../releases/1.5.txt:423
#: ../../releases/1.5-alpha-1.txt:362
#: ../../releases/1.5-beta-1.txt:385
# 513cdd93f4e3416ca17f4b6006a852fd
# edc2d25103c64430b5c10cab0fcc0903
# ec7afd3f6d64431698052cc644e531f9
msgid "Non-form data in HTTP requests"
msgstr ""

#: ../../releases/1.5.txt:425
#: ../../releases/1.5-alpha-1.txt:364
#: ../../releases/1.5-beta-1.txt:387
# 36903c2afc9741aa9b0c34f8c8dafa44
# 8f8dc3a322b54a3ea8e7a66331d0ff5b
# e22e9ef9623240e5b293e32a2665a6bf
msgid ":attr:`request.POST <django.http.HttpRequest.POST>` will no longer include data posted via HTTP requests with non form-specific content-types in the header. In prior versions, data posted with content-types other than ``multipart/form-data`` or ``application/x-www-form-urlencoded`` would still end up represented in the :attr:`request.POST <django.http.HttpRequest.POST>` attribute. Developers wishing to access the raw POST data for these cases, should use the :attr:`request.body <django.http.HttpRequest.body>` attribute instead."
msgstr ""

#: ../../releases/1.5.txt:435
# d8d1ec1df50b4c5ea590c69daf0b6132
msgid ":data:`~django.core.signals.request_finished` signal"
msgstr ""

#: ../../releases/1.5.txt:437
# 195d49c58ea44a52aee95785465cc629
msgid "Django used to send the :data:`~django.core.signals.request_finished` signal as soon as the view function returned a response. This interacted badly with :ref:`streaming responses <httpresponse-streaming>` that delay content generation."
msgstr ""

#: ../../releases/1.5.txt:442
# 59c867e712e64668a9460084813724a6
msgid "This signal is now sent after the content is fully consumed by the WSGI gateway. This might be backwards incompatible if you rely on the signal being fired before sending the response content to the client. If you do, you should consider using :doc:`middleware </topics/http/middleware>` instead."
msgstr ""

#: ../../releases/1.5.txt:449
# fdcf91d060dc47c0afc63a1f1429b718
msgid "Some WSGI servers and middleware do not always call ``close`` on the response object after handling a request, most notably uWSGI prior to 1.2.6 and Sentry's error reporting middleware up to 2.0.7. In those cases the ``request_finished`` signal isn't sent at all. This can result in idle connections to database and memcache servers."
msgstr ""

#: ../../releases/1.5.txt:456
#: ../../releases/1.5-alpha-1.txt:374
#: ../../releases/1.5-beta-1.txt:397
# aed2881012064d7e9645dfb0251d277d
# 07da7817c03148c0b949be8927887578
# f0f40e6d70df4ff2968bd5f9e4cdf3c2
msgid "OPTIONS, PUT and DELETE requests in the test client"
msgstr ""

#: ../../releases/1.5.txt:458
#: ../../releases/1.5-alpha-1.txt:376
#: ../../releases/1.5-beta-1.txt:399
# cb07134785884a3eb0710562bbc43f98
# 61edfe6cb05e43e9889b79179e4b6ba0
# 97902df77bf8422f84943d1ca9171e8b
msgid "Unlike GET and POST, these HTTP methods aren't implemented by web browsers. Rather, they're used in APIs, which transfer data in various formats such as JSON or XML. Since such requests may contain arbitrary data, Django doesn't attempt to decode their body."
msgstr ""

#: ../../releases/1.5.txt:463
#: ../../releases/1.5-alpha-1.txt:381
#: ../../releases/1.5-beta-1.txt:404
# f0939f0adb1d4249992bfc5beb73c996
# 0337a7ae8d7d4fe79306b646b32d0c03
# 5e9371509592471293dc089c6f31ea3a
msgid "However, the test client used to build a query string for OPTIONS and DELETE requests like for GET, and a request body for PUT requests like for POST. This encoding was arbitrary and inconsistent with Django's behavior when it receives the requests, so it was removed in Django 1.5."
msgstr ""

#: ../../releases/1.5.txt:468
#: ../../releases/1.5-alpha-1.txt:386
#: ../../releases/1.5-beta-1.txt:409
# 8a64f17a8eeb4dfb9d5e9db52d2e8d5d
# bc0797ca6faf44b89b43ffb82969c6a2
# 4b80ed0b6a0d490bb4a76a29416ad721
msgid "If you were using the ``data`` parameter in an OPTIONS or a DELETE request, you must convert it to a query string and append it to the ``path`` parameter."
msgstr ""

#: ../../releases/1.5.txt:471
#: ../../releases/1.5-alpha-1.txt:389
#: ../../releases/1.5-beta-1.txt:412
# 4803cd04759d4475a48eb7d79c178c5c
# e74ad4adfd624a9abada336b74d294ff
# 8a17d8b6663d47e380c78b91233e8b1d
msgid "If you were using the ``data`` parameter in a PUT request without a ``content_type``, you must encode your data before passing it to the test client and set the ``content_type`` argument."
msgstr ""

#: ../../releases/1.5.txt:478
#: ../../releases/1.5-alpha-1.txt:394
#: ../../releases/1.5-beta-1.txt:419
# ec9ebca97ce04657adafcfec2417878c
# 6d3d1656ccf74443b8b084a1730bc0a5
# 7c392643552144e69654f92f261970f6
msgid "System version of :mod:`simplejson` no longer used"
msgstr ""

#: ../../releases/1.5.txt:480
# fff222cb25144dd0994d18df8e36379c
msgid ":ref:`As explained below <simplejson-deprecation>`, Django 1.5 deprecates ``django.utils.simplejson`` in favor of Python 2.6's built-in :mod:`json` module. In theory, this change is harmless. Unfortunately, because of incompatibilities between versions of :mod:`simplejson`, it may trigger errors in some circumstances."
msgstr ""

#: ../../releases/1.5.txt:486
#: ../../releases/1.5-alpha-1.txt:402
#: ../../releases/1.5-beta-1.txt:427
# 13d94148a2f04fbbbbf742faed22e289
# 90a7f0c23dd845938367abdb77d13f13
# d9d48378d29b45df9c0a3af644cdff11
msgid "JSON-related features in Django 1.4 always used ``django.utils.simplejson``. This module was actually:"
msgstr ""

#: ../../releases/1.5.txt:489
#: ../../releases/1.5-alpha-1.txt:405
#: ../../releases/1.5-beta-1.txt:430
# 89ef47ef045246098864d2942fa15b53
# b11ff14aff6f48b2b71e7636e2030e58
# 4c3597b0f1db43dea9779b4c1e1f10ef
msgid "A system version of :mod:`simplejson`, if one was available (ie. ``import simplejson`` works), if it was more recent than Django's built-in copy or it had the C speedups, or"
msgstr ""

#: ../../releases/1.5.txt:492
#: ../../releases/1.5-alpha-1.txt:408
#: ../../releases/1.5-beta-1.txt:433
# 726a6897dd4c44338409902822d91971
# 7bdb186f817b4e8bb36a001b05ee2ffd
# c480948626d84ef3b423b48fbd1eb3d7
msgid "The :mod:`json` module from the standard library, if it was available (ie. Python 2.6 or greater), or"
msgstr ""

#: ../../releases/1.5.txt:494
#: ../../releases/1.5-alpha-1.txt:410
#: ../../releases/1.5-beta-1.txt:435
# 8139d1d5c9f7463f80e8e71dcf3cee96
# 572df2e882c0495396ce73d7f304b1f8
# a58211b189444208ba1c3e4f84e94a40
msgid "A built-in copy of version 2.0.7 of :mod:`simplejson`."
msgstr ""

#: ../../releases/1.5.txt:496
#: ../../releases/1.5-alpha-1.txt:412
#: ../../releases/1.5-beta-1.txt:437
# 7b73b0ba55f74ed1b28ad363beea61ea
# 68e38758329f471680f526e6a119e278
# 1e28d6d97fee4789a61e376b81088169
msgid "In Django 1.5, those features use Python's :mod:`json` module, which is based on version 2.0.9 of :mod:`simplejson`."
msgstr ""

#: ../../releases/1.5.txt:499
#: ../../releases/1.5-alpha-1.txt:415
#: ../../releases/1.5-beta-1.txt:440
# 088cb75b2b7d477597238946065c6569
# 498456602c5745eab7019ac1df346f6b
# 71822b828b1d47b392150b667a4f08a4
msgid "There are no known incompatibilities between Django's copy of version 2.0.7 and Python's copy of version 2.0.9. However, there are some incompatibilities between other versions of :mod:`simplejson`:"
msgstr ""

#: ../../releases/1.5.txt:503
#: ../../releases/1.5-alpha-1.txt:419
#: ../../releases/1.5-beta-1.txt:444
# 3bb4dfa6bf6848f9968b541b7f57bfb3
# b0a2a8bf42d7496b802bf17c75f77737
# 4b132ef52c214b68b6c8095f9a82b82a
msgid "While the :mod:`simplejson` API is documented as always returning unicode strings, the optional C implementation can return a byte string. This was fixed in Python 2.7."
msgstr ""

#: ../../releases/1.5.txt:506
#: ../../releases/1.5-alpha-1.txt:422
#: ../../releases/1.5-beta-1.txt:447
# b28334929bf743a597ec305674078e2b
# 526557ed01164c6c955b2177a224fbaf
# 0c085a59c2e6413697746f9dbf51d85d
msgid ":class:`simplejson.JSONEncoder` gained a ``namedtuple_as_object`` keyword argument in version 2.2."
msgstr ""

#: ../../releases/1.5.txt:509
#: ../../releases/1.5-alpha-1.txt:425
#: ../../releases/1.5-beta-1.txt:450
# 668dba6ba20c4466ba33da9a89291ef8
# 5988f7728311417f91e748fef785ed1a
# d6cbeb8902264bbe81bff30cac59dc9c
msgid "More information on these incompatibilities is available in `ticket #18023`_."
msgstr ""

#: ../../releases/1.5.txt:511
#: ../../releases/1.5-alpha-1.txt:427
#: ../../releases/1.5-beta-1.txt:452
# f35975be011040958640a16446b9454c
# 0f675650b90e4f469778f8c29b274d71
# 7bad0b660da74d698d323d38a0087181
msgid "The net result is that, if you have installed :mod:`simplejson` and your code uses Django's serialization internals directly -- for instance ``django.core.serializers.json.DjangoJSONEncoder``, the switch from :mod:`simplejson` to :mod:`json` could break your code. (In general, changes to internals aren't documented; we're making an exception here.)"
msgstr ""

#: ../../releases/1.5.txt:517
#: ../../releases/1.5-alpha-1.txt:433
#: ../../releases/1.5-beta-1.txt:458
# 5f8e12e57ef346dcbd08924207acb415
# e18e27288fb147f89067ba0c238d14db
# 2bb3cc962e604b0a898eb046b1445956
msgid "At this point, the maintainers of Django believe that using :mod:`json` from the standard library offers the strongest guarantee of backwards-compatibility. They recommend to use it from now on."
msgstr ""

#: ../../releases/1.5.txt:524
#: ../../releases/1.5-alpha-1.txt:440
#: ../../releases/1.5-beta-1.txt:465
# b3bf67a4b26d4128a9585c6295a50740
# 8810d996b33e4442b19146947922c2b0
# 04c36bcca97d4af9bb8863d179814080
msgid "String types of hasher method parameters"
msgstr ""

#: ../../releases/1.5.txt:526
#: ../../releases/1.5-alpha-1.txt:442
#: ../../releases/1.5-beta-1.txt:467
# 20ffb082ef6a4aa79e9b3e2ec3f80977
# c45a798a014a467ea170bc9c673c5a58
# 98f445cc93a44dbbbd49524f8e3a20e7
msgid "If you have written a :ref:`custom password hasher <auth_password_storage>`, your ``encode()``, ``verify()`` or ``safe_summary()`` methods should accept Unicode parameters (``password``, ``salt`` or ``encoded``). If any of the hashing methods need byte strings, you can use the :func:`~django.utils.encoding.force_bytes` utility to encode the strings."
msgstr ""

#: ../../releases/1.5.txt:533
#: ../../releases/1.5-alpha-1.txt:449
#: ../../releases/1.5-beta-1.txt:474
# 6de49c3d8d7b45c6b89985f163affd18
# 5928dbe437684d3b9101d597eedcc029
# 2c422e76cd244cda9e46e4a5d9a7d661
msgid "Validation of previous_page_number and next_page_number"
msgstr ""

#: ../../releases/1.5.txt:535
#: ../../releases/1.5-alpha-1.txt:451
#: ../../releases/1.5-beta-1.txt:476
# 8965ba945c2d4466b495e2bb0f525e7d
# f090bb715f934b038363093d5404034e
# a789053ce732466ab09d29576e3510cf
msgid "When using :doc:`object pagination </topics/pagination>`, the ``previous_page_number()`` and ``next_page_number()`` methods of the :class:`~django.core.paginator.Page` object did not check if the returned number was inside the existing page range. It does check it now and raises an :exc:`~django.core.paginator.InvalidPage` exception when the number is either too low or too high."
msgstr ""

#: ../../releases/1.5.txt:543
#: ../../releases/1.5-alpha-1.txt:459
#: ../../releases/1.5-beta-1.txt:484
# 5c0ab3cd8ed044c3bfa1ade983527dfa
# c5c7e743e751432584241a1c0fbea782
# dde81c7d3bba4b11a386e7cb775f3909
msgid "Behavior of autocommit database option on PostgreSQL changed"
msgstr ""

#: ../../releases/1.5.txt:545
#: ../../releases/1.5-alpha-1.txt:461
#: ../../releases/1.5-beta-1.txt:486
# 9c0a5efefae847fc8b0b46e95d16b9ac
# cd27163b86e643dabd74796306dd31bc
# 05ed3541208f46df90ef9bf8bda9831e
msgid "PostgreSQL's autocommit option didn't work as advertised previously. It did work for single transaction block, but after the first block was left the autocommit behavior was never restored. This bug is now fixed in 1.5. While this is only a bug fix, it is worth checking your applications behavior if you are using PostgreSQL together with the autocommit option."
msgstr ""

#: ../../releases/1.5.txt:552
#: ../../releases/1.5-alpha-1.txt:468
#: ../../releases/1.5-beta-1.txt:493
# f429fb1f366e4661bc91cff4392322c2
# 2718895ae59b47e7b445f7330e10ea2e
# acd070b11d0745b4b9d71b3e86e5596b
msgid "Session not saved on 500 responses"
msgstr ""

#: ../../releases/1.5.txt:554
#: ../../releases/1.5-alpha-1.txt:470
#: ../../releases/1.5-beta-1.txt:495
# c2911a44a3e4472bac834a3c1946e8bd
# acd8232805264b11a0b2349bd217cc45
# 80a642bb604e431bb910669501d7299a
msgid "Django's session middleware will skip saving the session data if the response's status code is 500."
msgstr ""

#: ../../releases/1.5.txt:558
#: ../../releases/1.5-alpha-1.txt:474
#: ../../releases/1.5-beta-1.txt:499
# c7375d7b568c49318ce7013a91d311c2
# 5047da943f644df59fbb3b771db8f1ea
# 538b0dbaa49a4cf6900878de1cca2963
msgid "Email checks on failed admin login"
msgstr ""

#: ../../releases/1.5.txt:560
#: ../../releases/1.5-alpha-1.txt:476
#: ../../releases/1.5-beta-1.txt:501
# 5495b1f494f348509861b4a3a6b7f639
# 5ee320853d6f40a39df84753bdc49550
# 17a65df7189e4a4cb1bec945fb70312e
msgid "Prior to Django 1.5, if you attempted to log into the admin interface and mistakenly used your email address instead of your username, the admin interface would provide a warning advising that your email address was not your username. In Django 1.5, the introduction of :ref:`custom User models <auth-custom-user>` has required the removal of this warning. This doesn't change the login behavior of the admin site; it only affects the warning message that is displayed under one particular mode of login failure."
msgstr ""

#: ../../releases/1.5.txt:570
#: ../../releases/1.5-alpha-1.txt:486
#: ../../releases/1.5-beta-1.txt:511
# dc48fedb4d1e40619c05bd0263793e11
# e98ccf7aca8e4e6caafa15397edd1b2f
# 13b9f78f9426409aae967f5683754467
msgid "Changes in tests execution"
msgstr ""

#: ../../releases/1.5.txt:572
#: ../../releases/1.5-alpha-1.txt:488
#: ../../releases/1.5-beta-1.txt:513
# 94970e5bc16849bca7283213db71abad
# 142ca5d1c104477ea562ada5e1fe95b9
# 23b175b947e1480599e4912ec7581647
msgid "Some changes have been introduced in the execution of tests that might be backward-incompatible for some testing setups:"
msgstr ""

#: ../../releases/1.5.txt:576
#: ../../releases/1.5-alpha-1.txt:492
#: ../../releases/1.5-beta-1.txt:517
# a32db7af43bd474aaf088fe008604f87
# 1ae77111c56248aaa0e4ab941a4d636f
# 35bd9a36947c4deb9e39468fb1a4be33
msgid "Database flushing in ``django.test.TransactionTestCase``"
msgstr ""

#: ../../releases/1.5.txt:578
#: ../../releases/1.5-alpha-1.txt:494
#: ../../releases/1.5-beta-1.txt:519
# a381f2c4e8f94f71806327c09fb7b6bf
# af005847aa1849149c51801184ce9231
# 1c591e6bf0b548fe9dfd38716e477cf7
msgid "Previously, the test database was truncated *before* each test run in a :class:`~django.test.TransactionTestCase`."
msgstr ""

#: ../../releases/1.5.txt:581
#: ../../releases/1.5-alpha-1.txt:497
#: ../../releases/1.5-beta-1.txt:522
# fad2e0fa91054415ba6639e7160383a0
# 0bad1239c9bf43dcae98ed042bf43093
# eb8ce691c6084e9c92ca58a58a5148ce
msgid "In order to be able to run unit tests in any order and to make sure they are always isolated from each other, :class:`~django.test.TransactionTestCase` will now reset the database *after* each test run instead."
msgstr ""

#: ../../releases/1.5.txt:586
#: ../../releases/1.5-alpha-1.txt:502
#: ../../releases/1.5-beta-1.txt:527
# 7d066b58798e49d59d06883c44a83ce9
# 7b8b4c2a4cac441b999079a5f273ff57
# c12e9203425442f19fd935b63ff78581
msgid "No more implicit DB sequences reset"
msgstr ""

#: ../../releases/1.5.txt:588
#: ../../releases/1.5-alpha-1.txt:504
#: ../../releases/1.5-beta-1.txt:529
# aca92949bdcf4e26bf2f14821c2f9ffe
# 2f07318a5fbb4b268755bdacb19c817f
# 2923ceb2c7c842379bbc0d2806cec2f6
msgid ":class:`~django.test.TransactionTestCase` tests used to reset primary key sequences automatically together with the database flushing actions described above."
msgstr ""

#: ../../releases/1.5.txt:592
#: ../../releases/1.5-alpha-1.txt:508
#: ../../releases/1.5-beta-1.txt:533
# e5aa997bb9694c898853088c4593ac8b
# d082ff3f06144233a647d9df7ab4d862
# f809dd5a9af849b08539e7a40264b497
msgid "This has been changed so no sequences are implicitly reset. This can cause :class:`~django.test.TransactionTestCase` tests that depend on hard-coded primary key values to break."
msgstr ""

#: ../../releases/1.5.txt:596
#: ../../releases/1.5-alpha-1.txt:512
#: ../../releases/1.5-beta-1.txt:537
# f52b2f25a1224269b469b0ebdaabed8c
# 56682b57633b4ef28ad9b7427cb6ac9e
# 1679be7c04d8428aba8b7af24af4b665
msgid "The new :attr:`~django.test.TransactionTestCase.reset_sequences` attribute can be used to force the old behavior for :class:`~django.test.TransactionTestCase` that might need it."
msgstr ""

#: ../../releases/1.5.txt:601
#: ../../releases/1.5-alpha-1.txt:517
#: ../../releases/1.5-beta-1.txt:542
# fdcc0fa9bcfe48008e3bc9af3a4b252f
# b544a6f16780459d83858bf24bb474ee
# e59ca25a7ba649819b838f69df440447
msgid "Ordering of tests"
msgstr ""

#: ../../releases/1.5.txt:603
#: ../../releases/1.5-alpha-1.txt:519
#: ../../releases/1.5-beta-1.txt:544
# 7e61f9f1a796449ba72dd76ed944e9d6
# 4cacee4fce1e4ff4b803a4dbc657c86b
# 7e204e4cebe14bf4914cdd418ae1ab74
msgid "In order to make sure all ``TestCase`` code starts with a clean database, tests are now executed in the following order:"
msgstr ""

#: ../../releases/1.5.txt:606
#: ../../releases/1.5-alpha-1.txt:522
#: ../../releases/1.5-beta-1.txt:547
# ae4d3f1586304644b067686afae5ee29
# 754eefd586db434a9969d95793ad0d22
# 537edcd9ef294d898eb6885e2174e79d
msgid "First, all unittests (including :class:`unittest.TestCase`, :class:`~django.test.SimpleTestCase`, :class:`~django.test.TestCase` and :class:`~django.test.TransactionTestCase`) are run with no particular ordering guaranteed nor enforced among them."
msgstr ""

#: ../../releases/1.5.txt:611
#: ../../releases/1.5-alpha-1.txt:527
#: ../../releases/1.5-beta-1.txt:552
# 05845ffdf274493bb1cfb5a2ae87c3db
# 3b486d05103d41209f7781f912b0c10c
# 24ca6b29fac340a598716b8dc3693f1c
msgid "Then any other tests (e.g. doctests) that may alter the database without restoring it to its original state are run."
msgstr ""

#: ../../releases/1.5.txt:614
#: ../../releases/1.5-alpha-1.txt:530
#: ../../releases/1.5-beta-1.txt:555
# d2ea240412da4c78921703edc914742b
# 0b5c4c03cb1b47588af10700d93c17e6
# 3727a559fbb84cc5939e9f281ea0f414
msgid "This should not cause any problems unless you have existing doctests which assume a :class:`~django.test.TransactionTestCase` executed earlier left some database state behind or unit tests that rely on some form of state being preserved after the execution of other tests. Such tests are already very fragile, and must now be changed to be able to run independently."
msgstr ""

#: ../../releases/1.5.txt:621
#: ../../releases/1.5-alpha-1.txt:537
#: ../../releases/1.5-beta-1.txt:562
# b582cabbe98f49079455f70be1a52458
# cebd23eda2fc4bed994792c7c4bfb379
# 32f17999ed4f4217bbaa6ffa6e58af71
msgid "`cleaned_data` dictionary kept for invalid forms"
msgstr ""

#: ../../releases/1.5.txt:623
#: ../../releases/1.5-alpha-1.txt:539
#: ../../releases/1.5-beta-1.txt:564
# 1bf0de2c44c64584a30b8ad3beaac099
# 5558157590984b0caaccf39e0e94be92
# 35c75a2f0c8442c9b020ebc25f33a39f
msgid "The :attr:`~django.forms.Form.cleaned_data` dictionary is now always present after form validation. When the form doesn't validate, it contains only the fields that passed validation. You should test the success of the validation with the :meth:`~django.forms.Form.is_valid()` method and not with the presence or absence of the :attr:`~django.forms.Form.cleaned_data` attribute on the form."
msgstr ""

#: ../../releases/1.5.txt:631
#: ../../releases/1.5-beta-1.txt:572
# 9cddd39a3f0a44e99db25002907f4cfa
# ca790fe58c4e48b7bdee8bb0cec2693f
msgid "Behavior of :djadmin:`syncdb` with multiple databases"
msgstr ""

#: ../../releases/1.5.txt:633
#: ../../releases/1.5-beta-1.txt:574
# dc3a9965a4d64e039e529dfbb242a4c8
# 1929190306244a5f9897c6e0f3c437b8
msgid ":djadmin:`syncdb` now queries the database routers to determine if content types (when :mod:`~django.contrib.contenttypes` is enabled) and permissions (when :mod:`~django.contrib.auth` is enabled) should be created in the target database. Previously, it created them in the default database, even when another database was specified with the :djadminopt:`--database` option."
msgstr ""

#: ../../releases/1.5.txt:639
#: ../../releases/1.5-beta-1.txt:580
# 442fcf5b60054fa581ab5350798505b5
# fa73787852c5465a9603473097aa52a7
msgid "If you use :djadmin:`syncdb` on multiple databases, you should ensure that your routers allow synchronizing content types and permissions to only one of them. See the docs on the :ref:`behavior of contrib apps with multiple databases <contrib_app_multiple_databases>` for more information."
msgstr ""

#: ../../releases/1.5.txt:645
# f9da26e256b64ee9bd9fb4a2d3a7bb60
msgid "XML deserializer will not parse documents with a DTD"
msgstr ""

#: ../../releases/1.5.txt:647
# 59a42b75eb58454e95f4ce6674d50382
msgid "In order to prevent exposure to denial-of-service attacks related to external entity references and entity expansion, the XML model deserializer now refuses to parse XML documents containing a DTD (DOCTYPE definition). Since the XML serializer does not output a DTD, this will not impact typical usage, only cases where custom-created XML documents are passed to Django's model deserializer."
msgstr ""

#: ../../releases/1.5.txt:655
# 712f381f98f44bc39f38f88a229db07b
msgid "Formsets default ``max_num``"
msgstr ""

#: ../../releases/1.5.txt:657
# 9544eefc82b04bb6845862ccba632c6c
msgid "A (default) value of ``None`` for the ``max_num`` argument to a formset factory no longer defaults to allowing any number of forms in the formset. Instead, in order to prevent memory-exhaustion attacks, it now defaults to a limit of 1000 forms. This limit can be raised by explicitly setting a higher value for ``max_num``."
msgstr ""

#: ../../releases/1.5.txt:664
#: ../../releases/1.5-alpha-1.txt:547
#: ../../releases/1.5-beta-1.txt:586
#: ../../releases/1.6.txt:814
# 056e252a7cde4c6b8e55e3569d1731e8
# b95d9359cf0b4a9db30b5fdd89489dbd
# 199249b6329540efb71ca364d787cc22
# fdec12f781884c159f7e573f1793e25d
msgid "Miscellaneous"
msgstr ""

#: ../../releases/1.5.txt:666
#: ../../releases/1.5-alpha-1.txt:549
#: ../../releases/1.5-beta-1.txt:588
# c180edc5bff14d9ab456aeaf247dee1d
# 95cb050a353f49f6a97bc6ce1e6fbfd4
# f6d67161369144dbbe70fffd3c9f3722
msgid ":class:`django.forms.ModelMultipleChoiceField` now returns an empty ``QuerySet`` as the empty value instead of an empty list."
msgstr ""

#: ../../releases/1.5.txt:669
#: ../../releases/1.5-alpha-1.txt:552
#: ../../releases/1.5-beta-1.txt:591
# 4a89385018d84bddaa2167d1b71345d4
# fe28ecdb7ad04d129cd352e7a1844148
# 2ff03f2431ca4d4a9e041aa9a60ec5da
msgid ":func:`~django.utils.http.int_to_base36` properly raises a :exc:`~exceptions.TypeError` instead of :exc:`~exceptions.ValueError` for non-integer inputs."
msgstr ""

#: ../../releases/1.5.txt:673
#: ../../releases/1.5-alpha-1.txt:556
#: ../../releases/1.5-beta-1.txt:595
# 4ed57c7b92ec424685a64d66ca9b4c04
# 4b28b64d933047bf8309bf24138b1452
# 8df9d169e38747aab4d000a41f4eeaa4
msgid "The ``slugify`` template filter is now available as a standard python function at :func:`django.utils.text.slugify`. Similarly, ``remove_tags`` is available at :func:`django.utils.html.remove_tags`."
msgstr ""

#: ../../releases/1.5.txt:677
#: ../../releases/1.5-alpha-1.txt:560
#: ../../releases/1.5-beta-1.txt:599
# 42942959fd33484faa1c40195c7b274b
# 2d39c4dcb9214af3a091e4dffabad7ee
# 2dcd562f852e49fdbda272d19760e27b
msgid "Uploaded files are no longer created as executable by default. If you need them to be executable change :setting:`FILE_UPLOAD_PERMISSIONS` to your needs. The new default value is ``0666`` (octal) and the current umask value is first masked out."
msgstr ""

#: ../../releases/1.5.txt:682
#: ../../releases/1.5-alpha-1.txt:565
#: ../../releases/1.5-beta-1.txt:604
# 81bd5909f0b846389dbda23f54800591
# 7c158c331f114b4ba8f5bffc9ddbf96a
# 7405387f95904a51b8f013f0878a6e8f
msgid "The :ref:`F() expressions <query-expressions>` supported bitwise operators by ``&`` and ``|``. These operators are now available using ``.bitand()`` and ``.bitor()`` instead. The removal of ``&`` and ``|`` was done to be consistent with :ref:`Q() expressions <complex-lookups-with-q>` and ``QuerySet`` combining where the operators are used as boolean AND and OR operators."
msgstr ""

#: ../../releases/1.5.txt:688
#: ../../releases/1.5-beta-1.txt:610
# 00cd1bffb4cf44c3b30517048d9b4c09
# 2474d53d04684ae4a855a7448cf0c8e4
msgid "In a ``filter()`` call, when :ref:`F() expressions <query-expressions>` contained lookups spanning multi-valued relations, they didn't always reuse the same relations as other lookups along the same chain. This was changed, and now F() expressions will always use the same relations as other lookups within the same ``filter()`` call."
msgstr ""

#: ../../releases/1.5.txt:694
#: ../../releases/1.5-alpha-1.txt:571
#: ../../releases/1.5-beta-1.txt:616
# 4a0ac41c652745e79f0947fb44042eda
# 5864ff81fead45f0b4d326761dfd1ebd
# ff768d0723c9484cacc39cce2470a1c0
msgid "The :ttag:`csrf_token` template tag is no longer enclosed in a div. If you need HTML validation against pre-HTML5 Strict DTDs, you should add a div around it in your pages."
msgstr ""

#: ../../releases/1.5.txt:698
#: ../../releases/1.5-beta-1.txt:620
# 6d2411ff29ef42e9833bd819dfe1234d
# 271826deff5c4957ac9e484e055486ad
msgid "The template tags library ``adminmedia``, which only contained the deprecated template tag ``{% admin_media_prefix %}``, was removed. Attempting to load it with ``{% load adminmedia %}`` will fail. If your templates still contain that line you must remove it."
msgstr ""

#: ../../releases/1.5.txt:703
# c3cd9354035048bfa0fb9e99ed5e48e9
msgid "Because of an implementation oversight, it was possible to use :doc:`django.contrib.redirects </ref/contrib/redirects>` without enabling :doc:`django.contrib.sites </ref/contrib/sites>`. This isn't allowed any longer. If you're using ``django.contrib.redirects``, make sure :setting:`INSTALLED_APPS` contains ``django.contrib.sites``."
msgstr ""

#: ../../releases/1.5.txt:709
# bc50adb81f904aad9bf97b578905955d
msgid ":meth:`BoundField.label_tag <django.forms.BoundField.label_tag>` now escapes its ``contents`` argument. To avoid the HTML escaping, use :func:`django.utils.safestring.mark_safe` on the argument before passing it."
msgstr ""

#: ../../releases/1.5.txt:714
#: ../../releases/1.5-alpha-1.txt:576
#: ../../releases/1.5-beta-1.txt:626
# 70da3c81c8af45989343f570cb287cfb
# e57813ad51f54b01852290be064ac71c
# 3323046cd19a43b9841ba69843d16a1c
msgid "Features deprecated in 1.5"
msgstr ""

#: ../../releases/1.5.txt:717
# bdaee06644434f30bf1aab971923fc5c
msgid "``django.contrib.localflavor``"
msgstr ""

#: ../../releases/1.5.txt:719
# 05c3577abcc34008845941b09d99ff79
msgid "The localflavor contrib app has been split into separate packages. ``django.contrib.localflavor`` itself will be removed in Django 1.6, after an :ref:`accelerated deprecation <localflavor-deprecation-policy>`. The docs provide :ref:`migration instructions <localflavor-how-to-migrate>`."
msgstr ""

#: ../../releases/1.5.txt:724
# 4cbf2d98f69b4116a11fba126807905a
msgid "The new packages are available :ref:`on Github <localflavor-packages>`. The core team cannot efficiently maintain these packages in the long term — it spans just a dozen countries at this time; similar to translations, maintenance will be handed over to interested members of the community."
msgstr ""

#: ../../releases/1.5.txt:730
# 850ca03078874be0915b9f9fbdbb86f8
msgid "``django.contrib.markup``"
msgstr ""

#: ../../releases/1.5.txt:732
#: ../../releases/1.5-alpha-1.txt:631
#: ../../releases/1.5-beta-1.txt:684
# 43577e8a84fd4f8582d278357dba7487
# 0cb2d434e9b0449c88f6d87468be7173
# 82a4638b2abd478fa43989344dc078be
msgid "The markup contrib module has been deprecated and will follow an accelerated deprecation schedule. Direct use of python markup libraries or 3rd party tag libraries is preferred to Django maintaining this functionality in the framework."
msgstr ""

#: ../../releases/1.5.txt:738
#: ../../releases/1.5-alpha-1.txt:579
#: ../../releases/1.5-beta-1.txt:631
# 3af732cf2fda4f91a52372840e209687
# 137755a3f33e466cb68fffe26223dd03
# 75a014053d6049b181987303c6a34183
msgid ":setting:`AUTH_PROFILE_MODULE`"
msgstr ""

#: ../../releases/1.5.txt:740
#: ../../releases/1.5-alpha-1.txt:581
#: ../../releases/1.5-beta-1.txt:633
# 3ef1ff8f29b041a0ab4e9489139dee8b
# ccc2c914cdb24c3abfd2ffe3866d98de
# 35bfe6866bd547eeb787eb2bdf4d71c1
msgid "With the introduction of :ref:`custom User models <auth-custom-user>`, there is no longer any need for a built-in mechanism to store user profile data."
msgstr ""

#: ../../releases/1.5.txt:743
#: ../../releases/1.5-alpha-1.txt:584
#: ../../releases/1.5-beta-1.txt:636
# b0dcd017d40b423fa13938a3ffd19972
# 0d52afdd327344ab84eb5ca2ae725a29
# 59626263d145450e8ec1744e58940a55
msgid "You can still define user profiles models that have a one-to-one relation with the User model - in fact, for many applications needing to associate data with a User account, this will be an appropriate design pattern to follow. However, the :setting:`AUTH_PROFILE_MODULE` setting, and the :meth:`~django.contrib.auth.models.User.get_profile()` method for accessing the user profile model, should not be used any longer."
msgstr ""

#: ../../releases/1.5.txt:751
#: ../../releases/1.5-alpha-1.txt:592
#: ../../releases/1.5-beta-1.txt:644
# 6d86034d42054a71848460d592544f80
# 74d429a774264764af28ac37aa8d5cf2
# 82fbd5b533304f418876388c858d3c93
msgid "Streaming behavior of :class:`~django.http.HttpResponse`"
msgstr ""

#: ../../releases/1.5.txt:753
# 6e04dbe8e8b74364ba9236515d1823d0
msgid "Django 1.5 deprecates the ability to stream a response by passing an iterator to :class:`~django.http.HttpResponse`. If you rely on this behavior, switch to :class:`~django.http.StreamingHttpResponse`. See :ref:`explicit-streaming-responses` above."
msgstr ""

#: ../../releases/1.5.txt:758
#: ../../releases/1.5-alpha-1.txt:598
#: ../../releases/1.5-beta-1.txt:651
# c2bcc63d9a2c4cc5a299377c7e46cb15
# ab9224531f054092b23edc98240a362c
# 5e35477fdba1459d89a47fb02778819c
msgid "In Django 1.7 and above, the iterator will be consumed immediately by :class:`~django.http.HttpResponse`."
msgstr ""

#: ../../releases/1.5.txt:764
#: ../../releases/1.5-alpha-1.txt:602
#: ../../releases/1.5-beta-1.txt:655
# 7e2e7b38b2f84ab8981721c44bc4229b
# 16de8139f37a4152a1154c5dadc65dd3
# 910f94d7f3cf47bd96cff6c114ed383a
msgid "``django.utils.simplejson``"
msgstr ""

#: ../../releases/1.5.txt:766
#: ../../releases/1.5-alpha-1.txt:604
#: ../../releases/1.5-beta-1.txt:657
# 8a956ad912f648b0a116e04821241074
# c7397007ad844165976a44e96c61a08b
# 0b4114da9998405193b72230580038db
msgid "Since Django 1.5 drops support for Python 2.5, we can now rely on the :mod:`json` module being available in Python's standard library, so we've removed our own copy of :mod:`simplejson`. You should now import :mod:`json` instead of ``django.utils.simplejson``."
msgstr ""

#: ../../releases/1.5.txt:771
# abcfa26c4d9d446dbc91ccdf1a5e7786
msgid "Unfortunately, this change might have unwanted side-effects, because of incompatibilities between versions of :mod:`simplejson` -- see the :ref:`backwards-incompatible changes <simplejson-incompatibilities>` section. If you rely on features added to :mod:`simplejson` after it became Python's :mod:`json`, you should import :mod:`simplejson` explicitly."
msgstr ""

#: ../../releases/1.5.txt:778
#: ../../releases/1.5-alpha-1.txt:616
#: ../../releases/1.5-beta-1.txt:669
# 7afa1b91226a4593a721cc4330be7205
# f45c2ce55d224905a4f691aa69d09ae7
# 250da46f74c1408ba67f00377cd1749d
msgid "``django.utils.encoding.StrAndUnicode``"
msgstr ""

#: ../../releases/1.5.txt:780
#: ../../releases/1.5-alpha-1.txt:618
#: ../../releases/1.5-beta-1.txt:671
# a099ddd3764b456a87d212fa47dfc424
# 3f1085f5672a4d16856d1dc6b9b82289
# 6f2647287d234f56b13b0ca9e55775fd
msgid "The :class:`~django.utils.encoding.StrAndUnicode` mix-in has been deprecated. Define a ``__str__`` method and apply the :func:`~django.utils.encoding.python_2_unicode_compatible` decorator instead."
msgstr ""

#: ../../releases/1.5.txt:785
#: ../../releases/1.5-alpha-1.txt:623
#: ../../releases/1.5-beta-1.txt:676
# 871f69d51aca42349bad127e234962c1
# 09979c7b1b49427db3b1a02f6c1d5fef
# 0cef4095528f47fdb9c1189a8c3e0762
msgid "``django.utils.itercompat.product``"
msgstr ""

#: ../../releases/1.5.txt:787
#: ../../releases/1.5-alpha-1.txt:625
#: ../../releases/1.5-beta-1.txt:678
# e8efe982a79343578830cf5df28a4104
# 36586aef9f564002a597706379ea7245
# 2594d483501d448e9a004ac6b9fb0473
msgid "The ``django.utils.itercompat.product`` function has been deprecated. Use the built-in :func:`itertools.product` instead."
msgstr ""

#: ../../releases/1.5.txt:791
#: ../../releases/1.5-beta-1.txt:690
# bbc3b2f9b3ea45e09c3aab4d9a382994
# c8b954602c2942a6871692d7776549ab
msgid "``cleanup`` management command"
msgstr ""

#: ../../releases/1.5.txt:793
#: ../../releases/1.5-beta-1.txt:692
# a78bca333b564100bdacf1cd11e23f02
# 6a61c9ce51dd49d39e4f8c287703c47a
msgid "The :djadmin:`cleanup` management command has been deprecated and replaced by :djadmin:`clearsessions`."
msgstr ""

#: ../../releases/1.5.txt:797
#: ../../releases/1.5-beta-1.txt:696
# f683edb9390e483b9ff769cecf81a4d0
# bb7ddace5f0b4f11973830e270a73949
msgid "``daily_cleanup.py`` script"
msgstr ""

#: ../../releases/1.5.txt:799
#: ../../releases/1.5-beta-1.txt:698
# c8d2ea855dba47fba16758bff8597007
# 090f2447383d469ca55a2d70f699ec62
msgid "The undocumented ``daily_cleanup.py`` script has been deprecated. Use the :djadmin:`clearsessions` management command instead."
msgstr ""

#: ../../releases/1.5.txt:803
#: ../../releases/1.5-beta-1.txt:702
# c449ed54230d4fdb8b7f5176a7c49def
# bf7b96f623f84fa9baef15e591b94848
msgid "``depth`` keyword argument in ``select_related``"
msgstr ""

#: ../../releases/1.5.txt:805
#: ../../releases/1.5-beta-1.txt:704
# 6a4f1ff5f1fb4b9e8f9cb4f96bc25747
# 24ffa96399dc48f6bbc2a02b78a0207b
msgid "The ``depth`` keyword argument in :meth:`~django.db.models.query.QuerySet.select_related` has been deprecated. You should use field names instead."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:3
# ca56b4c997ac4f8cb29263eb244dee23
msgid "Django 1.5 alpha release notes"
msgstr ""

#: ../../releases/1.5-alpha-1.txt:5
# 09af5d6b2baa4c0bbb7e72530362937b
msgid "October 25, 2012."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:7
# 5719285b365a44aaaf1d02ffaa8e4dec
msgid "Welcome to Django 1.5 alpha!"
msgstr ""

#: ../../releases/1.5-alpha-1.txt:9
# 51faac486c1c4f828a2a72eb0d62b494
msgid "This is the first in a series of preview/development releases leading up to the eventual release of Django 1.5, scheduled for December 2012. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.5 release."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:18
# af6f8eefe8e643c4b20ba4563ee6e8b2
msgid "In particular, we need the community's help to test Django 1.5's new `Python 3 support`_ -- not just to report bugs on Python 3, but also regressions on Python 2. While Django is very conservative with regards to backwards compatibility, mistakes are always possible, and it's likely that the Python 3 refactoring work introduced some regressions."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:24
# 4cbfab8835ce4aa2b164dbf79eabb00e
msgid "Django 1.5 alpha includes various `new features`_ and some minor `backwards incompatible changes`_. There are also some features that have been dropped, which are detailed in :doc:`our deprecation plan </internals/deprecation>`, and we've `begun the deprecation process for some features`_."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:64
# 4ce0a919c6894c5881d2a4c284bdce73
msgid "Wherever possible we try to introduce new features in a backwards-compatible manner per :doc:`our API stability policy </misc/api-stability>` policy. However, as with previous releases, Django 1.5 ships with some minor `backwards incompatible changes`_; people upgrading from previous versions of Django should read that list carefully."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:85
# 0d9519600aa341dcb110b0c00fb48542
msgid "Django 1.5 requires Python 2.6.5 or above, though we **highly recommended** Python 2.7.3 or above. Support for Python 2.5 and below has been dropped."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:103
# faaca099055344a7a52af3d106ef395a
msgid "Django 1.5 introduces support for Python 3 - specifically, Python 3.2 and above. This comes in the form of a **single** codebase; you don't need to install a different version of Django on Python 3. This means that you can write application targeted for just Python 2, just Python 3, or single applications that support both platforms."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:109
#: ../../releases/1.5-beta-1.txt:105
# 0de7e6a923f24fa89918ac890a4fba19
# 277279b0abd8433cad409b0138f3e97b
msgid "However, we're labeling this support \"experimental\" for now: although it's received extensive testing via our automated test suite, it's received very little real-world testing. We've done our best to eliminate bugs, but we can't be sure we covered all possible uses of Django. Further, Django's more than a web framework; it's an ecosystem of pluggable components. At this point, very few third-party applications have been ported to Python 3, so it's unlikely that a real-world application will have all its dependencies satisfied under Python 3."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:132
# fcf1eb6877f94aa49efe91c4310228dd
msgid "In Django 1.5, you can now use your own model as the store for user-related data. If your project needs a username with more than 30 characters, or if you want to store usernames in a format other than first name/last name, or you want to put custom profile information onto your User object, you can now do so."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:154
#: ../../releases/1.5-beta-1.txt:150
# d0b186b422ca4ce5b3b88ff7eb2a9fdd
# b331a77a80594bc194b3dd136b7c43f5
msgid "Deferred instances (those loaded by .only() or .defer()) will automatically save just the loaded fields. If any field is set manually after load, that field will also get updated on save."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:396
# d3b9b24b6eac4f3f9b06e29b08c29984
msgid "As explained below, Django 1.5 deprecates ``django.utils.simplejson`` in favor of Python 2.6's built-in :mod:`json` module. In theory, this change is harmless. Unfortunately, because of incompatibilities between versions of :mod:`simplejson`, it may trigger errors in some circumstances."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:594
# 85abe076b202438d8b1b1d48005eefbe
msgid "Django 1.5 deprecates the ability to stream a response by passing an iterator to :class:`~django.http.HttpResponse`. If you rely on this behavior, switch to :class:`~django.http.StreamingHttpResponse`. See above for more details."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:609
# 8eb69a55fe63468da1b596f1810fff2e
msgid "Unfortunately, this change might have unwanted side-effects, because of incompatibilities between versions of :mod:`simplejson` -- see the backwards- incompatible changes section. If you rely on features added to :mod:`simplejson` after it became Python's :mod:`json`, you should import :mod:`simplejson` explicitly."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:629
#: ../../releases/1.5-beta-1.txt:682
# 9c9779ced5be4e26a8a88af95f4e805d
# dfd8835244974d839c551169f4dc0bf9
msgid "``django.utils.markup``"
msgstr ""

#: ../../releases/1.5-beta-1.txt:3
# b863f33fbece4725b34fbe85d0abfcbe
msgid "Django 1.5 beta release notes"
msgstr ""

#: ../../releases/1.5-beta-1.txt:5
# b7bcd5b7e75c48faa5e07d37ba09acd6
msgid "November 27, 2012."
msgstr ""

#: ../../releases/1.5-beta-1.txt:7
# ab3784686e224a12a1dacce5009ecce0
msgid "Welcome to Django 1.5 beta!"
msgstr ""

#: ../../releases/1.5-beta-1.txt:9
# 94bd9c0a406f48a2ab0b4269d63663cd
msgid "This is the second in a series of preview/development releases leading up to the eventual release of Django 1.5, scheduled for Decemeber 2012. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.5 release."
msgstr ""

#: ../../releases/1.5-beta-1.txt:53
# 501c5aaeb74d4884b61407e6ea96e663
msgid "Better `support for streaming responses <#explicit-streaming-responses-beta-1>`_ via the new  :class:`~django.http.StreamingHttpResponse` response class."
msgstr ""

#: ../../releases/1.5-beta-1.txt:421
# 0ff64bf1df0d4204bb6e86c7a79cc059
msgid ":ref:`As explained below <simplejson-deprecation-beta-1>`, Django 1.5 deprecates ``django.utils.simplejson`` in favor of Python 2.6's built-in :mod:`json` module. In theory, this change is harmless. Unfortunately, because of incompatibilities between versions of :mod:`simplejson`, it may trigger errors in some circumstances."
msgstr ""

#: ../../releases/1.5-beta-1.txt:646
# aaa898c7a32b4a6ba45086cd74200da1
msgid "Django 1.5 deprecates the ability to stream a response by passing an iterator to :class:`~django.http.HttpResponse`. If you rely on this behavior, switch to :class:`~django.http.StreamingHttpResponse`. See :ref:`explicit-streaming-responses-beta-1` above."
msgstr ""

#: ../../releases/1.5-beta-1.txt:662
# 57b33f55e3274169bebe30511e6a42f7
msgid "Unfortunately, this change might have unwanted side-effects, because of incompatibilities between versions of :mod:`simplejson` -- see the :ref:`backwards-incompatible changes <simplejson-incompatibilities-beta-1>` section. If you rely on features added to :mod:`simplejson` after it became Python's :mod:`json`, you should import :mod:`simplejson` explicitly."
msgstr ""

#: ../../releases/1.5.1.txt:3
# 5346abdeefd544af9daed57a24a3e5fe
msgid "Django 1.5.1 release notes"
msgstr ""

#: ../../releases/1.5.1.txt:5
# 44a3fb9d5e06455da1eb39d52c572b1b
msgid "*March 28, 2013*"
msgstr ""

#: ../../releases/1.5.1.txt:7
# 4ff9802c8aae499fa4e560a9ebe06ba4
msgid "This is Django 1.5.1, a bugfix release for Django 1.5. It's completely backwards compatible with Django 1.5, but includes a handful of fixes."
msgstr ""

#: ../../releases/1.5.1.txt:10
# bf24a3ec9ec947cf95468b539fa269a0
msgid "The biggest fix is for a memory leak introduced in Django 1.5. Under certain circumstances, repeated iteration over querysets could leak memory - sometimes quite a bit of it. If you'd like more information, the details are in `our ticket tracker`__ (and in `a related issue`__ in Python itself)."
msgstr ""

#: ../../releases/1.5.1.txt:18
# 1f2355f79bf54a618f41850f517e597b
msgid "If you've noticed memory problems under Django 1.5, upgrading to 1.5.1 should fix those issues."
msgstr ""

#: ../../releases/1.5.1.txt:21
# a66dd5f452e44031b2ce6b29ce96d5b9
msgid "Django 1.5.1 also includes a couple smaller fixes:"
msgstr ""

#: ../../releases/1.5.1.txt:23
# b152c88cb62942c7a594fd96f255c119
msgid "Module-level warnings emitted during tests are no longer silently hidden (`#18985`__)."
msgstr ""

#: ../../releases/1.5.1.txt:25
# 99ba4b4c0b254257966ffa79f6dcf678
msgid "Prevented filtering on password hashes in the user admin (`#20078`__)."
msgstr ""

#: ../../releases/1.5.2.txt:3
# 5b92101c945942a8a6cfa89da9ae1fc6
msgid "Django 1.5.2 release notes"
msgstr ""

#: ../../releases/1.5.2.txt:7
# 08a3513a7e4d43b9b1bf1cf2c472a872
msgid "This is Django 1.5.2, a bugfix and security release for Django 1.5."
msgstr ""

#: ../../releases/1.5.2.txt:24
# 7d2eb8cf0d4a4e4b9d9e960ad23174ae
msgid "XSS vulnerability in :mod:`django.contrib.admin`"
msgstr ""

#: ../../releases/1.5.2.txt:26
# 787013dd4f1748b0b878c4f361b1ba9e
msgid "If a :class:`~django.db.models.URLField` is used in Django 1.5, it displays the current value of the field and a link to the target on the admin change page. The display routine of this widget was flawed and allowed for XSS."
msgstr ""

#: ../../releases/1.5.2.txt:33
# bda8b44cf825477f845c1a56beef78ff
msgid "Fixed a crash with :meth:`~django.db.models.query.QuerySet.prefetch_related` (#19607) as well as some ``pickle`` regressions with ``prefetch_related`` (#20157 and #20257)."
msgstr ""

#: ../../releases/1.5.2.txt:36
# eefa6b1a4f614bbbbaa1bc76553a9c84
msgid "Fixed a regression in :mod:`django.contrib.gis` in the Google Map output on Python 3 (#20773)."
msgstr ""

#: ../../releases/1.5.2.txt:38
# 7ed378f7a0984774b8aa89be90383c59
msgid "Made ``DjangoTestSuiteRunner.setup_databases`` properly handle aliases for the default database (#19940) and prevented ``teardown_databases`` from attempting to tear down aliases (#20681)."
msgstr ""

#: ../../releases/1.5.2.txt:41
# 7481e7ab46364a95a2e249d6b31ed195
msgid "Fixed the ``django.core.cache.backends.memcached.MemcachedCache`` backend's ``get_many()`` method on Python 3 (#20722)."
msgstr ""

#: ../../releases/1.5.2.txt:43
# 1d3391e4562e4f64afdac808feea9a42
msgid "Fixed :mod:`django.contrib.humanize` translation syntax errors. Affected languages: Mexican Spanish, Mongolian, Romanian, Turkish (#20695)."
msgstr ""

#: ../../releases/1.5.2.txt:45
# ca0646a10492418895db0daff5c3081e
msgid "Added support for wheel packages (#19252)."
msgstr ""

#: ../../releases/1.5.2.txt:46
# 9449d096b3b843138d46967cb1b08493
msgid "The CSRF token now rotates when a user logs in."
msgstr ""

#: ../../releases/1.5.2.txt:47
# bbbe2ab119194bc29c049f58e87d9b38
msgid "Some Python 3 compatibility fixes including #20212 and #20025."
msgstr ""

#: ../../releases/1.5.2.txt:48
# 7c1163786a9b418183837a9c07788742
msgid "Fixed some rare cases where :meth:`~django.db.models.query.QuerySet.get` exceptions recursed infinitely (#20278)."
msgstr ""

#: ../../releases/1.5.2.txt:50
# 5c491470e6344c1ab803784d352ecb00
msgid ":djadmin:`makemessages` no longer crashes with ``UnicodeDecodeError`` (#20354)."
msgstr ""

#: ../../releases/1.5.2.txt:52
# 9ad7468f55cd41038afdba6fd5a8d51b
msgid "Fixed ``geojson`` detection with Spatialite."
msgstr ""

#: ../../releases/1.5.2.txt:53
# 1d992b783e304853ad8c18a37a529690
msgid ":meth:`~django.test.SimpleTestCase.assertContains` once again works with binary content (#20237)."
msgstr ""

#: ../../releases/1.5.2.txt:55
# 4cc2f90f925c447d9722df6595991cc3
msgid "Fixed :class:`~django.db.models.ManyToManyField` if it has a unicode ``name`` parameter (#20207)."
msgstr ""

#: ../../releases/1.5.2.txt:57
# a85370a931e34d23b03fc0a35121723d
msgid "Ensured that the WSGI request's path is correctly based on the ``SCRIPT_NAME`` environment variable or the :setting:`FORCE_SCRIPT_NAME` setting, regardless of whether or not either has a trailing slash (#20169)."
msgstr ""

#: ../../releases/1.5.3.txt:3
# 35a36db022a54174894069a6f92e4452
msgid "Django 1.5.3 release notes"
msgstr ""

#: ../../releases/1.5.3.txt:7
# c86b7393364347eca2357c1a635aedf1
msgid "This is Django 1.5.3, the third release in the Django 1.5 series. It addresses one security issue and also contains an opt-in feature to enhance the security of :mod:`django.contrib.sessions`."
msgstr ""

#: ../../releases/1.5.3.txt:29
# 8be601fdf4ea4c65889f2651480bbdd4
msgid "Mitigating a remote-code execution vulnerability in :mod:`django.contrib.sessions`"
msgstr ""

#: ../../releases/1.5.3.txt:31
# 73f1c44502674558a1d71fad95ca11e1
msgid ":mod:`django.contrib.sessions` currently uses :mod:`pickle` to serialize session data before storing it in the backend. If you're using the :ref:`signed cookie session backend<cookie-session-backend>` and :setting:`SECRET_KEY` is known by an attacker (there isn't an inherent vulnerability in Django that would cause it to leak), the attacker could insert a string into his session which, when unpickled, executes arbitrary code on the server. The technique for doing so is simple and easily available on the internet. Although the cookie session storage signs the cookie-stored data to prevent tampering, a :setting:`SECRET_KEY` leak immediately escalates to a remote code execution vulnerability."
msgstr ""

#: ../../releases/1.5.3.txt:42
# 60c2b453aebb4be084418fa3cdc6d326
msgid "This attack can be mitigated by serializing session data using JSON rather than :mod:`pickle`. To facilitate this, Django 1.5.3 introduces a new setting, :setting:`SESSION_SERIALIZER`, to customize the session serialization format. For backwards compatibility, this setting defaults to using :mod:`pickle`. While JSON serialization does not support all Python objects like :mod:`pickle` does, we highly recommend switching to JSON-serialized values. Also, as JSON requires string keys, you will likely run into problems if you are using non-string keys in ``request.session``. See the :ref:`session_serialization` documentation for more details."
msgstr ""

#: ../../releases/1.5.4.txt:3
# 574c3946c75749b98978dce52a7a1570
msgid "Django 1.5.4 release notes"
msgstr ""

#: ../../releases/1.5.4.txt:7
# 2971d41e1faf468cbafa1f1abb7c5e9e
msgid "This is Django 1.5.4, the fourth release in the Django 1.5 series. It addresses two security issues and one bug."
msgstr ""

#: ../../releases/1.5.4.txt:19
# 62280202b29045f58330a184a737f0ce
msgid "As of 1.5.4, Django's authentication framework imposes a 4096-byte limit on passwords, and will fail authentication with any submitted password of greater length."
msgstr ""

#: ../../releases/1.5.4.txt:37
# 886744e76f804a588d40823f3fe6e05b
msgid "Fixed a bug that prevented a ``QuerySet`` that uses :meth:`~django.db.models.query.QuerySet.prefetch_related` from being pickled and unpickled more than once (the second pickling attempt raised an exception) (#21102)."
msgstr ""

#: ../../releases/1.5.5.txt:3
# 9808a7290ca043b693048d999151d364
msgid "Django 1.5.5 release notes"
msgstr ""

#: ../../releases/1.5.5.txt:7
# 4ff13d120b5d4552b16c6b4d613b682c
msgid "Django 1.5.5 fixes a couple security-related bugs and several other bugs in the 1.5 series."
msgstr ""

#: ../../releases/1.5.5.txt:13
# 07ea653aafe24663933829db760beb64
msgid "Django 1.5.4 imposes a 4096-byte limit on passwords in order to mitigate a denial-of-service attack through submission of bogus but extremely large passwords. In Django 1.5.5, we've reverted this change and instead improved the speed of our PBKDF2 algorithm by not rehashing the key on every iteration."
msgstr ""

#: ../../releases/1.5.5.txt:19
# 261d410130ba48fd8166e46d8f558aec
msgid "Properly rotate CSRF token on login"
msgstr ""

#: ../../releases/1.5.5.txt:21
# 4bfec129e34a49168b42f09c63be5201
msgid "This behavior introduced as a security hardening measure in Django 1.5.2 did not work properly and is now fixed."
msgstr ""

#: ../../releases/1.5.5.txt:28
# 55fdece26ddd419a84ee70f9b4695292
msgid "Fixed a Python 3 incompatability in ``django.utils.text.unescape_entities()`` (#21185)."
msgstr ""

#: ../../releases/1.5.5.txt:30
# 94d306cf89e64bcb80b3ab262aca94c7
msgid "Fixed a couple data corruption issues with ``QuerySet`` edge cases under Oracle and MySQL (#21203, #21126)."
msgstr ""

#: ../../releases/1.5.5.txt:32
# 34eb6e0d9be04d5f8265b13a75b8577f
msgid "Fixed crashes when using combinations of ``annotate()``, ``select_related()``, and ``only()`` (#16436)."
msgstr ""

#: ../../releases/1.5.5.txt:38
# 682d2446d08249e7be68db4c2e836858
msgid "The undocumented ``django.core.servers.basehttp.WSGIServerException`` has been removed. Use ``socket.error`` provided by the standard library instead."
msgstr ""

#: ../../releases/1.6.txt:3
# 541f8cd4ba31422ead63afc19fc8153c
msgid "Django 1.6 release notes - UNDER DEVELOPMENT"
msgstr ""

#: ../../releases/1.6.txt:7
# b5261eb69f82426a83c2f6afdf87eb42
msgid "Dedicated to Malcolm Tredinnick"
msgstr ""

#: ../../releases/1.6.txt:9
# 6125d65cea5c40e4963820d7b3513842
msgid "On March 17, 2013, the Django project and the free software community lost a very dear friend and developer."
msgstr ""

#: ../../releases/1.6.txt:12
# 3d51e6a2c2b640bfb961d5127d14c78c
msgid "Malcolm was a long-time contributor to Django, a model community member, a brilliant mind, and a friend. His contributions to Django — and to many other open source projects — are nearly impossible to enumerate. Many on the core Django team had their first patches reviewed by him; his mentorship enriched us. His consideration, patience, and dedication will always be an inspiration to us."
msgstr ""

#: ../../releases/1.6.txt:19
# 52c5db52a42b4c5cbfac2df2d2f91ca9
msgid "This release of Django is for Malcolm."
msgstr ""

#: ../../releases/1.6.txt:21
# 1e3fe1c7d575435ca854a9ae80e2bf1f
msgid "-- The Django Developers"
msgstr ""

#: ../../releases/1.6.txt:23
# 4131fa9bfeff450fb77346ae0ec6b161
msgid "Welcome to Django 1.6!"
msgstr ""

#: ../../releases/1.6.txt:25
# 34726b867775422a93fa92aff75b32b6
msgid "These release notes cover the `new features`_, as well as some `backwards incompatible changes`_ you'll want to be aware of when upgrading from Django 1.5 or older versions. We've also dropped some features, which are detailed in :doc:`our deprecation plan </internals/deprecation>`, and we've `begun the deprecation process for some features`_."
msgstr ""

#: ../../releases/1.6.txt:38
# 6bda6a5e4ed3432b8637d6e1aaf627f2
msgid "Django 1.6, like Django 1.5, requires Python 2.6.5 or above. Python 3 is also officially supported. We **highly recommend** the latest minor release for each supported Python series (2.6.X, 2.7.X, 3.2.X, and 3.3.X)."
msgstr ""

#: ../../releases/1.6.txt:42
# 1788398dea2e459c8449b3bf5a4d3025
msgid "Django 1.6 will be the final release series to support Python 2.6; beginning with Django 1.7, the minimum supported Python version will be 2.7."
msgstr ""

#: ../../releases/1.6.txt:46
# 945b4dbff94f429d8bc8f95e422965f0
msgid "What's new in Django 1.6"
msgstr ""

#: ../../releases/1.6.txt:49
# a1b6fbad6a95491bb8e3810c67f6d27c
msgid "Simplified default project and app templates"
msgstr ""

#: ../../releases/1.6.txt:51
# f7233651a6894e66b1e1c5a303b11a0b
msgid "The default templates used by :djadmin:`startproject` and :djadmin:`startapp` have been simplified and modernized. The :doc:`admin </ref/contrib/admin/index>` is now enabled by default in new projects; the :doc:`sites </ref/contrib/sites>` framework no longer is. :ref:`clickjacking prevention <clickjacking-prevention>` is now on and the database defaults to SQLite."
msgstr ""

#: ../../releases/1.6.txt:58
# 72c52c9f78da4c5083352b402d3cb6b7
msgid "If the default templates don't suit your tastes, you can use :ref:`custom project and app templates <custom-app-and-project-templates>`."
msgstr ""

#: ../../releases/1.6.txt:62
# a24500d5d25140abb3fa603bf369ec55
msgid "Improved transaction management"
msgstr ""

#: ../../releases/1.6.txt:64
# 9822ab27c8ea4881936d624b19fba243
msgid "Django's transaction management was overhauled. Database-level autocommit is now turned on by default. This makes transaction handling more explicit and should improve performance. The existing APIs were deprecated, and new APIs were introduced, as described in the :doc:`transaction management docs </topics/db/transactions>`."
msgstr ""

#: ../../releases/1.6.txt:70
# 56c80a97a1cf46928ff47d03ef84bcb0
msgid "Please review carefully the list of :ref:`known backwards-incompatibilities <transactions-upgrading-from-1.5>` to determine if you need to make changes in your code."
msgstr ""

#: ../../releases/1.6.txt:75
# 5fe9c6420c2e4c45805d0c889f1cde57
msgid "Persistent database connections"
msgstr ""

#: ../../releases/1.6.txt:77
# abdaefc74bf94e079ed189da1fce037d
msgid "Django now supports reusing the same database connection for several requests. This avoids the overhead of re-establishing a connection at the beginning of each request. For backwards compatibility, this feature is disabled by default. See :ref:`persistent-database-connections` for details."
msgstr ""

#: ../../releases/1.6.txt:83
# 2ff6337e82a542fbaa4c9a67cc46e559
msgid "Discovery of tests in any test module"
msgstr ""

#: ../../releases/1.6.txt:85
# 4a004f0600114776a59bb105a39e0f17
msgid "Django 1.6 ships with a new test runner that allows more flexibility in the location of tests. The previous runner (``django.test.simple.DjangoTestSuiteRunner``) found tests only in the ``models.py`` and ``tests.py`` modules of a Python package in :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../releases/1.6.txt:91
# 586b58654dbe41728c392f088825cfa7
msgid "The new runner (``django.test.runner.DiscoverRunner``) uses the test discovery features built into ``unittest2`` (the version of ``unittest`` in the Python 2.7+ standard library, and bundled with Django). With test discovery, tests can be located in any module whose name matches the pattern ``test*.py``."
msgstr ""

#: ../../releases/1.6.txt:96
# 46ab1e864010458face5045d1be26073
msgid "In addition, the test labels provided to ``./manage.py test`` to nominate specific tests to run must now be full Python dotted paths (or directory paths), rather than ``applabel.TestCase.test_method_name`` pseudo-paths. This allows running tests located anywhere in your codebase, rather than only in :setting:`INSTALLED_APPS`. For more details, see :doc:`/topics/testing/index`."
msgstr ""

#: ../../releases/1.6.txt:102
# c8e5059611284352acb0ebf456cc4674
msgid "This change is backwards-incompatible; see the :ref:`backwards-incompatibility notes<new-test-runner>`."
msgstr ""

#: ../../releases/1.6.txt:106
# 1e40786be5d345f18a1869c1b838b7b9
msgid "Time zone aware aggregation"
msgstr ""

#: ../../releases/1.6.txt:108
# 6b9e29816ed346a58f8c02bb9d2d4e29
msgid "The support for :doc:`time zones </topics/i18n/timezones>` introduced in Django 1.4 didn't work well with :meth:`QuerySet.dates() <django.db.models.query.QuerySet.dates>`: aggregation was always performed in UTC. This limitation was lifted in Django 1.6. Use :meth:`QuerySet.datetimes() <django.db.models.query.QuerySet.datetimes>` to perform time zone aware aggregation on a :class:`~django.db.models.DateTimeField`."
msgstr ""

#: ../../releases/1.6.txt:116
# ccd2dd21fe14419084b867d8e51a1a73
msgid "Support for savepoints in SQLite"
msgstr ""

#: ../../releases/1.6.txt:118
# 88df3d22a3004981aa45b3a9cb79fd3d
msgid "Django 1.6 adds support for savepoints in SQLite, with some :ref:`limitations <savepoints-in-sqlite>`."
msgstr ""

#: ../../releases/1.6.txt:122
# cb4b972c2ce549b1998b23ea32740082
msgid "``BinaryField`` model field"
msgstr ""

#: ../../releases/1.6.txt:124
# 06d5265adadf410590846311afb92209
msgid "A new :class:`django.db.models.BinaryField` model field allows storage of raw binary data in the database."
msgstr ""

#: ../../releases/1.6.txt:128
# f85c4ef6cefc42c98cde8cf7d49ea24c
msgid "GeoDjango form widgets"
msgstr ""

#: ../../releases/1.6.txt:130
# f3f8b87b8fce48aab4c136d701ccddc3
msgid "GeoDjango now provides :ref:`form fields and widgets <ref-gis-forms-api>` for its geo-specialized fields. They are OpenLayers-based by default, but they can be customized to use any other JS framework."
msgstr ""

#: ../../releases/1.6.txt:135
# 1fd6708addb14da887e1035ce48dc78d
msgid "``check`` management command added for verifying compatibility"
msgstr ""

#: ../../releases/1.6.txt:137
# 914fbe1982e043f0bc4b15cfecabb9e7
msgid "A :djadmin:`check` management command was added, enabling you to verify if your current configuration (currently oriented at settings) is compatible with the current version of Django."
msgstr ""

#: ../../releases/1.6.txt:142
# a163155e16ee4c93b96c9707390d6900
msgid ":meth:`Model.save() <django.db.models.Model.save()>` algorithm changed"
msgstr ""

#: ../../releases/1.6.txt:144
# 9c9bc80748a04277916f42c806376d02
msgid "The :meth:`Model.save() <django.db.models.Model.save()>` method now tries to directly ``UPDATE`` the database if the instance has a primary key value. Previously ``SELECT`` was performed to determine if ``UPDATE`` or ``INSERT`` were needed. The new algorithm needs only one query for updating an existing row while the old algorithm needed two. See :meth:`Model.save() <django.db.models.Model.save()>` for more details."
msgstr ""

#: ../../releases/1.6.txt:151
# dfa1216d6a6f4223b13cfab21f0454de
msgid "In some rare cases the database doesn't report that a matching row was found when doing an ``UPDATE``. An example is the PostgreSQL ``ON UPDATE`` trigger which returns ``NULL``. In such cases it is possible to set :attr:`django.db.models.Options.select_on_save` flag to force saving to use the old algorithm."
msgstr ""

#: ../../releases/1.6.txt:160
# e41dc1165f57462dab4d21fb1de0f661
msgid "Authentication backends can raise ``PermissionDenied`` to immediately fail the authentication chain."
msgstr ""

#: ../../releases/1.6.txt:163
# 56ebe702d0884179898e83fd84e0d81c
msgid "The ``HttpOnly`` flag can be set on the CSRF cookie with :setting:`CSRF_COOKIE_HTTPONLY`."
msgstr ""

#: ../../releases/1.6.txt:166
# b44c135f991946c19bc20b41adda0cb7
msgid "The :meth:`~django.test.TransactionTestCase.assertQuerysetEqual` now checks for undefined order and raises :exc:`~exceptions.ValueError` if undefined order is spotted. The order is seen as undefined if the given ``QuerySet`` isn't ordered and there are more than one ordered values to compare against."
msgstr ""

#: ../../releases/1.6.txt:171
# 6c8e3c942ed6481e99f444e20af576cc
msgid "Added :meth:`~django.db.models.query.QuerySet.earliest` for symmetry with :meth:`~django.db.models.query.QuerySet.latest`."
msgstr ""

#: ../../releases/1.6.txt:174
# 3a5e71a6107a49cfaec157aa483a9461
msgid "In addition to :lookup:`year`, :lookup:`month` and :lookup:`day`, the ORM now supports :lookup:`hour`, :lookup:`minute` and :lookup:`second` lookups."
msgstr ""

#: ../../releases/1.6.txt:177
# 55471f127bf8460a9c515cc2c82c7ed4
msgid "Django now wraps all PEP-249 exceptions."
msgstr ""

#: ../../releases/1.6.txt:179
# e0c2b8de17d84667927fcd6f978f3987
msgid "The default widgets for :class:`~django.forms.EmailField`, :class:`~django.forms.URLField`, :class:`~django.forms.IntegerField`, :class:`~django.forms.FloatField` and :class:`~django.forms.DecimalField` use the new type attributes available in HTML5 (``type='email'``, ``type='url'``, ``type='number'``). Note that due to erratic support of the ``number`` input type with localized numbers in current browsers, Django only uses it when numeric fields are not localized."
msgstr ""

#: ../../releases/1.6.txt:187
# 0f967ab1a5d344fab060a7e0a0fc95d9
msgid "The ``number`` argument for :ref:`lazy plural translations <lazy-plural-translations>` can be provided at translation time rather than at definition time."
msgstr ""

#: ../../releases/1.6.txt:191
# b1b0883234d540ceaa23d0b505ee7250
msgid "For custom management commands: Verification of the presence of valid settings in commands that ask for it by using the :attr:`~django.core.management.BaseCommand.can_import_settings` internal option is now performed independently from handling of the locale that should be active during the execution of the command. The latter can now be influenced by the new :attr:`~django.core.management.BaseCommand.leave_locale_alone` internal option. See :ref:`management-commands-and-locales` for more details."
msgstr ""

#: ../../releases/1.6.txt:200
# f6d27a0d2aa34fd3b1a1e4a6b4a1c19c
msgid "The :attr:`~django.views.generic.edit.DeletionMixin.success_url` of :class:`~django.views.generic.edit.DeletionMixin` is now interpolated with its ``object``\\'s ``__dict__``."
msgstr ""

#: ../../releases/1.6.txt:204
# 12b154d7974849e0bdd527806a8ed939
msgid ":class:`~django.http.HttpResponseRedirect` and :class:`~django.http.HttpResponsePermanentRedirect` now provide an ``url`` attribute (equivalent to the URL the response will redirect to)."
msgstr ""

#: ../../releases/1.6.txt:208
# df87b61dad634cab91c6a0223511957b
msgid "The ``MemcachedCache`` cache backend now uses the latest :mod:`pickle` protocol available."
msgstr ""

#: ../../releases/1.6.txt:211
# ed906fde892f402fb364519e289dfe52
msgid "Added :class:`~django.contrib.messages.views.SuccessMessageMixin` which provides a ``success_message`` attribute for :class:`~django.views.generic.edit.FormView` based classes."
msgstr ""

#: ../../releases/1.6.txt:215
# 73e24125217d439889513a7d0aff23b6
msgid "Added the :attr:`django.db.models.ForeignKey.db_constraint` and :attr:`django.db.models.ManyToManyField.db_constraint` options."
msgstr ""

#: ../../releases/1.6.txt:218
# 7c9d4aca00e14d5cbf230298cc89f703
msgid "The jQuery library embedded in the admin has been upgraded to version 1.9.1."
msgstr ""

#: ../../releases/1.6.txt:220
# 5ea23d6db6874078a717af2c3ede78fe
msgid "Syndication feeds (:mod:`django.contrib.syndication`) can now pass extra context through to feed templates using a new :meth:`Feed.get_context_data() <django.contrib.syndication.Feed.get_context_data>` callback."
msgstr ""

#: ../../releases/1.6.txt:225
# bb19ed7e649e4f9aade6e0d5a409fcc0
msgid "The admin list columns have a ``column-<field_name>`` class in the HTML so the columns header can be styled with CSS, e.g. to set a column width."
msgstr ""

#: ../../releases/1.6.txt:228
# 03658886e3164d7b8be4b34bf34a232d
msgid "The :ref:`isolation level<database-isolation-level>` can be customized under PostgreSQL."
msgstr ""

#: ../../releases/1.6.txt:231
# 4d71d133f27f4d4aa30dfb599cde1eda
msgid "The :ttag:`blocktrans` template tag now respects :setting:`TEMPLATE_STRING_IF_INVALID` for variables not present in the context, just like other template constructs."
msgstr ""

#: ../../releases/1.6.txt:235
# eb5939c2979b41c9b8ca6475aa6fb77e
msgid "``SimpleLazyObject``\\s will now present more helpful representations in shell debugging situations."
msgstr ""

#: ../../releases/1.6.txt:238
# 8e9d8c6ca10e49bba46ff2fd90661bbc
msgid "Generic :class:`~django.contrib.gis.db.models.GeometryField` is now editable with the OpenLayers widget in the admin."
msgstr ""

#: ../../releases/1.6.txt:241
# 8b7851fd229e49dcbffe4b07a75d4881
msgid "The documentation contains a :doc:`deployment checklist </howto/deployment/checklist>`."
msgstr ""

#: ../../releases/1.6.txt:244
# 0e9f79fbe1e24612affde2602ed7c850
msgid "The :djadmin:`diffsettings` command gained a ``--all`` option."
msgstr ""

#: ../../releases/1.6.txt:246
# 1fa84d6bf8de4a0fa24d86a7a403019f
msgid "``django.forms.fields.Field.__init__`` now calls ``super()``, allowing field mixins to implement ``__init__()`` methods that will reliably be called."
msgstr ""

#: ../../releases/1.6.txt:250
# 5c64abf1e85b4dc3a061e5bf332cb38a
msgid "The ``validate_max`` parameter was added to ``BaseFormSet`` and :func:`~django.forms.formsets.formset_factory`, and ``ModelForm`` and inline versions of the same.  The behavior of validation for formsets with ``max_num`` was clarified.  The previously undocumented behavior that hardened formsets against memory exhaustion attacks was documented, and the undocumented limit of the higher of 1000 or ``max_num`` forms was changed so it is always 1000 more than ``max_num``."
msgstr ""

#: ../../releases/1.6.txt:258
# 78c072ad9a104566841a77725b649caa
msgid "Added ``BCryptSHA256PasswordHasher`` to resolve the password truncation issue with bcrypt."
msgstr ""

#: ../../releases/1.6.txt:261
# e3eb301f12d04e938eda51c76f32747d
msgid "`Pillow`_ is now the preferred image manipulation library to use with Django. `PIL`_ is pending deprecation (support to be removed in Django 1.8). To upgrade, you should **first** uninstall PIL, **then** install Pillow."
msgstr ""

#: ../../releases/1.6.txt:268
# 372e37c943ee4cd2a1dd60d8e2c96131
msgid ":class:`~django.forms.ModelForm` accepts several new ``Meta`` options."
msgstr ""

#: ../../releases/1.6.txt:271
# 6a3b7c3a74d140e1ad747fd53cebce95
msgid "Fields included in the ``localized_fields`` list will be localized (by setting ``localize`` on the form field)."
msgstr ""

#: ../../releases/1.6.txt:273
# 6cd2c1a76fe541f7953478f026f87b86
msgid "The  ``labels``, ``help_texts`` and ``error_messages`` options may be used to customize the default fields, see :ref:`modelforms-overriding-default-fields` for details."
msgstr ""

#: ../../releases/1.6.txt:277
# 2ac54b73e55441219895ba4307d9d778
msgid "The ``choices`` argument to model fields now accepts an iterable of iterables instead of requiring an iterable of lists or tuples."
msgstr ""

#: ../../releases/1.6.txt:280
# 6e0d5f4b22ce4a07a53d77a9cbbe5e4f
msgid "The reason phrase can be customized in HTTP responses using :attr:`~django.http.HttpResponse.reason_phrase`."
msgstr ""

#: ../../releases/1.6.txt:283
# 06e46fddba0a470894e9fa84056e385f
msgid "When giving the URL of the next page for :func:`~django.contrib.auth.views.logout`, :func:`~django.contrib.auth.views.password_reset`, :func:`~django.contrib.auth.views.password_reset_confirm`, and :func:`~django.contrib.auth.views.password_change`, you can now pass URL names and they will be resolved."
msgstr ""

#: ../../releases/1.6.txt:290
# dd76a0bb62d8402598001bc8756cfb4e
msgid "The :djadmin:`dumpdata` ``manage.py`` command now has a :djadminopt:`--pks` option which will allow users to specify the primary keys of objects they want to dump. This option can only be used with one model."
msgstr ""

#: ../../releases/1.6.txt:294
# f733836f9f5d4ccb84e8c4e6e0e4a5df
msgid "Added ``QuerySet`` methods :meth:`~django.db.models.query.QuerySet.first` and :meth:`~django.db.models.query.QuerySet.last` which are convenience methods returning the first or last object matching the filters. Returns ``None`` if there are no objects matching."
msgstr ""

#: ../../releases/1.6.txt:299
# 0523f0dc98274d80be1fd19665b88081
msgid ":class:`~django.views.generic.base.View` and :class:`~django.views.generic.base.RedirectView` now support HTTP ``PATCH`` method."
msgstr ""

#: ../../releases/1.6.txt:303
# 994e6945933a42aeb2f9b8c0094f2c60
msgid ":class:`GenericForeignKey <django.contrib.contenttypes.generic.GenericForeignKey>` now takes an optional :attr:`~django.contrib.contenttypes.generic.GenericForeignKey.for_concrete_model` argument, which when set to ``False`` allows the field to reference proxy models. The default is ``True`` to retain the old behavior."
msgstr ""

#: ../../releases/1.6.txt:309
# 976934ae8249428ab630b975d7f19fad
msgid "The :class:`~django.middleware.locale.LocaleMiddleware` now stores the active language in session if it is not present there. This prevents loss of language settings after session flush, e.g. logout."
msgstr ""

#: ../../releases/1.6.txt:313
# 2720b989592243ada8efec5a6497cc26
msgid ":exc:`~django.core.exceptions.SuspiciousOperation` has been differentiated into a number of subclasses, and each will log to a matching named logger under the ``django.security`` logging hierarchy. Along with this change, a ``handler400`` mechanism and default view are used whenever a ``SuspiciousOperation`` reaches the WSGI handler to return an ``HttpResponseBadRequest``."
msgstr ""

#: ../../releases/1.6.txt:320
# 2619346179a44e74bd5d31144121155d
msgid "The :exc:`~django.core.exceptions.DoesNotExist` exception now includes a message indicating the name of the attribute used for the lookup."
msgstr ""

#: ../../releases/1.6.txt:323
# b75fb6fcf7664c6eb8c4f03529d48a8b
msgid "The :meth:`~django.db.models.query.QuerySet.get_or_create` method no longer requires at least one keyword argument."
msgstr ""

#: ../../releases/1.6.txt:326
# 77687abe554c49e290294e7de16c61fe
msgid "The :class:`~django.test.SimpleTestCase` class includes a new assertion helper for testing formset errors: :meth:`~django.test.SimpleTestCase.assertFormsetError`."
msgstr ""

#: ../../releases/1.6.txt:330
# bb575ceae2834b7c806c30e08730e939
msgid "The list of related fields added to a :class:`~django.db.models.query.QuerySet` by :meth:`~django.db.models.query.QuerySet.select_related` can be cleared using ``select_related(None)``."
msgstr ""

#: ../../releases/1.6.txt:335
# 90168c75c4114673a89dccc6ba10315e
msgid "The :meth:`~django.contrib.admin.InlineModelAdmin.get_extra` and :meth:`~django.contrib.admin.InlineModelAdmin.get_max_num` methods on :class:`~django.contrib.admin.InlineModelAdmin` may be overridden to customize the extra and maximum number of inline forms."
msgstr ""

#: ../../releases/1.6.txt:340
# 98dec01ea4da4beeac661abe704080fb
msgid "Formsets now have a :meth:`~django.forms.formsets.BaseFormSet.total_error_count` method."
msgstr ""

#: ../../releases/1.6.txt:343
# 3877605fbfd441548c87632e13b5a392
msgid ":class:`~django.forms.ModelForm` fields can now override error messages defined in model fields by using the :attr:`~django.forms.Field.error_messages` argument of a ``Field``'s constructor. To take advantage of this new feature with your custom fields, :ref:`see the updated recommendation <raising-validation-error>` for raising a ``ValidationError``."
msgstr ""

#: ../../releases/1.6.txt:350
# 7408854d54c04aa6be3664e3a69a85f4
msgid ":class:`~django.contrib.admin.ModelAdmin` now preserves filters on the list view after creating, editing or deleting an object. It's possible to restore the previous behavior of clearing filters by setting the :attr:`~django.contrib.admin.ModelAdmin.preserve_filters` attribute to ``False``."
msgstr ""

#: ../../releases/1.6.txt:355
# ef28fa801fb64cc9ab9ca7329db26966
msgid "Added :meth:`FormMixin.get_prefix<django.views.generic.edit.FormMixin.get_prefix>` (which returns :attr:`FormMixin.prefix<django.views.generic.edit.FormMixin.prefix>` by default) to allow customizing the :attr:`~django.forms.Form.prefix` of the form."
msgstr ""

#: ../../releases/1.6.txt:362
# 5d669333c0ae472eb8408fa1bf3e9750
msgid "Raw queries (``Manager.raw()`` or ``cursor.execute()``) can now use the \"pyformat\" parameter style, where placeholders in the query are given as ``'%(name)s'`` and the parameters are passed as a dictionary rather than a list (except on SQLite). This has long been possible (but not officially supported) on MySQL and PostgreSQL, and is now also available on Oracle."
msgstr ""

#: ../../releases/1.6.txt:368
# f176f3341c0947bd930b6d0dc838d745
msgid "The default iteration count for the PBKDF2 password hasher has been increased by 20%. This backwards compatible change will not affect existing passwords or users who have subclassed ``django.contrib.auth.hashers.PBKDF2PasswordHasher`` to change the default value. Passwords :ref:`will be upgraded <password-upgrades>` to use the new iteration count as necessary."
msgstr ""

#: ../../releases/1.6.txt:376
# b7f5e52252af42e5bf965cd2a65473ab
msgid "Backwards incompatible changes in 1.6"
msgstr ""

#: ../../releases/1.6.txt:387
# 425ee4a588c34d27ac4c98d584fe14a0
msgid "New transaction management model"
msgstr ""

#: ../../releases/1.6.txt:390
# 8b5dca2733594ed7b789617e7b13b85e
msgid "Behavior changes"
msgstr ""

#: ../../releases/1.6.txt:392
# 681d1eefd1fc45f1bc8b095ca22f022d
msgid "Database-level autocommit is enabled by default in Django 1.6. While this doesn't change the general spirit of Django's transaction management, there are a few known backwards-incompatibilities, described in the :ref:`transaction management docs <transactions-upgrading-from-1.5>`. You should review your code to determine if you're affected."
msgstr ""

#: ../../releases/1.6.txt:399
# bf11b2a243214e239dbca33c09eccbde
msgid "Savepoints and ``assertNumQueries``"
msgstr ""

#: ../../releases/1.6.txt:401
# 2b8ace962e0c4bcb9405ff68a820a905
msgid "The changes in transaction management may result in additional statements to create, release or rollback savepoints. This is more likely to happen with SQLite, since it didn't support savepoints until this release."
msgstr ""

#: ../../releases/1.6.txt:405
# dfa67ee56fe94cea9c6a79ea05f654fb
msgid "If tests using :meth:`~django.test.TransactionTestCase.assertNumQueries` fail because of a higher number of queries than expected, check that the extra queries are related to savepoints, and adjust the expected number of queries accordingly."
msgstr ""

#: ../../releases/1.6.txt:411
# 7ac105e95d084c49af31d2468e79e42c
msgid "Autocommit option for PostgreSQL"
msgstr ""

#: ../../releases/1.6.txt:413
# 8eeb5be5facd48fd868d76fdccbf83ee
msgid "In previous versions, database-level autocommit was only an option for PostgreSQL, and it was disabled by default. This option is now :ref:`ignored <postgresql-autocommit-mode>` and can be removed."
msgstr ""

#: ../../releases/1.6.txt:420
# f99d1b642bf94350bea77f9ead41c581
msgid "New test runner"
msgstr ""

#: ../../releases/1.6.txt:422
# 76495f556011447ba3d2425d56f338dc
msgid "In order to maintain greater consistency with Python's unittest module, the new test runner (``django.test.runner.DiscoverRunner``) does not automatically support some types of tests that were supported by the previous runner:"
msgstr ""

#: ../../releases/1.6.txt:426
# eccbe7f19d70468cb3421002faa514fe
msgid "Tests in ``models.py`` and ``tests/__init__.py`` files will no longer be found and run. Move them to a file whose name begins with ``test``."
msgstr ""

#: ../../releases/1.6.txt:429
# a5708502996444cfa463611928f8438a
msgid "Doctests will no longer be automatically discovered. To integrate doctests in your test suite, follow the `recommendations in the Python documentation`_."
msgstr ""

#: ../../releases/1.6.txt:432
# 357b9adfa5b74f13badf3c47822f1fac
msgid "Django bundles a modified version of the :mod:`doctest` module from the Python standard library (in ``django.test._doctest``) and includes some additional doctest utilities. These utilities are deprecated and will be removed in Django 1.8; doctest suites should be updated to work with the standard library's doctest module (or converted to unittest-compatible tests)."
msgstr ""

#: ../../releases/1.6.txt:438
# 92e815f0a6e84f8bb75efeba15108217
msgid "If you wish to delay updates to your test suite, you can set your :setting:`TEST_RUNNER` setting to ``django.test.simple.DjangoTestSuiteRunner`` to fully restore the old test behavior. ``DjangoTestSuiteRunner`` is deprecated but will not be removed from Django until version 1.8."
msgstr ""

#: ../../releases/1.6.txt:446
# 794d3de030934d77b8f5933983260585
msgid "Custom User models in tests"
msgstr ""

#: ../../releases/1.6.txt:448
# 3fbd269e6134436cb789ee8fef783eb1
msgid "The introduction of the new test runner has also slightly changed the way that test models are imported. As a result, any test that overrides ``AUTH_USER_MODEL`` to test behavior with one of Django's test user models ( :class:`~django.contrib.auth.tests.custom_user.CustomUser` and :class:`~django.contrib.auth.tests.custom_user.ExtensionUser`) must now explicitly import the User model in your test module::"
msgstr ""

#: ../../releases/1.6.txt:462
# 7ad4c8aae3b64037b9fe4701063c60c8
msgid "This import forces the custom user model to be registered. Without this import, the test will be unable to swap in the custom user model, and you will get an error reporting::"
msgstr ""

#: ../../releases/1.6.txt:469
# bf0658840f3749068f47eeb7418dabd1
msgid "Time zone-aware ``day``, ``month``, and ``week_day`` lookups"
msgstr ""

#: ../../releases/1.6.txt:471
# e8e83413abe1487cab72cb0e2ad12bf8
msgid "Django 1.6 introduces time zone support for :lookup:`day`, :lookup:`month`, and :lookup:`week_day` lookups when :setting:`USE_TZ` is ``True``. These lookups were previously performed in UTC regardless of the current time zone."
msgstr ""

#: ../../releases/1.6.txt:475
# f21e9b96f4254b7ab91e1a03a386610b
msgid "This requires :ref:`time zone definitions in the database <database-time-zone-definitions>`. If you're using SQLite, you must install pytz_. If you're using MySQL, you must install pytz_ and load the time zone tables with `mysql_tzinfo_to_sql`_."
msgstr ""

#: ../../releases/1.6.txt:484
# ba2732b56893457f85c1d69806dc8274
msgid "Addition of ``QuerySet.datetimes()``"
msgstr ""

#: ../../releases/1.6.txt:486
# 420fa457ee0e42e89d985430f25a626f
msgid "When the :doc:`time zone support </topics/i18n/timezones>` added in Django 1.4 was active, :meth:`QuerySet.dates() <django.db.models.query.QuerySet.dates>` lookups returned unexpected results, because the aggregation was performed in UTC. To fix this, Django 1.6 introduces a new API, :meth:`QuerySet.datetimes() <django.db.models.query.QuerySet.datetimes>`. This requires a few changes in your code."
msgstr ""

#: ../../releases/1.6.txt:494
# 905a248a138441b3a7058e0a0e88d730
msgid "``QuerySet.dates()`` returns ``date`` objects"
msgstr ""

#: ../../releases/1.6.txt:496
# d3898a91d5b5452985731552c86c90b2
msgid ":meth:`QuerySet.dates() <django.db.models.query.QuerySet.dates>` now returns a list of :class:`~datetime.date`. It used to return a list of :class:`~datetime.datetime`."
msgstr ""

#: ../../releases/1.6.txt:500
# 00f2423ec2ff428d89b3cac07741e3f9
msgid ":meth:`QuerySet.datetimes() <django.db.models.query.QuerySet.datetimes>` returns a list of :class:`~datetime.datetime`."
msgstr ""

#: ../../releases/1.6.txt:504
# 0a962f002a80498cb16aad3352ccd8bf
msgid "``QuerySet.dates()`` no longer usable on ``DateTimeField``"
msgstr ""

#: ../../releases/1.6.txt:506
# 6cb64c59c49d4bf6a7d5978e87d65796
msgid ":meth:`QuerySet.dates() <django.db.models.query.QuerySet.dates>` raises an error if it's used on :class:`~django.db.models.DateTimeField` when time zone support is active. Use :meth:`QuerySet.datetimes() <django.db.models.query.QuerySet.datetimes>` instead."
msgstr ""

#: ../../releases/1.6.txt:512
# b07682807b4140d488e2b78a571a3ed8
msgid "``date_hierarchy`` requires time zone definitions"
msgstr ""

#: ../../releases/1.6.txt:514
# 5ff5aad370874366b1597a054d892377
msgid "The :attr:`~django.contrib.admin.ModelAdmin.date_hierarchy` feature of the admin now relies on :meth:`QuerySet.datetimes() <django.db.models.query.QuerySet.datetimes>` when it's used on a :class:`~django.db.models.DateTimeField`."
msgstr ""

#: ../../releases/1.6.txt:519
# a9fa820a37b54bb784f511e7b758a949
msgid "This requires time zone definitions in the database when :setting:`USE_TZ` is ``True``. :ref:`Learn more <database-time-zone-definitions>`."
msgstr ""

#: ../../releases/1.6.txt:523
# a96744537c9648bd990fdeae7b9d4438
msgid "``date_list`` in generic views requires time zone definitions"
msgstr ""

#: ../../releases/1.6.txt:525
# 6d7d7a491fd1452f96ed04c51f036a67
msgid "For the same reason, accessing ``date_list`` in the context of a date-based generic view requires time zone definitions in the database when the view is based on a :class:`~django.db.models.DateTimeField` and :setting:`USE_TZ` is ``True``. :ref:`Learn more <database-time-zone-definitions>`."
msgstr ""

#: ../../releases/1.6.txt:531
# 22cd88ff6a2d440db43642d0889e23a8
msgid "New lookups may clash with model fields"
msgstr ""

#: ../../releases/1.6.txt:533
# 1fd11cf962de4d2cb01b109d6fb30dff
msgid "Django 1.6 introduces ``hour``, ``minute``, and ``second`` lookups on :class:`~django.db.models.DateTimeField`. If you had model fields called ``hour``, ``minute``, or ``second``, the new lookups will clash with you field names. Append an explicit :lookup:`exact` lookup if this is an issue."
msgstr ""

#: ../../releases/1.6.txt:539
# c2185eb750704620942964e9b21b2e88
msgid "``BooleanField`` no longer defaults to ``False``"
msgstr ""

#: ../../releases/1.6.txt:541
# 7404758b1dd945efb810030979486a36
msgid "When a :class:`~django.db.models.BooleanField` doesn't have an explicit :attr:`~django.db.models.Field.default`, the implicit default value is ``None``. In previous version of Django, it was ``False``, but that didn't represent accurately the lack of a value."
msgstr ""

#: ../../releases/1.6.txt:546
# e495e404847c4a60ba5c0646610daceb
msgid "Code that relies on the default value being ``False`` may raise an exception when saving new model instances to the database, because ``None`` isn't an acceptable value for a :class:`~django.db.models.BooleanField`. You should either specify ``default=False`` in the field definition, or ensure the field is set to ``True`` or ``False`` before saving the object."
msgstr ""

#: ../../releases/1.6.txt:553
# 64c9ddf9d82a4e258c2856bbe964bc05
msgid "Translations and comments in templates"
msgstr ""

#: ../../releases/1.6.txt:556
# 6db8b9ef63b14aa185f1842c541724c7
msgid "Extraction of translations after comments"
msgstr ""

#: ../../releases/1.6.txt:558
# d8dc6053b1ba488f907d9edc8a21a0b7
msgid "Extraction of translatable literals from templates with the :djadmin:`makemessages` command now correctly detects i18n constructs when they are located after a ``{#`` / ``#}``-type comment on the same line. E.g.:"
msgstr ""

#: ../../releases/1.6.txt:567
# abb771f1f50d436ca8fd5cb63538c145
msgid "Location of translator comments"
msgstr ""

#: ../../releases/1.6.txt:569
# e01116f3fc8244878dfc294dabed1771
msgid ":ref:`translator-comments-in-templates` specified using ``{#`` / ``#}`` need to be at the end of a line. If they are not, the comments are ignored and :djadmin:`makemessages` will generate a warning. For example:"
msgstr ""

#: ../../releases/1.6.txt:580
# 00a086bb94284180baf427b9b1c10915
msgid "Quoting in :func:`~django.core.urlresolvers.reverse`"
msgstr ""

#: ../../releases/1.6.txt:582
# 3db7790d993d430ba9756ff40c5e0b6f
msgid "When reversing URLs, Django didn't apply :func:`~django.utils.http.urlquote` to arguments before interpolating them in URL patterns. This bug is fixed in Django 1.6. If you worked around this bug by applying URL quoting before passing arguments to :func:`~django.core.urlresolvers.reverse`, this may result in double-quoting. If this happens, simply remove the URL quoting from your code."
msgstr ""

#: ../../releases/1.6.txt:590
# 49308e13256844e4912e8fe064c54203
msgid "Storage of IP addresses in the comments app"
msgstr ""

#: ../../releases/1.6.txt:592
# 4eee6d21a9734c64823b4f0f2f7e38bb
msgid "The :doc:`comments </ref/contrib/comments/index>` app now uses a ``GenericIPAddressField`` for storing commenters' IP addresses, to support comments submitted from IPv6 addresses. Until now, it stored them in an ``IPAddressField``, which is only meant to support IPv4. When saving a comment made from an IPv6 address, the address would be silently truncated on MySQL databases, and raise an exception on Oracle. You will need to change the column type in your database to benefit from this change."
msgstr ""

#: ../../releases/1.6.txt:600
# a1319c9f4f5c4443827b320f7e47dbef
msgid "For MySQL, execute this query on your project's database:"
msgstr ""

#: ../../releases/1.6.txt:606
# 4453fd262ef1462d8226eb287d4e189b
msgid "For Oracle, execute this query:"
msgstr ""

#: ../../releases/1.6.txt:612
# 63b0549eccb64ff9a41539db8ef63ab3
msgid "If you do not apply this change, the behavior is unchanged: on MySQL, IPv6 addresses are silently truncated; on Oracle, an exception is generated. No database change is needed for SQLite or PostgreSQL databases."
msgstr ""

#: ../../releases/1.6.txt:617
# 1ac4557d4d2545a38607289ec341141b
msgid "Percent literals in ``cursor.execute`` queries"
msgstr ""

#: ../../releases/1.6.txt:619
# 7c6bcb2028684c2c99ddf86005be07e9
msgid "When you are running raw SQL queries through the :ref:`cursor.execute <executing-custom-sql>` method, the rule about doubling percent literals (``%``) inside the query has been unified. Past behavior depended on the database backend. Now, across all backends, you only need to double literal percent characters if you are also providing replacement parameters. For example::"
msgstr ""

#: ../../releases/1.6.txt:632
# c04c7214036d4e6fa4da0d372bf88702
msgid "``SQLite`` users need to check and update such queries."
msgstr ""

#: ../../releases/1.6.txt:637
# 7288087dce48405397d0bf01534d4a9c
msgid "Help text of model form fields for ManyToManyField fields"
msgstr ""

#: ../../releases/1.6.txt:639
# e168f95c2ddf4118bd27e2df3d861e90
msgid "HTML rendering of model form fields corresponding to :class:`~django.db.models.ManyToManyField` ORM model fields used to get the hard-coded sentence"
msgstr ""

#: ../../releases/1.6.txt:643
# df2296391bcc4e338a9e4cd1e13f2cc8
msgid "*Hold down \"Control\", or \"Command\" on a Mac, to select more than one.*"
msgstr ""

#: ../../releases/1.6.txt:645
# e8f2d7a5d9034c909eed91386798ad03
msgid "(or its translation to the active locale) imposed as the help legend shown along them if neither :attr:`model <django.db.models.Field.help_text>` nor :attr:`form <django.forms.Field.help_text>` ``help_text`` attribute was specified by the user (or appended to, if ``help_text`` was provided.)"
msgstr ""

#: ../../releases/1.6.txt:650
# 85fd4b8168124a5995caa8cb0c239ba7
msgid "This happened always, possibly even with form fields implementing user interactions that don't involve a keyboard and/or a mouse and was handled at the model field layer."
msgstr ""

#: ../../releases/1.6.txt:654
# 085c036e39904dc393c6c32e75705bcb
msgid "Starting with Django 1.6 this doesn't happen anymore."
msgstr ""

#: ../../releases/1.6.txt:656
# 30d39427a8bc492ca082fa0eb740ab7a
msgid "The change can affect you in a backward incompatible way if you employ custom model form fields and/or widgets for ``ManyToManyField`` model fields whose UIs do rely on the automatic provision of the mentioned hard-coded sentence. These form field implementations need to adapt to the new scenario by providing their own handling of the ``help_text`` attribute."
msgstr ""

#: ../../releases/1.6.txt:662
# f32877a12e434ae48494114d69bc360c
msgid "Applications that use Django :doc:`model form </topics/forms/modelforms>` facilities together with Django built-in form :doc:`fields </ref/forms/fields>` and :doc:`widgets </ref/forms/widgets>` aren't affected but need to be aware of what's described in :ref:`m2m-help_text-deprecation` below."
msgstr ""

#: ../../releases/1.6.txt:667
# 04904241bdf54784ae2818b8537ed8e1
msgid "This is because, as an ad-hoc temporary backward-compatibility provision, the described non-standard behavior has been preserved but moved to the model form field layer and occurs only when the associated widget is :class:`~django.forms.SelectMultiple` or selected subclasses."
msgstr ""

#: ../../releases/1.6.txt:673
# 2a6a294efc384e309fa1a300025c796e
msgid "QuerySet iteration"
msgstr ""

#: ../../releases/1.6.txt:675
# 14876e0be0cb400dbf6789fc3a7ab740
msgid "The ``QuerySet`` iteration was changed to immediately convert all fetched rows to ``Model`` objects. In Django 1.5 and earlier the fetched rows were converted to ``Model`` objects in chunks of 100."
msgstr ""

#: ../../releases/1.6.txt:679
# fd31749f700144ca9b51d525eb71b47f
msgid "Existing code will work, but the amount of rows converted to objects might change in certain use cases. Such usages include partially looping over a queryset or any usage which ends up doing ``__bool__`` or ``__contains__``."
msgstr ""

#: ../../releases/1.6.txt:684
# 46896d40488541fd9c2dfb37901b5a77
msgid "Notably most database backends did fetch all the rows in one go already in 1.5."
msgstr ""

#: ../../releases/1.6.txt:687
# 0051cd5dfc0e4ac880fbb6daf9fa0040
msgid "It is still possible to convert the fetched rows to ``Model`` objects lazily by using the :meth:`~django.db.models.query.QuerySet.iterator()` method."
msgstr ""

#: ../../releases/1.6.txt:692
# ea536d3bbd5540fdafa5dff5e6fc90df
msgid ":meth:`BoundField.label_tag<django.forms.BoundField.label_tag>` now includes the form's :attr:`~django.forms.Form.label_suffix`"
msgstr ""

#: ../../releases/1.6.txt:694
# a59b3564998f4f0c8330ee35f1fbaad8
msgid "This is consistent with how methods like :meth:`Form.as_p<django.forms.Form.as_p>` and :meth:`Form.as_ul<django.forms.Form.as_ul>` render labels."
msgstr ""

#: ../../releases/1.6.txt:698
# 72bfaa43d13d45bfac6888b5bf420a05
msgid "If you manually render ``label_tag`` in your templates:"
msgstr ""

#: ../../releases/1.6.txt:704
# 559dd4085bf74455bd5c529205d00c8e
msgid "you'll want to remove the colon (or whatever other separator you may be using) to avoid duplicating it when upgrading to Django 1.6. The following template in Django 1.6 will render identically to the above template in Django 1.5, except that the colon will appear inside the ``<label>`` element."
msgstr ""

#: ../../releases/1.6.txt:713
# 25d7b7f13b4744dcb5dca4aa2620fc47
msgid "will render something like:"
msgstr ""

#: ../../releases/1.6.txt:719
# b098d7a78e784fe1bf6ceea5daf48e05
msgid "If you want to keep the current behavior of rendering ``label_tag`` without the ``label_suffix``, instantiate the form ``label_suffix=''``. You can also customize the ``label_suffix`` on a per-field basis using the new ``label_suffix`` parameter on :meth:`~django.forms.BoundField.label_tag`."
msgstr ""

#: ../../releases/1.6.txt:725
# 0ab8ddb39a154affbf2acebd10837782
msgid "Admin views ``_changelist_filters`` GET parameter"
msgstr ""

#: ../../releases/1.6.txt:727
# 05558d33ef4544b399748d98c7beebab
msgid "To achieve preserving and restoring list view filters, admin views now pass around the `_changelist_filters` GET parameter. It's important that you account for that change if you have custom admin templates or if your tests rely on the previous URLs. If you want to revert to the original behavior you can set the :attr:`~django.contrib.admin.ModelAdmin.preserve_filters` attribute to ``False``."
msgstr ""

#: ../../releases/1.6.txt:735
# 1e7d133d6b8d4369b55ab824fc1c2a7f
msgid "``django.contrib.auth`` password reset uses base 64 encoding of ``User`` PK"
msgstr ""

#: ../../releases/1.6.txt:737
# 0b5ea54eab924dc58565448aa3f3abe2
msgid "Past versions of Django used base 36 encoding of the ``User`` primary key in the password reset views and URLs (:func:`django.contrib.auth.views.password_reset_confirm`). Base 36 encoding is sufficient if the user primary key is an integer, however, with the introduction of custom user models in Django 1.5, that assumption may no longer be true."
msgstr ""

#: ../../releases/1.6.txt:744
# 2788670f3e2442c1a65151bf75d3247c
msgid ":func:`django.contrib.auth.views.password_reset_confirm` has been modified to take a ``uidb64`` parameter instead of ``uidb36``. If you are reversing this view, for example in a custom ``password_reset_email.html`` template, be sure to update your code."
msgstr ""

#: ../../releases/1.6.txt:749
# 1406a2b46b324971a7ec6b25c8e1fd93
msgid "A temporary shim for :func:`django.contrib.auth.views.password_reset_confirm` that will allow password reset links generated prior to Django 1.6 to continue to work has been added to provide backwards compatibility; this will be removed in Django 1.7. Thus, as long as your site has been running Django 1.6 for more than :setting:`PASSWORD_RESET_TIMEOUT_DAYS`, this change will have no effect. If not (for example, if you upgrade directly from Django 1.5 to Django 1.7), then any password reset links generated before you upgrade to Django 1.7 or later won't work after the upgrade."
msgstr ""

#: ../../releases/1.6.txt:758
# 71c3e71a638f4fd5ae87d1a2be71b5e4
msgid "In addition, if you have any custom password reset URLs, you will need to update them by replacing ``uidb36`` with ``uidb64`` and the dash that follows that pattern with a slash. Also add ``_\\-`` to the list of characters that may match the ``uidb64`` pattern."
msgstr ""

#: ../../releases/1.6.txt:763
# 3f62631d32c140fe8c9fcdb6d2c82de9
msgid "For example::"
msgstr ""

#: ../../releases/1.6.txt:769
#: ../../releases/1.6.txt:881
# bd1a24ef6cca4cb8b48f396c63d8d7ec
# ed06f9aea50a468a991f5c35623182dd
msgid "becomes::"
msgstr ""

#: ../../releases/1.6.txt:775
# 3b1657a5d9714f26ad94d18767bfde56
msgid "You may also want to add the shim to support the old style reset links. Using the example above, you would modify the existing url by replacing ``django.contrib.auth.views.password_reset_confirm`` with ``django.contrib.auth.views.password_reset_confirm_uidb36`` and also remove the ``name`` argument so it doesn't conflict with the new url::"
msgstr ""

#: ../../releases/1.6.txt:784
# 71c000e9fde844d0ada2bd77a69bc056
msgid "You can remove this url pattern after your app has been deployed with Django 1.6 for :setting:`PASSWORD_RESET_TIMEOUT_DAYS`."
msgstr ""

#: ../../releases/1.6.txt:788
# 8d86fc117a70453f85617f39a5613e12
msgid "Default session serialization switched to JSON"
msgstr ""

#: ../../releases/1.6.txt:790
# fca569848dbb4f82b04d37ec92eb712e
msgid "Historically, :mod:`django.contrib.sessions` used :mod:`pickle` to serialize session data before storing it in the backend. If you're using the :ref:`signed cookie session backend<cookie-session-backend>` and :setting:`SECRET_KEY` is known by an attacker (there isn't an inherent vulnerability in Django that would cause it to leak), the attacker could insert a string into his session which, when unpickled, executes arbitrary code on the server. The technique for doing so is simple and easily available on the internet. Although the cookie session storage signs the cookie-stored data to prevent tampering, a :setting:`SECRET_KEY` leak immediately escalates to a remote code execution vulnerability."
msgstr ""

#: ../../releases/1.6.txt:801
# 1b5095ef1a454d19ac67c54b61b4de3e
msgid "This attack can be mitigated by serializing session data using JSON rather than :mod:`pickle`. To facilitate this, Django 1.5.3 introduced a new setting, :setting:`SESSION_SERIALIZER`, to customize the session serialization format. For backwards compatibility, this setting defaulted to using :mod:`pickle` in Django 1.5.3, but we've changed the default to JSON in 1.6. If you upgrade and switch from pickle to JSON, sessions created before the upgrade will be lost. While JSON serialization does not support all Python objects like :mod:`pickle` does, we highly recommend using JSON-serialized sessions. Also, as JSON requires string keys, you will likely run into problems if you are using non-string keys in ``request.session``. See the :ref:`session_serialization` documentation for more details."
msgstr ""

#: ../../releases/1.6.txt:816
# 23b5bd7a47b94f7cad582343d9b20e01
msgid "The ``django.db.models.query.EmptyQuerySet`` can't be instantiated any more - it is only usable as a marker class for checking if :meth:`~django.db.models.query.QuerySet.none` has been called: ``isinstance(qs.none(), EmptyQuerySet)``"
msgstr ""

#: ../../releases/1.6.txt:821
# 68211a94ae5e4f64a47786700c2829e5
msgid "If your CSS/Javascript code used to access HTML input widgets by type, you should review it as ``type='text'`` widgets might be now output as ``type='email'``, ``type='url'`` or ``type='number'`` depending on their corresponding field type."
msgstr ""

#: ../../releases/1.6.txt:826
# 176e8fe6f1744ff4aaf1e2380aa5c2f7
msgid "Form field's :attr:`~django.forms.Field.error_messages` that contain a placeholder should now always use a named placeholder (``\"Value '%(value)s' is too big\"`` instead of ``\"Value '%s' is too big\"``). See the corresponding field documentation for details about the names of the placeholders. The changes in 1.6 particularly affect :class:`~django.forms.DecimalField` and :class:`~django.forms.ModelMultipleChoiceField`."
msgstr ""

#: ../../releases/1.6.txt:833
# c32a0bd984f44f7e838c632a72647ec9
msgid "Some :attr:`~django.forms.Field.error_messages` for :class:`~django.forms.IntegerField`, :class:`~django.forms.EmailField`, :class:`~django.forms.IPAddressField`, :class:`~django.forms.GenericIPAddressField`, and :class:`~django.forms.SlugField` have been suppressed because they duplicated error messages already provided by validators tied to the fields."
msgstr ""

#: ../../releases/1.6.txt:841
# 3b960013574d4560852b79195622ebd4
msgid "There have been changes in the way timeouts are handled in cache backends. Explicitly passing in ``timeout=None`` no longer results in using the default timeout. It will now set a non-expiring timeout. Passing 0 into the memcache backend no longer uses the default timeout, and now will set-and-expire-immediately the value."
msgstr ""

#: ../../releases/1.6.txt:847
# 6888c4527d7d453f89f9ad3c7a631806
msgid "The ``django.contrib.flatpages`` app used to set custom HTTP headers for debugging purposes. This functionality was not documented and made caching ineffective so it has been removed, along with its generic implementation, previously available in ``django.core.xheaders``."
msgstr ""

#: ../../releases/1.6.txt:852
# 250fc14adada4f8cac5cb33e639e6748
msgid "The ``XViewMiddleware`` has been moved from ``django.middleware.doc`` to ``django.contrib.admindocs.middleware`` because it is an implementation detail of admindocs, proven not to be reusable in general."
msgstr ""

#: ../../releases/1.6.txt:856
# fa90ff8fbb3a49719a4c575267343b31
msgid ":class:`~django.db.models.GenericIPAddressField` will now only allow ``blank`` values if ``null`` values are also allowed. Creating a ``GenericIPAddressField`` where ``blank`` is allowed but ``null`` is not will trigger a model validation error because ``blank`` values are always stored as ``null``. Previously, storing a ``blank`` value in a field which did not allow ``null`` would cause a database exception at runtime."
msgstr ""

#: ../../releases/1.6.txt:863
# 5adf9c06b1004b3e87d5319801bee726
msgid "If a :class:`~django.core.urlresolvers.NoReverseMatch` exception is raised from a method when rendering a template, it is not silenced. For example, ``{{ obj.view_href }}`` will cause template rendering to fail if ``view_href()`` raises ``NoReverseMatch``. There is no change to the ``{% url %}`` tag, it causes template rendering to fail like always when ``NoReverseMatch`` is raised."
msgstr ""

#: ../../releases/1.6.txt:870
# f201065babaf427b8420c52992277108
msgid ":meth:`django.test.client.Client.logout` now calls :meth:`django.contrib.auth.logout` which will send the :func:`~django.contrib.auth.signals.user_logged_out` signal."
msgstr ""

#: ../../releases/1.6.txt:874
# d3177c71402c4f49bac53db627d069b6
msgid ":ref:`Authentication views <built-in-auth-views>` are now reversed by name, not their locations in ``django.contrib.auth.views``. If you are using the views without a ``name``, you should update your ``urlpatterns`` to use :meth:`~django.conf.urls.url` with the ``name`` parameter. For example::"
msgstr ""

#: ../../releases/1.6.txt:885
# 72ab9f10e94346ef8e5416e5e7fa300c
msgid ":class:`~django.views.generic.base.RedirectView` now has a `pattern_name` attribute which allows it to choose the target by reversing the URL."
msgstr ""

#: ../../releases/1.6.txt:888
# 5b603c193aa441d683724d70b3cf0804
msgid "In Django 1.4 and 1.5, a blank string was unintentionally not considered to be a valid password. This meant :meth:`~django.contrib.auth.models.User.set_password()` would save a blank password as an unusable password like :meth:`~django.contrib.auth.models.User.set_unusable_password()` does, and thus :meth:`~django.contrib.auth.models.User.check_password()` always returned ``False`` for blank passwords. This has been corrected in this release: blank passwords are now valid."
msgstr ""

#: ../../releases/1.6.txt:897
# e2d37c1e29d747d88a8b1d7fda1a8d92
msgid "The admin :attr:`~django.contrib.admin.ModelAdmin.changelist_view` previously accepted a ``pop`` GET parameter to signify it was to be displayed in a popup. This parameter has been renamed to ``_popup`` to be consistent with the rest of the admin views. You should update your custom templates if they use the previous parameter name."
msgstr ""

#: ../../releases/1.6.txt:903
# 4d00cfb00bd24c15a2cfe01d05c1ba1b
msgid ":meth:`~django.core.validators.validate_email` now accepts email addresses with ``localhost`` as the domain."
msgstr ""

#: ../../releases/1.6.txt:906
# ff8849029ae749b584a32990bc699939
msgid "The :djadminopt:`--keep-pot` option was added to :djadmin:`makemessages` to prevent django from deleting the temporary .pot file it generates before creating the .po file."
msgstr ""

#: ../../releases/1.6.txt:910
# e8178c4404884054b897210d34daa22d
msgid "The undocumented ``django.core.servers.basehttp.WSGIServerException`` has been removed. Use ``socket.error`` provided by the standard library instead. This change was also released in Django 1.5.5."
msgstr ""

#: ../../releases/1.6.txt:915
# 589fbc5ffb604ab9b15f679350c6c317
msgid "Features deprecated in 1.6"
msgstr ""

#: ../../releases/1.6.txt:918
# 16184bd987c14f5d8cffa7c4ade76777
msgid "Transaction management APIs"
msgstr ""

#: ../../releases/1.6.txt:920
# 90084c5e71f54eb083464e4b572564d5
msgid "Transaction management was completely overhauled in Django 1.6, and the current APIs are deprecated:"
msgstr ""

#: ../../releases/1.6.txt:923
# a58623d4a5f34a43a7ca7206f036c6f0
msgid "``django.middleware.transaction.TransactionMiddleware``"
msgstr ""

#: ../../releases/1.6.txt:924
# a9327832d6a245d287b39fa191807083
msgid "``django.db.transaction.autocommit``"
msgstr ""

#: ../../releases/1.6.txt:925
# abe2990b913a4d129ae8a01de3908eb7
msgid "``django.db.transaction.commit_on_success``"
msgstr ""

#: ../../releases/1.6.txt:926
# 8c21459a3d654b74af46f4f7f19e5adc
msgid "``django.db.transaction.commit_manually``"
msgstr ""

#: ../../releases/1.6.txt:927
# 7562846a80c844e3b46a864f3e02ca4e
msgid "the ``TRANSACTIONS_MANAGED`` setting"
msgstr ""

#: ../../releases/1.6.txt:929
# 5f999d88e42746cbbedb63402336ec2d
msgid "The reasons for this change and the upgrade path are described in the :ref:`transactions documentation <transactions-upgrading-from-1.5>`."
msgstr ""

#: ../../releases/1.6.txt:933
# f73ab299d82c4fb8afde21bb9972d62e
msgid "``django.contrib.comments``"
msgstr ""

#: ../../releases/1.6.txt:935
# 2e28773a293049ee80aa99e3ce3a6f4d
msgid "Django's comment framework has been deprecated and is no longer supported. It will be available in Django 1.6 and 1.7, and removed in Django 1.8. Most users will be better served with a custom solution, or a hosted product like Disqus__."
msgstr ""

#: ../../releases/1.6.txt:939
# 46392c780bba4623aedb3501c43bf786
msgid "The code formerly known as ``django.contrib.comments`` is `still available in an external repository`__."
msgstr ""

#: ../../releases/1.6.txt:946
# 7aa9f20ad29742eaa043c653b1ccdf45
msgid "Support for PostgreSQL versions older than 8.4"
msgstr ""

#: ../../releases/1.6.txt:948
# eb8547d932534833b3a22c7c1312dede
msgid "The end of upstream support periods was reached in December 2011 for PostgreSQL 8.2 and in February 2013 for 8.3. As a consequence, Django 1.6 sets 8.4 as the minimum PostgreSQL version it officially supports."
msgstr ""

#: ../../releases/1.6.txt:952
# d13fa43c16c841d798ab6ce4b3fdf63a
msgid "You're strongly encouraged to use the most recent version of PostgreSQL available, because of performance improvements and to take advantage of the native streaming replication available in PostgreSQL 9.x."
msgstr ""

#: ../../releases/1.6.txt:957
# 0b66c8d6ada44c86a61f1e787bff3ca8
msgid "Changes to :ttag:`cycle` and :ttag:`firstof`"
msgstr ""

#: ../../releases/1.6.txt:959
# 31531565aee54461b9b9cb9571b4785e
msgid "The template system generally escapes all variables to avoid XSS attacks. However, due to an accident of history, the :ttag:`cycle` and :ttag:`firstof` tags render their arguments as-is."
msgstr ""

#: ../../releases/1.6.txt:963
# facf4006ea1b4677a5ed2ddded816ea0
msgid "Django 1.6 starts a process to correct this inconsistency. The ``future`` template library provides alternate implementations of :ttag:`cycle` and :ttag:`firstof` that autoescape their inputs. If you're using these tags, you're encourage to include the following line at the top of your templates to enable the new behavior::"
msgstr ""

#: ../../releases/1.6.txt:975
# 0428559ad3d14d0ab8183e80d6cf03c0
msgid "The tags implementing the old behavior have been deprecated, and in Django 1.8, the old behavior will be replaced with the new behavior. To ensure compatibility with future versions of Django, existing templates should be modified to use the ``future`` versions."
msgstr ""

#: ../../releases/1.6.txt:980
# f1b3fe0dbb894df098af82e81841aaf7
msgid "If necessary, you can temporarily disable auto-escaping with :func:`~django.utils.safestring.mark_safe` or :ttag:`{% autoescape off %} <autoescape>`."
msgstr ""

#: ../../releases/1.6.txt:985
# 10c76965d77d44a3838858ce1bc1e70d
msgid "``CACHE_MIDDLEWARE_ANONYMOUS_ONLY`` setting"
msgstr ""

#: ../../releases/1.6.txt:987
# b207b688315142cd98e9d5690d647e10
msgid "``CacheMiddleware`` used to provide a way to cache requests only if they weren't made by a logged-in user. This mechanism was largely ineffective because the middleware correctly takes into account the ``Vary: Cookie`` HTTP header, and this header is being set on a variety of occasions, such as:"
msgstr ""

#: ../../releases/1.6.txt:992
# c343aa4f3a4f4ce6a7af5149abf6e737
msgid "accessing the session, or"
msgstr ""

#: ../../releases/1.6.txt:993
# 6cbe67bbc14a454e8805c5ee53de3469
msgid "using CSRF protection, which is turned on by default, or"
msgstr ""

#: ../../releases/1.6.txt:994
# 8234b3eee16b487883ff04efadc17bdf
msgid "using a client-side library which sets cookies, like `Google Analytics`__."
msgstr ""

#: ../../releases/1.6.txt:996
# 50d6a0e4fdfd4ab5bf6f33b3f37fc97f
msgid "This makes the cache effectively work on a per-session basis regardless of the ``CACHE_MIDDLEWARE_ANONYMOUS_ONLY`` setting."
msgstr ""

#: ../../releases/1.6.txt:1002
# bbb7f1ab083f4b398c8b1e784ce8de5d
msgid "``SEND_BROKEN_LINK_EMAILS`` setting"
msgstr ""

#: ../../releases/1.6.txt:1004
# c55d0c5cf17c40c5897eaa603a3e1c92
msgid ":class:`~django.middleware.common.CommonMiddleware` used to provide basic reporting of broken links by email when ``SEND_BROKEN_LINK_EMAILS`` is set to ``True``."
msgstr ""

#: ../../releases/1.6.txt:1008
# a7a02784acc34307b6ddfa15bfa8a302
msgid "Because of intractable ordering problems between :class:`~django.middleware.common.CommonMiddleware` and :class:`~django.middleware.locale.LocaleMiddleware`, this feature was split out into a new middleware: :class:`~django.middleware.common.BrokenLinkEmailsMiddleware`."
msgstr ""

#: ../../releases/1.6.txt:1014
# 53f1d594cd434fb083da8aa46101ee64
msgid "If you're relying on this feature, you should add ``'django.middleware.common.BrokenLinkEmailsMiddleware'`` to your :setting:`MIDDLEWARE_CLASSES` setting and remove ``SEND_BROKEN_LINK_EMAILS`` from your settings."
msgstr ""

#: ../../releases/1.6.txt:1020
# f544e28c7c834f2c8913cc660b5d6a26
msgid "``_has_changed`` method on widgets"
msgstr ""

#: ../../releases/1.6.txt:1022
# a641fc7a40164e12906678d353c53cf9
msgid "If you defined your own form widgets and defined the ``_has_changed`` method on a widget, you should now define this method on the form field itself."
msgstr ""

#: ../../releases/1.6.txt:1026
# 4d9343f350214a61a47531ecd38283e7
msgid "``module_name`` model _meta attribute"
msgstr ""

#: ../../releases/1.6.txt:1028
# 6637b6e113304a41a15503d0ff9c6d63
msgid "``Model._meta.module_name`` was renamed to ``model_name``. Despite being a private API, it will go through a regular deprecation path."
msgstr ""

#: ../../releases/1.6.txt:1032
# 59aa533fd6b844e89c65614b5ef0e2fa
msgid "``get_(add|change|delete)_permission`` model _meta methods"
msgstr ""

#: ../../releases/1.6.txt:1034
# cfdf6c8c820c4cb29398cb7658ef826c
msgid "``Model._meta.get_(add|change|delete)_permission`` methods were deprecated. Even if they were not part of the public API they'll also go through a regular deprecation path."
msgstr ""

#: ../../releases/1.6.txt:1039
# d4f1c1ac24134550808b336d9c5da731
msgid "``get_query_set`` and similar methods renamed to ``get_queryset``"
msgstr ""

#: ../../releases/1.6.txt:1041
# 0a6c55611f44478cacd9a3a8fc8f1ad4
msgid "Methods that return a ``QuerySet`` such as ``Manager.get_query_set`` or ``ModelAdmin.queryset`` have been renamed to ``get_queryset``."
msgstr ""

#: ../../releases/1.6.txt:1045
# f30d7c55253645b88eafe7c733902010
msgid "``shortcut`` view and URLconf"
msgstr ""

#: ../../releases/1.6.txt:1047
# aa58192f3d66437b870d8652066a668e
msgid "The ``shortcut`` view was moved from ``django.views.defaults`` to ``django.contrib.contenttypes.views`` shortly after the 1.0 release, but the old location was never deprecated. This oversight was corrected in Django 1.6 and you should now use the new location."
msgstr ""

#: ../../releases/1.6.txt:1052
# b1da2434966a447e9c24da86c2fd5c22
msgid "The URLconf ``django.conf.urls.shortcut`` was also deprecated. If you're including it in an URLconf, simply replace::"
msgstr ""

#: ../../releases/1.6.txt:1062
# a07b0b6b8a614e44ba932d3e139482c6
msgid "``ModelForm`` without ``fields`` or ``exclude``"
msgstr ""

#: ../../releases/1.6.txt:1064
# 1ec2d8d7cebb476e82e94b1429448d72
msgid "Previously, if you wanted a :class:`~django.forms.ModelForm` to use all fields on the model, you could simply omit the ``Meta.fields`` attribute, and all fields would be used."
msgstr ""

#: ../../releases/1.6.txt:1068
# ea6446d6d1e845a8a537b34d4538c03d
msgid "This can lead to security problems where fields are added to the model and, unintentionally, automatically become editable by end users. In some cases, particular with boolean fields, it is possible for this problem to be completely invisible. This is a form of `Mass assignment vulnerability <http://en.wikipedia.org/wiki/Mass_assignment_vulnerability>`_."
msgstr ""

#: ../../releases/1.6.txt:1074
# e6a23101e34549b9ab75faf6b345d03b
msgid "For this reason, this behavior is deprecated, and using the ``Meta.exclude`` option is strongly discouraged. Instead, all fields that are intended for inclusion in the form should be listed explicitly in the ``fields`` attribute."
msgstr ""

#: ../../releases/1.6.txt:1078
# 446b3c0d111a4887b01c194ca0b4c2ef
msgid "If this security concern really does not apply in your case, there is a shortcut to explicitly indicate that all fields should be used - use the special value ``\"__all__\"`` for the fields attribute::"
msgstr ""

#: ../../releases/1.6.txt:1087
# dae23d33f19c4fefa69f16ea682be5cf
msgid "If you have custom ``ModelForms`` that only need to be used in the admin, there is another option. The admin has its own methods for defining fields (``fieldsets`` etc.), and so adding a list of fields to the ``ModelForm`` is redundant. Instead, simply omit the ``Meta`` inner class of the ``ModelForm``, or omit the ``Meta.model`` attribute. Since the ``ModelAdmin`` subclass knows which model it is for, it can add the necessary attributes to derive a functioning ``ModelForm``. This behavior also works for earlier Django versions."
msgstr ""

#: ../../releases/1.6.txt:1097
# 1ccf0dfc37fa46b3966c10d9c48cbef2
msgid "``UpdateView`` and ``CreateView`` without explicit fields"
msgstr ""

#: ../../releases/1.6.txt:1099
# 1a3ac1cb145d46ab8cfcbb5fb5b9ba5f
msgid "The generic views :class:`~django.views.generic.edit.CreateView` and :class:`~django.views.generic.edit.UpdateView`, and anything else derived from :class:`~django.views.generic.edit.ModelFormMixin`, are vulnerable to the security problem described in the section above, because they can automatically create a ``ModelForm`` that uses all fields for a model."
msgstr ""

#: ../../releases/1.6.txt:1105
# 86d3c3a16c924a6ab7343f72cd3c4474
msgid "For this reason, if you use these views for editing models, you must also supply the ``fields`` attribute (new in Django 1.6), which is a list of model fields and works in the same way as the :class:`~django.forms.ModelForm` ``Meta.fields`` attribute. Alternatively, you can set set the ``form_class`` attribute to a ``ModelForm`` that explicitly defines the fields to be used. Defining an ``UpdateView`` or ``CreateView`` subclass to be used with a model but without an explicit list of fields is deprecated."
msgstr ""

#: ../../releases/1.6.txt:1116
# 6a1bb9198f744f299768d353e3654392
msgid "Munging of help text of model form fields for ``ManyToManyField`` fields"
msgstr ""

#: ../../releases/1.6.txt:1118
# a58c435f392d4ee790435e4bb6493863
msgid "All special handling of the ``help_text`` attribute of ``ManyToManyField`` model fields performed by standard model or model form fields as described in :ref:`m2m-help_text` above is deprecated and will be removed in Django 1.8."
msgstr ""

#: ../../releases/1.6.txt:1122
# 5fff4d22c9d64e6ea6ed65e40409ff51
msgid "Help text of these fields will need to be handled either by applications, custom form fields or widgets, just like happens with the rest of the model field types."
msgstr ""

#: ../../releases/index.txt:3
# bdbc841ecfeb462e93abd562383e81ef
msgid "Release notes"
msgstr ""

#: ../../releases/index.txt:5
# 9b4d2ccc4a3448be98f3ce921a443a1e
msgid "Release notes for the official Django releases. Each release note will tell you what's new in each version, and will also describe any backwards-incompatible changes made in that version."
msgstr ""

#: ../../releases/index.txt:9
# 5e3afc1bc8e44941b7a3ece5900e96c0
msgid "For those :doc:`upgrading to a new version of Django</howto/upgrade-version>`, you will need to check all the backwards-incompatible changes and :doc:`deprecated features</internals/deprecation>` for each 'final' release from the one after your current Django version, up to and including the new version."
msgstr ""

#: ../../releases/index.txt:16
# d797f62f8aa942479a48a298970948d3
msgid "Final releases"
msgstr ""

#: ../../releases/index.txt:21
# 306500578c3c486faaef3453c8a83e3e
msgid "1.6 release"
msgstr ""

#: ../../releases/index.txt:28
# ff107e3750b043c1a3712233e3f3952d
msgid "1.5 release"
msgstr ""

#: ../../releases/index.txt:40
# 84adc251b3c9477bbda0d246403cff4e
msgid "1.4 release"
msgstr ""

#: ../../releases/index.txt:56
# 199ada55073f488b84069e4e73d14806
msgid "1.3 release"
msgstr ""

#: ../../releases/index.txt:70
# 5315bdeea7244dd993e668868ea6755b
msgid "1.2 release"
msgstr ""

#: ../../releases/index.txt:84
# 8fdda55ad82f445bb88ec59bf1cb916e
msgid "1.1 release"
msgstr ""

#: ../../releases/index.txt:94
# 40baf79949864e9a85375c2506484127
msgid "1.0 release"
msgstr ""

#: ../../releases/index.txt:103
# 1fea5e7576df468f8fe31bd906a2d0d1
msgid "Pre-1.0 releases"
msgstr ""

#: ../../releases/index.txt:111
# 3fec4a8adfee426a99e6390a5e732a52
msgid "Security releases"
msgstr ""

#: ../../releases/index.txt:113
# 4f2d8aa0695d46d7ac65bf4d9e0e8709
msgid "Whenever a security issue is disclosed via :doc:`Django's security policies </internals/security>`, appropriate release notes are now added to all affected release series."
msgstr ""

#: ../../releases/index.txt:117
# 0113bd39b1c34f22bec03a82277efd10
msgid "Additionally, :doc:`an archive of disclosed security issues </releases/security>` is maintained."
msgstr ""

#: ../../releases/index.txt:121
# 0fac4cabd0494c3ebcac265b4199b7cf
msgid "Development releases"
msgstr ""

#: ../../releases/index.txt:123
# 3dee9eef907e4d28be5e19a2b4f20270
msgid "These notes are retained for historical purposes. If you are upgrading between formal Django releases, you don't need to worry about these notes."
msgstr ""

#: ../../releases/security.txt:5
# bcebc12557fb418c8c0ee7eca185e1be
msgid "Archive of security issues"
msgstr ""

#: ../../releases/security.txt:7
# b96034cf60ac4899b73c4235bb4c1fdc
msgid "Django's development team is strongly committed to responsible reporting and disclosure of security-related issues, as outlined in :doc:`Django's security policies </internals/security>`."
msgstr ""

#: ../../releases/security.txt:11
# 75c8e20526e34479bff66ac3d1270855
msgid "As part of that commitment, we maintain the following historical list of issues which have been fixed and disclosed. For each issue, the list below includes the date, a brief description, the `CVE identifier <http://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures>`_ if applicable, a list of affected versions, a link to the full disclosure and links to the appropriate patch(es)."
msgstr ""

#: ../../releases/security.txt:18
# 7080a93a5fd0482ab3d4184203229b67
msgid "Some important caveats apply to this information:"
msgstr ""

#: ../../releases/security.txt:20
# 0e389c06ccc348e3a9457b40a9478196
msgid "Lists of affected versions include only those versions of Django which had stable, security-supported releases at the time of disclosure. This means older versions (whose security support had expired) and versions which were in pre-release (alpha/beta/RC) states at the time of disclosure may have been affected, but are not listed."
msgstr ""

#: ../../releases/security.txt:27
# 35803906913c4d71846abff27743f707
msgid "The Django project has on occasion issued security advisories, pointing out potential security problems which can arise from improper configuration or from other issues outside of Django itself. Some of these advisories have received CVEs; when that is the case, they are listed here, but as they have no accompanying patches or releases, only the description, disclosure and CVE will be listed."
msgstr ""

#: ../../releases/security.txt:37
# 7db4d9a9bc444f1499a5679ad071493b
msgid "Issues prior to Django's security process"
msgstr ""

#: ../../releases/security.txt:39
# b0f16d9cf8f642028b038c1090bf991f
msgid "Some security issues were handled before Django had a formalized security process in use. For these, new releases may not have been issued at the time and CVEs may not have been assigned."
msgstr ""

#: ../../releases/security.txt:45
# 6d1d420d6cea4e87a5d3bac2b96e3ccf
msgid "August 16, 2006 - CVE-2007-0404"
msgstr ""

#: ../../releases/security.txt:47
# 0fc6f9e04b064cc28a5628ca45bcffa6
msgid "`CVE-2007-0404 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2007-0404&cid=3>`_: Filename validation issue in translation framework. `Full description <https://www.djangoproject.com/weblog/2006/aug/16/compilemessages/>`__"
msgstr ""

#: ../../releases/security.txt:50
#: ../../releases/security.txt:64
#: ../../releases/security.txt:80
#: ../../releases/security.txt:95
#: ../../releases/security.txt:110
#: ../../releases/security.txt:124
#: ../../releases/security.txt:136
#: ../../releases/security.txt:148
#: ../../releases/security.txt:159
#: ../../releases/security.txt:171
#: ../../releases/security.txt:184
#: ../../releases/security.txt:197
#: ../../releases/security.txt:209
#: ../../releases/security.txt:222
#: ../../releases/security.txt:234
#: ../../releases/security.txt:246
#: ../../releases/security.txt:258
#: ../../releases/security.txt:270
#: ../../releases/security.txt:285
#: ../../releases/security.txt:298
#: ../../releases/security.txt:311
#: ../../releases/security.txt:324
#: ../../releases/security.txt:337
#: ../../releases/security.txt:350
#: ../../releases/security.txt:362
#: ../../releases/security.txt:374
#: ../../releases/security.txt:386
#: ../../releases/security.txt:399
#: ../../releases/security.txt:411
#: ../../releases/security.txt:421
#: ../../releases/security.txt:433
#: ../../releases/security.txt:446
# cf1932a7829e4e0ba81f1e5b07ab7ead
# 8da30436fd8545099542344f12970685
# fa1f196418d14758ad7c7c8b9819c2e1
# 3e1894e168a44388a59aa350ed6e5635
# 359391d4a998405d8d81bb89b36ba7e1
# e753f849b0024158ab703e453e5bb507
# 768e1d3104ce44138ffe20c425d9ee84
# fb7724fa7862497483340556cbdd863a
# a58b2fa9590c45238facf42e4f9d78c2
# a7d9ca979384404eb921c687266aa1e5
# ae85d9540c454f428b977cf501209ca0
# ad66754cf7024109b43bfbfd9a14884a
# fdc4dd1ea36a4dc5b2aaf2afa1edd635
# dc5fb5d4084043bfb36cd8d2ad009f71
# 6b288d6b63a24dbb86b611c141ac6f8b
# 1c19fff1e4914feaa67a330a32707335
# c27668f929594c27b9ca9866305c7ea8
# 1e9d01e13a2c4a1c862f822b8e028081
# 302d55c9736545ed8432dcfa86864564
# 02626752b2494255b3ec226e51049d9f
# b353060f09c947a4a2f6b5c9f492516e
# ad5e989526b841a68aeebd769301fc27
# b0a6ff81507c425e829989d1d9a92476
# 7a7f51f624654b1ab207475787545d60
# 1ccd49bf0ae944d1a5f17e0c2c69f90a
# 93fc78230c2c4a9bbe8ce40727101ab1
# 90cdf412020b4112954497ba67c5a0e9
# d14d5432943549e19d65af2a134ef632
# 94727c87222a401da59b0c0118ba909e
# a9a63d9b548d441980fba6ebe1c881f2
# 53cb27cdb0964a1f92b66f1a4d29ceff
# ac83e6c8026c4df89c0faacb63e64bbc
msgid "Versions affected"
msgstr ""

#: ../../releases/security.txt:52
# 53f21a642df040dcbd95795cac44e57b
msgid "Django 0.90 `(patch) <https://github.com/django/django/commit/518d406e53>`__"
msgstr ""

#: ../../releases/security.txt:54
# 5db90975e67c4abfac71e082e0fa5c23
msgid "Django 0.91 `(patch) <https://github.com/django/django/commit/518d406e53>`__"
msgstr ""

#: ../../releases/security.txt:56
# 44b5a7b2be444e55ba5595f83d379fac
msgid "Django 0.95 `(patch) <https://github.com/django/django/commit/a132d411c6>`__ (released January 21 2007)"
msgstr ""

#: ../../releases/security.txt:59
# 0fe7880b220c4d668841cedc2c42718c
msgid "January 21, 2007 - CVE-2007-0405"
msgstr ""

#: ../../releases/security.txt:61
# 1821c6d4620d462ebe62241da8892ae6
msgid "`CVE-2007-0405 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2007-0405&cid=3>`_: Apparent \"caching\" of authenticated user. `Full description <https://www.djangoproject.com/weblog/2007/jan/21/0951/>`__"
msgstr ""

#: ../../releases/security.txt:66
# 21d6872ef9364ae383ae1a7b87aa93d9
msgid "Django 0.95 `(patch) <https://github.com/django/django/commit/e89f0a6558>`__"
msgstr ""

#: ../../releases/security.txt:69
# 366bbbeb34074d3386fa77a295a07f6f
msgid "Issues under Django's security process"
msgstr ""

#: ../../releases/security.txt:71
# 48d17a3a9c844f70b484e94bf9222005
msgid "All other security issues have been handled under versions of Django's security process. These are listed below."
msgstr ""

#: ../../releases/security.txt:75
# e75d9b756be449bfbb426cd1a504cb74
msgid "October 26, 2007 - CVE-2007-5712"
msgstr ""

#: ../../releases/security.txt:77
# ef2ac9352f6349b1a91cf8ab8173d262
msgid "`CVE-2007-5712 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2007-5712&cid=3>`_: Denial-of-service via arbitrarily-large ``Accept-Language`` header. `Full description <https://www.djangoproject.com/weblog/2007/oct/26/security-fix/>`__"
msgstr ""

#: ../../releases/security.txt:82
# 564df278a5d3482aaffd8e3a3871f37b
msgid "Django 0.91 `(patch) <https://github.com/django/django/commit/8bc36e726c9e8c75c681d3ad232df8e882aaac81>`__"
msgstr ""

#: ../../releases/security.txt:84
# 677e0eafadcf4edc965f3622f378326a
msgid "Django 0.95 `(patch) <https://github.com/django/django/commit/412ed22502e11c50dbfee854627594f0e7e2c234>`__"
msgstr ""

#: ../../releases/security.txt:86
# 97b6e74817d54c29b86779de33ecf428
msgid "Django 0.96 `(patch) <https://github.com/django/django/commit/7dd2dd08a79e388732ce00e2b5514f15bd6d0f6f>`__"
msgstr ""

#: ../../releases/security.txt:90
# c84d63bb2e37426da91646ca5e391705
msgid "May 14, 2008 - CVE-2008-2302"
msgstr ""

#: ../../releases/security.txt:92
# c98376a0e6ad4b2a96e931b28db457ed
msgid "`CVE-2008-2302 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2008-2302&cid=3>`_: XSS via admin login redirect. `Full description <https://www.djangoproject.com/weblog/2008/may/14/security/>`__"
msgstr ""

#: ../../releases/security.txt:97
# 1be99f6ce5234dbaa2ee5d3bbfd99a3d
msgid "Django 0.91 `(patch) <https://github.com/django/django/commit/50ce7fb57d>`__"
msgstr ""

#: ../../releases/security.txt:99
# f2c960fc7fbc4cec9a42cb2679d83f80
msgid "Django 0.95 `(patch) <https://github.com/django/django/commit/50ce7fb57d>`__"
msgstr ""

#: ../../releases/security.txt:101
# cf544d42b31f44549eb28924b7261aab
msgid "Django 0.96 `(patch) <https://github.com/django/django/commit/7791e5c050>`__"
msgstr ""

#: ../../releases/security.txt:105
# 7f72cbd83d0349e6a84047e07b442e88
msgid "September 2, 2008 - CVE-2008-3909"
msgstr ""

#: ../../releases/security.txt:107
# 0dd42a434f5445d386bb7bc5bba0ca8d
msgid "`CVE-2008-3909 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2008-3909&cid=3>`_: CSRF via preservation of POST data during admin login. `Full description <https://www.djangoproject.com/weblog/2008/sep/02/security/>`__"
msgstr ""

#: ../../releases/security.txt:112
# ad6a63007aaa49eda9ac87d22cd2ba5f
msgid "Django 0.91 `(patch) <https://github.com/django/django/commit/44debfeaa4473bd28872c735dd3d9afde6886752>`__"
msgstr ""

#: ../../releases/security.txt:114
# 0def4b436243423a94365278baa7db82
msgid "Django 0.95 `(patch) <https://github.com/django/django/commit/aee48854a164382c655acb9f18b3c06c3d238e81>`__"
msgstr ""

#: ../../releases/security.txt:116
# 9e8220aa7e4d42d0b11ece855932e2cd
msgid "Django 0.96 `(patch) <https://github.com/django/django/commit/7e0972bded362bc4b851c109df2c8a6548481a8e>`__"
msgstr ""

#: ../../releases/security.txt:119
# c0485e4c60884649bb57d4be5cf8bfdb
msgid "July 28, 2009 - CVE-2009-2659"
msgstr ""

#: ../../releases/security.txt:121
# 5081ba87f86f4369a636414e4d50814c
msgid "`CVE-2009-2659 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2009-2659&cid=3>`_: Directory-traversal in development server media handler. `Full description <https://www.djangoproject.com/weblog/2009/jul/28/security/>`__"
msgstr ""

#: ../../releases/security.txt:126
# cc628594d2654a908dc920280a48aaa4
msgid "Django 0.96 `(patch) <https://github.com/django/django/commit/da85d76fd6>`__"
msgstr ""

#: ../../releases/security.txt:128
# b14a2bffcde9486cbe00ed660f03818a
msgid "Django 1.0 `(patch) <https://github.com/django/django/commit/df7f917b7f>`__"
msgstr ""

#: ../../releases/security.txt:131
# 79aeea2df92b43bdb5b76c80d4c05e68
msgid "October 9, 2009 - CVE-2009-3965"
msgstr ""

#: ../../releases/security.txt:133
# 377f7e6560074376a579696268152b3c
msgid "`CVE-2009-3965 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2009-3695&cid=3>`_: Denial-of-service via pathological regular expression performance. `Full description <https://www.djangoproject.com/weblog/2009/oct/09/security/>`__"
msgstr ""

#: ../../releases/security.txt:138
# 41c3adbc59d84413854a1fdd46b91ed1
msgid "Django 1.0 `(patch) <https://github.com/django/django/commit/594a28a904>`__"
msgstr ""

#: ../../releases/security.txt:140
# f0bff96424e64b75b4ca83e81f836041
msgid "Django 1.1 `(patch) <https://github.com/django/django/commit/e3e992e18b>`__"
msgstr ""

#: ../../releases/security.txt:143
# 4875df13e9414b7795ec25fca484d8c6
msgid "September 8, 2010 - CVE-2010-3082"
msgstr ""

#: ../../releases/security.txt:145
# 7d4d4335d1544203af4120e9596d862b
msgid "`CVE-2010-3082 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-3082&cid=3>`_: XSS via trusting unsafe cookie value. `Full description <https://www.djangoproject.com/weblog/2010/sep/08/security-release/>`__"
msgstr ""

#: ../../releases/security.txt:150
# 04ef56fe964e41b0a43490440e0d2299
msgid "Django 1.2 `(patch) <https://github.com/django/django/commit/7f84657b6b>`__"
msgstr ""

#: ../../releases/security.txt:154
# ad5798edc6a74676b42b80f3d9220e23
msgid "December 22, 2010 - CVE-2010-4534"
msgstr ""

#: ../../releases/security.txt:156
# 8a14a2ef1d1e45809779fe184fc8a57a
msgid "`CVE-2010-4534 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-4534&cid=3>`_: Information leakage in administrative interface. `Full description <https://www.djangoproject.com/weblog/2010/dec/22/security/>`__"
msgstr ""

#: ../../releases/security.txt:161
# 27165a5b522243698bed342b2de8535e
msgid "Django 1.1 `(patch) <https://github.com/django/django/commit/17084839fd>`__"
msgstr ""

#: ../../releases/security.txt:163
# 01ee8bb538634a63984e72b5dc96a2e5
msgid "Django 1.2 `(patch) <https://github.com/django/django/commit/85207a245b>`__"
msgstr ""

#: ../../releases/security.txt:166
# 1a4f0c1802904ff2b98471c734372b5e
msgid "December 22, 2010 - CVE-2010-4535"
msgstr ""

#: ../../releases/security.txt:168
# e20de6b748dd4ae780d39599fe00f392
msgid "`CVE-2010-4535 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-4535&cid=2>`_: Denial-of-service in password-reset mechanism. `Full description <https://www.djangoproject.com/weblog/2010/dec/22/security/>`__"
msgstr ""

#: ../../releases/security.txt:173
# 3236504c5cda4522a973dad2a931cfe4
msgid "Django 1.1 `(patch) <https://github.com/django/django/commit/7f8dd9cbac>`__"
msgstr ""

#: ../../releases/security.txt:175
# 4d1880698b1d4ea58f435180b5e4f2e1
msgid "Django 1.2 `(patch) <https://github.com/django/django/commit/d5d8942a16>`__"
msgstr ""

#: ../../releases/security.txt:179
# 4fb68e8b3cbd4c03be80400f9e0a6ca3
msgid "February 8, 2011 - CVE-2011-0696"
msgstr ""

#: ../../releases/security.txt:181
# ba5a50693f804e078c4e26e400f9a91b
msgid "`CVE-2011-0696 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-0696&cid=2>`_: CSRF via forged HTTP headers. `Full description <https://www.djangoproject.com/weblog/2011/feb/08/security/>`__"
msgstr ""

#: ../../releases/security.txt:186
# d85f6dd9d1f64cf1af93d706df74e7bb
msgid "Django 1.1 `(patch) <https://github.com/django/django/commit/408c5c873c>`__"
msgstr ""

#: ../../releases/security.txt:188
# c7cef0eae9634b9d90a0c5026f98ead7
msgid "Django 1.2 `(patch) <https://github.com/django/django/commit/818e70344e>`__"
msgstr ""

#: ../../releases/security.txt:192
# 878fbb95049b407b98860bf349c56353
msgid "February 8, 2011 - CVE-2011-0697"
msgstr ""

#: ../../releases/security.txt:194
# cb5c5b95752740299d825f9aeff1694a
msgid "`CVE-2011-0697 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-0697&cid=2>`_: XSS via unsanitized names of uploaded files. `Full description <https://www.djangoproject.com/weblog/2011/feb/08/security/>`__"
msgstr ""

#: ../../releases/security.txt:199
# e1c0b1dcd9044edcbd8e12a3a745432d
msgid "Django 1.1 `(patch) <https://github.com/django/django/commit/1966786d2d>`__"
msgstr ""

#: ../../releases/security.txt:201
# e186b884dcd14ab08909a9a7e4a2cf1e
msgid "Django 1.2 `(patch) <https://github.com/django/django/commit/1f814a9547>`__"
msgstr ""

#: ../../releases/security.txt:204
# 84b8da2029fb4c8ba736216e7eab756d
msgid "February 8, 2011 - CVE-2011-0698"
msgstr ""

#: ../../releases/security.txt:206
# bb369732f51147afb2b52208940db7b2
msgid "`CVE-2011-0698 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-0698&cid=2>`_: Directory-traversal on Windows via incorrect path-separator handling. `Full description <https://www.djangoproject.com/weblog/2011/feb/08/security/>`__"
msgstr ""

#: ../../releases/security.txt:211
# 631f123e41394c3e84826a95b2438d6f
msgid "Django 1.1 `(patch) <https://github.com/django/django/commit/570a32a047>`__"
msgstr ""

#: ../../releases/security.txt:213
# 3d01434fbf82421b9f35c6aba502831f
msgid "Django 1.2 `(patch) <https://github.com/django/django/commit/194566480b>`__"
msgstr ""

#: ../../releases/security.txt:217
# b9cdcc6f446044d5aae5646b7271f70b
msgid "September 9, 2011 - CVE-2011-4136"
msgstr ""

#: ../../releases/security.txt:219
# 87259c498c6c4c168e63797e65c20df1
msgid "`CVE-2011-4136 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-4136&cid=2>`_: Session manipulation when using memory-cache-backed session. `Full description <https://www.djangoproject.com/weblog/2011/sep/09/security-releases-issued/>`__"
msgstr ""

#: ../../releases/security.txt:224
# 4becbb5d9b8a4daa94c97e2d45c4ebb5
msgid "Django 1.2 `(patch) <https://github.com/django/django/commit/ac7c3a110f>`__"
msgstr ""

#: ../../releases/security.txt:226
# f8a159877076494e93e35b977f28c555
msgid "Django 1.3 `(patch) <https://github.com/django/django/commit/fbe2eead2f>`__"
msgstr ""

#: ../../releases/security.txt:229
# 7e57db6c4aee4c359deb7e14b8005a12
msgid "September 9, 2011 - CVE-2011-4137"
msgstr ""

#: ../../releases/security.txt:231
# 877139b9199441538b05966ab7e7851c
msgid "`CVE-2011-4137 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-4137&cid=2>`_: Denial-of-service via via ``URLField.verify_exists``. `Full description <https://www.djangoproject.com/weblog/2011/sep/09/security-releases-issued/>`__"
msgstr ""

#: ../../releases/security.txt:236
# c2954ebfdf0f469e8ce7213c0ff221de
msgid "Django 1.2 `(patch) <https://github.com/django/django/commit/7268f8af86>`__"
msgstr ""

#: ../../releases/security.txt:238
# 7357d686fb2249789ec4c83a16978aad
msgid "Django 1.3 `(patch) <https://github.com/django/django/commit/1a76dbefdf>`__"
msgstr ""

#: ../../releases/security.txt:241
# 21aaf4b161514feba00ea29f6b1987b6
msgid "September 9, 2011 - CVE-2011-4138"
msgstr ""

#: ../../releases/security.txt:243
# 86abc4228eeb48fb95accc8edfbca4d0
msgid "`CVE-2011-4138 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-4138&cid=2>`_: Information leakage/arbitrary request issuance via ``URLField.verify_exists``. `Full description <https://www.djangoproject.com/weblog/2011/sep/09/security-releases-issued/>`__"
msgstr ""

#: ../../releases/security.txt:248
# 8df1efc87cb74306939f7b6da6424656
msgid "Django 1.2: `(patch) <https://github.com/django/django/commit/7268f8af86>`__"
msgstr ""

#: ../../releases/security.txt:250
# ccc6cb8d788e412a9b7e44edecdd6fbe
msgid "Django 1.3: `(patch) <https://github.com/django/django/commit/1a76dbefdf>`__"
msgstr ""

#: ../../releases/security.txt:253
# 9dcaf1c96c4b46119edb914c5f7c6403
msgid "September 9, 2011 - CVE-2011-4139"
msgstr ""

#: ../../releases/security.txt:255
# bcc24e2556854bf2aeaa61550802411b
msgid "`CVE-2011-4139 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-4139&cid=2>`_: ``Host`` header cache poisoning. `Full description <https://www.djangoproject.com/weblog/2011/sep/09/security-releases-issued/>`__"
msgstr ""

#: ../../releases/security.txt:260
# 40587a17d1f947c9b9183f279dbd2556
msgid "Django 1.2 `(patch) <https://github.com/django/django/commit/c613af4d64>`__"
msgstr ""

#: ../../releases/security.txt:262
# b8ed55d3baaf41dbaa2190e00b9e711e
msgid "Django 1.3 `(patch) <https://github.com/django/django/commit/2f7fadc38e>`__"
msgstr ""

#: ../../releases/security.txt:265
# 555a134996ee4b5ebb069f87edf41985
msgid "September 9, 2011 - CVE-2011-4140"
msgstr ""

#: ../../releases/security.txt:267
# a5814681ec7a43ba97215044fea53451
msgid "`CVE-2011-4140 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-4140&cid=2>`_: Potential CSRF via ``Host`` header.  `Full description <https://www.djangoproject.com/weblog/2011/sep/09/security-releases-issued/>`__"
msgstr ""

#: ../../releases/security.txt:272
# fe3b8127e5a74abf9ece5ed52b8dcc52
msgid "This notification was an advisory only, so no patches were issued."
msgstr ""

#: ../../releases/security.txt:274
# fad180d7e8fe43c2bd64d53e69497c83
msgid "Django 1.2"
msgstr ""

#: ../../releases/security.txt:276
# d199954f4cfe4694bd95064f9f5e2161
msgid "Django 1.3"
msgstr ""

#: ../../releases/security.txt:280
# b5af10ed39d244b6bab71b6b2080a9f1
msgid "July 30, 2012 - CVE-2012-3442"
msgstr ""

#: ../../releases/security.txt:282
# 8ed95dd4e8744a22b4a70df141657ea3
msgid "`CVE-2012-3442 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-3442&cid=2>`_: XSS via failure to validate redirect scheme. `Full description <https://www.djangoproject.com/weblog/2012/jul/30/security-releases-issued/>`__"
msgstr ""

#: ../../releases/security.txt:287
# 0833a63959f44183a731452906b4b663
msgid "Django 1.3: `(patch) <https://github.com/django/django/commit/4dea4883e6c50d75f215a6b9bcbd95273f57c72d>`__"
msgstr ""

#: ../../releases/security.txt:289
# f423c601b0194b48b666dc2842135ddb
msgid "Django 1.4: `(patch) <https://github.com/django/django/commit/e34685034b60be1112160e76091e5aee60149fa1>`__"
msgstr ""

#: ../../releases/security.txt:293
# bb8febd6d9904fd0ab0cc6bec0b1cfae
msgid "July 30, 2012 - CVE-2012-3443"
msgstr ""

#: ../../releases/security.txt:295
# 84da0f665e59480cbec8b87a995add3c
msgid "`CVE-2012-3443 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-3443&cid=2>`_: Denial-of-service via compressed image files. `Full description <https://www.djangoproject.com/weblog/2012/jul/30/security-releases-issued/>`__"
msgstr ""

#: ../../releases/security.txt:300
# cd374daccd4942dd812f1e68e642166e
msgid "Django 1.3: `(patch) <https://github.com/django/django/commit/b2eb4787a0fff9c9993b78be5c698e85108f3446>`__"
msgstr ""

#: ../../releases/security.txt:302
# d5431c0edbcc4601b8f43a68a77f5794
msgid "Django 1.4: `(patch) <https://github.com/django/django/commit/c14f325c4eef628bc7bfd8873c3a72aeb0219141>`__"
msgstr ""

#: ../../releases/security.txt:306
# bfc45a36b00d4f1eb418a06ed1e73261
msgid "July 30, 2012 - CVE-2012-3444"
msgstr ""

#: ../../releases/security.txt:308
# a680faa6cbf04e8e9a6edafdf4ab7e29
msgid "`CVE-2012-3444 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-3444&cid=2>`_: Denial-of-service via large image files. `Full description <https://www.djangoproject.com/weblog/2012/jul/30/security-releases-issued/>`__"
msgstr ""

#: ../../releases/security.txt:313
# f4728ce098b34aa8b32fcb5817cb8085
msgid "Django 1.3 `(patch) <https://github.com/django/django/commit/9ca0ff6268eeff92d0d0ac2c315d4b6a8e229155>`__"
msgstr ""

#: ../../releases/security.txt:315
# ee7cc64080784352a726376614521176
msgid "Django 1.4 `(patch) <https://github.com/django/django/commit/da33d67181b53fe6cc737ac1220153814a1509f6>`__"
msgstr ""

#: ../../releases/security.txt:319
# 07124382906f4636a2864e965e9fd16d
msgid "October 17, 2012 - CVE-2012-4520"
msgstr ""

#: ../../releases/security.txt:321
# 7e5d965c44b64cda87e4b9b4387512c2
msgid "`CVE-2012-4520 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-4520&cid=2>`_: ``Host`` header poisoning. `Full description <https://www.djangoproject.com/weblog/2012/oct/17/security/>`__"
msgstr ""

#: ../../releases/security.txt:326
# 5bdc6056994a42f1a0f9f441540ef70b
msgid "Django 1.3 `(patch) <https://github.com/django/django/commit/b45c377f8f488955e0c7069cad3f3dd21910b071>`__"
msgstr ""

#: ../../releases/security.txt:328
# c6970cc59549454d92858226f7007fc4
msgid "Django 1.4 `(patch) <https://github.com/django/django/commit/92d3430f12171f16f566c9050c40feefb830a4a3>`__"
msgstr ""

#: ../../releases/security.txt:332
# 6ee901581dc9408cabb9278a9ccc3fad
msgid "December 10, 2012 - No CVE 1"
msgstr ""

#: ../../releases/security.txt:334
# 8b2d01c17dab48d3a47c4f1574dc3d11
msgid "Additional hardening of ``Host`` header handling. `Full description <https://www.djangoproject.com/weblog/2012/dec/10/security/>`__"
msgstr ""

#: ../../releases/security.txt:339
# 6040d5fae6104f65b709dfe624864397
msgid "Django 1.3 `(patch) <https://github.com/django/django/commit/2da4ace0bc1bc1d79bf43b368cb857f6f0cd6b1b>`__"
msgstr ""

#: ../../releases/security.txt:341
# 61c281c74ece496286c6a5afa404c9ad
msgid "Django 1.4 `(patch) <https://github.com/django/django/commit/319627c184e71ae267d6b7f000e293168c7b6e09>`__"
msgstr ""

#: ../../releases/security.txt:345
# f93072f4c53f4725b70ddef48d7a7b05
msgid "December 10, 2012 - No CVE 2"
msgstr ""

#: ../../releases/security.txt:347
# dc99f77cf32e40bd94452aa190e3111b
msgid "Additional hardening of redirect validation. `Full description <https://www.djangoproject.com/weblog/2012/dec/10/security/>`__"
msgstr ""

#: ../../releases/security.txt:352
# 14248c9d6b11498f8d595502b1c272ae
msgid "Django 1.3: `(patch) <https://github.com/django/django/commit/1515eb46daa0897ba5ad5f0a2db8969255f1b343>`__"
msgstr ""

#: ../../releases/security.txt:354
# 835b7f4c392b4a0dafb50894385b7507
msgid "Django 1.4: `(patch) <https://github.com/django/django/commit/b2ae0a63aeec741f1e51bac9a95a27fd635f9652>`__"
msgstr ""

#: ../../releases/security.txt:357
# b695c9f8e9534430aefb70fb48a78295
msgid "February 19, 2013 - No CVE"
msgstr ""

#: ../../releases/security.txt:359
# 651af636a8a6402e9073bb8feb215c1a
msgid "Additional hardening of ``Host`` header handling. `Full description <https://www.djangoproject.com/weblog/2013/feb/19/security/>`__"
msgstr ""

#: ../../releases/security.txt:364
# 12933d9f3a8c49ed88ef3c86013e241a
msgid "Django 1.3 `(patch) <https://github.com/django/django/commit/27cd872e6e36a81d0bb6f5b8765a1705fecfc253>`__"
msgstr ""

#: ../../releases/security.txt:366
# 4e21905038a74ac5b27f7235c621eea4
msgid "Django 1.4 `(patch) <https://github.com/django/django/commit/9936fdb11d0bbf0bd242f259bfb97bbf849d16f8>`__"
msgstr ""

#: ../../releases/security.txt:369
# a880460feb664320936113f7136517b9
msgid "February 19, 2013 - CVE-2013-1664/1665"
msgstr ""

#: ../../releases/security.txt:371
# a47cc581d6f14b218bf90d10be7fe5ed
msgid "`CVE-2013-1664 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-1664&cid=2>`_ and `CVE-2013-1665 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-1665&cid=2>`_: Entity-based attacks against Python XML libraries. `Full description <https://www.djangoproject.com/weblog/2013/feb/19/security/>`__"
msgstr ""

#: ../../releases/security.txt:376
# a340cd02e6eb472ca5abb2b11fef3875
msgid "Django 1.3 `(patch) <https://github.com/django/django/commit/d19a27066b2247102e65412aa66917aff0091112>`__"
msgstr ""

#: ../../releases/security.txt:378
# f03509b868ca4e82872b140c5ccd95dd
msgid "Django 1.4 `(patch) <https://github.com/django/django/commit/1c60d07ba23e0350351c278ad28d0bd5aa410b40>`__"
msgstr ""

#: ../../releases/security.txt:381
# 2f1b387bed6746aa915018ff2edf02a0
msgid "February 19, 2013 - CVE-2013-0305"
msgstr ""

#: ../../releases/security.txt:383
# fdbde9ce88e640f7b80e6a05c393892d
msgid "`CVE-2013-0305 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-0305&cid=2>`_: Information leakage via admin history log.  `Full description <https://www.djangoproject.com/weblog/2013/feb/19/security/>`__"
msgstr ""

#: ../../releases/security.txt:388
# 0f2e839db85a48aeb95bb16b78ac9a91
msgid "Django 1.3 `(patch) <https://github.com/django/django/commit/d3a45e10c8ac8268899999129daa27652ec0da35>`__"
msgstr ""

#: ../../releases/security.txt:390
# 421a76e1e86d4503afa401a1c0802fff
msgid "Django 1.4 `(patch) <https://github.com/django/django/commit/0e7861aec73702f7933ce2a93056f7983939f0d6>`__"
msgstr ""

#: ../../releases/security.txt:394
# 9e710f5f71ee454c9dfb06489d5821c4
msgid "February 19, 2013 - CVE-2013-0306"
msgstr ""

#: ../../releases/security.txt:396
# b01f9f0258224b2ba10994b4ea7ba90b
msgid "`CVE-2013-0306 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-0306&cid=2>`_: Denial-of-service via formset ``max_num`` bypass. `Full description <https://www.djangoproject.com/weblog/2013/feb/19/security/>`__"
msgstr ""

#: ../../releases/security.txt:401
# c17a112efef54877b10ea2a2adb9fb0f
msgid "Django 1.3 `(patch) <https://github.com/django/django/commit/d7094bbce8cb838f3b40f504f198c098ff1cf727>`__"
msgstr ""

#: ../../releases/security.txt:403
# 5798bd5b1aac4db3ae3b6d42c6127d81
msgid "Django 1.4 `(patch) <https://github.com/django/django/commit/0cc350a896f70ace18280410eb616a9197d862b0>`__"
msgstr ""

#: ../../releases/security.txt:406
# eaac0701bba64c008ebbfc1e01af5115
msgid "August 13, 2013 - Awaiting CVE 1"
msgstr ""

#: ../../releases/security.txt:408
# 219f4270647e44638a13e5d8b3bcd09b
msgid "(CVE not yet issued): XSS via admin trusting ``URLField`` values. `Full description <https://www.djangoproject.com/weblog/2013/aug/13/security-releases-issued/>`__"
msgstr ""

#: ../../releases/security.txt:413
# 2180c2778e344599834317f188877c03
msgid "Django 1.5 `(patch) <https://github.com/django/django/commit/90363e388c61874add3f3557ee654a996ec75d78>`__"
msgstr ""

#: ../../releases/security.txt:416
# 4aa7f1b8839144eda9d6bf3b36b34a90
msgid "August 13, 2013 - Awaiting CVE 2"
msgstr ""

#: ../../releases/security.txt:418
# 8238d777ca024d259ccef17046cf33f3
msgid "(CVE not yet issued): Possible XSS via unvalidated URL redirect schemes. `Full description <https://www.djangoproject.com/weblog/2013/aug/13/security-releases-issued/>`__"
msgstr ""

#: ../../releases/security.txt:423
# 268eca5f380c4eca8afd0feca1417b33
msgid "Django 1.4 `(patch) <https://github.com/django/django/commit/ec67af0bd609c412b76eaa4cc89968a2a8e5ad6a>`__"
msgstr ""

#: ../../releases/security.txt:425
# bf4a82f2046442c681915f0823596e9a
msgid "Django 1.5 `(patch) <https://github.com/django/django/commit/1a274ccd6bc1afbdac80344c9b6e5810c1162b5f>`__"
msgstr ""

#: ../../releases/security.txt:428
# dedbc49cc8614850a266f872300b658e
msgid "September 10, 2013 - CVE-2013-4315"
msgstr ""

#: ../../releases/security.txt:430
# 7b23291c8736448c9cbf56a50f0f2524
msgid "`CVE-2013-4315 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-4315&cid=2>`_ Directory-traversal via ``ssi`` template tag. `Full description <https://www.djangoproject.com/weblog/2013/sep/10/security-releases-issued/>`__"
msgstr ""

#: ../../releases/security.txt:435
# fd01719f8cf246eab662e1765664a95d
msgid "Django 1.4 `(patch) <https://github.com/django/django/commit/87d2750b39f6f2d54b7047225521a44dcd37e896>`__"
msgstr ""

#: ../../releases/security.txt:437
# 99efed8569894bc89d42a49aafcbbf2b
msgid "Django 1.5 `(patch) <https://github.com/django/django/commit/988b61c550d798f9a66d17ee0511fb7a9a7f33ca>`__"
msgstr ""

#: ../../releases/security.txt:441
# 352cf913e70b4ddfa580d6fa183a7607
msgid "September 14, 2013 - CVE-2013-1443"
msgstr ""

#: ../../releases/security.txt:443
# c1473a53cc184ace903d5990e29e281d
msgid "CVE-2013-1443: Denial-of-service via large passwords. `Full description <https://www.djangoproject.com/weblog/2013/sep/15/security/>`__"
msgstr ""

#: ../../releases/security.txt:448
# 94895c4bad7e4e39842be56a2daceb24
msgid "Django 1.4 `(patch <https://github.com/django/django/commit/3f3d887a6844ec2db743fee64c9e53e04d39a368>`__ and `Python compatibility fix) <https://github.com/django/django/commit/6903d1690a92aa040adfb0c8eb37cf62e4206714>`__"
msgstr ""

#: ../../releases/security.txt:450
# 0067e04711c64aec90d32bca8e70abf1
msgid "Django 1.5 `(patch) <https://github.com/django/django/commit/22b74fa09d7ccbc8c52270d648a0da7f3f0fa2bc>`__"
msgstr ""

