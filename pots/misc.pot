# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Django 1.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-25 16:31+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../misc/api-stability.txt:3
# 61db924658bd43518ba12af6a7e3e12c
msgid "API stability"
msgstr ""

#: ../../misc/api-stability.txt:5
# a94849e47c7f464c8ab65fb83b18d7c5
msgid ":doc:`The release of Django 1.0 </releases/1.0>` comes with a promise of API stability and forwards-compatibility. In a nutshell, this means that code you develop against a 1.X version of Django will continue to work with future 1.X releases. You may need to make minor changes when upgrading the version of Django your project uses: see the \"Backwards incompatible changes\" section of the :doc:`release note </releases/index>` for the version or versions to which you are upgrading."
msgstr ""

#: ../../misc/api-stability.txt:14
# 8417d14c250b4303bc985a38d7358e10
msgid "What \"stable\" means"
msgstr ""

#: ../../misc/api-stability.txt:16
# 41aefb8097e9454885314f1968072ab9
msgid "In this context, stable means:"
msgstr ""

#: ../../misc/api-stability.txt:18
# 745c7753146d4e329f0b4029a2d0783f
msgid "All the public APIs (everything in this documentation) will not be moved or renamed without providing backwards-compatible aliases."
msgstr ""

#: ../../misc/api-stability.txt:21
# afdf5d682f7c48f4a1aefb12c04a91a2
msgid "If new features are added to these APIs -- which is quite possible -- they will not break or change the meaning of existing methods. In other words, \"stable\" does not (necessarily) mean \"complete.\""
msgstr ""

#: ../../misc/api-stability.txt:25
# aa4abba93d064af1b5d9c51cd40db622
msgid "If, for some reason, an API declared stable must be removed or replaced, it will be declared deprecated but will remain in the API for at least two minor version releases. Warnings will be issued when the deprecated method is called."
msgstr ""

#: ../../misc/api-stability.txt:30
# 97ebe5cd510b4b59808dfe321a815b1d
msgid "See :ref:`official-releases` for more details on how Django's version numbering scheme works, and how features will be deprecated."
msgstr ""

#: ../../misc/api-stability.txt:33
# 216dff117973440e8b715c6db2d0ad9b
msgid "We'll only break backwards compatibility of these APIs if a bug or security hole makes it completely unavoidable."
msgstr ""

#: ../../misc/api-stability.txt:37
# c056096ee383427cb3a9f9b49f310107
msgid "Stable APIs"
msgstr ""

#: ../../misc/api-stability.txt:39
# 9823feb53be24500a365f7c70e3f581c
msgid "In general, everything covered in the documentation -- with the exception of anything in the :doc:`internals area </internals/index>` is considered stable."
msgstr ""

#: ../../misc/api-stability.txt:43
# e89276e3e75549358e9583773dcdde05
msgid "Exceptions"
msgstr ""

#: ../../misc/api-stability.txt:45
# 283c04b3085b468b8cbb01c3a1452a90
msgid "There are a few exceptions to this stability and backwards-compatibility promise."
msgstr ""

#: ../../misc/api-stability.txt:49
# 43743422002a484cbc0b76b4506b57d4
msgid "Security fixes"
msgstr ""

#: ../../misc/api-stability.txt:51
# 6a401e9434254f6f9823e91644605e00
msgid "If we become aware of a security problem -- hopefully by someone following our :ref:`security reporting policy <reporting-security-issues>` -- we'll do everything necessary to fix it. This might mean breaking backwards compatibility; security trumps the compatibility guarantee."
msgstr ""

#: ../../misc/api-stability.txt:57
# 25c35ac303d842158aec38482cac8d8b
msgid "APIs marked as internal"
msgstr ""

#: ../../misc/api-stability.txt:59
# 3f10204374bb4075824235ab6633eba9
msgid "Certain APIs are explicitly marked as \"internal\" in a couple of ways:"
msgstr ""

#: ../../misc/api-stability.txt:61
# 4ce4a084d2ee49328fd5168498b8114f
msgid "Some documentation refers to internals and mentions them as such. If the documentation says that something is internal, we reserve the right to change it."
msgstr ""

#: ../../misc/api-stability.txt:65
# 8b4f0986a50b4aefa097a504b33111c0
msgid "Functions, methods, and other objects prefixed by a leading underscore (``_``). This is the standard Python way of indicating that something is private; if any method starts with a single ``_``, it's an internal API."
msgstr ""

#: ../../misc/design-philosophies.txt:3
# 345c508e1ca44d3ca5ef1c1801127453
msgid "Design philosophies"
msgstr ""

#: ../../misc/design-philosophies.txt:5
# 9abd450486f54c4f95a8b60ae81ffbc7
msgid "This document explains some of the fundamental philosophies Django's developers have used in creating the framework. Its goal is to explain the past and guide the future."
msgstr ""

#: ../../misc/design-philosophies.txt:10
# fd3a5fe102f446129b52901ab6e4a49d
msgid "Overall"
msgstr ""

#: ../../misc/design-philosophies.txt:15
#: ../../misc/design-philosophies.txt:155
#: ../../misc/design-philosophies.txt:300
# 2a20075517b74c7d9f6124d5652fdedf
# 4ffd3dc299be4549be2eb10a93fddac1
# 2060f13f72c0494cb736a7d1e27549e1
msgid "Loose coupling"
msgstr ""

#: ../../misc/design-philosophies.txt:19
# 6c994fc1149a4e98914c60e152194c96
msgid "A fundamental goal of Django's stack is `loose coupling and tight cohesion`_. The various layers of the framework shouldn't \"know\" about each other unless absolutely necessary."
msgstr ""

#: ../../misc/design-philosophies.txt:23
# 88979b9a6316457fa5c108098fbe49cf
msgid "For example, the template system knows nothing about Web requests, the database layer knows nothing about data display and the view system doesn't care which template system a programmer uses."
msgstr ""

#: ../../misc/design-philosophies.txt:27
# 9fc84a1f0be4411a93a683982620fae1
msgid "Although Django comes with a full stack for convenience, the pieces of the stack are independent of another wherever possible."
msgstr ""

#: ../../misc/design-philosophies.txt:35
# 99330328e9444d659e4a7c513565f077
msgid "Less code"
msgstr ""

#: ../../misc/design-philosophies.txt:37
# 205a2307814448498dfd1b3fda2b0dcc
msgid "Django apps should use as little code as possible; they should lack boilerplate. Django should take full advantage of Python's dynamic capabilities, such as introspection."
msgstr ""

#: ../../misc/design-philosophies.txt:44
# 76765755bd874c7d8464e641d23216c4
msgid "Quick development"
msgstr ""

#: ../../misc/design-philosophies.txt:46
# 407ac1d43bb84b2ca42989bc0100cffe
msgid "The point of a Web framework in the 21st century is to make the tedious aspects of Web development fast. Django should allow for incredibly quick Web development."
msgstr ""

#: ../../misc/design-philosophies.txt:53
# ff6cb3e675ec4800bf1dbe7e85903ec6
msgid "Don't repeat yourself (DRY)"
msgstr ""

#: ../../misc/design-philosophies.txt:59
# 74851d22d5ed41d2aa089ef95cb82816
msgid "Every distinct concept and/or piece of data should live in one, and only one, place. Redundancy is bad. Normalization is good."
msgstr ""

#: ../../misc/design-philosophies.txt:62
# a16dd7e2d8d646bb86dbaf64254edbd6
msgid "The framework, within reason, should deduce as much as possible from as little as possible."
msgstr ""

#: ../../misc/design-philosophies.txt:67
# 1c5e4c889fed469db7674c91b9656148
msgid "The `discussion of DRY on the Portland Pattern Repository`__"
msgstr ""

#: ../../misc/design-philosophies.txt:74
#: ../../misc/design-philosophies.txt:95
# f614d2f90c114654b713721e13d2046d
# fb6fd7202a8d49e59ddfcf63faa364e2
msgid "Explicit is better than implicit"
msgstr ""

#: ../../misc/design-philosophies.txt:76
# 2151650c82cb4cc1a098ef973c89ad24
msgid "This is a core Python principle listed in :pep:`20`, and it means Django shouldn't do too much \"magic.\" Magic shouldn't happen unless there's a really good reason for it. Magic is worth using only if it creates a huge convenience unattainable in other ways, and it isn't implemented in a way that confuses developers who are trying to learn how to use the feature."
msgstr ""

#: ../../misc/design-philosophies.txt:85
# 10dbd03967e24114bf2975eef45edcbe
msgid "Consistency"
msgstr ""

#: ../../misc/design-philosophies.txt:87
# 7c7c98f12f1f4c5d89cdf3ae05b1f0d9
msgid "The framework should be consistent at all levels. Consistency applies to everything from low-level (the Python coding style used) to high-level (the \"experience\" of using Django)."
msgstr ""

#: ../../misc/design-philosophies.txt:92
# 70420e6403aa4fccaa0c3aa1efe138af
msgid "Models"
msgstr ""

#: ../../misc/design-philosophies.txt:97
# 193df2c6cce042199d6e229ac5674061
msgid "Fields shouldn't assume certain behaviors based solely on the name of the field. This requires too much knowledge of the system and is prone to errors. Instead, behaviors should be based on keyword arguments and, in some cases, on the type of the field."
msgstr ""

#: ../../misc/design-philosophies.txt:103
# 400111d4c08a46c7a3cb691bfa8d9032
msgid "Include all relevant domain logic"
msgstr ""

#: ../../misc/design-philosophies.txt:105
# 074a211cecec42c9a75c3c659be276c4
msgid "Models should encapsulate every aspect of an \"object,\" following Martin Fowler's `Active Record`_ design pattern."
msgstr ""

#: ../../misc/design-philosophies.txt:108
# 5339f12b25bb42f1954ea08c25b005ca
msgid "This is why both the data represented by a model and information about it (its human-readable name, options like default ordering, etc.) are defined in the model class; all the information needed to understand a given model should be stored *in* the model."
msgstr ""

#: ../../misc/design-philosophies.txt:116
# 86b26e0d432e47579cc4392685128ca0
msgid "Database API"
msgstr ""

#: ../../misc/design-philosophies.txt:118
# 98b372246f474db088150047505fd212
msgid "The core goals of the database API are:"
msgstr ""

#: ../../misc/design-philosophies.txt:121
# e153784b92ab4bfb91942cac0cd9e7d7
msgid "SQL efficiency"
msgstr ""

#: ../../misc/design-philosophies.txt:123
# 3fa2e532134a4bdcb5d652b1121514e1
msgid "It should execute SQL statements as few times as possible, and it should optimize statements internally."
msgstr ""

#: ../../misc/design-philosophies.txt:126
# c4cb0b09b61c4346b5aad3422580715a
msgid "This is why developers need to call ``save()`` explicitly, rather than the framework saving things behind the scenes silently."
msgstr ""

#: ../../misc/design-philosophies.txt:129
# f06d91c119de4f33a53a418d82f0f1b4
msgid "This is also why the ``select_related()`` ``QuerySet`` method exists. It's an optional performance booster for the common case of selecting \"every related object.\""
msgstr ""

#: ../../misc/design-philosophies.txt:134
# 60ebeb1099de4190b07c4c0620e979c0
msgid "Terse, powerful syntax"
msgstr ""

#: ../../misc/design-philosophies.txt:136
# a73477e146f64bdd8c105d21d9f90d3b
msgid "The database API should allow rich, expressive statements in as little syntax as possible. It should not rely on importing other modules or helper objects."
msgstr ""

#: ../../misc/design-philosophies.txt:139
# 11a23665e1464ddf87a3ff4980d00ba2
msgid "Joins should be performed automatically, behind the scenes, when necessary."
msgstr ""

#: ../../misc/design-philosophies.txt:141
# be46ced514d94142b43df3c86a4a8ae2
msgid "Every object should be able to access every related object, systemwide. This access should work both ways."
msgstr ""

#: ../../misc/design-philosophies.txt:145
# f6a1da4723584eada3d77c29dca1f6e3
msgid "Option to drop into raw SQL easily, when needed"
msgstr ""

#: ../../misc/design-philosophies.txt:147
# 25d8ece8901e4ecca7e6a4c45cb1233d
msgid "The database API should realize it's a shortcut but not necessarily an end-all-be-all. The framework should make it easy to write custom SQL -- entire statements, or just custom ``WHERE`` clauses as custom parameters to API calls."
msgstr ""

#: ../../misc/design-philosophies.txt:152
# 7102c9481561482394c51c5de5e3c914
msgid "URL design"
msgstr ""

#: ../../misc/design-philosophies.txt:157
# 06881738038b4794a3703cff14f9c033
msgid "URLs in a Django app should not be coupled to the underlying Python code. Tying URLs to Python function names is a Bad And Ugly Thing."
msgstr ""

#: ../../misc/design-philosophies.txt:160
# 736a89a1048049f082e044b66b3454e6
msgid "Along these lines, the Django URL system should allow URLs for the same app to be different in different contexts. For example, one site may put stories at ``/stories/``, while another may use ``/news/``."
msgstr ""

#: ../../misc/design-philosophies.txt:165
# 8c6092ad1803488292422aa1fda9fe15
msgid "Infinite flexibility"
msgstr ""

#: ../../misc/design-philosophies.txt:167
# a259911d716748c984afaa2d49427baa
msgid "URLs should be as flexible as possible. Any conceivable URL design should be allowed."
msgstr ""

#: ../../misc/design-philosophies.txt:171
# b12f422320bd40bb85675bc5c2247541
msgid "Encourage best practices"
msgstr ""

#: ../../misc/design-philosophies.txt:173
# a076fb446b094bee93336a2f6c281fce
msgid "The framework should make it just as easy (or even easier) for a developer to design pretty URLs than ugly ones."
msgstr ""

#: ../../misc/design-philosophies.txt:176
# e3aea62262df4693ab20a8ae181ca7cb
msgid "File extensions in Web-page URLs should be avoided."
msgstr ""

#: ../../misc/design-philosophies.txt:178
# 9655e2aee5e04276a364ca8889ed2b50
msgid "Vignette-style commas in URLs deserve severe punishment."
msgstr ""

#: ../../misc/design-philosophies.txt:183
# 0e2e1f0a79474e0ab6bd48cb1ec7afe1
msgid "Definitive URLs"
msgstr ""

#: ../../misc/design-philosophies.txt:187
# c94c8d80dc414cba81f70fbeb026c01f
msgid "Technically, ``foo.com/bar`` and ``foo.com/bar/`` are two different URLs, and search-engine robots (and some Web traffic-analyzing tools) would treat them as separate pages. Django should make an effort to \"normalize\" URLs so that search-engine robots don't get confused."
msgstr ""

#: ../../misc/design-philosophies.txt:192
# da6f6038899b4e95a8fc2747fddd4960
msgid "This is the reasoning behind the :setting:`APPEND_SLASH` setting."
msgstr ""

#: ../../misc/design-philosophies.txt:195
# aa9cdce1663a4fcc8d2857f04c5198dc
msgid "Template system"
msgstr ""

#: ../../misc/design-philosophies.txt:200
# c538153bed06421e9d327649fe074850
msgid "Separate logic from presentation"
msgstr ""

#: ../../misc/design-philosophies.txt:202
# 6c50d204b2f848f49b0d1387721ed2c7
msgid "We see a template system as a tool that controls presentation and presentation-related logic -- and that's it. The template system shouldn't support functionality that goes beyond this basic goal."
msgstr ""

#: ../../misc/design-philosophies.txt:207
# fc67867db3ce4265869ada0633798ef6
msgid "Discourage redundancy"
msgstr ""

#: ../../misc/design-philosophies.txt:209
# 8fc7d3911e0248af987000a5aa641408
msgid "The majority of dynamic Web sites use some sort of common sitewide design -- a common header, footer, navigation bar, etc. The Django template system should make it easy to store those elements in a single place, eliminating duplicate code."
msgstr ""

#: ../../misc/design-philosophies.txt:214
# 3edf4373425f4ccaa62ddbfa7d532aac
msgid "This is the philosophy behind :ref:`template inheritance <template-inheritance>`."
msgstr ""

#: ../../misc/design-philosophies.txt:218
# b2d3c4a86aa543c9b4f044bb40268984
msgid "Be decoupled from HTML"
msgstr ""

#: ../../misc/design-philosophies.txt:220
# e4ef32b8cfcd48c1b39b562f1cee495d
msgid "The template system shouldn't be designed so that it only outputs HTML. It should be equally good at generating other text-based formats, or just plain text."
msgstr ""

#: ../../misc/design-philosophies.txt:225
# e3bf3e3e76914250925a6e0b31a87598
msgid "XML should not be used for template languages"
msgstr ""

#: ../../misc/design-philosophies.txt:229
# 9a1fe7288ebc44a481d19c95a5cccc53
msgid "Using an XML engine to parse templates introduces a whole new world of human error in editing templates -- and incurs an unacceptable level of overhead in template processing."
msgstr ""

#: ../../misc/design-philosophies.txt:234
# 393f820b997642bc803fef225cefb199
msgid "Assume designer competence"
msgstr ""

#: ../../misc/design-philosophies.txt:236
# 25a2787f8c584da185fc5f523a56f5e8
msgid "The template system shouldn't be designed so that templates necessarily are displayed nicely in WYSIWYG editors such as Dreamweaver. That is too severe of a limitation and wouldn't allow the syntax to be as nice as it is. Django expects template authors are comfortable editing HTML directly."
msgstr ""

#: ../../misc/design-philosophies.txt:242
# 3ab1f910080b4d0ba939e27b879f8cbb
msgid "Treat whitespace obviously"
msgstr ""

#: ../../misc/design-philosophies.txt:244
# 1656ce4804644fddb2c0f954a3546abb
msgid "The template system shouldn't do magic things with whitespace. If a template includes whitespace, the system should treat the whitespace as it treats text -- just display it. Any whitespace that's not in a template tag should be displayed."
msgstr ""

#: ../../misc/design-philosophies.txt:250
# 69cb8a0955324820969181bf17a63a02
msgid "Don't invent a programming language"
msgstr ""

#: ../../misc/design-philosophies.txt:252
# 822c91fef10c4030a860f09279f45f65
msgid "The template system intentionally doesn't allow the following:"
msgstr ""

#: ../../misc/design-philosophies.txt:254
# 1fe38eb9fe1f4f79a1232d1a615c10c5
msgid "Assignment to variables"
msgstr ""

#: ../../misc/design-philosophies.txt:255
# 1607d078c38c46b8bcb19ece30d4aab2
msgid "Advanced logic"
msgstr ""

#: ../../misc/design-philosophies.txt:257
# fca5d2257d41418bb0125832a9627d12
msgid "The goal is not to invent a programming language. The goal is to offer just enough programming-esque functionality, such as branching and looping, that is essential for making presentation-related decisions."
msgstr ""

#: ../../misc/design-philosophies.txt:261
# 4610e79aec9f4fb98614e342bb05187e
msgid "The Django template system recognizes that templates are most often written by *designers*, not *programmers*, and therefore should not assume Python knowledge."
msgstr ""

#: ../../misc/design-philosophies.txt:266
# c89fd79a473146178598df2fe41b854a
msgid "Safety and security"
msgstr ""

#: ../../misc/design-philosophies.txt:268
# 933822bbb4ed44f8a581412e0ad66330
msgid "The template system, out of the box, should forbid the inclusion of malicious code -- such as commands that delete database records."
msgstr ""

#: ../../misc/design-philosophies.txt:271
# 3115e4be71d845d99c0197b70c8473e0
msgid "This is another reason the template system doesn't allow arbitrary Python code."
msgstr ""

#: ../../misc/design-philosophies.txt:274
# ba0ee1145ade4ccb88ef3cfe0cfb4ddd
msgid "Extensibility"
msgstr ""

#: ../../misc/design-philosophies.txt:276
# 51a77592c1944382a854a6b17f2e1a9a
msgid "The template system should recognize that advanced template authors may want to extend its technology."
msgstr ""

#: ../../misc/design-philosophies.txt:279
# e7a04f353f6d4bd78b1529a4761aab3b
msgid "This is the philosophy behind custom template tags and filters."
msgstr ""

#: ../../misc/design-philosophies.txt:282
# 12bbd4a319ad4f769af8e3db69107160
msgid "Views"
msgstr ""

#: ../../misc/design-philosophies.txt:285
# 6cdb9a2a5a8d4e77889fb4526bc16df2
msgid "Simplicity"
msgstr ""

#: ../../misc/design-philosophies.txt:287
# 46333e91b15d48058e2feccb678aca82
msgid "Writing a view should be as simple as writing a Python function. Developers shouldn't have to instantiate a class when a function will do."
msgstr ""

#: ../../misc/design-philosophies.txt:291
# 621aed93bc0e4d38b608e52c9e882d3a
msgid "Use request objects"
msgstr ""

#: ../../misc/design-philosophies.txt:293
# 460174dadeed4273a530b7b46b7ebd0b
msgid "Views should have access to a request object -- an object that stores metadata about the current request. The object should be passed directly to a view function, rather than the view function having to access the request data from a global variable. This makes it light, clean and easy to test views by passing in \"fake\" request objects."
msgstr ""

#: ../../misc/design-philosophies.txt:302
# 673f755118d24040bf696fdf4de299df
msgid "A view shouldn't care about which template system the developer uses -- or even whether a template system is used at all."
msgstr ""

#: ../../misc/design-philosophies.txt:306
# 211cf6c5751a4f4eaf7b7537a47ee3f6
msgid "Differentiate between GET and POST"
msgstr ""

#: ../../misc/design-philosophies.txt:308
# 54f098f8aa6149348633820415715018
msgid "GET and POST are distinct; developers should explicitly use one or the other. The framework should make it easy to distinguish between GET and POST data."
msgstr ""

#: ../../misc/design-philosophies.txt:17
# fb738ba977f64e63825ecf92bf05573f
msgid "coupling"
msgstr ""

#: ../../misc/design-philosophies.txt:17
# fb738ba977f64e63825ecf92bf05573f
msgid "loose"
msgstr ""

#: ../../misc/design-philosophies.txt:55
# 5536692ff37f497a848fe8b4c59d04c3
msgid "DRY"
msgstr ""

#: ../../misc/design-philosophies.txt:55
# 5536692ff37f497a848fe8b4c59d04c3
msgid "Don't repeat yourself"
msgstr ""

#: ../../misc/design-philosophies.txt:185
# 954fa43ba11241da9edcf22ed4bce5ab
msgid "urls"
msgstr ""

#: ../../misc/design-philosophies.txt:185
# 954fa43ba11241da9edcf22ed4bce5ab
msgid "definitive"
msgstr ""

#: ../../misc/design-philosophies.txt:227
# 1b489aee8fa8451692edba9722c4c4ee
msgid "xml"
msgstr ""

#: ../../misc/design-philosophies.txt:227
# 1b489aee8fa8451692edba9722c4c4ee
msgid "suckiness of"
msgstr ""

#: ../../misc/distributions.txt:3
# 86e4346684884d79854cc892de32e4d7
msgid "Third-party distributions of Django"
msgstr ""

#: ../../misc/distributions.txt:5
# e07010bfc38d4c1a94821f6a5d7653f1
msgid "Many third-party distributors are now providing versions of Django integrated with their package-management systems. These can make installation and upgrading much easier for users of Django since the integration includes the ability to automatically install dependencies (like database adapters) that Django requires."
msgstr ""

#: ../../misc/distributions.txt:11
# b57d812fcc5d4d89a23f92234c435f85
msgid "Typically, these packages are based on the latest stable release of Django, so if you want to use the development version of Django you'll need to follow the instructions for :ref:`installing the development version <installing-development-version>` from our Git repository."
msgstr ""

#: ../../misc/distributions.txt:16
# 89bdfcfed2e14a1591d5a81ee2fc035d
msgid "If you're using Linux or a Unix installation, such as OpenSolaris, check with your distributor to see if they already package Django. If you're using a Linux distro and don't know how to find out if a package is available, then now is a good time to learn.  The Django Wiki contains a list of `Third Party Distributions`_ to help you out."
msgstr ""

#: ../../misc/distributions.txt:26
# ba95e4a57c314d1eb72b2662dbf8788f
msgid "For distributors"
msgstr ""

#: ../../misc/distributions.txt:28
# fa7cf09578764a14b6a34b38740c5c73
msgid "If you'd like to package Django for distribution, we'd be happy to help out! Please join the |django-developers| mailing list and introduce yourself."
msgstr ""

#: ../../misc/distributions.txt:31
# 31240f35eb044ce3861ed918609d3d1f
msgid "We also encourage all distributors to subscribe to the |django-announce| mailing list, which is a (very) low-traffic list for announcing new releases of Django and important bugfixes."
msgstr ""

#: ../../misc/index.txt:2
# 663191ecac9542c38df9b19e8f460ee4
msgid "Meta-documentation and miscellany"
msgstr ""

#: ../../misc/index.txt:4
# 75cbad9d74114cebb9fc7868ac90a206
msgid "Documentation that we can't find a more organized place for. Like that drawer in your kitchen with the scissors, batteries, duct tape, and other junk."
msgstr ""

